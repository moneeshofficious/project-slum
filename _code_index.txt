C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\ansitowin32_test.py
-----------------------------
class StreamWrapperTest(TestCase):
class AnsiToWin32Test(TestCase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\ansi_test.py
-----------------------------
class AnsiTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\initialise_test.py
-----------------------------
class InitTest(TestCase):
class JustFixWindowsConsoleTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\isatty_test.py
-----------------------------
def is_a_tty(stream):
class IsattyTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\utils.py
-----------------------------
class StreamTTY(StringIO):
class StreamNonTTY(StringIO):
def osname(name):
def replace_by(stream):
def replace_original_by(stream):
def pycharm():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\winterm_test.py
-----------------------------
class WinTermTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\ansi.py
-----------------------------
def code_to_chars(code):
def set_title(title):
def clear_screen(mode=2):
def clear_line(mode=2):
class AnsiCodes(object):
class AnsiCursor(object):
class AnsiFore(AnsiCodes):
class AnsiBack(AnsiCodes):
class AnsiStyle(AnsiCodes):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\ansitowin32.py
-----------------------------
class StreamWrapper(object):
class AnsiToWin32(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\initialise.py
-----------------------------
def _wipe_internal_state_for_tests():
def reset_all():
def init(autoreset=False, convert=None, strip=None, wrap=True):
def deinit():
def just_fix_windows_console():
def colorama_text(*args, **kwargs):
def reinit():
def wrap_stream(stream, convert, strip, autoreset, wrap):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\win32.py
-----------------------------

>         """struct in wincon.h."""
          _fields_ = [
              ("dwSize", COORD),
              ("dwCursorPosition", COORD),

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\winterm.py
-----------------------------
class WinColor(object):
class WinStyle(object):
class WinTerm(object):
def enable_vt_processing(fd):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\colorama\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\fullcoverage\encodings.py
-----------------------------
> """Imposter encodings module that installs a coverage-style tracer.
  
  This is NOT the encodings module; it is an imposter that sets up tracing
  instrumentation and then replaces itself with the real encodings module.
class FullCoverageTracer(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\annotate.py
-----------------------------
> """Source file annotation for coverage.py."""
  
  import io
  import os
class AnnotateReporter(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\backward.py
-----------------------------
> """Add things to old Pythons so I can pretend they are newer."""
  
  # This file's purpose is to provide modules to be imported from here.
  # pylint: disable=unused-import
def code_object(fn):
def format_local_datetime(dt):
def invalidate_import_caches():
def import_local_file(modname, modfile=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\bytecode.py
-----------------------------
> """Bytecode manipulation for coverage.py"""
  
  import types
  
def code_objects(code):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\cmdline.py
-----------------------------
> """Command-line support for coverage.py."""
  
  from __future__ import print_function
  
class Opts(object):
class CoverageOptionParser(optparse.OptionParser, object):
class GlobalOptionParser(CoverageOptionParser):
class CmdOptionParser(CoverageOptionParser):
def show_help(error=None, topic=None, parser=None):
class CoverageScript(object):
def unshell_list(s):
def unglob_args(args):
def main(argv=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\collector.py
-----------------------------
> """Raw data collector for coverage.py."""
  
  import os
  import sys
class Collector(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\config.py
-----------------------------
> """Config file for coverage.py"""
  
  import collections
  import copy
class HandyConfigParser(configparser.RawConfigParser):
class CoverageConfig(object):
def config_files_to_try(config_file):
def read_coverage_config(config_file, **kwargs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\context.py
-----------------------------
> """Determine contexts for coverage.py"""
  
  
  def combine_context_switchers(context_switchers):
def combine_context_switchers(context_switchers):
def should_start_context_test_function(frame):
def qualname_from_frame(frame):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\control.py
-----------------------------
> """Core control stuff for coverage.py."""
  
  import atexit
  import collections
def override_config(cov, **kwargs):
class Coverage(object):
def process_startup():
def _prevent_sub_process_measurement():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\data.py
-----------------------------
> """Coverage data for coverage.py.
  
  This file had the 4.x JSON data support, which is now gone.  This file still
  has storage-agnostic helpers, and is kept to avoid changing too many imports.
def line_counts(data, fullpath=False):
def add_data_to_hash(data, filename, hasher):
def combine_parallel_data(data, aliases=None, data_paths=None, strict=False, keep=False):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\debug.py
-----------------------------
> """Control of and utilities for debugging."""
  
  import contextlib
  import functools
class DebugControl(object):
class DebugControlString(DebugControl):
class NoDebugging(object):
def info_header(label):
def info_formatter(info):
def write_formatted_info(writer, header, info):
def short_stack(limit=None, skip=0):
def dump_stack_frames(limit=None, out=None, skip=0):
def clipped_repr(text, numchars=50):
def short_id(id64):
def add_pid_and_tid(text):
class SimpleReprMixin(object):
def simplify(v):                                            # pragma: debugging
def pp(v):                                                  # pragma: debugging
def filter_text(text, filters):
class CwdTracker(object):                                   # pragma: debugging
class DebugOutputFile(object):                              # pragma: debugging
def log(msg, stack=False):                                  # pragma: debugging
def decorate_methods(decorator, butnot=(), private=False):  # pragma: debugging
def break_in_pudb(func):                                    # pragma: debugging
def show_calls(show_args=True, show_stack=False, show_return=False):    # pragma: debugging
def _clean_stack_line(s):                                   # pragma: debugging

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\disposition.py
-----------------------------
> """Simple value objects for tracking what to do with files."""
  
  
  class FileDisposition(object):
class FileDisposition(object):
def disposition_init(cls, original_filename):
def disposition_debug_msg(disp):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\env.py
-----------------------------
> """Determine facts about the environment."""
  
  import os
  import platform
class PYBEHAVIOR(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\execfile.py
-----------------------------
> """Execute files of Python code."""
  
  import inspect
  import marshal
class DummyLoader(object):
class PyRunner(object):
def run_python_module(args):
def run_python_file(args):
def make_code_from_py(filename):
def make_code_from_pyc(filename):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\files.py
-----------------------------
> """File wrangling."""
  
  import hashlib
  import fnmatch
def set_relative_directory():
def relative_directory():
def relative_filename(filename):
def canonical_filename(filename):
def flat_rootname(filename):
def abs_file(path):
def python_reported_file(filename):
def isabs_anywhere(filename):
def prep_patterns(patterns):
class TreeMatcher(object):
class ModuleMatcher(object):
class FnmatchMatcher(object):
def sep(s):
def fnmatches_to_regex(patterns, case_insensitive=False, partial=False):
class PathAliases(object):
def find_python_files(dirname):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\html.py
-----------------------------
> """HTML reporting for coverage.py."""
  
  import datetime
  import json
def data_filename(fname, pkgdir=""):
def read_data(fname):
def write_html(fname, html):
class HtmlDataGeneration(object):
class HtmlReporter(object):
class IncrementalChecker(object):
def escape(t):
def pair(ratio):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\inorout.py
-----------------------------
> """Determining whether files are being measured/reported or not."""
  
  # For finding the stdlib
  import atexit
def canonical_path(morf, directory=False):
def name_for_module(filename, frame):
def module_is_namespace(mod):
def module_has_file(mod):
class InOrOut(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\jsonreport.py
-----------------------------
> """Json reporting for coverage.py"""
  import datetime
  import json
  import sys
class JsonReporter(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\misc.py
-----------------------------
> """Miscellaneous stuff for coverage.py."""
  
  import errno
  import hashlib
def isolate_module(mod):
def dummy_decorator_with_args(*args_unused, **kwargs_unused):
def nice_pair(pair):
def expensive(fn):
def bool_or_none(b):
def join_regex(regexes):
def file_be_gone(path):
def ensure_dir(directory):
def ensure_dir_for_file(path):
def output_encoding(outfile=None):
def filename_suffix(suffix):
class Hasher(object):
def _needs_to_implement(that, func_name):
class DefaultValue(object):
def substitute_variables(text, variables):
class BaseCoverageException(Exception):
class CoverageException(BaseCoverageException):
class NoSource(CoverageException):
class NoCode(NoSource):
class NotPython(CoverageException):
class ExceptionDuringRun(CoverageException):
class StopEverything(BaseCoverageException):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\multiproc.py
-----------------------------
> """Monkey-patching to add multiprocessing support for coverage.py"""
  
  import multiprocessing
  import multiprocessing.process
class ProcessWithCoverage(OriginalProcess):         # pylint: disable=abstract-method
class Stowaway(object):
def patch_multiprocessing(rcfile):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\numbits.py
-----------------------------
> """
  Functions to manipulate packed binary representations of number sets.
  
  To save space, coverage stores sets of line numbers in SQLite using a packed
def nums_to_numbits(nums):
def numbits_to_nums(numbits):
def numbits_union(numbits1, numbits2):
def numbits_intersection(numbits1, numbits2):
def numbits_any_intersection(numbits1, numbits2):
def num_in_numbits(num, numbits):
def register_sqlite_functions(connection):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\parser.py
-----------------------------
> """Code parsing for coverage.py."""
  
  import ast
  import collections
class PythonParser(object):
class ByteParser(object):
class LoopBlock(object):
class FunctionBlock(object):
class TryBlock(object):
class ArcStart(collections.namedtuple("Arc", "lineno, cause")):
class NodeList(object):
class AstArcAnalyzer(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\phystokens.py
-----------------------------
> """Better tokenizing for coverage.py."""
  
  import codecs
  import keyword
def phys_tokens(toks):
def source_token_lines(source):
class CachedTokenizer(object):
def _source_encoding_py2(source):
def _source_encoding_py3(source):
def compile_unicode(source, filename, mode):
def neuter_encoding_declaration(source):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\plugin.py
-----------------------------
> """
  .. versionadded:: 4.0
  
  Plug-in interfaces for coverage.py.
class CoveragePlugin(object):
class FileTracer(object):
class FileReporter(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\plugin_support.py
-----------------------------
> """Support for plugins."""
  
  import os
  import os.path
class Plugins(object):
class LabelledDebug(object):
class DebugPluginWrapper(CoveragePlugin):
class DebugFileTracerWrapper(FileTracer):
class DebugFileReporterWrapper(FileReporter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\python.py
-----------------------------
> """Python source expertise for coverage.py"""
  
  import os.path
  import types
def read_python_source(filename):
def get_python_source(filename):
def get_zip_bytes(filename):
def source_for_file(filename):
def source_for_morf(morf):
class PythonFileReporter(FileReporter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\pytracer.py
-----------------------------
> """Raw data collector for coverage.py."""
  
  import atexit
  import dis
class PyTracer(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\report.py
-----------------------------
> """Reporter foundation for coverage.py."""
  import sys
  
  from coverage import env
def render_report(output_path, reporter, morfs):
def get_analysis_to_report(coverage, morfs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\results.py
-----------------------------
> """Results of coverage measurement."""
  
  import collections
  
class Analysis(object):
class Numbers(SimpleReprMixin):
def _line_ranges(statements, lines):
def format_lines(statements, lines, arcs=None):
def should_fail_under(total, fail_under, precision):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\sqldata.py
-----------------------------
> """Sqlite coverage data."""
  
  # TODO: factor out dataop debugging to a wrapper class?
  # TODO: make sure all dataop debugging is in place somehow
class CoverageData(SimpleReprMixin):
class SqliteDb(SimpleReprMixin):
def _regexp(text, pattern):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\summary.py
-----------------------------
> """Summary reporting"""
  
  import sys
  
class SummaryReporter(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\templite.py
-----------------------------
> """A simple Python template renderer, for a nano-subset of Django syntax.
  
  For a detailed discussion of this code, see this chapter from 500 Lines:
  http://aosabook.org/en/500L/a-template-engine.html
class TempliteSyntaxError(ValueError):
class TempliteValueError(ValueError):
class CodeBuilder(object):
class Templite(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\tomlconfig.py
-----------------------------
> """TOML configuration support for coverage.py"""
  
  import io
  import os
class TomlDecodeError(Exception):
class TomlConfigParser:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\version.py
-----------------------------
> """The version and URL for coverage.py"""
  # This file is exec'ed in setup.py, don't import anything!
  
  # Same semantics as sys.version_info.
def _make_version(major, minor, micro, releaselevel, serial):
def _make_url(major, minor, micro, releaselevel, serial):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\xmlreport.py
-----------------------------
> """XML reporting for coverage.py"""
  
  import os
  import os.path
def rate(hit, num):
class XmlReporter(object):
def serialize_xml(dom):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\__init__.py
-----------------------------
> """Code coverage measurement for Python.
  
  Ned Batchelder
  https://nedbatchelder.com/code/coverage

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\coverage\__main__.py
-----------------------------
> """Coverage.py's main entry point."""
  
  import sys
  from coverage.cmdline import main

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\iniconfig\exceptions.py
-----------------------------
class ParseError(Exception):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\iniconfig\_parse.py
-----------------------------
class _ParsedLine(NamedTuple):
def parse_lines(path: str, line_iter: list[str]) -> list[_ParsedLine]:
def _parseline(path: str, line: str, lineno: int) -> tuple[str | None, str | None]:
def iscommentline(line: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\iniconfig\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\iniconfig\__init__.py
-----------------------------
> """ brain-dead simple parser for ini-style files.
  (C) Ronny Pfannschmidt, Holger Krekel -- MIT licensed
class SectionWrapper:
class IniConfig:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\all_op_types.py
-----------------------------
> """All op types for integration testing.
def binop_types():
def binop_bit_cmp_types():
def binop_bit_shift_types():
def compare_types(a, b):
def compare_is_types(a):
def compare_in_types(a):
def boolop_types(a, b):
def named_constant_types(a):
def aug_assign_types(a, b):
def index_types(a):
def if_types(a):
def slice_types(a):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\conftest.py
-----------------------------
> """Test configuration, large and shared fixtures.
class FileAndTest(NamedTuple):
def stdoutIO():
def mock_Mutant():
def mock_trial_results(mock_Mutant):
def mock_results_summary(mock_trial_results):
def write_cov_file(line_data: Dict[str, List[int]], fname: str) -> None:
class MockArgs(NamedTuple):
def mock_args(tmp_path_factory, binop_file):
def mock_coverage_file(tmp_path_factory):
class SourceAndTargets(NamedTuple):
def mock_source_and_targets():
def augassign_file(tmp_path_factory):
def augassign_expected_locs():
def binop_file(tmp_path_factory):
def mock_binop_coverage_file(binop_file, tmp_path_factory):
def binop_expected_locs():
def sorted_binop_expected_locs(binop_expected_locs):
def mock_LocIdx():
def boolop_file(tmp_path_factory):
def boolop_expected_loc():
def single_binop_file_with_good_test(tmp_path_factory):
def single_binop_file_with_bad_test(tmp_path_factory):
def sleep_timeout(tmp_path_factory):
def compare_file(tmp_path_factory):
def compare_expected_locs():
def if_file(tmp_path_factory):
def if_expected_locs():
def index_file(tmp_path_factory):
def index_expected_locs():
def nameconst_file(tmp_path_factory):
def nameconst_expected_locs():
def slice_file(tmp_path_factory):
def slice_expected_locs():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_all_op_types.py
-----------------------------
>     """Test all operation types.
  
      This test ensures KeyError does not occur when accessing mutations by type.
      The test command is fake, so all mutations will survive, but this is designed to
def test_all_op_types(monkeypatch, tmp_path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_api.py
-----------------------------
> """Tests for the API.
def test_genome_ast(binop_file, binop_expected_locs):
def test_create_mutant_with_cache(binop_file, stdoutIO):
def test_filter_codes_ValueError():
def test_targets_TypeError():
def test_covered_targets_source_file_TypeError():
def test_covered_targets_coverage_file_TypeError(binop_file):
def test_mutate_MutationException(binop_file, mock_LocIdx):
def test_mutate_TypeError_source_file(mock_LocIdx):
def test_mutate_ValueError_target(binop_file, mock_LocIdx):
def test_covered_targets(filter_codes, binop_file, mock_binop_coverage_file):
def test_init_GenomeGroup_from_flat_folder(tmp_path):
def test_init_GenomeGroup_from_recursive_folder(tmp_path):
def test_init_GenomeGroup_from_single_file(binop_file):
def test_init_GenomeGroup_raise_TypeError():
def test_GenomeGroup_folder_exception():
def test_GenomeGroup_key_TypeError(key, binop_file):
def test_GenomeGroup_value_TypeError(value, binop_file):
def test_GenomeGroup_add_folder_with_exclusions(tmp_path):
def test_GenomeGroup_covered_targets(filter_codes, binop_file, mock_binop_coverage_file):
def test_GenomeGroup_TypeError_source_file():
def test_GenomeGroup_basic_properties(binop_file, boolop_file, compare_file):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_cache.py
-----------------------------
> """Tests for the cache module.
def test_check_cache_invalidation_mode_error(monkeypatch):
def test_check_cache_invalidation_mode_ok(monkeypatch):
def test_get_cache_file_loc():
def test_get_cache_file_loc_invalid():
def test_get_cache_file_loc_link_exception(monkeypatch):
def test_get_cache_file_loc_not_file(monkeypatch):
def test_create_cache_dirs(tmp_path):
def test_remove_existing_cache_files(tmp_path):
def test_remove_existing_cache_files_from_folder(tmp_path):
def test_get_cache_file_loc_invariant(s):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_cli.py
-----------------------------
> """Tests for the cli module.
def mock_TrialTimes():
def test_RunMode(mode, bod, bos, boe, bou):
def test_get_src_location_pkg(monkeypatch):
def test_get_src_location_error(monkeypatch):
def test_get_src_location_missing_file(monkeypatch):
def test_get_src_location_file(monkeypatch, binop_file):
class MockOpSet(NamedTuple):
def mock_get_compatible_sets(monkeypatch):
def test_selected_categories_empty_lists(mock_get_compatible_sets):
def test_selected_categories_wlist(mock_get_compatible_sets):
def test_selected_categories_blist(mock_get_compatible_sets):
def test_selected_categories_wblist(mock_get_compatible_sets):
def test_selected_categories_wblist_long(mock_get_compatible_sets):
def test_exception_raised(mock_trial_results):
def test_exception_not_raised(mock_trial_results):
def test_main(monkeypatch, mock_args, mock_results_summary):
def test_expected_arg_attrs():
def mock_parser():
def test_get_parser_actions(mock_parser):
class MockINI(NamedTuple):
def mock_ini_file(tmp_path):
def test_read_config_key_error(mock_ini_file):
def test_read_setup_cfg_missing_mutatest_ini(tmp_path, section, monkeypatch):
def test_search_file_order_bad_key_mutatest_ini(tmp_path, section, monkeypatch):
def test_read_ini_config_keys(mock_ini_file):
def test_parse_ini_config_with_cli_empty(mock_ini_file):
def test_parse_ini_config_with_cli_overrides(mock_ini_file):
def test_cli_epilog_invariant():
def test_cli_summary_report_invariant(mock_args, mock_TrialTimes, lm, li):
def test_syserror_negative_n_and_rseed(n, i):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_filters.py
-----------------------------
> """Tests for the filters.
def mock_CoverageFilter(mock_coverage_file):
def test_coverage_file_property(mock_CoverageFilter, mock_coverage_file):
def test_unset_coverage_file(fn):
def test_filter(mock_CoverageFilter, mock_source_and_targets, invert, expected):
def test_CategoryCodeFilter_properties():
def test_CategoryCodeFilter_filter(ast_class, invert, augassign_expected_locs, binop_expected_locs):
def test_invalid_code():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_report.py
-----------------------------
> """Tests for report formatting.
def test_get_reported_results(status, mock_trial_results):
def test_get_status_summary(mock_trial_results):
def test_build_report_section(mock_Mutant):
def test_analyze_mutant_trials(mock_trial_results):
def test_write_report(tmp_path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_run.py
-----------------------------
> """Tests for run.
def binop_Add_LocIdx():
def add_five_to_mult_mutant(binop_file, stdoutIO, binop_Add_LocIdx):
def test_capture_output():
def test_MutantTrialResult(returncode, expected_status, add_five_to_mult_mutant):
def test_create_mutation_and_run_trial(
def test_clean_trial_exception(binop_file, monkeypatch):
def test_clean_trial_timedelta(binop_file, monkeypatch):
def test_generate_sample(binop_file, sorted_binop_expected_locs):
def test_generate_sample_FileNotFoundError(binop_file, sorted_binop_expected_locs):
def test_get_mutation_sample_locations(popsize, nlocs, nexp, mock_LocIdx):
def test_get_mutation_sample_locations_ValueError(nloc, mock_LocIdx):
def test_get_genome_group_folder_and_file(tmp_path):
def test_break_on_check(return_code, config, mock_Mutant, mock_LocIdx):
def test_colorize_output_invariant_return(o, c):
def test_colorize_output_invariant_valid(color, o):
def change_to_tmp(monkeypatch, tmp_path):
def test_run_mutation_trials_good_binop(
def test_run_mutation_trials_bad_binop(
def test_run_mutation_trials_timeout(bot, exp_timeout_trials, sleep_timeout):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\test_transformers.py
-----------------------------
> """Tests for the transformers module.
  
  These tests rely heavily on fixtures defined in conftest.py.
def test_get_mutations_for_target(test_op):
def test_MutateAST_visit_read_only(binop_file):
def test_MutateAST_visit_augassign(augassign_file, augassign_expected_locs):
def test_MutateAST_visit_binop_37(binop_file):
def test_MutateAST_visit_boolop(boolop_file, boolop_expected_loc):
def test_MutateAST_visit_compare(idx, mut_op, lineno, compare_file, compare_expected_locs):
def test_MutateAST_visit_if(if_file, if_expected_locs):
def test_MutateAST_visit_index_neg(
def test_MutateAST_visit_nameconst(nameconst_file, nameconst_expected_locs):
def test_MutateAST_visit_subscript(slice_file, slice_expected_locs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\api.py
-----------------------------
> """
  API
  ---
  
class MutationException(Exception):
class Mutant(NamedTuple):
class Genome:
class GenomeGroupTarget(NamedTuple):
class GenomeGroup(MutableMapping):  # type: ignore

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\cache.py
-----------------------------
> """
  Cache
  -----
  
def check_cache_invalidation_mode() -> PycInvalidationMode:
def get_cache_file_loc(src_file: Union[str, Path]) -> Path:
def create_cache_dirs(cache_file: Path) -> None:
def remove_existing_cache_files(src_loc: Path) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\cli.py
-----------------------------
> """
  CLI
  ---
  
class SettingsFile(NamedTuple):
class RunMode(NamedTuple):
class TrialTimes(NamedTuple):
class PositiveIntegerAction(argparse.Action):
def get_constrained_float_action(
class ValidCategoryAction(argparse.Action):
class SurvivingMutantException(Exception):
class ParserActionMap(NamedTuple):
def cli_parser() -> argparse.ArgumentParser:
def cli_epilog() -> str:
def get_parser_actions(parser: argparse.ArgumentParser) -> ParserActionMap:
def read_ini_config(
def parse_ini_config_with_cli(
def cli_summary_report(
def get_src_location(src_loc: Optional[Path] = None) -> Path:
def selected_categories(only: List[str], skip: List[str]) -> List[str]:
def exception_processing(n_survivors: int, trial_results: List[MutantTrialResult]) -> None:
def cli_args(args: Sequence[str], search_config_files: bool = True) -> argparse.Namespace:
def cli_main() -> None:
def main(args: argparse.Namespace) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\filters.py
-----------------------------
> """
  Filters
  -------
  
class Filter(ABC):
class CoverageFilter(Filter):
class CategoryCodeFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\report.py
-----------------------------
> """
  Report
  ------
  
class ReportedMutants(NamedTuple):
class DisplayResults(NamedTuple):
def get_reported_results(trial_results: List[MutantTrialResult], status: str) -> ReportedMutants:
def get_status_summary(trial_results: List[MutantTrialResult]) -> Dict[str, Union[str, int]]:
def analyze_mutant_trials(trial_results: List[MutantTrialResult]) -> Tuple[str, DisplayResults]:
def build_report_section(title: str, mutants: List[MutantReport]) -> str:
def write_report(report: str, location: Path) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\run.py
-----------------------------
> """
  Run
  ---
  
class Config:
class MutantReport(NamedTuple):
class MutantTrialResult(NamedTuple):
class ResultsSummary(NamedTuple):
class BaselineTestException(Exception):
def colorize_output(output: str, color: str) -> str:
def capture_output(log_level: int) -> bool:
def clean_trial(src_loc: Path, test_cmds: List[str]) -> timedelta:
def get_sample(ggrp: GenomeGroup, ignore_coverage: bool) -> List[GenomeGroupTarget]:
def get_mutation_sample_locations(
def get_genome_group(src_loc: Path, config: Config) -> GenomeGroup:
def trial_output_check_break(
def create_mutation_run_trial(
def create_mutation_run_parallelcache_trial(
def mutation_sample_dispatch(
def run_mutation_trials(src_loc: Path, test_cmds: List[str], config: Config) -> ResultsSummary:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\transformers.py
-----------------------------
> """
  Transformers
  ------------
  
class LocIndex(NamedTuple):
class MutationOpSet(NamedTuple):
class LocIndexNode(Protocol):
class NodeSpan(NamedTuple):
class MutateBase(ast.NodeTransformer):
class NameConstantMixin:
class ConstantMixin:
def get_compatible_operation_sets() -> List[MutationOpSet]:
def get_mutations_for_target(target: LocIndex) -> Set[Any]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\_devtools.py
-----------------------------
> """Development tools.
  
  These are utility classes and functions used in the development process for new operations
  and features. They are not used by the main program, and are not covered in standard 
testing.
class NodeLister(ast.NodeVisitor):  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\mutatest\__init__.py
-----------------------------
> """Mutation initialization.

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\licenses\_spdx.py
-----------------------------
class SPDXLicense(TypedDict):
class SPDXException(TypedDict):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\licenses\__init__.py
-----------------------------
>     """Raised when a license-expression string is invalid
  
      >>> canonicalize_license_expression("invalid")
      Traceback (most recent call last):
class InvalidLicenseExpression(ValueError):
def canonicalize_license_expression(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Environment(TypedDict):
def _normalize_extra_values(results: Any) -> Any:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str | AbstractSet[str]) -> bool:
def _normalize(
def _evaluate_markers(
def format_full_version(info: sys._version_info) -> str:
def default_environment() -> Environment:
class Marker:
def _repair_python_full_version(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\metadata.py
-----------------------------
>         """A minimal implementation of :external:exc:`ExceptionGroup` from Python 3.11.
  
          If :external:exc:`ExceptionGroup` is already defined by Python itself,
          that version is used instead.
class InvalidMetadata(ValueError):
class RawMetadata(TypedDict, total=False):
def _parse_keywords(data: str) -> list[str]:
def _parse_project_urls(data: list[str]) -> dict[str, str]:
def _get_payload(msg: email.message.Message, source: bytes | str) -> str:
def parse_email(data: bytes | str) -> tuple[RawMetadata, dict[str, list[str]]]:
class _Validator(Generic[T]):
class Metadata:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\specifiers.py
-----------------------------
> """
  .. testsetup::
  
      from packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier
def _coerce_version(version: UnparsedVersion) -> Version:
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class Specifier(BaseSpecifier):
def _version_split(version: str) -> list[str]:
def _version_join(components: list[str]) -> str:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: list[str], right: list[str]) -> tuple[list[str], list[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> frozenset[Tag]:
def _get_config_var(name: str, warn: bool = False) -> int | str | None:
def _normalize_string(string: str) -> str:
def _is_threaded_cpython(abis: list[str]) -> bool:
def _abi3_applies(python_version: PythonVersion, threading: bool) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> list[str]:
def cpython_tags(
def _generic_abi() -> list[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: AppleVersion, cpu_arch: str) -> list[str]:
def mac_platforms(
def ios_platforms(
def android_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\utils.py
-----------------------------
>     """
      An invalid distribution name; users should refer to the packaging user guide.
class InvalidName(ValueError):
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str, *, validate: bool = False) -> NormalizedName:
def is_normalized_name(name: str) -> bool:
def canonicalize_version(
def _(version: str, *, strip_trailing_zero: bool = True) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\version.py
-----------------------------
> """
  .. testsetup::
  
      from packaging.version import parse, Version
class _Version(NamedTuple):
def parse(version: str) -> Version:
class InvalidVersion(ValueError):
class _BaseVersion:
class Version(_BaseVersion):
class _TrimmedRelease(Version):
def _parse_letter_version(
def _parse_local_version(local: str | None) -> LocalType | None:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\_elffile.py
-----------------------------
> """
  ELF file parser.
  
  This provides a class ``ELFFile`` that parses an ELF executable in a similar
class ELFInvalid(ValueError):
class EIClass(enum.IntEnum):
class EIData(enum.IntEnum):
class EMachine(enum.IntEnum):
class ELFFile:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\_manylinux.py
-----------------------------
>     """
      Primary implementation of glibc_version_string using os.confstr.
def _parse_elf(path: str) -> Generator[ELFFile | None, None, None]:
def _is_linux_armhf(executable: str) -> bool:
def _is_linux_i686(executable: str) -> bool:
def _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> str | None:
def _glibc_version_string_ctypes() -> str | None:
def _glibc_version_string() -> str | None:
def _parse_glibc_version(version_str: str) -> tuple[int, int]:
def _get_glibc_version() -> tuple[int, int]:
def _is_compatible(arch: str, version: _GLibCVersion) -> bool:
def platform_tags(archs: Sequence[str]) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> _MuslVersion | None:
def _get_musl_version(executable: str) -> _MuslVersion | None:
def platform_tags(archs: Sequence[str]) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\_parser.py
-----------------------------
> """Handwritten parser of dependency specifiers.
  
  The docstring for each __parse_* function contains EBNF-inspired grammar representing
  the implementation.
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
class ParsedRequirement(NamedTuple):
def parse_requirement(source: str) -> ParsedRequirement:
def _parse_requirement(tokenizer: Tokenizer) -> ParsedRequirement:
def _parse_requirement_details(
def _parse_requirement_marker(
def _parse_extras(tokenizer: Tokenizer) -> list[str]:
def _parse_extras_list(tokenizer: Tokenizer) -> list[str]:
def _parse_specifier(tokenizer: Tokenizer) -> str:
def _parse_version_many(tokenizer: Tokenizer) -> str:
def parse_marker(source: str) -> MarkerList:
def _parse_full_marker(tokenizer: Tokenizer) -> MarkerList:
def _parse_marker(tokenizer: Tokenizer) -> MarkerList:
def _parse_marker_atom(tokenizer: Tokenizer) -> MarkerAtom:
def _parse_marker_item(tokenizer: Tokenizer) -> MarkerItem:
def _parse_marker_var(tokenizer: Tokenizer) -> MarkerVar:
def process_env_var(env_var: str) -> Variable:
def process_python_str(python_str: str) -> Value:
def _parse_marker_op(tokenizer: Tokenizer) -> Op:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\_tokenizer.py
-----------------------------
>     """The provided source text could not be parsed correctly."""
  
      def __init__(
          self,
class Token:
class ParserSyntaxError(Exception):
class Tokenizer:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\autocompletion.py
-----------------------------
> """Logic that powers autocompletion installed by ``pip completion``.
def autocomplete() -> None:
def get_path_completion_type(
def auto_complete_paths(current: str, completion_type: str) -> Iterable[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\base_command.py
-----------------------------
> """Base Command class, and related routines"""
  
  import functools
  import logging
class Command(CommandContextMixIn):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\cmdoptions.py
-----------------------------
> """
  shared options and groups
  
  The principle here is to define options once, but *not* instantiate them
def raise_option_error(parser: OptionParser, option: Option, msg: str) -> None:
def make_option_group(group: Dict[str, Any], parser: ConfigOptionParser) -> OptionGroup:
def check_dist_restriction(options: Values, check_target: bool = False) -> None:
def _path_option_check(option: Option, opt: str, value: str) -> str:
def _package_name_option_check(option: Option, opt: str, value: str) -> str:
class PipOption(Option):
def exists_action() -> Option:
def extra_index_url() -> Option:
def find_links() -> Option:
def trusted_host() -> Option:
def constraints() -> Option:
def requirements() -> Option:
def editable() -> Option:
def _handle_src(option: Option, opt_str: str, value: str, parser: OptionParser) -> None:
def _get_format_control(values: Values, option: Option) -> Any:
def _handle_no_binary(
def _handle_only_binary(
def no_binary() -> Option:
def only_binary() -> Option:
def _convert_python_version(value: str) -> Tuple[Tuple[int, ...], Optional[str]]:
def _handle_python_version(
def add_target_python_options(cmd_opts: OptionGroup) -> None:
def make_target_python(options: Values) -> TargetPython:
def prefer_binary() -> Option:
def _handle_no_cache_dir(
def _handle_no_use_pep517(
def _handle_config_settings(
def _handle_merge_hash(
def check_list_path_option(options: Values) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\command_context.py
-----------------------------
class CommandContextMixIn:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\main.py
-----------------------------
> """Primary application entrypoint.
def main(args: Optional[List[str]] = None) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\main_parser.py
-----------------------------
> """A single place for constructing and exposing the main parser
def create_main_parser() -> ConfigOptionParser:
def identify_python_interpreter(python: str) -> Optional[str]:
def parse_command(args: List[str]) -> Tuple[str, List[str]]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\parser.py
-----------------------------
> """Base option parser setup"""
  
  import logging
  import optparse
class PrettyHelpFormatter(optparse.IndentedHelpFormatter):
class UpdatingDefaultsHelpFormatter(PrettyHelpFormatter):
class CustomOptionParser(optparse.OptionParser):
class ConfigOptionParser(CustomOptionParser):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\progress_bars.py
-----------------------------
>     """Get an object that can be used to render the download progress.
  
      Returns a callable, that takes an iterable to "wrap".
def _rich_progress_bar(
def get_download_progress_renderer(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\req_command.py
-----------------------------
> """Contains the Command base classes that depend on PipSession.
  
  The classes in this module are in a separate module so the commands not
  needing download / PackageFinder capability don't unnecessarily import the
def _create_truststore_ssl_context() -> Optional["SSLContext"]:
class SessionCommandMixin(CommandContextMixIn):
class IndexGroupCommand(Command, SessionCommandMixin):
def warn_if_run_as_root() -> None:
def with_cleanup(func: Any) -> Any:
class RequirementCommand(IndexGroupCommand):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\spinners.py
-----------------------------
class SpinnerInterface:
class InteractiveSpinner(SpinnerInterface):
class NonInteractiveSpinner(SpinnerInterface):
class RateLimiter:
def open_spinner(message: str) -> Generator[SpinnerInterface, None, None]:
def hidden_cursor(file: IO[str]) -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\status_codes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cli\__init__.py
-----------------------------
> """Subpackage containing all of pip's command line interface related code

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\cache.py
-----------------------------
>     """
      Inspect and manage pip's wheel cache.
  
      Subcommands:
class CacheCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\check.py
-----------------------------
>     """Verify installed packages have compatible dependencies."""
  
class CheckCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\completion.py
-----------------------------
> BASE_COMPLETION = """
  # pip {shell} completion start{script}# pip {shell} completion end
class CompletionCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\configuration.py
-----------------------------
>     """
      Manage local and global configuration.
  
      Subcommands:
class ConfigurationCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\debug.py
-----------------------------
>     """Log the actual version and print extra info if there is
      a conflict or if the actual version could not be imported.
def show_value(name: str, value: Any) -> None:
def show_sys_implementation() -> None:
def create_vendor_txt_map() -> Dict[str, str]:
def get_module_from_module_name(module_name: str) -> ModuleType:
def get_vendor_version_from_module(module_name: str) -> Optional[str]:
def show_actual_vendor_versions(vendor_txt_versions: Dict[str, str]) -> None:
def show_vendor_versions() -> None:
def show_tags(options: Values) -> None:
def ca_bundle_info(config: Configuration) -> str:
class DebugCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\download.py
-----------------------------
>     """
      Download packages from:
  
      - PyPI (and other indexes) using requirement specifiers.
class DownloadCommand(RequirementCommand):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\freeze.py
-----------------------------
>     """
      Output installed packages in requirements format.
  
      packages are listed in a case-insensitive sorted order.
class FreezeCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\hash.py
-----------------------------
>     """
      Compute a hash of a local package archive.
  
      These can be used with --hash in a requirements file to do repeatable
class HashCommand(Command):
def _hash_of_file(path: str, algorithm: str) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\help.py
-----------------------------
>     """Show help for commands"""
  
class HelpCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\index.py
-----------------------------
>     """
      Inspect information available from package indexes.
class IndexCommand(IndexGroupCommand):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\inspect.py
-----------------------------
>     """
      Inspect the content of a Python environment and produce a report in JSON format.
class InspectCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\install.py
-----------------------------
>     """
      Install packages from:
  
      - PyPI (and other indexes) using requirement specifiers.
def get_check_bdist_wheel_allowed(
class InstallCommand(RequirementCommand):
def get_lib_location_guesses(
def site_packages_writable(root: Optional[str], isolated: bool) -> bool:
def decide_user_install(
def reject_location_related_install_options(
def create_os_error_message(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\list.py
-----------------------------
>         """Give the distribution object a couple of extra fields.
  
          These will be populated during ``get_outdated()``. This is dirty but
          makes the rest of the code much cleaner.
class ListCommand(IndexGroupCommand):
def format_for_columns(
def format_for_json(packages: "_ProcessedDists", options: Values) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\search.py
-----------------------------
>     """Search for PyPI packages whose name or summary contains <query>."""
  
class SearchCommand(Command, SessionCommandMixin):
def transform_hits(hits: List[Dict[str, str]]) -> List["TransformedHit"]:
def print_dist_installation_info(name: str, latest: str) -> None:
def print_results(
def highest_version(versions: List[str]) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\show.py
-----------------------------
>     """
      Show information about one or more installed packages.
  
      The output is in RFC-compliant mail header format.
class ShowCommand(Command):
class _PackageInfo(NamedTuple):
def search_packages_info(query: List[str]) -> Generator[_PackageInfo, None, None]:
def print_results(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\uninstall.py
-----------------------------
>     """
      Uninstall packages.
  
      pip is able to uninstall most installed packages. Known exceptions are:
class UninstallCommand(Command, SessionCommandMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\wheel.py
-----------------------------
>     """
      Build Wheel archives for your requirements and dependencies.
  
      Wheel is a built-package format, and offers the advantage of not
class WheelCommand(RequirementCommand):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\commands\__init__.py
-----------------------------
> """
  Package containing all pip commands
def create_command(name: str, **kwargs: Any) -> Command:
def get_similar_commands(name: str) -> Optional[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\distributions\base.py
-----------------------------
>     """A base class for handling installable artifacts.
  
      The requirements for anything installable are as follows:
  
class AbstractDistribution(metaclass=abc.ABCMeta):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\distributions\installed.py
-----------------------------
>     """Represents an installed package.
  
      This does not need any preparation as the required information has already
      been computed.
class InstalledDistribution(AbstractDistribution):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\distributions\sdist.py
-----------------------------
>     """Represents a source distribution.
  
      The preparation step for these needs metadata for the packages to be
      generated, either using PEP 517 or using the legacy `setup.py egg_info`.
class SourceDistribution(AbstractDistribution):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\distributions\wheel.py
-----------------------------
>     """Represents a wheel distribution.
  
      This does not need any preparation as wheels can be directly unpacked.
class WheelDistribution(AbstractDistribution):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\distributions\__init__.py
-----------------------------
>     """Returns a Distribution for the given InstallRequirement"""
      # Editable requirements will always be source distributions. They use the
      # legacy logic until we create a modern standard for them.
      if install_req.editable:
def make_distribution_for_install_requirement(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\index\collector.py
-----------------------------
> """
  The main purpose of this module is to expose LinkCollector.collect_sources().
def _match_vcs_scheme(url: str) -> Optional[str]:
class _NotAPIContent(Exception):
def _ensure_api_header(response: Response) -> None:
class _NotHTTP(Exception):
def _ensure_api_response(url: str, session: PipSession) -> None:
def _get_simple_response(url: str, session: PipSession) -> Response:
def _get_encoding_from_headers(headers: ResponseHeaders) -> Optional[str]:
class CacheablePageContent:
class ParseLinks(Protocol):
def with_cached_index_content(fn: ParseLinks) -> ParseLinks:
def parse_links(page: "IndexContent") -> Iterable[Link]:
class IndexContent:
class HTMLLinkParser(HTMLParser):
def _handle_get_simple_fail(
def _make_index_content(
def _get_index_content(link: Link, *, session: PipSession) -> Optional["IndexContent"]:
class CollectedSources(NamedTuple):
class LinkCollector:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\index\package_finder.py
-----------------------------
> """Routines related to PyPI, indexes"""
  
  # The following comment should be removed at some point in the future.
  # mypy: strict-optional=False
def _check_link_requires_python(
class LinkType(enum.Enum):
class LinkEvaluator:
def filter_unallowed_hashes(
class CandidatePreferences:
class BestCandidateResult:
class CandidateEvaluator:
class PackageFinder:
def _find_name_version_sep(fragment: str, canonical_name: str) -> int:
def _extract_version_from_fragment(fragment: str, canonical_name: str) -> Optional[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\index\sources.py
-----------------------------
>         """Returns the underlying link, if there's one."""
          raise NotImplementedError()
  
      def page_candidates(self) -> FoundCandidates:
class LinkSource:
def _is_html_file(file_url: str) -> bool:
class _FlatDirectorySource(LinkSource):
class _LocalFileSource(LinkSource):
class _RemoteFileSource(LinkSource):
class _IndexDirectorySource(LinkSource):
def build_source(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\index\__init__.py
-----------------------------
> """Index interaction code

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\locations\base.py
-----------------------------
>     """
      Return the major-minor version of the current Python as a string, e.g.
      "3.7" or "3.10".
def get_major_minor_version() -> str:
def change_root(new_root: str, pathname: str) -> str:
def get_src_prefix() -> str:
def is_osx_framework() -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\locations\_distutils.py
-----------------------------
> """Locations where we look for configs, install stuff, etc"""
  
  # The following comment should be removed at some point in the future.
  # mypy: strict-optional=False
def distutils_scheme(
def get_scheme(
def get_bin_prefix() -> str:
def get_purelib() -> str:
def get_platlib() -> str:
def get_prefixed_libs(prefix: str) -> Tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\locations\_sysconfig.py
-----------------------------
>     """Check for Apple's ``osx_framework_library`` scheme.
  
      Python distributed by Apple's Command Line Tools has this special scheme
      that's used when:
def _should_use_osx_framework_prefix() -> bool:
def _infer_prefix() -> str:
def _infer_user() -> str:
def _infer_home() -> str:
def get_scheme(
def get_bin_prefix() -> str:
def get_purelib() -> str:
def get_platlib() -> str:
def get_prefixed_libs(prefix: str) -> typing.Tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\locations\__init__.py
-----------------------------
>     """This function determines the value of _USE_SYSCONFIG.
  
      By default, pip uses sysconfig on Python 3.10+.
      But Python distributors can override this decision by setting:
def _should_use_sysconfig() -> bool:
def _looks_like_bpo_44860() -> bool:
def _looks_like_red_hat_patched_platlib_purelib(scheme: Dict[str, str]) -> bool:
def _looks_like_red_hat_lib() -> bool:
def _looks_like_debian_scheme() -> bool:
def _looks_like_red_hat_scheme() -> bool:
def _looks_like_slackware_scheme() -> bool:
def _looks_like_msys2_mingw_scheme() -> bool:
def _fix_abiflags(parts: Tuple[str]) -> Generator[str, None, None]:
def _warn_mismatched(old: pathlib.Path, new: pathlib.Path, *, key: str) -> None:
def _warn_if_mismatch(old: pathlib.Path, new: pathlib.Path, *, key: str) -> bool:
def _log_context(
def get_scheme(
def get_bin_prefix() -> str:
def get_bin_user() -> str:
def _looks_like_deb_system_dist_packages(value: str) -> bool:
def get_purelib() -> str:
def get_platlib() -> str:
def _deduplicated(v1: str, v2: str) -> List[str]:
def _looks_like_apple_library(path: str) -> bool:
def get_prefixed_libs(prefix: str) -> List[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\importlib\_compat.py
-----------------------------
>     """A protocol that various path objects conform.
  
      This exists because importlib.metadata uses both ``pathlib.Path`` and
      ``zipfile.Path``, and we need a common base for type hints (Union does not
class BadMetadata(ValueError):
class BasePath(Protocol):
def get_info_location(d: importlib.metadata.Distribution) -> Optional[BasePath]:
def get_dist_name(dist: importlib.metadata.Distribution) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\importlib\_dists.py
-----------------------------
>     """An ``importlib.metadata.Distribution`` read from a wheel.
  
      Although ``importlib.metadata.PathDistribution`` accepts ``zipfile.Path``,
      its implementation is too "lazy" for pip's needs (we can't keep the ZipFile
class WheelDistribution(importlib.metadata.Distribution):
class Distribution(BaseDistribution):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py
-----------------------------
>     """Finder to locate distributions.
  
      The main purpose of this class is to memoize found distributions' names, so
      only one distribution is returned for each package name. At lot of pip code
def _looks_like_wheel(location: str) -> bool:
class _DistributionFinder:
def _emit_egg_deprecation(location: Optional[str]) -> None:
class Environment(BaseEnvironment):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\importlib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\base.py
-----------------------------
>     """Convert a legacy installed-files.txt path into modern RECORD path.
  
      The legacy format stores paths relative to the info directory, while the
      modern format stores paths relative to the package root, e.g. the
class BaseEntryPoint(Protocol):
def _convert_installed_files_path(
class RequiresEntry(NamedTuple):
class BaseDistribution(Protocol):
class BaseEnvironment:
class Wheel(Protocol):
class FilesystemWheel(Wheel):
class MemoryWheel(Wheel):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py
-----------------------------
>     """IMetadataProvider that reads metadata files from a dictionary.
  
      This also maps metadata decoding exceptions to our internal exception type.
class EntryPoint(NamedTuple):
class InMemoryMetadata:
class Distribution(BaseDistribution):
class Environment(BaseEnvironment):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\_json.py
-----------------------------
>     """Convert a Message object into a JSON-compatible dictionary."""
  
      def sanitise_header(h: Union[Header, str]) -> str:
          if isinstance(h, Header):
def json_name(field: str) -> str:
def msg_to_json(msg: Message) -> Dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\metadata\__init__.py
-----------------------------
>     """Whether to use the ``importlib.metadata`` or ``pkg_resources`` backend.
  
      By default, pip uses ``importlib.metadata`` on Python 3.11+, and
      ``pkg_resourcess`` otherwise. This can be overridden by a couple of ways:
def _should_use_importlib_metadata() -> bool:
class Backend(Protocol):
def select_backend() -> Backend:
def get_default_environment() -> BaseEnvironment:
def get_environment(paths: Optional[List[str]]) -> BaseEnvironment:
def get_directory_distribution(directory: str) -> BaseDistribution:
def get_wheel_distribution(wheel: Wheel, canonical_name: str) -> BaseDistribution:
def get_metadata_distribution(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\candidate.py
-----------------------------
>     """Represents a potential "candidate" for installation."""
  
      __slots__ = ["name", "version", "link"]
  
class InstallationCandidate(KeyBasedCompareMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\direct_url.py
-----------------------------
> """ PEP 610 """
  import json
  import re
  import urllib.parse
class DirectUrlValidationError(Exception):
def _get(
def _get_required(
def _exactly_one_of(infos: Iterable[Optional["InfoType"]]) -> "InfoType":
def _filter_none(**kwargs: Any) -> Dict[str, Any]:
class VcsInfo:
class ArchiveInfo:
class DirInfo:
class DirectUrl:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\format_control.py
-----------------------------
>     """Helper for managing formats from which a package can be installed."""
  
      __slots__ = ["no_binary", "only_binary"]
  
class FormatControl:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\index.py
-----------------------------
>     """Represents a Package Index and provides easier access to endpoints"""
  
      __slots__ = ["url", "netloc", "simple_url", "pypi_url", "file_storage_domain"]
  
class PackageIndex:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\installation_report.py
-----------------------------
class InstallationReport:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\link.py
-----------------------------
>     """Links to content may have embedded hash values. This class parses those.
  
      `name` must be any member of `_SUPPORTED_HASHES`.
  
class LinkHash:
def _clean_url_path_part(part: str) -> str:
def _clean_file_url_path(part: str) -> str:
def _clean_url_path(path: str, is_local_path: bool) -> str:
def _ensure_quoted_url(url: str) -> str:
class Link(KeyBasedCompareMixin):
class _CleanResult(NamedTuple):
def _clean_link(link: Link) -> _CleanResult:
def links_equivalent(link1: Link, link2: Link) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\scheme.py
-----------------------------
> """
  For types associated with installation schemes.
  
  For a general overview of available schemes and their context, see
class Scheme:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\search_scope.py
-----------------------------
>     """
      Encapsulates the locations that pip is configured to search.
class SearchScope:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\selection_prefs.py
-----------------------------
>     """
      Encapsulates the candidate selection preferences for downloading
      and installing files.
class SelectionPreferences:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\target_python.py
-----------------------------
>     """
      Encapsulates the properties of a Python interpreter one is targeting
      for a package install, download, etc.
class TargetPython:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\wheel.py
-----------------------------
> """Represents a wheel file and provides access to the various parts of the
  name that have meaning.
class Wheel:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\models\__init__.py
-----------------------------
> """A package that contains models that represent entities.

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\auth.py
-----------------------------
> """Network Authentication Helpers
  
  Contains interface (MultiDomainBasicAuth) and associated glue code for
  providing credentials in the context of network requests.
def get_keyring_auth(url: Optional[str], username: Optional[str]) -> Optional[AuthInfo]:
class MultiDomainBasicAuth(AuthBase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\cache.py
-----------------------------
> """HTTP cache implementation.
def is_from_cache(response: Response) -> bool:
def suppressed_cache_errors() -> Generator[None, None, None]:
class SafeFileCache(BaseCache):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\download.py
-----------------------------
> """Download files with progress indicators.
def _get_http_response_size(resp: Response) -> Optional[int]:
def _prepare_download(
def sanitize_content_filename(filename: str) -> str:
def parse_content_disposition(content_disposition: str, default_filename: str) -> str:
def _get_http_response_filename(resp: Response, link: Link) -> str:
def _http_get_download(session: PipSession, link: Link) -> Response:
class Downloader:
class BatchDownloader:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\lazy_wheel.py
-----------------------------
> """Lazy ZIP over HTTP"""
  
  __all__ = ["HTTPRangeRequestUnsupported", "dist_from_wheel_url"]
  
class HTTPRangeRequestUnsupported(Exception):
def dist_from_wheel_url(name: str, url: str, session: PipSession) -> BaseDistribution:
class LazyZipOverHTTP:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\session.py
-----------------------------
> """PipSession and supporting code, containing all pip-specific
  network request configuration and behavior.
def looks_like_ci() -> bool:
def user_agent() -> str:
class LocalFSAdapter(BaseAdapter):
class _SSLContextAdapterMixin:
class HTTPAdapter(_SSLContextAdapterMixin, _BaseHTTPAdapter):
class CacheControlAdapter(_SSLContextAdapterMixin, _BaseCacheControlAdapter):
class InsecureHTTPAdapter(HTTPAdapter):
class InsecureCacheControlAdapter(CacheControlAdapter):
class PipSession(requests.Session):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\utils.py
-----------------------------
>     """Given a requests Response, provide the data chunks."""
      try:
          # Special case for urllib3.
          for chunk in response.raw.stream(
def raise_for_status(resp: Response) -> None:
def response_chunks(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\xmlrpc.py
-----------------------------
> """xmlrpclib.Transport implementation
class PipXmlrpcTransport(xmlrpc.client.Transport):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\network\__init__.py
-----------------------------
> """Contains purely network-related utilities.

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py
-----------------------------
>         """Add an InstallRequirement to build tracking."""
  
          assert req.link
          # Get the file to write information about this requirement.
def update_env_context_manager(**changes: str) -> Generator[None, None, None]:
def get_build_tracker() -> Generator["BuildTracker", None, None]:
class BuildTracker:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\metadata.py
-----------------------------
> """Metadata generation logic for source distributions.
def generate_metadata(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\metadata_editable.py
-----------------------------
> """Metadata generation logic for source distributions.
def generate_editable_metadata(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py
-----------------------------
> """Metadata generation logic for legacy source distributions.
def _find_egg_info(directory: str) -> str:
def generate_metadata(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\wheel.py
-----------------------------
>     """Build one InstallRequirement using the PEP 517 build process.
  
      Returns path to wheel if successfully built. Otherwise, returns None.
def build_wheel_pep517(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py
-----------------------------
>     """Build one InstallRequirement using the PEP 660 build process.
  
      Returns path to wheel if successfully built. Otherwise, returns None.
def build_wheel_editable(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py
-----------------------------
>     """Format command information for logging."""
      command_desc = format_command_args(command_args)
      text = f"Command arguments: {command_desc}\n"
  
def format_command_result(
def get_legacy_build_wheel_path(
def build_wheel_legacy(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\build\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py
-----------------------------
> """Legacy editable installation process, i.e. `setup.py develop`.
def install_editable(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\install\legacy.py
-----------------------------
> """Legacy installation process, i.e. `setup.py install`.
def write_installed_files_from_setuptools_record(
def install(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\install\wheel.py
-----------------------------
> """Support for installing and building the "wheel" binary package format.
def rehash(path: str, blocksize: int = 1 << 20) -> Tuple[str, str]:
def csv_io_kwargs(mode: str) -> Dict[str, Any]:
def fix_script(path: str) -> bool:
def wheel_root_is_purelib(metadata: Message) -> bool:
def get_entrypoints(dist: BaseDistribution) -> Tuple[Dict[str, str], Dict[str, str]]:
def message_about_scripts_not_on_PATH(scripts: Sequence[str]) -> Optional[str]:
def _normalized_outrows(
def _record_to_fs_path(record_path: RecordPath, lib_dir: str) -> str:
def _fs_to_record_path(path: str, lib_dir: str) -> RecordPath:
def get_csv_rows_for_installed(
def get_console_script_specs(console: Dict[str, str]) -> List[str]:
class ZipBackedFile:
class ScriptFile:
class MissingCallableSuffix(InstallationError):
def _raise_for_invalid_entrypoint(specification: str) -> None:
class PipScriptMaker(ScriptMaker):
def _install_wheel(
def req_error_context(req_description: str) -> Generator[None, None, None]:
def install_wheel(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\install\__init__.py
-----------------------------
> """For modules related to installing packages.

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\check.py
-----------------------------
> """Validation of dependencies of packages
class PackageDetails(NamedTuple):
def create_package_set_from_installed() -> Tuple[PackageSet, bool]:
def check_package_set(
def check_install_conflicts(to_install: List[InstallRequirement]) -> ConflictDetails:
def _simulate_installation_of(
def _create_whitelist(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\freeze.py
-----------------------------
>     """
      Compute and return values (req, comments) for use in
      FrozenRequirement.from_dist().
class _EditableInfo(NamedTuple):
def freeze(
def _format_as_name_version(dist: BaseDistribution) -> str:
def _get_editable_info(dist: BaseDistribution) -> _EditableInfo:
class FrozenRequirement:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\prepare.py
-----------------------------
> """Prepares a distribution for installation
def _get_prepared_distribution(
def unpack_vcs_link(link: Link, location: str, verbosity: int) -> None:
class File:
def get_http_url(
def get_file_url(
def unpack_url(
def _check_download_dir(
class RequirementPreparer:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\operations\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\req\constructors.py
-----------------------------
> """Backing implementation for InstallRequirement's various constructors
  
  The idea here is that these formed a major chunk of InstallRequirement's size
  so, moving them and support code dedicated to them outside of that class
def _strip_extras(path: str) -> Tuple[str, Optional[str]]:
def convert_extras(extras: Optional[str]) -> Set[str]:
def parse_editable(editable_req: str) -> Tuple[Optional[str], str, Set[str]]:
def check_first_requirement_in_file(filename: str) -> None:
def deduce_helpful_msg(req: str) -> str:
class RequirementParts:
def parse_req_from_editable(editable_req: str) -> RequirementParts:
def install_req_from_editable(
def _looks_like_path(name: str) -> bool:
def _get_url_from_path(path: str, name: str) -> Optional[str]:
def parse_req_from_line(name: str, line_source: Optional[str]) -> RequirementParts:
def install_req_from_line(
def install_req_from_req_string(
def install_req_from_parsed_requirement(
def install_req_from_link_and_ireq(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\req\req_file.py
-----------------------------
> """
  Requirements file parsing
class ParsedRequirement:
class ParsedLine:
def parse_requirements(
def preprocess(content: str) -> ReqFileLines:
def handle_requirement_line(
def handle_option_line(
def handle_line(
class RequirementsFileParser:
def get_line_parser(finder: Optional["PackageFinder"]) -> LineParser:
def break_args_options(line: str) -> Tuple[str, str]:
class OptionParsingError(Exception):
def build_parser() -> optparse.OptionParser:
def join_lines(lines_enum: ReqFileLines) -> ReqFileLines:
def ignore_comments(lines_enum: ReqFileLines) -> ReqFileLines:
def expand_env_variables(lines_enum: ReqFileLines) -> ReqFileLines:
def get_file_content(url: str, session: PipSession) -> Tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\req\req_install.py
-----------------------------
>     """
      Represents something that may be installed later on, may have information
      about where to fetch the relevant requirement and also contains logic for
      installing the said requirement.
class InstallRequirement:
def check_invalid_constraint_type(req: InstallRequirement) -> str:
def _has_option(options: Values, reqs: List[InstallRequirement], option: str) -> bool:
def _install_option_ignored(
class LegacySetupPyOptionsCheckMode(Enum):
def check_legacy_setup_py_options(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\req\req_set.py
-----------------------------
>         """Create a RequirementSet."""
  
          self.requirements: Dict[str, InstallRequirement] = OrderedDict()
          self.check_supported_wheels = check_supported_wheels
class RequirementSet:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\req\req_uninstall.py
-----------------------------
>     """Create the fully qualified name of the files created by
      {console,gui}_scripts for the given ``dist``.
      Returns the list of file names
def _script_names(
def _unique(
def uninstallation_paths(dist: BaseDistribution) -> Generator[str, None, None]:
def compact(paths: Iterable[str]) -> Set[str]:
def compress_for_rename(paths: Iterable[str]) -> Set[str]:
def compress_for_output_listing(paths: Iterable[str]) -> Tuple[Set[str], Set[str]]:
class StashedUninstallPathSet:
class UninstallPathSet:
class UninstallPthEntries:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\req\__init__.py
-----------------------------
>     """
      Install everything in the given list.
  
      (to be called after having downloaded and unpacked the packages)
class InstallationResult:
def _validate_requirements(
def install_given_reqs(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py
-----------------------------
> """Dependency Resolution
  
  The dependency resolution in pip is performed as follows:
  
def _check_dist_requires_python(
class Resolver(BaseResolver):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\legacy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\base.py
-----------------------------
>         """The "project name" of a requirement.
  
          This is different from ``name`` if this requirement contains extras,
          in which case ``name`` would contain the ``[...]`` part, while this
def format_name(project: str, extras: FrozenSet[str]) -> str:
class Constraint:
class Requirement:
def _match_link(link: Link, candidate: "Candidate") -> bool:
class Candidate:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py
-----------------------------
>     """The runtime version of BaseCandidate."""
      base_candidate_classes = (
          AlreadyInstalledCandidate,
          EditableCandidate,
def as_base_candidate(candidate: Candidate) -> Optional[BaseCandidate]:
def make_install_req_from_link(
def make_install_req_from_editable(
def _make_install_req_from_dist(
class _InstallRequirementBackedCandidate(Candidate):
class LinkCandidate(_InstallRequirementBackedCandidate):
class EditableCandidate(_InstallRequirementBackedCandidate):
class AlreadyInstalledCandidate(Candidate):
class ExtrasCandidate(Candidate):
class RequiresPythonCandidate(Candidate):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py
-----------------------------
>             """Get the candidate for the currently-installed version."""
              # If --force-reinstall is set, we want the version from the index
              # instead, so we "pretend" there is nothing installed.
              if self._force_reinstall:
class CollectedRootRequirements(NamedTuple):
class Factory:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py
-----------------------------
> """Utilities to lazily create and visit candidates found.
  
  Creating and visiting a candidate is a *very* costly operation. It involves
  fetching, extracting, potentially building modules from source, and verifying
def _iter_built(infos: Iterator[IndexCandidateInfo]) -> Iterator[Candidate]:
def _iter_built_with_prepended(
def _iter_built_with_inserted(
class FoundCandidates(SequenceCandidate):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\provider.py
-----------------------------
>     """Get item from a package name lookup mapping with a resolver identifier.
  
      This extra logic is needed when the target mapping is keyed by package
      name, which cannot be directly looked up with an identifier (which may
def _get_with_identifier(
class PipProvider(_ProviderBase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py
-----------------------------
>     """A reporter that does an info log for every event it sees."""
  
      def starting(self) -> None:
          logger.info("Reporter.starting()")
class PipReporter(BaseReporter):
class PipDebuggingReporter(BaseReporter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\requirements.py
-----------------------------
>     """A requirement representing Requires-Python metadata."""
  
      def __init__(self, specifier: SpecifierSet, match: Candidate) -> None:
          self.specifier = specifier
class ExplicitRequirement(Requirement):
class SpecifierRequirement(Requirement):
class RequiresPythonRequirement(Requirement):
class UnsatisfiableRequirement(Requirement):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py
-----------------------------
>         """Get order for installation of requirements in RequirementSet.
  
          The returned list contains a requirement before another that depends on
          it. This helps ensure that the environment is kept consistent as they
class Resolver(BaseResolver):
def get_topological_weights(
def _req_set_item_sorter(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\resolvelib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\base.py
-----------------------------
class BaseResolver:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\resolution\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\appdirs.py
-----------------------------
> """
  This code wraps the vendored appdirs module to so the return values are
  compatible for the current pip code base.
  
def user_cache_dir(appname: str) -> str:
def _macos_user_config_dir(appname: str, roaming: bool = True) -> str:
def user_config_dir(appname: str, roaming: bool = True) -> str:
def site_config_dirs(appname: str) -> List[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\compat.py
-----------------------------
> """Stuff that differs in different Python versions and platform
def has_tls() -> bool:
def get_path_uid(path: str) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\compatibility_tags.py
-----------------------------
> """Generate and work with PEP 425 Compatibility Tags.
def version_info_to_nodot(version_info: Tuple[int, ...]) -> str:
def _mac_platforms(arch: str) -> List[str]:
def _custom_manylinux_platforms(arch: str) -> List[str]:
def _get_custom_platforms(arch: str) -> List[str]:
def _expand_allowed_platforms(platforms: Optional[List[str]]) -> Optional[List[str]]:
def _get_python_version(version: str) -> PythonVersion:
def _get_custom_interpreter(
def get_supported(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\datetime.py
-----------------------------
> """For when pip wants to check the date or time.
def today_is_later_than(year: int, month: int, day: int) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\deprecation.py
-----------------------------
> """
  A module that implements tooling to enable easy warnings about deprecations.
class PipDeprecationWarning(Warning):
def _showwarning(
def install_warning_logger() -> None:
def deprecated(
class LegacyInstallReason:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\direct_url_helpers.py
-----------------------------
>     """Convert a DirectUrl to a pip requirement string."""
      direct_url.validate()  # if invalid, this is a pip bug
      requirement = name + " @ "
      fragments = []
def direct_url_as_pep440_direct_reference(direct_url: DirectUrl, name: str) -> str:
def direct_url_for_editable(source_dir: str) -> DirectUrl:
def direct_url_from_link(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\distutils_args.py
-----------------------------
>     """Parse provided arguments, returning an object that has the matched arguments.
  
      Any unknown arguments are ignored.
def parse_distutils_args(args: List[str]) -> Dict[str, str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\egg_link.py
-----------------------------
>     """
      Convert a Name metadata value to a .egg-link name, by applying
      the same substitution as pkg_resources's safe_name function.
      Note: we cannot use canonicalize_name because it has a different logic.
def _egg_link_name(raw_name: str) -> str:
def egg_link_path_from_sys_path(raw_name: str) -> Optional[str]:
def egg_link_path_from_location(raw_name: str) -> Optional[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\encoding.py
-----------------------------
>     """Check a bytes string for a BOM to correctly detect the encoding
  
def auto_decode(data: bytes) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\entrypoints.py
-----------------------------
>     """Central wrapper for all old entrypoints.
  
      Historically pip has had several entrypoints defined. Because of issues
      arising from PATH, sys.path, multiple Pythons, their interactions, and most
def _wrapper(args: Optional[List[str]] = None) -> int:
def get_best_invocation_for_this_pip() -> str:
def get_best_invocation_for_this_python() -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\filesystem.py
-----------------------------
>     """Return a file-like object pointing to a tmp file next to path.
  
      The file is created securely and is ensured to be written to disk
      after the context reaches its end.
def check_path_owner(path: str) -> bool:
def adjacent_tmp_file(path: str, **kwargs: Any) -> Generator[BinaryIO, None, None]:
def test_writable_dir(path: str) -> bool:
def _test_writable_dir_win(path: str) -> bool:
def find_files(path: str, pattern: str) -> List[str]:
def file_size(path: str) -> Union[int, float]:
def format_file_size(path: str) -> str:
def directory_size(path: str) -> Union[int, float]:
def format_directory_size(path: str) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\filetypes.py
-----------------------------
> """Filetype information.
def is_archive_file(name: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\glibc.py
-----------------------------
>     """Try to determine the glibc version
  
      Returns a tuple of strings (lib, version) which default to empty strings
      in case the lookup fails.
def glibc_version_string() -> Optional[str]:
def glibc_version_string_confstr() -> Optional[str]:
def glibc_version_string_ctypes() -> Optional[str]:
def libc_ver() -> Tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\hashes.py
-----------------------------
>     """A wrapper that builds multiple hashes at once and checks them against
      known-good values
  
class Hashes:
class MissingHashes(Hashes):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\inject_securetransport.py
-----------------------------
> """A helper module that injects SecureTransport, on import.
  
  The import should be done as early as possible, to ensure all requests and
  sessions (or whatever) are created after injecting SecureTransport.
def inject_securetransport() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\logging.py
-----------------------------
>     """
      Raised if BrokenPipeError occurs for the stdout stream while logging.
class BrokenStdoutLoggingError(Exception):
def _is_broken_pipe_error(exc_class: Type[BaseException], exc: BaseException) -> bool:
def indent_log(num: int = 2) -> Generator[None, None, None]:
def get_indentation() -> int:
class IndentingFormatter(logging.Formatter):
class IndentedRenderable:
class RichPipStreamHandler(RichHandler):
class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
class MaxLevelFilter(Filter):
class ExcludeLoggerFilter(Filter):
def setup_logging(verbosity: int, no_color: bool, user_log_file: Optional[str]) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\misc.py
-----------------------------
>     """
      Convert a tuple of ints representing a Python version to one of length
      three.
  
def get_pip_version() -> str:
def normalize_version_info(py_version_info: Tuple[int, ...]) -> Tuple[int, int, int]:
def ensure_dir(path: str) -> None:
def get_prog() -> str:
def rmtree(dir: str, ignore_errors: bool = False) -> None:
def rmtree_errorhandler(func: Callable[..., Any], path: str, exc_info: ExcInfo) -> None:
def display_path(path: str) -> str:
def backup_dir(dir: str, ext: str = ".bak") -> str:
def ask_path_exists(message: str, options: Iterable[str]) -> str:
def _check_no_input(message: str) -> None:
def ask(message: str, options: Iterable[str]) -> str:
def ask_input(message: str) -> str:
def ask_password(message: str) -> str:
def strtobool(val: str) -> int:
def format_size(bytes: float) -> str:
def tabulate(rows: Iterable[Iterable[Any]]) -> Tuple[List[str], List[int]]:
def is_installable_dir(path: str) -> bool:
def read_chunks(
def normalize_path(path: str, resolve_symlinks: bool = True) -> str:
def splitext(path: str) -> Tuple[str, str]:
def renames(old: str, new: str) -> None:
def is_local(path: str) -> bool:
def write_output(msg: Any, *args: Any) -> None:
class StreamWrapper(StringIO):
def captured_output(stream_name: str) -> Generator[StreamWrapper, None, None]:
def captured_stdout() -> ContextManager[StreamWrapper]:
def captured_stderr() -> ContextManager[StreamWrapper]:
def enum(*sequential: Any, **named: Any) -> Type[Any]:
def build_netloc(host: str, port: Optional[int]) -> str:
def build_url_from_netloc(netloc: str, scheme: str = "https") -> str:
def parse_netloc(netloc: str) -> Tuple[str, Optional[int]]:
def split_auth_from_netloc(netloc: str) -> NetlocTuple:
def redact_netloc(netloc: str) -> str:
def _transform_url(
def _get_netloc(netloc: str) -> NetlocTuple:
def _redact_netloc(netloc: str) -> Tuple[str]:
def split_auth_netloc_from_url(url: str) -> Tuple[str, str, Tuple[str, str]]:
def remove_auth_from_url(url: str) -> str:
def redact_auth_from_url(url: str) -> str:
class HiddenText:
def hide_value(value: str) -> HiddenText:
def hide_url(url: str) -> HiddenText:
def protect_pip_from_modification_on_windows(modifying_pip: bool) -> None:
def is_console_interactive() -> bool:
def hash_file(path: str, blocksize: int = 1 << 20) -> Tuple[Any, int]:
def is_wheel_installed() -> bool:
def pairwise(iterable: Iterable[Any]) -> Iterator[Tuple[Any, Any]]:
def partition(
class ConfiguredPep517HookCaller(Pep517HookCaller):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\models.py
-----------------------------
> """Utilities for defining models
class KeyBasedCompareMixin:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\packaging.py
-----------------------------
>     """
      Check if the given Python version matches a "Requires-Python" specifier.
  
      :param version_info: A 3-tuple of ints representing a Python
def check_requires_python(
def get_requirement(req_string: str) -> Requirement:
def safe_extra(extra: str) -> NormalizedExtra:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\setuptools_build.py
-----------------------------
>     """
      exec(compile('''
      # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py
      #
def make_setuptools_shim_args(
def make_setuptools_bdist_wheel_args(
def make_setuptools_clean_args(
def make_setuptools_develop_args(
def make_setuptools_egg_info_args(
def make_setuptools_install_args(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\subprocess.py
-----------------------------
>     """
      Create a CommandArgs object.
def make_command(*args: Union[str, HiddenText, CommandArgs]) -> CommandArgs:
def format_command_args(args: Union[List[str], CommandArgs]) -> str:
def reveal_command_args(args: Union[List[str], CommandArgs]) -> List[str]:
def call_subprocess(
def runner_with_spinner_message(message: str) -> Callable[..., None]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\temp_dir.py
-----------------------------
>     """Manages temp directory behavior"""
  
      def __init__(self) -> None:
          self._should_delete: Dict[str, bool] = {}
def global_tempdir_manager() -> Generator[None, None, None]:
class TempDirectoryTypeRegistry:
def tempdir_registry() -> Generator[TempDirectoryTypeRegistry, None, None]:
class _Default:
class TempDirectory:
class AdjacentTempDirectory(TempDirectory):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\unpacking.py
-----------------------------
> """Utilities related archives.
def current_umask() -> int:
def split_leading_dir(path: str) -> List[str]:
def has_leading_dir(paths: Iterable[str]) -> bool:
def is_within_directory(directory: str, target: str) -> bool:
def set_extracted_file_to_default_mode_plus_executable(path: str) -> None:
def zip_item_is_executable(info: ZipInfo) -> bool:
def unzip_file(filename: str, location: str, flatten: bool = True) -> None:
def untar_file(filename: str, location: str) -> None:
def unpack_file(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\urls.py
-----------------------------
>     """
      Convert a path to a file: URL.  The path will be made absolute and have
      quoted path parts.
def get_url_scheme(url: str) -> Optional[str]:
def path_to_url(path: str) -> str:
def url_to_path(url: str) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\virtualenv.py
-----------------------------
>     """Checks if sys.base_prefix and sys.prefix match.
  
      This handles PEP 405 compliant virtual environments.
def _running_under_venv() -> bool:
def _running_under_regular_virtualenv() -> bool:
def running_under_virtualenv() -> bool:
def _get_pyvenv_cfg_lines() -> Optional[List[str]]:
def _no_global_under_venv() -> bool:
def _no_global_under_regular_virtualenv() -> bool:
def virtualenv_no_global() -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\wheel.py
-----------------------------
> """Support functions for working with wheel files.
def parse_wheel(wheel_zip: ZipFile, name: str) -> Tuple[str, Message]:
def wheel_dist_info_dir(source: ZipFile, name: str) -> str:
def read_wheel_metadata_file(source: ZipFile, path: str) -> bytes:
def wheel_metadata(source: ZipFile, dist_info_dir: str) -> Message:
def wheel_version(wheel_data: Message) -> Tuple[int, ...]:
def check_compatibility(version: Tuple[int, ...], name: str) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\_log.py
-----------------------------
> """Customize logging
  
  Defines custom logger class for the `logger.verbose(...)` method.
  
class VerboseLogger(logging.Logger):
def getLogger(name: str) -> VerboseLogger:
def init_logging() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\utils\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\vcs\bazaar.py
-----------------------------
>         """Always assume the versions don't match"""
          return False
  
  
class Bazaar(VersionControl):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\vcs\git.py
-----------------------------
>     r"""^
      # Optional user, e.g. 'git@'
      (\w+@)?
      # Server, e.g. 'github.com'.
def looks_like_hash(sha: str) -> bool:
class Git(VersionControl):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\vcs\mercurial.py
-----------------------------
>         """
          Return the repository-local changeset revision number, as an integer.
class Mercurial(VersionControl):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\vcs\subversion.py
-----------------------------
>         """
          Return the maximum revision for all files under a given location
class Subversion(VersionControl):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py
-----------------------------
> """Handles all VCS (version control) support"""
  
  import logging
  import os
def is_url(name: str) -> bool:
def make_vcs_requirement_url(
def find_path_to_project_root_from_repo_root(
class RemoteNotFoundError(Exception):
class RemoteNotValidError(Exception):
class RevOptions:
class VcsSupport:
class VersionControl:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\vcs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\build_env.py
-----------------------------
> """Build Environment used for isolation during sdist building
class _Prefix:
def get_runnable_pip() -> str:
def _get_system_sitepackages() -> Set[str]:
class BuildEnvironment:
class NoOpBuildEnvironment(BuildEnvironment):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\cache.py
-----------------------------
> """Cache Management
def _hash_dict(d: Dict[str, str]) -> str:
class Cache:
class SimpleWheelCache(Cache):
class EphemWheelCache(SimpleWheelCache):
class CacheEntry:
class WheelCache(Cache):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\configuration.py
-----------------------------
> """Configuration management setup
  
  Some terminology:
  - name
def _normalize_name(name: str) -> str:
def _disassemble_key(name: str) -> List[str]:
def get_configuration_files() -> Dict[Kind, List[str]]:
class Configuration:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\exceptions.py
-----------------------------
> """Exceptions used throughout package.
  
  This module MUST NOT try to import from anything within `pip._internal` to
  operate. This is expected to be importable from any/all files within the
def _is_kebab_case(s: str) -> bool:
def _prefix_with_indent(
class PipError(Exception):
class DiagnosticPipError(PipError):
class ConfigurationError(PipError):
class InstallationError(PipError):
class UninstallationError(PipError):
class MissingPyProjectBuildRequires(DiagnosticPipError):
class InvalidPyProjectBuildRequires(DiagnosticPipError):
class NoneMetadataError(PipError):
class UserInstallationInvalid(InstallationError):
class InvalidSchemeCombination(InstallationError):
class DistributionNotFound(InstallationError):
class RequirementsFileParseError(InstallationError):
class BestVersionAlreadyInstalled(PipError):
class BadCommand(PipError):
class CommandError(PipError):
class PreviousBuildDirError(PipError):
class NetworkConnectionError(PipError):
class InvalidWheelFilename(InstallationError):
class UnsupportedWheel(InstallationError):
class InvalidWheel(InstallationError):
class MetadataInconsistent(InstallationError):
class LegacyInstallFailure(DiagnosticPipError):
class InstallationSubprocessError(DiagnosticPipError, InstallationError):
class MetadataGenerationFailed(InstallationSubprocessError, InstallationError):
class HashErrors(InstallationError):
class HashError(InstallationError):
class VcsHashUnsupported(HashError):
class DirectoryUrlHashUnsupported(HashError):
class HashMissing(HashError):
class HashUnpinned(HashError):
class HashMismatch(HashError):
class UnsupportedPythonVersion(InstallationError):
class ConfigurationFileCouldNotBeLoaded(ConfigurationError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\main.py
-----------------------------
>     """This is preserved for old console scripts that may still be referencing
      it.
  
      For additional details, see https://github.com/pypa/pip/issues/7498.
def main(args: Optional[List[str]] = None) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\pyproject.py
-----------------------------
>     """Load the pyproject.toml file.
  
      Parameters:
          use_pep517 - Has the user requested PEP 517 processing? None
def _is_list_of_str(obj: Any) -> bool:
def make_pyproject_path(unpacked_source_directory: str) -> str:
def load_pyproject_toml(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\self_outdated_check.py
-----------------------------
>         """Check if we have a not-outdated version loaded already."""
          if not self._state:
              return None
  
def _get_statefile_name(key: str) -> str:
class SelfCheckState:
class UpgradePrompt:
def was_installed_by_pip(pkg: str) -> bool:
def _get_current_remote_pip_version(
def _self_version_check_logic(
def pip_self_version_check(session: PipSession, options: optparse.Values) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\wheel_builder.py
-----------------------------
> """Orchestrator for building wheels from InstallRequirements.
def _contains_egg_info(s: str) -> bool:
def _should_build(
def should_build_for_wheel_command(
def should_build_for_install_command(
def _should_cache(
def _get_cache_dir(
def _verify_one(req: InstallRequirement, wheel_path: str) -> None:
def _build_one(
def _build_one_inside_env(
def _clean_one_legacy(req: InstallRequirement, global_options: List[str]) -> bool:
def build(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_internal\__init__.py
-----------------------------
>     """This is preserved for old console scripts that may still be referencing
      it.
  
      For additional details, see https://github.com/pypa/pip/issues/7498.
def main(args: (Optional[List[str]]) = None) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\caches\file_cache.py
-----------------------------
>     """Shared implementation for both FileCache variants."""
  
      def __init__(
          self,
def _secure_open_write(filename, fmode):
class _FileCacheMixin:
class FileCache(_FileCacheMixin, BaseCache):
class SeparateBodyFileCache(_FileCacheMixin, SeparateBodyBaseCache):
def url_to_file_path(url, filecache):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\caches\redis_cache.py
-----------------------------
>         """Helper for clearing all the keys in a database. Use with
class RedisCache(BaseCache):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\caches\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\adapter.py
-----------------------------
>         """
          Send a request. Use the request information to see if it
          exists in the cache and cache the response if we need to and can.
class CacheControlAdapter(HTTPAdapter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\cache.py
-----------------------------
> """
  The cache object API for implementing caches. The default is a thread
  safe in-memory dictionary.
class BaseCache(object):
class DictCache(BaseCache):
class SeparateBodyBaseCache(BaseCache):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py
-----------------------------
> """
  The httplib2 algorithms ported for use with requests.
def parse_uri(uri):
class CacheController(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\filewrapper.py
-----------------------------
>     """
      Small wrapper around a fp object which will tee everything read into a
      buffer, and when that file is closed it will execute a callback with the
      contents of that buffer.
class CallbackFileWrapper(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\heuristics.py
-----------------------------
>         """
          Return a valid 1xx warning header value describing the cache
          adjustments.
  
def expire_after(delta, date=None):
def datetime_to_header(dt):
class BaseHeuristic(object):
class OneDayCache(BaseHeuristic):
class ExpiresAfter(BaseHeuristic):
class LastModified(BaseHeuristic):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\serialize.py
-----------------------------
>         """Verify our vary headers match and construct a real urllib3
          HTTPResponse object.
def _b64_decode_bytes(b):
def _b64_decode_str(s):
class Serializer(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\wrapper.py
-----------------------------
def CacheControl(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py
-----------------------------
def setup_logging():
def get_session():
def get_args():
def main(args=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py
-----------------------------
> """CacheControl import Interface.
  
  Make it easy to import from cachecontrol without long namespaces.

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\certifi\core.py
-----------------------------
> """
  certifi.py
  ~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\certifi\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\certifi\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\cli\chardetect.py
-----------------------------
> """
  Script which takes one or more file paths and reports on their detected
  encodings
  
def description_of(lines, name="stdin"):
def main(argv=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\cli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\metadata\languages.py
-----------------------------
> """
  Metadata about languages used by our model training code for our
  SingleByteCharSetProbers.  Could be used for other things in the future.
  
class Language:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\metadata\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\big5freq.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\big5prober.py
-----------------------------
class Big5Prober(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\chardistribution.py
-----------------------------
>         """reset analyser, clear any state"""
          # If this flag is set to True, detection is done and conclusion has
          # been made
          self._done = False
class CharDistributionAnalysis:
class EUCTWDistributionAnalysis(CharDistributionAnalysis):
class EUCKRDistributionAnalysis(CharDistributionAnalysis):
class JOHABDistributionAnalysis(CharDistributionAnalysis):
class GB2312DistributionAnalysis(CharDistributionAnalysis):
class Big5DistributionAnalysis(CharDistributionAnalysis):
class SJISDistributionAnalysis(CharDistributionAnalysis):
class EUCJPDistributionAnalysis(CharDistributionAnalysis):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\charsetgroupprober.py
-----------------------------
class CharSetGroupProber(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\charsetprober.py
-----------------------------
>         """
          We define three types of bytes:
          alphabet: english alphabets [a-zA-Z]
          international: international characters [\x80-\xFF]
class CharSetProber:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\codingstatemachine.py
-----------------------------
>     """
      A state machine to verify a byte sequence for a particular encoding. For
      each byte the detector receives, it will feed that byte to every active
      state machine available, one byte at a time. The state machine changes its
class CodingStateMachine:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\cp949prober.py
-----------------------------
class CP949Prober(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\enums.py
-----------------------------
> """
  All of the Enums that are used throughout the chardet package.
  
  :author: Dan Blanchard (dan.blanchard@gmail.com)
class InputState:
class LanguageFilter:
class ProbingState:
class MachineState:
class SequenceLikelihood:
class CharacterCategory:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\escprober.py
-----------------------------
>     """
      This CharSetProber uses a "code scheme" approach for detecting encodings,
      whereby easily recognizable escape or shift sequences are relied on to
      identify these encodings.
class EscCharSetProber(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\escsm.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\eucjpprober.py
-----------------------------
class EUCJPProber(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\euckrfreq.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\euckrprober.py
-----------------------------
class EUCKRProber(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\euctwfreq.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\euctwprober.py
-----------------------------
class EUCTWProber(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\gb2312freq.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\gb2312prober.py
-----------------------------
class GB2312Prober(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\hebrewprober.py
-----------------------------
class HebrewProber(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\jisfreq.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\johabfreq.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\johabprober.py
-----------------------------
class JOHABProber(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\jpcntx.py
-----------------------------
class JapaneseContextAnalysis:
class SJISContextAnalysis(JapaneseContextAnalysis):
class EUCJPContextAnalysis(JapaneseContextAnalysis):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langbulgarianmodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langgreekmodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langhebrewmodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langhungarianmodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langrussianmodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langthaimodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\langturkishmodel.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\latin1prober.py
-----------------------------
class Latin1Prober(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\mbcharsetprober.py
-----------------------------
>     """
      MultiByteCharSetProber
class MultiByteCharSetProber(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\mbcsgroupprober.py
-----------------------------
class MBCSGroupProber(CharSetGroupProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\mbcssm.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\sbcharsetprober.py
-----------------------------
class SingleByteCharSetProber(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\sbcsgroupprober.py
-----------------------------
class SBCSGroupProber(CharSetGroupProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\sjisprober.py
-----------------------------
class SJISProber(MultiByteCharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\universaldetector.py
-----------------------------
> """
  Module containing the UniversalDetector detector class, which is the primary
  class a user of ``chardet`` should use.
  
class a user of ``chardet`` should use.
class UniversalDetector:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\utf1632prober.py
-----------------------------
>     """
      This class simply looks for occurrences of zero bytes, and infers
      whether the file is UTF16 or UTF32 (low-endian or big-endian)
      For instance, files looking like ( \0 \0 \0 [nonzero] )+
class UTF1632Prober(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\utf8prober.py
-----------------------------
class UTF8Prober(CharSetProber):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\version.py
-----------------------------
> """
  This module exists only to simplify retrieving the version number of chardet
  from within setup.py and from chardet subpackages.
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\chardet\__init__.py
-----------------------------
>     """
      Detect the encoding of the given byte string.
  
      :param byte_str:     The byte sequence to examine.
def detect(byte_str):
def detect_all(byte_str, ignore_threshold=False):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\colorama\ansi.py
-----------------------------
def code_to_chars(code):
def set_title(title):
def clear_screen(mode=2):
def clear_line(mode=2):
class AnsiCodes(object):
class AnsiCursor(object):
class AnsiFore(AnsiCodes):
class AnsiBack(AnsiCodes):
class AnsiStyle(AnsiCodes):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\colorama\ansitowin32.py
-----------------------------
class StreamWrapper(object):
class AnsiToWin32(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\colorama\initialise.py
-----------------------------
def reset_all():
def init(autoreset=False, convert=None, strip=None, wrap=True):
def deinit():
def colorama_text(*args, **kwargs):
def reinit():
def wrap_stream(stream, convert, strip, autoreset, wrap):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\colorama\win32.py
-----------------------------
>         """struct in wincon.h."""
          _fields_ = [
              ("dwSize", COORD),
              ("dwCursorPosition", COORD),

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\colorama\winterm.py
-----------------------------
class WinColor(object):
class WinStyle(object):
class WinTerm(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\colorama\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\compat.py
-----------------------------
>         # """splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."""
          # global _userprog
          # if _userprog is None:
              # import re

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\database.py
-----------------------------
> """PEP 376 implementation."""
  
  from __future__ import unicode_literals
  
class _Cache(object):
class DistributionPath(object):
class Distribution(object):
class BaseInstalledDistribution(Distribution):
class InstalledDistribution(BaseInstalledDistribution):
class EggInfoDistribution(BaseInstalledDistribution):
class DependencyGraph(object):
def make_graph(dists, scheme='default'):
def get_dependent_dists(dists, dist):
def get_required_dists(dists, dist):
def make_dist(name, version, **kwargs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\index.py
-----------------------------
>     """
      This class represents a package index compatible with PyPI, the Python
      Package Index.
class PackageIndex(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\locators.py
-----------------------------
>     """
      Return all distribution names known by an index.
      :param url: The URL of the index.
      :return: A list of all known distribution names.
def get_all_distribution_names(url=None):
class RedirectHandler(BaseRedirectHandler):
class Locator(object):
class PyPIRPCLocator(Locator):
class PyPIJSONLocator(Locator):
class Page(object):
class SimpleScrapingLocator(Locator):
class DirectoryLocator(Locator):
class JSONLocator(Locator):
class DistPathLocator(Locator):
class AggregatingLocator(Locator):
class DependencyFinder(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\manifest.py
-----------------------------
> """
  Class representing the list of files in a distribution.
  
  Equivalent to distutils.filelist, but fixes some problems.
class Manifest(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\markers.py
-----------------------------
> """
  Parser for the environment markers micro-language defined in PEP 508.
def _is_literal(o):
def _get_versions(s):
class Evaluator(object):
def default_context():
def interpret(marker, execution_context=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\metadata.py
-----------------------------
> """Implementation of the Metadata for Python packages PEPs.
  
  Supports all metadata formats (1.0, 1.1, 1.2, 1.3/2.1 and 2.2).
class MetadataMissingError(DistlibException):
class MetadataConflictError(DistlibException):
class MetadataUnrecognizedVersionError(DistlibException):
class MetadataInvalidError(DistlibException):
def _version2fieldlist(version):
def _best_version(fields):
def _get_name_and_version(name, version, for_filename=False):
class LegacyMetadata(object):
class Metadata(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\resources.py
-----------------------------
>         """
          Is the cache stale for the given resource?
  
          :param resource: The :class:`Resource` being cached.
class ResourceCache(Cache):
class ResourceBase(object):
class Resource(ResourceBase):
class ResourceContainer(ResourceBase):
class ResourceFinder(object):
class ZipResourceFinder(ResourceFinder):
def register_finder(loader, finder_maker):
def finder(package):
def finder_for_path(path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\scripts.py
-----------------------------
>     """
      A class to copy or create scripts from source scripts or callable
      specifications.
def enquote_executable(executable):
class ScriptMaker(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\util.py
-----------------------------
>     """
      Parse a marker string and return a dictionary containing a marker expression.
  
      The dictionary will contain keys "op", "lhs" and "rhs" for non-terminals in
def parse_marker(marker_string):
def parse_requirement(req):
def get_resources_dests(resources_root, rules):
def in_venv():
def get_executable():
def proceed(prompt, allowed_chars, error_prompt=None, default=None):
def extract_by_key(d, keys):
def read_exports(stream):
def write_exports(exports, stream):
def tempdir():
def chdir(d):
def socket_timeout(seconds=15):
class cached_property(object):
def convert_path(pathname):
class FileOperator(object):
def resolve(module_name, dotted_path):
class ExportEntry(object):
def get_export_entry(specification):
def get_cache_base(suffix=None):
def path_to_cache_dir(path):
def ensure_slash(s):
def parse_credentials(netloc):
def get_process_umask():
def is_string_sequence(seq):
def split_filename(filename, project_name=None):
def parse_name_and_version(p):
def get_extras(requested, available):
def _get_external_data(url):
def get_project_data(name):
def get_package_data(name, version):
class Cache(object):
class EventMixin(object):
class Sequencer(object):
def unarchive(archive_filename, dest_dir, format=None, check=True):
def zip_dir(directory):
class Progress(object):
def iglob(path_glob):
def _iglob(path_glob):
class Transport(xmlrpclib.Transport):
class ServerProxy(xmlrpclib.ServerProxy):
def _csv_open(fn, mode, **kwargs):
class CSVBase(object):
class CSVReader(CSVBase):
class CSVWriter(CSVBase):
class Configurator(BaseConfigurator):
class SubprocessMixin(object):
def normalize_name(name):
class PyPIRCFile(object):
def _load_pypirc(index):
def _store_pypirc(index):
def get_host_platform():
def get_platform():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\version.py
-----------------------------
> """
  Implementation of a flexible versioning scheme providing support for PEP-440,
  setuptools-compatible and semantic versioning.
class UnsupportedVersionError(ValueError):
class Version(object):
class Matcher(object):
def _pep_440_key(s):
class NormalizedVersion(Version):
def _match_prefix(x, y):
class NormalizedMatcher(Matcher):
def _suggest_semantic_version(s):
def _suggest_normalized_version(s):
def _legacy_key(s):
class LegacyVersion(Version):
class LegacyMatcher(Matcher):
def is_semver(s):
def _semantic_key(s):
class SemanticVersion(Version):
class SemanticMatcher(Matcher):
class VersionScheme(object):
def get_scheme(name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\wheel.py
-----------------------------
>     """
      Class to build and install from Wheel files (PEP 427).
def _get_suffixes():
def _load_dynamic(name, path):
class Mounter(object):
class Wheel(object):
def _get_glibc_version():
def compatible_tags():
def is_compatible(wheel, tags=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distlib\__init__.py
-----------------------------
class DistlibException(Exception):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distro\distro.py
-----------------------------
> """
  The ``distro`` package (``distro`` stands for Linux Distribution) provides
  information about the Linux distribution it runs on, such as a reliable
  machine-readable distro ID, or version information.
class VersionDict(TypedDict):
class InfoDict(TypedDict):
def linux_distribution(full_distribution_name: bool = True) -> Tuple[str, str, str]:
def id() -> str:
def name(pretty: bool = False) -> str:
def version(pretty: bool = False, best: bool = False) -> str:
def version_parts(best: bool = False) -> Tuple[str, str, str]:
def major_version(best: bool = False) -> str:
def minor_version(best: bool = False) -> str:
def build_number(best: bool = False) -> str:
def like() -> str:
def codename() -> str:
def info(pretty: bool = False, best: bool = False) -> InfoDict:
def os_release_info() -> Dict[str, str]:
def lsb_release_info() -> Dict[str, str]:
def distro_release_info() -> Dict[str, str]:
def uname_info() -> Dict[str, str]:
def os_release_attr(attribute: str) -> str:
def lsb_release_attr(attribute: str) -> str:
def distro_release_attr(attribute: str) -> str:
def uname_attr(attribute: str) -> str:
class LinuxDistribution:
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distro\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\distro\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\codec.py
-----------------------------
class Codec(codecs.Codec):
class IncrementalEncoder(codecs.BufferedIncrementalEncoder):
class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
class StreamWriter(Codec, codecs.StreamWriter):
class StreamReader(Codec, codecs.StreamReader):
def getregentry() -> codecs.CodecInfo:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\compat.py
-----------------------------
def ToASCII(label: str) -> bytes:
def ToUnicode(label: Union[bytes, bytearray]) -> str:
def nameprep(s: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\core.py
-----------------------------
>     """ Base exception for all IDNA-encoding related problems """
      pass
  
  
class IDNAError(UnicodeError):
class IDNABidiError(IDNAError):
class InvalidCodepoint(IDNAError):
class InvalidCodepointContext(IDNAError):
def _combining_class(cp: int) -> int:
def _is_script(cp: str, script: str) -> bool:
def _punycode(s: str) -> bytes:
def _unot(s: int) -> str:
def valid_label_length(label: Union[bytes, str]) -> bool:
def valid_string_length(label: Union[bytes, str], trailing_dot: bool) -> bool:
def check_bidi(label: str, check_ltr: bool = False) -> bool:
def check_initial_combiner(label: str) -> bool:
def check_hyphen_ok(label: str) -> bool:
def check_nfc(label: str) -> None:
def valid_contextj(label: str, pos: int) -> bool:
def valid_contexto(label: str, pos: int, exception: bool = False) -> bool:
def check_label(label: Union[str, bytes, bytearray]) -> None:
def alabel(label: str) -> bytes:
def ulabel(label: Union[str, bytes, bytearray]) -> str:
def uts46_remap(domain: str, std3_rules: bool = True, transitional: bool = False) -> str:
def encode(s: Union[str, bytes, bytearray], strict: bool = False, uts46: bool = False, std3_rules: bool = False, transitional: bool = False) -> bytes:
def decode(s: Union[str, bytes, bytearray], strict: bool = False, uts46: bool = False, std3_rules: bool = False) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\idnadata.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\intranges.py
-----------------------------
> """
  Given a list of integers, made up of (hopefully) a small number of long runs
  of consecutive integers, compute a representation of the form
  ((start1, end1), (start2, end2) ...). Then answer the question "was x present
def intranges_from_list(list_: List[int]) -> Tuple[int, ...]:
def _encode_range(start: int, end: int) -> int:
def _decode_range(r: int) -> Tuple[int, int]:
def intranges_contain(int_: int, ranges: Tuple[int, ...]) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\package_data.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\uts46data.py
-----------------------------
> """IDNA Mapping Table from UTS46."""
  
  
  __version__ = '15.0.0'
def _seg_0() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_1() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_2() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_3() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_4() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_5() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_6() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_7() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_8() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_9() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_10() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_11() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_12() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_13() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_14() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_15() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_16() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_17() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_18() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_19() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_20() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_21() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_22() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_23() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_24() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_25() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_26() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_27() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_28() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_29() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_30() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_31() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_32() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_33() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_34() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_35() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_36() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_37() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_38() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_39() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_40() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_41() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_42() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_43() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_44() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_45() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_46() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_47() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_48() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_49() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_50() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_51() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_52() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_53() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_54() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_55() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_56() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_57() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_58() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_59() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_60() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_61() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_62() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_63() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_64() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_65() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_66() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_67() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_68() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_69() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_70() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_71() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_72() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_73() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_74() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_75() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_76() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_77() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_78() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_79() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_80() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_81() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\idna\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\msgpack\exceptions.py
-----------------------------
>     """Base class for some exceptions raised while unpacking.
  
      NOTE: unpack may raise exception other than subclass of
      UnpackException.  If you want to catch all error, catch
class UnpackException(Exception):
class BufferFull(UnpackException):
class OutOfData(UnpackException):
class FormatError(ValueError, UnpackException):
class StackError(ValueError, UnpackException):
class ExtraData(UnpackValueError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\msgpack\ext.py
-----------------------------
>     """ExtType represents ext type in msgpack."""
  
      def __new__(cls, code, data):
          if not isinstance(code, int):
class ExtType(namedtuple("ExtType", "code data")):
class Timestamp(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\msgpack\fallback.py
-----------------------------
> """Fallback pure Python implementation of msgpack"""
  from datetime import datetime as _DateTime
  import sys
  import struct
def _check_type_strict(obj, t, type=type, tuple=tuple):
def _get_data_from_buffer(obj):
def unpackb(packed, **kwargs):
class Unpacker(object):
class Packer(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\msgpack\__init__.py
-----------------------------
>     """
      Pack object `o` and write it to `stream`
  
      See :class:`Packer` for options.
def pack(o, stream, **kwargs):
def packb(o, **kwargs):
def unpack(stream, **kwargs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
def _coerce_parse_result(results: Union[ParseResults, List[Any]]) -> List[Any]:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str) -> bool:
class Undefined:
def _get_env(environment: Dict[str, str], name: str) -> str:
def _evaluate_markers(markers: List[Any], environment: Dict[str, str]) -> bool:
def format_full_version(info: "sys._version_info") -> str:
def default_environment() -> Dict[str, str]:
class Marker:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\specifiers.py
-----------------------------
>     """
      An invalid specifier was found, users should refer to PEP 440.
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class _IndividualSpecifier(BaseSpecifier):
class LegacySpecifier(_IndividualSpecifier):
def _require_version_compare(
class Specifier(_IndividualSpecifier):
def _version_split(version: str) -> List[str]:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: List[str], right: List[str]) -> Tuple[List[str], List[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> FrozenSet[Tag]:
def _get_config_var(name: str, warn: bool = False) -> Union[int, str, None]:
def _normalize_string(string: str) -> str:
def _abi3_applies(python_version: PythonVersion) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> List[str]:
def cpython_tags(
def _generic_abi() -> Iterator[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: MacVersion, cpu_arch: str) -> List[str]:
def mac_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\utils.py
-----------------------------
>     """
      An invalid wheel filename was found, users should refer to PEP 427.
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str) -> NormalizedName:
def canonicalize_version(version: Union[Version, str]) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> Tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\version.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
def parse(version: str) -> Union["LegacyVersion", "Version"]:
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s: str) -> Iterator[str]:
def _legacy_cmpkey(version: str) -> LegacyCmpKey:
class Version(_BaseVersion):
def _parse_letter_version(
def _parse_local_version(local: str) -> Optional[LocalType]:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\_manylinux.py
-----------------------------
>         """
          An invalid ELF file header was found.
class _ELFFileHeader:
def _get_elf_header() -> Optional[_ELFFileHeader]:
def _is_linux_armhf() -> bool:
def _is_linux_i686() -> bool:
def _have_compatible_abi(arch: str) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> Optional[str]:
def _glibc_version_string_ctypes() -> Optional[str]:
def _glibc_version_string() -> Optional[str]:
def _parse_glibc_version(version_str: str) -> Tuple[int, int]:
def _get_glibc_version() -> Tuple[int, int]:
def _is_compatible(name: str, arch: str, version: _GLibCVersion) -> bool:
def platform_tags(linux: str, arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
def _read_unpacked(f: IO[bytes], fmt: str) -> Tuple[int, ...]:
def _parse_ld_musl_from_elf(f: IO[bytes]) -> Optional[str]:
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> Optional[_MuslVersion]:
def _get_musl_version(executable: str) -> Optional[_MuslVersion]:
def platform_tags(arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\__about__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\in_process\_in_process.py
-----------------------------
> """This is invoked in a subprocess to call the build backend hooks.
  
  It expects:
  - Command line args: hook_name, control_dir
def write_json(obj, path, **kwargs):
def read_json(path):
class BackendUnavailable(Exception):
class BackendInvalid(Exception):
class HookMissing(Exception):
def contained_in(filename, directory):
def _build_backend():
def _supported_features():
def get_requires_for_build_wheel(config_settings):
def get_requires_for_build_editable(config_settings):
def prepare_metadata_for_build_wheel(
def prepare_metadata_for_build_editable(
def _dist_info_files(whl_zip):
def _get_wheel_metadata_from_wheel(
def _find_already_built_wheel(metadata_directory):
def build_wheel(wheel_directory, config_settings, metadata_directory=None):
def build_editable(wheel_directory, config_settings, metadata_directory=None):
def get_requires_for_build_sdist(config_settings):
class _DummyException(Exception):
class GotUnsupportedOperation(Exception):
def build_sdist(sdist_directory, config_settings):
def main():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\in_process\__init__.py
-----------------------------
> """This is a subpackage because the directory is on sys.path for _in_process.py
  
  The subpackage should stay as empty as possible to avoid shadowing modules that
  the backend might import.

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\build.py
-----------------------------
> """Build a project using PEP 517 hooks.
def validate_system(system):
def load_system(source_dir):
def compat_system(source_dir):
def _do_build(hooks, env, dist, dest):
def build(source_dir, dist, dest=None, system=None):
def main(args):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\check.py
-----------------------------
> """Check a project and backend by attempting to build using PEP 517 hooks.
def check_build_sdist(hooks, build_sys_requires):
def check_build_wheel(hooks, build_sys_requires):
def check(source_dir):
def main(argv=None):
def ansi(s, attr):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\colorlog.py
-----------------------------
> """Nicer log formatting with colours.
  
  Code copied from Tornado, Apache licensed.
def _stderr_supports_color():
class LogFormatter(logging.Formatter):
def enable_colourful_output(level=logging.INFO):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\dirtools.py
-----------------------------
>     """Construct an in-memory zip file for a directory."""
      buffer = io.BytesIO()
      zip_file = zipfile.ZipFile(buffer, 'w')
      for root, dirs, files in os.walk(root):
def dir_to_zipfile(root):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\envbuild.py
-----------------------------
> """Build wheels/sdists by installing build deps to a temporary environment.
def _load_pyproject(source_dir):
class BuildEnvironment:
def build_wheel(source_dir, wheel_dir, config_settings=None):
def build_sdist(source_dir, sdist_dir, config_settings=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\meta.py
-----------------------------
> """Build metadata for a project using PEP 517 hooks.
def _prep_meta(hooks, env, dest):
def build(source_dir='.', dest=None, system=None):
def build_as_zip(builder=build):
def load(root):
def main():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\wrappers.py
-----------------------------
>     """Will be raised if the backend cannot be imported in the hook process."""
      def __init__(self, traceback):
          self.traceback = traceback
  
def write_json(obj, path, **kwargs):
def read_json(path):
class BackendUnavailable(Exception):
class BackendInvalid(Exception):
class HookMissing(Exception):
class UnsupportedOperation(Exception):
def default_subprocess_runner(cmd, cwd=None, extra_environ=None):
def quiet_subprocess_runner(cmd, cwd=None, extra_environ=None):
def norm_and_check(source_tree, requested):
class Pep517HookCaller:
class LoggerWrapper(threading.Thread):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\_compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pep517\__init__.py
-----------------------------
> """Wrappers to build Python packages using PEP 517 hooks

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pkg_resources\py31compat.py
-----------------------------
def _makedirs_31(path, exist_ok=False):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py
-----------------------------
> """
  Package resource API
  --------------------
  
class PEP440Warning(RuntimeWarning):
def parse_version(v):
def _declare_state(vartype, **kw):
def __getstate__():
def __setstate__(state):
def _sget_dict(val):
def _sset_dict(key, ob, state):
def _sget_object(val):
def _sset_object(key, ob, state):
def get_supported_platform():
class ResolutionError(Exception):
class VersionConflict(ResolutionError):
class ContextualVersionConflict(VersionConflict):
class DistributionNotFound(ResolutionError):
class UnknownExtra(ResolutionError):
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def _macosx_vers(_cache=[]):
def _macosx_arch(machine):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
class IMetadataProvider:
class IResourceProvider(IMetadataProvider):
class WorkingSet:
class _ReqExtras(dict):
class Environment:
class ExtractionError(RuntimeError):
class ResourceManager:
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def invalid_marker(text):
def evaluate_marker(text, extra=None):
class NullProvider:
class EggProvider(NullProvider):
class DefaultProvider(EggProvider):
class EmptyProvider(NullProvider):
class ZipManifests(dict):
class MemoizedZipManifests(ZipManifests):
class ZipProvider(EggProvider):
class FileMetadata(EmptyProvider):
class PathMetadata(DefaultProvider):
class EggMetadata(ZipProvider):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_nothing(importer, path_item, only=False):
def _by_version_descending(names):
def find_on_path(importer, path_item, only=False):
def dist_factory(path_item, entry, only):
class NoDists:
def safe_listdir(path):
def distributions_from_metadata(path):
def non_empty_lines(path):
def resolve_egg_link(path):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def _rebuild_mod_path(orig_path, package_name, module):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def null_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def _cygwin_patch(filename):  # pragma: nocover
def _normalize_cached(filename, _cache={}):
def _is_egg_path(path):
def _is_unpacked_egg(path):
def _set_parent_ns(packageName):
def yield_lines(strs):
class EntryPoint:
def _remove_md5_fragment(location):
def _version_from_file(lines):
class Distribution:
class EggInfoDistribution(Distribution):
class DistInfoDistribution(Distribution):
def issue_warning(*args, **kw):
class RequirementParseError(ValueError):
def parse_requirements(strs):
class Requirement(packaging.requirements.Requirement):
def _always_object(classes):
def _find_adapter(registry, ob):
def ensure_directory(path):
def _bypass_ensure_directory(path):
def split_sections(s):
def _mkstemp(*args, **kw):
def _call_aside(f, *args, **kwargs):
def _initialize(g=globals()):
def _initialize_master_working_set():
class PkgResourcesDeprecationWarning(Warning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\android.py
-----------------------------
>     """
      Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_. Makes 
use of the
      `appname <platformdirs.api.PlatformDirsABC.appname>` and
      `version <platformdirs.api.PlatformDirsABC.version>`.
class Android(PlatformDirsABC):
def _android_folder() -> str | None:
def _android_documents_folder() -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\api.py
-----------------------------
>     """
      Abstract base class for platform directories.
class PlatformDirsABC(ABC):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\macos.py
-----------------------------
>     """
      Platform directories for the macOS operating system. Follows the guidance from `Apple 
documentation
      <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/Fil
eSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.
      Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>` and
class MacOS(PlatformDirsABC):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\unix.py
-----------------------------
>     """
      On Unix/Linux, we follow the
      `XDG Basedir Spec 
<https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_. The spec 
allows
      overriding directories with environment variables. The examples show are the default 
values, alongside the name of
class Unix(PlatformDirsABC):
def _get_user_dirs_folder(key: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\version.py
-----------------------------
> """Version information"""
  
  __version__ = "2.5.2"
  __version_info__ = (2, 5, 2)

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\windows.py
-----------------------------
>     """`MSDN on where to store app data files
      <http://support.microsoft.com/default.aspx?scid=kb;en-us;310294#XSLTH3194121123120121120
120>`_.
      Makes use of the
      `appname <platformdirs.api.PlatformDirsABC.appname>`,
class Windows(PlatformDirsABC):
def get_win_folder_from_env_vars(csidl_name: str) -> str:
def get_win_folder_from_registry(csidl_name: str) -> str:
def get_win_folder_via_ctypes(csidl_name: str) -> str:
def _pick_get_win_folder() -> Callable[[str], str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\__init__.py
-----------------------------
> """
  Utilities for determining application-specific dirs. See 
<https://github.com/platformdirs/platformdirs> for details and
  usage.
def _set_platform_dir_class() -> type[PlatformDirsABC]:
def user_data_dir(
def site_data_dir(
def user_config_dir(
def site_config_dir(
def user_cache_dir(
def user_state_dir(
def user_log_dir(
def user_documents_dir() -> str:
def user_runtime_dir(
def user_data_path(
def site_data_path(
def user_config_path(
def site_config_path(
def user_cache_path(
def user_state_path(
def user_log_path(
def user_documents_path() -> Path:
def user_runtime_path(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\platformdirs\__main__.py
-----------------------------
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\filters\__init__.py
-----------------------------
> """
      pygments.filters
      ~~~~~~~~~~~~~~~~
  
def find_filter_class(filtername):
def get_filter_by_name(filtername, **options):
def get_all_filters():
def _replace_special(ttype, value, regex, specialttype,
class CodeTagFilter(Filter):
class SymbolFilter(Filter):
class KeywordCaseFilter(Filter):
class NameHighlightFilter(Filter):
class ErrorToken(Exception):
class RaiseOnErrorTokenFilter(Filter):
class VisibleWhitespaceFilter(Filter):
class GobbleFilter(Filter):
class TokenMergeFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\bbcode.py
-----------------------------
> """
      pygments.formatters.bbcode
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BBCodeFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\groff.py
-----------------------------
> """
      pygments.formatters.groff
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class GroffFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\html.py
-----------------------------
> """
      pygments.formatters.html
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_html(text, table=_escape_html_table):
def webify(color):
def _get_ttype_class(ttype):
class HtmlFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\img.py
-----------------------------
> """
      pygments.formatters.img
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class PilNotAvailable(ImportError):
class FontNotFound(Exception):
class FontManager:
class ImageFormatter(Formatter):
class GifImageFormatter(ImageFormatter):
class JpgImageFormatter(ImageFormatter):
class BmpImageFormatter(ImageFormatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\irc.py
-----------------------------
> """
      pygments.formatters.irc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def ircformat(color, text):
class IRCFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\latex.py
-----------------------------
> """
      pygments.formatters.latex
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_tex(text, commandprefix):
def _get_ttype_name(ttype):
class LatexFormatter(Formatter):
class LatexEmbeddedLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\other.py
-----------------------------
> """
      pygments.formatters.other
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class NullFormatter(Formatter):
class RawTokenFormatter(Formatter):
class TestcaseFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\pangomarkup.py
-----------------------------
> """
      pygments.formatters.pangomarkup
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_special_chars(text, table=_escape_table):
class PangoMarkupFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\rtf.py
-----------------------------
> """
      pygments.formatters.rtf
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class RtfFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\svg.py
-----------------------------
> """
      pygments.formatters.svg
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_html(text):
class SvgFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\terminal.py
-----------------------------
> """
      pygments.formatters.terminal
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class TerminalFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\terminal256.py
-----------------------------
> """
      pygments.formatters.terminal256
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class EscapeSequence:
class Terminal256Formatter(Formatter):
class TerminalTrueColorFormatter(Terminal256Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatters\__init__.py
-----------------------------
> """
      pygments.formatters
      ~~~~~~~~~~~~~~~~~~~
  
def _load_formatters(module_name):
def get_all_formatters():
def find_formatter_class(alias):
def get_formatter_by_name(_alias, **options):
def load_formatter_from_file(filename, formattername="CustomFormatter",
def get_formatter_for_filename(fn, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\lexers\python.py
-----------------------------
> """
      pygments.lexers.python
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PythonLexer(RegexLexer):
class Python2Lexer(RegexLexer):
class PythonConsoleLexer(Lexer):
class PythonTracebackLexer(RegexLexer):
class Python2TracebackLexer(RegexLexer):
class CythonLexer(RegexLexer):
class DgLexer(RegexLexer):
class NumPyLexer(PythonLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\lexers\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\lexers\__init__.py
-----------------------------
> """
      pygments.lexers
      ~~~~~~~~~~~~~~~
  
def _load_lexers(module_name):
def get_all_lexers(plugins=True):
def find_lexer_class(name):
def find_lexer_class_by_name(_alias):
def get_lexer_by_name(_alias, **options):
def load_lexer_from_file(filename, lexername="CustomLexer", **options):
def find_lexer_class_for_filename(_fn, code=None):
def get_lexer_for_filename(_fn, code=None, **options):
def get_lexer_for_mimetype(_mime, **options):
def _iter_lexerclasses(plugins=True):
def guess_lexer_for_filename(_fn, _text, **options):
def guess_lexer(_text, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\styles\__init__.py
-----------------------------
> """
      pygments.styles
      ~~~~~~~~~~~~~~~
  
def get_style_by_name(name):
def get_all_styles():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\cmdline.py
-----------------------------
> """
      pygments.cmdline
      ~~~~~~~~~~~~~~~~
  
def _parse_options(o_strs):
def _parse_filters(f_strs):
def _print_help(what, name):
def _print_list(what):
def _print_list_as_json(requested_items):
def main_inner(parser, argns):
class HelpFormatter(argparse.HelpFormatter):
def main(args=sys.argv):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\console.py
-----------------------------
> """
      pygments.console
      ~~~~~~~~~~~~~~~~
  
def reset_color():
def colorize(color_key, text):
def ansiformat(attr, text):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\filter.py
-----------------------------
> """
      pygments.filter
      ~~~~~~~~~~~~~~~
  
def apply_filters(stream, filters, lexer=None):
def simplefilter(f):
class Filter:
class FunctionFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\formatter.py
-----------------------------
> """
      pygments.formatter
      ~~~~~~~~~~~~~~~~~~
  
def _lookup_style(style):
class Formatter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\lexer.py
-----------------------------
> """
      pygments.lexer
      ~~~~~~~~~~~~~~
  
class LexerMeta(type):
class Lexer(metaclass=LexerMeta):
class DelegatingLexer(Lexer):
class include(str):  # pylint: disable=invalid-name
class _inherit:
class combined(tuple):  # pylint: disable=invalid-name
class _PseudoMatch:
def bygroups(*args):
class _This:
def using(_other, **kwargs):
class default:
class words(Future):
class RegexLexerMeta(LexerMeta):
class RegexLexer(Lexer, metaclass=RegexLexerMeta):
class LexerContext:
class ExtendedRegexLexer(RegexLexer):
def do_insertions(insertions, tokens):
class ProfilingRegexLexerMeta(RegexLexerMeta):
class ProfilingRegexLexer(RegexLexer, metaclass=ProfilingRegexLexerMeta):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\modeline.py
-----------------------------
> """
      pygments.modeline
      ~~~~~~~~~~~~~~~~~
  
def get_filetype_from_line(l):
def get_filetype_from_buffer(buf, max_lines=5):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\plugin.py
-----------------------------
> """
      pygments.plugin
      ~~~~~~~~~~~~~~~
  
def iter_entry_points(group_name):
def find_plugin_lexers():
def find_plugin_formatters():
def find_plugin_styles():
def find_plugin_filters():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\regexopt.py
-----------------------------
> """
      pygments.regexopt
      ~~~~~~~~~~~~~~~~~
  
def make_charset(letters):
def regex_opt_inner(strings, open_paren):
def regex_opt(strings, prefix='', suffix=''):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\scanner.py
-----------------------------
> """
      pygments.scanner
      ~~~~~~~~~~~~~~~~
  
class EndOfText(RuntimeError):
class Scanner:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\sphinxext.py
-----------------------------
> """
      pygments.sphinxext
      ~~~~~~~~~~~~~~~~~~
  
class PygmentsDoc(Directive):
def setup(app):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\style.py
-----------------------------
> """
      pygments.style
      ~~~~~~~~~~~~~~
  
class StyleMeta(type):
class Style(metaclass=StyleMeta):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\token.py
-----------------------------
> """
      pygments.token
      ~~~~~~~~~~~~~~
  
class _TokenType(tuple):
def is_token_subtype(ttype, other):
def string_to_tokentype(s):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\unistring.py
-----------------------------
> """
      pygments.unistring
      ~~~~~~~~~~~~~~~~~~
  
def combine(*args):
def allexcept(*args):
def _handle_runs(char_list):  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\util.py
-----------------------------
> """
      pygments.util
      ~~~~~~~~~~~~~
  
class ClassNotFound(ValueError):
class OptionError(Exception):
def get_choice_opt(options, optname, allowed, default=None, normcase=False):
def get_bool_opt(options, optname, default=None):
def get_int_opt(options, optname, default=None):
def get_list_opt(options, optname, default=None):
def docstring_headline(obj):
def make_analysator(f):
def shebang_matches(text, regex):
def doctype_matches(text, regex):
def html_doctype_matches(text):
def looks_like_xml(text):
def surrogatepair(c):
def format_lines(var_name, seq, raw=False, indent_level=0):
def duplicates_removed(it, already_seen=()):
class Future:
def guess_decode(text):
def guess_decode_from_terminal(text, term):
def terminal_encoding(term):
class UnclosingTextIOWrapper(TextIOWrapper):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\__init__.py
-----------------------------
> """
      Pygments
      ~~~~~~~~
  
def lex(code, lexer):
def format(tokens, formatter, outfile=None):  # pylint: disable=redefined-builtin
def highlight(code, lexer, formatter, outfile=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pygments\__main__.py
-----------------------------
> """
      pygments.__main__
      ~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\diagram\__init__.py
-----------------------------
> jinja2_template_source = """\
  <!DOCTYPE html>
  <html>
  <head>
class EachItem(railroad.Group):
class AnnotatedItem(railroad.Group):
class EditablePartial(Generic[T]):
def railroad_to_html(diagrams: List[NamedDiagram], **kwargs) -> str:
def resolve_partial(partial: "EditablePartial[T]") -> T:
def to_railroad(
def _should_vertical(
class ElementState:
class ConverterState:
def _worth_extracting(element: pyparsing.ParserElement) -> bool:
def _apply_diagram_item_enhancements(fn):
def _visible_exprs(exprs: Iterable[pyparsing.ParserElement]):
def _to_diagram_element(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\actions.py
-----------------------------
>     """
      Wrapper for parse actions, to ensure they are only called once.
class OnlyOnce:
def match_only_at_col(n):
def replace_with(repl_str):
def remove_quotes(s, l, t):
def with_attribute(*args, **attr_dict):
def with_class(classname, namespace=""):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\common.py
-----------------------------
>     """Here are some common low-level expressions that may be useful in
      jump-starting parser development:
  
      - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
class pyparsing_common:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\core.py
-----------------------------
>     """
      A cross-version compatibility configuration for pyparsing features that will be
      released in a future version. By setting values in this configuration to True,
      those features can be enabled in prior versions for compatibility development
class __compat__(__config_flags):
class __diag__(__config_flags):
class Diagnostics(Enum):
def enable_diag(diag_enum: Diagnostics) -> None:
def disable_diag(diag_enum: Diagnostics) -> None:
def enable_all_warnings() -> None:
def _should_enable_warnings(
def _trim_arity(func, max_limit=3):
def condition_as_parse_action(
def _default_start_debug_action(
def _default_success_debug_action(
def _default_exception_debug_action(
def null_debug_action(*args):
class ParserElement(ABC):
class _PendingSkip(ParserElement):
class Token(ParserElement):
class Empty(Token):
class NoMatch(Token):
class Literal(Token):
class _SingleCharLiteral(Literal):
class Keyword(Token):
class CaselessLiteral(Literal):
class CaselessKeyword(Keyword):
class CloseMatch(Token):
class Word(Token):
class _WordRegex(Word):
class Char(_WordRegex):
class Regex(Token):
class QuotedString(Token):
class CharsNotIn(Token):
class White(Token):
class PositionToken(Token):
class GoToColumn(PositionToken):
class LineStart(PositionToken):
class LineEnd(PositionToken):
class StringStart(PositionToken):
class StringEnd(PositionToken):
class WordStart(PositionToken):
class WordEnd(PositionToken):
class ParseExpression(ParserElement):
class And(ParseExpression):
class Or(ParseExpression):
class MatchFirst(ParseExpression):
class Each(ParseExpression):
class ParseElementEnhance(ParserElement):
class IndentedBlock(ParseElementEnhance):
class AtStringStart(ParseElementEnhance):
class AtLineStart(ParseElementEnhance):
class FollowedBy(ParseElementEnhance):
class PrecededBy(ParseElementEnhance):
class Located(ParseElementEnhance):
class NotAny(ParseElementEnhance):
class _MultipleMatch(ParseElementEnhance):
class OneOrMore(_MultipleMatch):
class ZeroOrMore(_MultipleMatch):
class _NullToken:
class Opt(ParseElementEnhance):
class SkipTo(ParseElementEnhance):
class Forward(ParseElementEnhance):
class TokenConverter(ParseElementEnhance):
class Combine(TokenConverter):
class Group(TokenConverter):
class Dict(TokenConverter):
class Suppress(TokenConverter):
def trace_parse_action(f: ParseAction) -> ParseAction:
def srange(s: str) -> str:
def token_map(func, *args) -> ParseAction:
def autoname_elements() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\exceptions.py
-----------------------------
>     """base exception class for all parsing runtime exceptions"""
  
      # Performance tuning: we construct a *lot* of these, so keep this
      # constructor as small and fast as possible
class ExceptionWordUnicode(ppu.Latin1, ppu.LatinA, ppu.LatinB, ppu.Greek, ppu.Cyrillic):
class ParseBaseException(Exception):
class ParseException(ParseBaseException):
class ParseFatalException(ParseBaseException):
class ParseSyntaxException(ParseFatalException):
class RecursiveGrammarException(Exception):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\helpers.py
-----------------------------
>     """Helper to define a delimited list of expressions - the delimiter
      defaults to ','. By default, the list elements and delimiters can
      have intervening whitespace, and comments, but this can be
      overridden by passing ``combine=True`` in the constructor. If
def delimited_list(
def counted_array(
def match_previous_literal(expr: ParserElement) -> ParserElement:
def match_previous_expr(expr: ParserElement) -> ParserElement:
def one_of(
def dict_of(key: ParserElement, value: ParserElement) -> ParserElement:
def original_text_for(
def ungroup(expr: ParserElement) -> ParserElement:
def locatedExpr(expr: ParserElement) -> ParserElement:
def nested_expr(
def _makeTags(tagStr, xml, suppress_LT=Suppress("<"), suppress_GT=Suppress(">")):
def make_html_tags(
def make_xml_tags(
def replace_html_entity(t):
class OpAssoc(Enum):
def infix_notation(
def indentedBlock(blockStatementExpr, indentStack, indent=True, backup_stacks=[]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\results.py
-----------------------------
>     """Structured parse results, to provide multiple means of access to
      the parsed data:
  
      - as a list (``len(results)``)
class _ParseResultsWithOffset:
class ParseResults:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\testing.py
-----------------------------
>     """
      namespace class for classes useful in writing unit tests
class pyparsing_test:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\unicode.py
-----------------------------
>     """
      A set of Unicode characters, for language-specific strings for
      ``alphas``, ``nums``, ``alphanums``, and ``printables``.
      A unicode_set is defined by a list of ranges in the Unicode character
class _lazyclassproperty:
class unicode_set:
class pyparsing_unicode(unicode_set):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\util.py
-----------------------------
>     """Internal class for defining compatibility and debugging flags"""
  
      _all_names: List[str] = []
      _fixed_names: List[str] = []
class __config_flags:
def col(loc: int, strg: str) -> int:
def lineno(loc: int, strg: str) -> int:
def line(loc: int, strg: str) -> str:
class _UnboundedCache:
class _FifoCache:
class LRUMemo:
class UnboundedMemo(dict):
def _escape_regex_range_chars(s: str) -> str:
def _collapse_string_to_ranges(
def _flatten(ll: list) -> list:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\pyparsing\__init__.py
-----------------------------
> __doc__ = """
  pyparsing module - Classes and methods to define and execute parsing grammars
  =============================================================================
  
class version_info(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\adapters.py
-----------------------------
> """
  requests.adapters
  ~~~~~~~~~~~~~~~~~
  
class BaseAdapter:
class HTTPAdapter(BaseAdapter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\api.py
-----------------------------
> """
  requests.api
  ~~~~~~~~~~~~
  
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\auth.py
-----------------------------
> """
  requests.auth
  ~~~~~~~~~~~~~
  
def _basic_auth_str(username, password):
class AuthBase:
class HTTPBasicAuth(AuthBase):
class HTTPProxyAuth(HTTPBasicAuth):
class HTTPDigestAuth(AuthBase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\certs.py
-----------------------------
> """
  requests.certs
  ~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\compat.py
-----------------------------
> """
  requests.compat
  ~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\cookies.py
-----------------------------
> """
  requests.cookies
  ~~~~~~~~~~~~~~~~
  
class MockRequest:
class MockResponse:
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
class CookieConflictError(RuntimeError):
class RequestsCookieJar(cookielib.CookieJar, MutableMapping):
def _copy_cookie_jar(jar):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\exceptions.py
-----------------------------
> """
  requests.exceptions
  ~~~~~~~~~~~~~~~~~~~
  
class RequestException(IOError):
class InvalidJSONError(RequestException):
class JSONDecodeError(InvalidJSONError, CompatJSONDecodeError):
class HTTPError(RequestException):
class ConnectionError(RequestException):
class ProxyError(ConnectionError):
class SSLError(ConnectionError):
class Timeout(RequestException):
class ConnectTimeout(ConnectionError, Timeout):
class ReadTimeout(Timeout):
class URLRequired(RequestException):
class TooManyRedirects(RequestException):
class MissingSchema(RequestException, ValueError):
class InvalidSchema(RequestException, ValueError):
class InvalidURL(RequestException, ValueError):
class InvalidHeader(RequestException, ValueError):
class InvalidProxyURL(InvalidURL):
class ChunkedEncodingError(RequestException):
class ContentDecodingError(RequestException, BaseHTTPError):
class StreamConsumedError(RequestException, TypeError):
class RetryError(RequestException):
class UnrewindableBodyError(RequestException):
class RequestsWarning(Warning):
class FileModeWarning(RequestsWarning, DeprecationWarning):
class RequestsDependencyWarning(RequestsWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\help.py
-----------------------------
> """Module containing bug report helper(s)."""
  
  import json
  import platform
def _implementation():
def info():
def main():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\hooks.py
-----------------------------
> """
  requests.hooks
  ~~~~~~~~~~~~~~
  
def default_hooks():
def dispatch_hook(key, hooks, hook_data, **kwargs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\models.py
-----------------------------
> """
  requests.models
  ~~~~~~~~~~~~~~~
  
class RequestEncodingMixin:
class RequestHooksMixin:
class Request(RequestHooksMixin):
class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
class Response:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\packages.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\sessions.py
-----------------------------
> """
  requests.sessions
  ~~~~~~~~~~~~~~~~~
  
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
class SessionRedirectMixin:
class Session(SessionRedirectMixin):
def session():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\status_codes.py
-----------------------------
> r"""
  The ``codes`` object defines a mapping from common names for HTTP statuses
  to their numerical codes, accessible either as attributes or as dictionary
  items.
def _init():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\structures.py
-----------------------------
> """
  requests.structures
  ~~~~~~~~~~~~~~~~~~~
  
class CaseInsensitiveDict(MutableMapping):
class LookupDict(dict):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\utils.py
-----------------------------
> """
  requests.utils
  ~~~~~~~~~~~~~~
  
def dict_to_sequence(d):
def super_len(o):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def extract_zipped_paths(path):
def atomic_open(filename):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def _parse_content_type_header(header):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_ipv4_address(string_ip):
def is_valid_cidr(string_network):
def set_environ(env_name, value):
def should_bypass_proxies(url, no_proxy):
def get_environ_proxies(url, no_proxy=None):
def select_proxy(url, proxies):
def resolve_proxies(request, proxies, trust_env=True):
def default_user_agent(name="python-requests"):
def default_headers():
def parse_header_links(value):
def guess_json_utf(data):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def check_header_validity(header):
def _validate_header_part(header_part, header_kind, validator):
def urldefragauth(url):
def rewind_body(prepared_request):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\_internal_utils.py
-----------------------------
> """
  requests._internal_utils
  ~~~~~~~~~~~~~~
  
def to_native_string(string, encoding="ascii"):
def unicode_is_ascii(u_string):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\__init__.py
-----------------------------
> """
  Requests HTTP Library
  ~~~~~~~~~~~~~~~~~~~~~
  
def check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):
def _check_cryptography(cryptography_version):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\requests\__version__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\compat\collections_abc.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\compat\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\providers.py
-----------------------------
>     """Delegate class to provide requirement interface for the resolver."""
  
      def identify(self, requirement_or_candidate):
class AbstractProvider(object):
class AbstractResolver(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\reporters.py
-----------------------------
>     """Delegate class to provider progress reporting for the resolver."""
  
      def starting(self):
class BaseReporter(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\resolvers.py
-----------------------------
>     """A base class for all exceptions raised by this module.
  
      Exceptions derived by this class should all be handled in this module. Any
      bubbling pass the resolver should be treated as a bug.
class ResolverException(Exception):
class RequirementsConflicted(ResolverException):
class InconsistentCandidate(ResolverException):
class Criterion(object):
class ResolutionError(ResolverException):
class ResolutionImpossible(ResolutionError):
class ResolutionTooDeep(ResolutionError):
class Resolution(object):
def _has_route_to_root(criteria, key, all_keys, connected):
def _build_result(state):
class Resolver(AbstractResolver):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\structs.py
-----------------------------
>     """A graph structure with directed edges."""
  
      def __init__(self):
          self._vertices = set()
class DirectedGraph(object):
class IteratorMapping(collections_abc.Mapping):
class _FactoryIterableView(object):
class _SequenceIterableView(object):
def build_iter_view(matches):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\resolvelib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\abc.py
-----------------------------
>     """An abstract base class for Rich renderables.
  
      Note that there is no need to extend this class, the intended use is to check if an
      object supports the Rich renderable protocol. For example::
class RichRenderable(ABC):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\align.py
-----------------------------
>     """Align a renderable by adding spaces if necessary.
  
      Args:
          renderable (RenderableType): A console renderable.
class Align(JupyterMixin):
class VerticalCenter(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\ansi.py
-----------------------------
>     r"""
  (?:\x1b\](.*?)\x1b\\)|
  (?:\x1b([(@-Z\\-_]|\[[0-?]*[ -/]*[@-~]))
class _AnsiToken(NamedTuple):
def _ansi_tokenize(ansi_text: str) -> Iterable[_AnsiToken]:
class AnsiDecoder:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\bar.py
-----------------------------
>     """Renders a solid block bar.
  
      Args:
          size (float): Value for the end of the bar.
class Bar(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\box.py
-----------------------------
>     """Defines characters to render boxes.
  
      â”Œâ”€â”¬â” top
      â”‚ â”‚â”‚ head
class Box:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\cells.py
-----------------------------
>     """Get the number of cells required to display text.
  
      This method always caches, which may use up a lot of memory. It is recommended to use
      `cell_len` over this method.
def cached_cell_len(text: str) -> int:
def cell_len(text: str, _cell_len: Callable[[str], int] = cached_cell_len) -> int:
def get_character_cell_size(character: str) -> int:
def _get_codepoint_cell_size(codepoint: int) -> int:
def set_cell_size(text: str, total: int) -> str:
def chop_cells(text: str, max_size: int, position: int = 0) -> List[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\color.py
-----------------------------
>     """One of the 3 color system supported by terminals."""
  
      STANDARD = 1
      EIGHT_BIT = 2
class ColorSystem(IntEnum):
class ColorType(IntEnum):
class ColorParseError(Exception):
class Color(NamedTuple):
def parse_rgb_hex(hex_color: str) -> ColorTriplet:
def blend_rgb(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\color_triplet.py
-----------------------------
>     """The red, green, and blue components of a color."""
  
      red: int
class ColorTriplet(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\columns.py
-----------------------------
>     """Display renderables in neat columns.
  
      Args:
          renderables (Iterable[RenderableType]): Any number of Rich renderables (including 
str).
class Columns(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\console.py
-----------------------------
>     """Size of the terminal."""
  
      width: int
class NoChange:
class ConsoleDimensions(NamedTuple):
class ConsoleOptions:
class RichCast(Protocol):
class ConsoleRenderable(Protocol):
class CaptureError(Exception):
class NewLine:
class ScreenUpdate:
class Capture:
class ThemeContext:
class PagerContext:
class ScreenContext:
class Group:
def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:
def _is_jupyter() -> bool:  # pragma: no cover
class ConsoleThreadLocals(threading.local):
class RenderHook(ABC):
def get_windows_console_features() -> "WindowsConsoleFeatures":  # pragma: no cover
def detect_legacy_windows() -> bool:
class Console:
def _svg_hash(svg_main_code: str) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\constrain.py
-----------------------------
>     """Constrain the width of a renderable to a given number of characters.
  
      Args:
          renderable (RenderableType): A renderable object.
class Constrain(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\containers.py
-----------------------------
>     """A list subclass which renders its contents to the console."""
  
      def __init__(
          self, renderables: Optional[Iterable["RenderableType"]] = None
class Renderables:
class Lines:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\control.py
-----------------------------
>     """A renderable that inserts a control code (non printable but may move cursor).
  
      Args:
          *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` 
enum or a
class Control:
def strip_control_codes(
def escape_control_codes(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\default_styles.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\diagnose.py
-----------------------------
>     """Print a report to the terminal with debugging information"""
      console = Console()
      inspect(console)
      features = get_windows_console_features()
def report() -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\emoji.py
-----------------------------
>     """No emoji by that name."""
  
  
  class Emoji(JupyterMixin):
class NoEmoji(Exception):
class Emoji(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\errors.py
-----------------------------
>     """An error in console operation."""
  
  
  class StyleError(Exception):
class ConsoleError(Exception):
class StyleError(Exception):
class StyleSyntaxError(ConsoleError):
class MissingStyle(StyleError):
class StyleStackError(ConsoleError):
class NotRenderableError(ConsoleError):
class MarkupError(ConsoleError):
class LiveError(ConsoleError):
class NoAltScreen(ConsoleError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\filesize.py
-----------------------------
> """Functions for reporting filesizes. Borrowed from 
https://github.com/PyFilesystem/pyfilesystem2
  
  The functions declared in this module should cover the different
  usecases needed to generate a string representation of a file size
def _to_str(
def pick_unit_and_suffix(size: int, suffixes: List[str], base: int) -> Tuple[int, str]:
def decimal(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\file_proxy.py
-----------------------------
>     """Wraps a file (e.g. sys.stdout) and redirects writes to a console."""
  
      def __init__(self, console: "Console", file: IO[str]) -> None:
          self.__console = console
class FileProxy(io.TextIOBase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\highlighter.py
-----------------------------
>     """Combine a number of regexes in to a single regex.
  
      Returns:
          str: New regex with all regexes ORed together.
def _combine_regex(*regexes: str) -> str:
class Highlighter(ABC):
class NullHighlighter(Highlighter):
class RegexHighlighter(Highlighter):
class ReprHighlighter(RegexHighlighter):
class JSONHighlighter(RegexHighlighter):
class ISO8601Highlighter(RegexHighlighter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\json.py
-----------------------------
>     """A renderable which pretty prints JSON.
  
      Args:
          json (str): JSON encoded data.
class JSON:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\jupyter.py
-----------------------------
> JUPYTER_HTML_FORMAT = """\
  <pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu 
Sans Mono',consolas,'Courier New',monospace">{code}</pre>
class JupyterRenderable:
class JupyterMixin:
def _render_segments(segments: Iterable[Segment]) -> str:
def display(segments: Iterable[Segment], text: str) -> None:
def print(*args: Any, **kwargs: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\layout.py
-----------------------------
>     """An individual layout render."""
  
      region: Region
      render: List[List[Segment]]
class LayoutRender(NamedTuple):
class LayoutError(Exception):
class NoSplitter(LayoutError):
class _Placeholder:
class Splitter(ABC):
class RowSplitter(Splitter):
class ColumnSplitter(Splitter):
class Layout:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\live.py
-----------------------------
>     """A thread that calls refresh() at regular intervals."""
  
      def __init__(self, live: "Live", refresh_per_second: float) -> None:
          self.live = live
class _RefreshThread(Thread):
class Live(JupyterMixin, RenderHook):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\live_render.py
-----------------------------
>     """Creates a renderable that may be updated.
  
      Args:
          renderable (RenderableType): Any renderable object.
class LiveRender:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\logging.py
-----------------------------
>     """A logging handler that renders output with Rich. The time / level / message and file 
are displayed in columns.
      The level is color coded, and the message is syntax highlighted.
  
      Note:
class RichHandler(Handler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\markup.py
-----------------------------
>     r"""((\\*)\[([a-z#/@][^[]*?)])""",
      re.VERBOSE,
  )
  
class Tag(NamedTuple):
def escape(
def _parse(markup: str) -> Iterable[Tuple[int, Optional[str], Optional[Tag]]]:
def render(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\measure.py
-----------------------------
>     """Stores the minimum and maximum widths (in characters) required to render an 
object."""
  
      minimum: int
class Measurement(NamedTuple):
def measure_renderables(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\padding.py
-----------------------------
>     """Draw space around content.
  
      Example:
          >>> print(Padding("Hello", (2, 4), style="on blue"))
class Padding(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\pager.py
-----------------------------
>     """Base class for a pager."""
  
      @abstractmethod
      def show(self, content: str) -> None:
class Pager(ABC):
class SystemPager(Pager):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\palette.py
-----------------------------
>     """A palette of available colors."""
  
      def __init__(self, colors: Sequence[Tuple[int, int, int]]):
          self._colors = colors
class Palette:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\panel.py
-----------------------------
>     """A console renderable that draws a border around its contents.
  
      Example:
          >>> console.print(Panel("Hello, World!"))
class Panel(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\pretty.py
-----------------------------
>     """Check if an object was created with attrs module."""
      return _has_attrs and _attr_module.has(type(obj))
  
  
def _is_attr_object(obj: Any) -> bool:
def _get_attr_fields(obj: Any) -> Sequence["_attr_module.Attribute[Any]"]:
def _is_dataclass_repr(obj: object) -> bool:
def _has_default_namedtuple_repr(obj: object) -> bool:
def _ipy_display_hook(
def _safe_isinstance(
def install(
class Pretty(JupyterMixin):
def _get_braces_for_defaultdict(_object: DefaultDict[Any, Any]) -> Tuple[str, str, str]:
def _get_braces_for_array(_object: "array[Any]") -> Tuple[str, str, str]:
def is_expandable(obj: Any) -> bool:
class Node:
class _Line:
def _is_namedtuple(obj: Any) -> bool:
def traverse(
def pretty_repr(
def pprint(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\progress.py
-----------------------------
>     """A thread to periodically update progress."""
  
      def __init__(self, progress: "Progress", task_id: "TaskID", update_period: float):
          self.progress = progress
class _TrackThread(Thread):
def track(
class _Reader(RawIOBase, BinaryIO):
class _ReadContext(ContextManager[_I], Generic[_I]):
def wrap_file(
def open(
def open(
def open(
class ProgressColumn(ABC):
class RenderableColumn(ProgressColumn):
class SpinnerColumn(ProgressColumn):
class TextColumn(ProgressColumn):
class BarColumn(ProgressColumn):
class TimeElapsedColumn(ProgressColumn):
class TaskProgressColumn(TextColumn):
class TimeRemainingColumn(ProgressColumn):
class FileSizeColumn(ProgressColumn):
class TotalFileSizeColumn(ProgressColumn):
class MofNCompleteColumn(ProgressColumn):
class DownloadColumn(ProgressColumn):
class TransferSpeedColumn(ProgressColumn):
class ProgressSample(NamedTuple):
class Task:
class Progress(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\progress_bar.py
-----------------------------
>     """Renders a (progress) bar. Used by rich.progress.
  
      Args:
          total (float, optional): Number of steps in the bar. Defaults to 100. Set to None 
to render a pulsing animation.
class ProgressBar(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\prompt.py
-----------------------------
>     """Exception base class for prompt related errors."""
  
  
  class InvalidResponse(PromptError):
class PromptError(Exception):
class InvalidResponse(PromptError):
class PromptBase(Generic[PromptType]):
class Prompt(PromptBase[str]):
class IntPrompt(PromptBase[int]):
class FloatPrompt(PromptBase[int]):
class Confirm(PromptBase[bool]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\protocol.py
-----------------------------
> _GIBBERISH = """aihwerij235234ljsdnp34ksodfipwoe234234jlskjdf"""
  
  
  def is_renderable(check_object: Any) -> bool:
def is_renderable(check_object: Any) -> bool:
def rich_cast(renderable: object) -> "RenderableType":

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\region.py
-----------------------------
>     """Defines a rectangular region of the screen."""
  
      x: int
      y: int
class Region(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\repr.py
-----------------------------
>     """An error occurred when attempting to build a repr."""
  
  
  @overload
class ReprError(Exception):
def auto(cls: Optional[Type[T]]) -> Type[T]:
def auto(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
def auto(
def rich_repr(cls: Optional[Type[T]]) -> Type[T]:
def rich_repr(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
def rich_repr(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\rule.py
-----------------------------
>     """A console renderable to draw a horizontal rule (line).
  
      Args:
          title (Union[str, Text], optional): Text to render in the rule. Defaults to "".
class Rule(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\scope.py
-----------------------------
>     """Render python variables in a given scope.
  
      Args:
          scope (Mapping): A mapping containing variable names and values.
def render_scope(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\screen.py
-----------------------------
>     """A renderable that fills the terminal screen and crops excess.
  
      Args:
          renderable (RenderableType): Child renderable.
class Screen:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\segment.py
-----------------------------
>     """Non-printable control codes which typically translate to ANSI codes."""
  
      BELL = 1
      CARRIAGE_RETURN = 2
class ControlType(IntEnum):
class Segment(NamedTuple):
class Segments:
class SegmentLines:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\spinner.py
-----------------------------
>         """A spinner animation.
  
          Args:
              name (str): Name of spinner (run python -m rich.spinner).
class Spinner:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\status.py
-----------------------------
>     """Displays a status indicator with a 'spinner' animation.
  
      Args:
          status (RenderableType): A status renderable (str or Text typically).
class Status(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\style.py
-----------------------------
>     """A descriptor to get/set a style attribute bit."""
  
      __slots__ = ["bit"]
  
class _Bit:
class Style:
class StyleStack:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\styled.py
-----------------------------
>     """Apply a style to a renderable.
  
      Args:
          renderable (RenderableType): Any renderable.
class Styled:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\syntax.py
-----------------------------
>     """Base class for a syntax theme."""
  
      @abstractmethod
      def get_style_for_token(self, token_type: TokenType) -> Style:
class SyntaxTheme(ABC):
class PygmentsSyntaxTheme(SyntaxTheme):
class ANSISyntaxTheme(SyntaxTheme):
class _SyntaxHighlightRange(NamedTuple):
class Syntax(JupyterMixin):
def _get_code_index_for_syntax_position(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\table.py
-----------------------------
>     """Defines a column within a ~Table.
  
      Args:
          title (Union[str, Text], optional): The title of the table rendered at the top. 
Defaults to None.
class Column:
class Row:
class _Cell(NamedTuple):
class Table(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\terminal_theme.py
-----------------------------
>     """A color theme used when exporting console content.
  
      Args:
          background (Tuple[int, int, int]): The background color.
class TerminalTheme:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\text.py
-----------------------------
>     """A marked up region in some text."""
  
      start: int
class Span(NamedTuple):
class Text(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\theme.py
-----------------------------
>     """A container for style information, used by :class:`~rich.console.Console`.
  
      Args:
          styles (Dict[str, Style], optional): A mapping of style names on to styles. 
Defaults to None for a theme with no styles.
class Theme:
class ThemeStackError(Exception):
class ThemeStack:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\themes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\traceback.py
-----------------------------
>     """Install a rich traceback handler.
  
      Once installed, any tracebacks will be printed with syntax highlighting and rich 
formatting.
  
def install(
class Frame:
class _SyntaxError:
class Stack:
class Trace:
class PathHighlighter(RegexHighlighter):
class Traceback:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\tree.py
-----------------------------
>     """A renderable for a tree structure.
  
      Args:
          label (RenderableType): The renderable or str for the tree label.
class Tree(JupyterMixin):
class Segment(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_cell_widths.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_emoji_codes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_emoji_replace.py
-----------------------------
>     """Replace emoji code in text."""
      get_emoji = EMOJI.__getitem__
      variants = {"text": "\uFE0E", "emoji": "\uFE0F"}
      get_variant = variants.get
def _emoji_replace(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_export_format.py
-----------------------------
> CONSOLE_HTML_FORMAT = """\
  <!DOCTYPE html>
  <head>
  <meta charset="UTF-8">

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_extension.py
-----------------------------
def load_ipython_extension(ip: Any) -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_inspect.py
-----------------------------
>     """Get the first paragraph from a docstring."""
      paragraph, _, _ = doc.partition("\n\n")
      return paragraph
  
def _first_paragraph(doc: str) -> str:
class Inspect(JupyterMixin):
def get_object_types_mro(obj: Union[object, Type[Any]]) -> Tuple[type, ...]:
def get_object_types_mro_as_strings(obj: object) -> Collection[str]:
def is_object_one_of_types(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_log_render.py
-----------------------------
class LogRender:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_loop.py
-----------------------------
>     """Iterate and generate a tuple with a flag for first value."""
      iter_values = iter(values)
      try:
          value = next(iter_values)
def loop_first(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
def loop_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_palettes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_pick.py
-----------------------------
>     """Pick the first non-none bool or return the last value.
  
      Args:
          *values (bool): Any number of boolean or None values.
def pick_bool(*values: Optional[bool]) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_ratio.py
-----------------------------
>     """Any object that defines an edge (such as Layout)."""
  
      size: Optional[int] = None
      ratio: int = 1
class Edge(Protocol):
def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:
def ratio_reduce(
def ratio_distribute(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_spinners.py
-----------------------------
> """
  Spinners are from:
  * cli-spinners:
      MIT License

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_stack.py
-----------------------------
>     """A small shim over builtin list."""
  
      @property
      def top(self) -> T:
class Stack(List[T]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_timer.py
-----------------------------
> """
  Timer context manager, only used in debug.
  
def timer(subject: str = "time") -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_win32_console.py
-----------------------------
> """Light wrapper around the Win32 Console API - this module should only be imported on 
Windows
  
  The API that this module wraps is documented at 
https://docs.microsoft.com/en-us/windows/console/console-functions
class LegacyWindowsError(Exception):
class WindowsCoordinates(NamedTuple):
class CONSOLE_SCREEN_BUFFER_INFO(Structure):
class CONSOLE_CURSOR_INFO(ctypes.Structure):
def GetStdHandle(handle: int = STDOUT) -> wintypes.HANDLE:
def GetConsoleMode(std_handle: wintypes.HANDLE) -> int:
def FillConsoleOutputCharacter(
def FillConsoleOutputAttribute(
def SetConsoleTextAttribute(
def GetConsoleScreenBufferInfo(
def SetConsoleCursorPosition(
def GetConsoleCursorInfo(
def SetConsoleCursorInfo(
def SetConsoleTitle(title: str) -> bool:
class LegacyWindowsTerm:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_windows.py
-----------------------------
>     """Windows features available."""
  
      vt: bool = False
class WindowsConsoleFeatures:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_windows_renderer.py
-----------------------------
>     """Makes appropriate Windows Console API calls based on the segments in the buffer.
  
      Args:
          buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.
def legacy_windows_render(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\_wrap.py
-----------------------------
def words(text: str) -> Iterable[Tuple[int, int, str]]:
def divide_line(text: str, width: int, fold: bool = True) -> List[int]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\__init__.py
-----------------------------
> """Rich text and beautiful formatting in the terminal."""
  
  import os
  from typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union
def get_console() -> "Console":
def reconfigure(*args: Any, **kwargs: Any) -> None:
def print(
def print_json(
def inspect(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\rich\__main__.py
-----------------------------
>     """Get a renderable that demonstrates a number of features."""
      table = Table.grid(padding=1, pad_edge=True)
      table.title = "Rich features"
      table.add_column("Feature", no_wrap=True, justify="center", style="bold red")
class ColorBox:
def make_test_card() -> Table:
def iter_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\after.py
-----------------------------
>     """After call strategy that does nothing."""
  
  
  def after_log(
def after_nothing(retry_state: "RetryCallState") -> None:
def after_log(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\before.py
-----------------------------
>     """Before call strategy that does nothing."""
  
  
  def before_log(logger: "logging.Logger", log_level: int) -> 
typing.Callable[["RetryCallState"], None]:
def before_nothing(retry_state: "RetryCallState") -> None:
def before_log(logger: "logging.Logger", log_level: int) -> typing.Callable[["RetryCallState"], None]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\before_sleep.py
-----------------------------
>     """Before call strategy that does nothing."""
  
  
  def before_sleep_log(
def before_sleep_nothing(retry_state: "RetryCallState") -> None:
def before_sleep_log(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\nap.py
-----------------------------
>     """
      Sleep strategy that delays execution for a given number of seconds.
  
      This is the default strategy, and may be mocked out for unit testing.
def sleep(seconds: float) -> None:
class sleep_using_event:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\retry.py
-----------------------------
>     """Abstract base class for retry strategies."""
  
      @abc.abstractmethod
      def __call__(self, retry_state: "RetryCallState") -> bool:
class retry_base(abc.ABC):
class _retry_never(retry_base):
class _retry_always(retry_base):
class retry_if_exception(retry_base):
class retry_if_exception_type(retry_if_exception):
class retry_if_not_exception_type(retry_if_exception):
class retry_unless_exception_type(retry_if_exception):
class retry_if_exception_cause_type(retry_base):
class retry_if_result(retry_base):
class retry_if_not_result(retry_base):
class retry_if_exception_message(retry_if_exception):
class retry_if_not_exception_message(retry_if_exception_message):
class retry_any(retry_base):
class retry_all(retry_base):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\stop.py
-----------------------------
>     """Abstract base class for stop strategies."""
  
      @abc.abstractmethod
      def __call__(self, retry_state: "RetryCallState") -> bool:
class stop_base(abc.ABC):
class stop_any(stop_base):
class stop_all(stop_base):
class _stop_never(stop_base):
class stop_when_event_set(stop_base):
class stop_after_attempt(stop_base):
class stop_after_delay(stop_base):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\tornadoweb.py
-----------------------------
class TornadoRetrying(BaseRetrying):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\wait.py
-----------------------------
>     """Abstract base class for wait strategies."""
  
      @abc.abstractmethod
      def __call__(self, retry_state: "RetryCallState") -> float:
def to_seconds(wait_unit: wait_unit_type) -> float:
class wait_base(abc.ABC):
class wait_fixed(wait_base):
class wait_none(wait_fixed):
class wait_random(wait_base):
class wait_combine(wait_base):
class wait_chain(wait_base):
class wait_incrementing(wait_base):
class wait_exponential(wait_base):
class wait_random_exponential(wait_exponential):
class wait_exponential_jitter(wait_base):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\_asyncio.py
-----------------------------
class AsyncRetrying(BaseRetrying):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\_utils.py
-----------------------------
>     """Get a callback fully-qualified name.
  
      If no name can be produced ``repr(cb)`` is called and returned.
def find_ordinal(pos_num: int) -> str:
def to_ordinal(pos_num: int) -> str:
def get_callback_name(cb: typing.Callable[..., typing.Any]) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tenacity\__init__.py
-----------------------------
>     """Wrap a function with a new `Retrying` object.
  
      :param dargs: positional arguments passed to Retrying object
      :param dkw: keyword arguments passed to the Retrying object
def retry(fn: WrappedFn) -> WrappedFn:
def retry(*dargs: t.Any, **dkw: t.Any) -> t.Callable[[WrappedFn], WrappedFn]:  # noqa
def retry(*dargs: t.Any, **dkw: t.Any) -> t.Union[WrappedFn, t.Callable[[WrappedFn], WrappedFn]]:  # noqa
class TryAgain(Exception):
class DoAttempt:
class DoSleep(float):
class BaseAction:
class RetryAction(BaseAction):
def _first_set(first: t.Union[t.Any, object], second: t.Any) -> t.Any:
class RetryError(Exception):
class AttemptManager:
class BaseRetrying(ABC):
class Retrying(BaseRetrying):
class Future(futures.Future):
class RetryCallState:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tomli\_parser.py
-----------------------------
>     """An error raised if a document is not valid TOML."""
  
  
  def load(__fp: BinaryIO, *, parse_float: ParseFloat = float) -> dict[str, Any]:
class TOMLDecodeError(ValueError):
def load(__fp: BinaryIO, *, parse_float: ParseFloat = float) -> dict[str, Any]:
def loads(__s: str, *, parse_float: ParseFloat = float) -> dict[str, Any]:  # noqa: C901
class Flags:
class NestedDict:
class Output(NamedTuple):
def skip_chars(src: str, pos: Pos, chars: Iterable[str]) -> Pos:
def skip_until(
def skip_comment(src: str, pos: Pos) -> Pos:
def skip_comments_and_array_ws(src: str, pos: Pos) -> Pos:
def create_dict_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def create_list_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def key_value_rule(
def parse_key_value_pair(
def parse_key(src: str, pos: Pos) -> tuple[Pos, Key]:
def parse_key_part(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_one_line_basic_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_array(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[Pos, list]:
def parse_inline_table(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[Pos, dict]:
def parse_basic_str_escape(
def parse_basic_str_escape_multiline(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_hex_char(src: str, pos: Pos, hex_len: int) -> tuple[Pos, str]:
def parse_literal_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_multiline_str(src: str, pos: Pos, *, literal: bool) -> tuple[Pos, str]:
def parse_basic_str(src: str, pos: Pos, *, multiline: bool) -> tuple[Pos, str]:
def parse_value(  # noqa: C901
def suffixed_err(src: str, pos: Pos, msg: str) -> TOMLDecodeError:
def is_unicode_scalar_value(codepoint: int) -> bool:
def make_safe_parse_float(parse_float: ParseFloat) -> ParseFloat:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tomli\_re.py
-----------------------------
>     r"""
  0
  (?:
      x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*   # hex
def match_to_datetime(match: re.Match) -> datetime | date:
def cached_tz(hour_str: str, minute_str: str, sign_str: str) -> timezone:
def match_to_localtime(match: re.Match) -> time:
def match_to_number(match: re.Match, parse_float: ParseFloat) -> Any:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tomli\_types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\tomli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\bindings.py
-----------------------------
> """
  This module uses ctypes to bind a whole bunch of functions and constants from
  SecureTransport. The goal here is to provide the low-level API to
  SecureTransport. These are essentially the C-level functions and constants, and
def load_cdll(name, macos10_16_path):
class CFConst(object):
class SecurityConst(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\low_level.py
-----------------------------
> """
  Low-level helpers for the SecureTransport bindings.
  
  These are Python functions that are not directly related to the high-level APIs
def _cf_data_from_bytes(bytestring):
def _cf_dictionary_from_tuples(tuples):
def _cfstr(py_bstr):
def _create_cfstring_array(lst):
def _cf_string_to_unicode(value):
def _assert_no_error(error, exception_class=None):
def _cert_array_from_pem(pem_bundle):
def _is_cert(item):
def _is_identity(item):
def _temporary_keychain():
def _load_items_from_file(keychain, path):
def _load_client_cert_chain(keychain, *paths):
def _build_tls_unknown_ca_alert(version):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py
-----------------------------
> """
  This module provides a pool manager that uses Google App Engine's
  `URLFetch Service <https://cloud.google.com/appengine/docs/python/urlfetch>`_.
  
class AppEnginePlatformWarning(HTTPWarning):
class AppEnginePlatformError(HTTPError):
class AppEngineManager(RequestMethods):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\ntlmpool.py
-----------------------------
> """
  NTLM authenticating pool, contributed by erikcederstran
  
  Issue #10, see: http://code.google.com/p/urllib3/issues/detail?id=10
class NTLMConnectionPool(HTTPSConnectionPool):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py
-----------------------------
> """
  TLS with SNI_-support for Python 2. Follow these instructions if you would
  like to verify TLS certificates in Python 2. Note, the default libraries do
  *not* do certificate checking; you need to do additional work to validate
def inject_into_urllib3():
def extract_from_urllib3():
def _validate_dependencies_met():
def _dnsname_to_stdlib(name):
def get_subj_alt_name(peer_cert):
class WrappedSocket(object):
class PyOpenSSLContext(object):
def _verify_callback(cnx, x509, err_no, err_depth, return_code):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\securetransport.py
-----------------------------
> """
  SecureTranport support for urllib3 via ctypes.
  
  This makes platform-native TLS available to urllib3 users on macOS without the
def inject_into_urllib3():
def extract_from_urllib3():
def _read_callback(connection_id, data_buffer, data_length_pointer):
def _write_callback(connection_id, data_buffer, data_length_pointer):
class WrappedSocket(object):
class SecureTransportContext(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\socks.py
-----------------------------
> """
  This module contains provisional support for SOCKS proxies from within
  urllib3. This module supports SOCKS4, SOCKS4A (an extension of SOCKS4), and
  SOCKS5. To enable its functionality, either install PySocks or install this
class SOCKSConnection(HTTPConnection):
class SOCKSHTTPSConnection(SOCKSConnection, HTTPSConnection):
class SOCKSHTTPConnectionPool(HTTPConnectionPool):
class SOCKSHTTPSConnectionPool(HTTPSConnectionPool):
class SOCKSProxyManager(PoolManager):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\_appengine_environ.py
-----------------------------
> """
  This module provides means to detect the App Engine environment.
def is_appengine():
def is_appengine_sandbox():
def is_local_appengine():
def is_prod_appengine():
def is_prod_appengine_mvms():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\contrib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\packages\backports\makefile.py
-----------------------------
> """
  backports.makefile
  ~~~~~~~~~~~~~~~~~~
  
def backport_makefile(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\packages\backports\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\packages\six.py
-----------------------------
> """Utilities for writing code that runs on Python 2 and 3"""
  
  from __future__ import absolute_import
  
def _add_doc(func, doc):
def _import_module(name):
class _LazyDescr(object):
class MovedModule(_LazyDescr):
class _LazyModule(types.ModuleType):
class MovedAttribute(_LazyDescr):
class _SixMetaPathImporter(object):
class _MovedItems(_LazyModule):
class Module_six_moves_urllib_parse(_LazyModule):
class Module_six_moves_urllib_error(_LazyModule):
class Module_six_moves_urllib_request(_LazyModule):
class Module_six_moves_urllib_response(_LazyModule):
class Module_six_moves_urllib_robotparser(_LazyModule):
class Module_six_moves_urllib(types.ModuleType):
def add_move(move):
def remove_move(name):
def assertCountEqual(self, *args, **kwargs):
def assertRaisesRegex(self, *args, **kwargs):
def assertRegex(self, *args, **kwargs):
def assertNotRegex(self, *args, **kwargs):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def ensure_binary(s, encoding="utf-8", errors="strict"):
def ensure_str(s, encoding="utf-8", errors="strict"):
def ensure_text(s, encoding="utf-8", errors="strict"):
def python_2_unicode_compatible(klass):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\packages\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\connection.py
-----------------------------
>     """
      Returns True if the connection is dropped and should be closed.
  
      :param conn:
def is_connection_dropped(conn):  # Platform-specific
def create_connection(
def _set_socket_options(sock, options):
def allowed_gai_family():
def _has_ipv6(host):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\proxy.py
-----------------------------
>     """
      Returns True if the connection requires an HTTP CONNECT through the proxy.
  
      :param URL proxy_url:
def connection_requires_http_tunnel(
def create_proxy_ssl_context(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\queue.py
-----------------------------
class LifoQueue(queue.Queue):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\request.py
-----------------------------
>     """
      Shortcuts for generating request headers.
  
      :param keep_alive:
def make_headers(
def set_file_position(body, pos):
def rewind_body(body, body_pos):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\response.py
-----------------------------
>     """
      Checks whether a given file-like object is closed.
  
      :param obj:
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py
-----------------------------
>     """Retry configuration.
  
      Each retry attempt will create a new Retry object with updated values, so
      they can be safely reused.
class _RetryMeta(type):
class Retry(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\ssltransport.py
-----------------------------
>     """
      The SSLTransport wraps an existing socket and establishes an SSL connection.
  
      Contrary to Python's implementation of SSLSocket, it allows you to chain
class SSLTransport:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py
-----------------------------
>     """
      Compare two digests of equal length in constant time.
  
      The digests must be of type str/bytes.
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(
def ssl_wrap_socket(
def is_ipaddress(hostname):
def _is_key_file_encrypted(key_file):
def _ssl_wrap_socket_impl(sock, ssl_context, tls_in_tls, server_hostname=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_match_hostname.py
-----------------------------
> """The match_hostname() function from Python 3.3.3, essential when using SSL."""
  
  # Note: This file is under the PSF license as the code comes from the python
  # stdlib.   http://docs.python.org/3/license.html
class CertificateError(ValueError):
def _dnsname_match(dn, hostname, max_wildcards=1):
def _to_unicode(obj):
def _ipaddress_match(ipname, host_ip):
def match_hostname(cert, hostname):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\timeout.py
-----------------------------
>     """Timeout configuration.
  
      Timeouts can be defined as a default for a pool:
  
class Timeout(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\url.py
-----------------------------
>     """
      Data structure for representing an HTTP URL. Used as a return value for
      :func:`parse_url`. Both the scheme and host are normalized as they are
      both case-insensitive according to RFC 3986.
class Url(namedtuple("Url", url_attrs)):
def split_first(s, delims):
def _encode_invalid_chars(component, allowed_chars, encoding="utf-8"):
def _remove_path_dot_segments(path):
def _normalize_host(host, scheme):
def _idna_encode(name):
def _encode_target(target):
def parse_url(url):
def get_host(url):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\wait.py
-----------------------------
>     """Waits for reading to be available on a given socket.
      Returns True if the socket is readable, or False if the timeout expired.
class NoWayToWaitForSocketError(Exception):
def select_wait_for_socket(sock, read=False, write=False, timeout=None):
def poll_wait_for_socket(sock, read=False, write=False, timeout=None):
def null_wait_for_socket(*args, **kwargs):
def _have_working_poll():
def wait_for_socket(*args, **kwargs):
def wait_for_read(sock, timeout=None):
def wait_for_write(sock, timeout=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\connection.py
-----------------------------
>     """
      Based on :class:`http.client.HTTPConnection` but provides an extra constructor
      backwards-compatibility layer between older and newer Pythons.
  
class HTTPConnection(_HTTPConnection, object):
class HTTPSConnection(HTTPConnection):
def _match_hostname(cert, asserted_hostname):
def _get_default_user_agent():
class DummyConnection(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py
-----------------------------
>     """
      Base class for all connection pools, such as
      :class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.
  
class ConnectionPool(object):
class HTTPConnectionPool(ConnectionPool, RequestMethods):
class HTTPSConnectionPool(HTTPConnectionPool):
def connection_from_url(url, **kw):
def _normalize_host(host, scheme):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\exceptions.py
-----------------------------
>     """Base exception used by this module."""
  
      pass
  
class HTTPError(Exception):
class HTTPWarning(Warning):
class PoolError(HTTPError):
class RequestError(PoolError):
class SSLError(HTTPError):
class ProxyError(HTTPError):
class DecodeError(HTTPError):
class ProtocolError(HTTPError):
class MaxRetryError(RequestError):
class HostChangedError(RequestError):
class TimeoutStateError(HTTPError):
class TimeoutError(HTTPError):
class ReadTimeoutError(TimeoutError, RequestError):
class ConnectTimeoutError(TimeoutError):
class NewConnectionError(ConnectTimeoutError, PoolError):
class EmptyPoolError(PoolError):
class ClosedPoolError(PoolError):
class LocationValueError(ValueError, HTTPError):
class LocationParseError(LocationValueError):
class URLSchemeUnknown(LocationValueError):
class ResponseError(HTTPError):
class SecurityWarning(HTTPWarning):
class SubjectAltNameWarning(SecurityWarning):
class InsecureRequestWarning(SecurityWarning):
class SystemTimeWarning(SecurityWarning):
class InsecurePlatformWarning(SecurityWarning):
class SNIMissingWarning(HTTPWarning):
class DependencyWarning(HTTPWarning):
class ResponseNotChunked(ProtocolError, ValueError):
class BodyNotHttplibCompatible(HTTPError):
class IncompleteRead(HTTPError, httplib_IncompleteRead):
class InvalidChunkLength(HTTPError, httplib_IncompleteRead):
class InvalidHeader(HTTPError):
class ProxySchemeUnknown(AssertionError, URLSchemeUnknown):
class ProxySchemeUnsupported(ValueError):
class HeaderParsingError(HTTPError):
class UnrewindableBodyError(HTTPError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\fields.py
-----------------------------
>     """
      Guess the "Content-Type" of a file.
  
      :param filename:
def guess_content_type(filename, default="application/octet-stream"):
def format_header_param_rfc2231(name, value):
def _replace_multiple(value, needles_and_replacements):
def format_header_param_html5(name, value):
class RequestField(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\filepost.py
-----------------------------
>     """
      Our embarrassingly-simple replacement for mimetools.choose_boundary.
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py
-----------------------------
>     """
      Create a pool key out of a request context dictionary.
  
      According to RFC 3986, both the scheme and host are case-insensitive.
def _default_key_normalizer(key_class, request_context):
class PoolManager(RequestMethods):
class ProxyManager(PoolManager):
def proxy_from_url(url, **kw):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\request.py
-----------------------------
>     """
      Convenience mixin for classes who implement a :meth:`urlopen` method, such
      as :class:`urllib3.HTTPConnectionPool` and
      :class:`urllib3.PoolManager`.
class RequestMethods(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\response.py
-----------------------------
>     """
      From RFC7231:
          If one or more encodings have been applied to a representation, the
          sender that applied the encodings MUST generate a Content-Encoding
class DeflateDecoder(object):
class GzipDecoderState(object):
class GzipDecoder(object):
class MultiDecoder(object):
def _get_decoder(mode):
class HTTPResponse(io.IOBase):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\_collections.py
-----------------------------
>     """
      Provides a thread-safe dict-like container which maintains up to
      ``maxsize`` keys while throwing away the least-recently-used keys beyond
      ``maxsize``.
class RecentlyUsedContainer(MutableMapping):
class HTTPHeaderDict(MutableMapping):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\urllib3\__init__.py
-----------------------------
> """
  Python HTTP library with thread-safe connection pooling, file post support, user friendly, 
and more
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\webencodings\labels.py
-----------------------------
> """
  
      webencodings.labels
      ~~~~~~~~~~~~~~~~~~~

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\webencodings\mklabels.py
-----------------------------
> """
  
      webencodings.mklabels
      ~~~~~~~~~~~~~~~~~~~~~
def assert_lower(string):
def generate(url):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\webencodings\tests.py
-----------------------------
> """
  
      webencodings.tests
      ~~~~~~~~~~~~~~~~~~
def assert_raises(exception, function, *args, **kwargs):
def test_labels():
def test_all_labels():
def test_invalid_label():
def test_decode():
def test_encode():
def test_iter_decode():
def test_iter_encode():
def test_x_user_defined():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\webencodings\x_user_defined.py
-----------------------------
> """
  
      webencodings.x_user_defined
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Codec(codecs.Codec):
class IncrementalEncoder(codecs.IncrementalEncoder):
class IncrementalDecoder(codecs.IncrementalDecoder):
class StreamWriter(Codec, codecs.StreamWriter):
class StreamReader(Codec, codecs.StreamReader):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\webencodings\__init__.py
-----------------------------
> """
  
      webencodings
      ~~~~~~~~~~~~
def ascii_lower(string):
def lookup(label):
def _get_encoding(encoding_or_label):
class Encoding(object):
def decode(input, fallback_encoding, errors='replace'):
def _detect_bom(input):
def encode(input, encoding=UTF8, errors='strict'):
def iter_decode(input, fallback_encoding, errors='replace'):
def _iter_decode_generator(input, decoder):
def iter_encode(input, encoding=UTF8, errors='strict'):
def _iter_encode_generator(input, encode):
class IncrementalDecoder(object):
class IncrementalEncoder(object):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\six.py
-----------------------------
> """Utilities for writing code that runs on Python 2 and 3"""
  
  from __future__ import absolute_import
  
def _add_doc(func, doc):
def _import_module(name):
class _LazyDescr(object):
class MovedModule(_LazyDescr):
class _LazyModule(types.ModuleType):
class MovedAttribute(_LazyDescr):
class _SixMetaPathImporter(object):
class _MovedItems(_LazyModule):
class Module_six_moves_urllib_parse(_LazyModule):
class Module_six_moves_urllib_error(_LazyModule):
class Module_six_moves_urllib_request(_LazyModule):
class Module_six_moves_urllib_response(_LazyModule):
class Module_six_moves_urllib_robotparser(_LazyModule):
class Module_six_moves_urllib(types.ModuleType):
def add_move(move):
def remove_move(name):
def assertCountEqual(self, *args, **kwargs):
def assertRaisesRegex(self, *args, **kwargs):
def assertRegex(self, *args, **kwargs):
def assertNotRegex(self, *args, **kwargs):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def ensure_binary(s, encoding='utf-8', errors='strict'):
def ensure_str(s, encoding='utf-8', errors='strict'):
def ensure_text(s, encoding='utf-8', errors='strict'):
def python_2_unicode_compatible(klass):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\typing_extensions.py
-----------------------------
>     """Check correct count for parameters of a generic cls (internal helper).
      This gives a nice error message in case of count mismatch.
def _check_generic(cls, parameters, elen=_marker):
def _collect_type_vars(types, typevar_types=None):
def IntVar(name):
def _get_protocol_attrs(cls):
def _is_callable_members_only(cls):
def _maybe_adjust_parameters(cls):
class _DefaultMixin:
class TypeVar(typing.TypeVar, _DefaultMixin, _root=True):
def _concatenate_getitem(self, parameters):
class _SpecialForm(typing._Final, _root=True):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\_vendor\__init__.py
-----------------------------
> """
  pip._vendor is for vendoring dependencies of pip to prevent needing pip to
  depend on something external.
  
def vendored(modulename):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\__init__.py
-----------------------------
>     """This is an internal API only meant for use by pip's own console scripts.
  
      For additional details, see https://github.com/pypa/pip/issues/7498.
def main(args: Optional[List[str]] = None) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pip\__pip-runner__.py
-----------------------------
> """Execute exactly this copy of pip, within a different environment.
  
  This file is named as it is, to ensure that this module can't be imported via
  an import statement.
def version_str(version):  # type: ignore
class PipImportRedirectingFinder:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\extern\__init__.py
-----------------------------
>     """
      A PEP 302 meta path importer for finding optionally-vendored
      or otherwise naturally-installed packages from root_name.
class VendorImporter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\abc.py
-----------------------------
>     """Abstract base class for loaders to provide resource reading support."""
  
      @abc.abstractmethod
      def open_resource(self, resource: Text) -> BinaryIO:
class ResourceReader(metaclass=abc.ABCMeta):
class Traversable(Protocol):
class TraversableResources(ResourceReader):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\readers.py
-----------------------------
>         """
          Return the file system path to prevent
          `resources.path()` from creating a temporary
          copy.
def remove_duplicates(items):
class FileReader(abc.TraversableResources):
class ZipReader(abc.TraversableResources):
class MultiplexedPath(abc.Traversable):
class NamespaceReader(abc.TraversableResources):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\simple.py
-----------------------------
> """
  Interface adapters for low-level readers.
class SimpleReader(abc.ABC):
class ResourceHandle(Traversable):
class ResourceContainer(Traversable):
class TraversableReader(TraversableResources, SimpleReader):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_adapters.py
-----------------------------
>     """
      Adapt a package spec to adapt the underlying loader.
class SpecLoaderAdapter:
class TraversableResourcesLoader:
def _io_wrapper(file, mode='r', *args, **kwargs):
class CompatibilityFiles:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_common.py
-----------------------------
>     """
      Get a Traversable resource from a package
def files(package):
def get_resource_reader(package):
def resolve(cand):
def get_package(package):
def from_package(package):
def _tempfile(reader, suffix=''):
def as_file(path):
def _(path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_compat.py
-----------------------------
>     """
      Adapt loaders to provide TraversableResources and other
      compatibility.
  
class TraversableResourcesLoader:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_itertools.py
-----------------------------
def unique_everseen(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_legacy.py
-----------------------------
>     """Normalize a path by ensuring it is a string.
  
      If the resulting string contains path separators, an exception is raised.
def deprecated(func):
def normalize_path(path):
def open_binary(package: Package, resource: Resource) -> BinaryIO:
def read_binary(package: Package, resource: Resource) -> bytes:
def open_text(
def read_text(
def contents(package: Package) -> Iterable[str]:
def is_resource(package: Package, name: str) -> bool:
def path(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\__init__.py
-----------------------------
> """Read resources contained within a package."""
  
  from ._common import (
      as_file,

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\jaraco\text\__init__.py
-----------------------------
>     """
      Return a function that will perform a substitution on a string
def substitution(old, new):
def multi_substitution(*substitutions):
class FoldedCase(str):
def is_decodable(value):
def is_binary(value):
def trim(s):
def wrap(s):
def unwrap(s):
class Splitter(object):
def indent(string, prefix=' ' * 4):
class WordSet(tuple):
def simple_html_strip(s):
class SeparatedValues(str):
class Stripper:
def remove_prefix(text, prefix):
def remove_suffix(text, suffix):
def normalize_newlines(text):
def _nonblank(str):
def yield_lines(iterable):
def _(text):
def drop_comment(line):
def join_continuation(lines):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\jaraco\context.py
-----------------------------
>     """
      Get a tarball, extract it, change to that directory, yield, then
      clean up.
      `runner` is the function to invoke commands.
def pushd(dir):
def tarball_context(url, target_dir=None, runner=None, pushd=pushd):
def infer_compression(url):
def temp_dir(remover=shutil.rmtree):
def repo_context(url, branch=None, quiet=True, dest_ctx=temp_dir):
def null():
class ExceptionTrap:
class suppress(contextlib.suppress, contextlib.ContextDecorator):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\jaraco\functools.py
-----------------------------
>     """
      Compose any number of unary functions into a single unary function.
  
      >>> import textwrap
def compose(*funcs):
def method_caller(method_name, *args, **kwargs):
def once(func):
def method_cache(
def _special_method_cache(method, cache_wrapper):
def apply(transform):
def result_invoke(action):
def call_aside(f, *args, **kwargs):
class Throttler:
def first_invoke(func1, func2):
def retry_call(func, cleanup=lambda: None, retries=0, trap=()):
def retry(*r_args, **r_kwargs):
def print_yielded(func):
def pass_none(func):
def assign_params(func, namespace):
def save_method_args(method):
def except_(*exceptions, replace=None, use=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\jaraco\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py
-----------------------------
>     """Break *iterable* into lists of length *n*:
  
          >>> list(chunked([1, 2, 3, 4, 5, 6], 3))
          [[1, 2, 3], [4, 5, 6]]
def chunked(iterable, n, strict=False):
def first(iterable, default=_marker):
def last(iterable, default=_marker):
def nth_or_last(iterable, n, default=_marker):
class peekable:
def collate(*iterables, **kwargs):
def consumer(func):
def ilen(iterable):
def iterate(func, start):
def with_iter(context_manager):
def one(iterable, too_short=None, too_long=None):
def raise_(exception, *args):
def strictly_n(iterable, n, too_short=None, too_long=None):
def distinct_permutations(iterable, r=None):
def intersperse(e, iterable, n=1):
def unique_to_each(*iterables):
def windowed(seq, n, fillvalue=None, step=1):
def substrings(iterable):
def substrings_indexes(seq, reverse=False):
class bucket:
def spy(iterable, n=1):
def interleave(*iterables):
def interleave_longest(*iterables):
def interleave_evenly(iterables, lengths=None):
def collapse(iterable, base_type=None, levels=None):
def side_effect(func, iterable, chunk_size=None, before=None, after=None):
def sliced(seq, n, strict=False):
def split_at(iterable, pred, maxsplit=-1, keep_separator=False):
def split_before(iterable, pred, maxsplit=-1):
def split_after(iterable, pred, maxsplit=-1):
def split_when(iterable, pred, maxsplit=-1):
def split_into(iterable, sizes):
def padded(iterable, fillvalue=None, n=None, next_multiple=False):
def repeat_each(iterable, n=2):
def repeat_last(iterable, default=None):
def distribute(n, iterable):
def stagger(iterable, offsets=(-1, 0, 1), longest=False, fillvalue=None):
class UnequalIterablesError(ValueError):
def _zip_equal_generator(iterables):
def _zip_equal(*iterables):
def zip_equal(*iterables):
def zip_offset(*iterables, offsets, longest=False, fillvalue=None):
def sort_together(iterables, key_list=(0,), key=None, reverse=False):
def unzip(iterable):
def divide(n, iterable):
def always_iterable(obj, base_type=(str, bytes)):
def adjacent(predicate, iterable, distance=1):
def groupby_transform(iterable, keyfunc=None, valuefunc=None, reducefunc=None):
class numeric_range(abc.Sequence, abc.Hashable):
def count_cycle(iterable, n=None):
def mark_ends(iterable):
def locate(iterable, pred=bool, window_size=None):
def lstrip(iterable, pred):
def rstrip(iterable, pred):
def strip(iterable, pred):
class islice_extended:
def _islice_helper(it, s):
def always_reversible(iterable):
def consecutive_groups(iterable, ordering=lambda x: x):
def difference(iterable, func=sub, *, initial=None):
class SequenceView(Sequence):
class seekable:
class run_length:
def exactly_n(iterable, n, predicate=bool):
def circular_shifts(iterable):
def make_decorator(wrapping_func, result_index=0):
def map_reduce(iterable, keyfunc, valuefunc=None, reducefunc=None):
def rlocate(iterable, pred=bool, window_size=None):
def replace(iterable, pred, substitutes, count=None, window_size=1):
def partitions(iterable):
def set_partitions(iterable, k=None):
class time_limited:
def only(iterable, default=None, too_long=None):
def ichunked(iterable, n):
def distinct_combinations(iterable, r):
def filter_except(validator, iterable, *exceptions):
def map_except(function, iterable, *exceptions):
def map_if(iterable, pred, func, func_else=lambda x: x):
def _sample_unweighted(iterable, k):
def _sample_weighted(iterable, k, weights):
def sample(iterable, k, weights=None):
def is_sorted(iterable, key=None, reverse=False, strict=False):
class AbortThread(BaseException):
class callback_iter:
def windowed_complete(iterable, n):
def all_unique(iterable, key=None):
def nth_product(index, *args):
def nth_permutation(iterable, r, index):
def value_chain(*args):
def product_index(element, *args):
def combination_index(element, iterable):
def permutation_index(element, iterable):
class countable:
def chunked_even(iterable, n):
def _chunked_even_online(iterable, n):
def _chunked_even_finite(iterable, N, n):
def zip_broadcast(*objects, scalar_types=(str, bytes), strict=False):
def unique_in_window(iterable, n, key=None):
def duplicates_everseen(iterable, key=None):
def duplicates_justseen(iterable, key=None):
def minmax(iterable_or_value, *others, key=None, default=_marker):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\more_itertools\recipes.py
-----------------------------
> """Imported from the recipes section of the itertools documentation.
  
  All functions taken from the recipes section of the itertools library docs
  [1]_.
def take(n, iterable):
def tabulate(function, start=0):
def tail(n, iterable):
def consume(iterator, n=None):
def nth(iterable, n, default=None):
def all_equal(iterable):
def quantify(iterable, pred=bool):
def pad_none(iterable):
def ncycles(iterable, n):
def dotproduct(vec1, vec2):
def flatten(listOfLists):
def repeatfunc(func, times=None, *args):
def _pairwise(iterable):
def grouper(iterable, n, fillvalue=None):
def roundrobin(*iterables):
def partition(pred, iterable):
def powerset(iterable):
def unique_everseen(iterable, key=None):
def unique_justseen(iterable, key=None):
def iter_except(func, exception, first=None):
def first_true(iterable, default=None, pred=None):
def random_product(*args, repeat=1):
def random_permutation(iterable, r=None):
def random_combination(iterable, r):
def random_combination_with_replacement(iterable, r):
def nth_combination(iterable, r, index):
def prepend(value, iterator):
def convolve(signal, kernel):
def before_and_after(predicate, it):
def triplewise(iterable):
def sliding_window(iterable, n):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\more_itertools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
def _coerce_parse_result(results: Union[ParseResults, List[Any]]) -> List[Any]:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str) -> bool:
class Undefined:
def _get_env(environment: Dict[str, str], name: str) -> str:
def _evaluate_markers(markers: List[Any], environment: Dict[str, str]) -> bool:
def format_full_version(info: "sys._version_info") -> str:
def default_environment() -> Dict[str, str]:
class Marker:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\specifiers.py
-----------------------------
>     """
      An invalid specifier was found, users should refer to PEP 440.
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class _IndividualSpecifier(BaseSpecifier):
class LegacySpecifier(_IndividualSpecifier):
def _require_version_compare(
class Specifier(_IndividualSpecifier):
def _version_split(version: str) -> List[str]:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: List[str], right: List[str]) -> Tuple[List[str], List[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> FrozenSet[Tag]:
def _get_config_var(name: str, warn: bool = False) -> Union[int, str, None]:
def _normalize_string(string: str) -> str:
def _abi3_applies(python_version: PythonVersion) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> List[str]:
def cpython_tags(
def _generic_abi() -> Iterator[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: MacVersion, cpu_arch: str) -> List[str]:
def mac_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\utils.py
-----------------------------
>     """
      An invalid wheel filename was found, users should refer to PEP 427.
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str) -> NormalizedName:
def canonicalize_version(version: Union[Version, str]) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> Tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\version.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
def parse(version: str) -> Union["LegacyVersion", "Version"]:
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s: str) -> Iterator[str]:
def _legacy_cmpkey(version: str) -> LegacyCmpKey:
class Version(_BaseVersion):
def _parse_letter_version(
def _parse_local_version(local: str) -> Optional[LocalType]:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\_manylinux.py
-----------------------------
>         """
          An invalid ELF file header was found.
class _ELFFileHeader:
def _get_elf_header() -> Optional[_ELFFileHeader]:
def _is_linux_armhf() -> bool:
def _is_linux_i686() -> bool:
def _have_compatible_abi(arch: str) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> Optional[str]:
def _glibc_version_string_ctypes() -> Optional[str]:
def _glibc_version_string() -> Optional[str]:
def _parse_glibc_version(version_str: str) -> Tuple[int, int]:
def _get_glibc_version() -> Tuple[int, int]:
def _is_compatible(name: str, arch: str, version: _GLibCVersion) -> bool:
def platform_tags(linux: str, arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
def _read_unpacked(f: IO[bytes], fmt: str) -> Tuple[int, ...]:
def _parse_ld_musl_from_elf(f: IO[bytes]) -> Optional[str]:
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> Optional[_MuslVersion]:
def _get_musl_version(executable: str) -> Optional[_MuslVersion]:
def platform_tags(arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\__about__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\diagram\__init__.py
-----------------------------
> jinja2_template_source = """\
  <!DOCTYPE html>
  <html>
  <head>
class EachItem(railroad.Group):
class AnnotatedItem(railroad.Group):
class EditablePartial(Generic[T]):
def railroad_to_html(diagrams: List[NamedDiagram], **kwargs) -> str:
def resolve_partial(partial: "EditablePartial[T]") -> T:
def to_railroad(
def _should_vertical(
class ElementState:
class ConverterState:
def _worth_extracting(element: pyparsing.ParserElement) -> bool:
def _apply_diagram_item_enhancements(fn):
def _visible_exprs(exprs: Iterable[pyparsing.ParserElement]):
def _to_diagram_element(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\actions.py
-----------------------------
>     """
      Wrapper for parse actions, to ensure they are only called once.
class OnlyOnce:
def match_only_at_col(n):
def replace_with(repl_str):
def remove_quotes(s, l, t):
def with_attribute(*args, **attr_dict):
def with_class(classname, namespace=""):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\common.py
-----------------------------
>     """Here are some common low-level expressions that may be useful in
      jump-starting parser development:
  
      - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
class pyparsing_common:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\core.py
-----------------------------
>     """
      A cross-version compatibility configuration for pyparsing features that will be
      released in a future version. By setting values in this configuration to True,
      those features can be enabled in prior versions for compatibility development
class __compat__(__config_flags):
class __diag__(__config_flags):
class Diagnostics(Enum):
def enable_diag(diag_enum: Diagnostics) -> None:
def disable_diag(diag_enum: Diagnostics) -> None:
def enable_all_warnings() -> None:
def _should_enable_warnings(
def _trim_arity(func, max_limit=3):
def condition_as_parse_action(
def _default_start_debug_action(
def _default_success_debug_action(
def _default_exception_debug_action(
def null_debug_action(*args):
class ParserElement(ABC):
class _PendingSkip(ParserElement):
class Token(ParserElement):
class Empty(Token):
class NoMatch(Token):
class Literal(Token):
class _SingleCharLiteral(Literal):
class Keyword(Token):
class CaselessLiteral(Literal):
class CaselessKeyword(Keyword):
class CloseMatch(Token):
class Word(Token):
class _WordRegex(Word):
class Char(_WordRegex):
class Regex(Token):
class QuotedString(Token):
class CharsNotIn(Token):
class White(Token):
class PositionToken(Token):
class GoToColumn(PositionToken):
class LineStart(PositionToken):
class LineEnd(PositionToken):
class StringStart(PositionToken):
class StringEnd(PositionToken):
class WordStart(PositionToken):
class WordEnd(PositionToken):
class ParseExpression(ParserElement):
class And(ParseExpression):
class Or(ParseExpression):
class MatchFirst(ParseExpression):
class Each(ParseExpression):
class ParseElementEnhance(ParserElement):
class IndentedBlock(ParseElementEnhance):
class AtStringStart(ParseElementEnhance):
class AtLineStart(ParseElementEnhance):
class FollowedBy(ParseElementEnhance):
class PrecededBy(ParseElementEnhance):
class Located(ParseElementEnhance):
class NotAny(ParseElementEnhance):
class _MultipleMatch(ParseElementEnhance):
class OneOrMore(_MultipleMatch):
class ZeroOrMore(_MultipleMatch):
class _NullToken:
class Opt(ParseElementEnhance):
class SkipTo(ParseElementEnhance):
class Forward(ParseElementEnhance):
class TokenConverter(ParseElementEnhance):
class Combine(TokenConverter):
class Group(TokenConverter):
class Dict(TokenConverter):
class Suppress(TokenConverter):
def trace_parse_action(f: ParseAction) -> ParseAction:
def srange(s: str) -> str:
def token_map(func, *args) -> ParseAction:
def autoname_elements() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\exceptions.py
-----------------------------
>     """base exception class for all parsing runtime exceptions"""
  
      # Performance tuning: we construct a *lot* of these, so keep this
      # constructor as small and fast as possible
class ExceptionWordUnicode(ppu.Latin1, ppu.LatinA, ppu.LatinB, ppu.Greek, ppu.Cyrillic):
class ParseBaseException(Exception):
class ParseException(ParseBaseException):
class ParseFatalException(ParseBaseException):
class ParseSyntaxException(ParseFatalException):
class RecursiveGrammarException(Exception):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\helpers.py
-----------------------------
>     """Helper to define a delimited list of expressions - the delimiter
      defaults to ','. By default, the list elements and delimiters can
      have intervening whitespace, and comments, but this can be
      overridden by passing ``combine=True`` in the constructor. If
def delimited_list(
def counted_array(
def match_previous_literal(expr: ParserElement) -> ParserElement:
def match_previous_expr(expr: ParserElement) -> ParserElement:
def one_of(
def dict_of(key: ParserElement, value: ParserElement) -> ParserElement:
def original_text_for(
def ungroup(expr: ParserElement) -> ParserElement:
def locatedExpr(expr: ParserElement) -> ParserElement:
def nested_expr(
def _makeTags(tagStr, xml, suppress_LT=Suppress("<"), suppress_GT=Suppress(">")):
def make_html_tags(
def make_xml_tags(
def replace_html_entity(t):
class OpAssoc(Enum):
def infix_notation(
def indentedBlock(blockStatementExpr, indentStack, indent=True, backup_stacks=[]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\results.py
-----------------------------
>     """Structured parse results, to provide multiple means of access to
      the parsed data:
  
      - as a list (``len(results)``)
class _ParseResultsWithOffset:
class ParseResults:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\testing.py
-----------------------------
>     """
      namespace class for classes useful in writing unit tests
class pyparsing_test:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\unicode.py
-----------------------------
>     """
      A set of Unicode characters, for language-specific strings for
      ``alphas``, ``nums``, ``alphanums``, and ``printables``.
      A unicode_set is defined by a list of ranges in the Unicode character
class _lazyclassproperty:
class unicode_set:
class pyparsing_unicode(unicode_set):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\util.py
-----------------------------
>     """Internal class for defining compatibility and debugging flags"""
  
      _all_names: List[str] = []
      _fixed_names: List[str] = []
class __config_flags:
def col(loc: int, strg: str) -> int:
def lineno(loc: int, strg: str) -> int:
def line(loc: int, strg: str) -> str:
class _UnboundedCache:
class _FifoCache:
class LRUMemo:
class UnboundedMemo(dict):
def _escape_regex_range_chars(s: str) -> str:
def _collapse_string_to_ranges(
def _flatten(ll: list) -> list:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\pyparsing\__init__.py
-----------------------------
> __doc__ = """
  pyparsing module - Classes and methods to define and execute parsing grammars
  =============================================================================
  
class version_info(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\appdirs.py
-----------------------------
> """Utilities for determining application-specific dirs.
  
  See <http://github.com/ActiveState/appdirs> for details and usage.
def user_data_dir(appname=None, appauthor=None, version=None, roaming=False):
def site_data_dir(appname=None, appauthor=None, version=None, multipath=False):
def user_config_dir(appname=None, appauthor=None, version=None, roaming=False):
def site_config_dir(appname=None, appauthor=None, version=None, multipath=False):
def user_cache_dir(appname=None, appauthor=None, version=None, opinion=True):
def user_state_dir(appname=None, appauthor=None, version=None, roaming=False):
def user_log_dir(appname=None, appauthor=None, version=None, opinion=True):
class AppDirs(object):
def _get_win_folder_from_registry(csidl_name):
def _get_win_folder_with_pywin32(csidl_name):
def _get_win_folder_with_ctypes(csidl_name):
def _get_win_folder_with_jna(csidl_name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\zipp.py
-----------------------------
>     """
      Given a path with elements separated by
      posixpath.sep, generate all parents of that path.
  
def _parents(path):
def _ancestry(path):
def _difference(minuend, subtrahend):
class CompleteDirs(zipfile.ZipFile):
class FastLookup(CompleteDirs):
def _pathlib_compat(path):
class Path:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\_vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pkg_resources\__init__.py
-----------------------------
> """
  Package resource API
  --------------------
  
class PEP440Warning(RuntimeWarning):
def parse_version(v):
def _declare_state(vartype, **kw):
def __getstate__():
def __setstate__(state):
def _sget_dict(val):
def _sset_dict(key, ob, state):
def _sget_object(val):
def _sset_object(key, ob, state):
def get_supported_platform():
class ResolutionError(Exception):
class VersionConflict(ResolutionError):
class ContextualVersionConflict(VersionConflict):
class DistributionNotFound(ResolutionError):
class UnknownExtra(ResolutionError):
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def _macos_vers(_cache=[]):
def _macos_arch(machine):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
class IMetadataProvider:
class IResourceProvider(IMetadataProvider):
class WorkingSet:
class _ReqExtras(dict):
class Environment:
class ExtractionError(RuntimeError):
class ResourceManager:
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def invalid_marker(text):
def evaluate_marker(text, extra=None):
class NullProvider:
def _parents(path):
class EggProvider(NullProvider):
class DefaultProvider(EggProvider):
class EmptyProvider(NullProvider):
class ZipManifests(dict):
class MemoizedZipManifests(ZipManifests):
class ZipProvider(EggProvider):
class FileMetadata(EmptyProvider):
class PathMetadata(DefaultProvider):
class EggMetadata(ZipProvider):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_nothing(importer, path_item, only=False):
def _by_version_descending(names):
def find_on_path(importer, path_item, only=False):
def dist_factory(path_item, entry, only):
class NoDists:
def safe_listdir(path):
def distributions_from_metadata(path):
def non_empty_lines(path):
def resolve_egg_link(path):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def _rebuild_mod_path(orig_path, package_name, module):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def null_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def _cygwin_patch(filename):  # pragma: nocover
def _normalize_cached(filename, _cache={}):
def _is_egg_path(path):
def _is_zip_egg(path):
def _is_unpacked_egg(path):
def _set_parent_ns(packageName):
class EntryPoint:
def _version_from_file(lines):
class Distribution:
class EggInfoDistribution(Distribution):
class DistInfoDistribution(Distribution):
def issue_warning(*args, **kw):
def parse_requirements(strs):
class RequirementParseError(packaging.requirements.InvalidRequirement):
class Requirement(packaging.requirements.Requirement):
def _always_object(classes):
def _find_adapter(registry, ob):
def ensure_directory(path):
def _bypass_ensure_directory(path):
def split_sections(s):
def _mkstemp(*args, **kw):
def _call_aside(f, *args, **kwargs):
def _initialize(g=globals()):
class PkgResourcesDeprecationWarning(Warning):
def _initialize_master_working_set():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_callers.py
-----------------------------
> """
  Call loop machinery
def run_old_style_hookwrapper(
def _raise_wrapfail(
def _warn_teardown_exception(
def _multicall(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_hooks.py
-----------------------------
> """
  Internal hook annotation, representation and calling machinery.
class HookspecOpts(TypedDict):
class HookimplOpts(TypedDict):
class HookspecMarker:
class HookimplMarker:
def normalize_hookimpl_opts(opts: HookimplOpts) -> None:
def varnames(func: object) -> tuple[tuple[str, ...], tuple[str, ...]]:
class HookRelay:
class HookCaller:
class _SubsetHookCaller(HookCaller):
class HookImpl:
class HookSpec:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_manager.py
-----------------------------
>     """Plugin failed validation.
  
      :param plugin: The plugin which failed validation.
      :param message: Error message.
def _warn_for_function(warning: Warning, function: Callable[..., object]) -> None:
class PluginValidationError(Exception):
class DistFacade:
class PluginManager:
def _formatdef(func: Callable[..., object]) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_result.py
-----------------------------
> """
  Hook wrapper "result" utilities.
class HookCallError(Exception):
class Result(Generic[ResultType]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_tracing.py
-----------------------------
> """
  Tracing utils
class TagTracer:
class TagTracerSub:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\_warnings.py
-----------------------------
>     """Base class for all warnings emitted by pluggy."""
  
      __module__ = "pluggy"
  
class PluggyWarning(UserWarning):
class PluggyTeardownRaisedWarning(PluggyWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pluggy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\filters\__init__.py
-----------------------------
> """
      pygments.filters
      ~~~~~~~~~~~~~~~~
  
def find_filter_class(filtername):
def get_filter_by_name(filtername, **options):
def get_all_filters():
def _replace_special(ttype, value, regex, specialttype,
class CodeTagFilter(Filter):
class SymbolFilter(Filter):
class KeywordCaseFilter(Filter):
class NameHighlightFilter(Filter):
class ErrorToken(Exception):
class RaiseOnErrorTokenFilter(Filter):
class VisibleWhitespaceFilter(Filter):
class GobbleFilter(Filter):
class TokenMergeFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\bbcode.py
-----------------------------
> """
      pygments.formatters.bbcode
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BBCodeFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\groff.py
-----------------------------
> """
      pygments.formatters.groff
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class GroffFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\html.py
-----------------------------
> """
      pygments.formatters.html
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_html(text, table=_escape_html_table):
def webify(color):
def _get_ttype_class(ttype):
class HtmlFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\img.py
-----------------------------
> """
      pygments.formatters.img
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class PilNotAvailable(ImportError):
class FontNotFound(Exception):
class FontManager:
class ImageFormatter(Formatter):
class GifImageFormatter(ImageFormatter):
class JpgImageFormatter(ImageFormatter):
class BmpImageFormatter(ImageFormatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\irc.py
-----------------------------
> """
      pygments.formatters.irc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def ircformat(color, text):
class IRCFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\latex.py
-----------------------------
> """
      pygments.formatters.latex
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_tex(text, commandprefix):
def _get_ttype_name(ttype):
class LatexFormatter(Formatter):
class LatexEmbeddedLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\other.py
-----------------------------
> """
      pygments.formatters.other
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class NullFormatter(Formatter):
class RawTokenFormatter(Formatter):
class TestcaseFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\pangomarkup.py
-----------------------------
> """
      pygments.formatters.pangomarkup
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_special_chars(text, table=_escape_table):
class PangoMarkupFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\rtf.py
-----------------------------
> """
      pygments.formatters.rtf
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class RtfFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\svg.py
-----------------------------
> """
      pygments.formatters.svg
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_html(text):
class SvgFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\terminal.py
-----------------------------
> """
      pygments.formatters.terminal
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class TerminalFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\terminal256.py
-----------------------------
> """
      pygments.formatters.terminal256
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class EscapeSequence:
class Terminal256Formatter(Formatter):
class TerminalTrueColorFormatter(Terminal256Formatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatters\__init__.py
-----------------------------
> """
      pygments.formatters
      ~~~~~~~~~~~~~~~~~~~
  
def _fn_matches(fn, glob):
def _load_formatters(module_name):
def get_all_formatters():
def find_formatter_class(alias):
def get_formatter_by_name(_alias, **options):
def load_formatter_from_file(filename, formattername="CustomFormatter", **options):
def get_formatter_for_filename(fn, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\actionscript.py
-----------------------------
> """
      pygments.lexers.actionscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ActionScriptLexer(RegexLexer):
class ActionScript3Lexer(RegexLexer):
class MxmlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ada.py
-----------------------------
> """
      pygments.lexers.ada
      ~~~~~~~~~~~~~~~~~~~
  
class AdaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\agile.py
-----------------------------
> """
      pygments.lexers.agile
      ~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\algebra.py
-----------------------------
> """
      pygments.lexers.algebra
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GAPLexer(RegexLexer):
class GAPConsoleLexer(Lexer):
class MathematicaLexer(RegexLexer):
class MuPADLexer(RegexLexer):
class BCLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ambient.py
-----------------------------
> """
      pygments.lexers.ambient
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class AmbientTalkLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\amdgpu.py
-----------------------------
> """
      pygments.lexers.amdgpu
      ~~~~~~~~~~~~~~~~~~~~~~
  
class AMDGPULexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ampl.py
-----------------------------
> """
      pygments.lexers.ampl
      ~~~~~~~~~~~~~~~~~~~~
  
class AmplLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\apdlexer.py
-----------------------------
> """
      pygments.lexers.apdlexer
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class apdlexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\apl.py
-----------------------------
> """
      pygments.lexers.apl
      ~~~~~~~~~~~~~~~~~~~
  
class APLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\archetype.py
-----------------------------
> """
      pygments.lexers.archetype
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class AtomsLexer(RegexLexer):
class OdinLexer(AtomsLexer):
class CadlLexer(AtomsLexer):
class AdlLexer(AtomsLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\arrow.py
-----------------------------
> """
      pygments.lexers.arrow
      ~~~~~~~~~~~~~~~~~~~~~
  
class ArrowLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\arturo.py
-----------------------------
> """
      pygments.lexers.arturo
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ArturoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\asc.py
-----------------------------
> """
      pygments.lexers.asc
      ~~~~~~~~~~~~~~~~~~~
  
class AscLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\asm.py
-----------------------------
> """
      pygments.lexers.asm
      ~~~~~~~~~~~~~~~~~~~
  
class GasLexer(RegexLexer):
def _objdump_lexer_tokens(asm_lexer):
class ObjdumpLexer(RegexLexer):
class DObjdumpLexer(DelegatingLexer):
class CppObjdumpLexer(DelegatingLexer):
class CObjdumpLexer(DelegatingLexer):
class HsailLexer(RegexLexer):
class LlvmLexer(RegexLexer):
class LlvmMirBodyLexer(RegexLexer):
class LlvmMirLexer(RegexLexer):
class NasmLexer(RegexLexer):
class NasmObjdumpLexer(ObjdumpLexer):
class TasmLexer(RegexLexer):
class Ca65Lexer(RegexLexer):
class Dasm16Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\asn1.py
-----------------------------
> """
      pygments.lexers.asn1
      ~~~~~~~~~~~~~~~~~~~~
  
def word_sequences(tokens):
class Asn1Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\automation.py
-----------------------------
> """
      pygments.lexers.automation
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class AutohotkeyLexer(RegexLexer):
class AutoItLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\bare.py
-----------------------------
> """
      pygments.lexers.bare
      ~~~~~~~~~~~~~~~~~~~~
  
class BareLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\basic.py
-----------------------------
> """
      pygments.lexers.basic
      ~~~~~~~~~~~~~~~~~~~~~
  
class BlitzMaxLexer(RegexLexer):
class BlitzBasicLexer(RegexLexer):
class MonkeyLexer(RegexLexer):
class CbmBasicV2Lexer(RegexLexer):
class QBasicLexer(RegexLexer):
class VBScriptLexer(RegexLexer):
class BBCBasicLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\bdd.py
-----------------------------
> """
      pygments.lexers.bdd
      ~~~~~~~~~~~~~~~~~~~
  
class BddLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\berry.py
-----------------------------
> """
      pygments.lexers.berry
      ~~~~~~~~~~~~~~~~~~~~~
  
class BerryLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\bibtex.py
-----------------------------
> """
      pygments.lexers.bibtex
      ~~~~~~~~~~~~~~~~~~~~~~
  
class BibTeXLexer(ExtendedRegexLexer):
class BSTLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\blueprint.py
-----------------------------
> """
      pygments.lexers.blueprint
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BlueprintLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\boa.py
-----------------------------
> """
      pygments.lexers.boa
      ~~~~~~~~~~~~~~~~~~~
  
class BoaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\bqn.py
-----------------------------
> """
      pygments.lexers.bqn
      ~~~~~~~~~~~~~~~~~~~
  
class BQNLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\business.py
-----------------------------
> """
      pygments.lexers.business
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class CobolLexer(RegexLexer):
class CobolFreeformatLexer(CobolLexer):
class ABAPLexer(RegexLexer):
class OpenEdgeLexer(RegexLexer):
class GoodDataCLLexer(RegexLexer):
class MaqlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\capnproto.py
-----------------------------
> """
      pygments.lexers.capnproto
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class CapnProtoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\carbon.py
-----------------------------
> """
      pygments.lexers.carbon
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CarbonLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\cddl.py
-----------------------------
> """
      pygments.lexers.cddl
      ~~~~~~~~~~~~~~~~~~~~
  
class CddlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\chapel.py
-----------------------------
> """
      pygments.lexers.chapel
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ChapelLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\clean.py
-----------------------------
> """
      pygments.lexers.clean
      ~~~~~~~~~~~~~~~~~~~~~
  
class CleanLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\codeql.py
-----------------------------
> """
      pygments.lexers.codeql
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CodeQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\comal.py
-----------------------------
> """
      pygments.lexers.comal
      ~~~~~~~~~~~~~~~~~~~~~
  
class Comal80Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\compiled.py
-----------------------------
> """
      pygments.lexers.compiled
      ~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\configs.py
-----------------------------
> """
      pygments.lexers.configs
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class IniLexer(RegexLexer):
class DesktopLexer(RegexLexer):
class SystemdLexer(RegexLexer):
class RegeditLexer(RegexLexer):
class PropertiesLexer(RegexLexer):
def _rx_indent(level):
class KconfigLexer(RegexLexer):
class Cfengine3Lexer(RegexLexer):
class ApacheConfLexer(RegexLexer):
class SquidConfLexer(RegexLexer):
class NginxConfLexer(RegexLexer):
class LighttpdConfLexer(RegexLexer):
class DockerLexer(RegexLexer):
class TerraformLexer(ExtendedRegexLexer):
class TermcapLexer(RegexLexer):
class TerminfoLexer(RegexLexer):
class PkgConfigLexer(RegexLexer):
class PacmanConfLexer(RegexLexer):
class AugeasLexer(RegexLexer):
class TOMLLexer(RegexLexer):
class NestedTextLexer(RegexLexer):
class SingularityLexer(RegexLexer):
class UnixConfigLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\console.py
-----------------------------
> """
      pygments.lexers.console
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class VCTreeStatusLexer(RegexLexer):
class PyPyLogLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\cplint.py
-----------------------------
> """
      pygments.lexers.cplint
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CplintLexer(PrologLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\crystal.py
-----------------------------
> """
      pygments.lexers.crystal
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class CrystalLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\csound.py
-----------------------------
> """
      pygments.lexers.csound
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CsoundLexer(RegexLexer):
class CsoundScoreLexer(CsoundLexer):
class CsoundOrchestraLexer(CsoundLexer):
class CsoundDocumentLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\css.py
-----------------------------
> """
      pygments.lexers.css
      ~~~~~~~~~~~~~~~~~~~
  
class CssLexer(RegexLexer):
def _indentation(lexer, match, ctx):
def _starts_block(token, state):
class SassLexer(ExtendedRegexLexer):
class ScssLexer(RegexLexer):
class LessCssLexer(CssLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\c_cpp.py
-----------------------------
> """
      pygments.lexers.c_cpp
      ~~~~~~~~~~~~~~~~~~~~~
  
class CFamilyLexer(RegexLexer):
class CLexer(CFamilyLexer):
class CppLexer(CFamilyLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\c_like.py
-----------------------------
> """
      pygments.lexers.c_like
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PikeLexer(CppLexer):
class NesCLexer(CLexer):
class ClayLexer(RegexLexer):
class ECLexer(CLexer):
class ValaLexer(RegexLexer):
class CudaLexer(CLexer):
class SwigLexer(CppLexer):
class MqlLexer(CppLexer):
class ArduinoLexer(CppLexer):
class CharmciLexer(CppLexer):
class OmgIdlLexer(CLexer):
class PromelaLexer(CLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\d.py
-----------------------------
> """
      pygments.lexers.d
      ~~~~~~~~~~~~~~~~~
  
class DLexer(RegexLexer):
class CrocLexer(RegexLexer):
class MiniDLexer(CrocLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\dalvik.py
-----------------------------
> """
      pygments.lexers.dalvik
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SmaliLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\data.py
-----------------------------
> """
      pygments.lexers.data
      ~~~~~~~~~~~~~~~~~~~~
  
class YamlLexerContext(LexerContext):
class YamlLexer(ExtendedRegexLexer):
class JsonLexer(Lexer):
class JsonBareObjectLexer(JsonLexer):
class JsonLdLexer(JsonLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\dax.py
-----------------------------
> """
      pygments.lexers.dax
      ~~~~~~~~~~~~~~~~~~~
  
class DaxLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\devicetree.py
-----------------------------
> """
      pygments.lexers.devicetree
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class DevicetreeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\diff.py
-----------------------------
> """
      pygments.lexers.diff
      ~~~~~~~~~~~~~~~~~~~~
  
class DiffLexer(RegexLexer):
class DarcsPatchLexer(RegexLexer):
class WDiffLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\dns.py
-----------------------------
> """
      pygments.lexers.dns
      ~~~~~~~~~~~~~~~~~~~
  
class DnsZoneLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\dotnet.py
-----------------------------
> """
      pygments.lexers.dotnet
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CSharpLexer(RegexLexer):
class NemerleLexer(RegexLexer):
class BooLexer(RegexLexer):
class VbNetLexer(RegexLexer):
class GenericAspxLexer(RegexLexer):
class CSharpAspxLexer(DelegatingLexer):
class VbNetAspxLexer(DelegatingLexer):
class FSharpLexer(RegexLexer):
class XppLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\dsls.py
-----------------------------
> """
      pygments.lexers.dsls
      ~~~~~~~~~~~~~~~~~~~~
  
class ProtoBufLexer(RegexLexer):
class ThriftLexer(RegexLexer):
class ZeekLexer(RegexLexer):
class PuppetLexer(RegexLexer):
class RslLexer(RegexLexer):
class MscgenLexer(RegexLexer):
class VGLLexer(RegexLexer):
class AlloyLexer(RegexLexer):
class PanLexer(RegexLexer):
class CrmshLexer(RegexLexer):
class FlatlineLexer(RegexLexer):
class SnowballLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\dylan.py
-----------------------------
> """
      pygments.lexers.dylan
      ~~~~~~~~~~~~~~~~~~~~~
  
class DylanLexer(RegexLexer):
class DylanLidLexer(RegexLexer):
class DylanConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ecl.py
-----------------------------
> """
      pygments.lexers.ecl
      ~~~~~~~~~~~~~~~~~~~
  
class ECLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\eiffel.py
-----------------------------
> """
      pygments.lexers.eiffel
      ~~~~~~~~~~~~~~~~~~~~~~
  
class EiffelLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\elm.py
-----------------------------
> """
      pygments.lexers.elm
      ~~~~~~~~~~~~~~~~~~~
  
class ElmLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\elpi.py
-----------------------------
> """
      pygments.lexers.elpi
      ~~~~~~~~~~~~~~~~~~~~
  
class ElpiLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\email.py
-----------------------------
> """
      pygments.lexers.email
      ~~~~~~~~~~~~~~~~~~~~~
  
class EmailHeaderLexer(RegexLexer):
class EmailLexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\erlang.py
-----------------------------
> """
      pygments.lexers.erlang
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ErlangLexer(RegexLexer):
class ErlangShellLexer(Lexer):
def gen_elixir_string_rules(name, symbol, token):
def gen_elixir_sigstr_rules(term, term_class, token, interpol=True):
class ElixirLexer(RegexLexer):
class ElixirConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\esoteric.py
-----------------------------
> """
      pygments.lexers.esoteric
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class BrainfuckLexer(RegexLexer):
class BefungeLexer(RegexLexer):
class CAmkESLexer(RegexLexer):
class CapDLLexer(RegexLexer):
class RedcodeLexer(RegexLexer):
class AheuiLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ezhil.py
-----------------------------
> """
      pygments.lexers.ezhil
      ~~~~~~~~~~~~~~~~~~~~~
  
class EzhilLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\factor.py
-----------------------------
> """
      pygments.lexers.factor
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FactorLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\fantom.py
-----------------------------
> """
      pygments.lexers.fantom
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FantomLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\felix.py
-----------------------------
> """
      pygments.lexers.felix
      ~~~~~~~~~~~~~~~~~~~~~
  
class FelixLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\fift.py
-----------------------------
> """
      pygments.lexers.fift
      ~~~~~~~~~~~~~~~~~~~~
  
class FiftLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\floscript.py
-----------------------------
> """
      pygments.lexers.floscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class FloScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\forth.py
-----------------------------
> """
      pygments.lexers.forth
      ~~~~~~~~~~~~~~~~~~~~~
  
class ForthLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\fortran.py
-----------------------------
> """
      pygments.lexers.fortran
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class FortranLexer(RegexLexer):
class FortranFixedLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\foxpro.py
-----------------------------
> """
      pygments.lexers.foxpro
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FoxProLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\freefem.py
-----------------------------
> """
      pygments.lexers.freefem
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class FreeFemLexer(CppLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\func.py
-----------------------------
> """
      pygments.lexers.func
      ~~~~~~~~~~~~~~~~~~~~
  
class FuncLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\functional.py
-----------------------------
> """
      pygments.lexers.functional
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\futhark.py
-----------------------------
> """
      pygments.lexers.futhark
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class FutharkLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\gcodelexer.py
-----------------------------
> """
      pygments.lexers.gcodelexer
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class GcodeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\gdscript.py
-----------------------------
> """
      pygments.lexers.gdscript
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class GDScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\gleam.py
-----------------------------
> """
      pygments.lexers.gleam
      ~~~~~~~~~~~~~~~~~~~~~
  
class GleamLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\go.py
-----------------------------
> """
      pygments.lexers.go
      ~~~~~~~~~~~~~~~~~~
  
class GoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\grammar_notation.py
-----------------------------
> """
      pygments.lexers.grammar_notation
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BnfLexer(RegexLexer):
class AbnfLexer(RegexLexer):
class JsgfLexer(RegexLexer):
class PegLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\graph.py
-----------------------------
> """
      pygments.lexers.graph
      ~~~~~~~~~~~~~~~~~~~~~
  
class CypherLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\graphics.py
-----------------------------
> """
      pygments.lexers.graphics
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class GLShaderLexer(RegexLexer):
class HLSLShaderLexer(RegexLexer):
class PostScriptLexer(RegexLexer):
class AsymptoteLexer(RegexLexer):
def _shortened(word):
def _shortened_many(*words):
class GnuplotLexer(RegexLexer):
class PovrayLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\graphql.py
-----------------------------
> """
      pygments.lexers.graphql
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GraphQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\graphviz.py
-----------------------------
> """
      pygments.lexers.graphviz
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class GraphvizLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\gsql.py
-----------------------------
> """
      pygments.lexers.gsql
      ~~~~~~~~~~~~~~~~~~~~
  
class GSQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\hare.py
-----------------------------
> """
      pygments.lexers.hare
      ~~~~~~~~~~~~~~~~~~~~
  
class HareLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\haskell.py
-----------------------------
> """
      pygments.lexers.haskell
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class HaskellLexer(RegexLexer):
class HspecLexer(HaskellLexer):
class IdrisLexer(RegexLexer):
class AgdaLexer(RegexLexer):
class CryptolLexer(RegexLexer):
class LiterateLexer(Lexer):
class LiterateHaskellLexer(LiterateLexer):
class LiterateIdrisLexer(LiterateLexer):
class LiterateAgdaLexer(LiterateLexer):
class LiterateCryptolLexer(LiterateLexer):
class KokaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\haxe.py
-----------------------------
> """
      pygments.lexers.haxe
      ~~~~~~~~~~~~~~~~~~~~
  
class HaxeLexer(ExtendedRegexLexer):
class HxmlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\hdl.py
-----------------------------
> """
      pygments.lexers.hdl
      ~~~~~~~~~~~~~~~~~~~
  
class VerilogLexer(RegexLexer):
class SystemVerilogLexer(RegexLexer):
class VhdlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\hexdump.py
-----------------------------
> """
      pygments.lexers.hexdump
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class HexdumpLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\html.py
-----------------------------
> """
      pygments.lexers.html
      ~~~~~~~~~~~~~~~~~~~~
  
class HtmlLexer(RegexLexer):
class DtdLexer(RegexLexer):
class XmlLexer(RegexLexer):
class XsltLexer(XmlLexer):
class HamlLexer(ExtendedRegexLexer):
class ScamlLexer(ExtendedRegexLexer):
class PugLexer(ExtendedRegexLexer):
class UrlEncodedLexer(RegexLexer):
class VueLexer(HtmlLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\idl.py
-----------------------------
> """
      pygments.lexers.idl
      ~~~~~~~~~~~~~~~~~~~
  
class IDLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\igor.py
-----------------------------
> """
      pygments.lexers.igor
      ~~~~~~~~~~~~~~~~~~~~
  
class IgorLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\inferno.py
-----------------------------
> """
      pygments.lexers.inferno
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class LimboLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\installers.py
-----------------------------
> """
      pygments.lexers.installers
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class NSISLexer(RegexLexer):
class RPMSpecLexer(RegexLexer):
class DebianSourcesLexer(RegexLexer):
class SourcesListLexer(RegexLexer):
class DebianControlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\int_fiction.py
-----------------------------
> """
      pygments.lexers.int_fiction
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class Inform6Lexer(RegexLexer):
class Inform7Lexer(RegexLexer):
class Inform6TemplateLexer(Inform7Lexer):
class Tads3Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\iolang.py
-----------------------------
> """
      pygments.lexers.iolang
      ~~~~~~~~~~~~~~~~~~~~~~
  
class IoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\j.py
-----------------------------
> """
      pygments.lexers.j
      ~~~~~~~~~~~~~~~~~
  
class JLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\javascript.py
-----------------------------
> """
      pygments.lexers.javascript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class JavascriptLexer(RegexLexer):
class TypeScriptLexer(JavascriptLexer):
class KalLexer(RegexLexer):
class LiveScriptLexer(RegexLexer):
class DartLexer(RegexLexer):
class LassoLexer(RegexLexer):
class ObjectiveJLexer(RegexLexer):
class CoffeeScriptLexer(RegexLexer):
class MaskLexer(RegexLexer):
class EarlGreyLexer(RegexLexer):
class JuttleLexer(RegexLexer):
class NodeConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\jmespath.py
-----------------------------
> """
      pygments.lexers.jmespath
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class JMESPathLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\jslt.py
-----------------------------
> """
      pygments.lexers.jslt
      ~~~~~~~~~~~~~~~~~~~~
  
class JSLTLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\json5.py
-----------------------------
> """
      pygments.lexers.json5
      ~~~~~~~~~~~~~~~~~~~~~
  
def string_rules(quote_mark):
def quoted_field_name(quote_mark):
class Json5Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\jsonnet.py
-----------------------------
> """
      pygments.lexers.jsonnet
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def string_rules(quote_mark):
def quoted_field_name(quote_mark):
class JsonnetLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\jsx.py
-----------------------------
> """
      pygments.lexers.jsx
      ~~~~~~~~~~~~~~~~~~~
  
class JsxLexer(JavascriptLexer):
class TsxLexer(TypeScriptLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\julia.py
-----------------------------
> """
      pygments.lexers.julia
      ~~~~~~~~~~~~~~~~~~~~~
  
class JuliaLexer(RegexLexer):
class JuliaConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\jvm.py
-----------------------------
> """
      pygments.lexers.jvm
      ~~~~~~~~~~~~~~~~~~~
  
class JavaLexer(RegexLexer):
class AspectJLexer(JavaLexer):
class ScalaLexer(RegexLexer):
class GosuLexer(RegexLexer):
class GosuTemplateLexer(Lexer):
class GroovyLexer(RegexLexer):
class IokeLexer(RegexLexer):
class ClojureLexer(RegexLexer):
class ClojureScriptLexer(ClojureLexer):
class TeaLangLexer(RegexLexer):
class CeylonLexer(RegexLexer):
class KotlinLexer(RegexLexer):
class XtendLexer(RegexLexer):
class PigLexer(RegexLexer):
class GoloLexer(RegexLexer):
class JasminLexer(RegexLexer):
class SarlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\kuin.py
-----------------------------
> """
      pygments.lexers.kuin
      ~~~~~~~~~~~~~~~~~~~~
  
class KuinLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\kusto.py
-----------------------------
> """
      pygments.lexers.kusto
      ~~~~~~~~~~~~~~~~~~~~~
  
class KustoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ldap.py
-----------------------------
> """
      pygments.lexers.ldap
      ~~~~~~~~~~~~~~~~~~~~
  
class LdifLexer(RegexLexer):
class LdaprcLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\lean.py
-----------------------------
> """
      pygments.lexers.lean
      ~~~~~~~~~~~~~~~~~~~~
  
class Lean3Lexer(RegexLexer):
class Lean4Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\lilypond.py
-----------------------------
> """
      pygments.lexers.lilypond
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
def builtin_words(names, backslash, suffix=NAME_END_RE):
class LilyPondLexer(SchemeLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\lisp.py
-----------------------------
> """
      pygments.lexers.lisp
      ~~~~~~~~~~~~~~~~~~~~
  
class SchemeLexer(RegexLexer):
class CommonLispLexer(RegexLexer):
class HyLexer(RegexLexer):
class RacketLexer(RegexLexer):
class NewLispLexer(RegexLexer):
class EmacsLispLexer(RegexLexer):
class ShenLexer(RegexLexer):
class CPSALexer(RegexLexer):
class XtlangLexer(RegexLexer):
class FennelLexer(RegexLexer):
class JanetLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\macaulay2.py
-----------------------------
> """
      pygments.lexers.macaulay2
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class Macaulay2Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\make.py
-----------------------------
> """
      pygments.lexers.make
      ~~~~~~~~~~~~~~~~~~~~
  
class MakefileLexer(Lexer):
class BaseMakefileLexer(RegexLexer):
class CMakeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\maple.py
-----------------------------
> """
      pygments.lexers.maple
      ~~~~~~~~~~~~~~~~~~~~~
  
class MapleLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\markup.py
-----------------------------
> """
      pygments.lexers.markup
      ~~~~~~~~~~~~~~~~~~~~~~
  
class BBCodeLexer(RegexLexer):
class MoinWikiLexer(RegexLexer):
class RstLexer(RegexLexer):
class TexLexer(RegexLexer):
class GroffLexer(RegexLexer):
class MozPreprocHashLexer(RegexLexer):
class MozPreprocPercentLexer(MozPreprocHashLexer):
class MozPreprocXulLexer(DelegatingLexer):
class MozPreprocJavascriptLexer(DelegatingLexer):
class MozPreprocCssLexer(DelegatingLexer):
class MarkdownLexer(RegexLexer):
class OrgLexer(RegexLexer):
class TiddlyWiki5Lexer(RegexLexer):
class WikitextLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\math.py
-----------------------------
> """
      pygments.lexers.math
      ~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\matlab.py
-----------------------------
> """
      pygments.lexers.matlab
      ~~~~~~~~~~~~~~~~~~~~~~
  
class MatlabLexer(RegexLexer):
class MatlabSessionLexer(Lexer):
class OctaveLexer(RegexLexer):
class ScilabLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\maxima.py
-----------------------------
> """
      pygments.lexers.maxima
      ~~~~~~~~~~~~~~~~~~~~~~
  
class MaximaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\meson.py
-----------------------------
> """
      pygments.lexers.meson
      ~~~~~~~~~~~~~~~~~~~~~
  
class MesonLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\mime.py
-----------------------------
> """
      pygments.lexers.mime
      ~~~~~~~~~~~~~~~~~~~~
  
class MIMELexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\minecraft.py
-----------------------------
> """
      pygments.lexers.minecraft
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class SNBTLexer(RegexLexer):
class MCFunctionLexer(RegexLexer):
class MCSchemaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\mips.py
-----------------------------
> """
      pygments.lexers.mips
      ~~~~~~~~~~~~~~~~~~~~
  
class MIPSLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ml.py
-----------------------------
> """
      pygments.lexers.ml
      ~~~~~~~~~~~~~~~~~~
  
class SMLLexer(RegexLexer):
class OcamlLexer(RegexLexer):
class OpaLexer(RegexLexer):
class ReasonLexer(RegexLexer):
class FStarLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\modeling.py
-----------------------------
> """
      pygments.lexers.modeling
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ModelicaLexer(RegexLexer):
class BugsLexer(RegexLexer):
class JagsLexer(RegexLexer):
class StanLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\modula2.py
-----------------------------
> """
      pygments.lexers.modula2
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class Modula2Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\mojo.py
-----------------------------
> """
      pygments.lexers.mojo
      ~~~~~~~~~~~~~~~~~~~~
  
class MojoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\monte.py
-----------------------------
> """
      pygments.lexers.monte
      ~~~~~~~~~~~~~~~~~~~~~
  
class MonteLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\mosel.py
-----------------------------
> """
      pygments.lexers.mosel
      ~~~~~~~~~~~~~~~~~~~~~
  
class MoselLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ncl.py
-----------------------------
> """
      pygments.lexers.ncl
      ~~~~~~~~~~~~~~~~~~~
  
class NCLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\nimrod.py
-----------------------------
> """
      pygments.lexers.nimrod
      ~~~~~~~~~~~~~~~~~~~~~~
  
class NimrodLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\nit.py
-----------------------------
> """
      pygments.lexers.nit
      ~~~~~~~~~~~~~~~~~~~
  
class NitLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\nix.py
-----------------------------
> """
      pygments.lexers.nix
      ~~~~~~~~~~~~~~~~~~~
  
class NixLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\numbair.py
-----------------------------
> """
      pygments.lexers.numbair
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class NumbaIRLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\oberon.py
-----------------------------
> """
      pygments.lexers.oberon
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ComponentPascalLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\objective.py
-----------------------------
> """
      pygments.lexers.objective
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def objective(baselexer):
class ObjectiveCLexer(objective(CLexer)):
class ObjectiveCppLexer(objective(CppLexer)):
class LogosLexer(ObjectiveCppLexer):
class SwiftLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ooc.py
-----------------------------
> """
      pygments.lexers.ooc
      ~~~~~~~~~~~~~~~~~~~
  
class OocLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\openscad.py
-----------------------------
> """
      pygments.lexers.openscad
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class OpenScadLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\other.py
-----------------------------
> """
      pygments.lexers.other
      ~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\parasail.py
-----------------------------
> """
      pygments.lexers.parasail
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ParaSailLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\parsers.py
-----------------------------
> """
      pygments.lexers.parsers
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class RagelLexer(RegexLexer):
class RagelEmbeddedLexer(RegexLexer):
class RagelRubyLexer(DelegatingLexer):
class RagelCLexer(DelegatingLexer):
class RagelDLexer(DelegatingLexer):
class RagelCppLexer(DelegatingLexer):
class RagelObjectiveCLexer(DelegatingLexer):
class RagelJavaLexer(DelegatingLexer):
class AntlrLexer(RegexLexer):
class AntlrCppLexer(DelegatingLexer):
class AntlrObjectiveCLexer(DelegatingLexer):
class AntlrCSharpLexer(DelegatingLexer):
class AntlrPythonLexer(DelegatingLexer):
class AntlrJavaLexer(DelegatingLexer):
class AntlrRubyLexer(DelegatingLexer):
class AntlrPerlLexer(DelegatingLexer):
class AntlrActionScriptLexer(DelegatingLexer):
class TreetopBaseLexer(RegexLexer):
class TreetopLexer(DelegatingLexer):
class EbnfLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\pascal.py
-----------------------------
> """
      pygments.lexers.pascal
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PortugolLexer(Lexer):
class DelphiLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\pawn.py
-----------------------------
> """
      pygments.lexers.pawn
      ~~~~~~~~~~~~~~~~~~~~
  
class SourcePawnLexer(RegexLexer):
class PawnLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\pddl.py
-----------------------------
> """
      pygments.lexers.pddl
      ~~~~~~~~~~~~~~~~~~~~
  
class PddlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\perl.py
-----------------------------
> """
      pygments.lexers.perl
      ~~~~~~~~~~~~~~~~~~~~
  
class PerlLexer(RegexLexer):
class Perl6Lexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\phix.py
-----------------------------
> """
      pygments.lexers.phix
      ~~~~~~~~~~~~~~~~~~~~
  
class PhixLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\php.py
-----------------------------
> """
      pygments.lexers.php
      ~~~~~~~~~~~~~~~~~~~
  
class ZephirLexer(RegexLexer):
class PsyshConsoleLexer(Lexer):
class PhpLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\pointless.py
-----------------------------
> """
      pygments.lexers.pointless
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class PointlessLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\pony.py
-----------------------------
> """
      pygments.lexers.pony
      ~~~~~~~~~~~~~~~~~~~~
  
class PonyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\praat.py
-----------------------------
> """
      pygments.lexers.praat
      ~~~~~~~~~~~~~~~~~~~~~
  
class PraatLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\procfile.py
-----------------------------
> """
      pygments.lexers.procfile
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ProcfileLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\prolog.py
-----------------------------
> """
      pygments.lexers.prolog
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PrologLexer(RegexLexer):
class LogtalkLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\promql.py
-----------------------------
> """
      pygments.lexers.promql
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PromQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\prql.py
-----------------------------
> """
      pygments.lexers.prql
      ~~~~~~~~~~~~~~~~~~~~
  
class PrqlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ptx.py
-----------------------------
> """
      pygments.lexers.ptx
      ~~~~~~~~~~~~~~~~~~~
  
class PtxLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\python.py
-----------------------------
> """
      pygments.lexers.python
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PythonLexer(RegexLexer):
class Python2Lexer(RegexLexer):
class _PythonConsoleLexerBase(RegexLexer):
class PythonConsoleLexer(DelegatingLexer):
class PythonTracebackLexer(RegexLexer):
class Python2TracebackLexer(RegexLexer):
class CythonLexer(RegexLexer):
class DgLexer(RegexLexer):
class NumPyLexer(PythonLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\q.py
-----------------------------
> """
      pygments.lexers.q
      ~~~~~~~~~~~~~~~~~
  
class KLexer(RegexLexer):
class QLexer(KLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\qlik.py
-----------------------------
> """
      pygments.lexers.qlik
      ~~~~~~~~~~~~~~~~~~~~
  
class QlikLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\qvt.py
-----------------------------
> """
      pygments.lexers.qvt
      ~~~~~~~~~~~~~~~~~~~
  
class QVToLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\r.py
-----------------------------
> """
      pygments.lexers.r
      ~~~~~~~~~~~~~~~~~
  
class RConsoleLexer(Lexer):
class SLexer(RegexLexer):
class RdLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\rdf.py
-----------------------------
> """
      pygments.lexers.rdf
      ~~~~~~~~~~~~~~~~~~~
  
class SparqlLexer(RegexLexer):
class TurtleLexer(RegexLexer):
class ShExCLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\rebol.py
-----------------------------
> """
      pygments.lexers.rebol
      ~~~~~~~~~~~~~~~~~~~~~
  
class RebolLexer(RegexLexer):
class RedLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\rego.py
-----------------------------
> """
      pygments.lexers.rego
      ~~~~~~~~~~~~~~~~~~~~
  
class RegoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\resource.py
-----------------------------
> """
      pygments.lexers.resource
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ResourceLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ride.py
-----------------------------
> """
      pygments.lexers.ride
      ~~~~~~~~~~~~~~~~~~~~
  
class RideLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\rita.py
-----------------------------
> """
      pygments.lexers.rita
      ~~~~~~~~~~~~~~~~~~~~
  
class RitaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\rnc.py
-----------------------------
> """
      pygments.lexers.rnc
      ~~~~~~~~~~~~~~~~~~~
  
class RNCCompactLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\roboconf.py
-----------------------------
> """
      pygments.lexers.roboconf
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class RoboconfGraphLexer(RegexLexer):
class RoboconfInstancesLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\robotframework.py
-----------------------------
> """
      pygments.lexers.robotframework
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def normalize(string, remove=''):
class RobotFrameworkLexer(Lexer):
class VariableTokenizer:
class RowTokenizer:
class RowSplitter:
class Tokenizer:
class Comment(Tokenizer):
class Setting(Tokenizer):
class ImportSetting(Tokenizer):
class TestCaseSetting(Setting):
class KeywordSetting(TestCaseSetting):
class Variable(Tokenizer):
class KeywordCall(Tokenizer):
class GherkinTokenizer:
class TemplatedKeywordCall(Tokenizer):
class ForLoop(Tokenizer):
class _Table:
class UnknownTable(_Table):
class VariableTable(_Table):
class SettingTable(_Table):
class TestCaseTable(_Table):
class KeywordTable(TestCaseTable):
class VariableSplitter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ruby.py
-----------------------------
> """
      pygments.lexers.ruby
      ~~~~~~~~~~~~~~~~~~~~
  
class RubyLexer(ExtendedRegexLexer):
class RubyConsoleLexer(Lexer):
class FancyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\rust.py
-----------------------------
> """
      pygments.lexers.rust
      ~~~~~~~~~~~~~~~~~~~~
  
class RustLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\sas.py
-----------------------------
> """
      pygments.lexers.sas
      ~~~~~~~~~~~~~~~~~~~
  
class SASLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\savi.py
-----------------------------
> """
      pygments.lexers.savi
      ~~~~~~~~~~~~~~~~~~~~
  
class SaviLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\scdoc.py
-----------------------------
> """
      pygments.lexers.scdoc
      ~~~~~~~~~~~~~~~~~~~~~
  
class ScdocLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\scripting.py
-----------------------------
> """
      pygments.lexers.scripting
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def all_lua_builtins():
class LuaLexer(RegexLexer):
def _luau_make_expression(should_pop, _s):
def _luau_make_expression_special(should_pop):
class LuauLexer(RegexLexer):
class MoonScriptLexer(LuaLexer):
class ChaiscriptLexer(RegexLexer):
class LSLLexer(RegexLexer):
class AppleScriptLexer(RegexLexer):
class RexxLexer(RegexLexer):
class MOOCodeLexer(RegexLexer):
class HybrisLexer(RegexLexer):
class EasytrieveLexer(RegexLexer):
class JclLexer(RegexLexer):
class MiniScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\sgf.py
-----------------------------
> """
      pygments.lexers.sgf
      ~~~~~~~~~~~~~~~~~~~
  
class SmartGameFormatLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\shell.py
-----------------------------
> """
      pygments.lexers.shell
      ~~~~~~~~~~~~~~~~~~~~~
  
class BashLexer(RegexLexer):
class SlurmBashLexer(BashLexer):
class ShellSessionBaseLexer(Lexer):
class BashSessionLexer(ShellSessionBaseLexer):
class BatchLexer(RegexLexer):
class MSDOSSessionLexer(ShellSessionBaseLexer):
class TcshLexer(RegexLexer):
class TcshSessionLexer(ShellSessionBaseLexer):
class PowerShellLexer(RegexLexer):
class PowerShellSessionLexer(ShellSessionBaseLexer):
class FishShellLexer(RegexLexer):
class ExeclineLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\sieve.py
-----------------------------
> """
      pygments.lexers.sieve
      ~~~~~~~~~~~~~~~~~~~~~
  
class SieveLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\slash.py
-----------------------------
> """
      pygments.lexers.slash
      ~~~~~~~~~~~~~~~~~~~~~
  
class SlashLanguageLexer(ExtendedRegexLexer):
class SlashLexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\smalltalk.py
-----------------------------
> """
      pygments.lexers.smalltalk
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class SmalltalkLexer(RegexLexer):
class NewspeakLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\smithy.py
-----------------------------
> """
      pygments.lexers.smithy
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SmithyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\smv.py
-----------------------------
> """
      pygments.lexers.smv
      ~~~~~~~~~~~~~~~~~~~
  
class NuSMVLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\snobol.py
-----------------------------
> """
      pygments.lexers.snobol
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SnobolLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\solidity.py
-----------------------------
> """
      pygments.lexers.solidity
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class SolidityLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\soong.py
-----------------------------
> """
      pygments.lexers.soong
      ~~~~~~~~~~~~~~~~~~~~~
  
class SoongLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\sophia.py
-----------------------------
> """
      pygments.lexers.sophia
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SophiaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\special.py
-----------------------------
> """
      pygments.lexers.special
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class TextLexer(Lexer):
class OutputLexer(Lexer):
class RawTokenLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\spice.py
-----------------------------
> """
      pygments.lexers.spice
      ~~~~~~~~~~~~~~~~~~~~~
  
class SpiceLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\sql.py
-----------------------------
> """
      pygments.lexers.sql
      ~~~~~~~~~~~~~~~~~~~
  
def language_callback(lexer, match):
class PostgresBase:
class PostgresLexer(PostgresBase, RegexLexer):
class PlPgsqlLexer(PostgresBase, RegexLexer):
class PsqlRegexLexer(PostgresBase, RegexLexer):
class lookahead:
class PostgresConsoleLexer(Lexer):
class PostgresExplainLexer(RegexLexer):
class SqlLexer(RegexLexer):
class TransactSqlLexer(RegexLexer):
class MySqlLexer(RegexLexer):
class GoogleSqlLexer(RegexLexer):
class SqliteConsoleLexer(Lexer):
class RqlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\srcinfo.py
-----------------------------
> """
      pygments.lexers.srcinfo
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class SrcinfoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\stata.py
-----------------------------
> """
      pygments.lexers.stata
      ~~~~~~~~~~~~~~~~~~~~~
  
class StataLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\supercollider.py
-----------------------------
> """
      pygments.lexers.supercollider
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class SuperColliderLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tablegen.py
-----------------------------
> """
      pygments.lexers.tablegen
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class TableGenLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tact.py
-----------------------------
> """
      pygments.lexers.tact
      ~~~~~~~~~~~~~~~~~~~~
  
class TactLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tal.py
-----------------------------
> """
      pygments.lexers.tal
      ~~~~~~~~~~~~~~~~~~~
  
class TalLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tcl.py
-----------------------------
> """
      pygments.lexers.tcl
      ~~~~~~~~~~~~~~~~~~~
  
class TclLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\teal.py
-----------------------------
> """
      pygments.lexers.teal
      ~~~~~~~~~~~~~~~~~~~~
  
class TealLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\templates.py
-----------------------------
> """
      pygments.lexers.templates
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ErbLexer(Lexer):
class SmartyLexer(RegexLexer):
class VelocityLexer(RegexLexer):
class VelocityHtmlLexer(DelegatingLexer):
class VelocityXmlLexer(DelegatingLexer):
class DjangoLexer(RegexLexer):
class MyghtyLexer(RegexLexer):
class MyghtyHtmlLexer(DelegatingLexer):
class MyghtyXmlLexer(DelegatingLexer):
class MyghtyJavascriptLexer(DelegatingLexer):
class MyghtyCssLexer(DelegatingLexer):
class MasonLexer(RegexLexer):
class MakoLexer(RegexLexer):
class MakoHtmlLexer(DelegatingLexer):
class MakoXmlLexer(DelegatingLexer):
class MakoJavascriptLexer(DelegatingLexer):
class MakoCssLexer(DelegatingLexer):
class CheetahPythonLexer(Lexer):
class CheetahLexer(RegexLexer):
class CheetahHtmlLexer(DelegatingLexer):
class CheetahXmlLexer(DelegatingLexer):
class CheetahJavascriptLexer(DelegatingLexer):
class GenshiTextLexer(RegexLexer):
class GenshiMarkupLexer(RegexLexer):
class HtmlGenshiLexer(DelegatingLexer):
class GenshiLexer(DelegatingLexer):
class JavascriptGenshiLexer(DelegatingLexer):
class CssGenshiLexer(DelegatingLexer):
class RhtmlLexer(DelegatingLexer):
class XmlErbLexer(DelegatingLexer):
class CssErbLexer(DelegatingLexer):
class JavascriptErbLexer(DelegatingLexer):
class HtmlPhpLexer(DelegatingLexer):
class XmlPhpLexer(DelegatingLexer):
class CssPhpLexer(DelegatingLexer):
class JavascriptPhpLexer(DelegatingLexer):
class HtmlSmartyLexer(DelegatingLexer):
class XmlSmartyLexer(DelegatingLexer):
class CssSmartyLexer(DelegatingLexer):
class JavascriptSmartyLexer(DelegatingLexer):
class HtmlDjangoLexer(DelegatingLexer):
class XmlDjangoLexer(DelegatingLexer):
class CssDjangoLexer(DelegatingLexer):
class JavascriptDjangoLexer(DelegatingLexer):
class JspRootLexer(RegexLexer):
class JspLexer(DelegatingLexer):
class EvoqueLexer(RegexLexer):
class EvoqueHtmlLexer(DelegatingLexer):
class EvoqueXmlLexer(DelegatingLexer):
class ColdfusionLexer(RegexLexer):
class ColdfusionMarkupLexer(RegexLexer):
class ColdfusionHtmlLexer(DelegatingLexer):
class ColdfusionCFCLexer(DelegatingLexer):
class SspLexer(DelegatingLexer):
class TeaTemplateRootLexer(RegexLexer):
class TeaTemplateLexer(DelegatingLexer):
class LassoHtmlLexer(DelegatingLexer):
class LassoXmlLexer(DelegatingLexer):
class LassoCssLexer(DelegatingLexer):
class LassoJavascriptLexer(DelegatingLexer):
class HandlebarsLexer(RegexLexer):
class HandlebarsHtmlLexer(DelegatingLexer):
class YamlJinjaLexer(DelegatingLexer):
class LiquidLexer(RegexLexer):
class TwigLexer(RegexLexer):
class TwigHtmlLexer(DelegatingLexer):
class Angular2Lexer(RegexLexer):
class Angular2HtmlLexer(DelegatingLexer):
class SqlJinjaLexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\teraterm.py
-----------------------------
> """
      pygments.lexers.teraterm
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class TeraTermLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\testing.py
-----------------------------
> """
      pygments.lexers.testing
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GherkinLexer(RegexLexer):
class TAPLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\text.py
-----------------------------
> """
      pygments.lexers.text
      ~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\textedit.py
-----------------------------
> """
      pygments.lexers.textedit
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class AwkLexer(RegexLexer):
class SedLexer(RegexLexer):
class VimLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\textfmts.py
-----------------------------
> """
      pygments.lexers.textfmts
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class IrcLogsLexer(RegexLexer):
class GettextLexer(RegexLexer):
class HttpLexer(RegexLexer):
class TodotxtLexer(RegexLexer):
class NotmuchLexer(RegexLexer):
class KernelLogLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\theorem.py
-----------------------------
> """
      pygments.lexers.theorem
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class CoqLexer(RegexLexer):
class IsabelleLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\thingsdb.py
-----------------------------
> """
      pygments.lexers.thingsdb
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ThingsDBLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tlb.py
-----------------------------
> """
      pygments.lexers.tlb
      ~~~~~~~~~~~~~~~~~~~
  
class TlbLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tls.py
-----------------------------
> """
      pygments.lexers.tls
      ~~~~~~~~~~~~~~~~~~~
  
class TlsLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\tnt.py
-----------------------------
> """
      pygments.lexers.tnt
      ~~~~~~~~~~~~~~~~~~~
  
class TNTLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\trafficscript.py
-----------------------------
> """
      pygments.lexers.trafficscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class RtsLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\typoscript.py
-----------------------------
> """
      pygments.lexers.typoscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class TypoScriptCssDataLexer(RegexLexer):
class TypoScriptHtmlDataLexer(RegexLexer):
class TypoScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\typst.py
-----------------------------
> """
      pygments.lexers.typst
      ~~~~~~~~~~~~~~~~~~~~~
  
class TypstLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\ul4.py
-----------------------------
> """
      pygments.lexers.ul4
      ~~~~~~~~~~~~~~~~~~~
  
class UL4Lexer(RegexLexer):
class HTMLUL4Lexer(DelegatingLexer):
class XMLUL4Lexer(DelegatingLexer):
class CSSUL4Lexer(DelegatingLexer):
class JavascriptUL4Lexer(DelegatingLexer):
class PythonUL4Lexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\unicon.py
-----------------------------
> """
      pygments.lexers.unicon
      ~~~~~~~~~~~~~~~~~~~~~~
  
class UniconLexer(RegexLexer):
class IconLexer(RegexLexer):
class UcodeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\urbi.py
-----------------------------
> """
      pygments.lexers.urbi
      ~~~~~~~~~~~~~~~~~~~~
  
class UrbiscriptLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\usd.py
-----------------------------
> """
      pygments.lexers.usd
      ~~~~~~~~~~~~~~~~~~~
  
def _keywords(words, type_):
class UsdLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\varnish.py
-----------------------------
> """
      pygments.lexers.varnish
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class VCLLexer(RegexLexer):
class VCLSnippetLexer(VCLLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\verification.py
-----------------------------
> """
      pygments.lexers.verification
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BoogieLexer(RegexLexer):
class SilverLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\verifpal.py
-----------------------------
> """
      pygments.lexers.verifpal
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class VerifpalLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\vip.py
-----------------------------
> """
      pygments.lexers.vip
      ~~~~~~~~~~~~~~~~~~~
  
class VisualPrologBaseLexer(RegexLexer):
class VisualPrologLexer(VisualPrologBaseLexer):
class VisualPrologGrammarLexer(VisualPrologBaseLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\vyper.py
-----------------------------
> """
      pygments.lexers.vyper
      ~~~~~~~~~~~~~~~~~~~~~
  
class VyperLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\web.py
-----------------------------
> """
      pygments.lexers.web
      ~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\webassembly.py
-----------------------------
> """
      pygments.lexers.webassembly
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class WatLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\webidl.py
-----------------------------
> """
      pygments.lexers.webidl
      ~~~~~~~~~~~~~~~~~~~~~~
  
class WebIDLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\webmisc.py
-----------------------------
> """
      pygments.lexers.webmisc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class DuelLexer(RegexLexer):
class XQueryLexer(ExtendedRegexLexer):
class QmlLexer(RegexLexer):
class CirruLexer(RegexLexer):
class SlimLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\wgsl.py
-----------------------------
> """
      pygments.lexers.wgsl
      ~~~~~~~~~~~~~~~~~~~~
  
class WgslLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\whiley.py
-----------------------------
> """
      pygments.lexers.whiley
      ~~~~~~~~~~~~~~~~~~~~~~
  
class WhileyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\wowtoc.py
-----------------------------
> """
      pygments.lexers.wowtoc
      ~~~~~~~~~~~~~~~~~~~~~~
  
def _create_tag_line_pattern(inner_pattern, ignore_case=False):
def _create_tag_line_token(inner_pattern, inner_token, ignore_case=False):
class WoWTocLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\wren.py
-----------------------------
> """
      pygments.lexers.wren
      ~~~~~~~~~~~~~~~~~~~~
  
class WrenLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\x10.py
-----------------------------
> """
      pygments.lexers.x10
      ~~~~~~~~~~~~~~~~~~~
  
class X10Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\xorg.py
-----------------------------
> """
      pygments.lexers.xorg
      ~~~~~~~~~~~~~~~~~~~~
  
class XorgLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\yang.py
-----------------------------
> """
      pygments.lexers.yang
      ~~~~~~~~~~~~~~~~~~~~
  
class YangLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\yara.py
-----------------------------
> """
      pygments.lexers.yara
      ~~~~~~~~~~~~~~~~~~~~
  
class YaraLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\zig.py
-----------------------------
> """
      pygments.lexers.zig
      ~~~~~~~~~~~~~~~~~~~
  
class ZigLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_ada_builtins.py
-----------------------------
> """
      pygments.lexers._ada_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_asy_builtins.py
-----------------------------
> """
      pygments.lexers._asy_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_cl_builtins.py
-----------------------------
> """
      pygments.lexers._cl_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_cocoa_builtins.py
-----------------------------
> """
      pygments.lexers._cocoa_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_csound_builtins.py
-----------------------------
> """
      pygments.lexers._csound_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_css_builtins.py
-----------------------------
> """
      pygments.lexers._css_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_googlesql_builtins.py
-----------------------------
> """
      pygments.lexers._googlesql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_julia_builtins.py
-----------------------------
> """
      pygments.lexers._julia_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_lasso_builtins.py
-----------------------------
> """
      pygments.lexers._lasso_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_lilypond_builtins.py
-----------------------------
> """
      pygments.lexers._lilypond_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_luau_builtins.py
-----------------------------
> """
      pygments.lexers._luau_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_lua_builtins.py
-----------------------------
> """
      pygments.lexers._lua_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_mql_builtins.py
-----------------------------
> """
      pygments.lexers._mql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_mysql_builtins.py
-----------------------------
> """
      pygments.lexers._mysql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_openedge_builtins.py
-----------------------------
> """
      pygments.lexers._openedge_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_php_builtins.py
-----------------------------
> """
      pygments.lexers._php_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_postgres_builtins.py
-----------------------------
> """
      pygments.lexers._postgres_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_qlik_builtins.py
-----------------------------
> """
      pygments.lexers._qlik_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_scheme_builtins.py
-----------------------------
> """
      pygments.lexers._scheme_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_scilab_builtins.py
-----------------------------
> """
      pygments.lexers._scilab_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_sourcemod_builtins.py
-----------------------------
> """
      pygments.lexers._sourcemod_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_sql_builtins.py
-----------------------------
> """
      pygments.lexers._sql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_stan_builtins.py
-----------------------------
> """
      pygments.lexers._stan_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_stata_builtins.py
-----------------------------
> """
      pygments.lexers._stata_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_tsql_builtins.py
-----------------------------
> """
      pygments.lexers._tsql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_usd_builtins.py
-----------------------------
> """
      pygments.lexers._usd_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_vbscript_builtins.py
-----------------------------
> """
      pygments.lexers._vbscript_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\_vim_builtins.py
-----------------------------
> """
      pygments.lexers._vim_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def _getauto():
def _getcommand():
def _getoption():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexers\__init__.py
-----------------------------
> """
      pygments.lexers
      ~~~~~~~~~~~~~~~
  
def _fn_matches(fn, glob):
def _load_lexers(module_name):
def get_all_lexers(plugins=True):
def find_lexer_class(name):
def find_lexer_class_by_name(_alias):
def get_lexer_by_name(_alias, **options):
def load_lexer_from_file(filename, lexername="CustomLexer", **options):
def find_lexer_class_for_filename(_fn, code=None):
def get_lexer_for_filename(_fn, code=None, **options):
def get_lexer_for_mimetype(_mime, **options):
def _iter_lexerclasses(plugins=True):
def guess_lexer_for_filename(_fn, _text, **options):
def guess_lexer(_text, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\abap.py
-----------------------------
> """
      pygments.styles.abap
      ~~~~~~~~~~~~~~~~~~~~
  
class AbapStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\algol.py
-----------------------------
> """
      pygments.styles.algol
      ~~~~~~~~~~~~~~~~~~~~~
  
class AlgolStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\algol_nu.py
-----------------------------
> """
      pygments.styles.algol_nu
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class Algol_NuStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\arduino.py
-----------------------------
> """
      pygments.styles.arduino
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class ArduinoStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\autumn.py
-----------------------------
> """
      pygments.styles.autumn
      ~~~~~~~~~~~~~~~~~~~~~~
  
class AutumnStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\borland.py
-----------------------------
> """
      pygments.styles.borland
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class BorlandStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\bw.py
-----------------------------
> """
      pygments.styles.bw
      ~~~~~~~~~~~~~~~~~~
  
class BlackWhiteStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\coffee.py
-----------------------------
> """
      pygments.styles.coffee
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CoffeeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\colorful.py
-----------------------------
> """
      pygments.styles.colorful
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ColorfulStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\default.py
-----------------------------
> """
      pygments.styles.default
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class DefaultStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\dracula.py
-----------------------------
> """
      pygments.styles.dracula
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class DraculaStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\emacs.py
-----------------------------
> """
      pygments.styles.emacs
      ~~~~~~~~~~~~~~~~~~~~~
  
class EmacsStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\friendly.py
-----------------------------
> """
      pygments.styles.friendly
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class FriendlyStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\friendly_grayscale.py
-----------------------------
> """
      pygments.styles.friendly_grayscale
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class FriendlyGrayscaleStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\fruity.py
-----------------------------
> """
      pygments.styles.fruity
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FruityStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\gh_dark.py
-----------------------------
> """
      pygments.styles.gh_dark
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GhDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\gruvbox.py
-----------------------------
> """
      pygments.styles.gruvbox
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GruvboxDarkStyle(Style):
class GruvboxLightStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\igor.py
-----------------------------
> """
      pygments.styles.igor
      ~~~~~~~~~~~~~~~~~~~~
  
class IgorStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\inkpot.py
-----------------------------
> """
      pygments.styles.inkpot
      ~~~~~~~~~~~~~~~~~~~~~~
  
class InkPotStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\lightbulb.py
-----------------------------
> """
      pygments.styles.lightbulb
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class LightbulbStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\lilypond.py
-----------------------------
> """
      pygments.styles.lilypond
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class LilyPondStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\lovelace.py
-----------------------------
> """
      pygments.styles.lovelace
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class LovelaceStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\manni.py
-----------------------------
> """
      pygments.styles.manni
      ~~~~~~~~~~~~~~~~~~~~~
  
class ManniStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\material.py
-----------------------------
> """
      pygments.styles.material
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class MaterialStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\monokai.py
-----------------------------
> """
      pygments.styles.monokai
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class MonokaiStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\murphy.py
-----------------------------
> """
      pygments.styles.murphy
      ~~~~~~~~~~~~~~~~~~~~~~
  
class MurphyStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\native.py
-----------------------------
> """
      pygments.styles.native
      ~~~~~~~~~~~~~~~~~~~~~~
  
class NativeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\nord.py
-----------------------------
> """
      pygments.styles.nord
      ~~~~~~~~~~~~~~~~~~~~
  
class NordStyle(Style):
class NordDarkerStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\onedark.py
-----------------------------
> """
      pygments.styles.onedark
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class OneDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\paraiso_dark.py
-----------------------------
> """
      pygments.styles.paraiso_dark
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ParaisoDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\paraiso_light.py
-----------------------------
> """
      pygments.styles.paraiso_light
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ParaisoLightStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\pastie.py
-----------------------------
> """
      pygments.styles.pastie
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PastieStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\perldoc.py
-----------------------------
> """
      pygments.styles.perldoc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class PerldocStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\rainbow_dash.py
-----------------------------
> """
      pygments.styles.rainbow_dash
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class RainbowDashStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\rrt.py
-----------------------------
> """
      pygments.styles.rrt
      ~~~~~~~~~~~~~~~~~~~
  
class RrtStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\sas.py
-----------------------------
> """
      pygments.styles.sas
      ~~~~~~~~~~~~~~~~~~~
  
class SasStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\solarized.py
-----------------------------
> """
      pygments.styles.solarized
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def make_style(colors):
class SolarizedDarkStyle(Style):
class SolarizedLightStyle(SolarizedDarkStyle):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\staroffice.py
-----------------------------
> """
      pygments.styles.staroffice
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class StarofficeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\stata_dark.py
-----------------------------
> """
      pygments.styles.stata_dark
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class StataDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\stata_light.py
-----------------------------
> """
      pygments.styles.stata_light
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class StataLightStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\tango.py
-----------------------------
> """
      pygments.styles.tango
      ~~~~~~~~~~~~~~~~~~~~~
  
class TangoStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\trac.py
-----------------------------
> """
      pygments.styles.trac
      ~~~~~~~~~~~~~~~~~~~~
  
class TracStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\vim.py
-----------------------------
> """
      pygments.styles.vim
      ~~~~~~~~~~~~~~~~~~~
  
class VimStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\vs.py
-----------------------------
> """
      pygments.styles.vs
      ~~~~~~~~~~~~~~~~~~
  
class VisualStudioStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\xcode.py
-----------------------------
> """
      pygments.styles.xcode
      ~~~~~~~~~~~~~~~~~~~~~
  
class XcodeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\zenburn.py
-----------------------------
> """
      pygments.styles.zenburn
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class ZenburnStyle(Style):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\styles\__init__.py
-----------------------------
> """
      pygments.styles
      ~~~~~~~~~~~~~~~
  
def get_style_by_name(name):
def get_all_styles():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\cmdline.py
-----------------------------
> """
      pygments.cmdline
      ~~~~~~~~~~~~~~~~
  
def _parse_options(o_strs):
def _parse_filters(f_strs):
def _print_help(what, name):
def _print_list(what):
def _print_list_as_json(requested_items):
def main_inner(parser, argns):
class HelpFormatter(argparse.HelpFormatter):
def main(args=sys.argv):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\console.py
-----------------------------
> """
      pygments.console
      ~~~~~~~~~~~~~~~~
  
def reset_color():
def colorize(color_key, text):
def ansiformat(attr, text):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\filter.py
-----------------------------
> """
      pygments.filter
      ~~~~~~~~~~~~~~~
  
def apply_filters(stream, filters, lexer=None):
def simplefilter(f):
class Filter:
class FunctionFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\formatter.py
-----------------------------
> """
      pygments.formatter
      ~~~~~~~~~~~~~~~~~~
  
def _lookup_style(style):
class Formatter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\lexer.py
-----------------------------
> """
      pygments.lexer
      ~~~~~~~~~~~~~~
  
class LexerMeta(type):
class Lexer(metaclass=LexerMeta):
class DelegatingLexer(Lexer):
class include(str):  # pylint: disable=invalid-name
class _inherit:
class combined(tuple):  # pylint: disable=invalid-name
class _PseudoMatch:
def bygroups(*args):
class _This:
def using(_other, **kwargs):
class default:
class words(Future):
class RegexLexerMeta(LexerMeta):
class RegexLexer(Lexer, metaclass=RegexLexerMeta):
class LexerContext:
class ExtendedRegexLexer(RegexLexer):
def do_insertions(insertions, tokens):
class ProfilingRegexLexerMeta(RegexLexerMeta):
class ProfilingRegexLexer(RegexLexer, metaclass=ProfilingRegexLexerMeta):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\modeline.py
-----------------------------
> """
      pygments.modeline
      ~~~~~~~~~~~~~~~~~
  
def get_filetype_from_line(l): # noqa: E741
def get_filetype_from_buffer(buf, max_lines=5):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\plugin.py
-----------------------------
> """
      pygments.plugin
      ~~~~~~~~~~~~~~~
  
def iter_entry_points(group_name):
def find_plugin_lexers():
def find_plugin_formatters():
def find_plugin_styles():
def find_plugin_filters():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\regexopt.py
-----------------------------
> """
      pygments.regexopt
      ~~~~~~~~~~~~~~~~~
  
def make_charset(letters):
def regex_opt_inner(strings, open_paren):
def regex_opt(strings, prefix='', suffix=''):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\scanner.py
-----------------------------
> """
      pygments.scanner
      ~~~~~~~~~~~~~~~~
  
class EndOfText(RuntimeError):
class Scanner:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\sphinxext.py
-----------------------------
> """
      pygments.sphinxext
      ~~~~~~~~~~~~~~~~~~
  
class PygmentsDoc(Directive):
def setup(app):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\style.py
-----------------------------
> """
      pygments.style
      ~~~~~~~~~~~~~~
  
class StyleMeta(type):
class Style(metaclass=StyleMeta):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\token.py
-----------------------------
> """
      pygments.token
      ~~~~~~~~~~~~~~
  
class _TokenType(tuple):
def is_token_subtype(ttype, other):
def string_to_tokentype(s):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\unistring.py
-----------------------------
> """
      pygments.unistring
      ~~~~~~~~~~~~~~~~~~
  
def combine(*args):
def allexcept(*args):
def _handle_runs(char_list):  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\util.py
-----------------------------
> """
      pygments.util
      ~~~~~~~~~~~~~
  
class ClassNotFound(ValueError):
class OptionError(Exception):
def get_choice_opt(options, optname, allowed, default=None, normcase=False):
def get_bool_opt(options, optname, default=None):
def get_int_opt(options, optname, default=None):
def get_list_opt(options, optname, default=None):
def docstring_headline(obj):
def make_analysator(f):
def shebang_matches(text, regex):
def doctype_matches(text, regex):
def html_doctype_matches(text):
def looks_like_xml(text):
def surrogatepair(c):
def format_lines(var_name, seq, raw=False, indent_level=0):
def duplicates_removed(it, already_seen=()):
class Future:
def guess_decode(text):
def guess_decode_from_terminal(text, term):
def terminal_encoding(term):
class UnclosingTextIOWrapper(TextIOWrapper):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\__init__.py
-----------------------------
> """
      Pygments
      ~~~~~~~~
  
def lex(code, lexer):
def format(tokens, formatter, outfile=None):  # pylint: disable=redefined-builtin
def highlight(code, lexer, formatter, outfile=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pygments\__main__.py
-----------------------------
> """
      pygments.__main__
      ~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pytest\__init__.py
-----------------------------
> """pytest: unit and functional testing with Python."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\pytest\__main__.py
-----------------------------
> """The pytest entry point."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\alias.py
-----------------------------
>     """Quote an argument for later parsing by shlex.split()"""
      for c in '"', "'", "\\", "#":
          if c in arg:
              return repr(arg)
def shquote(arg):
class alias(option_base):
def format_alias(name, aliases):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\bdist_egg.py
-----------------------------
> """setuptools.command.bdist_egg
  
def _get_purelib():
def strip_module(filename):
def sorted_walk(dir):
def write_stub(resource, pyfile):
class bdist_egg(Command):
def walk_egg(egg_dir):
def analyze_egg(egg_dir, stubs):
def write_safety_flag(egg_dir, safe):
def scan_module(egg_dir, base, name, stubs):
def iter_symbols(code):
def can_scan():
def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=True,

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\bdist_rpm.py
-----------------------------
>     """
      Override the default bdist_rpm behavior to do the following:
  
      1. Run egg_info to ensure the name and version are properly calculated.
class bdist_rpm(orig.bdist_rpm):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\build.py
-----------------------------
>             msg = """
              It seems that you are using `distutils.command.build` to add
              new subcommands. Using `distutils` directly is considered deprecated,
              please use `setuptools.command.build`.
class build(_build):
class SubCommand(Protocol):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\build_clib.py
-----------------------------
>     """
      Override the default build_clib behaviour to do the following:
  
      1. Implement a rudimentary timestamp-based dependency system
class build_clib(orig.build_clib):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\build_ext.py
-----------------------------
>     """Return the file extension for an abi3-compliant Extension()"""
      for suffix in EXTENSION_SUFFIXES:
          if '.abi3' in suffix:  # Unix
              return suffix
def _customize_compiler_for_shlib(compiler):
def if_dl(s):
def get_abi3_suffix():
class build_ext(_build_ext):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\build_py.py
-----------------------------
>     """Enhanced 'build_py' command that includes data files with packages
  
      The data files are specified via a 'package_data' argument to 'setup()'.
      See 'setuptools.dist.Distribution' for more details.
def make_writable(target):
class build_py(orig.build_py):
def assert_relative(path):
class _IncludePackageDataAbuse:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\develop.py
-----------------------------
>     """Set up package for development"""
  
      description = "install package in 'development mode'"
  
class develop(namespaces.DevelopInstaller, easy_install):
class VersionlessRequirement:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\dist_info.py
-----------------------------
> """
  Create a dist_info directory
  As defined in the wheel specification
class dist_info(Command):
def _safe(component: str) -> str:
def _version(version: str) -> str:
def _rm(dir_name, **opts):
def _copy(src, dst, **opts):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\easy_install.py
-----------------------------
> """
  Easy Install
  ------------
  
def is_64bit():
def _to_bytes(s):
def isascii(s):
def _one_liner(text):
class easy_install(Command):
def _pythonpath():
def get_site_dirs():
def expand_paths(inputs):  # noqa: C901  # is too complex (11)  # FIXME
def extract_wininst_cfg(dist_filename):
def get_exe_prefixes(exe_filename):
class PthDistributions(Environment):
class RewritePthDistributions(PthDistributions):
def _first_line_re():
def auto_chmod(func, arg, exc):
def update_dist_caches(dist_path, fix_zipimporter_caches):
def _collect_zipimporter_cache_entries(normalized_path, cache):
def _update_zipimporter_cache(normalized_path, cache, updater=None):
def _uncache(normalized_path, cache):
def _remove_and_clear_zip_directory_cache_data(normalized_path):
def is_python(text, filename='<string>'):
def is_sh(executable):
def nt_quote_arg(arg):
def is_python_script(script_text, filename):
def chmod(path, mode):
class CommandSpec(list):
class WindowsCommandSpec(CommandSpec):
class ScriptWriter:
class WindowsScriptWriter(ScriptWriter):
class WindowsExecutableLauncherWriter(WindowsScriptWriter):
def get_win_launcher(type):
def load_launcher_manifest(name):
def rmtree(path, ignore_errors=False, onerror=auto_chmod):
def current_umask():
def only_strs(values):
class EasyInstallDeprecationWarning(SetuptoolsDeprecationWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\editable_wheel.py
-----------------------------
> """
  Create a wheel that, when installed, will make the source package 'editable'
  (add it to the interpreter's path, including metadata) per PEP 660. Replaces
  'setup.py develop'.
class _EditableMode(Enum):
class editable_wheel(Command):
class EditableStrategy(Protocol):
class _StaticPth:
class _LinkTree(_StaticPth):
class _TopLevelFinder:
def _can_symlink_files(base_dir: Path) -> bool:
def _simple_layout(
def _parent_path(pkg, pkg_path):
def _find_packages(dist: Distribution) -> Iterator[str]:
def _find_top_level_modules(dist: Distribution) -> Iterator[str]:
def _find_package_roots(
def _absolute_root(path: _Path) -> str:
def _find_virtual_namespaces(pkg_roots: Dict[str, str]) -> Iterator[str]:
def _find_namespaces(
def _remove_nested(pkg_roots: Dict[str, str]) -> Dict[str, str]:
def _is_nested(pkg: str, pkg_path: str, parent: str, parent_path: str) -> bool:
def _normalize_path(filename: _Path) -> str:
def _empty_dir(dir_: _P) -> _P:
def _make_identifier(name: str) -> str:
class _NamespaceInstaller(namespaces.Installer):
class _EditableFinder:  # MetaPathFinder
class _EditableNamespaceFinder:  # PathEntryFinder
def install():
def _finder_template(
class InformationOnly(UserWarning):
class LinksNotSupported(errors.FileError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\egg_info.py
-----------------------------
> """setuptools.command.egg_info
  
def translate_pattern(glob):  # noqa: C901  # is too complex (14)  # FIXME
class InfoCommon:
class egg_info(InfoCommon, Command):
class FileList(_FileList):
class manifest_maker(sdist):
def write_file(filename, contents):
def write_pkg_info(cmd, basename, filename):
def warn_depends_obsolete(cmd, basename, filename):
def _write_requirements(stream, reqs):
def write_requirements(cmd, basename, filename):
def write_setup_requirements(cmd, basename, filename):
def write_toplevel_names(cmd, basename, filename):
def overwrite_arg(cmd, basename, filename):
def write_arg(cmd, basename, filename, force=False):
def write_entries(cmd, basename, filename):
def get_pkg_info_revision():
class EggInfoDeprecationWarning(SetuptoolsDeprecationWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\install.py
-----------------------------
>     """Use easy_install to install the package, w/dependencies"""
  
      user_options = orig.install.user_options + [
          ('old-and-unmanageable', None, "Try not to use this!"),
class install(orig.install):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\install_egg_info.py
-----------------------------
>     """Install an .egg-info directory for the package"""
  
      description = "Install an .egg-info directory for the package"
  
class install_egg_info(namespaces.Installer, Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\install_lib.py
-----------------------------
>     """Don't add compiled flags to filenames of non-Python files"""
  
      def run(self):
          self.build()
class install_lib(orig.install_lib):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\install_scripts.py
-----------------------------
>     """Do normal script install, plus any egg_info wrapper scripts"""
  
      def initialize_options(self):
          orig.install_scripts.initialize_options(self)
class install_scripts(orig.install_scripts):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\py36compat.py
-----------------------------
>     """
      Mix-in providing forward-compatibility for functionality as found in
      distutils on Python 3.7.
  
class sdist_add_defaults:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\register.py
-----------------------------
>     """Formerly used to register packages on PyPI."""
  
      def run(self):
          msg = (
class register(orig.register):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\rotate.py
-----------------------------
>     """Delete older distributions"""
  
      description = "delete older distributions, keeping N newest files"
      user_options = [
class rotate(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\saveopts.py
-----------------------------
>     """Save command-line options to a file"""
  
      description = "save supplied options to setup.cfg or other config file"
  
class saveopts(option_base):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\sdist.py
-----------------------------
>     """Find all files under revision control"""
      for ep in metadata.entry_points(group='setuptools.file_finders'):
          for item in ep.load()(dirname):
              yield item
def walk_revctrl(dirname=''):
class sdist(sdist_add_defaults, orig.sdist):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\setopt.py
-----------------------------
>     """Get the filename of the distutils, local, global, or per-user config
  
      `kind` must be one of "local", "global", or "user"
def config_file(kind="local"):
def edit_config(filename, settings, dry_run=False):
class option_base(Command):
class setopt(option_base):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\test.py
-----------------------------
>         """Return a suite of all tests cases contained in the given module
  
          If the module is a package, load tests from all the modules in it.
          If the module has an ``additional_tests`` function, call it and add
class ScanningLoader(TestLoader):
class NonDataProperty:
class test(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\upload.py
-----------------------------
>     """Formerly used to upload packages to PyPI."""
  
      def run(self):
          msg = (
class upload(orig.upload):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\upload_docs.py
-----------------------------
> """upload_docs
  
  Implements a Distutils 'upload_docs' subcommand (upload documentation to
  sites other than PyPi such as devpi).
def _encode(s):
class upload_docs(upload):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\command\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py
-----------------------------
>     """Report violations of a given JSON schema.
  
      This class extends :exc:`~fastjsonschema.JsonSchemaValueException`
      by adding the following properties:
class ValidationError(JsonSchemaValueException):
def detailed_errors():
class _ErrorFormatting:
class _SummaryWriter:
def _separate_terms(word: str) -> List[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_validate_pyproject\extra_validations.py
-----------------------------
> """The purpose of this module is implement PEP 621 validations that are
  difficult to express as a JSON Schema (or that are not supported by the current
  JSON Schema library).
class RedefiningStaticFieldAsDynamic(ValidationError):
def validate_project_dynamic(pyproject: T) -> T:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_validate_pyproject\fastjsonschema_exceptions.py
-----------------------------
>     """
      Base exception of ``fastjsonschema`` library.
class JsonSchemaException(ValueError):
class JsonSchemaValueException(JsonSchemaException):
class JsonSchemaDefinitionException(JsonSchemaException):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_validate_pyproject\fastjsonschema_validations.py
-----------------------------
def validate(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_build_dependencies(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_file_directive(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_attr_directive(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_find_directive(data, custom_formats={}, name_prefix=None):
def validate_https___docs_python_org_3_install(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_dependency(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_entry_point_group(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_author(data, custom_formats={}, name_prefix=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py
-----------------------------
> VERSION_PATTERN = r"""
      v?
      (?:
          (?:(?P<epoch>[0-9]+)!)?                           # epoch
def pep440(version: str) -> bool:
def pep508_identifier(name: str) -> bool:
def pep508_versionspec(value: str) -> bool:
def pep517_backend_reference(value: str) -> bool:
def _download_classifiers() -> str:
class _TroveClassifier:
def url(value: str) -> bool:
def python_identifier(value: str) -> bool:
def python_qualified_identifier(value: str) -> bool:
def python_module_name(value: str) -> bool:
def python_entrypoint_group(value: str) -> bool:
def python_entrypoint_name(value: str) -> bool:
def python_entrypoint_reference(value: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_validate_pyproject\__init__.py
-----------------------------
>     """Validate the given ``data`` object using JSON Schema
      This function raises ``ValidationError`` if ``data`` is invalid.
def validate(data: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\expand.py
-----------------------------
> """Utility functions to expand configuration directives or special values
  (such glob patterns).
  
  We can split the process of interpreting configuration files into 2 steps:
class StaticModule:
def glob_relative(
def read_files(filepaths: Union[str, bytes, Iterable[_Path]], root_dir=None) -> str:
def _filter_existing_files(filepaths: Iterable[_Path]) -> Iterator[_Path]:
def _read_file(filepath: Union[bytes, _Path]) -> str:
def _assert_local(filepath: _Path, root_dir: str):
def read_attr(
def _find_spec(module_name: str, module_path: Optional[_Path]) -> ModuleSpec:
def _load_spec(spec: ModuleSpec, module_name: str) -> ModuleType:
def _find_module(
def resolve_class(
def cmdclass(
def find_packages(
def _nest_path(parent: _Path, path: _Path) -> str:
def version(value: Union[Callable, Iterable[Union[str, int]], str]) -> str:
def canonic_package_data(package_data: dict) -> dict:
def canonic_data_files(
def entry_points(text: str, text_source="entry-points") -> Dict[str, dict]:
class EnsurePackagesDiscovered:
class LazyMappingProxy(Mapping[_K, _V]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\pyprojecttoml.py
-----------------------------
> """
  Load setuptools configuration from ``pyproject.toml`` files.
  
  **PRIVATE MODULE**: API reserved for setuptools internal usage only.
def load_file(filepath: _Path) -> dict:
def validate(config: dict, filepath: _Path) -> bool:
def apply_configuration(
def read_configuration(
def _skip_bad_config(
def expand_configuration(
class _ConfigExpander:
def _parse_requirements_list(value):
def _ignore_errors(ignore_option_errors: bool):
class _EnsurePackagesDiscovered(_expand.EnsurePackagesDiscovered):
class _BetaConfiguration(UserWarning):
class _InvalidFile(UserWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\setupcfg.py
-----------------------------
> """
  Load setuptools configuration from ``setup.cfg`` files.
  
  **API will be made private in the future**
def read_configuration(
def apply_configuration(dist: "Distribution", filepath: _Path) -> "Distribution":
def _apply(
def _get_option(target_obj: Target, key: str):
def configuration_to_dict(handlers: Tuple["ConfigHandler", ...]) -> dict:
def parse_configuration(
def _warn_accidental_env_marker_misconfig(label: str, orig_value: str, parsed: list):
class ConfigHandler(Generic[Target]):
class ConfigMetadataHandler(ConfigHandler["DistributionMetadata"]):
class ConfigOptionsHandler(ConfigHandler["Distribution"]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py
-----------------------------
> """Translation layer between pyproject config and setuptools distribution and
  metadata objects.
  
  The distribution and metadata objects are modeled after (an old version of)
def apply(dist: "Distribution", config: dict, filename: _Path) -> "Distribution":
def _apply_project_table(dist: "Distribution", config: dict, root_dir: _Path):
def _apply_tool_table(dist: "Distribution", config: dict, filename: _Path):
def _handle_missing_dynamic(dist: "Distribution", project_table: dict):
def json_compatible_key(key: str) -> str:
def _set_config(dist: "Distribution", field: str, value: Any):
def _guess_content_type(file: str) -> Optional[str]:
def _long_description(dist: "Distribution", val: _DictOrStr, root_dir: _Path):
def _license(dist: "Distribution", val: dict, root_dir: _Path):
def _people(dist: "Distribution", val: List[dict], _root_dir: _Path, kind: str):
def _project_urls(dist: "Distribution", val: dict, _root_dir):
def _python_requires(dist: "Distribution", val: dict, _root_dir):
def _dependencies(dist: "Distribution", val: list, _root_dir):
def _optional_dependencies(dist: "Distribution", val: dict, _root_dir):
def _unify_entry_points(project_table: dict):
def _copy_command_options(pyproject: dict, dist: "Distribution", filename: _Path):
def _valid_command_options(cmdclass: Mapping = EMPTY) -> Dict[str, Set[str]]:
def _load_ep(ep: "metadata.EntryPoint") -> Optional[Tuple[str, Type]]:
def _normalise_cmd_option_key(name: str) -> str:
def _normalise_cmd_options(desc: List[Tuple[str, Optional[str], str]]) -> Set[str]:
def _attrgetter(attr):
def _some_attrgetter(*items):
class _WouldIgnoreField(UserWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\config\__init__.py
-----------------------------
> """For backward compatibility, expose main functions from
  ``setuptools.config.setupcfg``
def _deprecation_notice(fn: Fn) -> Fn:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\extern\__init__.py
-----------------------------
>     """
      A PEP 302 meta path importer for finding optionally-vendored
      or otherwise naturally-installed packages from root_name.
class VendorImporter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\bdist.py
-----------------------------
> """distutils.command.bdist
  
  Implements the Distutils 'bdist' command (create a built [binary]
def show_formats():
class ListCompat(dict):
class bdist(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\bdist_dumb.py
-----------------------------
> """distutils.command.bdist_dumb
  
  Implements the Distutils 'bdist_dumb' command (create a "dumb" built
  distribution -- i.e., just an archive to be unpacked under $prefix or
class bdist_dumb(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py
-----------------------------
> """distutils.command.bdist_rpm
  
  Implements the Distutils 'bdist_rpm' command (create RPM source and binary
class bdist_rpm(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\build.py
-----------------------------
> """distutils.command.build
  
def show_compilers():
class build(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\build_clib.py
-----------------------------
> """distutils.command.build_clib
  
  Implements the Distutils 'build_clib' command, to build a C/C++ library
  that is included in the module distribution and needed by an extension
def show_compilers():
class build_clib(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\build_ext.py
-----------------------------
> """distutils.command.build_ext
  
  Implements the Distutils 'build_ext' command, for building extension
  modules (currently limited to C extensions, should accommodate C++
def show_compilers():
class build_ext(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\build_py.py
-----------------------------
> """distutils.command.build_py
  
class build_py(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py
-----------------------------
> """distutils.command.build_scripts
  
class build_scripts(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\check.py
-----------------------------
> """distutils.command.check
  
  Implements the Distutils 'check' command.
class check(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\clean.py
-----------------------------
> """distutils.command.clean
  
class clean(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\config.py
-----------------------------
> """distutils.command.config
  
  Implements the Distutils 'config' command, a (mostly) empty command class
  that exists mainly to be sub-classed by specific module distributions and
class config(Command):
def dump_file(filename, head=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\install.py
-----------------------------
> """distutils.command.install
  
def _load_sysconfig_schemes():
def _load_schemes():
def _get_implementation():
def _select_scheme(ob, name):
def _remove_set(ob, attrs):
def _resolve_scheme(name):
def _load_scheme(name):
def _inject_headers(name, scheme):
def _scheme_attrs(scheme):
def _pypy_hack(name):
class install(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\install_data.py
-----------------------------
> """distutils.command.install_data
  
  Implements the Distutils 'install_data' command, for installing
class install_data(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py
-----------------------------
> """
  distutils.command.install_egg_info
  
  Implements the Distutils 'install_egg_info' command, for installing
class install_egg_info(Command):
def safe_name(name):
def safe_version(version):
def to_filename(name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\install_headers.py
-----------------------------
> """distutils.command.install_headers
  
  Implements the Distutils 'install_headers' command, to install C/C++ header
class install_headers(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\install_lib.py
-----------------------------
> """distutils.command.install_lib
  
  Implements the Distutils 'install_lib' command
class install_lib(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\install_scripts.py
-----------------------------
> """distutils.command.install_scripts
  
  Implements the Distutils 'install_scripts' command, for installing
class install_scripts(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\py37compat.py
-----------------------------
>     """
      On Python 3.7 and earlier, distutils would include the Python
      library. See pypa/distutils#9.
def _pythonlib_compat():
def compose(f1, f2):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\register.py
-----------------------------
> """distutils.command.register
  
  Implements the Distutils 'register' command (register with the repository).
class register(PyPIRCCommand):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\sdist.py
-----------------------------
> """distutils.command.sdist
  
def show_formats():
class sdist(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\upload.py
-----------------------------
> """
  distutils.command.upload
  
  Implements the Distutils 'upload' subcommand (upload package to a package
class upload(PyPIRCCommand):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\_framework_compat.py
-----------------------------
> """
  Backward compatibility for homebrew builds on macOS.
def enabled():
def vars():
def scheme(name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\command\__init__.py
-----------------------------
> """distutils.command
  
  Package containing implementation of all the standard Distutils

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\archive_util.py
-----------------------------
> """distutils.archive_util
  
  Utility functions for creating archive files (tarballs, zip files,
def _get_gid(name):
def _get_uid(name):
def make_tarball(
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):  # noqa: C901
def check_archive_formats(formats):
def make_archive(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py
-----------------------------
> """distutils.bcppcompiler
  
  Contains BorlandCCompiler, an implementation of the abstract CCompiler class
  for the Borland C++ compiler.
class BCPPCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\ccompiler.py
-----------------------------
> """distutils.ccompiler
  
  Contains CCompiler, an abstract base class that defines the interface
class CCompiler:
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\cmd.py
-----------------------------
> """distutils.cmd
  
  Provides the Command class, the base class for the command classes
  in the distutils.command package.
class Command:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\config.py
-----------------------------
> """distutils.pypirc
  
  Provides the PyPIRCCommand class, the base class for the command classes
  that uses .pypirc in the distutils.command package.
class PyPIRCCommand(Command):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\core.py
-----------------------------
> """distutils.core
  
  The only module that needs to be imported to use the Distutils; provides
  the 'setup' function (which is to be called from the setup script).  Also
def gen_usage(script_name):
def setup(**attrs):  # noqa: C901
def run_commands(dist):
def run_setup(script_name, script_args=None, stop_after="run"):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py
-----------------------------
> """distutils.cygwinccompiler
  
  Provides the CygwinCCompiler class, a subclass of UnixCCompiler that
  handles the Cygwin port of the GNU C compiler to Windows.  It also contains
def get_msvcr():
class CygwinCCompiler(UnixCCompiler):
class Mingw32CCompiler(CygwinCCompiler):
def check_config_h():
def is_cygwincc(cc):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\debug.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\dep_util.py
-----------------------------
> """distutils.dep_util
  
  Utility functions for simple, timestamp-based dependency of files
  and groups of files; also, function based entirely on such
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\dir_util.py
-----------------------------
> """distutils.dir_util
  
def mkpath(name, mode=0o777, verbose=1, dry_run=0):  # noqa: C901
def create_tree(base_dir, files, mode=0o777, verbose=1, dry_run=0):
def copy_tree(  # noqa: C901
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\dist.py
-----------------------------
> """distutils.dist
  
  Provides the Distribution class, which represents the module distribution
  being built/installed/distributed.
def _ensure_list(value, fieldname):
class Distribution:
class DistributionMetadata:
def fix_help_options(options):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\errors.py
-----------------------------
> """distutils.errors
  
  Provides exceptions used by the Distutils modules.  Note that Distutils
  modules may raise standard exceptions; in particular, SystemExit is
class DistutilsError(Exception):
class DistutilsModuleError(DistutilsError):
class DistutilsClassError(DistutilsError):
class DistutilsGetoptError(DistutilsError):
class DistutilsArgError(DistutilsError):
class DistutilsFileError(DistutilsError):
class DistutilsOptionError(DistutilsError):
class DistutilsSetupError(DistutilsError):
class DistutilsPlatformError(DistutilsError):
class DistutilsExecError(DistutilsError):
class DistutilsInternalError(DistutilsError):
class DistutilsTemplateError(DistutilsError):
class DistutilsByteCompileError(DistutilsError):
class CCompilerError(Exception):
class PreprocessError(CCompilerError):
class CompileError(CCompilerError):
class LibError(CCompilerError):
class LinkError(CCompilerError):
class UnknownFileError(CCompilerError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\extension.py
-----------------------------
> """distutils.extension
  
  Provides the Extension class, used to describe C/C++ extension
class Extension:
def read_setup_file(filename):  # noqa: C901

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\fancy_getopt.py
-----------------------------
> """distutils.fancy_getopt
  
  Wrapper around the standard getopt module that provides the following
  additional features:
class FancyGetopt:
def fancy_getopt(options, negative_opt, object, args):
def wrap_text(text, width):
def translate_longopt(opt):
class OptionDummy:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\filelist.py
-----------------------------
> """distutils.filelist
  
  Provides the FileList class, used for poking about the filesystem
  and building lists of files.
class FileList:
def _find_all_simple(path):
class _UniqueDirs(set):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\file_util.py
-----------------------------
> """distutils.file_util
  
  Utility functions for operating on single files.
def _copy_file_contents(src, dst, buffer_size=16 * 1024):  # noqa: C901
def copy_file(  # noqa: C901
def move_file(src, dst, verbose=1, dry_run=0):  # noqa: C901
def write_file(filename, contents):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\log.py
-----------------------------
> """A simple log mechanism styled after PEP 282."""
  
  # The class here is styled after PEP 282 so that it could later be
  # replaced with a standard Python logging implementation.
class Log:
def set_threshold(level):
def set_verbosity(v):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py
-----------------------------
> """distutils.msvc9compiler
  
  Contains MSVCCompiler, an implementation of the abstract CCompiler class
  for the Microsoft Visual Studio 2008.
class Reg:
class MacroExpander:
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch="x86"):
class MSVCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\msvccompiler.py
-----------------------------
> """distutils.msvccompiler
  
  Contains MSVCCompiler, an implementation of the abstract CCompiler class
  for the Microsoft Visual Studio.
def read_keys(base, key):
def read_values(base, key):
def convert_mbcs(s):
class MacroExpander:
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
class MSVCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\py38compat.py
-----------------------------
def aix_platform(osname, version, release):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\py39compat.py
-----------------------------
>     """
      Ensure vars contains 'EXT_SUFFIX'. pypa/distutils#130
def add_ext_suffix_39(vars):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\spawn.py
-----------------------------
> """distutils.spawn
  
  Provides the 'spawn()' function, a front-end to various platform-
  specific functions for launching another program in a sub-process.
def spawn(cmd, search_path=1, verbose=0, dry_run=0, env=None):  # noqa: C901
def find_executable(executable, path=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\sysconfig.py
-----------------------------
> """Provide access to Python's configuration information.  The specific
  configuration variables available depend heavily on the platform and
  configuration.  The values may be retrieved using
  get_config_var(name), and the list of variables is available via
def _is_python_source_dir(d):
def _is_parent(dir_a, dir_b):
def _python_build():
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def _get_python_inc_posix(prefix, spec_prefix, plat_specific):
def _get_python_inc_posix_python(plat_specific):
def _get_python_inc_from_config(plat_specific, spec_prefix):
def _get_python_inc_posix_prefix(prefix):
def _get_python_inc_nt(prefix, spec_prefix, plat_specific):
def _posix_lib(standard_lib, libpython, early_prefix, prefix):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):  # noqa: C901
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):  # noqa: C901
def expand_makefile_vars(s, vars):
def get_config_vars(*args):
def get_config_var(name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\text_file.py
-----------------------------
> """text_file
  
  provides the TextFile class, which gives an interface to text files
  that (optionally) takes care of stripping comments, ignoring blank
class TextFile:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\unixccompiler.py
-----------------------------
> """distutils.unixccompiler
  
  Contains the UnixCCompiler class, a subclass of CCompiler that handles
  the "typical" Unix-style command-line C compiler:
def _split_env(cmd):
def _split_aix(cmd):
def _linker_params(linker_cmd, compiler_cmd):
class UnixCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\util.py
-----------------------------
> """distutils.util
  
  Miscellaneous utility functions -- anything that doesn't fit into
  one of the other *util.py modules.
def get_host_platform():
def get_platform():
def _clear_cached_macosx_ver():
def get_macosx_target_ver_from_syscfg():
def get_macosx_target_ver():
def split_version(s):
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def _subst_compat(s):
def grok_environment_error(exc, prefix="error: "):
def _init_regex():
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(  # noqa: C901
def rfc822_escape(header):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\version.py
-----------------------------
> """Provides classes to represent module version numbers (one class for
  each style of version numbering).  There are currently two such classes
  implemented: StrictVersion and LooseVersion.
  
def suppress_known_deprecation():
class Version:
class StrictVersion(Version):
class LooseVersion(Version):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\versionpredicate.py
-----------------------------
> """Module for parsing and testing package version predicate strings.
def splitUp(pred):
class VersionPredicate:
def split_provision(value):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\_collections.py
-----------------------------
>     """
      A stack of dictionaries that behaves as a view on those dictionaries,
      giving preference to the last.
  
class DictStack(list, collections.abc.Mapping):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\_functools.py
-----------------------------
>     """
      Wrap func so it's not called if its first param is None
  
      >>> print_text = pass_none(print)
def pass_none(func):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\_macos_compat.py
-----------------------------
def bypass_compiler_fixup(cmd, args):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py
-----------------------------
> """distutils._msvccompiler
  
  Contains MSVCCompiler, an implementation of the abstract CCompiler class
  for Microsoft Visual Studio 2015.
def _find_vc2015():
def _find_vc2017():
def _find_vcvarsall(plat_spec):
def _get_vc_env(plat_spec):
def _find_exe(exe, paths=None):
class MSVCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_distutils\__init__.py
-----------------------------
> """distutils
  
  The main package for the Python Module Distribution Utilities.  Normally
  used from a setup script as

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_adapters.py
-----------------------------
>     """
      Keys that may be indicated multiple times per PEP 566.
class Message(email.message.Message):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_collections.py
-----------------------------
>     """
      Often it is desirable to prevent the mutation of
      a default dict after its initial construction, such
      as to prevent mutation during iteration.
class FreezableDefaultDict(collections.defaultdict):
class Pair(collections.namedtuple('Pair', 'name value')):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_compat.py
-----------------------------
>     """
      Class decorator for installation on sys.meta_path.
  
      Adds the backport DistributionFinder to sys.meta_path and
def install(cls):
def disable_stdlib_finder():
class NullFinder:
def pypy_partial(val):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_functools.py
-----------------------------
>     """
      Wrap lru_cache to support storing the cache data in the object instances.
  
      Abstracts the common paradigm where the method explicitly saves an
def method_cache(method, cache_wrapper=None):
def pass_none(func):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_itertools.py
-----------------------------
>     """If *obj* is iterable, return an iterator over its items::
  
          >>> obj = (1, 2, 3)
          >>> list(always_iterable(obj))
def unique_everseen(iterable, key=None):
def always_iterable(obj, base_type=(str, bytes)):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_meta.py
-----------------------------
>         """
          Return all values associated with a possibly multi-valued key.
class PackageMetadata(Protocol):
class SimplePath(Protocol):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_text.py
-----------------------------
>     """
      A case insensitive string class; behaves just like str
      except compares equal when the only variation is case.
  
class FoldedCase(str):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_metadata\__init__.py
-----------------------------
>     """The package was not found."""
  
      def __str__(self):
          return f"No package metadata was found for {self.name}"
class PackageNotFoundError(ModuleNotFoundError):
class Sectioned:
class DeprecatedTuple:
class EntryPoint(DeprecatedTuple):
class DeprecatedList(list):
class EntryPoints(DeprecatedList):
class Deprecated:
class SelectableGroups(Deprecated, dict):
class PackagePath(pathlib.PurePosixPath):
class FileHash:
class Distribution:
class DistributionFinder(MetaPathFinder):
class FastPath:
class Lookup:
class Prepared:
class MetadataPathFinder(NullFinder, DistributionFinder):
class PathDistribution(Distribution):
def distribution(distribution_name):
def distributions(**kwargs):
def metadata(distribution_name) -> _meta.PackageMetadata:
def version(distribution_name):
def entry_points(**params) -> Union[EntryPoints, SelectableGroups]:
def files(distribution_name):
def requires(distribution_name):
def packages_distributions() -> Mapping[str, List[str]]:
def _top_level_declared(dist):
def _top_level_inferred(dist):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\abc.py
-----------------------------
>     """Abstract base class for loaders to provide resource reading support."""
  
      @abc.abstractmethod
      def open_resource(self, resource: Text) -> BinaryIO:
class ResourceReader(metaclass=abc.ABCMeta):
class Traversable(Protocol):
class TraversableResources(ResourceReader):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\readers.py
-----------------------------
>         """
          Return the file system path to prevent
          `resources.path()` from creating a temporary
          copy.
def remove_duplicates(items):
class FileReader(abc.TraversableResources):
class ZipReader(abc.TraversableResources):
class MultiplexedPath(abc.Traversable):
class NamespaceReader(abc.TraversableResources):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\simple.py
-----------------------------
> """
  Interface adapters for low-level readers.
class SimpleReader(abc.ABC):
class ResourceHandle(Traversable):
class ResourceContainer(Traversable):
class TraversableReader(TraversableResources, SimpleReader):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\_adapters.py
-----------------------------
>     """
      Adapt a package spec to adapt the underlying loader.
class SpecLoaderAdapter:
class TraversableResourcesLoader:
def _io_wrapper(file, mode='r', *args, **kwargs):
class CompatibilityFiles:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\_common.py
-----------------------------
>     """
      Get a Traversable resource from a package
def files(package):
def get_resource_reader(package):
def resolve(cand):
def get_package(package):
def from_package(package):
def _tempfile(reader, suffix=''):
def as_file(path):
def _(path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\_compat.py
-----------------------------
>     """
      Adapt loaders to provide TraversableResources and other
      compatibility.
  
class TraversableResourcesLoader:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\_itertools.py
-----------------------------
def unique_everseen(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\_legacy.py
-----------------------------
>     """Normalize a path by ensuring it is a string.
  
      If the resulting string contains path separators, an exception is raised.
def deprecated(func):
def normalize_path(path):
def open_binary(package: Package, resource: Resource) -> BinaryIO:
def read_binary(package: Package, resource: Resource) -> bytes:
def open_text(
def read_text(
def contents(package: Package) -> Iterable[str]:
def is_resource(package: Package, name: str) -> bool:
def path(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\importlib_resources\__init__.py
-----------------------------
> """Read resources contained within a package."""
  
  from ._common import (
      as_file,

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\jaraco\text\__init__.py
-----------------------------
>     """
      Return a function that will perform a substitution on a string
def substitution(old, new):
def multi_substitution(*substitutions):
class FoldedCase(str):
def is_decodable(value):
def is_binary(value):
def trim(s):
def wrap(s):
def unwrap(s):
class Splitter(object):
def indent(string, prefix=' ' * 4):
class WordSet(tuple):
def simple_html_strip(s):
class SeparatedValues(str):
class Stripper:
def remove_prefix(text, prefix):
def remove_suffix(text, suffix):
def normalize_newlines(text):
def _nonblank(str):
def yield_lines(iterable):
def _(text):
def drop_comment(line):
def join_continuation(lines):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\jaraco\context.py
-----------------------------
>     """
      Get a tarball, extract it, change to that directory, yield, then
      clean up.
      `runner` is the function to invoke commands.
def pushd(dir):
def tarball_context(url, target_dir=None, runner=None, pushd=pushd):
def infer_compression(url):
def temp_dir(remover=shutil.rmtree):
def repo_context(url, branch=None, quiet=True, dest_ctx=temp_dir):
def null():
class ExceptionTrap:
class suppress(contextlib.suppress, contextlib.ContextDecorator):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\jaraco\functools.py
-----------------------------
>     """
      Compose any number of unary functions into a single unary function.
  
      >>> import textwrap
def compose(*funcs):
def method_caller(method_name, *args, **kwargs):
def once(func):
def method_cache(
def _special_method_cache(method, cache_wrapper):
def apply(transform):
def result_invoke(action):
def call_aside(f, *args, **kwargs):
class Throttler:
def first_invoke(func1, func2):
def retry_call(func, cleanup=lambda: None, retries=0, trap=()):
def retry(*r_args, **r_kwargs):
def print_yielded(func):
def pass_none(func):
def assign_params(func, namespace):
def save_method_args(method):
def except_(*exceptions, replace=None, use=None):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\jaraco\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py
-----------------------------
>     """Break *iterable* into lists of length *n*:
  
          >>> list(chunked([1, 2, 3, 4, 5, 6], 3))
          [[1, 2, 3], [4, 5, 6]]
def chunked(iterable, n, strict=False):
def first(iterable, default=_marker):
def last(iterable, default=_marker):
def nth_or_last(iterable, n, default=_marker):
class peekable:
def collate(*iterables, **kwargs):
def consumer(func):
def ilen(iterable):
def iterate(func, start):
def with_iter(context_manager):
def one(iterable, too_short=None, too_long=None):
def distinct_permutations(iterable, r=None):
def intersperse(e, iterable, n=1):
def unique_to_each(*iterables):
def windowed(seq, n, fillvalue=None, step=1):
def substrings(iterable):
def substrings_indexes(seq, reverse=False):
class bucket:
def spy(iterable, n=1):
def interleave(*iterables):
def interleave_longest(*iterables):
def collapse(iterable, base_type=None, levels=None):
def side_effect(func, iterable, chunk_size=None, before=None, after=None):
def sliced(seq, n, strict=False):
def split_at(iterable, pred, maxsplit=-1, keep_separator=False):
def split_before(iterable, pred, maxsplit=-1):
def split_after(iterable, pred, maxsplit=-1):
def split_when(iterable, pred, maxsplit=-1):
def split_into(iterable, sizes):
def padded(iterable, fillvalue=None, n=None, next_multiple=False):
def repeat_last(iterable, default=None):
def distribute(n, iterable):
def stagger(iterable, offsets=(-1, 0, 1), longest=False, fillvalue=None):
class UnequalIterablesError(ValueError):
def _zip_equal_generator(iterables):
def zip_equal(*iterables):
def zip_offset(*iterables, offsets, longest=False, fillvalue=None):
def sort_together(iterables, key_list=(0,), key=None, reverse=False):
def unzip(iterable):
def divide(n, iterable):
def always_iterable(obj, base_type=(str, bytes)):
def adjacent(predicate, iterable, distance=1):
def groupby_transform(iterable, keyfunc=None, valuefunc=None, reducefunc=None):
class numeric_range(abc.Sequence, abc.Hashable):
def count_cycle(iterable, n=None):
def mark_ends(iterable):
def locate(iterable, pred=bool, window_size=None):
def lstrip(iterable, pred):
def rstrip(iterable, pred):
def strip(iterable, pred):
class islice_extended:
def _islice_helper(it, s):
def always_reversible(iterable):
def consecutive_groups(iterable, ordering=lambda x: x):
def difference(iterable, func=sub, *, initial=None):
class SequenceView(Sequence):
class seekable:
class run_length:
def exactly_n(iterable, n, predicate=bool):
def circular_shifts(iterable):
def make_decorator(wrapping_func, result_index=0):
def map_reduce(iterable, keyfunc, valuefunc=None, reducefunc=None):
def rlocate(iterable, pred=bool, window_size=None):
def replace(iterable, pred, substitutes, count=None, window_size=1):
def partitions(iterable):
def set_partitions(iterable, k=None):
class time_limited:
def only(iterable, default=None, too_long=None):
def ichunked(iterable, n):
def distinct_combinations(iterable, r):
def filter_except(validator, iterable, *exceptions):
def map_except(function, iterable, *exceptions):
def _sample_unweighted(iterable, k):
def _sample_weighted(iterable, k, weights):
def sample(iterable, k, weights=None):
def is_sorted(iterable, key=None, reverse=False):
class AbortThread(BaseException):
class callback_iter:
def windowed_complete(iterable, n):
def all_unique(iterable, key=None):
def nth_product(index, *args):
def nth_permutation(iterable, r, index):
def value_chain(*args):
def product_index(element, *args):
def combination_index(element, iterable):
def permutation_index(element, iterable):
class countable:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\more_itertools\recipes.py
-----------------------------
> """Imported from the recipes section of the itertools documentation.
  
  All functions taken from the recipes section of the itertools library docs
  [1]_.
def take(n, iterable):
def tabulate(function, start=0):
def tail(n, iterable):
def consume(iterator, n=None):
def nth(iterable, n, default=None):
def all_equal(iterable):
def quantify(iterable, pred=bool):
def pad_none(iterable):
def ncycles(iterable, n):
def dotproduct(vec1, vec2):
def flatten(listOfLists):
def repeatfunc(func, times=None, *args):
def _pairwise(iterable):
def grouper(iterable, n, fillvalue=None):
def roundrobin(*iterables):
def partition(pred, iterable):
def powerset(iterable):
def unique_everseen(iterable, key=None):
def unique_justseen(iterable, key=None):
def iter_except(func, exception, first=None):
def first_true(iterable, default=None, pred=None):
def random_product(*args, repeat=1):
def random_permutation(iterable, r=None):
def random_combination(iterable, r):
def random_combination_with_replacement(iterable, r):
def nth_combination(iterable, r, index):
def prepend(value, iterator):
def convolve(signal, kernel):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\more_itertools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
def _coerce_parse_result(results: Union[ParseResults, List[Any]]) -> List[Any]:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str) -> bool:
class Undefined:
def _get_env(environment: Dict[str, str], name: str) -> str:
def _evaluate_markers(markers: List[Any], environment: Dict[str, str]) -> bool:
def format_full_version(info: "sys._version_info") -> str:
def default_environment() -> Dict[str, str]:
class Marker:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\specifiers.py
-----------------------------
>     """
      An invalid specifier was found, users should refer to PEP 440.
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class _IndividualSpecifier(BaseSpecifier):
class LegacySpecifier(_IndividualSpecifier):
def _require_version_compare(
class Specifier(_IndividualSpecifier):
def _version_split(version: str) -> List[str]:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: List[str], right: List[str]) -> Tuple[List[str], List[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> FrozenSet[Tag]:
def _get_config_var(name: str, warn: bool = False) -> Union[int, str, None]:
def _normalize_string(string: str) -> str:
def _abi3_applies(python_version: PythonVersion) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> List[str]:
def cpython_tags(
def _generic_abi() -> Iterator[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: MacVersion, cpu_arch: str) -> List[str]:
def mac_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\utils.py
-----------------------------
>     """
      An invalid wheel filename was found, users should refer to PEP 427.
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str) -> NormalizedName:
def canonicalize_version(version: Union[Version, str]) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> Tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\version.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
def parse(version: str) -> Union["LegacyVersion", "Version"]:
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s: str) -> Iterator[str]:
def _legacy_cmpkey(version: str) -> LegacyCmpKey:
class Version(_BaseVersion):
def _parse_letter_version(
def _parse_local_version(local: str) -> Optional[LocalType]:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\_manylinux.py
-----------------------------
>         """
          An invalid ELF file header was found.
class _ELFFileHeader:
def _get_elf_header() -> Optional[_ELFFileHeader]:
def _is_linux_armhf() -> bool:
def _is_linux_i686() -> bool:
def _have_compatible_abi(arch: str) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> Optional[str]:
def _glibc_version_string_ctypes() -> Optional[str]:
def _glibc_version_string() -> Optional[str]:
def _parse_glibc_version(version_str: str) -> Tuple[int, int]:
def _get_glibc_version() -> Tuple[int, int]:
def _is_compatible(name: str, arch: str, version: _GLibCVersion) -> bool:
def platform_tags(linux: str, arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
def _read_unpacked(f: IO[bytes], fmt: str) -> Tuple[int, ...]:
def _parse_ld_musl_from_elf(f: IO[bytes]) -> Optional[str]:
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> Optional[_MuslVersion]:
def _get_musl_version(executable: str) -> Optional[_MuslVersion]:
def platform_tags(arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\__about__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\diagram\__init__.py
-----------------------------
> jinja2_template_source = """\
  <!DOCTYPE html>
  <html>
  <head>
class EachItem(railroad.Group):
class AnnotatedItem(railroad.Group):
class EditablePartial(Generic[T]):
def railroad_to_html(diagrams: List[NamedDiagram], **kwargs) -> str:
def resolve_partial(partial: "EditablePartial[T]") -> T:
def to_railroad(
def _should_vertical(
class ElementState:
class ConverterState:
def _worth_extracting(element: pyparsing.ParserElement) -> bool:
def _apply_diagram_item_enhancements(fn):
def _visible_exprs(exprs: Iterable[pyparsing.ParserElement]):
def _to_diagram_element(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\actions.py
-----------------------------
>     """
      Wrapper for parse actions, to ensure they are only called once.
class OnlyOnce:
def match_only_at_col(n):
def replace_with(repl_str):
def remove_quotes(s, l, t):
def with_attribute(*args, **attr_dict):
def with_class(classname, namespace=""):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\common.py
-----------------------------
>     """Here are some common low-level expressions that may be useful in
      jump-starting parser development:
  
      - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
class pyparsing_common:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\core.py
-----------------------------
>     """
      A cross-version compatibility configuration for pyparsing features that will be
      released in a future version. By setting values in this configuration to True,
      those features can be enabled in prior versions for compatibility development
class __compat__(__config_flags):
class __diag__(__config_flags):
class Diagnostics(Enum):
def enable_diag(diag_enum: Diagnostics) -> None:
def disable_diag(diag_enum: Diagnostics) -> None:
def enable_all_warnings() -> None:
def _should_enable_warnings(
def _trim_arity(func, max_limit=3):
def condition_as_parse_action(
def _default_start_debug_action(
def _default_success_debug_action(
def _default_exception_debug_action(
def null_debug_action(*args):
class ParserElement(ABC):
class _PendingSkip(ParserElement):
class Token(ParserElement):
class Empty(Token):
class NoMatch(Token):
class Literal(Token):
class _SingleCharLiteral(Literal):
class Keyword(Token):
class CaselessLiteral(Literal):
class CaselessKeyword(Keyword):
class CloseMatch(Token):
class Word(Token):
class _WordRegex(Word):
class Char(_WordRegex):
class Regex(Token):
class QuotedString(Token):
class CharsNotIn(Token):
class White(Token):
class PositionToken(Token):
class GoToColumn(PositionToken):
class LineStart(PositionToken):
class LineEnd(PositionToken):
class StringStart(PositionToken):
class StringEnd(PositionToken):
class WordStart(PositionToken):
class WordEnd(PositionToken):
class ParseExpression(ParserElement):
class And(ParseExpression):
class Or(ParseExpression):
class MatchFirst(ParseExpression):
class Each(ParseExpression):
class ParseElementEnhance(ParserElement):
class IndentedBlock(ParseElementEnhance):
class AtStringStart(ParseElementEnhance):
class AtLineStart(ParseElementEnhance):
class FollowedBy(ParseElementEnhance):
class PrecededBy(ParseElementEnhance):
class Located(ParseElementEnhance):
class NotAny(ParseElementEnhance):
class _MultipleMatch(ParseElementEnhance):
class OneOrMore(_MultipleMatch):
class ZeroOrMore(_MultipleMatch):
class _NullToken:
class Opt(ParseElementEnhance):
class SkipTo(ParseElementEnhance):
class Forward(ParseElementEnhance):
class TokenConverter(ParseElementEnhance):
class Combine(TokenConverter):
class Group(TokenConverter):
class Dict(TokenConverter):
class Suppress(TokenConverter):
def trace_parse_action(f: ParseAction) -> ParseAction:
def srange(s: str) -> str:
def token_map(func, *args) -> ParseAction:
def autoname_elements() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\exceptions.py
-----------------------------
>     """base exception class for all parsing runtime exceptions"""
  
      # Performance tuning: we construct a *lot* of these, so keep this
      # constructor as small and fast as possible
class ExceptionWordUnicode(ppu.Latin1, ppu.LatinA, ppu.LatinB, ppu.Greek, ppu.Cyrillic):
class ParseBaseException(Exception):
class ParseException(ParseBaseException):
class ParseFatalException(ParseBaseException):
class ParseSyntaxException(ParseFatalException):
class RecursiveGrammarException(Exception):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\helpers.py
-----------------------------
>     """Helper to define a delimited list of expressions - the delimiter
      defaults to ','. By default, the list elements and delimiters can
      have intervening whitespace, and comments, but this can be
      overridden by passing ``combine=True`` in the constructor. If
def delimited_list(
def counted_array(
def match_previous_literal(expr: ParserElement) -> ParserElement:
def match_previous_expr(expr: ParserElement) -> ParserElement:
def one_of(
def dict_of(key: ParserElement, value: ParserElement) -> ParserElement:
def original_text_for(
def ungroup(expr: ParserElement) -> ParserElement:
def locatedExpr(expr: ParserElement) -> ParserElement:
def nested_expr(
def _makeTags(tagStr, xml, suppress_LT=Suppress("<"), suppress_GT=Suppress(">")):
def make_html_tags(
def make_xml_tags(
def replace_html_entity(t):
class OpAssoc(Enum):
def infix_notation(
def indentedBlock(blockStatementExpr, indentStack, indent=True, backup_stacks=[]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\results.py
-----------------------------
>     """Structured parse results, to provide multiple means of access to
      the parsed data:
  
      - as a list (``len(results)``)
class _ParseResultsWithOffset:
class ParseResults:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\testing.py
-----------------------------
>     """
      namespace class for classes useful in writing unit tests
class pyparsing_test:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\unicode.py
-----------------------------
>     """
      A set of Unicode characters, for language-specific strings for
      ``alphas``, ``nums``, ``alphanums``, and ``printables``.
      A unicode_set is defined by a list of ranges in the Unicode character
class _lazyclassproperty:
class unicode_set:
class pyparsing_unicode(unicode_set):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\util.py
-----------------------------
>     """Internal class for defining compatibility and debugging flags"""
  
      _all_names: List[str] = []
      _fixed_names: List[str] = []
class __config_flags:
def col(loc: int, strg: str) -> int:
def lineno(loc: int, strg: str) -> int:
def line(loc: int, strg: str) -> str:
class _UnboundedCache:
class _FifoCache:
class LRUMemo:
class UnboundedMemo(dict):
def _escape_regex_range_chars(s: str) -> str:
def _collapse_string_to_ranges(
def _flatten(ll: list) -> list:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\pyparsing\__init__.py
-----------------------------
> __doc__ = """
  pyparsing module - Classes and methods to define and execute parsing grammars
  =============================================================================
  
class version_info(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\tomli\_parser.py
-----------------------------
>     """An error raised if a document is not valid TOML."""
  
  
  def load(__fp: BinaryIO, *, parse_float: ParseFloat = float) -> dict[str, Any]:
class TOMLDecodeError(ValueError):
def load(__fp: BinaryIO, *, parse_float: ParseFloat = float) -> dict[str, Any]:
def loads(__s: str, *, parse_float: ParseFloat = float) -> dict[str, Any]:  # noqa: C901
class Flags:
class NestedDict:
class Output(NamedTuple):
def skip_chars(src: str, pos: Pos, chars: Iterable[str]) -> Pos:
def skip_until(
def skip_comment(src: str, pos: Pos) -> Pos:
def skip_comments_and_array_ws(src: str, pos: Pos) -> Pos:
def create_dict_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def create_list_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def key_value_rule(
def parse_key_value_pair(
def parse_key(src: str, pos: Pos) -> tuple[Pos, Key]:
def parse_key_part(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_one_line_basic_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_array(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[Pos, list]:
def parse_inline_table(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[Pos, dict]:
def parse_basic_str_escape(
def parse_basic_str_escape_multiline(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_hex_char(src: str, pos: Pos, hex_len: int) -> tuple[Pos, str]:
def parse_literal_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_multiline_str(src: str, pos: Pos, *, literal: bool) -> tuple[Pos, str]:
def parse_basic_str(src: str, pos: Pos, *, multiline: bool) -> tuple[Pos, str]:
def parse_value(  # noqa: C901
def suffixed_err(src: str, pos: Pos, msg: str) -> TOMLDecodeError:
def is_unicode_scalar_value(codepoint: int) -> bool:
def make_safe_parse_float(parse_float: ParseFloat) -> ParseFloat:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\tomli\_re.py
-----------------------------
>     r"""
  0
  (?:
      x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*   # hex
def match_to_datetime(match: re.Match) -> datetime | date:
def cached_tz(hour_str: str, minute_str: str, sign_str: str) -> timezone:
def match_to_localtime(match: re.Match) -> time:
def match_to_number(match: re.Match, parse_float: ParseFloat) -> Any:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\tomli\_types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\tomli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\ordered_set.py
-----------------------------
> """
  An OrderedSet is a custom MutableSet that remembers its order, so that every
  entry has an index that can be looked up.
  
def is_iterable(obj):
class OrderedSet(MutableSet, Sequence):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\typing_extensions.py
-----------------------------
>         """Special type indicating functions that never return.
          Example::
  
            from typing import NoReturn
def _no_slots_copy(dct):
def _check_generic(cls, parameters):
def IntVar(name):
class _ExtensionsGenericMeta(GenericMeta):
def _gorg(cls):
def _get_protocol_attrs(cls):
def _is_callable_members_only(cls):
def _concatenate_getitem(self, parameters):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\zipp.py
-----------------------------
>     """
      Given a path with elements separated by
      posixpath.sep, generate all parents of that path.
  
def _parents(path):
def _ancestry(path):
def _difference(minuend, subtrahend):
class CompleteDirs(zipfile.ZipFile):
class FastLookup(CompleteDirs):
def _pathlib_compat(path):
class Path:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\archive_util.py
-----------------------------
> """Utilities for extracting common archive formats"""
  
  import zipfile
  import tarfile
class UnrecognizedFormat(DistutilsError):
def default_filter(src, dst):
def unpack_archive(
def unpack_directory(filename, extract_dir, progress_filter=default_filter):
def unpack_zipfile(filename, extract_dir, progress_filter=default_filter):
def _unpack_zipfile_obj(zipfile_obj, extract_dir, progress_filter=default_filter):
def _resolve_tar_file_or_dir(tar_obj, tar_member_obj):
def _iter_open_tar(tar_obj, extract_dir, progress_filter):
def unpack_tarfile(filename, extract_dir, progress_filter=default_filter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\build_meta.py
-----------------------------
> """A PEP 517 interface to setuptools
  
  Previously, when a user or a command line tool (let's call it a "frontend")
  needed to make a request of setuptools to take a certain action, for
class SetupRequirementsError(BaseException):
class Distribution(setuptools.dist.Distribution):
def no_install_setup_requires():
def _get_immediate_subdirectories(a_dir):
def _file_with_extension(directory, extension):
def _open_setup_script(setup_script):
def suppress_known_deprecation():
class _ConfigSettingsTranslator:
class _BuildMetaBackend(_ConfigSettingsTranslator):
class _BuildMetaLegacyBackend(_BuildMetaBackend):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\depends.py
-----------------------------
>     """A prerequisite to building or installing a distribution"""
  
      def __init__(
              self, name, requested_version, module, homepage='',
class Require:
def maybe_close(f):
def get_module_constant(module, symbol, default=-1, paths=None):
def extract_constant(code, symbol, default=-1):
def _update_globals():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\dep_util.py
-----------------------------
>     """Walk both arguments in parallel, testing if each source group is newer
      than its corresponding target. Returns a pair of lists (sources_groups,
      targets) where sources is newer than target, according to the semantics
      of 'newer_group()'.
def newer_pairwise_group(sources_groups, targets):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\discovery.py
-----------------------------
> """Automatic discovery of Python modules and packages (for inclusion in the
  distribution) and other config values.
  
  For the purposes of this module, the following nomenclature is used:
def _valid_name(path: _Path) -> bool:
class _Finder:
class PackageFinder(_Finder):
class PEP420PackageFinder(PackageFinder):
class ModuleFinder(_Finder):
class FlatLayoutPackageFinder(PEP420PackageFinder):
class FlatLayoutModuleFinder(ModuleFinder):
def _find_packages_within(root_pkg: str, pkg_dir: _Path) -> List[str]:
class ConfigDiscovery:
def remove_nested_packages(packages: List[str]) -> List[str]:
def remove_stubs(packages: List[str]) -> List[str]:
def find_parent_package(
def find_package_path(
def construct_package_dir(packages: List[str], package_path: _Path) -> Dict[str, str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\dist.py
-----------------------------
>     """Reverse RFC-822 escaping by removing leading whitespaces from content."""
      lines = content.splitlines()
      if len(lines) == 1:
          return lines[0].lstrip()
def _get_unpatched(cls):
def get_metadata_version(self):
def rfc822_unescape(content: str) -> str:
def _read_field_from_msg(msg: "Message", field: str) -> Optional[str]:
def _read_field_unescaped_from_msg(msg: "Message", field: str) -> Optional[str]:
def _read_list_from_msg(msg: "Message", field: str) -> Optional[List[str]]:
def _read_payload_from_msg(msg: "Message") -> Optional[str]:
def read_pkg_file(self, file):
def single_line(val):
def write_pkg_file(self, file):  # noqa: C901  # is too complex (14)  # FIXME
def check_importable(dist, attr, value):
def assert_string_list(dist, attr, value):
def check_nsp(dist, attr, value):
def check_extras(dist, attr, value):
def _check_extra(extra, reqs):
def assert_bool(dist, attr, value):
def invalid_unless_false(dist, attr, value):
def check_requirements(dist, attr, value):
def check_specifier(dist, attr, value):
def check_entry_points(dist, attr, value):
def check_test_suite(dist, attr, value):
def check_package_data(dist, attr, value):
def check_packages(dist, attr, value):
class Distribution(_Distribution):
class DistDeprecationWarning(SetuptoolsDeprecationWarning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\errors.py
-----------------------------
> """setuptools.errors
  
  Provides exceptions used by setuptools modules.
class RemovedCommandError(BaseError, RuntimeError):
class PackageDiscoveryError(BaseError, RuntimeError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\extension.py
-----------------------------
>     """
      Return True if Cython can be imported.
def _have_cython():
class Extension(_Extension):
class Library(Extension):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\glob.py
-----------------------------
> """
  Filename globbing utility. Mostly a copy of `glob` from Python 3.5.
  
  Changes include:
def glob(pathname, recursive=False):
def iglob(pathname, recursive=False):
def _iglob(pathname, recursive):
def glob1(dirname, pattern):
def glob0(dirname, basename):
def glob2(dirname, pattern):
def _rlistdir(dirname):
def has_magic(s):
def _isrecursive(pattern):
def escape(pathname):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\installer.py
-----------------------------
>     """Ensure find-links option end-up being a list of strings."""
      if isinstance(find_links, str):
          return find_links.split()
      assert isinstance(find_links, (tuple, list))
def _fixup_find_links(find_links):
def fetch_build_egg(dist, req):  # noqa: C901  # is too complex (16)  # FIXME
def strip_marker(req):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\launch.py
-----------------------------
> """
  Launch the Python script on the command line after
  setuptools is bootstrapped via import.
def run():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\logging.py
-----------------------------
>     """
      Configure logging to emit warning and above to stderr
      and everything else to stdout. This behavior is provided
      for compatibility with distutils.log but may change in
def _not_warning(record):
def configure():
def set_threshold(level):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\monkey.py
-----------------------------
> """
  Monkey patching of distutils.
def _get_mro(cls):
def get_unpatched(item):
def get_unpatched_class(cls):
def patch_all():
def _patch_distribution_metadata():
def patch_func(replacement, target_mod, func_name):
def get_unpatched_function(candidate):
def patch_for_msvc_specialized_compiler():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\msvc.py
-----------------------------
> """
  Improved support for Microsoft Visual C++ compilers.
  
  Known supported compilers:
def _msvc14_find_vc2015():
def _msvc14_find_vc2017():
def _msvc14_find_vcvarsall(plat_spec):
def _msvc14_get_vc_env(plat_spec):
def msvc14_get_vc_env(plat_spec):
def msvc14_gen_lib_options(*args, **kwargs):
def _augment_exception(exc, version, arch=''):
class PlatformInfo:
class RegistryInfo:
class SystemInfo:
class EnvironmentInfo:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\namespaces.py
-----------------------------
>         """Return sorted list of all package namespaces"""
          pkgs = self.distribution.namespace_packages or []
          return sorted(flatten(map(self._pkg_names, pkgs)))
  
class Installer:
class DevelopInstaller(Installer):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\package_index.py
-----------------------------
> """PyPI and direct package downloading"""
  import sys
  import os
  import re
def parse_requirement_arg(spec):
def parse_bdist_wininst(name):
def egg_info_for_url(url):
def distros_for_url(url, metadata=None):
def distros_for_location(location, basename, metadata=None):
def distros_for_filename(filename, metadata=None):
def interpret_distro_name(
def unique_values(func):
def find_external_links(url, page):
class ContentChecker:
class HashChecker(ContentChecker):
class PackageIndex(Environment):
def decode_entity(match):
def htmldecode(text):
def socket_timeout(timeout=15):
def _encode_auth(auth):
class Credential:
class PyPIConfig(configparser.RawConfigParser):
def open_with_auth(url, opener=urllib.request.urlopen):
def _splituser(host):
def fix_sf_url(url):
def local_open(url):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\py34compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\sandbox.py
-----------------------------
>     """
      Python 3 implementation of execfile.
def _execfile(filename, globals, locals=None):
def save_argv(repl=None):
def save_path():
def override_temp(replacement):
def pushd(target):
class UnpickleableException(Exception):
class ExceptionSaver:
def save_modules():
def _clear_modules(module_names):
def save_pkg_resources_state():
def setup_context(setup_dir):
def _needs_hiding(mod_name):
def hide_setuptools():
def run_setup(setup_script, args):
class AbstractSandbox:
class DirectorySandbox(AbstractSandbox):
class SandboxViolation(DistutilsError):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\unicode_utils.py
-----------------------------
>     """
      Ensure that the given path is decoded,
      NONE when no expected encoding works
def decompose(path):
def filesys_decode(path):
def try_encode(string, enc):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\wheel.py
-----------------------------
> """Wheels support."""
  
  import email
  import itertools
def unpack(src_dir, dst_dir):
def disable_info_traces():
class Wheel:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\windows_support.py
-----------------------------
>     """
      Set the hidden attribute on a file or directory.
  
      From http://stackoverflow.com/questions/19622133/
def windows_only(func):
def hide_file(path):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_deprecation_warning.py
-----------------------------
>     """
      Base class for warning deprecations in ``setuptools``
  
      This class is not derived from ``DeprecationWarning``, and as such is
class SetuptoolsDeprecationWarning(Warning):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_entry_points.py
-----------------------------
>     """
      Exercise one of the dynamic properties to trigger
      the pattern match.
def ensure_valid(ep):
def load_group(value, group):
def by_group_and_name(ep):
def validate(eps: metadata.EntryPoints):
def load(eps):
def _(eps):
def render(eps: metadata.EntryPoints):
def render_items(eps):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_imp.py
-----------------------------
> """
  Re-implementation of find_module and get_frozen_object
  from the deprecated imp module.
def find_spec(module, paths):
def find_module(module, paths=None):
def get_frozen_object(module, paths=None):
def get_module(module, paths, info):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_importlib.py
-----------------------------
>     """
      Ensure importlib_metadata doesn't provide older, incompatible
      Distributions.
  
def disable_importlib_metadata_finder(metadata):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_itertools.py
-----------------------------
>     """
      Wrap an iterable to raise a ValueError if non-unique values are encountered.
  
      >>> list(ensure_unique('abc'))
def ensure_unique(iterable, key=lambda x: x):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_path.py
-----------------------------
>     """Ensure that the parent directory of `path` exists"""
      dirname = os.path.dirname(path)
      os.makedirs(dirname, exist_ok=True)
  
def ensure_directory(path):
def same_path(p1: _Path, p2: _Path) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\_reqs.py
-----------------------------
>     """
      Yield requirement strings for each specification in `strs`.
  
      `strs` must be a string, or a (possibly-nested) iterable thereof.
def parse_strings(strs):
def parse(strs):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\setuptools\__init__.py
-----------------------------
> """Extensions to the 'distutils' for large or complex distributions"""
  
  import functools
  import os
def _install_setup_requires(attrs):
def setup(**attrs):
class Command(_Command):
def _find_all_simple(path):
def findall(dir=os.curdir):
def convert_path(pathname):
class sic(str):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_distutils_hack\override.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_distutils_hack\__init__.py
-----------------------------
>     """
      Allow selection of distutils by environment variable.
def warn_distutils_present():
def clear_distutils():
def enabled():
def ensure_local_distutils():
def do_override():
class _TrivialRe:
class DistutilsMetaFinder:
def add_shim():
class shim:
def insert_shim():
def remove_shim():

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\assertion\rewrite.py
-----------------------------
> """Rewrite assertion AST to produce nice error messages."""
  
  from __future__ import annotations
  
class Sentinel:
class AssertionRewritingHook(importlib.abc.MetaPathFinder, importlib.abc.Loader):
def _write_pyc_fp(
def _write_pyc(
def _rewrite_test(fn: Path, config: Config) -> tuple[os.stat_result, types.CodeType]:
def _read_pyc(
def rewrite_asserts(
def _saferepr(obj: object) -> str:
def _get_maxsize_for_saferepr(config: Config | None) -> int | None:
def _format_assertmsg(obj: object) -> str:
def _should_repr_global_name(obj: object) -> bool:
def _format_boolop(explanations: Iterable[str], is_or: bool) -> str:
def _call_reprcompare(
def _call_assertion_pass(lineno: int, orig: str, expl: str) -> None:
def _check_if_assertion_pass_impl() -> bool:
def traverse_node(node: ast.AST) -> Iterator[ast.AST]:
def _get_assertion_exprs(src: bytes) -> dict[int, str]:
class AssertionRewriter(ast.NodeVisitor):
def try_makedirs(cache_dir: Path) -> bool:
def get_cache_dir(file_path: Path) -> Path:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\assertion\truncate.py
-----------------------------
> """Utilities for truncating assertion output.
  
  Current default behaviour is to truncate assertion explanations at
  terminal lines, unless running with an assertions verbosity level of at least 2 or running 
on CI.
def truncate_if_required(explanation: list[str], item: Item) -> list[str]:
def _get_truncation_parameters(item: Item) -> tuple[bool, int, int]:
def _truncate_explanation(
def _truncate_by_char_count(input_lines: list[str], max_chars: int) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\assertion\util.py
-----------------------------
> """Utilities for assertion debugging."""
  
  from __future__ import annotations
  
class _HighlightFunc(Protocol):
def dummy_highlighter(source: str, lexer: Literal["diff", "python"] = "python") -> str:
def format_explanation(explanation: str) -> str:
def _split_explanation(explanation: str) -> list[str]:
def _format_lines(lines: Sequence[str]) -> list[str]:
def issequence(x: Any) -> bool:
def istext(x: Any) -> bool:
def isdict(x: Any) -> bool:
def isset(x: Any) -> bool:
def isnamedtuple(obj: Any) -> bool:
def isdatacls(obj: Any) -> bool:
def isattrs(obj: Any) -> bool:
def isiterable(obj: Any) -> bool:
def has_default_eq(
def assertrepr_compare(
def _compare_eq_any(
def _diff_text(
def _compare_eq_iterable(
def _compare_eq_sequence(
def _compare_eq_set(
def _compare_gt_set(
def _compare_lt_set(
def _compare_gte_set(
def _compare_lte_set(
def _set_one_sided_diff(
def _compare_eq_dict(
def _compare_eq_cls(
def _notin_text(term: str, text: str, verbose: int = 0) -> list[str]:
def running_on_ci() -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\assertion\__init__.py
-----------------------------
> """Support for presenting detailed information in failing assertions."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def register_assert_rewrite(*names: str) -> None:
class RewriteHook(Protocol):
class DummyRewriteHook:
class AssertionState:
def install_importhook(config: Config) -> rewrite.AssertionRewritingHook:
def pytest_collection(session: Session) -> None:
def pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:
def pytest_sessionfinish(session: Session) -> None:
def pytest_assertrepr_compare(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\config\argparsing.py
-----------------------------
>     """Parser for command line arguments and ini-file values.
  
      :ivar extra_info: Dict of generic param -> value to display in case
          there's an error processing the command line arguments.
class NotSet:
class Parser:
def get_ini_default_for_type(
class ArgumentError(Exception):
class Argument:
class OptionGroup:
class MyOptionParser(argparse.ArgumentParser):
class DropShorterLongHelpFormatter(argparse.HelpFormatter):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\config\compat.py
-----------------------------
>     """
      this helper wraps around hook callers
      until pluggy supports fixingcalls, this one will do
  
def _check_path(path: Path, fspath: LEGACY_PATH) -> None:
class PathAwareHookProxy:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\config\exceptions.py
-----------------------------
>     """Error in pytest usage or invocation."""
  
  
  class PrintHelp(Exception):
class UsageError(Exception):
class PrintHelp(Exception):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\config\findpaths.py
-----------------------------
>     """Parse the given generic '.ini' file using legacy IniConfig parser, returning
      the parsed object.
  
      Raise UsageError if the file cannot be parsed.
def _parse_ini_config(path: Path) -> iniconfig.IniConfig:
def load_config_dict_from_file(
def locate_config(
def get_common_ancestor(
def get_dirs_from_args(args: Iterable[str]) -> list[Path]:
def determine_setup(
def is_fs_root(p: Path) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\config\__init__.py
-----------------------------
> """Command line options, ini-file and conftest.py processing."""
  
  from __future__ import annotations
  
class ExitCode(enum.IntEnum):
class ConftestImportFailure(Exception):
def filter_traceback_for_conftest_import_failure(
def main(
def console_main() -> int:
class cmdline:  # compatibility namespace
def filename_arg(path: str, optname: str) -> str:
def directory_arg(path: str, optname: str) -> str:
def get_config(
def get_plugin_manager() -> PytestPluginManager:
def _prepareconfig(
def _get_directory(path: pathlib.Path) -> pathlib.Path:
def _get_legacy_hook_marks(
class PytestPluginManager(PluginManager):
def _get_plugin_specs_as_list(
class Notset:
def _iter_rewritable_modules(package_files: Iterable[str]) -> Iterator[str]:
class Config:
def _assertion_supported() -> bool:
def create_terminal_writer(
def _strtobool(val: str) -> bool:
def parse_warning_filter(
def _resolve_warning_category(category: str) -> type[Warning]:
def apply_warning_filters(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\mark\expression.py
-----------------------------
> r"""Evaluate match expressions, as used by `-k` and `-m`.
  
  The grammar is:
  
class TokenType(enum.Enum):
class Token:
class ParseError(Exception):
class Scanner:
def expression(s: Scanner) -> ast.Expression:
def expr(s: Scanner) -> ast.expr:
def and_expr(s: Scanner) -> ast.expr:
def not_expr(s: Scanner) -> ast.expr:
def single_kwarg(s: Scanner) -> ast.keyword:
def all_kwargs(s: Scanner) -> list[ast.keyword]:
class MatcherCall(Protocol):
class MatcherNameAdapter:
class MatcherAdapter(Mapping[str, MatcherNameAdapter]):
class Expression:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\mark\structures.py
-----------------------------
>     """A set of values for a set of parameters along with associated marks and
      an optional ID for the set.
  
      Examples::
class _HiddenParam(enum.Enum):
def istestfunc(func) -> bool:
def get_empty_parameterset_mark(
class ParameterSet(NamedTuple):
class Mark:
class MarkDecorator:
def get_unpacked_marks(
def normalize_mark_list(
def store_mark(obj, mark: Mark, *, stacklevel: int = 2) -> None:
class MarkGenerator:
class NodeKeywords(MutableMapping[str, Any]):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\mark\__init__.py
-----------------------------
> """Generic mechanism for marking and selecting python functions."""
  
  from __future__ import annotations
  
def param(
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
class KeywordMatcher:
def deselect_by_keyword(items: list[Item], config: Config) -> None:
class MarkMatcher:
def deselect_by_mark(items: list[Item], config: Config) -> None:
def _parse_expression(expr: str, exc_message: str) -> Expression:
def pytest_collection_modifyitems(items: list[Item], config: Config) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_code\code.py
-----------------------------
>     """Wrapper around Python code objects."""
  
      __slots__ = ("raw",)
  
class Code:
class Frame:
class TracebackEntry:
class Traceback(list[TracebackEntry]):
def stringify_exception(
class ExceptionInfo(Generic[E]):
class FormattedExcinfo:
class TerminalRepr:
class ExceptionRepr(TerminalRepr):
class ExceptionChainRepr(ExceptionRepr):
class ReprExceptionInfo(ExceptionRepr):
class ReprTraceback(TerminalRepr):
class ReprTracebackNative(ReprTraceback):
class ReprEntryNative(TerminalRepr):
class ReprEntry(TerminalRepr):
class ReprFileLocation(TerminalRepr):
class ReprLocals(TerminalRepr):
class ReprFuncArgs(TerminalRepr):
def getfslineno(obj: object) -> tuple[str | Path, int]:
def _byte_offset_to_character_offset(str, offset):
def filter_traceback(entry: TracebackEntry) -> bool:
def filter_excinfo_traceback(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_code\source.py
-----------------------------
>     """An immutable object holding a source code fragment.
  
      When using Source(...), the source lines are deindented.
class Source:
def findsource(obj) -> tuple[Source | None, int]:
def getrawcode(obj: object, trycall: bool = True) -> types.CodeType:
def deindent(lines: Iterable[str]) -> list[str]:
def get_statement_startend2(lineno: int, node: ast.AST) -> tuple[int, int | None]:
def getstatementrange_ast(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_code\__init__.py
-----------------------------
> """Python inspection/code generation API."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_io\pprint.py
-----------------------------
>     """Helper function for key functions when sorting unorderable objects.
  
      The wrapped-object will fallback to a Py2.x style comparison for
      unorderable types (sorting first comparing the type name and then by
class _safe_key:
def _safe_tuple(t):
class PrettyPrinter:
def _recursion(object: Any) -> str:
def _wrap_bytes_repr(object: Any, width: int, allowance: int) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_io\saferepr.py
-----------------------------
>     """
      repr.Repr that limits the resulting size of repr() and includes
      information on exceptions raised during the call.
def _try_repr_or_str(obj: object) -> str:
def _format_repr_exception(exc: BaseException, obj: object) -> str:
def _ellipsize(s: str, maxsize: int) -> str:
class SafeRepr(reprlib.Repr):
def safeformat(obj: object) -> str:
def saferepr(
def saferepr_unlimited(obj: object, use_ascii: bool = True) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_io\terminalwriter.py
-----------------------------
> """Helper functions for writing to terminals and files."""
  
  from __future__ import annotations
  
def get_terminal_width() -> int:
def should_do_markup(file: TextIO) -> bool:
class TerminalWriter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_io\wcwidth.py
-----------------------------
>     """Determine how many columns are needed to display a character in a terminal.
  
      Returns -1 if the character is not printable.
      Returns 0, 1 or 2 for other characters.
def wcwidth(c: str) -> int:
def wcswidth(s: str) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_io\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_py\error.py
-----------------------------
> """create errno-specific classes for IO or os calls."""
  
  from __future__ import annotations
  
class Error(EnvironmentError):
class ErrorMaker:
def __getattr__(attr: str) -> type[Error]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_py\path.py
-----------------------------
> """local path implementation."""
  
  from __future__ import annotations
  
class Checkers:
class NeverRaised(Exception):
class Visitor:
class FNMatcher:
def map_as_list(func, iter):
class Stat:
def getuserid(user):
def getgroupid(group):
class LocalPath:
def copymode(src, dest):
def copystat(src, dest):
def copychunked(src, dest):
def isimportable(name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_py\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\cacheprovider.py
-----------------------------
> """Implementation of the cache provider."""
  
  # This plugin was not named "cache" to avoid conflicts with the external
  # pytest-cache version.
class Cache:
class LFPluginCollWrapper:
class LFPluginCollSkipfiles:
class LFPlugin:
class NFPlugin:
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
def pytest_configure(config: Config) -> None:
def cache(request: FixtureRequest) -> Cache:
def pytest_report_header(config: Config) -> str | None:
def cacheshow(config: Config, session: Session) -> int:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\capture.py
-----------------------------
> """Per-test stdout/stderr capturing mechanism."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def _colorama_workaround() -> None:
def _readline_workaround() -> None:
def _windowsconsoleio_workaround(stream: TextIO) -> None:
def pytest_load_initial_conftests(early_config: Config) -> Generator[None]:
class EncodedFile(io.TextIOWrapper):
class CaptureIO(io.TextIOWrapper):
class TeeCaptureIO(CaptureIO):
class DontReadFromInput(TextIO):
class CaptureBase(abc.ABC, Generic[AnyStr]):
class NoCapture(CaptureBase[str]):
class SysCaptureBase(CaptureBase[AnyStr]):
class SysCaptureBinary(SysCaptureBase[bytes]):
class SysCapture(SysCaptureBase[str]):
class FDCaptureBase(CaptureBase[AnyStr]):
class FDCaptureBinary(FDCaptureBase[bytes]):
class FDCapture(FDCaptureBase[str]):
class MultiCapture(Generic[AnyStr]):
def _get_multicapture(method: _CaptureMethod) -> MultiCapture[str]:
class CaptureManager:
class CaptureFixture(Generic[AnyStr]):
def capsys(request: SubRequest) -> Generator[CaptureFixture[str]]:
def capteesys(request: SubRequest) -> Generator[CaptureFixture[str]]:
def capsysbinary(request: SubRequest) -> Generator[CaptureFixture[bytes]]:
def capfd(request: SubRequest) -> Generator[CaptureFixture[str]]:
def capfdbinary(request: SubRequest) -> Generator[CaptureFixture[bytes]]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\compat.py
-----------------------------
> """Python version compatibility code."""
  
  from __future__ import annotations
  
def legacy_path(path: str | os.PathLike[str]) -> LEGACY_PATH:
class NotSetType(enum.Enum):
def iscoroutinefunction(func: object) -> bool:
def is_async_function(func: object) -> bool:
def getlocation(function, curdir: str | os.PathLike[str] | None = None) -> str:
def num_mock_patch_args(function) -> int:
def getfuncargnames(
def get_default_arg_names(function: Callable[..., Any]) -> tuple[str, ...]:
def ascii_escaped(val: bytes | str) -> str:
def get_real_func(obj):
def getimfunc(func):
def safe_getattr(object: Any, name: str, default: Any) -> Any:
def safe_isclass(obj: object) -> bool:
def get_user_id() -> int | None:
def assert_never(value: NoReturn) -> NoReturn:
class CallableBool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\debugging.py
-----------------------------
> """Interactive debugging with PDB, the Python Debugger."""
  
  from __future__ import annotations
  
def _validate_usepdb_cls(value: str) -> tuple[str, str]:
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
class pytestPDB:
class PdbInvoke:
class PdbTrace:
def wrap_pytest_function_for_tracing(pyfuncitem) -> None:
def maybe_wrap_pytest_function_for_tracing(pyfuncitem) -> None:
def _enter_pdb(
def _postmortem_exc_or_tb(
def post_mortem(tb_or_exc: types.TracebackType | BaseException) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\deprecated.py
-----------------------------
> """Deprecation messages and bits of code used elsewhere in the codebase that
  is planned to be removed in the next pytest release.
  
  Keeping it in a central location makes it easy to track what is deprecated and should
def check_ispytest(ispytest: bool) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\doctest.py
-----------------------------
> """Discover and run doctests in modules and test files."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_unconfigure() -> None:
def pytest_collect_file(
def _is_setup_py(path: Path) -> bool:
def _is_doctest(config: Config, path: Path, parent: Collector) -> bool:
def _is_main_py(path: Path) -> bool:
class ReprFailDoctest(TerminalRepr):
class MultipleDoctestFailures(Exception):
def _init_runner_class() -> type[doctest.DocTestRunner]:
def _get_runner(
class DoctestItem(Item):
def _get_flag_lookup() -> dict[str, int]:
def get_optionflags(config: Config) -> int:
def _get_continue_on_failure(config: Config) -> bool:
class DoctestTextfile(Module):
def _check_all_skipped(test: doctest.DocTest) -> None:
def _is_mocked(obj: object) -> bool:
def _patch_unwrap_mock_aware() -> Generator[None]:
class DoctestModule(Module):
def _init_checker_class() -> type[doctest.OutputChecker]:
def _get_checker() -> doctest.OutputChecker:
def _get_allow_unicode_flag() -> int:
def _get_allow_bytes_flag() -> int:
def _get_number_flag() -> int:
def _get_report_choice(key: str) -> int:
def doctest_namespace() -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\faulthandler.py
-----------------------------
>     """Cancel any traceback dumping due to timeout before entering pdb."""
      import faulthandler
  
      faulthandler.cancel_dump_traceback_later()
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:
def get_stderr_fileno() -> int:
def get_timeout_config_value(config: Config) -> float:
def pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:
def pytest_enter_pdb() -> None:
def pytest_exception_interact() -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\fixtures.py
-----------------------------
>     """Get the closest parent node (including self) which matches the given
      scope.
  
      If there is no parent node for the scope (e.g. asking for class scope on a
class PseudoFixtureDef(Generic[FixtureValue]):
def pytest_sessionstart(session: Session) -> None:
def get_scope_package(
def get_scope_node(node: nodes.Node, scope: Scope) -> nodes.Node | None:
def getfixturemarker(obj: object) -> FixtureFunctionMarker | None:
class ParamArgKey:
def get_param_argkeys(item: nodes.Item, scope: Scope) -> Iterator[ParamArgKey]:
def reorder_items(items: Sequence[nodes.Item]) -> list[nodes.Item]:
def reorder_items_atscope(
class FuncFixtureInfo:
class FixtureRequest(abc.ABC):
class TopRequest(FixtureRequest):
class SubRequest(FixtureRequest):
class FixtureLookupError(LookupError):
class FixtureLookupErrorRepr(TerminalRepr):
def call_fixture_func(
def _teardown_yield_fixture(fixturefunc, it) -> None:
def _eval_scope_callable(
class FixtureDef(Generic[FixtureValue]):
def resolve_fixture_function(
def pytest_fixture_setup(
class FixtureFunctionMarker:
class FixtureFunctionDefinition:
def fixture(
def fixture(
def fixture(
def yield_fixture(
def pytestconfig(request: FixtureRequest) -> Config:
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
def _get_direct_parametrize_args(node: nodes.Node) -> set[str]:
def deduplicate_names(*seqs: Iterable[str]) -> tuple[str, ...]:
class FixtureManager:
def show_fixtures_per_test(config: Config) -> int | ExitCode:
def _pretty_fixture_path(invocation_dir: Path, func) -> str:
def _show_fixtures_per_test(config: Config, session: Session) -> None:
def showfixtures(config: Config) -> int | ExitCode:
def _showfixtures_main(config: Config, session: Session) -> None:
def write_docstring(tw: TerminalWriter, doc: str, indent: str = "    ") -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\freeze_support.py
-----------------------------
> """Provides a function to report all internal modules for using freezing
def freeze_includes() -> list[str]:
def _iter_all_modules(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\helpconfig.py
-----------------------------
> """Version info, help messages, tracing configuration."""
  
  from __future__ import annotations
  
class HelpAction(Action):
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_parse() -> Generator[None, Config, Config]:
def showversion(config: Config) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
def showhelp(config: Config) -> None:
def getpluginversioninfo(config: Config) -> list[str]:
def pytest_report_header(config: Config) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\hookspec.py
-----------------------------
> """Hook specifications for pytest plugins which are invoked by pytest itself
def pytest_addhooks(pluginmanager: PytestPluginManager) -> None:
def pytest_plugin_registered(
def pytest_addoption(parser: Parser, pluginmanager: PytestPluginManager) -> None:
def pytest_configure(config: Config) -> None:
def pytest_cmdline_parse(
def pytest_load_initial_conftests(
def pytest_cmdline_main(config: Config) -> ExitCode | int | None:
def pytest_collection(session: Session) -> object | None:
def pytest_collection_modifyitems(
def pytest_collection_finish(session: Session) -> None:
def pytest_ignore_collect(
def pytest_collect_directory(path: Path, parent: Collector) -> Collector | None:
def pytest_collect_file(
def pytest_collectstart(collector: Collector) -> None:
def pytest_itemcollected(item: Item) -> None:
def pytest_collectreport(report: CollectReport) -> None:
def pytest_deselected(items: Sequence[Item]) -> None:
def pytest_make_collect_report(collector: Collector) -> CollectReport | None:
def pytest_pycollect_makemodule(
def pytest_pycollect_makeitem(
def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:
def pytest_generate_tests(metafunc: Metafunc) -> None:
def pytest_make_parametrize_id(config: Config, val: object, argname: str) -> str | None:
def pytest_runtestloop(session: Session) -> object | None:
def pytest_runtest_protocol(item: Item, nextitem: Item | None) -> object | None:
def pytest_runtest_logstart(nodeid: str, location: tuple[str, int | None, str]) -> None:
def pytest_runtest_logfinish(
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> TestReport | None:
def pytest_runtest_logreport(report: TestReport) -> None:
def pytest_report_to_serializable(
def pytest_report_from_serializable(
def pytest_fixture_setup(
def pytest_fixture_post_finalizer(
def pytest_sessionstart(session: Session) -> None:
def pytest_sessionfinish(
def pytest_unconfigure(config: Config) -> None:
def pytest_assertrepr_compare(
def pytest_assertion_pass(item: Item, lineno: int, orig: str, expl: str) -> None:
def pytest_report_header(  # type:ignore[empty-body]
def pytest_report_collectionfinish(  # type:ignore[empty-body]
def pytest_report_teststatus(  # type:ignore[empty-body]
def pytest_terminal_summary(
def pytest_warning_recorded(
def pytest_markeval_namespace(  # type:ignore[empty-body]
def pytest_internalerror(
def pytest_keyboard_interrupt(
def pytest_exception_interact(
def pytest_enter_pdb(config: Config, pdb: pdb.Pdb) -> None:
def pytest_leave_pdb(config: Config, pdb: pdb.Pdb) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\junitxml.py
-----------------------------
> """Report test results in JUnit-XML format, for use with Jenkins and build
  integration servers.
  
  Based on initial code from Ross Lawley.
def bin_xml_escape(arg: object) -> str:
def merge_family(left, right) -> None:
class _NodeReporter:
def _warn_incompatibility_with_xunit2(
def record_property(request: FixtureRequest) -> Callable[[str, object], None]:
def record_xml_attribute(request: FixtureRequest) -> Callable[[str, object], None]:
def _check_record_param_type(param: str, v: str) -> None:
def record_testsuite_property(request: FixtureRequest) -> Callable[[str, object], None]:
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:
def mangle_test_address(address: str) -> list[str]:
class LogXML:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\legacypath.py
-----------------------------
> """Add backward compatibility support for the legacy py path type."""
  
  from __future__ import annotations
  
class Testdir:
class LegacyTestdirPlugin:
class TempdirFactory:
class LegacyTmpdirPlugin:
def Cache_makedir(self: Cache, name: str) -> LEGACY_PATH:
def FixtureRequest_fspath(self: FixtureRequest) -> LEGACY_PATH:
def TerminalReporter_startdir(self: TerminalReporter) -> LEGACY_PATH:
def Config_invocation_dir(self: Config) -> LEGACY_PATH:
def Config_rootdir(self: Config) -> LEGACY_PATH:
def Config_inifile(self: Config) -> LEGACY_PATH | None:
def Session_startdir(self: Session) -> LEGACY_PATH:
def Config__getini_unknown_type(self, name: str, type: str, value: str | list[str]):
def Node_fspath(self: Node) -> LEGACY_PATH:
def Node_fspath_set(self: Node, value: LEGACY_PATH) -> None:
def pytest_load_initial_conftests(early_config: Config) -> None:
def pytest_configure(config: Config) -> None:
def pytest_plugin_registered(plugin: object, manager: PytestPluginManager) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\logging.py
-----------------------------
> """Access and control log capturing."""
  
  from __future__ import annotations
  
def _remove_ansi_escape_sequences(text: str) -> str:
class DatetimeFormatter(logging.Formatter):
class ColoredLevelFormatter(DatetimeFormatter):
class PercentStyleMultiline(logging.PercentStyle):
def get_option_ini(config: Config, *names: str):
def pytest_addoption(parser: Parser) -> None:
class catching_logs(Generic[_HandlerType]):
class LogCaptureHandler(logging_StreamHandler):
class LogCaptureFixture:
def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture]:
def get_log_level_for_setting(config: Config, *setting_names: str) -> int | None:
def pytest_configure(config: Config) -> None:
class LoggingPlugin:
class _FileHandler(logging.FileHandler):
class _LiveLoggingStreamHandler(logging_StreamHandler):
class _LiveLoggingNullHandler(logging.NullHandler):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\main.py
-----------------------------
> """Core implementation of the testing process: init, session, runtest loop."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def validate_basetemp(path: str) -> str:
def wrap_session(
def pytest_cmdline_main(config: Config) -> int | ExitCode:
def _main(config: Config, session: Session) -> int | ExitCode | None:
def pytest_collection(session: Session) -> None:
def pytest_runtestloop(session: Session) -> bool:
def _in_venv(path: Path) -> bool:
def pytest_ignore_collect(collection_path: Path, config: Config) -> bool | None:
def pytest_collect_directory(
def pytest_collection_modifyitems(items: list[nodes.Item], config: Config) -> None:
class FSHookProxy:
class Interrupted(KeyboardInterrupt):
class Failed(Exception):
class _bestrelpath_cache(dict[Path, str]):
class Dir(nodes.Directory):
class Session(nodes.Collector):
def search_pypath(module_name: str) -> str | None:
class CollectionArgument:
def resolve_collection_argument(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\monkeypatch.py
-----------------------------
> """Monkeypatching and mocking functionality."""
  
  from __future__ import annotations
  
def monkeypatch() -> Generator[MonkeyPatch]:
def resolve(name: str) -> object:
def annotated_getattr(obj: object, name: str, ann: str) -> object:
def derive_importpath(import_path: str, raising: bool) -> tuple[str, object]:
class Notset:
class MonkeyPatch:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\nodes.py
-----------------------------
>     """Metaclass used by :class:`Node` to enforce that direct construction raises
      :class:`Failed`.
  
      This behaviour supports the indirection introduced with :meth:`Node.from_parent`,
def _imply_path(
class NodeMeta(abc.ABCMeta):
class Node(abc.ABC, metaclass=NodeMeta):
def get_fslocation_from_item(node: Node) -> tuple[str | Path, int | None]:
class Collector(Node, abc.ABC):
def _check_initialpaths_for_relpath(
class FSCollector(Collector, abc.ABC):
class File(FSCollector, abc.ABC):
class Directory(FSCollector, abc.ABC):
class Item(Node, abc.ABC):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\outcomes.py
-----------------------------
> """Exception classes and constants handling test outcomes as well as
class OutcomeException(BaseException):
class Skipped(OutcomeException):
class Failed(OutcomeException):
class Exit(Exception):
class _WithException(Protocol[_F, _ET]):
def _with_exception(exception_type: _ET) -> Callable[[_F], _WithException[_F, _ET]]:
def exit(
def skip(
def fail(reason: str = "", pytrace: bool = True) -> NoReturn:
class XFailed(Failed):
def xfail(reason: str = "") -> NoReturn:
def importorskip(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\pastebin.py
-----------------------------
> """Submit failure or test session information to a pastebin service."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:
def create_new_paste(contents: str | bytes) -> str:
def pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\pathlib.py
-----------------------------
>     """Handle known read-only errors during rmtree.
  
      The returned value is used only by our own tests.
def _ignore_error(exception: Exception) -> bool:
def get_lock_path(path: _AnyPurePath) -> _AnyPurePath:
def on_rm_rf_error(
def ensure_extended_length_path(path: Path) -> Path:
def get_extended_length_path_str(path: str) -> str:
def rm_rf(path: Path) -> None:
def find_prefixed(root: Path, prefix: str) -> Iterator[os.DirEntry[str]]:
def extract_suffixes(iter: Iterable[os.DirEntry[str]], prefix: str) -> Iterator[str]:
def find_suffixes(root: Path, prefix: str) -> Iterator[str]:
def parse_num(maybe_num: str) -> int:
def _force_symlink(root: Path, target: str | PurePath, link_to: str | Path) -> None:
def make_numbered_dir(root: Path, prefix: str, mode: int = 0o700) -> Path:
def create_cleanup_lock(p: Path) -> Path:
def register_cleanup_lock_removal(
def maybe_delete_a_numbered_dir(path: Path) -> None:
def ensure_deletable(path: Path, consider_lock_dead_if_created_before: float) -> bool:
def try_cleanup(path: Path, consider_lock_dead_if_created_before: float) -> None:
def cleanup_candidates(root: Path, prefix: str, keep: int) -> Iterator[Path]:
def cleanup_dead_symlinks(root: Path) -> None:
def cleanup_numbered_dir(
def make_numbered_dir_with_cleanup(
def resolve_from_str(input: str, rootpath: Path) -> Path:
def fnmatch_ex(pattern: str, path: str | os.PathLike[str]) -> bool:
def parts(s: str) -> set[str]:
def symlink_or_skip(
class ImportMode(Enum):
class ImportPathMismatchError(ImportError):
def import_path(
def _import_module_using_spec(
def spec_matches_module_path(module_spec: ModuleSpec | None, module_path: Path) -> bool:
def module_name_from_path(path: Path, root: Path) -> str:
def insert_missing_modules(modules: dict[str, ModuleType], module_name: str) -> None:
def resolve_package_path(path: Path) -> Path | None:
def resolve_pkg_root_and_module_name(
def is_importable(module_name: str, module_path: Path) -> bool:
def compute_module_name(root: Path, module_path: Path) -> str | None:
class CouldNotResolvePathError(Exception):
def scandir(
def visit(
def absolutepath(path: str | os.PathLike[str]) -> Path:
def commonpath(path1: Path, path2: Path) -> Path | None:
def bestrelpath(directory: Path, dest: Path) -> str:
def safe_exists(p: Path) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\pytester.py
-----------------------------
> """(Disabled by default) support for testing pytest and pytest plugins.
  
  PYTEST_DONT_REWRITE
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
class LsofFdLeakChecker:
def _pytest(request: FixtureRequest) -> PytestArg:
class PytestArg:
def get_public_names(values: Iterable[str]) -> list[str]:
class RecordedHookCall:
class HookRecorder:
def linecomp() -> LineComp:
def LineMatcher_fixture(request: FixtureRequest) -> type[LineMatcher]:
def pytester(
def _sys_snapshot() -> Generator[None]:
def _config_for_test() -> Generator[Config]:
class RunResult:
class SysModulesSnapshot:
class SysPathsSnapshot:
class Pytester:
class LineComp:
class LineMatcher:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\pytester_assertions.py
-----------------------------
> """Helper plugin for pytester; should not be loaded on its own."""
  
  # This plugin contains assertions used by pytester. pytester cannot
  # contain them itself, since it is imported by the `pytest` module,
def assertoutcome(
def assert_outcomes(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\python.py
-----------------------------
> """Python test discovery, setup and run of test functions."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_generate_tests(metafunc: Metafunc) -> None:
def pytest_configure(config: Config) -> None:
def async_fail(nodeid: str) -> None:
def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:
def pytest_collect_directory(
def pytest_collect_file(file_path: Path, parent: nodes.Collector) -> Module | None:
def path_matches_patterns(path: Path, patterns: Iterable[str]) -> bool:
def pytest_pycollect_makemodule(module_path: Path, parent) -> Module:
def pytest_pycollect_makeitem(
class PyobjMixin(nodes.Node):
class _EmptyClass: pass  # noqa: E701
class PyCollector(PyobjMixin, nodes.Collector, abc.ABC):
def importtestmodule(
class Module(nodes.File, PyCollector):
class Package(nodes.Directory):
def _call_with_optional_argument(func, arg) -> None:
def _get_first_non_fixture_func(obj: object, names: Iterable[str]) -> object | None:
class Class(PyCollector):
def hasinit(obj: object) -> bool:
def hasnew(obj: object) -> bool:
class IdMaker:
class CallSpec2:
def get_direct_param_fixture_func(request: FixtureRequest) -> Any:
class Metafunc:
def _find_parametrized_scope(
def _ascii_escaped_by_config(val: str | bytes, config: Config | None) -> str:
class Function(PyobjMixin, nodes.Item):
class FunctionDefinition(Function):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\python_api.py
-----------------------------
>     """Provide shared utilities for making approximate comparisons between
def _compare_approx(
class ApproxBase:
def _recursive_sequence_map(f, x):
class ApproxNumpy(ApproxBase):
class ApproxMapping(ApproxBase):
class ApproxSequenceLike(ApproxBase):
class ApproxScalar(ApproxBase):
class ApproxDecimal(ApproxScalar):
def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:
def _is_sequence_like(expected: object) -> bool:
def _is_numpy_array(obj: object) -> bool:
def _as_numpy_array(obj: object) -> ndarray | None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\raises.py
-----------------------------
>     r"""Assert that a code block/function call raises an exception type, or one of its 
subclasses.
  
      :param expected_exception:
          The expected exception type, or a tuple if one of multiple possible
def raises(
def raises(
def raises(*, check: Callable[[BaseException], bool]) -> RaisesExc[BaseException]: ...
def raises(
def raises(
def _match_pattern(match: Pattern[str]) -> str | Pattern[str]:
def repr_callable(fun: Callable[[BaseExcT_1], bool]) -> str:
def backquote(s: str) -> str:
def _exception_type_name(
def _check_raw_type(
def is_fully_escaped(s: str) -> bool:
def unescape(s: str) -> str:
class AbstractRaises(ABC, Generic[BaseExcT_co]):
class RaisesExc(AbstractRaises[BaseExcT_co_default]):
class RaisesGroup(AbstractRaises[BaseExceptionGroup[BaseExcT_co]]):
class NotChecked:
class ResultHolder:
def possible_match(results: ResultHolder, used: set[int] | None = None) -> bool:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\recwarn.py
-----------------------------
> """Record warnings during test function execution."""
  
  from __future__ import annotations
  
def recwarn() -> Generator[WarningsRecorder]:
def deprecated_call(
def deprecated_call(func: Callable[..., T], *args: Any, **kwargs: Any) -> T: ...
def deprecated_call(
def warns(
def warns(
def warns(
class WarningsRecorder(warnings.catch_warnings):  # type:ignore[type-arg]
class WarningsChecker(WarningsRecorder):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\reports.py
-----------------------------
>         """Read-only property that returns the full string representation of
          ``longrepr``.
  
          .. versionadded:: 3.0
def getworkerinfoline(node):
class BaseReport:
def _report_unserialization_failure(
class TestReport(BaseReport):
class CollectReport(BaseReport):
class CollectErrorRepr(TerminalRepr):
def pytest_report_to_serializable(
def pytest_report_from_serializable(
def _report_to_json(report: BaseReport) -> dict[str, Any]:
def _report_kwargs_from_json(reportdict: dict[str, Any]) -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\runner.py
-----------------------------
> """Basic collect and runtest protocol implementations."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:
def pytest_sessionstart(session: Session) -> None:
def pytest_sessionfinish(session: Session) -> None:
def pytest_runtest_protocol(item: Item, nextitem: Item | None) -> bool:
def runtestprotocol(
def show_test_item(item: Item) -> None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:
def _update_current_test_var(
def pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str] | None:
def call_and_report(
def check_interactive_exception(call: CallInfo[object], report: BaseReport) -> bool:
class CallInfo(Generic[TResult]):
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> TestReport:
def pytest_make_collect_report(collector: Collector) -> CollectReport:
class SetupState:
def collect_one_node(collector: Collector) -> CollectReport:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\scope.py
-----------------------------
> """
  Scope definition and related utilities.
  
  Those are defined here, instead of in the 'fixtures' module because
class Scope(Enum):

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\setuponly.py
-----------------------------
def pytest_addoption(parser: Parser) -> None:
def pytest_fixture_setup(
def pytest_fixture_post_finalizer(
def _show_fixture_action(
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\setupplan.py
-----------------------------
def pytest_addoption(parser: Parser) -> None:
def pytest_fixture_setup(
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\skipping.py
-----------------------------
> """Support for skip/xfail functions and markers."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def evaluate_condition(item: Item, mark: Mark, condition: object) -> tuple[bool, str]:
class Skip:
def evaluate_skip_marks(item: Item) -> Skip | None:
class Xfail:
def evaluate_xfail_marks(item: Item) -> Xfail | None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> Generator[None]:
def pytest_runtest_makereport(
def pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str] | None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\stash.py
-----------------------------
>     """``StashKey`` is an object used as a key to a :class:`Stash`.
  
      A ``StashKey`` is associated with the type ``T`` of the value of the key.
  
class StashKey(Generic[T]):
class Stash:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\stepwise.py
-----------------------------
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_sessionfinish(session: Session) -> None:
class StepwiseCacheInfo:
class StepwisePlugin:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\terminal.py
-----------------------------
> """Terminal reporting of the full testing process.
  
  This is a good source for looking at the various reporting hooks.
class MoreQuietAction(argparse.Action):
class TestShortLogReport(NamedTuple):
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def getreportopt(config: Config) -> str:
def pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str]:
class WarningReport:
class TerminalReporter:
def _get_node_id_with_markup(tw: TerminalWriter, config: Config, rep: BaseReport):
def _format_trimmed(format: str, msg: str, available_width: int) -> str | None:
def _get_line_with_reprcrash_message(
def _folded_skips(
def pluralize(count: int, noun: str) -> tuple[int, str]:
def _plugin_nameversions(plugininfo) -> list[str]:
def format_session_duration(seconds: float) -> str:
def format_node_duration(seconds: float) -> str:
def _get_raw_skip_reason(report: TestReport) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\threadexception.py
-----------------------------
class ThreadExceptionMeta(NamedTuple):
def collect_thread_exception(config: Config) -> None:
def cleanup(
def thread_exception_hook(
def pytest_configure(config: Config) -> None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\timing.py
-----------------------------
> """Indirection for time functions.
  
  We intentionally grab some "time" functions internally to avoid tests mocking "time" to 
affect
  pytest runtime information (issue #185).
class Instant:
class Duration:
class MockTiming:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\tmpdir.py
-----------------------------
> """Support for providing temporary directories to test functions."""
  
  from __future__ import annotations
  
class TempPathFactory:
def get_user() -> str | None:
def pytest_configure(config: Config) -> None:
def pytest_addoption(parser: Parser) -> None:
def tmp_path_factory(request: FixtureRequest) -> TempPathFactory:
def _mk_tmp(request: FixtureRequest, factory: TempPathFactory) -> Path:
def tmp_path(
def pytest_sessionfinish(session, exitstatus: int | ExitCode):
def pytest_runtest_makereport(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\tracemalloc.py
-----------------------------
def tracemalloc_message(source: object) -> str:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\unittest.py
-----------------------------
> """Discover and run std-library "unittest" style tests."""
  
  from __future__ import annotations
  
def pytest_pycollect_makeitem(
class UnitTestCase(Class):
class TestCaseFunction(Function):
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> None:
def _is_skipped(obj) -> bool:
def pytest_configure() -> None:
class TwistedVersion(Enum):
def _get_twisted_version() -> TwistedVersion:
def pytest_runtest_protocol(item: Item) -> Iterator[None]:
def _handle_twisted_exc_info(

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\unraisableexception.py
-----------------------------
def gc_collect_harder(iterations: int) -> None:
class UnraisableMeta(NamedTuple):
def collect_unraisable(config: Config) -> None:
def cleanup(
def unraisable_hook(
def pytest_configure(config: Config) -> None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\warnings.py
-----------------------------
>     """Context manager that catches warnings generated in the contained execution block.
  
      ``item`` can be None if we are not in the context of an item execution.
  
def catch_warnings_for_item(
def warning_record_to_str(warning_message: warnings.WarningMessage) -> str:
def pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:
def pytest_collection(session: Session) -> Generator[None, object, object]:
def pytest_terminal_summary(
def pytest_sessionfinish(session: Session) -> Generator[None]:
def pytest_load_initial_conftests(
def pytest_configure(config: Config) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\warning_types.py
-----------------------------
>     """Base class for all warnings emitted by pytest."""
  
      __module__ = "pytest"
  
class PytestWarning(UserWarning):
class PytestAssertRewriteWarning(PytestWarning):
class PytestCacheWarning(PytestWarning):
class PytestConfigWarning(PytestWarning):
class PytestCollectionWarning(PytestWarning):
class PytestDeprecationWarning(PytestWarning, DeprecationWarning):
class PytestRemovedIn9Warning(PytestDeprecationWarning):
class PytestExperimentalApiWarning(PytestWarning, FutureWarning):
class PytestReturnNotNoneWarning(PytestWarning):
class PytestUnknownMarkWarning(PytestWarning):
class PytestUnraisableExceptionWarning(PytestWarning):
class PytestUnhandledThreadExceptionWarning(PytestWarning):
class UnformattedWarning(Generic[_W]):
class PytestFDWarning(PytestWarning):
def warn_explicit_for(method: FunctionType, message: PytestWarning) -> None:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_argcomplete.py
-----------------------------
> """Allow bash-completion for argparse with argcomplete if installed.
  
  Needs argcomplete>=0.5.6 for python 3.2/3.3 (older versions fail
  to find the magic string, so _ARGCOMPLETE env. var is never set, and
class FastFilesCompleter:

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\_pytest\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\py.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.mutenv\Lib\site-packages\typing_extensions.py
-----------------------------
>         """Special type indicating an unconstrained type.
          - Any is compatible with every type.
          - Any assumed to have all methods.
          - All values assumed to be instances of Any.
class _Sentinel:
class _SpecialForm(typing._Final, _root=True):
class _ExtensionsSpecialForm(typing._SpecialForm, _root=True):
def IntVar(name):
def _get_protocol_attrs(cls):
def _caller(depth=1, default='__main__'):
def _set_default(type_param, default):
def _set_module(typevarlike):
class _DefaultMixin:
class _TypeVarLikeMeta(type):
class _EllipsisDummy: ...
def _create_concatenate_alias(origin, parameters):
def _concatenate_getitem(self, parameters):
def _unpack_args(*args):
def _has_generic_or_protocol_as_origin() -> bool:
def _is_unpacked_typevartuple(x) -> bool:
class Sentinel:

C:\Users\monee\Desktop\Project Slum\.mutenv\Scripts\coverage-3.11-script.py
-----------------------------
def importlib_load_entry_point(spec, group, name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Scripts\coverage-script.py
-----------------------------
def importlib_load_entry_point(spec, group, name):

C:\Users\monee\Desktop\Project Slum\.mutenv\Scripts\coverage3-script.py
-----------------------------
def importlib_load_entry_point(spec, group, name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\autogenerate\api.py
-----------------------------
> """Provide the 'autogenerate' feature which can produce migration operations
def compare_metadata(context: MigrationContext, metadata: MetaData) -> Any:
def produce_migrations(
def render_python_code(
def _render_migration_diffs(
class AutogenContext:
class RevisionContext:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\autogenerate\compare.py
-----------------------------
>     """we want to warn if a computed sql expression has changed.  however
      we don't want false positives and the warning is not that critical.
      so filter out most forms of variability from the SQL text.
  
def _populate_migration_script(
def _produce_net_changes(
def _autogen_for_tables(
def _compare_tables(
def _make_index(
def _make_unique_constraint(
def _make_foreign_key(
def _compare_columns(
class _InspectorConv:
def _compare_indexes_and_uniques(
def _correct_for_uq_duplicates_uix(
def _compare_nullable(
def _setup_autoincrement(
def _compare_type(
def _render_server_default_for_compare(
def _normalize_computed_default(sqltext: str) -> str:
def _compare_computed_default(
def _warn_computed_not_supported(tname: str, cname: str) -> None:
def _compare_identity_default(
def _compare_server_default(
def _compare_column_comment(
def _compare_foreign_keys(
def _compare_table_comment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\autogenerate\render.py
-----------------------------
>     """produce a __repr__() object for a string identifier that may
      use quoted_name() in SQLAlchemy 0.9 and greater.
  
      The issue worked around here is that quoted_name() doesn't have
def _render_gen_name(
def _indent(text: str) -> str:
def _render_python_into_templatevars(
def _render_cmd_body(
def render_op(
def render_op_text(
def _render_modify_table(
def _render_create_table_comment(
def _render_drop_table_comment(
def _add_table(autogen_context: AutogenContext, op: ops.CreateTableOp) -> str:
def _drop_table(autogen_context: AutogenContext, op: ops.DropTableOp) -> str:
def _render_dialect_kwargs_items(
def _add_index(autogen_context: AutogenContext, op: ops.CreateIndexOp) -> str:
def _drop_index(autogen_context: AutogenContext, op: ops.DropIndexOp) -> str:
def _add_unique_constraint(
def _add_fk_constraint(
def _add_pk_constraint(constraint, autogen_context):
def _add_check_constraint(constraint, autogen_context):
def _drop_constraint(
def _add_column(autogen_context: AutogenContext, op: ops.AddColumnOp) -> str:
def _drop_column(autogen_context: AutogenContext, op: ops.DropColumnOp) -> str:
def _alter_column(
class _f_name:
def _ident(name: Optional[Union[quoted_name, str]]) -> Optional[str]:
def _render_potential_expr(
def _get_index_rendered_expressions(
def _uq_constraint(
def _user_autogenerate_prefix(autogen_context, target):
def _sqlalchemy_autogenerate_prefix(autogen_context: AutogenContext) -> str:
def _alembic_autogenerate_prefix(autogen_context: AutogenContext) -> str:
def _user_defined_render(
def _render_column(
def _should_render_server_default_positionally(server_default: Any) -> bool:
def _render_server_default(
def _render_computed(
def _render_identity(
def _render_fetched_value(autogen_context: AutogenContext) -> str:
def _repr_type(
def _render_ARRAY_type(type_: ARRAY, autogen_context: AutogenContext) -> str:
def _render_Variant_type(
def _render_type_w_subtype(
def _render_constraint(
def _render_primary_key(
def _fk_colspec(
def _populate_render_fk_opts(
def _render_foreign_key(
def _render_unique_constraint(
def _render_check_constraint(
def _execute_sql(autogen_context: AutogenContext, op: ops.ExecuteSQLOp) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\autogenerate\rewriter.py
-----------------------------
>     """A helper object that allows easy 'rewriting' of ops streams.
  
      The :class:`.Rewriter` object is intended to be passed along
      to the
class Rewriter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\autogenerate\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\base.py
-----------------------------
>     """Represent an ALTER TABLE statement.
  
      Only the string name and optional schema name of the table
      is required, not a full Table object.
class AlterTable(DDLElement):
class RenameTable(AlterTable):
class AlterColumn(AlterTable):
class ColumnNullable(AlterColumn):
class ColumnType(AlterColumn):
class ColumnName(AlterColumn):
class ColumnDefault(AlterColumn):
class ComputedColumnDefault(AlterColumn):
class IdentityColumnDefault(AlterColumn):
class AddColumn(AlterTable):
class DropColumn(AlterTable):
class ColumnComment(AlterColumn):
def visit_rename_table(
def visit_add_column(element: AddColumn, compiler: DDLCompiler, **kw) -> str:
def visit_drop_column(element: DropColumn, compiler: DDLCompiler, **kw) -> str:
def visit_column_nullable(
def visit_column_type(element: ColumnType, compiler: DDLCompiler, **kw) -> str:
def visit_column_name(element: ColumnName, compiler: DDLCompiler, **kw) -> str:
def visit_column_default(
def visit_computed_column(
def visit_identity_column(
def quote_dotted(
def format_table_name(
def format_column_name(
def format_server_default(
def format_type(compiler: DDLCompiler, type_: TypeEngine) -> str:
def alter_table(
def drop_column(
def alter_column(compiler: DDLCompiler, name: str) -> str:
def add_column(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\impl.py
-----------------------------
>     """Provide the entrypoint for major migration operations,
      including database-specific behavioral variances.
  
      While individual SQL/DDL constructs already provide
class ImplMeta(type):
class DefaultImpl(metaclass=ImplMeta):
class Params(NamedTuple):
def _compare_identity_options(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\mssql.py
-----------------------------
>     return """declare @const_name varchar(256)
  select @const_name = QUOTENAME([name]) from %(type)s
  where parent_object_id = object_id('%(schema_dot)s%(tname)s')
  and col_name(parent_object_id, parent_column_id) = '%(colname)s'
class MSSQLImpl(DefaultImpl):
class _ExecDropConstraint(Executable, ClauseElement):
class _ExecDropFKConstraint(Executable, ClauseElement):
def _exec_drop_col_constraint(
def _exec_drop_col_fk_constraint(
def visit_add_column(element: AddColumn, compiler: MSDDLCompiler, **kw) -> str:
def mssql_add_column(
def visit_column_nullable(
def visit_column_default(
def visit_rename_column(
def visit_column_type(
def visit_rename_table(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\mysql.py
-----------------------------
>     """Redefine SQLAlchemy's drop constraint to
class MySQLImpl(DefaultImpl):
class MariaDBImpl(MySQLImpl):
class MySQLAlterDefault(AlterColumn):
class MySQLChangeColumn(AlterColumn):
class MySQLModifyColumn(MySQLChangeColumn):
def _mysql_doesnt_support_individual(element, compiler, **kw):
def _mysql_alter_default(
def _mysql_modify_column(
def _mysql_change_column(
def _mysql_colspec(
def _mysql_drop_constraint(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\oracle.py
-----------------------------
class OracleImpl(DefaultImpl):
def visit_add_column(
def visit_column_nullable(
def visit_column_type(
def visit_column_name(
def visit_column_default(
def visit_column_comment(
def visit_rename_table(
def alter_column(compiler: OracleDDLCompiler, name: str) -> str:
def add_column(compiler: OracleDDLCompiler, column: Column[Any], **kw) -> str:
def visit_identity_column(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\postgresql.py
-----------------------------
>         """Render a SQL expression that is typically a server default,
          index expression, etc.
  
class PostgresqlImpl(DefaultImpl):
class PostgresqlColumnType(AlterColumn):
def visit_rename_table(
def visit_column_type(
def visit_column_comment(
def visit_identity_column(
class CreateExcludeConstraintOp(ops.AddConstraintOp):
def _add_exclude_constraint(
def _render_inline_exclude_constraint(
def _postgresql_autogenerate_prefix(autogen_context: AutogenContext) -> str:
def _exclude_constraint(
def _render_potential_column(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\sqlite.py
-----------------------------
>     """SQLite supports transactional DDL, but pysqlite does not:
      see: http://bugs.python.org/issue10740
class SQLiteImpl(DefaultImpl):
def visit_rename_table(
def visit_column_name(element: ColumnName, compiler: DDLCompiler, **kw) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\_autogen.py
-----------------------------
>         """the constraints are equal."""
          return cls("equal", "The two constraints are equal")
  
      @classmethod
class ComparisonResult(NamedTuple):
class _constraint_sig(Generic[_C]):
class _uq_constraint_sig(_constraint_sig[UniqueConstraint]):
class _ix_constraint_sig(_constraint_sig[Index]):
class _fk_constraint_sig(_constraint_sig[ForeignKeyConstraint]):
def is_index_sig(sig: _constraint_sig) -> TypeGuard[_ix_constraint_sig]:
def is_uq_sig(sig: _constraint_sig) -> TypeGuard[_uq_constraint_sig]:
def is_fk_sig(sig: _constraint_sig) -> TypeGuard[_fk_constraint_sig]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\ddl\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\operations\base.py
-----------------------------
>     """Base class for Operations and BatchOperations.
  
      .. versionadded:: 1.11.0
  
class AbstractOperations(util.ModuleClsProxy):
class Operations(AbstractOperations):
class BatchOperations(AbstractOperations):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\operations\batch.py
-----------------------------
>         """the batch table creation function will issue create_column_comment
          on the real "impl" as part of the create table process.
  
          That is, the Column object will have the comment on it already,
class BatchOperationsImpl:
class ApplyBatchImpl:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\operations\ops.py
-----------------------------
>     """base class for migration command and organization objects.
  
      This system is part of the operation extensibility API.
  
class MigrateOperation:
class AddConstraintOp(MigrateOperation):
class DropConstraintOp(MigrateOperation):
class CreatePrimaryKeyOp(AddConstraintOp):
class CreateUniqueConstraintOp(AddConstraintOp):
class CreateForeignKeyOp(AddConstraintOp):
class CreateCheckConstraintOp(AddConstraintOp):
class CreateIndexOp(MigrateOperation):
class DropIndexOp(MigrateOperation):
class CreateTableOp(MigrateOperation):
class DropTableOp(MigrateOperation):
class AlterTableOp(MigrateOperation):
class RenameTableOp(AlterTableOp):
class CreateTableCommentOp(AlterTableOp):
class DropTableCommentOp(AlterTableOp):
class AlterColumnOp(AlterTableOp):
class AddColumnOp(AlterTableOp):
class DropColumnOp(AlterTableOp):
class BulkInsertOp(MigrateOperation):
class ExecuteSQLOp(MigrateOperation):
class OpContainer(MigrateOperation):
class ModifyTableOps(OpContainer):
class UpgradeOps(OpContainer):
class DowngradeOps(OpContainer):
class MigrationScript(MigrateOperation):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\operations\schemaobj.py
-----------------------------
>         """create a placeholder Table object for the referent of a
          ForeignKey.
  
class SchemaObjects:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\operations\toimpl.py
-----------------------------
def alter_column(
def drop_table(operations: "Operations", operation: "ops.DropTableOp") -> None:
def drop_column(
def create_index(
def drop_index(operations: "Operations", operation: "ops.DropIndexOp") -> None:
def create_table(
def rename_table(
def create_table_comment(
def drop_table_comment(
def add_column(operations: "Operations", operation: "ops.AddColumnOp") -> None:
def create_constraint(
def drop_constraint(
def bulk_insert(
def execute_sql(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\operations\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\runtime\environment.py
-----------------------------
>     """A configurational facade made available in an ``env.py`` script.
  
      The :class:`.EnvironmentContext` acts as a *facade* to the more
      nuts-and-bolts objects of :class:`.MigrationContext` as well as certain
class EnvironmentContext(util.ModuleClsProxy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\runtime\migration.py
-----------------------------
>     """Represent the database state made available to a migration
      script.
  
      :class:`.MigrationContext` is the front end to an actual
class _ProxyTransaction:
class MigrationContext:
class HeadMaintainer:
class MigrationInfo:
class MigrationStep:
class RevisionStep(MigrationStep):
class StampStep(MigrationStep):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\runtime\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\script\base.py
-----------------------------
>     """Provides operations upon an Alembic script directory.
  
      This object is useful to get information as to current revisions,
      most notably being able to get at the "head" revision, for schemes
class ScriptDirectory:
class Script(revision.Revision):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\script\revision.py
-----------------------------
>     """Maintains a map of :class:`.Revision` objects.
  
      :class:`.RevisionMap` is used by :class:`.ScriptDirectory` to maintain
      and traverse the collection of :class:`.Script` objects, which are
class _CollectRevisionsProtocol(Protocol):
class RevisionError(Exception):
class RangeNotAncestorError(RevisionError):
class MultipleHeads(RevisionError):
class ResolutionError(RevisionError):
class CycleDetected(RevisionError):
class DependencyCycleDetected(CycleDetected):
class LoopDetected(CycleDetected):
class DependencyLoopDetected(DependencyCycleDetected, LoopDetected):
class RevisionMap:
class Revision:
def tuple_rev_as_scalar(rev: None) -> None: ...
def tuple_rev_as_scalar(
def tuple_rev_as_scalar(
def is_revision(rev: Any) -> Revision:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\script\write_hooks.py
-----------------------------
>     """A function decorator that will register that function as a write hook.
  
      See the documentation linked below for an example.
  
def register(name: str) -> Callable:
def _invoke(
def _run_hooks(
def _parse_cmdline_options(cmdline_options_str: str, path: str) -> List[str]:
def _get_required_option(options: dict, name: str) -> str:
def _run_hook(
def console_scripts(
def exec_(path: str, options: dict, ignore_output: bool = False) -> None:
def module(path: str, options: dict, ignore_output: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\script\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\templates\async\env.py
-----------------------------
>     """Run migrations in 'offline' mode.
  
      This configures the context with just a URL
      and not an Engine, though an Engine is acceptable
def run_migrations_offline() -> None:
def do_run_migrations(connection: Connection) -> None:
def run_migrations_online() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\templates\generic\env.py
-----------------------------
>     """Run migrations in 'offline' mode.
  
      This configures the context with just a URL
      and not an Engine, though an Engine is acceptable
def run_migrations_offline() -> None:
def run_migrations_online() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\templates\multidb\env.py
-----------------------------
>     """Run migrations in 'offline' mode.
  
      This configures the context with just a URL
      and not an Engine, though an Engine is acceptable
def run_migrations_offline() -> None:
def run_migrations_online() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\templates\pyproject\env.py
-----------------------------
>     """Run migrations in 'offline' mode.
  
      This configures the context with just a URL
      and not an Engine, though an Engine is acceptable
def run_migrations_offline() -> None:
def run_migrations_online() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\templates\pyproject_async\env.py
-----------------------------
>     """Run migrations in 'offline' mode.
  
      This configures the context with just a URL
      and not an Engine, though an Engine is acceptable
def run_migrations_offline() -> None:
def do_run_migrations(connection: Connection) -> None:
def run_migrations_online() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\plugin\bootstrap.py
-----------------------------
> """
  Bootstrapper for test framework plugins.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\plugin\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_autogen_comments.py
-----------------------------
class AutogenerateCommentsTest(AutogenFixtureTest, TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_autogen_computed.py
-----------------------------
class AutogenerateComputedTest(AutogenFixtureTest, TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_autogen_diffs.py
-----------------------------
class AlterColumnTest(AutogenFixtureTest, TestBase):
class AutoincrementTest(AutogenFixtureTest, TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_autogen_fks.py
-----------------------------
>         """test case sensitivity"""
          diffs = self._fk_opts_fixture(
              {"ondelete": "caSCAde"}, {"ondelete": "CasCade"}
          )
class AutogenerateForeignKeysTest(AutogenFixtureTest, TestBase):
class IncludeHooksTest(AutogenFixtureTest, TestBase):
class AutogenerateFKOptionsTest(AutogenFixtureTest, TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_autogen_identity.py
-----------------------------
class AutogenerateIdentityTest(AutogenFixtureTest, TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_environment.py
-----------------------------
class MigrationTransactionTest(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\test_op.py
-----------------------------
> """Test against the builders in the op.* module."""
  
  from sqlalchemy import Column
  from sqlalchemy import event
def _add_cols(table, metadata):
class BackendAlterColumnTest(AlterColRoundTripFixture, TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\_autogen_fixtures.py
-----------------------------
def new_table(table, parent):
def _default_include_object(obj, name, type_, reflected, compare_to):
class ModelOne:
class NamingConvModel:
class _ComparesFKs:
class AutogenTest(_ComparesFKs):
class AutogenFixtureTest(_ComparesFKs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\suite\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\assertions.py
-----------------------------
>     """assert that any exception we're catching does not have a __context__
      without a __cause__, and that __suppress_context__ is never set.
  
      Python 3 will report nested as exceptions as "during the handling of
def _assert_proper_exception_context(exception):
def assert_raises(except_cls, callable_, *args, **kw):
def assert_raises_context_ok(except_cls, callable_, *args, **kw):
def assert_raises_message(except_cls, msg, callable_, *args, **kwargs):
def assert_raises_message_context_ok(
def _assert_raises(
class _ErrorContainer:
def _expect_raises(
def expect_raises(except_cls, check_context=True):
def expect_raises_message(
def eq_ignore_whitespace(a, b, msg=None):
def _get_dialect(name):
def expect_warnings(*messages, **kw):
def emits_python_deprecation_warning(*messages):
def expect_deprecated(*messages, **kw):
def expect_sqlalchemy_deprecated(*messages, **kw):
def expect_sqlalchemy_deprecated_20(*messages, **kw):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\env.py
-----------------------------
>         """
  from alembic import context
  
  config = context.config
def _get_staging_directory():
def staging_env(create=True, template="generic", sourceless=False):
def clear_staging_env():
def script_file_fixture(txt):
def env_file_fixture(txt):
def _sqlite_file_db(tempname="foo.db", future=False, scope=None, **options):
def _sqlite_testing_config(sourceless=False, future=False):
def _multi_dir_testing_config(sourceless=False, extra_version_location=""):
def _no_sql_pyproject_config(dialect="postgresql", directives=""):
def _no_sql_testing_config(dialect="postgresql", directives=""):
def _write_toml_config(tomltext, initext):
def _write_config_file(text):
def _testing_config():
def write_script(
def make_sourceless(path, style):
def three_rev_fixture(cfg):
def upgrade():
def downgrade():
def upgrade():
def downgrade():
def upgrade():
def downgrade():
def multi_heads_fixture(cfg, a, b, c):
def upgrade():
def downgrade():
def upgrade():
def downgrade():
def upgrade():
def downgrade():
def _multidb_testing_config(engines):
def _join_path(base: str, *more: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\fixtures.py
-----------------------------
class TestBase(SQLAlchemyTestBase):
class TablesTest(TestBase, SQLAlchemyTablesTest):
def capture_db(dialect="postgresql://"):
def capture_context_buffer(**kw):
def capture_engine_context_buffer(**kw):
def op_fixture(
class AlterColRoundTripFixture:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\requirements.py
-----------------------------
>         """Target database must support external schemas, and have one
class SuiteRequirements(Requirements):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\schemacompare.py
-----------------------------
class CompareTable:
class CompareColumn:
class CompareIndex:
class CompareCheckConstraint:
class CompareForeignKey:
class ComparePrimaryKey:
class CompareUniqueConstraint:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\util.py
-----------------------------
>     """A facade around @testing.combinations() oriented towards boolean
      keyword-based arguments.
  
      Basically generates a nice looking identifier based on the keywords
def flag_combinations(*combinations):
def resolve_lambda(__fn, **kw):
def metadata_fixture(ddl="function"):
def _safe_int(value: str) -> Union[int, str]:
def testing_engine(url=None, options=None, future=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\warnings.py
-----------------------------
>     """Set global warning behavior for the test suite."""
  
      warnings.resetwarnings()
  
def setup_filters():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\testing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\compat.py
-----------------------------
>         """
          Calculate the relative path of 'path' with respect to 'other',
          optionally allowing 'path' to be outside the subtree of 'other'.
  
class EncodedIO(io.TextIOWrapper):
def importlib_metadata_get(group: str) -> Sequence[EntryPoint]:
def formatannotation_fwdref(
def read_config_parser(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\editor.py
-----------------------------
>     """
      Opens the given file in a text editor. If the environment variable
      ``EDITOR`` is set, this is taken as preference.
  
def open_in_editor(
def _find_editor(environ: Mapping[str, str]) -> str:
def _find_executable(
def _default_editors() -> List[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\exc.py
-----------------------------
class CommandError(Exception):
class AutogenerateDiffsDetected(CommandError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\langhelpers.py
-----------------------------
>     """Create module level proxy functions for the
      methods on a given class.
  
      The functions will have a compatible signature
class _ModuleClsMeta(type):
class ModuleClsProxy(metaclass=_ModuleClsMeta):
def _with_legacy_names(translations: Any) -> Any:
def rev_id() -> str:
def to_tuple(x: Any, default: Tuple[Any, ...]) -> Tuple[Any, ...]: ...
def to_tuple(x: None, default: Optional[_T] = ...) -> _T: ...
def to_tuple(
def to_tuple(
def dedupe_tuple(tup: Tuple[str, ...]) -> Tuple[str, ...]:
class Dispatcher:
def not_none(value: Optional[_T]) -> _T:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\messaging.py
-----------------------------
def write_outstream(
def status(
def err(message: str, quiet: bool = False) -> None:
def obfuscate_url_pw(input_url: str) -> str:
def warn(msg: str, stacklevel: int = 2) -> None:
def warn_deprecated(msg: str, stacklevel: int = 2) -> None:
def msg(
def format_as_comma(value: Optional[Union[str, Iterable[str]]]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\pyfiles.py
-----------------------------
>     """Interpret a filename as either a filesystem location or as a package
      resource.
  
      Names that are non absolute paths and contain a colon
def template_to_file(
def coerce_resource_to_filename(fname_or_resource: str) -> pathlib.Path:
def pyc_file_from_path(
def load_python_file(
def load_module_py(
def _preserving_path_as_str(path: Union[str, os.PathLike[str]]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\sqla_compat.py
-----------------------------
>     """locate Column objects within the given expression."""
  
      cols: Set[ColumnElement[Any]] = set()
      traverse(clause, {}, {"column": cols.add})
class _CompilerProtocol(Protocol):
def _safe_int(value: str) -> Union[int, str]:
def _get_identity_options_dict(
def constraint_name_defined(
def constraint_name_string(name: _ConstraintName) -> TypeGuard[str]:
def constraint_name_or_none(name: _ConstraintName) -> Optional[str]:
def _ensure_scope_for_ddl(
def _safe_begin_connection_transaction(
def _safe_commit_connection_transaction(
def _safe_rollback_connection_transaction(
def _get_connection_in_transaction(connection: Optional[Connection]) -> bool:
def _idx_table_bound_expressions(idx: Index) -> Iterable[ColumnElement[Any]]:
def _copy(schema_item: _CE, **kw) -> _CE:
def _connectable_has_table(
def _exec_on_inspector(inspector, statement, **params):
def _nullability_might_be_unset(metadata_column):
def _server_default_is_computed(*server_default) -> bool:
def _server_default_is_identity(*server_default) -> bool:
def _table_for_constraint(constraint: Constraint) -> Table:
def _columns_for_constraint(constraint):
def _resolve_for_variant(type_, dialect):
def _fk_spec(constraint: ForeignKeyConstraint) -> Any:
def _fk_is_self_referential(constraint: ForeignKeyConstraint) -> bool:
def _is_type_bound(constraint: Constraint) -> bool:
def _find_columns(clause):
def _remove_column_from_collection(
def _textual_index_column(
def _copy_expression(expression: _CE, target_table: Table) -> _CE:
class _textual_index_element(sql.ColumnElement):
def _render_textual_index_column(
class _literal_bindparam(BindParameter):
def _render_literal_bindparam(
def _get_constraint_final_name(
def _constraint_is_named(
def is_expression_index(index: Index) -> bool:
def is_expression(expr: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\command.py
-----------------------------
>     """List available templates.
  
      :param config: a :class:`.Config` object.
  
def list_templates(config: Config) -> None:
def init(
def revision(
def check(config: "Config") -> None:
def merge(
def upgrade(
def downgrade(
def show(config: Config, rev: str) -> None:
def history(
def heads(
def branches(config: Config, verbose: bool = False) -> None:
def current(config: Config, verbose: bool = False) -> None:
def stamp(
def edit(config: Config, rev: str) -> None:
def ensure_version(config: Config, sql: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\config.py
-----------------------------
>     r"""Represent an Alembic configuration.
  
      Within an ``env.py`` script, this is available
      via the :attr:`.EnvironmentContext.config` attribute,
class Config:
class MessagingOptions(TypedDict, total=False):
class CommandFunction(Protocol):
class CommandLine:
def main(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\context.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\environment.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\migration.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\op.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\alembic\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\expr\consts.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\expr\core.py
-----------------------------
>     """An object to assist in building Vega-Lite Expressions."""
  
      def __repr__(self) -> str:
          return "datum"
class DatumType:
def _js_repr(val) -> str:
def _from_date_datetime(obj: dt.date | dt.datetime, /) -> str:
class OperatorMixin:
class Expression(OperatorMixin, SchemaBase):
class UnaryExpression(Expression):
class BinaryExpression(Expression):
class FunctionExpression(Expression):
class ConstExpression(Expression):
class GetAttrExpression(Expression):
class GetItemExpression(Expression):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\expr\funcs.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\expr\__init__.py
-----------------------------
> """Tools for creating transform & filter expressions with a python syntax."""
  
  from __future__ import annotations
  
class _ExprMeta(type):
class expr(_ExprRef, metaclass=_ExprMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\jupyter\jupyter_chart.py
-----------------------------
>     """Traitlet class storing a JupyterChart's params."""
  
      def __init__(self, trait_values):
          super().__init__()
class Params(traitlets.HasTraits):
class Selections(traitlets.HasTraits):
def load_js_src() -> str:
class JupyterChart(anywidget.AnyWidget):
def collect_transform_params(chart: TopLevelSpec) -> set[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\jupyter\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\typing\__init__.py
-----------------------------
> """Public types to ease integrating with `altair`."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\compiler.py
-----------------------------
class VegaLiteCompilerRegistry(PluginRegistry[VegaLiteCompilerType, dict[str, Any]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\core.py
-----------------------------
> """Utility routines."""
  
  from __future__ import annotations
  
class DataFrameLike(Protocol):
def infer_vegalite_type_for_pandas(
def merge_props_geom(feat: dict[str, Any]) -> dict[str, Any]:
def sanitize_geo_interface(geo: t.MutableMapping[Any, Any]) -> dict[str, Any]:
def numpy_is_subtype(dtype: Any, subtype: Any) -> bool:
def sanitize_pandas_dataframe(df: pd.DataFrame) -> pd.DataFrame:  # noqa: C901
def sanitize_narwhals_dataframe(
def to_eager_narwhals_dataframe(data: IntoDataFrame) -> nw.DataFrame[Any]:
def parse_shorthand(  # noqa: C901
def infer_vegalite_type_for_narwhals(
def use_signature(tp: Callable[P, Any], /):
def update_nested(
def update_nested(
def update_nested(
def display_traceback(in_ipython: bool = True):
class _ChannelCache:
def _init_channel_to_name():
def _invert_group_channels(
def infer_encoding_types(args: tuple[Any, ...], kwargs: dict[str, Any]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\data.py
-----------------------------
>     """Raised when a data model has too many rows."""
  
  
  @overload
class SupportsGeoInterface(Protocol):
def is_data_type(obj: Any) -> TypeIs[DataType]:
class DataTransformerRegistry(PluginRegistry[DataTransformerType, R]):
class MaxRowsError(Exception):
def limit_rows(data: None = ..., max_rows: int | None = ...) -> partial: ...
def limit_rows(data: DataType, max_rows: int | None = ...) -> DataType: ...
def limit_rows(
def sample(
def sample(
def sample(
def sample(
class _FormatDict(TypedDict):
class _ToFormatReturnUrlDict(TypedDict):
def to_json(
def to_json(
def to_json(
def to_csv(
def to_csv(
def to_csv(
def _to_text(
def _to_text_kwds(prefix: str, extension: str, filename: str, urlpath: str, /) -> dict[str, str]:  # fmt: skip
def to_values(data: DataType) -> ToValuesReturnType:
def check_data_type(data: DataType) -> None:
def _compute_data_hash(data_str: str) -> str:
def _from_geo_interface(data: SupportsGeoInterface | Any) -> dict[str, Any]:
def _data_to_json_string(data: DataType) -> str:
def _data_to_csv_string(data: DataType) -> str:
def arrow_table_from_dfi_dataframe(dfi_df: DataFrameLike) -> pa.Table:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\deprecation.py
-----------------------------
>     """
      Indicate that a class, function or overload is deprecated.
  
      When this decorator is applied to an object, the type checker
class AltairDeprecationWarning(DeprecationWarning): ...
def _format_message(
def deprecated(
def deprecated_warn(
class _WarningsMonitor:
def _warn_once(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\display.py
-----------------------------
>             """
              To use the 'notebook' renderer, you must install the vega package
              and the associated Jupyter extension.
              See https://altair-viz.github.io/getting_started/installation.html
class RendererRegistry(PluginRegistry[RendererType, MimeBundleType]):
class Displayable:
def default_renderer_base(
def json_renderer_base(
class HTMLRenderer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\execeval.py
-----------------------------
>     """Class to temporarily catch sys.displayhook."""
  
      def __init__(self) -> None:
          self.output: Any | None = None
class _CatchDisplay:
def eval_block(
def eval_block(
def eval_block(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\html.py
-----------------------------
>     """
  {%- if fullhtml -%}
  <!DOCTYPE html>
  <html>
def spec_to_html(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\mimebundle.py
-----------------------------
>     """
      Convert a vega-lite specification to a mimebundle.
  
      The mimebundle type is controlled by the ``format`` argument, which can be
def spec_to_mimebundle(
def spec_to_mimebundle(
def spec_to_mimebundle(
def spec_to_mimebundle(
def spec_to_mimebundle(
def _spec_to_mimebundle_with_engine(
def _validate_normalize_engine(
def _pngxy(data):
def preprocess_embed_options(embed_options: dict) -> dict:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\plugin_registry.py
-----------------------------
>     """
      Converts a type to guard function.
  
      Added for compatibility with original `PluginRegistry` default.
def _is_type(tp: type[T], /) -> Callable[[object], TypeIs[type[T]]]:
class NoSuchEntryPoint(Exception):
class PluginEnabler(Generic[PluginT, R]):
class PluginRegistry(Generic[PluginT, R]):
def importlib_metadata_get(group):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\save.py
-----------------------------
>     """Write content to fp, whether fp is a string, a pathlib Path or a file-like object."""
      if isinstance(fp, (str, pathlib.Path)):
          with pathlib.Path(fp).open(mode=mode, encoding=encoding) as f:
              f.write(content)
def write_file_or_filename(
def set_inspect_format_argument(
def set_inspect_mode_argument(
def save(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\schemapi.py
-----------------------------
>     """
      Validates the passed in spec against the schema in the context of the rootschema.
  
      If any errors are found, they are deduplicated and prioritized
def enable_debug_mode() -> None:
def disable_debug_mode() -> None:
def debug_mode(arg: bool) -> Iterator[None]:
def validate_jsonschema(
def validate_jsonschema(
def validate_jsonschema(
def _get_errors_from_spec(
def _get_json_schema_draft_url(schema: dict[str, Any]) -> str:
def _use_referencing_library() -> bool:
def _prepare_references_in_schema(schema: dict[str, Any]) -> dict[str, Any]:
def _get_referencing_registry(
def _json_path(err: jsonschema.exceptions.ValidationError) -> str:
def _group_errors_by_json_path(
def _get_leaves_of_error_tree(
def _subset_to_most_specific_json_paths(
def _contained_at_start_of_one_of_other_values(x: str, values: Sequence[str]) -> bool:
def _deduplicate_errors(
def _is_required_value_error(err: jsonschema.exceptions.ValidationError) -> bool:
def _group_errors_by_validator(errors: ValidationErrorList) -> GroupedValidationErrors:
def _deduplicate_enum_errors(errors: ValidationErrorList) -> ValidationErrorList:
def _deduplicate_additional_properties_errors(
def _deduplicate_by_message(errors: ValidationErrorList) -> ValidationErrorList:
def _subclasses(cls: type[Any]) -> Iterator[type[Any]]:
def _from_array_like(obj: Iterable[Any], /) -> list[Any]:
def _from_date_datetime(obj: dt.date | dt.datetime, /) -> dict[str, Any]:
def _todict(obj: Any, context: dict[str, Any] | None, np_opt: Any, pd_opt: Any) -> Any:  # noqa: C901
def _resolve_references(
class SchemaValidationError(jsonschema.ValidationError):
class SchemaLike(Generic[_JSON_VT_co], Protocol):  # type: ignore[misc]
class ConditionLike(SchemaLike[Literal["object"]], Protocol):
class UndefinedType:
def is_undefined(obj: Any) -> TypeIs[UndefinedType]:
def _shallow_copy(obj: _CopyImpl) -> _CopyImpl: ...
def _shallow_copy(obj: Any) -> Any: ...
def _shallow_copy(obj: _CopyImpl | Any) -> _CopyImpl | Any:
def _deep_copy(obj: _CopyImpl, by_ref: set[str]) -> _CopyImpl: ...
def _deep_copy(obj: Any, by_ref: set[str]) -> Any: ...
def _deep_copy(obj: _CopyImpl | Any, by_ref: set[str]) -> _CopyImpl | Any:
class SchemaBase:
def _get_optional_modules(**modules: str) -> dict[str, _OptionalModule]:
def _replace_parsed_shorthand(
def _is_dict(obj: Any | dict[Any, Any]) -> TypeIs[dict[Any, Any]]:
def _is_list(obj: Any | list[Any]) -> TypeIs[list[Any]]:
def _is_iterable(
def _passthrough(*args: Any, **kwds: Any) -> Any | dict[str, Any]:
class _FromDict:
class _PropertySetter:
def with_property_setters(cls: type[TSchemaBase]) -> type[TSchemaBase]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\selection.py
-----------------------------
>     """
      Represents the state of an alt.selection_point() when neither the fields nor encodings 
arguments are specified.
  
      The value field is a list of zero-based indices into the
class IndexSelection:
class PointSelection:
class IntervalSelection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\server.py
-----------------------------
> """
  A Simple server used to show altair graphics from a prompt or script.
  
  This is adapted from the mpld3 package; see
class MockRequest:
class MockServer:
def generate_handler(html, files=None):
def find_open_port(ip, port, n=50):
def serve(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\_dfi_types.py
-----------------------------
>     """
      Integer enum for data types.
  
      Attributes
class DtypeKind(enum.IntEnum):
class Column(Protocol):
class DataFrame(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\_importers.py
-----------------------------
def import_vegafusion() -> ModuleType:
def import_vl_convert() -> ModuleType:
def vl_version_for_vl_convert() -> str:
def import_pyarrow_interchange() -> ModuleType:
def pyarrow_available() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\_show.py
-----------------------------
>     """
      Display an html document in a web browser without creating a temp file.
  
      Instantiates a simple http server and uses the webbrowser module to
def open_html_in_browser(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\_transformed_data.py
-----------------------------
>     """
      Evaluate a Chart's transforms.
  
      Evaluate the data transforms associated with a Chart and return the
def transformed_data(
def transformed_data(
def transformed_data(chart, row_limit=None, exclude=None):
def name_views(
def get_group_mark_for_scope(
def get_datasets_for_scope(vega_spec: dict[str, Any], scope: Scope) -> list[str]:
def get_definition_scope_for_data_reference(
def get_facet_mapping(group: dict[str, Any], scope: Scope = ()) -> FacetMapping:
def get_from_facet_mapping(
def get_datasets_for_view_names(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\_vegafusion_data.py
-----------------------------
>     """VegaFusion Data Transformer."""
      if data is None:
          return vegafusion_data_transformer
  
class _ToVegaFusionReturnUrlDict(TypedDict):
def vegafusion_data_transformer(
def vegafusion_data_transformer(
def vegafusion_data_transformer(
def vegafusion_data_transformer(
def get_inline_table_names(vega_spec: dict[str, Any]) -> set[str]:
def get_inline_tables(vega_spec: dict[str, Any]) -> dict[str, DataFrameLike]:
def compile_to_vegafusion_chart_state(
def compile_with_vegafusion(vegalite_spec: dict[str, Any]) -> dict[str, Any]:
def handle_row_limit_exceeded(row_limit: int, warnings: list):
def using_vegafusion() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\utils\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\schema\channels.py
-----------------------------
>     r"""
      Angle schema wrapper.
  
      Parameters
class FieldChannelMixin:
class ValueChannelMixin:
class DatumChannelMixin:
class Angle(FieldChannelMixin, core.FieldOrDatumDefWithConditionMarkPropFieldDefnumber):
class AngleDatum(DatumChannelMixin, core.FieldOrDatumDefWithConditionDatumDefnumber):
class AngleValue(
class Color(
class ColorDatum(
class ColorValue(
class Column(FieldChannelMixin, core.RowColumnEncodingFieldDef):
class Description(FieldChannelMixin, core.StringFieldDefWithCondition):
class DescriptionValue(ValueChannelMixin, core.StringValueDefWithCondition):
class Detail(FieldChannelMixin, core.FieldDefWithoutScale):
class Facet(FieldChannelMixin, core.FacetEncodingFieldDef):
class Fill(
class FillDatum(
class FillValue(
class FillOpacity(
class FillOpacityDatum(
class FillOpacityValue(
class Href(FieldChannelMixin, core.StringFieldDefWithCondition):
class HrefValue(ValueChannelMixin, core.StringValueDefWithCondition):
class Key(FieldChannelMixin, core.FieldDefWithoutScale):
class Latitude(FieldChannelMixin, core.LatLongFieldDef):
class LatitudeDatum(DatumChannelMixin, core.DatumDef):
class Latitude2(FieldChannelMixin, core.SecondaryFieldDef):
class Latitude2Datum(DatumChannelMixin, core.DatumDef):
class Latitude2Value(ValueChannelMixin, core.PositionValueDef):
class Longitude(FieldChannelMixin, core.LatLongFieldDef):
class LongitudeDatum(DatumChannelMixin, core.DatumDef):
class Longitude2(FieldChannelMixin, core.SecondaryFieldDef):
class Longitude2Datum(DatumChannelMixin, core.DatumDef):
class Longitude2Value(ValueChannelMixin, core.PositionValueDef):
class Opacity(
class OpacityDatum(DatumChannelMixin, core.FieldOrDatumDefWithConditionDatumDefnumber):
class OpacityValue(
class Order(FieldChannelMixin, core.OrderFieldDef):
class OrderValue(ValueChannelMixin, core.OrderValueDef):
class Radius(FieldChannelMixin, core.PositionFieldDefBase):
class RadiusDatum(DatumChannelMixin, core.PositionDatumDefBase):
class RadiusValue(ValueChannelMixin, core.PositionValueDef):
class Radius2(FieldChannelMixin, core.SecondaryFieldDef):
class Radius2Datum(DatumChannelMixin, core.DatumDef):
class Radius2Value(ValueChannelMixin, core.PositionValueDef):
class Row(FieldChannelMixin, core.RowColumnEncodingFieldDef):
class Shape(
class ShapeDatum(
class ShapeValue(
class Size(FieldChannelMixin, core.FieldOrDatumDefWithConditionMarkPropFieldDefnumber):
class SizeDatum(DatumChannelMixin, core.FieldOrDatumDefWithConditionDatumDefnumber):
class SizeValue(
class Stroke(
class StrokeDatum(
class StrokeValue(
class StrokeDash(
class StrokeDashDatum(
class StrokeDashValue(
class StrokeOpacity(
class StrokeOpacityDatum(
class StrokeOpacityValue(
class StrokeWidth(
class StrokeWidthDatum(
class StrokeWidthValue(
class Text(FieldChannelMixin, core.FieldOrDatumDefWithConditionStringFieldDefText):
class TextDatum(DatumChannelMixin, core.FieldOrDatumDefWithConditionStringDatumDefText):
class TextValue(ValueChannelMixin, core.ValueDefWithConditionStringFieldDefText):
class Theta(FieldChannelMixin, core.PositionFieldDefBase):
class ThetaDatum(DatumChannelMixin, core.PositionDatumDefBase):
class ThetaValue(ValueChannelMixin, core.PositionValueDef):
class Theta2(FieldChannelMixin, core.SecondaryFieldDef):
class Theta2Datum(DatumChannelMixin, core.DatumDef):
class Theta2Value(ValueChannelMixin, core.PositionValueDef):
class Tooltip(FieldChannelMixin, core.StringFieldDefWithCondition):
class TooltipValue(ValueChannelMixin, core.StringValueDefWithCondition):
class Url(FieldChannelMixin, core.StringFieldDefWithCondition):
class UrlValue(ValueChannelMixin, core.StringValueDefWithCondition):
class X(FieldChannelMixin, core.PositionFieldDef):
class XDatum(DatumChannelMixin, core.PositionDatumDef):
class XValue(ValueChannelMixin, core.PositionValueDef):
class X2(FieldChannelMixin, core.SecondaryFieldDef):
class X2Datum(DatumChannelMixin, core.DatumDef):
class X2Value(ValueChannelMixin, core.PositionValueDef):
class XError(FieldChannelMixin, core.SecondaryFieldDef):
class XErrorValue(ValueChannelMixin, core.ValueDefnumber):
class XError2(FieldChannelMixin, core.SecondaryFieldDef):
class XError2Value(ValueChannelMixin, core.ValueDefnumber):
class XOffset(FieldChannelMixin, core.ScaleFieldDef):
class XOffsetDatum(DatumChannelMixin, core.ScaleDatumDef):
class XOffsetValue(ValueChannelMixin, core.ValueDefnumber):
class Y(FieldChannelMixin, core.PositionFieldDef):
class YDatum(DatumChannelMixin, core.PositionDatumDef):
class YValue(ValueChannelMixin, core.PositionValueDef):
class Y2(FieldChannelMixin, core.SecondaryFieldDef):
class Y2Datum(DatumChannelMixin, core.DatumDef):
class Y2Value(ValueChannelMixin, core.PositionValueDef):
class YError(FieldChannelMixin, core.SecondaryFieldDef):
class YErrorValue(ValueChannelMixin, core.ValueDefnumber):
class YError2(FieldChannelMixin, core.SecondaryFieldDef):
class YError2Value(ValueChannelMixin, core.ValueDefnumber):
class YOffset(FieldChannelMixin, core.ScaleFieldDef):
class YOffsetDatum(DatumChannelMixin, core.ScaleDatumDef):
class YOffsetValue(ValueChannelMixin, core.ValueDefnumber):
class _EncodingMixin:
class EncodeKwds(TypedDict, total=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\schema\core.py
-----------------------------
>     """Load the json schema associated with this module's functions."""
      schema_bytes = pkgutil.get_data(__name__, "vega-lite-schema.json")
      if schema_bytes is None:
          msg = "Unable to load vega-lite-schema.json"
def load_schema() -> dict:
class VegaLiteSchema(SchemaBase):
class Root(VegaLiteSchema):
class Aggregate(VegaLiteSchema):
class AggregateOp(VegaLiteSchema):
class AggregatedFieldDef(VegaLiteSchema):
class Align(VegaLiteSchema):
class AnyMark(VegaLiteSchema):
class AnyMarkConfig(VegaLiteSchema):
class AreaConfig(AnyMarkConfig):
class ArgmaxDef(Aggregate):
class ArgminDef(Aggregate):
class AutoSizeParams(VegaLiteSchema):
class AutosizeType(VegaLiteSchema):
class Axis(VegaLiteSchema):
class AxisConfig(VegaLiteSchema):
class AxisOrient(VegaLiteSchema):
class AxisResolveMap(VegaLiteSchema):
class BBox(VegaLiteSchema):
class BarConfig(AnyMarkConfig):
class BaseTitleNoValueRefs(VegaLiteSchema):
class BinExtent(VegaLiteSchema):
class BinParams(VegaLiteSchema):
class Binding(VegaLiteSchema):
class BindCheckbox(Binding):
class BindDirect(Binding):
class BindInput(Binding):
class BindRadioSelect(Binding):
class BindRange(Binding):
class BinnedTimeUnit(VegaLiteSchema):
class Blend(VegaLiteSchema):
class BoxPlotConfig(VegaLiteSchema):
class BrushConfig(VegaLiteSchema):
class Color(VegaLiteSchema):
class ColorDef(VegaLiteSchema):
class ColorName(Color):
class ColorScheme(VegaLiteSchema):
class Categorical(ColorScheme):
class CompositeMark(AnyMark):
class BoxPlot(CompositeMark):
class CompositeMarkDef(AnyMark):
class BoxPlotDef(CompositeMarkDef):
class CompositionConfig(VegaLiteSchema):
class ConditionalAxisColor(VegaLiteSchema):
class ConditionalAxisLabelAlign(VegaLiteSchema):
class ConditionalAxisLabelBaseline(VegaLiteSchema):
class ConditionalAxisLabelFontStyle(VegaLiteSchema):
class ConditionalAxisLabelFontWeight(VegaLiteSchema):
class ConditionalAxisNumber(VegaLiteSchema):
class ConditionalAxisNumberArray(VegaLiteSchema):
class ConditionalAxisPropertyAlignnull(VegaLiteSchema):
class ConditionalAxisPropertyColornull(VegaLiteSchema):
class ConditionalAxisPropertyFontStylenull(VegaLiteSchema):
class ConditionalAxisPropertyFontWeightnull(VegaLiteSchema):
class ConditionalAxisPropertyTextBaselinenull(VegaLiteSchema):
class ConditionalAxisPropertynumberArraynull(VegaLiteSchema):
class ConditionalAxisPropertynumbernull(VegaLiteSchema):
class ConditionalAxisPropertystringnull(VegaLiteSchema):
class ConditionalAxisString(VegaLiteSchema):
class ConditionalMarkPropFieldOrDatumDef(VegaLiteSchema):
class ConditionalMarkPropFieldOrDatumDefTypeForShape(VegaLiteSchema):
class ConditionalParameterMarkPropFieldOrDatumDef(ConditionalMarkPropFieldOrDatumDef):
class ConditionalParameterMarkPropFieldOrDatumDefTypeForShape(
class ConditionalPredicateMarkPropFieldOrDatumDef(ConditionalMarkPropFieldOrDatumDef):
class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape(
class ConditionalPredicateValueDefAlignnullExprRef(VegaLiteSchema):
class ConditionalPredicateValueDefColornullExprRef(VegaLiteSchema):
class ConditionalPredicateValueDefFontStylenullExprRef(VegaLiteSchema):
class ConditionalPredicateValueDefFontWeightnullExprRef(VegaLiteSchema):
class ConditionalPredicateValueDefTextBaselinenullExprRef(VegaLiteSchema):
class ConditionalPredicateValueDefnumberArraynullExprRef(VegaLiteSchema):
class ConditionalPredicateValueDefnumbernullExprRef(VegaLiteSchema):
class ConditionalStringFieldDef(VegaLiteSchema):
class ConditionalParameterStringFieldDef(ConditionalStringFieldDef):
class ConditionalPredicateStringFieldDef(ConditionalStringFieldDef):
class ConditionalValueDefGradientstringnullExprRef(VegaLiteSchema):
class ConditionalParameterValueDefGradientstringnullExprRef(
class ConditionalPredicateValueDefGradientstringnullExprRef(
class ConditionalValueDefTextExprRef(VegaLiteSchema):
class ConditionalParameterValueDefTextExprRef(ConditionalValueDefTextExprRef):
class ConditionalPredicateValueDefTextExprRef(ConditionalValueDefTextExprRef):
class ConditionalValueDefnumber(VegaLiteSchema):
class ConditionalParameterValueDefnumber(ConditionalValueDefnumber):
class ConditionalPredicateValueDefnumber(ConditionalValueDefnumber):
class ConditionalValueDefnumberArrayExprRef(VegaLiteSchema):
class ConditionalParameterValueDefnumberArrayExprRef(
class ConditionalPredicateValueDefnumberArrayExprRef(
class ConditionalValueDefnumberExprRef(VegaLiteSchema):
class ConditionalParameterValueDefnumberExprRef(ConditionalValueDefnumberExprRef):
class ConditionalPredicateValueDefnumberExprRef(ConditionalValueDefnumberExprRef):
class ConditionalValueDefstringExprRef(VegaLiteSchema):
class ConditionalParameterValueDefstringExprRef(ConditionalValueDefstringExprRef):
class ConditionalPredicateValueDefstringExprRef(ConditionalValueDefstringExprRef):
class ConditionalValueDefstringnullExprRef(VegaLiteSchema):
class ConditionalParameterValueDefstringnullExprRef(
class ConditionalPredicateValueDefstringnullExprRef(
class Config(VegaLiteSchema):
class Cursor(VegaLiteSchema):
class Cyclical(ColorScheme):
class Data(VegaLiteSchema):
class DataFormat(VegaLiteSchema):
class CsvDataFormat(DataFormat):
class DataSource(Data):
class Datasets(VegaLiteSchema):
class Day(VegaLiteSchema):
class Dict(VegaLiteSchema):
class DictInlineDataset(VegaLiteSchema):
class DictSelectionInit(VegaLiteSchema):
class DictSelectionInitInterval(VegaLiteSchema):
class Diverging(ColorScheme):
class DomainUnionWith(VegaLiteSchema):
class DsvDataFormat(DataFormat):
class Element(VegaLiteSchema):
class Encoding(VegaLiteSchema):
class ErrorBand(CompositeMark):
class ErrorBandConfig(VegaLiteSchema):
class ErrorBandDef(CompositeMarkDef):
class ErrorBar(CompositeMark):
class ErrorBarConfig(VegaLiteSchema):
class ErrorBarDef(CompositeMarkDef):
class ErrorBarExtent(VegaLiteSchema):
class Expr(VegaLiteSchema):
class ExprRef(VegaLiteSchema):
class FacetEncodingFieldDef(VegaLiteSchema):
class FacetFieldDef(VegaLiteSchema):
class FacetMapping(VegaLiteSchema):
class FacetedEncoding(VegaLiteSchema):
class Feature(VegaLiteSchema):
class FeatureCollection(VegaLiteSchema):
class FeatureGeometryGeoJsonProperties(VegaLiteSchema):
class Field(VegaLiteSchema):
class FieldDefWithoutScale(VegaLiteSchema):
class FieldName(Field):
class FieldOrDatumDefWithConditionStringFieldDefstring(VegaLiteSchema):
class FieldRange(VegaLiteSchema):
class Fit(VegaLiteSchema):
class FontStyle(VegaLiteSchema):
class FontWeight(VegaLiteSchema):
class FormatConfig(VegaLiteSchema):
class Generator(Data):
class GenericUnitSpecEncodingAnyMark(VegaLiteSchema):
class GeoJsonFeature(Fit):
class GeoJsonFeatureCollection(Fit):
class GeoJsonProperties(VegaLiteSchema):
class Geometry(VegaLiteSchema):
class GeometryCollection(Geometry):
class Gradient(VegaLiteSchema):
class GradientStop(VegaLiteSchema):
class GraticuleGenerator(Generator):
class GraticuleParams(VegaLiteSchema):
class Header(VegaLiteSchema):
class HeaderConfig(VegaLiteSchema):
class HexColor(Color):
class ImputeMethod(VegaLiteSchema):
class ImputeParams(VegaLiteSchema):
class ImputeSequence(VegaLiteSchema):
class InlineData(DataSource):
class InlineDataset(VegaLiteSchema):
class Interpolate(VegaLiteSchema):
class IntervalSelectionConfig(VegaLiteSchema):
class IntervalSelectionConfigWithoutType(VegaLiteSchema):
class JoinAggregateFieldDef(VegaLiteSchema):
class JsonDataFormat(DataFormat):
class LabelOverlap(VegaLiteSchema):
class LatLongDef(VegaLiteSchema):
class LatLongFieldDef(LatLongDef):
class LayerRepeatMapping(VegaLiteSchema):
class LayoutAlign(VegaLiteSchema):
class Legend(VegaLiteSchema):
class LegendBinding(VegaLiteSchema):
class LegendConfig(VegaLiteSchema):
class LegendOrient(VegaLiteSchema):
class LegendResolveMap(VegaLiteSchema):
class LegendStreamBinding(LegendBinding):
class LineConfig(AnyMarkConfig):
class LineString(Geometry):
class LinearGradient(Gradient):
class Locale(VegaLiteSchema):
class LookupData(VegaLiteSchema):
class LookupSelection(VegaLiteSchema):
class Mark(AnyMark):
class MarkConfig(AnyMarkConfig):
class MarkDef(AnyMark):
class MarkInvalidDataMode(VegaLiteSchema):
class MarkPropDefGradientstringnull(VegaLiteSchema):
class FieldOrDatumDefWithConditionDatumDefGradientstringnull(
class FieldOrDatumDefWithConditionMarkPropFieldDefGradientstringnull(
class MarkPropDefnumber(VegaLiteSchema):
class MarkPropDefnumberArray(VegaLiteSchema):
class MarkPropDefstringnullTypeForShape(VegaLiteSchema):
class MarkType(VegaLiteSchema):
class Month(VegaLiteSchema):
class MultiLineString(Geometry):
class MultiPoint(Geometry):
class MultiPolygon(Geometry):
class NamedData(DataSource):
class NonArgAggregateOp(Aggregate):
class NonNormalizedSpec(VegaLiteSchema):
class NumberLocale(VegaLiteSchema):
class NumericArrayMarkPropDef(VegaLiteSchema):
class FieldOrDatumDefWithConditionDatumDefnumberArray(
class FieldOrDatumDefWithConditionMarkPropFieldDefnumberArray(
class NumericMarkPropDef(VegaLiteSchema):
class FieldOrDatumDefWithConditionDatumDefnumber(MarkPropDefnumber, NumericMarkPropDef):
class FieldOrDatumDefWithConditionMarkPropFieldDefnumber(
class OffsetDef(VegaLiteSchema):
class OrderFieldDef(VegaLiteSchema):
class OrderOnlyDef(VegaLiteSchema):
class OrderValueDef(VegaLiteSchema):
class Orient(VegaLiteSchema):
class Orientation(VegaLiteSchema):
class OverlayMarkDef(VegaLiteSchema):
class Padding(VegaLiteSchema):
class ParameterExtent(BinExtent):
class ParameterName(VegaLiteSchema):
class Parse(VegaLiteSchema):
class ParseValue(VegaLiteSchema):
class Point(Geometry):
class PointSelectionConfig(VegaLiteSchema):
class PointSelectionConfigWithoutType(VegaLiteSchema):
class PolarDef(VegaLiteSchema):
class Polygon(Geometry):
class Position(VegaLiteSchema):
class Position2Def(VegaLiteSchema):
class DatumDef(LatLongDef, Position2Def):
class PositionDatumDefBase(PolarDef):
class PositionDef(VegaLiteSchema):
class PositionDatumDef(PositionDef):
class PositionFieldDef(PositionDef):
class PositionFieldDefBase(PolarDef):
class PositionValueDef(PolarDef, Position2Def, PositionDef):
class PredicateComposition(VegaLiteSchema):
class LogicalAndPredicate(PredicateComposition):
class LogicalNotPredicate(PredicateComposition):
class LogicalOrPredicate(PredicateComposition):
class Predicate(PredicateComposition):
class FieldEqualPredicate(Predicate):
class FieldGTEPredicate(Predicate):
class FieldGTPredicate(Predicate):
class FieldLTEPredicate(Predicate):
class FieldLTPredicate(Predicate):
class FieldOneOfPredicate(Predicate):
class FieldRangePredicate(Predicate):
class FieldValidPredicate(Predicate):
class ParameterPredicate(Predicate):
class Projection(VegaLiteSchema):
class ProjectionConfig(VegaLiteSchema):
class ProjectionType(VegaLiteSchema):
class RadialGradient(Gradient):
class RangeConfig(VegaLiteSchema):
class RangeRawArray(VegaLiteSchema):
class RangeScheme(VegaLiteSchema):
class RangeEnum(RangeScheme):
class RangeRaw(RangeScheme):
class RectConfig(AnyMarkConfig):
class RelativeBandSize(VegaLiteSchema):
class RepeatMapping(VegaLiteSchema):
class RepeatRef(Field):
class Resolve(VegaLiteSchema):
class ResolveMode(VegaLiteSchema):
class RowColLayoutAlign(VegaLiteSchema):
class RowColboolean(VegaLiteSchema):
class RowColnumber(VegaLiteSchema):
class RowColumnEncodingFieldDef(VegaLiteSchema):
class Scale(VegaLiteSchema):
class ScaleBins(VegaLiteSchema):
class ScaleBinParams(ScaleBins):
class ScaleConfig(VegaLiteSchema):
class ScaleDatumDef(OffsetDef):
class ScaleFieldDef(OffsetDef):
class ScaleInterpolateEnum(VegaLiteSchema):
class ScaleInterpolateParams(VegaLiteSchema):
class ScaleInvalidDataConfig(VegaLiteSchema):
class ScaleInvalidDataShowAsangle(VegaLiteSchema):
class ScaleInvalidDataShowAsValueangle(ScaleInvalidDataShowAsangle):
class ScaleInvalidDataShowAscolor(VegaLiteSchema):
class ScaleInvalidDataShowAsValuecolor(ScaleInvalidDataShowAscolor):
class ScaleInvalidDataShowAsfill(VegaLiteSchema):
class ScaleInvalidDataShowAsValuefill(ScaleInvalidDataShowAsfill):
class ScaleInvalidDataShowAsfillOpacity(VegaLiteSchema):
class ScaleInvalidDataShowAsValuefillOpacity(ScaleInvalidDataShowAsfillOpacity):
class ScaleInvalidDataShowAsopacity(VegaLiteSchema):
class ScaleInvalidDataShowAsValueopacity(ScaleInvalidDataShowAsopacity):
class ScaleInvalidDataShowAsradius(VegaLiteSchema):
class ScaleInvalidDataShowAsValueradius(ScaleInvalidDataShowAsradius):
class ScaleInvalidDataShowAsshape(VegaLiteSchema):
class ScaleInvalidDataShowAsValueshape(ScaleInvalidDataShowAsshape):
class ScaleInvalidDataShowAssize(VegaLiteSchema):
class ScaleInvalidDataShowAsValuesize(ScaleInvalidDataShowAssize):
class ScaleInvalidDataShowAsstroke(VegaLiteSchema):
class ScaleInvalidDataShowAsValuestroke(ScaleInvalidDataShowAsstroke):
class ScaleInvalidDataShowAsstrokeDash(VegaLiteSchema):
class ScaleInvalidDataShowAsValuestrokeDash(ScaleInvalidDataShowAsstrokeDash):
class ScaleInvalidDataShowAsstrokeOpacity(VegaLiteSchema):
class ScaleInvalidDataShowAsValuestrokeOpacity(ScaleInvalidDataShowAsstrokeOpacity):
class ScaleInvalidDataShowAsstrokeWidth(VegaLiteSchema):
class ScaleInvalidDataShowAsValuestrokeWidth(ScaleInvalidDataShowAsstrokeWidth):
class ScaleInvalidDataShowAstheta(VegaLiteSchema):
class ScaleInvalidDataShowAsValuetheta(ScaleInvalidDataShowAstheta):
class ScaleInvalidDataShowAsx(VegaLiteSchema):
class ScaleInvalidDataShowAsValuex(ScaleInvalidDataShowAsx):
class ScaleInvalidDataShowAsxOffset(VegaLiteSchema):
class ScaleInvalidDataShowAsValuexOffset(ScaleInvalidDataShowAsxOffset):
class ScaleInvalidDataShowAsy(VegaLiteSchema):
class ScaleInvalidDataShowAsValuey(ScaleInvalidDataShowAsy):
class ScaleInvalidDataShowAsyOffset(VegaLiteSchema):
class ScaleInvalidDataShowAsValueyOffset(ScaleInvalidDataShowAsyOffset):
class ScaleResolveMap(VegaLiteSchema):
class ScaleType(VegaLiteSchema):
class SchemeParams(VegaLiteSchema):
class SecondaryFieldDef(Position2Def):
class SelectionConfig(VegaLiteSchema):
class SelectionInit(VegaLiteSchema):
class DateTime(SelectionInit):
class PrimitiveValue(SelectionInit):
class SelectionInitInterval(VegaLiteSchema):
class SelectionInitIntervalMapping(VegaLiteSchema):
class SelectionInitMapping(VegaLiteSchema):
class SelectionParameter(VegaLiteSchema):
class SelectionResolution(VegaLiteSchema):
class SelectionType(VegaLiteSchema):
class SequenceGenerator(Generator):
class SequenceParams(VegaLiteSchema):
class SequentialMultiHue(ColorScheme):
class SequentialSingleHue(ColorScheme):
class ShapeDef(VegaLiteSchema):
class FieldOrDatumDefWithConditionDatumDefstringnull(
class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapestringnull(
class SharedEncoding(VegaLiteSchema):
class SingleDefUnitChannel(VegaLiteSchema):
class Sort(VegaLiteSchema):
class AllSortString(Sort):
class EncodingSortField(Sort):
class SortArray(Sort):
class SortByChannel(AllSortString):
class SortByChannelDesc(AllSortString):
class SortByEncoding(Sort):
class SortField(VegaLiteSchema):
class SortOrder(AllSortString):
class Spec(VegaLiteSchema):
class ConcatSpecGenericSpec(Spec, NonNormalizedSpec):
class FacetSpec(Spec, NonNormalizedSpec):
class FacetedUnitSpec(Spec, NonNormalizedSpec):
class HConcatSpecGenericSpec(Spec, NonNormalizedSpec):
class LayerSpec(Spec, NonNormalizedSpec):
class RepeatSpec(Spec, NonNormalizedSpec):
class LayerRepeatSpec(RepeatSpec):
class NonLayerRepeatSpec(RepeatSpec):
class SphereGenerator(Generator):
class StackOffset(VegaLiteSchema):
class StandardType(VegaLiteSchema):
class Step(VegaLiteSchema):
class StepFor(VegaLiteSchema):
class Stream(VegaLiteSchema):
class DerivedStream(Stream):
class EventStream(Stream):
class MergedStream(Stream):
class StringFieldDef(VegaLiteSchema):
class StringFieldDefWithCondition(VegaLiteSchema):
class StringValueDefWithCondition(VegaLiteSchema):
class StrokeCap(VegaLiteSchema):
class StrokeJoin(VegaLiteSchema):
class StyleConfigIndex(VegaLiteSchema):
class SymbolShape(VegaLiteSchema):
class Text(VegaLiteSchema):
class TextBaseline(VegaLiteSchema):
class Baseline(TextBaseline):
class TextDef(VegaLiteSchema):
class FieldOrDatumDefWithConditionStringDatumDefText(TextDef):
class FieldOrDatumDefWithConditionStringFieldDefText(TextDef):
class TextDirection(VegaLiteSchema):
class TickConfig(AnyMarkConfig):
class TickCount(VegaLiteSchema):
class TimeInterval(TickCount):
class TimeIntervalStep(TickCount):
class TimeLocale(VegaLiteSchema):
class TimeUnit(VegaLiteSchema):
class MultiTimeUnit(TimeUnit):
class LocalMultiTimeUnit(MultiTimeUnit):
class SingleTimeUnit(TimeUnit):
class LocalSingleTimeUnit(SingleTimeUnit):
class TimeUnitParams(VegaLiteSchema):
class TimeUnitTransformParams(VegaLiteSchema):
class TitleAnchor(VegaLiteSchema):
class TitleConfig(VegaLiteSchema):
class TitleFrame(VegaLiteSchema):
class TitleOrient(VegaLiteSchema):
class TitleParams(VegaLiteSchema):
class TooltipContent(VegaLiteSchema):
class TopLevelParameter(VegaLiteSchema):
class TopLevelSelectionParameter(TopLevelParameter):
class TopLevelSpec(VegaLiteSchema):
class TopLevelConcatSpec(TopLevelSpec):
class TopLevelFacetSpec(TopLevelSpec):
class TopLevelHConcatSpec(TopLevelSpec):
class TopLevelLayerSpec(TopLevelSpec):
class TopLevelRepeatSpec(TopLevelSpec):
class TopLevelUnitSpec(TopLevelSpec):
class TopLevelVConcatSpec(TopLevelSpec):
class TopoDataFormat(DataFormat):
class Transform(VegaLiteSchema):
class AggregateTransform(Transform):
class BinTransform(Transform):
class CalculateTransform(Transform):
class DensityTransform(Transform):
class ExtentTransform(Transform):
class FilterTransform(Transform):
class FlattenTransform(Transform):
class FoldTransform(Transform):
class ImputeTransform(Transform):
class JoinAggregateTransform(Transform):
class LoessTransform(Transform):
class LookupTransform(Transform):
class PivotTransform(Transform):
class QuantileTransform(Transform):
class RegressionTransform(Transform):
class SampleTransform(Transform):
class StackTransform(Transform):
class TimeUnitTransform(Transform):
class Type(VegaLiteSchema):
class TypeForShape(VegaLiteSchema):
class TypedFieldDef(VegaLiteSchema):
class URI(VegaLiteSchema):
class UnitSpec(VegaLiteSchema):
class UnitSpecWithFrame(VegaLiteSchema):
class UrlData(DataSource):
class UtcMultiTimeUnit(MultiTimeUnit):
class UtcSingleTimeUnit(SingleTimeUnit):
class VConcatSpecGenericSpec(Spec, NonNormalizedSpec):
class ValueDefWithConditionMarkPropFieldOrDatumDefGradientstringnull(
class ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapestringnull(
class ValueDefWithConditionMarkPropFieldOrDatumDefnumber(
class ValueDefWithConditionMarkPropFieldOrDatumDefnumberArray(
class ValueDefWithConditionMarkPropFieldOrDatumDefstringnull(VegaLiteSchema):
class ValueDefWithConditionStringFieldDefText(TextDef):
class ValueDefnumber(OffsetDef):
class ValueDefnumberwidthheightExprRef(VegaLiteSchema):
class VariableParameter(TopLevelParameter):
class Vector10string(VegaLiteSchema):
class Vector12string(VegaLiteSchema):
class Vector2DateTime(SelectionInitInterval):
class Vector2Vector2number(VegaLiteSchema):
class Vector2boolean(SelectionInitInterval):
class Vector2number(SelectionInitInterval):
class Vector2string(SelectionInitInterval):
class Vector3number(VegaLiteSchema):
class Vector7string(VegaLiteSchema):
class ViewBackground(VegaLiteSchema):
class ViewConfig(VegaLiteSchema):
class WindowEventType(VegaLiteSchema):
class EventType(WindowEventType):
class WindowFieldDef(VegaLiteSchema):
class WindowOnlyOp(VegaLiteSchema):
class WindowTransform(Transform):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\schema\mixins.py
-----------------------------
>     """
      MarkDef schema wrapper.
  
      Parameters
class _MarkDef(SchemaBase):
class _BoxPlotDef(SchemaBase):
class _ErrorBarDef(SchemaBase):
class _ErrorBandDef(SchemaBase):
class MarkMethodMixin:
class ConfigMethodMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\schema\_config.py
-----------------------------
>     """
      :class:`altair.AreaConfig` ``TypedDict`` wrapper.
  
      Parameters
class AreaConfigKwds(TypedDict, total=False):
class AutoSizeParamsKwds(TypedDict, total=False):
class AxisConfigKwds(TypedDict, total=False):
class AxisResolveMapKwds(TypedDict, total=False):
class BarConfigKwds(TypedDict, total=False):
class BindCheckboxKwds(TypedDict, total=False):
class BindDirectKwds(TypedDict, total=False):
class BindInputKwds(TypedDict, total=False):
class BindRadioSelectKwds(TypedDict, total=False):
class BindRangeKwds(TypedDict, total=False):
class BoxPlotConfigKwds(TypedDict, total=False):
class BrushConfigKwds(TypedDict, total=False):
class CompositionConfigKwds(TypedDict, total=False):
class ConfigKwds(TypedDict, total=False):
class DateTimeKwds(TypedDict, total=False):
class DerivedStreamKwds(TypedDict, total=False):
class ErrorBandConfigKwds(TypedDict, total=False):
class ErrorBarConfigKwds(TypedDict, total=False):
class FeatureGeometryGeoJsonPropertiesKwds(TypedDict, total=False):
class FormatConfigKwds(TypedDict, total=False):
class GeoJsonFeatureKwds(TypedDict, total=False):
class GeoJsonFeatureCollectionKwds(TypedDict, total=False):
class GeometryCollectionKwds(TypedDict, total=False):
class GradientStopKwds(TypedDict, total=False):
class HeaderConfigKwds(TypedDict, total=False):
class IntervalSelectionConfigKwds(TypedDict, total=False):
class IntervalSelectionConfigWithoutTypeKwds(TypedDict, total=False):
class LegendConfigKwds(TypedDict, total=False):
class LegendResolveMapKwds(TypedDict, total=False):
class LegendStreamBindingKwds(TypedDict, total=False):
class LineConfigKwds(TypedDict, total=False):
class LineStringKwds(TypedDict, total=False):
class LinearGradientKwds(TypedDict, total=False):
class LocaleKwds(TypedDict, total=False):
class MarkConfigKwds(TypedDict, total=False):
class MergedStreamKwds(TypedDict, total=False):
class MultiLineStringKwds(TypedDict, total=False):
class MultiPointKwds(TypedDict, total=False):
class MultiPolygonKwds(TypedDict, total=False):
class NumberLocaleKwds(TypedDict, total=False):
class OverlayMarkDefKwds(TypedDict, total=False):
class PointKwds(TypedDict, total=False):
class PointSelectionConfigKwds(TypedDict, total=False):
class PointSelectionConfigWithoutTypeKwds(TypedDict, total=False):
class PolygonKwds(TypedDict, total=False):
class ProjectionKwds(TypedDict, total=False):
class ProjectionConfigKwds(TypedDict, total=False):
class RadialGradientKwds(TypedDict, total=False):
class RangeConfigKwds(TypedDict, total=False):
class RectConfigKwds(TypedDict, total=False):
class ResolveKwds(TypedDict, total=False):
class ScaleConfigKwds(TypedDict, total=False):
class ScaleInvalidDataConfigKwds(TypedDict, total=False):
class ScaleResolveMapKwds(TypedDict, total=False):
class SelectionConfigKwds(TypedDict, total=False):
class StepKwds(TypedDict, closed=True, total=False):  # type: ignore[call-arg]
class StyleConfigIndexKwds(TypedDict, closed=True, total=False):  # type: ignore[call-arg]
class TickConfigKwds(TypedDict, total=False):
class TimeIntervalStepKwds(TypedDict, total=False):
class TimeLocaleKwds(TypedDict, total=False):
class TitleConfigKwds(TypedDict, total=False):
class TitleParamsKwds(TypedDict, total=False):
class TooltipContentKwds(TypedDict, total=False):
class TopLevelSelectionParameterKwds(TypedDict, total=False):
class VariableParameterKwds(TypedDict, total=False):
class ViewBackgroundKwds(TypedDict, total=False):
class ViewConfigKwds(TypedDict, total=False):
class ThemeConfig(TypedDict, total=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\schema\_typing.py
-----------------------------
> """
  One of ``T`` specified type(s), or a `Sequence` of such.
  
  Examples
class Value(TypedDict, Generic[T]):
def is_color_hex(obj: Any) -> TypeIs[ColorHex]:
class RowColKwds(TypedDict, Generic[T], total=False):
class PaddingKwds(TypedDict, total=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\schema\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\api.py
-----------------------------
>     """
      Generate a unique hash of the data.
  
      Parameters
def _dataset_name(values: dict[str, Any] | list | InlineDataset) -> str:
def _consolidate_data(
def _prepare_data(
class LookupData(core.LookupData):
class FacetMapping(core.FacetMapping):
class Parameter(_expr_core.OperatorMixin):
class ParameterExpression(_expr_core.OperatorMixin):
class SelectionExpression(_expr_core.OperatorMixin):
def check_fields_and_encodings(parameter: Parameter, field_name: str) -> bool:
def _is_test_predicate(obj: Any) -> TypeIs[_TestPredicateType]:
def _get_predicate_expr(p: Parameter) -> Optional[_TestPredicateType]:
def _predicate_to_condition(
def _condition_to_selection(
class _ConditionExtra(TypedDict, closed=True, total=False):  # type: ignore[call-arg]
class _ConditionClosed(TypedDict, closed=True, total=False):  # type: ignore[call-arg]
class _Conditional(TypedDict, t.Generic[_C], total=False):
class _Value(TypedDict, closed=True, total=False):  # type: ignore[call-arg]
def _reveal_parsed_shorthand(obj: Map, /) -> dict[str, Any]:
def _is_extra(*objs: Any, kwds: Map) -> Iterator[bool]:
def _is_condition_extra(obj: Any, *objs: Any, kwds: Map) -> TypeIs[_Condition]:
def _is_condition_closed(obj: Map) -> TypeIs[_ConditionClosed]:
def _parse_when_constraints(
def _validate_composables(
def _parse_when_compose(
def _parse_when(
def _parse_literal(val: Any, /) -> dict[str, Any]:
def _parse_then(statement: _StatementType, kwds: dict[str, Any], /) -> dict[str, Any]:
def _parse_otherwise(
class _BaseWhen(Protocol):
class When(_BaseWhen):
class Then(ConditionLike, t.Generic[_C]):
class ChainedWhen(_BaseWhen):
def when(
def value(value: Any, **kwargs: Any) -> _Value:
def param(
def _selection(type: Optional[SelectionType_T] = Undefined, **kwds: Any) -> Parameter:
def selection(type: Optional[SelectionType_T] = Undefined, **kwds: Any) -> Parameter:
def selection_interval(
def selection_point(
def selection_multi(**kwargs: Any) -> Parameter:
def selection_single(**kwargs: Any) -> Parameter:
def binding(
def binding_checkbox(**kwargs: Any) -> BindCheckbox:
def binding_radio(**kwargs: Any) -> BindRadioSelect:
def binding_select(**kwargs: Any) -> BindRadioSelect:
def binding_range(**kwargs: Any) -> BindRange:
def condition(
def condition(
def condition(
def condition(
def condition(
def _top_schema_base(  # noqa: ANN202
class TopLevelMixin(mixins.ConfigMethodMixin):
class _EncodingMixin(channels._EncodingMixin):
class Chart(
def _check_if_valid_subspec(
def _check_if_can_be_layered(spec: LayerType) -> None:
class RepeatChart(TopLevelMixin, core.TopLevelRepeatSpec):
def repeat(
class ConcatChart(TopLevelMixin, core.TopLevelConcatSpec):
def concat(*charts: ConcatType, **kwargs: Any) -> ConcatChart:
class HConcatChart(TopLevelMixin, core.TopLevelHConcatSpec):
def hconcat(*charts: ConcatType, **kwargs: Any) -> HConcatChart:
class VConcatChart(TopLevelMixin, core.TopLevelVConcatSpec):
def vconcat(*charts: ConcatType, **kwargs: Any) -> VConcatChart:
class LayerChart(TopLevelMixin, _EncodingMixin, core.TopLevelLayerSpec):
def layer(*charts: LayerType, **kwargs: Any) -> LayerChart:
class FacetChart(TopLevelMixin, core.TopLevelFacetSpec):
def topo_feature(url: str, feature: str, **kwargs: Any) -> UrlData:
def _combine_subchart_data(
def _viewless_dict(param: _Parameter) -> dict[str, Any]:
def _needs_name(subchart: ChartType) -> bool:
def _prepare_to_lift(param: _Parameter) -> _Parameter:
def _remove_duplicate_params(layer: list[ChartType]) -> list[ChartType]:
def _combine_subchart_params(  # noqa: C901
def _get_repeat_strings(
def _extend_view_name(v: str, r: str, spec: Chart | LayerChart) -> str:
def _repeat_names(
def _remove_layer_props(  # noqa: C901
def sequence(
def graticule(**kwds: Any) -> GraticuleGenerator:
def sphere() -> SphereGenerator:
def is_chart_type(obj: Any) -> TypeIs[ChartType]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\compiler.py
-----------------------------
>     """Vega-Lite to Vega compiler that uses vl-convert."""
      from . import SCHEMA_VERSION
  
      vlc = import_vl_convert()
def vl_convert_compiler(vegalite_spec: dict) -> dict:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\data.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\display.py
-----------------------------
> DEFAULT_DISPLAY: Final = f"""\
  <VegaLite {VEGALITE_VERSION.split('.')[0]} object>
  
  If you see this message, it means the renderer has not been properly enabled
def mimetype_renderer(spec: dict, **metadata) -> DefaultRendererReturnType:
def json_renderer(spec: dict, **metadata) -> DefaultRendererReturnType:
def png_renderer(spec: dict, **metadata) -> dict[str, bytes]:
def svg_renderer(spec: dict, **metadata) -> dict[str, str]:
def jupyter_renderer(spec: dict, **metadata):
def browser_renderer(
class VegaLite(Displayable):
def vegalite(spec: dict, validate: bool = True) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\theme.py
-----------------------------
> """Tools for enabling and registering chart themes."""
  
  from __future__ import annotations
  
class ThemeRegistry(PluginRegistry[Plugin[ThemeConfig], ThemeConfig]):
class VegaTheme:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\v5\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\api.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\data.py
-----------------------------
>         """Disable the MaxRowsError."""
          options = self.options
          if self.active in {"default", "vegafusion"}:
              options = options.copy()
def default_data_transformer(
def default_data_transformer(
def default_data_transformer(
class DataTransformerRegistry(_DataTransformerRegistry):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\display.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\schema.py
-----------------------------
> """Altair schema wrappers."""
  
  # ruff: noqa: F403
  from .v5.schema import *

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\vegalite\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\theme.py
-----------------------------
> """Customizing chart configuration defaults."""
  
  from __future__ import annotations
  
def register(
def unregister(name: LiteralString) -> Plugin[ThemeConfig]:
def __dir__() -> list[str]:
def __getattr__(name: Literal["active"]) -> str: ...  # type: ignore[misc]
def __getattr__(name: Literal["options"]) -> dict[str, Any]: ...  # type: ignore[misc]
def __getattr__(name: str) -> Any:
def _register(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\_magics.py
-----------------------------
> """Magic functions for rendering vega-lite specifications."""
  
  from __future__ import annotations
  
def _prepare_data(data, data_transformers):
def _get_variable(name: str) -> Any:
def vegalite(line, cell) -> vegalite_v5.VegaLite:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\altair\__init__.py
-----------------------------
def __dir__():
def load_ipython_extension(ipython):
def __getattr__(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\annotated_types\test_cases.py
-----------------------------
>     """
      A test case for `annotated_types`.
class Case(NamedTuple):
def cases() -> Iterable[Case]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\annotated_types\__init__.py
-----------------------------
>     """Base class for all metadata.
  
      This exists mainly so that implementers
      can do `isinstance(..., BaseMetadata)` while traversing field annotations.
class SupportsGt(Protocol):
class SupportsGe(Protocol):
class SupportsLt(Protocol):
class SupportsLe(Protocol):
class SupportsMod(Protocol):
class SupportsDiv(Protocol):
class BaseMetadata:
class Gt(BaseMetadata):
class Ge(BaseMetadata):
class Lt(BaseMetadata):
class Le(BaseMetadata):
class GroupedMetadata(Protocol):
class Interval(GroupedMetadata):
class MultipleOf(BaseMetadata):
class MinLen(BaseMetadata):
class MaxLen(BaseMetadata):
class Len(GroupedMetadata):
class Timezone(BaseMetadata):
class Unit(BaseMetadata):
class Predicate(BaseMetadata):
class Not:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_eventloop.py
-----------------------------
>         """
          Run the given coroutine function in an asynchronous event loop.
  
          The current thread must not be already running an event loop.
class AsyncBackend(metaclass=ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_resources.py
-----------------------------
>     """
      Abstract base class for all closeable asynchronous resources.
  
      Works as an asynchronous context manager which returns the instance itself on enter,
class AsyncResource(metaclass=ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_sockets.py
-----------------------------
>     """
      .. attribute:: family
          :type: socket.AddressFamily
  
def _validate_socket(
class SocketAttribute(TypedAttributeSet):
class _SocketProvider(TypedAttributeProvider):
class SocketStream(ByteStream, _SocketProvider):
class UNIXSocketStream(SocketStream):
class SocketListener(Listener[SocketStream], _SocketProvider):
class UDPSocket(UnreliableObjectStream[UDPPacketType], _SocketProvider):
class ConnectedUDPSocket(UnreliableObjectStream[bytes], _SocketProvider):
class UNIXDatagramSocket(
class ConnectedUNIXDatagramSocket(UnreliableObjectStream[bytes], _SocketProvider):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_streams.py
-----------------------------
>     """
      An interface for receiving objects.
  
      This interface makes no guarantees that the received messages arrive in the order in
class UnreliableObjectReceiveStream(
class UnreliableObjectSendStream(
class UnreliableObjectStream(
class ObjectReceiveStream(UnreliableObjectReceiveStream[T_co]):
class ObjectSendStream(UnreliableObjectSendStream[T_contra]):
class ObjectStream(
class ByteReceiveStream(AsyncResource, TypedAttributeProvider):
class ByteSendStream(AsyncResource, TypedAttributeProvider):
class ByteStream(ByteReceiveStream, ByteSendStream):
class Listener(Generic[T_co], AsyncResource, TypedAttributeProvider):
class ObjectStreamConnectable(Generic[T_co], metaclass=ABCMeta):
class ByteStreamConnectable(metaclass=ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_subprocesses.py
-----------------------------
>     """An asynchronous version of :class:`subprocess.Popen`."""
  
      @abstractmethod
      async def wait(self) -> int:
class Process(AsyncResource):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_tasks.py
-----------------------------
>         """
          Signal that the task has started.
  
          :param value: object passed back to the starter of the task
class TaskStatus(Protocol[T_contra]):
class TaskGroup(metaclass=ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\_testing.py
-----------------------------
>     """
      Encapsulates a running event loop. Every call made through this object will use the
      same event loop.
class TestRunner(metaclass=ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\abc\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\buffered.py
-----------------------------
>     """
      Wraps any bytes-based receive stream and uses a buffer to provide sophisticated
      receiving capabilities in the form of a byte stream.
class BufferedByteReceiveStream(ByteReceiveStream):
class BufferedByteStream(BufferedByteReceiveStream, ByteStream):
class BufferedConnectable(ByteStreamConnectable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\file.py
-----------------------------
>     """
      A byte stream that reads from a file in the file system.
  
      :param file: a file that has been opened for reading in binary mode
class FileStreamAttribute(TypedAttributeSet):
class _BaseFileStream:
class FileReadStream(_BaseFileStream, ByteReceiveStream):
class FileWriteStream(_BaseFileStream, ByteSendStream):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\memory.py
-----------------------------
>         """
          Receive the next item if it can be done without waiting.
  
          :return: the received item
class MemoryObjectStreamStatistics(NamedTuple):
class MemoryObjectItemReceiver(Generic[T_Item]):
class MemoryObjectStreamState(Generic[T_Item]):
class MemoryObjectReceiveStream(Generic[T_co], ObjectReceiveStream[T_co]):
class MemoryObjectSendStream(Generic[T_contra], ObjectSendStream[T_contra]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\stapled.py
-----------------------------
>     """
      Combines two byte streams into a single, bidirectional byte stream.
  
      Extra attributes will be provided from both streams, with the receive stream
class StapledByteStream(ByteStream):
class StapledObjectStream(Generic[T_Item], ObjectStream[T_Item]):
class MultiListener(Generic[T_Stream], Listener[T_Stream]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\text.py
-----------------------------
>     """
      Stream wrapper that decodes bytes to strings using the given encoding.
  
      Decoding is done using :class:`~codecs.IncrementalDecoder` which returns any
class TextReceiveStream(ObjectReceiveStream[str]):
class TextSendStream(ObjectSendStream[str]):
class TextStream(ObjectStream[str]):
class TextConnectable(ObjectStreamConnectable[str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\tls.py
-----------------------------
>     """Contains Transport Layer Security related attributes."""
  
      #: the selected ALPN protocol
      alpn_protocol: str | None = typed_attribute()
class TLSAttribute(TypedAttributeSet):
class TLSStream(ByteStream):
class TLSListener(Listener[TLSStream]):
class TLSConnectable(ByteStreamConnectable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\streams\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_backends\_asyncio.py
-----------------------------
>             """Shutdown and close event loop."""
              if self._state is not _State.INITIALIZED:
                  return
              try:
def find_root_task() -> asyncio.Task:
def get_callable_name(func: Callable) -> str:
def _task_started(task: asyncio.Task) -> bool:
def is_anyio_cancellation(exc: CancelledError) -> bool:
class CancelScope(BaseCancelScope):
class TaskState:
class _AsyncioTaskStatus(abc.TaskStatus):
class TaskGroup(abc.TaskGroup):
class WorkerThread(Thread):
class BlockingPortal(abc.BlockingPortal):
class StreamReaderWrapper(abc.ByteReceiveStream):
class StreamWriterWrapper(abc.ByteSendStream):
class Process(abc.Process):
def _forcibly_shutdown_process_pool_on_exit(
class StreamProtocol(asyncio.Protocol):
class DatagramProtocol(asyncio.DatagramProtocol):
class SocketStream(abc.SocketStream):
class _RawSocketMixin:
class UNIXSocketStream(_RawSocketMixin, abc.UNIXSocketStream):
class TCPSocketListener(abc.SocketListener):
class UNIXSocketListener(abc.SocketListener):
class UDPSocket(abc.UDPSocket):
class ConnectedUDPSocket(abc.ConnectedUDPSocket):
class UNIXDatagramSocket(_RawSocketMixin, abc.UNIXDatagramSocket):
class ConnectedUNIXDatagramSocket(_RawSocketMixin, abc.ConnectedUNIXDatagramSocket):
class Event(BaseEvent):
class Lock(BaseLock):
class Semaphore(BaseSemaphore):
class CapacityLimiter(BaseCapacityLimiter):
class _SignalReceiver:
class AsyncIOTaskInfo(TaskInfo):
class TestRunner(abc.TestRunner):
class AsyncIOBackend(AsyncBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_backends\_trio.py
-----------------------------
class CancelScope(BaseCancelScope):
class TaskGroup(abc.TaskGroup):
class BlockingPortal(abc.BlockingPortal):
class ReceiveStreamWrapper(abc.ByteReceiveStream):
class SendStreamWrapper(abc.ByteSendStream):
class Process(abc.Process):
class _ProcessPoolShutdownInstrument(trio.abc.Instrument):
class _TrioSocketMixin(Generic[T_SockAddr]):
class SocketStream(_TrioSocketMixin, abc.SocketStream):
class UNIXSocketStream(SocketStream, abc.UNIXSocketStream):
class TCPSocketListener(_TrioSocketMixin, abc.SocketListener):
class UNIXSocketListener(_TrioSocketMixin, abc.SocketListener):
class UDPSocket(_TrioSocketMixin[IPSockAddrType], abc.UDPSocket):
class ConnectedUDPSocket(_TrioSocketMixin[IPSockAddrType], abc.ConnectedUDPSocket):
class UNIXDatagramSocket(_TrioSocketMixin[str], abc.UNIXDatagramSocket):
class ConnectedUNIXDatagramSocket(
class Event(BaseEvent):
class Lock(BaseLock):
class Semaphore(BaseSemaphore):
class CapacityLimiter(BaseCapacityLimiter):
class _SignalReceiver:
class TestRunner(abc.TestRunner):
class TrioTaskInfo(TaskInfo):
class TrioBackend(AsyncBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_backends\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_asyncio_selector_thread.py
-----------------------------
class Selector:
def get_selector() -> Selector:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_contextmanagers.py
-----------------------------
>     """
      Mixin class providing context manager functionality via a generator-based
      implementation.
  
class _SupportsCtxMgr(Protocol[_T_co, _ExitT_co]):
class _SupportsAsyncCtxMgr(Protocol[_T_co, _ExitT_co]):
class ContextManagerMixin:
class AsyncContextManagerMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_eventloop.py
-----------------------------
>     """
      Run the given coroutine function in an asynchronous event loop.
  
      The current thread must not be already running an event loop.
def run(
def current_time() -> float:
def get_all_backends() -> tuple[str, ...]:
def get_cancelled_exc_class() -> type[BaseException]:
def claim_worker_thread(
def get_async_backend(asynclib_name: str | None = None) -> type[AsyncBackend]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_exceptions.py
-----------------------------
>     """
      Raised when trying to use a resource that has been rendered unusable due to external
      causes (e.g. a send stream whose peer has disconnected).
class BrokenResourceError(Exception):
class BrokenWorkerProcess(Exception):
class BrokenWorkerInterpreter(Exception):
class BusyResourceError(Exception):
class ClosedResourceError(Exception):
class ConnectionFailed(OSError):
def iterate_exceptions(
class DelimiterNotFound(Exception):
class EndOfStream(Exception):
class IncompleteRead(Exception):
class TypedAttributeLookupError(LookupError):
class WouldBlock(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_fileio.py
-----------------------------
>     """
      An asynchronous file object.
  
      This class wraps a standard file object and provides async friendly versions of the
class AsyncFile(AsyncResource, Generic[AnyStr]):
def wrap_file(file: IO[AnyStr]) -> AsyncFile[AnyStr]:
class _PathIterator(AsyncIterator["Path"]):
class Path:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_resources.py
-----------------------------
>     """
      Close an asynchronous resource in a cancelled scope.
  
      Doing this closes the resource without waiting on anything.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_signals.py
-----------------------------
>     """
      Start receiving operating system signals.
  
      :param signals: signals to receive (e.g. ``signal.SIGINT``)
def open_signal_receiver(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_sockets.py
-----------------------------
>     """
      Connect to a host using the TCP protocol.
  
      This function implements the stateless version of the Happy Eyeballs algorithm (RFC
def getnameinfo(sockaddr: IPSockAddrType, flags: int = 0) -> Awaitable[tuple[str, str]]:
def wait_socket_readable(sock: socket.socket) -> Awaitable[None]:
def wait_socket_writable(sock: socket.socket) -> Awaitable[None]:
def wait_readable(obj: FileDescriptorLike) -> Awaitable[None]:
def wait_writable(obj: FileDescriptorLike) -> Awaitable[None]:
def notify_closing(obj: FileDescriptorLike) -> None:
def convert_ipv6_sockaddr(
class TCPConnectable(ByteStreamConnectable):
class UNIXConnectable(ByteStreamConnectable):
def as_connectable(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_streams.py
-----------------------------
>     """
      Create a memory object stream.
  
      The stream's item type can be annotated like
class create_memory_object_stream(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_subprocesses.py
-----------------------------
>     """
      Run an external command in a subprocess and wait until it completes.
  
      .. seealso:: :func:`subprocess.run`

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_synchronization.py
-----------------------------
>     """
      :ivar int tasks_waiting: number of tasks waiting on :meth:`~.Event.wait`
class EventStatistics:
class CapacityLimiterStatistics:
class LockStatistics:
class ConditionStatistics:
class SemaphoreStatistics:
class Event:
class EventAdapter(Event):
class Lock:
class LockAdapter(Lock):
class Condition:
class Semaphore:
class SemaphoreAdapter(Semaphore):
class CapacityLimiter:
class CapacityLimiterAdapter(CapacityLimiter):
class ResourceGuard:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_tasks.py
-----------------------------
>     """
      Wraps a unit of work that can be made separately cancellable.
  
      :param deadline: The time (clock value) when this scope is cancelled automatically
class _IgnoredTaskStatus(TaskStatus[object]):
class CancelScope:
def fail_after(
def move_on_after(delay: float | None, shield: bool = False) -> CancelScope:
def current_effective_deadline() -> float:
def create_task_group() -> TaskGroup:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_tempfile.py
-----------------------------
>     """
      An asynchronous temporary file that is automatically created and cleaned up.
  
      This class provides an asynchronous context manager interface to a temporary file.
class TemporaryFile(Generic[AnyStr]):
class NamedTemporaryFile(Generic[AnyStr]):
class SpooledTemporaryFile(AsyncFile[AnyStr]):
class TemporaryDirectory(Generic[AnyStr]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_testing.py
-----------------------------
>     """
      Represents an asynchronous task.
  
      :ivar int id: the unique identifier of the task
class TaskInfo:
def get_current_task() -> TaskInfo:
def get_running_tasks() -> list[TaskInfo]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\_typedattr.py
-----------------------------
>     """Return a unique object, used to mark typed attributes."""
      return object()
  
  
def typed_attribute() -> Any:
class TypedAttributeSet:
class TypedAttributeProvider:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\_core\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\from_thread.py
-----------------------------
>     """
      Call a coroutine function from a worker thread.
  
      :param func: a coroutine function
def run(
def run_sync(
class _BlockingAsyncContextManager(Generic[T_co], AbstractContextManager):
class _BlockingPortalTaskStatus(TaskStatus):
class BlockingPortal:
class BlockingPortalProvider:
def start_blocking_portal(
def check_cancelled() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\lowlevel.py
-----------------------------
>     """
      Check for cancellation and allow the scheduler to switch to another task.
  
      Equivalent to (but more efficient than)::
def current_token() -> object:
class _TokenWrapper:
class _NoValueSet(enum.Enum):
class RunvarToken(Generic[T]):
class RunVar(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\pytest_plugin.py
-----------------------------
>     """
      Manages port generation based on specified socket kind, ensuring no duplicate
      ports are generated.
  
def extract_backend_and_options(backend: object) -> tuple[str, dict[str, Any]]:
def get_runner(
def pytest_configure(config: Any) -> None:
def pytest_fixture_setup(fixturedef: Any, request: Any) -> Generator[Any]:
def pytest_pycollect_makeitem(collector: Any, name: Any, obj: Any) -> None:
def pytest_pyfunc_call(pyfuncitem: Any) -> bool | None:
def anyio_backend(request: Any) -> Any:
def anyio_backend_name(anyio_backend: Any) -> str:
def anyio_backend_options(anyio_backend: Any) -> dict[str, Any]:
class FreePortFactory:
def free_tcp_port_factory() -> FreePortFactory:
def free_udp_port_factory() -> FreePortFactory:
def free_tcp_port(free_tcp_port_factory: Callable[[], int]) -> int:
def free_udp_port(free_udp_port_factory: Callable[[], int]) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\to_interpreter.py
-----------------------------
>         """
  import _interpqueues
  from _interpreters import NotShareableError
  from pickle import loads, dumps, HIGHEST_PROTOCOL
def _stop_workers(workers: deque[Worker]) -> None:
def current_default_interpreter_limiter() -> CapacityLimiter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\to_process.py
-----------------------------
>     """
      Call the given function with the given arguments in a worker process.
  
      If the ``cancellable`` option is enabled and the task waiting for its completion is
def current_default_process_limiter() -> CapacityLimiter:
def process_worker() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\to_thread.py
-----------------------------
>     """
      Call the given function with the given arguments in a worker thread.
  
      If the ``cancellable`` option is enabled and the task waiting for its completion is
def current_default_thread_limiter() -> CapacityLimiter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\anyio\__init__.py
-----------------------------
>     """Support deprecated aliases."""
      if attr == "BrokenWorkerIntepreter":
          import warnings
  
def __getattr__(attr: str) -> type[BrokenWorkerInterpreter]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\converters.py
-----------------------------
> """
  Commonly useful converters.
def optional(converter):
def default_if_none(default=NOTHING, factory=None):
def to_bool(val):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\exceptions.py
-----------------------------
>     """
      A frozen/immutable instance or attribute have been attempted to be
      modified.
  
class FrozenError(AttributeError):
class FrozenInstanceError(FrozenError):
class FrozenAttributeError(FrozenError):
class AttrsAttributeNotFoundError(ValueError):
class NotAnAttrsClassError(ValueError):
class DefaultAlreadySetError(RuntimeError):
class UnannotatedAttributeError(RuntimeError):
class PythonTooOldError(RuntimeError):
class NotCallableError(TypeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\filters.py
-----------------------------
> """
  Commonly useful filters for `attrs.asdict` and `attrs.astuple`.
def _split_what(what):
def include(*what):
def exclude(*what):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\setters.py
-----------------------------
> """
  Commonly used hooks for on_setattr.
def pipe(*setters):
def frozen(_, __, ___):
def validate(instance, attrib, new_value):
def convert(instance, attrib, new_value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\validators.py
-----------------------------
> """
  Commonly useful validators.
def set_disabled(disabled):
def get_disabled():
def disabled():
class _InstanceOfValidator:
def instance_of(type):
class _MatchesReValidator:
def matches_re(regex, flags=0, func=None):
class _OptionalValidator:
def optional(validator):
class _InValidator:
def in_(options):
class _IsCallableValidator:
def is_callable():
class _DeepIterable:
def deep_iterable(member_validator, iterable_validator=None):
class _DeepMapping:
def deep_mapping(key_validator, value_validator, mapping_validator=None):
class _NumberValidator:
def lt(val):
def le(val):
def ge(val):
def gt(val):
class _MaxLengthValidator:
def max_len(length):
class _MinLengthValidator:
def min_len(length):
class _SubclassOfValidator:
def _subclass_of(type):
class _NotValidator:
def not_(validator, *, msg=None, exc_types=(ValueError, TypeError)):
class _OrValidator:
def or_(*validators):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_cmp.py
-----------------------------
>     """
      Create a class that can be passed into `attrs.field`'s ``eq``, ``order``,
      and ``cmp`` arguments to customize field comparison.
  
def cmp_using(
def _make_init():
def _make_operator(name, func):
def _is_comparable_to(self, other):
def _check_same_type(self, other):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_compat.py
-----------------------------
>         """
          Get annotations for *cls*.
class _AnnotationExtractor:
def get_generic_base(cl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_config.py
-----------------------------
>     """
      Set whether or not validators are run.  By default, they are run.
  
      .. deprecated:: 21.3.0 It will not be removed, but it also will not be
def set_run_validators(run):
def get_run_validators():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_funcs.py
-----------------------------
>     """
      Return the *attrs* attribute values of *inst* as a dict.
  
      Optionally recurse into other *attrs*-decorated classes.
def asdict(
def _asdict_anything(
def astuple(
def has(cls):
def assoc(inst, **changes):
def resolve_types(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_make.py
-----------------------------
>     """
      Sentinel to indicate the lack of a value when `None` is ambiguous.
  
      If extending attrs, you can use ``typing.Literal[NOTHING]`` to show
class _Nothing(enum.Enum):
class _CacheHashWrapper(int):
def attrib(
def _compile_and_eval(
def _linecache_and_compile(
def _make_attr_tuple_class(cls_name: str, attr_names: list[str]) -> type:
class _Attributes(NamedTuple):
def _is_class_var(annot):
def _has_own_attribute(cls, attrib_name):
def _collect_base_attrs(
def _collect_base_attrs_broken(cls, taken_attr_names):
def _transform_attrs(
def _make_cached_property_getattr(cached_properties, original_getattr, cls):
def _frozen_setattrs(self, name, value):
def _frozen_delattrs(self, name):
def evolve(*args, **changes):
class _ClassBuilder:
def _determine_attrs_eq_order(cmp, eq, order, default_eq):
def _determine_attrib_eq_order(cmp, eq, order, default_eq):
def _determine_whether_to_implement(
def attrs(
def _has_frozen_base_class(cls):
def _generate_unique_filename(cls: type, func_name: str) -> str:
def _make_hash_script(
def _add_hash(cls: type, attrs: list[Attribute]):
def __ne__(self, other):
def _make_eq_script(attrs: list) -> tuple[str, dict]:
def _make_order(cls, attrs):
def _add_eq(cls, attrs=None):
def _make_repr_script(attrs, ns) -> tuple[str, dict]:
def _add_repr(cls, ns=None, attrs=None):
def fields(cls):
def fields_dict(cls):
def validate(inst):
def _is_slot_attr(a_name, base_attr_map):
def _make_init_script(
def _setattr(attr_name: str, value_var: str, has_on_setattr: bool) -> str:
def _setattr_with_converter(
def _assign(attr_name: str, value: str, has_on_setattr: bool) -> str:
def _assign_with_converter(
def _determine_setters(
def _attrs_to_init_script(
def _default_init_alias_for(name: str) -> str:
class Attribute:
class _CountingAttr:
class Factory:
class Converter:
def make_class(
class _AndValidator:
def and_(*validators):
def pipe(*converters):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_next_gen.py
-----------------------------
> """
  These are keyword-only APIs that call `attr.s` and `attr.ib` with different
  default values.
def define(
def field(
def asdict(inst, *, recurse=True, filter=None, value_serializer=None):
def astuple(inst, *, recurse=True, filter=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\_version_info.py
-----------------------------
>     """
      A version object that can be compared to tuple of length 1--4:
  
      >>> attr.VersionInfo(19, 1, 0, "final")  <= (19, 2)
class VersionInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attr\__init__.py
-----------------------------
> """
  Classes Without Boilerplate
class AttrsInstance(Protocol):
def _make_getattr(mod_name: str) -> Callable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attrs\converters.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attrs\exceptions.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attrs\filters.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attrs\setters.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attrs\validators.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\attrs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\blacklists\calls.py
-----------------------------
> r"""
  ====================================================
  Blacklist various Python calls known to be dangerous
  ====================================================
def gen_blacklist():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\blacklists\imports.py
-----------------------------
> r"""
  ======================================================
  Blacklist various Python imports known to be dangerous
  ======================================================
def gen_blacklist():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\blacklists\utils.py
-----------------------------
> r"""Utils module."""
  
  
  def build_conf_dict(name, bid, cwe, qualnames, message, level="MEDIUM"):
def build_conf_dict(name, bid, cwe, qualnames, message, level="MEDIUM"):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\blacklists\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\cli\baseline.py
-----------------------------
> """Bandit is a tool designed to find common security issues in Python code."""
  import argparse
  import contextlib
  import logging
def main():
def baseline_setup():
def init_logger():
def initialize():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\cli\config_generator.py
-----------------------------
> """Bandit is a tool designed to find common security issues in Python code."""
  import argparse
  import importlib
  import logging
def init_logger():
def parse_args():
def get_config_settings():
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\cli\main.py
-----------------------------
> """Bandit is a tool designed to find common security issues in Python code."""
  import argparse
  import fnmatch
  import logging
def _init_logger(log_level=logging.INFO, log_format=None):
def _get_options_from_ini(ini_path, target):
def _init_extensions():
def _log_option_source(default_val, arg_val, ini_val, option_name):
def _running_under_virtualenv():
def _get_profile(config, profile_name, config_path):
def _log_info(args, profile):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\cli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\blacklisting.py
-----------------------------
>     """Generic blacklist test, B001.
  
      This generic blacklist test will be called for any encountered node with
      defined blacklist data available. This data is loaded via plugins using
def report_issue(check, name):
def blacklist(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\config.py
-----------------------------
>         """Attempt to initialize a config dictionary from a yaml file.
  
          Error out if loading the yaml file fails for any reason.
          :param config_file: The Bandit yaml config file
class BanditConfig:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\constants.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\context.py
-----------------------------
>         """Initialize the class with a context, empty dict otherwise
  
          :param context_object: The context object to create class from
          :return: -
class Context:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\docs_utils.py
-----------------------------
def get_url(bid):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\extension_loader.py
-----------------------------
>         """Validate that everything in the configured profiles looks good."""
          for inc in profile["include"]:
              if not self.check_id(inc):
                  LOG.warning(f"Unknown test found in profile: {inc}")
class Manager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\issue.py
-----------------------------
>         """Utility to filter on confidence and severity
  
          This function determines whether an issue should be included by
          comparing the severity and confidence rating of the issue to minimum
class Cwe:
class Issue:
def cwe_from_dict(data):
def issue_from_dict(data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\manager.py
-----------------------------
>         """Get logger, config, AST handler, and result store ready
  
          :param config: config options object
          :type config: bandit.core.BanditConfig
class BanditManager:
def _get_files_from_dir(
def _is_file_included(
def _matches_glob_list(filename, glob_list):
def _compare_baseline_results(baseline, results):
def _find_candidate_matches(unmatched_issues, results_list):
def _find_test_id_from_nosec_string(extman, match):
def _parse_nosec_comment(comment):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\meta_ast.py
-----------------------------
>         """Add a node to the AST node collection
  
          :param node: The AST node to add
          :param parent_id: The ID of the node's parent
class BanditMetaAst:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\metrics.py
-----------------------------
>     """Bandit metric gathering.
  
      This class is a singleton used to gather and process metrics collected when
      processing a code base with bandit. Metric collection is stateful, that
class Metrics:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\node_visitor.py
-----------------------------
>         """Visitor for AST ClassDef node
  
          Add class name to current namespace for all descendants.
          :param node: Node being inspected
class BanditNodeVisitor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\tester.py
-----------------------------
>         """Runs all tests for a certain type of check, for example
  
          Runs all tests for a certain type of check, for example 'functions'
          store results in results.
class BanditTester:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\test_properties.py
-----------------------------
>     """Decorator function to set checks to be run."""
  
      def wrapper(func):
          if not hasattr(func, "_checks"):
def checks(*args):
def takes_config(*args):
def test_id(id_val):
def accepts_baseline(*args):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\test_set.py
-----------------------------
>         """loads up builtin functions, so they can be filtered."""
  
          class Wrapper:
              def __init__(self, name, plugin):
class BanditTestSet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\utils.py
-----------------------------
> """Various helper functions."""
  
  
  def _get_attr_qual_name(node, aliases):
def _get_attr_qual_name(node, aliases):
def get_call_name(node, aliases):
def get_func_name(node):
def get_qual_attr(node, aliases):
def deepgetattr(obj, attr):
class InvalidModulePath(Exception):
class ConfigError(Exception):
class ProfileNotFound(Exception):
def warnings_formatter(
def get_module_qualname_from_path(path):
def namespace_path_join(base, name):
def namespace_path_split(path):
def escaped_bytes_representation(b):
def calc_linerange(node):
def linerange(node):
def concat_string(node, stop=None):
def get_called_name(node):
def get_path_for_function(f):
def parse_ini_file(f_loc):
def check_ast_node(name):
def get_nosec(nosec_lines, context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\core\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\csv.py
-----------------------------
> r"""
  =============
  CSV Formatter
  =============
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\custom.py
-----------------------------
> """
  ================
  Custom Formatter
  ================
class SafeMapper(dict):
def report(manager, fileobj, sev_level, conf_level, template=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\html.py
-----------------------------
> r"""
  ==============
  HTML formatter
  ==============
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\json.py
-----------------------------
> r"""
  ==============
  JSON formatter
  ==============
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\sarif.py
-----------------------------
> r"""
  ===============
  SARIF formatter
  ===============
def report(manager, fileobj, sev_level, conf_level, lines=-1):
def add_skipped_file_notifications(skips, invocation):
def add_results(issues, run):
def create_result(issue, rules, rule_indices):
def level_from_severity(severity):
def add_region_and_context_region(
def parse_code(code):
def create_or_find_rule(issue_dict, rules, rule_indices):
def to_uri(file_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\screen.py
-----------------------------
> r"""
  ================
  Screen formatter
  ================
def header(text, *args):
def get_verbose_details(manager):
def get_metrics(manager):
def _output_issue_str(
def get_results(manager, sev_level, conf_level, lines):
def do_print(bits):
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\text.py
-----------------------------
> r"""
  ==============
  Text Formatter
  ==============
def get_verbose_details(manager):
def get_metrics(manager):
def _output_issue_str(
def get_results(manager, sev_level, conf_level, lines):
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\utils.py
-----------------------------
> """Utility functions for formatting plugins for Bandit."""
  import io
  
  
def wrap_file_object(fileobj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\xml.py
-----------------------------
> r"""
  =============
  XML Formatter
  =============
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\yaml.py
-----------------------------
> r"""
  ==============
  YAML Formatter
  ==============
def report(manager, fileobj, sev_level, conf_level, lines=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\formatters\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\app_debug.py
-----------------------------
> r"""
  ======================================================
  B201: Test for use of flask app with debug set to true
  ======================================================
def flask_debug_true(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\asserts.py
-----------------------------
> r"""
  ============================
  B101: Test for use of assert
  ============================
def gen_config(name):
def assert_used(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\crypto_request_no_cert_validation.py
-----------------------------
> r"""
  =============================================
  B501: Test for missing certificate validation
  =============================================
def request_with_no_cert_validation(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\django_sql_injection.py
-----------------------------
>     """**B610: Potential SQL injection on extra function**
  
      :Example:
  
def keywords2dict(keywords):
def django_extra_used(context):
def django_rawsql_used(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\django_xss.py
-----------------------------
>     """**B703: Potential XSS on mark_safe function**
  
      :Example:
  
class DeepAssignation:
def evaluate_var(xss_var, parent, until, ignore_nodes=None):
def evaluate_call(call, parent, ignore_nodes=None):
def transform2call(var):
def check_risk(node):
def django_mark_safe(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\exec.py
-----------------------------
> r"""
  ==============================
  B102: Test for the use of exec
  ==============================
def exec_issue():
def exec_used(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\general_bad_file_permissions.py
-----------------------------
> r"""
  ==================================================
  B103: Test for setting permissive file permissions
  ==================================================
def _stat_is_dangerous(mode):
def set_bad_file_permissions(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\general_bind_all_interfaces.py
-----------------------------
> r"""
  ========================================
  B104: Test for binding to all interfaces
  ========================================
def hardcoded_bind_all_interfaces(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\general_hardcoded_password.py
-----------------------------
>     """**B105: Test for use of hard-coded password strings**
  
      The use of hard-coded passwords increases the possibility of password
      guessing tremendously. This plugin test looks for all string literals and
def _report(value):
def hardcoded_password_string(context):
def hardcoded_password_funcarg(context):
def hardcoded_password_default(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\general_hardcoded_tmp.py
-----------------------------
> r"""
  ===================================================
  B108: Test for insecure usage of tmp file/directory
  ===================================================
def gen_config(name):
def hardcoded_tmp_directory(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\hashlib_insecure_functions.py
-----------------------------
> r"""
  ======================================================================
  B324: Test use of insecure md4, md5, or sha1 hash functions in hashlib
  ======================================================================
def _hashlib_func(context, func):
def _crypt_crypt(context, func):
def hashlib(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\huggingface_unsafe_download.py
-----------------------------
> r"""
  ================================================
  B615: Test for unsafe Hugging Face Hub downloads
  ================================================
def huggingface_unsafe_download(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\injection_paramiko.py
-----------------------------
> r"""
  ==============================================
  B601: Test for shell injection within Paramiko
  ==============================================
def paramiko_calls(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\injection_shell.py
-----------------------------
>     """**B602: Test for use of popen with shell equals true**
  
      Python possesses many mechanisms to invoke an external executable. However,
      doing so may present a security issue if appropriate care is not taken to
def _evaluate_shell_call(context):
def gen_config(name):
def has_shell(context):
def subprocess_popen_with_shell_equals_true(context, config):
def subprocess_without_shell_equals_true(context, config):
def any_other_function_with_shell_equals_true(context, config):
def start_process_with_a_shell(context, config):
def start_process_with_no_shell(context, config):
def start_process_with_partial_path(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\injection_sql.py
-----------------------------
> r"""
  ============================
  B608: Test for SQL injection
  ============================
def _check_string(data):
def _evaluate_ast(node):
def hardcoded_sql_expressions(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\injection_wildcard.py
-----------------------------
> r"""
  ========================================
  B609: Test for use of wildcard injection
  ========================================
def linux_commands_wildcard_injection(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\insecure_ssl_tls.py
-----------------------------
>     """**B502: Test for SSL use with bad version used**
  
      Several highly publicized exploitable flaws have been discovered
      in all versions of SSL and early versions of TLS. It is strongly
def get_bad_proto_versions(config):
def gen_config(name):
def ssl_with_bad_version(context, config):
def ssl_with_bad_defaults(context, config):
def ssl_with_no_version(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\jinja2_templates.py
-----------------------------
> r"""
  ==========================================
  B701: Test for not auto escaping in jinja2
  ==========================================
def jinja2_autoescape_false(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\logging_config_insecure_listen.py
-----------------------------
> r"""
  ====================================================
  B612: Test for insecure use of logging.config.listen
  ====================================================
def logging_config_insecure_listen(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\mako_templates.py
-----------------------------
> r"""
  ====================================
  B702: Test for use of mako templates
  ====================================
def use_of_mako_templates(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\markupsafe_markup_xss.py
-----------------------------
> r"""
  ============================================
  B704: Potential XSS on markupsafe.Markup use
  ============================================
def gen_config(name):
def markupsafe_markup_xss(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\pytorch_load.py
-----------------------------
> r"""
  ==================================
  B614: Test for unsafe PyTorch load
  ==================================
def pytorch_load(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\request_without_timeout.py
-----------------------------
> r"""
  =======================================
  B113: Test for missing requests timeout
  =======================================
def request_without_timeout(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\snmp_security_check.py
-----------------------------
>     """**B508: Checking for insecure SNMP versions**
  
      This test is for checking for the usage of insecure SNMP version like
        v1, v2c
def snmp_insecure_version_check(context):
def snmp_crypto_check(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\ssh_no_host_key_verification.py
-----------------------------
> r"""
  ==========================================
  B507: Test for missing host key validation
  ==========================================
def ssh_no_host_key_verification(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\tarfile_unsafe_members.py
-----------------------------
> r"""
  =================================
  B202: Test for tarfile.extractall
  =================================
def exec_issue(level, members=""):
def get_members_value(context):
def is_filter_data(context):
def tarfile_unsafe_members(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\trojansource.py
-----------------------------
> r"""
  =====================================================
  B613: TrojanSource - Bidirectional control characters
  =====================================================
def trojansource(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\try_except_continue.py
-----------------------------
> r"""
  =============================================
  B112: Test for a continue in the except block
  =============================================
def gen_config(name):
def try_except_continue(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\try_except_pass.py
-----------------------------
> r"""
  =========================================
  B110: Test for a pass in the except block
  =========================================
def gen_config(name):
def try_except_pass(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\weak_cryptographic_key.py
-----------------------------
> r"""
  =========================================
  B505: Test for weak cryptographic key use
  =========================================
def gen_config(name):
def _classify_key_size(config, key_type, key_size):
def _weak_crypto_key_size_cryptography_io(context, config):
def _weak_crypto_key_size_pycrypto(context, config):
def weak_cryptographic_key(context, config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\yaml_load.py
-----------------------------
> r"""
  ===============================
  B506: Test for use of yaml load
  ===============================
def yaml_load(context):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\plugins\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\bandit\__main__.py
-----------------------------
> """Bandit is a tool designed to find common security issues in Python code.
  
  Bandit is a tool designed to find common security issues in Python code.
  To do this Bandit processes each file, builds an AST from it, and runs

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\blinker\base.py
-----------------------------
> """Symbol for "any sender"."""
  
  ANY_ID = 0
  
class Signal:
class NamedSignal(Signal):
class Namespace(dict[str, NamedSignal]):
class _PNamespaceSignal(t.Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\blinker\_utilities.py
-----------------------------
>     """A constant symbol, nicer than ``object()``. Repeated calls return the
      same instance.
  
      >>> Symbol('foo') is Symbol('foo')
class Symbol:
def make_id(obj: object) -> c.Hashable:
def make_ref(obj: T, callback: c.Callable[[ref[T]], None] | None = None) -> ref[T]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\blinker\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\cachetools\func.py
-----------------------------
> """`functools.lru_cache` compatible memoizing function decorators."""
  
  __all__ = ("fifo_cache", "lfu_cache", "lru_cache", "rr_cache", "ttl_cache")
  
class _UnboundTTLCache(TTLCache):
def _cache(cache, maxsize, typed):
def fifo_cache(maxsize=128, typed=False):
def lfu_cache(maxsize=128, typed=False):
def lru_cache(maxsize=128, typed=False):
def rr_cache(maxsize=128, choice=random.choice, typed=False):
def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\cachetools\keys.py
-----------------------------
> """Key functions for memoizing decorators."""
  
  __all__ = ("hashkey", "methodkey", "typedkey", "typedmethodkey")
  
class _HashedTuple(tuple):
def hashkey(*args, **kwargs):
def methodkey(self, *args, **kwargs):
def typedkey(*args, **kwargs):
def typedmethodkey(self, *args, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\cachetools\_cached.py
-----------------------------
> """Function decorator helpers."""
  
  import functools
  
def _condition_info(func, cache, key, lock, cond, info):
def _locked_info(func, cache, key, lock, info):
def _unlocked_info(func, cache, key, info):
def _uncached_info(func, info):
def _condition(func, cache, key, lock, cond):
def _locked(func, cache, key, lock):
def _unlocked(func, cache, key):
def _uncached(func):
def _wrapper(func, cache, key, lock=None, cond=None, info=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\cachetools\_cachedmethod.py
-----------------------------
> """Method decorator helpers."""
  
  import functools
  import weakref
def warn_cache_none():
def _condition(method, cache, key, lock, cond):
def _locked(method, cache, key, lock):
def _unlocked(method, cache, key):
def _wrapper(method, cache, key, lock=None, cond=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\cachetools\__init__.py
-----------------------------
> """Extensible memoizing collections and decorators."""
  
  __all__ = (
      "Cache",
class _DefaultSize:
class Cache(collections.abc.MutableMapping):
class FIFOCache(Cache):
class LFUCache(Cache):
class LRUCache(Cache):
class RRCache(Cache):
class _TimedCache(Cache):
class TTLCache(_TimedCache):
class TLRUCache(_TimedCache):
def cached(cache, key=keys.hashkey, lock=None, condition=None, info=False):
def cachedmethod(cache, key=keys.methodkey, lock=None, condition=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\certifi\core.py
-----------------------------
> """
  certifi.py
  ~~~~~~~~~~
  
def exit_cacert_ctx() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\certifi\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\certifi\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\cli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\cli\__main__.py
-----------------------------
>     """Ask a yes/no question via input() and return their answer.
  
      "question" is a string that is presented to the user.
      "default" is the presumed answer if the user just hits <Enter>.
def query_yes_no(question: str, default: str = "yes") -> bool:
class FileType:
def cli_detect(argv: list[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\api.py
-----------------------------
>     """
      Given a raw bytes sequence, return the best possibles charset usable to render str 
objects.
      If there is no results, it is a strong indicator that the source is binary/not text.
      By default, the process will extract 5 blocks of 512o each to assess the mess and 
coherence of a given sequence.
def from_bytes(
def from_fp(
def from_path(
def is_binary(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\cd.py
-----------------------------
>     """
      Return associated unicode ranges in a single byte code page.
def encoding_unicode_range(iana_name: str) -> list[str]:
def unicode_range_languages(primary_range: str) -> list[str]:
def encoding_languages(iana_name: str) -> list[str]:
def mb_encoding_languages(iana_name: str) -> list[str]:
def get_target_features(language: str) -> tuple[bool, bool]:
def alphabet_languages(
def characters_popularity_compare(
def alpha_unicode_split(decoded_sequence: str) -> list[str]:
def merge_coherence_ratios(results: list[CoherenceMatches]) -> CoherenceMatches:
def filter_alt_coherence_matches(results: CoherenceMatches) -> CoherenceMatches:
def coherence_ratio(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\constant.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\legacy.py
-----------------------------
>     """
      chardet legacy method
      Detect the encoding of the given byte string. It should be mostly backward-compatible.
      Encoding name will match Chardet own writing whenever possible. (Not on encoding name 
unsupported by it)
def detect(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\md.py
-----------------------------
>     """
      Base abstract class used for mess detection plugins.
      All detectors MUST extend and implement given methods.
class MessDetectorPlugin:
class TooManySymbolOrPunctuationPlugin(MessDetectorPlugin):
class TooManyAccentuatedPlugin(MessDetectorPlugin):
class UnprintablePlugin(MessDetectorPlugin):
class SuspiciousDuplicateAccentPlugin(MessDetectorPlugin):
class SuspiciousRange(MessDetectorPlugin):
class SuperWeirdWordPlugin(MessDetectorPlugin):
class CjkUncommonPlugin(MessDetectorPlugin):
class ArchaicUpperLowerPlugin(MessDetectorPlugin):
class ArabicIsolatedFormPlugin(MessDetectorPlugin):
def is_suspiciously_successive_range(
def mess_ratio(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\models.py
-----------------------------
>         """
          Implemented to make sorted available upon CharsetMatches items.
class CharsetMatch:
class CharsetMatches:
class CliDetectionResult:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\utils.py
-----------------------------
>     """
      Retrieve the Unicode range official name from a single character.
def is_accentuated(character: str) -> bool:
def remove_accent(character: str) -> str:
def unicode_range(character: str) -> str | None:
def is_latin(character: str) -> bool:
def is_punctuation(character: str) -> bool:
def is_symbol(character: str) -> bool:
def is_emoticon(character: str) -> bool:
def is_separator(character: str) -> bool:
def is_case_variable(character: str) -> bool:
def is_cjk(character: str) -> bool:
def is_hiragana(character: str) -> bool:
def is_katakana(character: str) -> bool:
def is_hangul(character: str) -> bool:
def is_thai(character: str) -> bool:
def is_arabic(character: str) -> bool:
def is_arabic_isolated_form(character: str) -> bool:
def is_cjk_uncommon(character: str) -> bool:
def is_unicode_range_secondary(range_name: str) -> bool:
def is_unprintable(character: str) -> bool:
def any_specified_encoding(sequence: bytes, search_zone: int = 8192) -> str | None:
def is_multi_byte_encoding(name: str) -> bool:
def identify_sig_or_bom(sequence: bytes) -> tuple[str | None, bytes]:
def should_strip_sig_or_bom(iana_encoding: str) -> bool:
def iana_name(cp_name: str, strict: bool = True) -> str:
def cp_similarity(iana_name_a: str, iana_name_b: str) -> float:
def is_cp_similar(iana_name_a: str, iana_name_b: str) -> bool:
def set_logging_handler(
def cut_sequence_chunks(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\version.py
-----------------------------
> """
  Expose version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\__init__.py
-----------------------------
> """
  Charset-Normalizer
  ~~~~~~~~~~~~~~
  The Real First Universal Charset Detector.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\charset_normalizer\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\core.py
-----------------------------
>     """List all the subcommands of a group that start with the
      incomplete value and aren't hidden.
  
      :param ctx: Invocation context for the group.
def _complete_visible_commands(
def _check_nested_chain(
def batch(iterable: cabc.Iterable[V], batch_size: int) -> list[tuple[V, ...]]:
def augment_usage_errors(
def iter_params_for_processing(
class ParameterSource(enum.Enum):
class Context:
class Command:
class _FakeSubclassCheck(type):
class _BaseCommand(Command, metaclass=_FakeSubclassCheck):
class Group(Command):
class _MultiCommand(Group, metaclass=_FakeSubclassCheck):
class CommandCollection(Group):
def _check_iter(value: t.Any) -> cabc.Iterator[t.Any]:
class Parameter:
class Option(Parameter):
class Argument(Parameter):
def __getattr__(name: str) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\decorators.py
-----------------------------
>     """Marks a callback as wanting to receive the current context
      object as first argument.
def pass_context(f: t.Callable[te.Concatenate[Context, P], R]) -> t.Callable[P, R]:
def pass_obj(f: t.Callable[te.Concatenate[T, P], R]) -> t.Callable[P, R]:
def make_pass_decorator(
def pass_meta_key(
def command(name: _AnyCallable) -> Command: ...
def command(
def command(
def command(
def command(
def group(name: _AnyCallable) -> Group: ...
def group(
def group(
def group(
def group(
def _param_memo(f: t.Callable[..., t.Any], param: Parameter) -> None:
def argument(
def option(
def confirmation_option(*param_decls: str, **kwargs: t.Any) -> t.Callable[[FC], FC]:
def password_option(*param_decls: str, **kwargs: t.Any) -> t.Callable[[FC], FC]:
def version_option(
def help_option(*param_decls: str, **kwargs: t.Any) -> t.Callable[[FC], FC]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\exceptions.py
-----------------------------
>     """An exception that Click can handle and show to the user."""
  
      #: The exit code for this exception.
      exit_code = 1
def _join_param_hints(param_hint: cabc.Sequence[str] | str | None) -> str | None:
class ClickException(Exception):
class UsageError(ClickException):
class BadParameter(UsageError):
class MissingParameter(BadParameter):
class NoSuchOption(UsageError):
class BadOptionUsage(UsageError):
class BadArgumentUsage(UsageError):
class NoArgsIsHelpError(UsageError):
class FileError(ClickException):
class Abort(RuntimeError):
class Exit(RuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\formatting.py
-----------------------------
>     """A helper function that intelligently wraps text.  By default, it
      assumes that it operates on a single paragraph of text but if the
      `preserve_paragraphs` parameter is provided it will intelligently
      handle paragraphs (defined by two empty lines).
def measure_table(rows: cabc.Iterable[tuple[str, str]]) -> tuple[int, ...]:
def iter_rows(
def wrap_text(
class HelpFormatter:
def join_options(options: cabc.Sequence[str]) -> tuple[str, bool]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\globals.py
-----------------------------
>     """Returns the current click context.  This can be used as a way to
      access the current context object from anywhere.  This is a more implicit
      alternative to the :func:`pass_context` decorator.  This function is
      primarily useful for helpers such as :func:`echo` which might be
def get_current_context(silent: t.Literal[False] = False) -> Context: ...
def get_current_context(silent: bool = ...) -> Context | None: ...
def get_current_context(silent: bool = False) -> Context | None:
def push_context(ctx: Context) -> None:
def pop_context() -> None:
def resolve_color_default(color: bool | None = None) -> bool | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\parser.py
-----------------------------
> """
  This module started out as largely a copy paste from the stdlib's
  optparse module with the features removed that we do not need from
  optparse because we implement them in Click on a higher level (for
def _unpack_args(
def _split_opt(opt: str) -> tuple[str, str]:
def _normalize_opt(opt: str, ctx: Context | None) -> str:
class _Option:
class _Argument:
class _ParsingState:
class _OptionParser:
def __getattr__(name: str) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\shell_completion.py
-----------------------------
>     """Perform shell completion for the given CLI program.
  
      :param cli: Command being called.
      :param ctx_args: Extra arguments to pass to
def shell_complete(
class CompletionItem:
class ShellComplete:
class BashComplete(ShellComplete):
class ZshComplete(ShellComplete):
class FishComplete(ShellComplete):
def add_completion_class(
def get_completion_class(shell: str) -> type[ShellComplete] | None:
def split_arg_string(string: str) -> list[str]:
def _is_incomplete_argument(ctx: Context, param: Parameter) -> bool:
def _start_of_option(ctx: Context, value: str) -> bool:
def _is_incomplete_option(ctx: Context, args: list[str], param: Parameter) -> bool:
def _resolve_context(
def _resolve_incomplete(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\termui.py
-----------------------------
>     """Prompts a user for input.  This is a convenience function that can
      be used to prompt a user for input later.
  
      If the user aborts the input by sending an interrupt signal, this
def hidden_prompt_func(prompt: str) -> str:
def _build_prompt(
def _format_default(default: t.Any) -> t.Any:
def prompt(
def confirm(
def echo_via_pager(
def progressbar(
def progressbar(
def progressbar(
def clear() -> None:
def _interpret_color(color: int | tuple[int, int, int] | str, offset: int = 0) -> str:
def style(
def unstyle(text: str) -> str:
def secho(
def edit(
def edit(
def edit(
def edit(
def launch(url: str, wait: bool = False, locate: bool = False) -> int:
def getchar(echo: bool = False) -> str:
def raw_terminal() -> AbstractContextManager[int]:
def pause(info: str | None = None, err: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\testing.py
-----------------------------
>     """Patch ``io.BytesIO`` to let the written stream be copied to another.
  
      .. versionadded:: 8.2
class EchoingStdin:
def _pause_echo(stream: EchoingStdin | None) -> cabc.Iterator[None]:
class BytesIOCopy(io.BytesIO):
class StreamMixer:
class _NamedTextIOWrapper(io.TextIOWrapper):
def make_input_stream(
class Result:
class CliRunner:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\types.py
-----------------------------
>     """Represents the type of a parameter. Validates and converts values
      from the command line or Python into the correct type.
  
      To implement a custom type, subclass and implement at least the
class ParamType:
class CompositeParamType(ParamType):
class FuncParamType(ParamType):
class UnprocessedParamType(ParamType):
class StringParamType(ParamType):
class Choice(ParamType, t.Generic[ParamTypeValue]):
class DateTime(ParamType):
class _NumberParamTypeBase(ParamType):
class _NumberRangeBase(_NumberParamTypeBase):
class IntParamType(_NumberParamTypeBase):
class IntRange(_NumberRangeBase, IntParamType):
class FloatParamType(_NumberParamTypeBase):
class FloatRange(_NumberRangeBase, FloatParamType):
class BoolParamType(ParamType):
class UUIDParameterType(ParamType):
class File(ParamType):
def _is_file_like(value: t.Any) -> te.TypeGuard[t.IO[t.Any]]:
class Path(ParamType):
class Tuple(CompositeParamType):
def convert_type(ty: t.Any | None, default: t.Any | None = None) -> ParamType:
class OptionHelpExtra(t.TypedDict, total=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\utils.py
-----------------------------
>     """Wraps a function so that it swallows exceptions."""
  
      def wrapper(*args: P.args, **kwargs: P.kwargs) -> R | None:
          try:
def _posixify(name: str) -> str:
def safecall(func: t.Callable[P, R]) -> t.Callable[P, R | None]:
def make_str(value: t.Any) -> str:
def make_default_short_help(help: str, max_length: int = 45) -> str:
class LazyFile:
class KeepOpenFile:
def echo(
def get_binary_stream(name: t.Literal["stdin", "stdout", "stderr"]) -> t.BinaryIO:
def get_text_stream(
def open_file(
def format_filename(
def get_app_dir(app_name: str, roaming: bool = True, force_posix: bool = False) -> str:
class PacifyFlushWrapper:
def _detect_program_name(
def _expand_args(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\_compat.py
-----------------------------
>     """Checks if a given encoding is ascii."""
      try:
          return codecs.lookup(encoding).name == "ascii"
      except LookupError:
def _make_text_stream(
def is_ascii_encoding(encoding: str) -> bool:
def get_best_encoding(stream: t.IO[t.Any]) -> str:
class _NonClosingTextIOWrapper(io.TextIOWrapper):
class _FixupStream:
def _is_binary_reader(stream: t.IO[t.Any], default: bool = False) -> bool:
def _is_binary_writer(stream: t.IO[t.Any], default: bool = False) -> bool:
def _find_binary_reader(stream: t.IO[t.Any]) -> t.BinaryIO | None:
def _find_binary_writer(stream: t.IO[t.Any]) -> t.BinaryIO | None:
def _stream_is_misconfigured(stream: t.TextIO) -> bool:
def _is_compat_stream_attr(stream: t.TextIO, attr: str, value: str | None) -> bool:
def _is_compatible_text_stream(
def _force_correct_text_stream(
def _force_correct_text_reader(
def _force_correct_text_writer(
def get_binary_stdin() -> t.BinaryIO:
def get_binary_stdout() -> t.BinaryIO:
def get_binary_stderr() -> t.BinaryIO:
def get_text_stdin(encoding: str | None = None, errors: str | None = None) -> t.TextIO:
def get_text_stdout(encoding: str | None = None, errors: str | None = None) -> t.TextIO:
def get_text_stderr(encoding: str | None = None, errors: str | None = None) -> t.TextIO:
def _wrap_io_open(
def open_stream(
class _AtomicFile:
def strip_ansi(value: str) -> str:
def _is_jupyter_kernel_output(stream: t.IO[t.Any]) -> bool:
def should_strip_ansi(
def term_len(x: str) -> int:
def isatty(stream: t.IO[t.Any]) -> bool:
def _make_cached_stream_func(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\_termui_impl.py
-----------------------------
> """
  This module contains implementations for the termui module. To keep the
  import time of Click down, some infrequently used functionality is
  placed in this module and only imported as needed.
class ProgressBar(t.Generic[V]):
def pager(generator: cabc.Iterable[str], color: bool | None = None) -> None:
def _pipepager(
def _tempfilepager(
def _nullpager(
class Editor:
def open_url(url: str, wait: bool = False, locate: bool = False) -> int:
def _translate_ch_to_exc(ch: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\_textwrap.py
-----------------------------
class TextWrapper(textwrap.TextWrapper):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\_winconsole.py
-----------------------------
class _WindowsConsoleRawIOBase(io.RawIOBase):
class _WindowsConsoleReader(_WindowsConsoleRawIOBase):
class _WindowsConsoleWriter(_WindowsConsoleRawIOBase):
class ConsoleStream:
def _get_text_stdin(buffer_stream: t.BinaryIO) -> t.TextIO:
def _get_text_stdout(buffer_stream: t.BinaryIO) -> t.TextIO:
def _get_text_stderr(buffer_stream: t.BinaryIO) -> t.TextIO:
def _is_console(f: t.TextIO) -> bool:
def _get_windows_console_stream(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\click\__init__.py
-----------------------------
> """
  Click is a simple Python module inspired by the stdlib optparse to make
  writing command line scripts fun. Unlike other modules, it's based
  around a simple API that does not come with too much magic and is
def __getattr__(name: str) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\ansitowin32_test.py
-----------------------------
class StreamWrapperTest(TestCase):
class AnsiToWin32Test(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\ansi_test.py
-----------------------------
class AnsiTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\initialise_test.py
-----------------------------
class InitTest(TestCase):
class JustFixWindowsConsoleTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\isatty_test.py
-----------------------------
def is_a_tty(stream):
class IsattyTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\utils.py
-----------------------------
class StreamTTY(StringIO):
class StreamNonTTY(StringIO):
def osname(name):
def replace_by(stream):
def replace_original_by(stream):
def pycharm():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\winterm_test.py
-----------------------------
class WinTermTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\ansi.py
-----------------------------
def code_to_chars(code):
def set_title(title):
def clear_screen(mode=2):
def clear_line(mode=2):
class AnsiCodes(object):
class AnsiCursor(object):
class AnsiFore(AnsiCodes):
class AnsiBack(AnsiCodes):
class AnsiStyle(AnsiCodes):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\ansitowin32.py
-----------------------------
class StreamWrapper(object):
class AnsiToWin32(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\initialise.py
-----------------------------
def _wipe_internal_state_for_tests():
def reset_all():
def init(autoreset=False, convert=None, strip=None, wrap=True):
def deinit():
def just_fix_windows_console():
def colorama_text(*args, **kwargs):
def reinit():
def wrap_stream(stream, convert, strip, autoreset, wrap):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\win32.py
-----------------------------
>         """struct in wincon.h."""
          _fields_ = [
              ("dwSize", COORD),
              ("dwCursorPosition", COORD),

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\winterm.py
-----------------------------
class WinColor(object):
class WinStyle(object):
class WinTerm(object):
def enable_vt_processing(fd):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\colorama\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\annotate.py
-----------------------------
> """Source file annotation for coverage.py."""
  
  from __future__ import annotations
  
class AnnotateReporter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\bytecode.py
-----------------------------
> """Bytecode analysis for coverage.py"""
  
  from __future__ import annotations
  
def code_objects(code: CodeType) -> Iterator[CodeType]:
def op_set(*op_names: str) -> set[int]:
class InstructionWalker:
def branch_trails(code: CodeType) -> TBranchTrails:
def always_jumps(code: CodeType) -> dict[TOffset, TOffset]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\cmdline.py
-----------------------------
> """Command-line support for coverage.py."""
  
  from __future__ import annotations
  
def oneline(text: str) -> str:
class Opts:
class CoverageOptionParser(optparse.OptionParser):
class GlobalOptionParser(CoverageOptionParser):
class CmdOptionParser(CoverageOptionParser):
def show_help(
class CoverageScript:
def unshell_list(s: str) -> list[str] | None:
def unglob_args(args: list[str]) -> list[str]:
def main(argv: list[str] | None = None) -> int | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\collector.py
-----------------------------
> """Raw data collector for coverage.py."""
  
  from __future__ import annotations
  
class Collector:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\config.py
-----------------------------
> """Config file for coverage.py"""
  
  from __future__ import annotations
  
class HandyConfigParser(configparser.ConfigParser):
class CoverageConfig(TConfigurable, TPluginConfig):
def process_file_value(path: str) -> str:
def abs_path_if_exists(path: str) -> str:
def process_regexlist(name: str, option: str, values: list[str]) -> list[str]:
def config_files_to_try(config_file: bool | str) -> list[tuple[str, bool, bool]]:
def read_coverage_config(
def deserialize_config(config_str: str) -> CoverageConfig:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\context.py
-----------------------------
> """Determine contexts for coverage.py"""
  
  from __future__ import annotations
  
def combine_context_switchers(
def should_start_context_test_function(frame: FrameType) -> str | None:
def qualname_from_frame(frame: FrameType) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\control.py
-----------------------------
> """Central control stuff for coverage.py."""
  
  from __future__ import annotations
  
def override_config(cov: Coverage, **kwargs: TConfigValueIn) -> Iterator[None]:
class Coverage(TConfigurable):
def process_startup(*, force: bool = False) -> Coverage | None:
def _after_fork_in_child() -> None:
def _prevent_sub_process_measurement() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\core.py
-----------------------------
> """Management of core choices."""
  
  from __future__ import annotations
  
class Core:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\data.py
-----------------------------
> """Coverage data for coverage.py.
  
  This file had the 4.x JSON data support, which is now gone.  This file still
  has storage-agnostic helpers, and is kept to avoid changing too many imports.
def line_counts(data: CoverageData, fullpath: bool = False) -> dict[str, int]:
def add_data_to_hash(data: CoverageData, filename: str, hasher: Hasher) -> None:
def combinable_files(data_file: str, data_paths: Iterable[str] | None = None) -> list[str]:
def combine_parallel_data(
def debug_data_file(filename: str) -> None:
def sorted_lines(data: CoverageData, filename: str) -> list[int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\debug.py
-----------------------------
> """Control of and utilities for debugging."""
  
  from __future__ import annotations
  
class DebugControl:
class NoDebugging(DebugControl):
class DevNullDebug(NoDebugging):
def info_header(label: str) -> str:
def info_formatter(info: Iterable[tuple[str, Any]]) -> Iterator[str]:
def write_formatted_info(
def exc_one_line(exc: Exception) -> str:
def short_filename(filename: str) -> str:
def short_filename(filename: None) -> None:
def short_filename(filename: str | None) -> str | None:
def file_summary(filename: str) -> str:
def short_stack(
def dump_stack_frames(out: TWritable, skip: int = 0) -> None:
def clipped_repr(text: str, numchars: int = 50) -> str:
def short_id(id64: int) -> int:
def add_pid_and_tid(text: str) -> str:
def auto_repr(self: Any) -> str:
def simplify(v: Any) -> Any:  # pragma: debugging
def pp(v: Any) -> None:  # pragma: debugging
def filter_text(text: str, filters: Iterable[Callable[[str], str]]) -> str:
class CwdTracker:
class ProcessTracker:
class PytestTracker:
class DebugOutputFile:
def log(msg: str, stack: bool = False) -> None:  # pragma: debugging
def decorate_methods(
def break_in_pudb(func: AnyCallable) -> AnyCallable:  # pragma: debugging
def show_calls(
def relevant_environment_display(env: Mapping[str, str]) -> list[tuple[str, str]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\disposition.py
-----------------------------
> """Simple value objects for tracking what to do with files."""
  
  from __future__ import annotations
  
class FileDisposition:
def disposition_init(cls: type[TFileDisposition], original_filename: str) -> TFileDisposition:
def disposition_debug_msg(disp: TFileDisposition) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\env.py
-----------------------------
> """Determine facts about the environment."""
  
  from __future__ import annotations
  
class PYBEHAVIOR:
def debug_info() -> Iterable[tuple[str, Any]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\exceptions.py
-----------------------------
> """Exceptions coverage.py can raise."""
  
  from __future__ import annotations
  
class _BaseCoverageException(Exception):
class CoverageException(_BaseCoverageException):
class ConfigError(_BaseCoverageException):
class DataError(CoverageException):
class NoDataError(CoverageException):
class NoSource(CoverageException):
class NoCode(NoSource):
class NotPython(CoverageException):
class PluginError(CoverageException):
class _ExceptionDuringRun(CoverageException):
class CoverageWarning(Warning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\execfile.py
-----------------------------
> """Execute files of Python code."""
  
  from __future__ import annotations
  
class DummyLoader:
def find_module(
class PyRunner:
def run_python_module(args: list[str]) -> None:
def run_python_file(args: list[str]) -> None:
def make_code_from_py(filename: str) -> CodeType:
def make_code_from_pyc(filename: str) -> CodeType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\files.py
-----------------------------
> """File wrangling."""
  
  from __future__ import annotations
  
def set_relative_directory() -> None:
def relative_directory() -> str:
def relative_filename(filename: str) -> str:
def canonical_filename(filename: str) -> str:
def flat_rootname(filename: str) -> str:
def abs_file(path: str) -> str:
def zip_location(filename: str) -> tuple[str, str] | None:
def source_exists(path: str) -> bool:
def python_reported_file(filename: str) -> str:
def isabs_anywhere(filename: str) -> bool:
def prep_patterns(patterns: Iterable[str]) -> list[str]:
class TreeMatcher:
class ModuleMatcher:
class GlobMatcher:
def sep(s: str) -> str:
def _glob_to_regex(pattern: str) -> str:
def globs_to_regex(
class PathAliases:
def find_python_files(dirname: str, include_namespace_packages: bool) -> Iterable[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\html.py
-----------------------------
> """HTML reporting for coverage.py."""
  
  from __future__ import annotations
  
def data_filename(fname: str) -> str:
def read_data(fname: str) -> str:
def write_html(fname: str, html: str) -> None:
class LineData:
class FileData:
class IndexItem:
class IndexPage:
class HtmlDataGeneration:
class FileToReport:
def encode_int(n: int) -> str:
def copy_with_cache_bust(src: str, dest_dir: str) -> str:
class HtmlReporter:
class FileInfo:
class IncrementalChecker:
def escape(t: str) -> str:
def pair(ratio: tuple[int, int]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\inorout.py
-----------------------------
> """Determining whether files are being measured/reported or not."""
  
  from __future__ import annotations
  
def canonical_path(morf: TMorf, directory: bool = False) -> str:
def name_for_module(filename: str, frame: FrameType | None) -> str | None:
def module_is_namespace(mod: ModuleType) -> bool:
def module_has_file(mod: ModuleType) -> bool:
def file_and_path_for_module(modulename: str) -> tuple[str | None, list[str]]:
def add_stdlib_paths(paths: set[str]) -> None:
def add_third_party_paths(paths: set[str]) -> None:
def add_coverage_paths(paths: set[str]) -> None:
class InOrOut:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\jsonreport.py
-----------------------------
> """Json reporting for coverage.py"""
  
  from __future__ import annotations
  
class JsonReporter:
def _convert_branch_arcs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\lcovreport.py
-----------------------------
> """LCOV reporting for coverage.py."""
  
  from __future__ import annotations
  
def line_hash(line: str) -> str:
def lcov_lines(
def lcov_functions(
def lcov_arcs(
class LcovReporter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\misc.py
-----------------------------
> """Miscellaneous stuff for coverage.py."""
  
  from __future__ import annotations
  
def isolate_module(mod: ModuleType) -> ModuleType:
class SysModuleSaver:
def sys_modules_saved() -> Iterator[None]:
def import_third_party(modname: str) -> tuple[ModuleType, bool]:
def nice_pair(pair: TArc) -> str:
def bool_or_none(b: Any) -> bool | None:
def join_regex(regexes: Iterable[str]) -> str:
def file_be_gone(path: str) -> None:
def ensure_dir(directory: str) -> None:
def ensure_dir_for_file(path: str) -> None:
class Hasher:
def _needs_to_implement(that: Any, func_name: str) -> NoReturn:
class DefaultValue:
def substitute_variables(text: str, variables: Mapping[str, str]) -> str:
def format_local_datetime(dt: datetime.datetime) -> str:
def import_local_file(modname: str, modfile: str | None = None) -> ModuleType:
def _human_key(s: str) -> tuple[list[str | int], str]:
def human_sorted(strings: Iterable[str]) -> list[str]:
def human_sorted_items(
def plural(n: int, thing: str = "", things: str = "") -> str:
def stdout_link(text: str, url: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\multiproc.py
-----------------------------
> """Monkey-patching to add multiprocessing support for coverage.py"""
  
  from __future__ import annotations
  
class ProcessWithCoverage(OriginalProcess):  # pylint: disable=abstract-method
class Stowaway:
def patch_multiprocessing(rcfile: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\numbits.py
-----------------------------
> """
  Functions to manipulate packed binary representations of number sets.
  
  To save space, coverage stores sets of line numbers in SQLite using a packed
def nums_to_numbits(nums: Iterable[int]) -> bytes:
def numbits_to_nums(numbits: bytes) -> list[int]:
def numbits_union(numbits1: bytes, numbits2: bytes) -> bytes:
def numbits_intersection(numbits1: bytes, numbits2: bytes) -> bytes:
def numbits_any_intersection(numbits1: bytes, numbits2: bytes) -> bool:
def num_in_numbits(num: int, numbits: bytes) -> bool:
def register_sqlite_functions(connection: sqlite3.Connection) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\parser.py
-----------------------------
> """Code parsing for coverage.py."""
  
  from __future__ import annotations
  
class PythonParser:
class ByteParser:
class ArcStart:
class TAddArcFn(Protocol):
class Block:
class LoopBlock(Block):
class FunctionBlock(Block):
class TryBlock(Block):
class NodeList(ast.AST):
def is_constant_test_expr(node: ast.AST) -> tuple[bool, bool]:
class AstArcAnalyzer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\patch.py
-----------------------------
> """Invasive patches for coverage.py."""
  
  from __future__ import annotations
  
def apply_patches(
def _patch__exit(cov: Coverage, debug: TDebugCtl) -> None:
def _patch_execv(cov: Coverage, config: CoverageConfig, debug: TDebugCtl) -> None:
def _patch_fork(debug: TDebugCtl) -> None:
def _patch_subprocess(config: CoverageConfig, debug: TDebugCtl, make_pth_file: bool) -> None:
def create_pth_files(debug: TDebugCtl = NoDebugging()) -> list[Path]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\phystokens.py
-----------------------------
> """Better tokenizing for coverage.py."""
  
  from __future__ import annotations
  
def _phys_tokens(toks: TokenInfos) -> TokenInfos:
def find_soft_key_lines(source: str) -> set[TLineNo]:
def source_token_lines(source: str) -> TSourceTokenLines:
def generate_tokens(text: str) -> TokenInfos:
def source_encoding(source: bytes) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\plugin.py
-----------------------------
> """
  .. versionadded:: 4.0
  
  Plug-in interfaces for coverage.py.
class CoveragePlugin:
class CoveragePluginBase:
class FileTracer(CoveragePluginBase):
class CodeRegion:
class FileReporter(CoveragePluginBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\plugin_support.py
-----------------------------
> """Support for plugins."""
  
  from __future__ import annotations
  
class Plugins:
class LabelledDebug:
class DebugPluginWrapper(CoveragePlugin):
class DebugFileTracerWrapper(FileTracer):
class DebugFileReporterWrapper(FileReporter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\python.py
-----------------------------
> """Python source expertise for coverage.py"""
  
  from __future__ import annotations
  
def read_python_source(filename: str) -> bytes:
def get_python_source(filename: str) -> str:
def get_zip_bytes(filename: str) -> bytes | None:
def source_for_file(filename: str) -> str:
def source_for_morf(morf: TMorf) -> str:
class PythonFileReporter(FileReporter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\pytracer.py
-----------------------------
> """Raw data collector for coverage.py."""
  
  from __future__ import annotations
  
class PyTracer(Tracer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\regions.py
-----------------------------
> """Find functions and classes in Python code."""
  
  from __future__ import annotations
  
class Context:
class RegionFinder:
def code_regions(source: str) -> list[CodeRegion]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\report.py
-----------------------------
> """Summary reporting"""
  
  from __future__ import annotations
  
class SummaryReporter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\report_core.py
-----------------------------
> """Reporter foundation for coverage.py."""
  
  from __future__ import annotations
  
class Reporter(Protocol):
def render_report(
def get_analysis_to_report(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\results.py
-----------------------------
> """Results of coverage measurement."""
  
  from __future__ import annotations
  
def analysis_from_file_reporter(
class Analysis:
class Numbers:
def display_covered(pc: float, precision: int) -> str:
def _line_ranges(
def format_lines(
def should_fail_under(total: float, fail_under: float, precision: int) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\sqldata.py
-----------------------------
> """SQLite coverage data."""
  
  from __future__ import annotations
  
def _locked(method: AnyCallable) -> AnyCallable:
class NumbitsUnionAgg:
class CoverageData:
def filename_suffix(suffix: str | bool | None) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\sqlitedb.py
-----------------------------
> """SQLite abstraction for coverage.py"""
  
  from __future__ import annotations
  
class SqliteDb:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\sysmon.py
-----------------------------
> """Callback functions and support for sys.monitoring data collection."""
  
  from __future__ import annotations
  
class CodeInfo:
def bytes_to_lines(code: CodeType) -> dict[TOffset, TLineNo]:
class SysMonitor(Tracer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\templite.py
-----------------------------
> """A simple Python template renderer, for a nano-subset of Django syntax.
  
  For a detailed discussion of this code, see this chapter from 500 Lines:
  http://aosabook.org/en/500L/a-template-engine.html
class TempliteSyntaxError(ValueError):
class TempliteValueError(ValueError):
class CodeBuilder:
class Templite:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\tomlconfig.py
-----------------------------
> """TOML configuration support for coverage.py"""
  
  from __future__ import annotations
  
class TomlDecodeError(Exception):
class TomlConfigParser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\types.py
-----------------------------
> """
  Types for use throughout coverage.py.
class TTraceFn(Protocol):
class TFileDisposition(Protocol):
class Tracer(Protocol):
class TConfigurable(Protocol):
class TPluginConfig(Protocol):
class TPlugin(Protocol):
class TWarnFn(Protocol):
class TDebugCtl(Protocol):
class TWritable(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\version.py
-----------------------------
> """The version and URL for coverage.py"""
  # This file is exec'ed in setup.py, don't import anything!
  
  from __future__ import annotations
def _make_version(
def _make_url(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\xmlreport.py
-----------------------------
> """XML reporting for coverage.py"""
  
  from __future__ import annotations
  
def rate(hit: int, num: int) -> str:
class PackageData:
def appendChild(parent: Any, child: Any) -> None:
class XmlReporter:
def serialize_xml(dom: xml.dom.minidom.Document) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\__init__.py
-----------------------------
> """
  Code coverage measurement for Python.
  
  Ned Batchelder

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\coverage\__main__.py
-----------------------------
> """Coverage.py's main entry point."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\parser\isoparser.py
-----------------------------
> """
  This module offers a parser for ISO-8601 strings
  
  It is intended to support all valid date, time and datetime formats per the
def _takes_ascii(f):
class isoparser(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\parser\_parser.py
-----------------------------
> """
  This module offers a generic date/time string parser which is able to parse
  most known formats to represent a date and/or time.
  
class _timelex(object):
class _resultbase(object):
class parserinfo(object):
class _ymd(list):
class parser(object):
def parse(timestr, parserinfo=None, **kwargs):
class _tzparser(object):
def _parsetz(tzstr):
class ParserError(ValueError):
class UnknownTimezoneWarning(RuntimeWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\parser\__init__.py
-----------------------------
def __deprecated_private_func(f):
def __deprecate_private_class(c):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\tz\tz.py
-----------------------------
> """
  This module offers timezone implementations subclassing the abstract
  :py:class:`datetime.tzinfo` type. There are classes to handle tzfile format
  files (usually are in :file:`/etc/localtime`, :file:`/usr/share/zoneinfo`,
class tzutc(datetime.tzinfo):
class tzoffset(datetime.tzinfo):
class tzlocal(_tzinfo):
class _ttinfo(object):
class _tzfile(object):
class tzfile(_tzinfo):
class tzrange(tzrangebase):
class tzstr(tzrange):
class _tzicalvtzcomp(object):
class _tzicalvtz(_tzinfo):
class tzical(object):
def __get_gettz():
def datetime_exists(dt, tz=None):
def datetime_ambiguous(dt, tz=None):
def resolve_imaginary(dt):
def _datetime_to_timestamp(dt):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\tz\win.py
-----------------------------
> """
  This module provides an interface to the native time zone data on Windows,
  including :py:class:`datetime.tzinfo` implementations.
  
def _settzkeyname():
class tzres(object):
class tzwinbase(tzrangebase):
class tzwin(tzwinbase):
class tzwinlocal(tzwinbase):
def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
def valuestodict(key):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\tz\_common.py
-----------------------------
>     """Change unicode output into bytestrings in Python 2
  
      tzname() API changed in Python 3. It used to return bytes, but was changed
      to unicode strings
def tzname_in_python2(namefunc):
def _validate_fromutc_inputs(f):
class _tzinfo(tzinfo):
class tzrangebase(_tzinfo):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\tz\_factories.py
-----------------------------
>         """Alternate constructor that returns a fresh instance"""
          return type.__call__(cls, *args, **kwargs)
  
  
class _TzSingleton(type):
class _TzFactory(type):
class _TzOffsetFactory(_TzFactory):
class _TzStrFactory(_TzFactory):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\tz\__init__.py
-----------------------------
>     """Warning raised when time zones are parsed from deprecated formats."""
class DeprecatedTzFormatWarning(Warning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\zoneinfo\rebuild.py
-----------------------------
>     """Rebuild the internal timezone info in dateutil/zoneinfo/zoneinfo*tar*
  
      filename is the timezone tarball from ``ftp.iana.org/tz``.
  
def rebuild(filename, tag=None, format="gz", zonegroups=[], metadata=None):
def _run_zic(zonedir, filepaths):
def _print_on_nosuchfile(e):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\zoneinfo\__init__.py
-----------------------------
>         """
          Wrapper for :func:`ZoneInfoFile.zones.get`. This is a convenience method
          for retrieving zones from the zone dictionary.
  
class tzfile(_tzfile):
def getzoneinfofile_stream():
class ZoneInfoFile(object):
def get_zonefile_instance(new_instance=False):
def gettz(name):
def gettz_db_metadata():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\easter.py
-----------------------------
> """
  This module offers a generic Easter computing method for any given year, using
  Western, Orthodox or Julian algorithms.
def easter(year, method=EASTER_WESTERN):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\relativedelta.py
-----------------------------
>     """
      The relativedelta type is designed to be applied to an existing datetime and
      can replace specific components of that datetime, or represents an interval
      of time.
class relativedelta(object):
def _sign(x):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\rrule.py
-----------------------------
> """
  The rrule module offers a small, complete, and very fast, implementation of
  the recurrence rules documented in the
  `iCalendar RFC <https://tools.ietf.org/html/rfc5545>`_,
class weekday(weekdaybase):
def _invalidates_cache(f):
class rrulebase(object):
class rrule(rrulebase):
class _iterinfo(object):
class rruleset(rrulebase):
class _rrulestr(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\tzwin.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\utils.py
-----------------------------
> """
  This module offers general convenience and utility functions for dealing with
  datetimes.
  
def today(tzinfo=None):
def default_tzinfo(dt, tzinfo):
def within_delta(dt1, dt2, delta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\_common.py
-----------------------------
> """
  Common code used in multiple modules.
class weekday(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dateutil\__init__.py
-----------------------------
def __getattr__(name):
def __dir__():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\compat.py
-----------------------------
>     # """splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."""
      # global _userprog
      # if _userprog is None:
      # import re

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\database.py
-----------------------------
> """PEP 376 implementation."""
  
  from __future__ import unicode_literals
  
class _Cache(object):
class DistributionPath(object):
class Distribution(object):
class BaseInstalledDistribution(Distribution):
class InstalledDistribution(BaseInstalledDistribution):
class EggInfoDistribution(BaseInstalledDistribution):
class DependencyGraph(object):
def make_graph(dists, scheme='default'):
def get_dependent_dists(dists, dist):
def get_required_dists(dists, dist):
def make_dist(name, version, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\index.py
-----------------------------
>     """
      This class represents a package index compatible with PyPI, the Python
      Package Index.
class PackageIndex(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\locators.py
-----------------------------
>     """
      Return all distribution names known by an index.
      :param url: The URL of the index.
      :return: A list of all known distribution names.
def get_all_distribution_names(url=None):
class RedirectHandler(BaseRedirectHandler):
class Locator(object):
class PyPIRPCLocator(Locator):
class PyPIJSONLocator(Locator):
class Page(object):
class SimpleScrapingLocator(Locator):
class DirectoryLocator(Locator):
class JSONLocator(Locator):
class DistPathLocator(Locator):
class AggregatingLocator(Locator):
class DependencyFinder(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\manifest.py
-----------------------------
> """
  Class representing the list of files in a distribution.
  
  Equivalent to distutils.filelist, but fixes some problems.
class Manifest(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\markers.py
-----------------------------
> """
  Parser for the environment markers micro-language defined in PEP 508.
def _is_version_marker(s):
def _is_literal(o):
def _get_versions(s):
class Evaluator(object):
def default_context():
def interpret_parsed(expr, execution_context=None):
def interpret(marker, execution_context=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\metadata.py
-----------------------------
> """Implementation of the Metadata for Python packages PEPs.
  
  Supports all metadata formats (1.0, 1.1, 1.2, 1.3/2.1 and 2.2).
class MetadataMissingError(DistlibException):
class MetadataConflictError(DistlibException):
class MetadataUnrecognizedVersionError(DistlibException):
class MetadataInvalidError(DistlibException):
def _version2fieldlist(version):
def _best_version(fields):
def _get_name_and_version(name, version, for_filename=False):
class LegacyMetadata(object):
class Metadata(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\resources.py
-----------------------------
>         """
          Is the cache stale for the given resource?
  
          :param resource: The :class:`Resource` being cached.
class ResourceCache(Cache):
class ResourceBase(object):
class Resource(ResourceBase):
class ResourceContainer(ResourceBase):
class ResourceFinder(object):
class ZipResourceFinder(ResourceFinder):
def register_finder(loader, finder_maker):
def finder(package):
def finder_for_path(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\scripts.py
-----------------------------
>     """
      A class to copy or create scripts from source scripts or callable
      specifications.
def enquote_executable(executable):
class ScriptMaker(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\util.py
-----------------------------
>     """
      Parse a marker string and return a dictionary containing a marker expression.
  
      The dictionary will contain keys "op", "lhs" and "rhs" for non-terminals in
def parse_marker(marker_string):
def parse_requirement(req):
def get_resources_dests(resources_root, rules):
def in_venv():
def get_executable():
def proceed(prompt, allowed_chars, error_prompt=None, default=None):
def extract_by_key(d, keys):
def read_exports(stream):
def write_exports(exports, stream):
def tempdir():
def chdir(d):
def socket_timeout(seconds=15):
class cached_property(object):
def convert_path(pathname):
class FileOperator(object):
def resolve(module_name, dotted_path):
class ExportEntry(object):
def get_export_entry(specification):
def get_cache_base(suffix=None):
def path_to_cache_dir(path, use_abspath=True):
def ensure_slash(s):
def parse_credentials(netloc):
def get_process_umask():
def is_string_sequence(seq):
def split_filename(filename, project_name=None):
def parse_name_and_version(p):
def get_extras(requested, available):
def _get_external_data(url):
def get_project_data(name):
def get_package_data(name, version):
class Cache(object):
class EventMixin(object):
class Sequencer(object):
def unarchive(archive_filename, dest_dir, format=None, check=True):
def zip_dir(directory):
class Progress(object):
def iglob(path_glob):
def _iglob(path_glob):
class Transport(xmlrpclib.Transport):
class ServerProxy(xmlrpclib.ServerProxy):
def _csv_open(fn, mode, **kwargs):
class CSVBase(object):
class CSVReader(CSVBase):
class CSVWriter(CSVBase):
class Configurator(BaseConfigurator):
class SubprocessMixin(object):
def normalize_name(name):
class PyPIRCFile(object):
def _load_pypirc(index):
def _store_pypirc(index):
def get_host_platform():
def get_platform():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\version.py
-----------------------------
> """
  Implementation of a flexible versioning scheme providing support for PEP-440,
  setuptools-compatible and semantic versioning.
class UnsupportedVersionError(ValueError):
class Version(object):
class Matcher(object):
def _pep_440_key(s):
class NormalizedVersion(Version):
def _match_prefix(x, y):
class NormalizedMatcher(Matcher):
def _suggest_semantic_version(s):
def _suggest_normalized_version(s):
def _legacy_key(s):
class LegacyVersion(Version):
class LegacyMatcher(Matcher):
def is_semver(s):
def _semantic_key(s):
class SemanticVersion(Version):
class SemanticMatcher(Matcher):
class VersionScheme(object):
def get_scheme(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\wheel.py
-----------------------------
>     """
      Class to build and install from Wheel files (PEP 427).
def _get_suffixes():
def _load_dynamic(name, path):
class Mounter(object):
class Wheel(object):
def _get_glibc_version():
def compatible_tags():
def is_compatible(wheel, tags=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\distlib\__init__.py
-----------------------------
class DistlibException(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\cli.py
-----------------------------
>     """
      Return a path for the ${pwd}/.env file.
  
      If pwd does not exist, return None.
def enumerate_env() -> Optional[str]:
def cli(ctx: click.Context, file: Any, quote: Any, export: Any) -> None:
def stream_file(path: os.PathLike) -> Iterator[IO[str]]:
def list(ctx: click.Context, format: bool) -> None:
def set(ctx: click.Context, key: Any, value: Any) -> None:
def get(ctx: click.Context, key: Any) -> None:
def unset(ctx: click.Context, key: Any) -> None:
def run(ctx: click.Context, override: bool, commandline: List[str]) -> None:
def run_command(command: List[str], env: Dict[str, str]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\ipython.py
-----------------------------
>     """Register the %dotenv magic."""
      ipython.register_magics(IPythonDotEnv)
class IPythonDotEnv(Magics):
def load_ipython_extension(ipython):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\main.py
-----------------------------
>         """Return dotenv as dict"""
          if self._dict:
              return self._dict
  
def with_warn_for_invalid_lines(mappings: Iterator[Binding]) -> Iterator[Binding]:
class DotEnv:
def get_key(
def rewrite(
def set_key(
def unset_key(
def resolve_variables(
def _walk_to_root(path: str) -> Iterator[str]:
def find_dotenv(
def load_dotenv(
def dotenv_values(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\parser.py
-----------------------------
def make_regex(string: str, extra_flags: int = 0) -> Pattern[str]:
class Original(NamedTuple):
class Binding(NamedTuple):
class Position:
class Error(Exception):
class Reader:
def decode_escapes(regex: Pattern[str], string: str) -> str:
def parse_key(reader: Reader) -> Optional[str]:
def parse_unquoted_value(reader: Reader) -> str:
def parse_value(reader: Reader) -> str:
def parse_binding(reader: Reader) -> Binding:
def parse_stream(stream: IO[str]) -> Iterator[Binding]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\variables.py
-----------------------------
>     r"""
      \$\{
          (?P<name>[^\}:]*)
          (?::-
class Atom(metaclass=ABCMeta):
class Literal(Atom):
class Variable(Atom):
def parse_variables(value: str) -> Iterator[Atom]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\__init__.py
-----------------------------
>     """Returns a string suitable for running as a shell script.
  
      Useful for converting a arguments passed to a fabric task
      to be passed to a `local` or `run` command.
def load_ipython_extension(ipython: Any) -> None:
def get_cli_string(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\dotenv\__main__.py
-----------------------------
> """Entry point for cli, enables execution with `python -m dotenv`"""
  
  from .cli import cli
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\script\loop_socketserver.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\script\quitserver.py
-----------------------------
> """
  
  send a "quit" signal to a remote server
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\script\shell.py
-----------------------------
> """
  a remote python shell
  
  for injection into startserver.py
def clientside() -> NoReturn:
class promptagent(Thread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\script\socketserver.py
-----------------------------
> """
  start socket based minimal readline exec server
  
  it can exeuted in 2 modes of operation
def print_(*args) -> None:
def exec_from_one_connection(serversock) -> None:
def bind_and_listen(hostport: str | tuple[str, int], execmodel: ExecModel):
def startserver(serversock, loop: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\script\socketserverservice.py
-----------------------------
> """
  A windows service wrapper for the py.execnet socketserver.
  
  To use, run:
class SocketServerService(win32serviceutil.ServiceFramework):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\script\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\gateway.py
-----------------------------
> """Gateway code for initiating popen, socket and ssh connections.
  
  (c) 2004-2013, Holger Krekel and others
class Gateway(gateway_base.BaseGateway):
class RInfo:
def rinfo_source(channel) -> None:
def _find_non_builtin_globals(source: str, codeobj: types.CodeType) -> list[str]:
def _source_of_function(function: types.FunctionType | Callable[..., object]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\gateway_base.py
-----------------------------
> """Base execnet gateway code send to the other side for bootstrapping.
  
  :copyright: 2004-2015
  :authors:
class WriteIO(Protocol):
class ReadIO(Protocol):
class IO(Protocol):
class Event(Protocol):
class ExecModel(metaclass=abc.ABCMeta):
class ThreadExecModel(ExecModel):
class MainThreadOnlyExecModel(ThreadExecModel):
class EventletExecModel(ExecModel):
class GeventExecModel(ExecModel):
def get_execmodel(backend: str | ExecModel) -> ExecModel:
class Reply:
class WorkerPool:
class Popen2IO:
class Message:
class GatewayReceivedTerminate(Exception):
def geterrortext(
class RemoteError(Exception):
class TimeoutError(IOError):
class Channel:
class ChannelFactory:
class ChannelFile:
class ChannelFileWrite(ChannelFile):
class ChannelFileRead(ChannelFile):
class BaseGateway:
class WorkerGateway(BaseGateway):
class DataFormatError(Exception):
class DumpError(DataFormatError):
class LoadError(DataFormatError):
def bchr(n: int) -> bytes:
class _Stop(Exception):
class opcode:
class Unserializer:
def dumps(obj: object) -> bytes:
def dump(byteio, obj: object) -> None:
def loads(
def load(
def loads_internal(
def dumps_internal(obj: object) -> bytes:
class _Serializer:
def init_popen_io(execmodel: ExecModel) -> Popen2IO:
def serve(io: IO, id) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\gateway_bootstrap.py
-----------------------------
> """Code to initialize the remote side of a gateway once the IO is created."""
  
  from __future__ import annotations
  
class HostNotFound(Exception):
def bootstrap_import(io: IO, spec: XSpec) -> None:
def bootstrap_exec(io: IO, spec: XSpec) -> None:
def bootstrap_socket(io: IO, id) -> None:
def sendexec(io: IO, *sources: str) -> None:
def bootstrap(io: IO, spec: XSpec) -> execnet.Gateway:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\gateway_io.py
-----------------------------
> """execnet IO initialization code.
  
  Creates IO instances used for gateway IO.
class Popen2IOMaster(Popen2IO):
def shell_split_path(path: str) -> list[str]:
def popen_args(spec: XSpec) -> list[str]:
def ssh_args(spec: XSpec) -> list[str]:
def vagrant_ssh_args(spec: XSpec) -> list[str]:
def create_io(spec: XSpec, execmodel: ExecModel) -> Popen2IOMaster:
class ProxyIO:
class PseudoSpec:
def serve_proxy_io(proxy_channelX: Channel) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\gateway_socket.py
-----------------------------
>     """Instantiate a socketserver on the given gateway.
  
      Returns a host, port tuple.
class SocketIO:
def start_via(
def create_io(spec: XSpec, group: Group, execmodel: ExecModel) -> SocketIO:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\multi.py
-----------------------------
> """
  Managing Gateway Groups and interactions with multiple channels.
  
  (c) 2008-2014, Holger Krekel and others
class Group:
class MultiChannel:
def safe_terminate(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\rsync.py
-----------------------------
> """
  1:N rsync implementation on top of execnet.
  
  (c) 2006-2009, Armin Rigo, Holger Krekel, Maciej Fijalkowski
class RSync:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\rsync_remote.py
-----------------------------
> """
  (c) 2006-2013, Armin Rigo, Holger Krekel, Maciej Fijalkowski
def serve_rsync(channel: Channel) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\xspec.py
-----------------------------
> """
  (c) 2008-2013, holger krekel
class XSpec:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\execnet\__init__.py
-----------------------------
> """
  execnet
  -------
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\dependencies\models.py
-----------------------------
class SecurityRequirement:
class Dependant:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\dependencies\utils.py
-----------------------------
>     """Check if field type is a Union where all members are BaseModel subclasses."""
      from fastapi.types import UnionType
  
      origin = get_origin(field_type)
def ensure_multipart_is_installed() -> None:
def get_param_sub_dependant(
def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:
def get_sub_dependant(
def get_flat_dependant(
def _get_flat_fields_from_params(fields: List[ModelField]) -> List[ModelField]:
def get_flat_params(dependant: Dependant) -> List[ModelField]:
def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:
def get_typed_annotation(annotation: Any, globalns: Dict[str, Any]) -> Any:
def get_typed_return_annotation(call: Callable[..., Any]) -> Any:
def get_dependant(
def add_non_field_param_to_dependency(
class ParamDetails:
def analyze_param(
def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:
def is_coroutine_callable(call: Callable[..., Any]) -> bool:
def is_async_gen_callable(call: Callable[..., Any]) -> bool:
def is_gen_callable(call: Callable[..., Any]) -> bool:
class SolvedDependency:
def _validate_value_with_model_field(
def _get_multidict_value(
def request_params_to_args(
def is_union_of_base_models(field_type: Any) -> bool:
def _should_embed_body_fields(fields: List[ModelField]) -> bool:
def get_body_field(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\dependencies\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\middleware\cors.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\middleware\gzip.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\middleware\httpsredirect.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\middleware\trustedhost.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\middleware\wsgi.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\middleware\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\openapi\constants.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\openapi\docs.py
-----------------------------
>         """
          Default configurations for Swagger UI.
  
          You can use it as a template to add any other configurations needed.
def get_swagger_ui_html(
def get_redoc_html(
def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\openapi\models.py
-----------------------------
class BaseModelWithConfig(BaseModel):
class Contact(BaseModelWithConfig):
class License(BaseModelWithConfig):
class Info(BaseModelWithConfig):
class ServerVariable(BaseModelWithConfig):
class Server(BaseModelWithConfig):
class Reference(BaseModel):
class Discriminator(BaseModel):
class XML(BaseModelWithConfig):
class ExternalDocumentation(BaseModelWithConfig):
class Schema(BaseModelWithConfig):
class Example(TypedDict, total=False):
class ParameterInType(Enum):
class Encoding(BaseModelWithConfig):
class MediaType(BaseModelWithConfig):
class ParameterBase(BaseModelWithConfig):
class Parameter(ParameterBase):
class Header(ParameterBase):
class RequestBody(BaseModelWithConfig):
class Link(BaseModelWithConfig):
class Response(BaseModelWithConfig):
class Operation(BaseModelWithConfig):
class PathItem(BaseModelWithConfig):
class SecuritySchemeType(Enum):
class SecurityBase(BaseModelWithConfig):
class APIKeyIn(Enum):
class APIKey(SecurityBase):
class HTTPBase(SecurityBase):
class HTTPBearer(HTTPBase):
class OAuthFlow(BaseModelWithConfig):
class OAuthFlowImplicit(OAuthFlow):
class OAuthFlowPassword(OAuthFlow):
class OAuthFlowClientCredentials(OAuthFlow):
class OAuthFlowAuthorizationCode(OAuthFlow):
class OAuthFlows(BaseModelWithConfig):
class OAuth2(SecurityBase):
class OpenIdConnect(SecurityBase):
class Components(BaseModelWithConfig):
class Tag(BaseModelWithConfig):
class OpenAPI(BaseModelWithConfig):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\openapi\utils.py
-----------------------------
def get_openapi_security_definitions(
def _get_openapi_operation_parameters(
def get_openapi_operation_request_body(
def generate_operation_id(
def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:
def get_openapi_operation_metadata(
def get_openapi_path(
def get_fields_from_routes(
def get_openapi(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\openapi\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\api_key.py
-----------------------------
>     """
      API key authentication using a query parameter.
  
      This defines the name of the query parameter that should be provided in the request
class APIKeyBase(SecurityBase):
class APIKeyQuery(APIKeyBase):
class APIKeyHeader(APIKeyBase):
class APIKeyCookie(APIKeyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\base.py
-----------------------------
class SecurityBase:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\http.py
-----------------------------
>     """
      The HTTP Basic credentials given as the result of using `HTTPBasic` in a
      dependency.
  
class HTTPBasicCredentials(BaseModel):
class HTTPAuthorizationCredentials(BaseModel):
class HTTPBase(SecurityBase):
class HTTPBasic(HTTPBase):
class HTTPBearer(HTTPBase):
class HTTPDigest(HTTPBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\oauth2.py
-----------------------------
>     """
      This is a dependency class to collect the `username` and `password` as form data
      for an OAuth2 password flow.
  
class OAuth2PasswordRequestForm:
class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):
class OAuth2(SecurityBase):
class OAuth2PasswordBearer(OAuth2):
class OAuth2AuthorizationCodeBearer(OAuth2):
class SecurityScopes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\open_id_connect_url.py
-----------------------------
>     """
      OpenID Connect authentication class. An instance of it would be used as a
      dependency.
class OpenIdConnect(SecurityBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\utils.py
-----------------------------
def get_authorization_scheme_param(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\security\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\applications.py
-----------------------------
>     """
      `FastAPI` app class, the main entrypoint to use FastAPI.
  
      Read more in the
class FastAPI(Starlette):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\background.py
-----------------------------
>     """
      A collection of background tasks that will be called after a response has been
      sent to the client.
  
class BackgroundTasks(StarletteBackgroundTasks):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\cli.py
-----------------------------
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\concurrency.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\datastructures.py
-----------------------------
>     """
      A file uploaded in a request.
  
      Define it as a *path operation function* (or dependency) parameter.
class UploadFile(StarletteUploadFile):
class DefaultPlaceholder:
def Default(value: DefaultType) -> DefaultType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\encoders.py
-----------------------------
>     """
      Encodes a Decimal as int of there's no exponent, otherwise float
  
      This is useful when we use ConstrainedDecimal to represent Numeric(x,0)
def isoformat(o: Union[datetime.date, datetime.time]) -> str:
def decimal_encoder(dec_value: Decimal) -> Union[int, float]:
def generate_encoders_by_class_tuples(
def jsonable_encoder(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\exceptions.py
-----------------------------
>     """
      An HTTP exception you can raise in your own code to show errors to the client.
  
      This is for client errors, invalid authentication, invalid data, etc. Not for server
class HTTPException(StarletteHTTPException):
class WebSocketException(StarletteWebSocketException):
class FastAPIError(RuntimeError):
class ValidationException(Exception):
class RequestValidationError(ValidationException):
class WebSocketRequestValidationError(ValidationException):
class ResponseValidationError(ValidationException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\exception_handlers.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\logger.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\params.py
-----------------------------
class ParamTypes(Enum):
class Param(FieldInfo):
class Path(Param):
class Query(Param):
class Header(Param):
class Cookie(Param):
class Body(FieldInfo):
class Form(Body):
class File(Form):
class Depends:
class Security(Depends):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\param_functions.py
-----------------------------
>             """
              Default value if the parameter field is not set.
  
              This doesn't affect `Path` parameters as the value is always required.
def Path(  # noqa: N802
def Query(  # noqa: N802
def Header(  # noqa: N802
def Cookie(  # noqa: N802
def Body(  # noqa: N802
def Form(  # noqa: N802
def File(  # noqa: N802
def Depends(  # noqa: N802
def Security(  # noqa: N802

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\requests.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\responses.py
-----------------------------
>     """
      JSON response using the high-performance ujson library to serialize data to JSON.
  
      Read more about it in the
class UJSONResponse(JSONResponse):
class ORJSONResponse(JSONResponse):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\routing.py
-----------------------------
>     """
      `APIRouter` class, used to group *path operations*, for example to structure
      an app in multiple files. It would then be included in the `FastAPI` app, or
      in another `APIRouter` (ultimately included in the app).
def _prepare_response_content(
def _merge_lifespan_context(
def get_request_handler(
def get_websocket_app(
class APIWebSocketRoute(routing.WebSocketRoute):
class APIRoute(routing.Route):
class APIRouter(routing.Router):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\staticfiles.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\templating.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\testclient.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\utils.py
-----------------------------
>     """
      Pass items or `DefaultPlaceholder`s by descending priority.
  
      The first one to _not_ be a `DefaultPlaceholder` will be returned.
def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:
def get_path_param_names(path: str) -> Set[str]:
def create_model_field(
def create_cloned_field(
def generate_operation_id_for_path(
def generate_unique_id(route: "APIRoute") -> str:
def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:
def get_value_or_default(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\websockets.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\_compat.py
-----------------------------
def _regenerate_error_with_loc(
def _annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:
def field_annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:
def value_is_sequence(value: Any) -> bool:
def _annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:
def field_annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:
def field_annotation_is_scalar(annotation: Any) -> bool:
def field_annotation_is_scalar_sequence(annotation: Union[Type[Any], None]) -> bool:
def is_bytes_or_nonable_bytes_annotation(annotation: Any) -> bool:
def is_uploadfile_or_nonable_uploadfile_annotation(annotation: Any) -> bool:
def is_bytes_sequence_annotation(annotation: Any) -> bool:
def is_uploadfile_sequence_annotation(annotation: Any) -> bool:
def get_cached_model_fields(model: Type[BaseModel]) -> List[ModelField]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\__init__.py
-----------------------------
> """FastAPI framework, high performance, easy to learn, fast to code, ready for production"""
  
  __version__ = "0.116.1"
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\fastapi\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\asyncio.py
-----------------------------
> """An asyncio-based implementation of the file lock."""
  
  from __future__ import annotations
  
class AsyncFileLockContext(FileLockContext):
class AsyncThreadLocalFileContext(AsyncFileLockContext, local):
class AsyncAcquireReturnProxy:
class AsyncFileLockMeta(FileLockMeta):
class BaseAsyncFileLock(BaseFileLock, metaclass=AsyncFileLockMeta):
class AsyncSoftFileLock(SoftFileLock, BaseAsyncFileLock):
class AsyncUnixFileLock(UnixFileLock, BaseAsyncFileLock):
class AsyncWindowsFileLock(WindowsFileLock, BaseAsyncFileLock):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\_api.py
-----------------------------
>     """A context-aware object that will release the lock file when exiting."""
  
      def __init__(self, lock: BaseFileLock) -> None:
          self.lock = lock
class AcquireReturnProxy:
class FileLockContext:
class ThreadLocalFileContext(FileLockContext, local):
class FileLockMeta(ABCMeta):
class BaseFileLock(contextlib.ContextDecorator, metaclass=FileLockMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\_error.py
-----------------------------
>     """Raised when the lock could not be acquired in *timeout* seconds."""
  
      def __init__(self, lock_file: str) -> None:
          super().__init__()
class Timeout(TimeoutError):  # noqa: N818

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\_soft.py
-----------------------------
>     """Simply watches the existence of the lock file."""
  
      def _acquire(self) -> None:
          raise_on_not_writable_file(self.lock_file)
class SoftFileLock(BaseFileLock):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\_unix.py
-----------------------------
>         """Uses the :func:`fcntl.flock` to hard lock the lock file on unix systems."""
  
          def _acquire(self) -> None:
              raise NotImplementedError

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\_util.py
-----------------------------
>     """
      Raise an exception if attempting to open the file for writing would fail.
  
      This is done so files that will never be writable can be separated from files that are 
writable but currently
def raise_on_not_writable_file(filename: str) -> None:
def ensure_directory_exists(filename: Path | str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\_windows.py
-----------------------------
>         """Uses the :func:`msvcrt.locking` function to hard lock the lock file on Windows 
systems."""
  
          def _acquire(self) -> None:
              raise_on_not_writable_file(self.lock_file)

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\filelock\__init__.py
-----------------------------
> """
  A platform independent file lock that supports the with-statement.
  
  .. autodata:: filelock.__version__

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\index\base.py
-----------------------------
> """Module containing :class:`IndexFile`, an Index implementation facilitating all kinds
def _named_temporary_file_for_subprocess(directory: PathLike) -> Generator[str, None, None]:
class IndexFile(LazyMixin, git_diff.Diffable, Serializable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\index\fun.py
-----------------------------
> """Standalone functions to accompany the index implementation and make it more
def hook_path(name: str, git_dir: PathLike) -> str:
def _has_file_extension(path: str) -> str:
def run_commit_hook(name: str, index: "IndexFile", *args: str) -> None:
def stat_mode_to_index_mode(mode: int) -> int:
def write_cache(
def read_header(stream: IO[bytes]) -> Tuple[int, int]:
def entry_key(*entry: Union[BaseIndexEntry, PathLike, int]) -> Tuple[PathLike, int]:
def read_cache(
def write_tree_from_cache(
def _tree_entry_to_baseindexentry(tree_entry: "TreeCacheTup", stage: int) -> BaseIndexEntry:
def aggressive_tree_merge(odb: "GitCmdObjectDB", tree_shas: Sequence[bytes]) -> List[BaseIndexEntry]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\index\typ.py
-----------------------------
> """Additional types used by the index."""
  
  __all__ = ["BlobFilter", "BaseIndexEntry", "IndexEntry", "StageType"]
  
class BlobFilter:
class BaseIndexEntryHelper(NamedTuple):
class BaseIndexEntry(BaseIndexEntryHelper):
class IndexEntry(BaseIndexEntry):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\index\util.py
-----------------------------
> """Index utilities."""
  
  __all__ = ["TemporaryFileSwap", "post_clear_cache", "default_index", "git_working_dir"]
  
class TemporaryFileSwap:
def post_clear_cache(func: Callable[..., _T]) -> Callable[..., _T]:
def default_index(func: Callable[..., _T]) -> Callable[..., _T]:
def git_working_dir(func: Callable[..., _T]) -> Callable[..., _T]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\index\__init__.py
-----------------------------
> """Initialize the index package."""
  
  __all__ = [
      "BaseIndexEntry",

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\submodule\base.py
-----------------------------
>     """Class providing detailed progress information to the caller who should
      derive from it and implement the
class UpdateProgress(RemoteProgress):
class Submodule(IndexObject, TraversableIterableObj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\submodule\root.py
-----------------------------
>     """Utility class which adds more opcodes to
class RootUpdateProgress(UpdateProgress):
class RootModule(Submodule):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\submodule\util.py
-----------------------------
>     """:return: Section title used in ``.gitmodules`` configuration file"""
      return f'submodule "{name}"'
  
  
def sm_section(name: str) -> str:
def sm_name(section: str) -> str:
def mkhead(repo: "Repo", path: PathLike) -> "Head":
def find_first_remote_branch(remotes: Sequence["Remote"], branch_name: str) -> "RemoteReference":
class SubmoduleConfigParser(GitConfigParser):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\submodule\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\base.py
-----------------------------
>     """Base class for classes representing git object types.
  
      The following four leaf classes represent specific kinds of git objects:
  
class Object(LazyMixin):
class IndexObject(Object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\blob.py
-----------------------------
>     """A Blob encapsulates a git blob object.
  
      See :manpage:`gitglossary(7)` on "blob":
      https://git-scm.com/docs/gitglossary#def_blob_object
class Blob(base.IndexObject):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\commit.py
-----------------------------
>     """Wraps a git commit object.
  
      See :manpage:`gitglossary(7)` on "commit object":
      https://git-scm.com/docs/gitglossary#def_commit_object
class Commit(base.Object, TraversableIterableObj, Diffable, Serializable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\fun.py
-----------------------------
> """Functions that are supposed to be as fast as possible."""
  
  __all__ = [
      "tree_to_stream",
def tree_to_stream(entries: Sequence[EntryTup], write: Callable[["ReadableBuffer"], Union[int, None]]) -> None:
def tree_entries_from_data(data: bytes) -> List[EntryTup]:
def _find_by_name(tree_data: MutableSequence[EntryTupOrNone], name: str, is_dir: bool, start_at: int) -> EntryTupOrNone:
def _to_full_path(item: None, path_prefix: str) -> None: ...
def _to_full_path(item: EntryTup, path_prefix: str) -> EntryTup: ...
def _to_full_path(item: EntryTupOrNone, path_prefix: str) -> EntryTupOrNone:
def traverse_trees_recursive(
def traverse_tree_recursive(odb: "GitCmdObjectDB", tree_sha: bytes, path_prefix: str) -> List[EntryTup]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\tag.py
-----------------------------
> """Provides an :class:`~git.objects.base.Object`-based type for annotated tags.
  
  This defines the :class:`TagObject` class, which represents annotated tags.
  For lightweight tags, see the :mod:`git.refs.tag` module.
class TagObject(base.Object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\tree.py
-----------------------------
>     """A utility class providing methods to alter the underlying cache in a list-like
      fashion.
  
      Once all adjustments are complete, the :attr:`_cache`, which really is a reference
def cmp(a: str, b: str) -> int:
class TreeModifier:
class Tree(IndexObject, git_diff.Diffable, util.Traversable, util.Serializable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\util.py
-----------------------------
> """Utility functions for working with git objects."""
  
  __all__ = [
      "get_object_type_by_name",
class TraverseNT(NamedTuple):
def mode_str_to_int(modestr: Union[bytes, str]) -> int:
def get_object_type_by_name(
def utctz_to_altz(utctz: str) -> int:
def altz_to_utctz_str(altz: float) -> str:
def verify_utctz(offset: str) -> str:
class tzoffset(tzinfo):
def from_timestamp(timestamp: float, tz_offset: float) -> datetime:
def parse_date(string_date: Union[str, datetime]) -> Tuple[int, int]:
def parse_actor_and_date(line: str) -> Tuple[Actor, int, int]:
class ProcessStreamAdapter:
class Traversable(Protocol):
class Serializable(Protocol):
class TraversableIterableObj(IterableObj, Traversable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\objects\__init__.py
-----------------------------
> """Import all submodules' main classes into the package space."""
  
  __all__ = [
      "IndexObject",

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\head.py
-----------------------------
> """Some ref-based objects.
  
  Note the distinction between the :class:`HEAD` and :class:`Head` classes.
def strip_quotes(string: str) -> str:
class HEAD(SymbolicReference):
class Head(Reference):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\log.py
-----------------------------
>     """Named tuple allowing easy access to the revlog data fields."""
  
      _re_hexsha_only = re.compile(r"^[0-9A-Fa-f]{40}$")
  
class RefLogEntry(Tuple[str, str, Actor, Tuple[int, int], str]):
class RefLog(List[RefLogEntry], Serializable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\reference.py
-----------------------------
>     """A decorator raising :exc:`ValueError` if we are not a valid remote, based on the
def require_remote_ref_path(func: Callable[..., _T]) -> Callable[..., _T]:
class Reference(SymbolicReference, LazyMixin, IterableObj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\remote.py
-----------------------------
> """Module implementing a remote object allowing easy access to git remotes."""
  
  __all__ = ["RemoteReference"]
  
class RemoteReference(Head):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\symbolic.py
-----------------------------
>     """Find the git dir that is appropriate for the path."""
      name = f"{path}"
      if name in ["HEAD", "ORIG_HEAD", "FETCH_HEAD", "index", "logs"]:
          return repo.git_dir
def _git_dir(repo: "Repo", path: Union[PathLike, None]) -> PathLike:
class SymbolicReference:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\tag.py
-----------------------------
> """Provides a :class:`~git.refs.reference.Reference`-based type for lightweight tags.
  
  This defines the :class:`TagReference` class (and its alias :class:`Tag`), which
  represents lightweight tags. For annotated tags (which are git objects), see the
class TagReference(Reference):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\refs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\repo\base.py
-----------------------------
>     """Represents a git repository and allows you to query references, create commit
      information, generate diffs, create and clone repositories, and query the log.
  
      The following attributes are worth using:
class BlameEntry(NamedTuple):
class Repo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\repo\fun.py
-----------------------------
> """General repository-related functions."""
  
  from __future__ import annotations
  
def touch(filename: str) -> str:
def is_git_dir(d: PathLike) -> bool:
def find_worktree_git_dir(dotgit: PathLike) -> Optional[str]:
def find_submodule_git_dir(d: PathLike) -> Optional[PathLike]:
def short_to_long(odb: "GitCmdObjectDB", hexsha: str) -> Optional[bytes]:
def name_to_object(repo: "Repo", name: str, return_ref: Literal[False] = ...) -> AnyGitObject: ...
def name_to_object(repo: "Repo", name: str, return_ref: Literal[True]) -> Union[AnyGitObject, SymbolicReference]: ...
def name_to_object(repo: "Repo", name: str, return_ref: bool = False) -> Union[AnyGitObject, SymbolicReference]:
def deref_tag(tag: "Tag") -> AnyGitObject:
def to_commit(obj: Object) -> "Commit":
def rev_parse(repo: "Repo", rev: str) -> AnyGitObject:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\repo\__init__.py
-----------------------------
> """Initialize the repo package."""
  
  __all__ = ["Repo"]
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\cmd.py
-----------------------------
>     R"""Register for notifications to learn that process output is ready to read, and
      dispatch lines to the respective line handlers.
  
      This function returns once the finalizer returns.
def handle_process_output(
def dashify(string: str) -> str:
def slots_to_dict(self: "Git", exclude: Sequence[str] = ()) -> Dict[str, Any]:
def dict_to_slots_and__excluded_are_none(self: object, d: Mapping[str, Any], excluded: Sequence[str] = ()) -> None:
class _AutoInterrupt:
class _CatFileContentStream:
def _warn_use_shell(*, extra_danger: bool) -> None:
class _GitMeta(type):
class Git(metaclass=_GitMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\compat.py
-----------------------------
> """Utilities to help provide compatibility with Python 3.
  
  This module exists for historical reasons. Code outside GitPython may make use of public
  members of this module, but is unlikely to benefit from doing so. GitPython continues to
def _getattr(name: str) -> Any:
def __dir__() -> List[str]:
def safe_decode(s: None) -> None: ...
def safe_decode(s: AnyStr) -> str: ...
def safe_decode(s: Union[AnyStr, None]) -> Optional[str]:
def safe_encode(s: None) -> None: ...
def safe_encode(s: AnyStr) -> bytes: ...
def safe_encode(s: Optional[AnyStr]) -> Optional[bytes]:
def win_encode(s: None) -> None: ...
def win_encode(s: AnyStr) -> bytes: ...
def win_encode(s: Optional[AnyStr]) -> Optional[bytes]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\config.py
-----------------------------
> """Parser for reading and writing configuration files."""
  
  __all__ = ["GitConfigParser", "SectionConstraint"]
  
class MetaParserBuilder(abc.ABCMeta):  # noqa: B024
def needs_values(func: Callable[..., _T]) -> Callable[..., _T]:
def set_dirty_and_flush_changes(non_const_func: Callable[..., _T]) -> Callable[..., _T]:
class SectionConstraint(Generic[T_ConfigParser]):
class _OMD(OrderedDict_OMD):
def get_config_path(config_level: Lit_config_levels) -> str:
class GitConfigParser(cp.RawConfigParser, metaclass=MetaParserBuilder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\db.py
-----------------------------
> """Module with our own gitdb implementation - it uses the git command."""
  
  __all__ = ["GitCmdObjectDB", "GitDB"]
  
class GitCmdObjectDB(LooseObjectDB):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\diff.py
-----------------------------
>     """Special objects for :meth:`Diffable.diff`.
  
      See the :meth:`Diffable.diff` method's ``other`` parameter, which accepts various
      values including these.
class DiffConstants(enum.Enum):
def _octal_repl(matchobj: Match) -> bytes:
def decode_path(path: bytes, has_ab_prefix: bool = True) -> Optional[bytes]:
class Diffable:
class DiffIndex(List[T_Diff]):
class Diff:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\exc.py
-----------------------------
> """Exceptions thrown throughout the git package."""
  
  __all__ = [
      # Defined in gitdb.exc:
class GitError(Exception):
class InvalidGitRepositoryError(GitError):
class WorkTreeRepositoryUnsupported(InvalidGitRepositoryError):
class NoSuchPathError(GitError, OSError):
class UnsafeProtocolError(GitError):
class UnsafeOptionError(GitError):
class CommandError(GitError):
class GitCommandNotFound(CommandError):
class GitCommandError(CommandError):
class CheckoutError(GitError):
class CacheError(GitError):
class UnmergedEntriesError(CacheError):
class HookExecutionError(CommandError):
class RepositoryDirtyError(GitError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\remote.py
-----------------------------
> """Module implementing a remote object allowing easy access to git remotes."""
  
  __all__ = ["RemoteProgress", "PushInfo", "FetchInfo", "Remote"]
  
def add_progress(
def to_progress_instance(progress: None) -> RemoteProgress: ...
def to_progress_instance(progress: Callable[..., Any]) -> CallableRemoteProgress: ...
def to_progress_instance(progress: RemoteProgress) -> RemoteProgress: ...
def to_progress_instance(
class PushInfo(IterableObj):
class PushInfoList(IterableList[PushInfo]):
class FetchInfo(IterableObj):
class Remote(LazyMixin, IterableObj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\types.py
-----------------------------
> """A :class:`str` (Unicode) based file or directory path."""
  
  TBD = Any
def _getattr(name: str) -> Any:
def __dir__() -> List[str]:
def assert_never(inp: NoReturn, raise_error: bool = True, exc: Union[Exception, None] = None) -> None:
class Files_TD(TypedDict):
class Total_TD(TypedDict):
class HSH_TD(TypedDict):
class Has_Repo(Protocol):
class Has_id_attribute(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\util.py
-----------------------------
>     """Read a boolean flag from an environment variable.
  
      :return:
          The flag, or the `default` value if absent or ambiguous.
def _read_env_flag(name: str, default: bool) -> bool:
def _read_win_env_flag(name: str, default: bool) -> bool:
def unbare_repo(func: Callable[..., T]) -> Callable[..., T]:
def cwd(new_dir: PathLike) -> Generator[PathLike, None, None]:
def patch_env(name: str, value: str) -> Generator[None, None, None]:
def rmtree(path: PathLike) -> None:
def rmfile(path: PathLike) -> None:
def stream_copy(source: BinaryIO, destination: BinaryIO, chunk_size: int = 512 * 1024) -> int:
def join_path(a: PathLike, *p: PathLike) -> PathLike:
def join_path_native(a: PathLike, *p: PathLike) -> PathLike:
def assure_directory_exists(path: PathLike, is_file: bool = False) -> bool:
def _get_exe_extensions() -> Sequence[str]:
def py_where(program: str, path: Optional[PathLike] = None) -> List[str]:
def _cygexpath(drive: Optional[str], path: str) -> str:
def cygpath(path: str) -> str:
def decygpath(path: PathLike) -> str:
def _is_cygwin_git(git_executable: str) -> bool:
def is_cygwin_git(git_executable: None) -> Literal[False]: ...
def is_cygwin_git(git_executable: PathLike) -> bool: ...
def is_cygwin_git(git_executable: Union[None, PathLike]) -> bool:
def get_user_id() -> str:
def finalize_process(proc: Union[subprocess.Popen, "Git.AutoInterrupt"], **kwargs: Any) -> None:
def expand_path(p: None, expand_vars: bool = ...) -> None: ...
def expand_path(p: PathLike, expand_vars: bool = ...) -> str:
def expand_path(p: Union[None, PathLike], expand_vars: bool = True) -> Optional[PathLike]:
def remove_password_if_present(cmdline: Sequence[str]) -> List[str]:
class RemoteProgress:
class CallableRemoteProgress(RemoteProgress):
class Actor:
class Stats:
class IndexFileSHA1Writer:
class LockFile:
class BlockingLockFile(LockFile):
class IterableList(List[T_IterableObj]):
class IterableObj(Protocol):
class IterableClassWatcher(type):
class Iterable(metaclass=IterableClassWatcher):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\git\__init__.py
-----------------------------
>     """Convenience method for setting the git executable path.
  
      :param path:
          Optional path to the Git executable. If not absolute, it is resolved
def _warned_import(message: str, fullname: str) -> "ModuleType":
def _getattr(name: str) -> Any:
def refresh(path: Optional[PathLike] = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\base.py
-----------------------------
> """Contains implementations of database retrieveing objects"""
  from gitdb.util import (
      join,
      LazyMixin,
class ObjectDBR:
class ObjectDBW:
class FileDBBase:
class CachingDB:
def _databases_recursive(database, output):
class CompoundDB(ObjectDBR, LazyMixin, CachingDB):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\git.py
-----------------------------
>     """A git-style object database, which contains all objects in the 'objects'
      subdirectory
  
      ``IMPORTANT``: The usage of this implementation is highly discouraged as it fails to 
release file-handles.
class GitDB(FileDBBase, ObjectDBW, CompoundDB):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\loose.py
-----------------------------
>     """A database which operates on loose object files"""
  
      # CONFIGURATION
      # chunks in which data will be copied between streams
class LooseObjectDB(FileDBBase, ObjectDBR, ObjectDBW):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\mem.py
-----------------------------
> """Contains the MemoryDatabase implementation"""
  from gitdb.db.loose import LooseObjectDB
  from gitdb.db.base import (
      ObjectDBR,
class MemoryDB(ObjectDBR, ObjectDBW):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\pack.py
-----------------------------
> """Module containing a database to deal with packs"""
  from gitdb.db.base import (
      FileDBBase,
      ObjectDBR,
class PackedDB(FileDBBase, ObjectDBR, CachingDB, LazyMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\ref.py
-----------------------------
>     """A database consisting of database referred to in a file"""
  
      # Configuration
      # Specifies the object database to use for the paths found in the alternates
class ReferenceDB(CompoundDB):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\db\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\lib.py
-----------------------------
> """Utilities used in ODB testing"""
  from gitdb import OStream
  
  import sys
class TestBase(unittest.TestCase):
def with_rw_directory(func):
def with_packs_rw(func):
def fixture_path(relapath=''):
def copy_files_globbed(source_glob, target_dir, hard_link_ok=False):
def make_bytes(size_in_bytes, randomize=False):
def make_object(type, data):
def make_memory_file(size_in_bytes, randomize=False):
class DummyStream:
class DeriveTest(OStream):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\test_base.py
-----------------------------
> """Test for object db"""
  from gitdb.test.lib import (
      TestBase,
      DummyStream,
class TestBaseTypes(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\test_example.py
-----------------------------
> """Module with examples from the tutorial section of the docs"""
  import os
  from gitdb.test.lib import TestBase
  from gitdb import IStream
class TestExamples(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\test_pack.py
-----------------------------
> """Test everything about packs reading and writing"""
  from gitdb.test.lib import (
      TestBase,
      with_rw_directory,
def bin_sha_from_filename(filename):
class TestPack(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\test_stream.py
-----------------------------
> """Test for object db"""
  
  from gitdb.test.lib import (
      TestBase,
class TestStream(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\test_util.py
-----------------------------
> """Test for object db"""
  import tempfile
  import os
  
class TestUtils(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\test\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\utils\encoding.py
-----------------------------
def force_bytes(data, encoding="utf-8"):
def force_text(data, encoding="utf-8"):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\utils\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\base.py
-----------------------------
> """Module with basic data structures - they are designed to be lightweight and fast"""
  from gitdb.util import bin_to_hex
  
  from gitdb.fun import (
class OInfo(tuple):
class OPackInfo(tuple):
class ODeltaPackInfo(OPackInfo):
class OStream(OInfo):
class ODeltaStream(OStream):
class OPackStream(OPackInfo):
class ODeltaPackStream(ODeltaPackInfo):
class IStream(list):
class InvalidOInfo(tuple):
class InvalidOStream(InvalidOInfo):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\const.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\exc.py
-----------------------------
> """Module with common exceptions"""
  from gitdb.util import to_hex_sha
  
  __all__ = [
class ODBError(Exception):
class InvalidDBRoot(ODBError):
class BadObject(ODBError):
class BadName(ODBError):
class ParseError(ODBError):
class AmbiguousObjectName(ODBError):
class BadObjectType(ODBError):
class UnsupportedOperation(ODBError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\fun.py
-----------------------------
> """Contains basic c-functions which usually contain performance critical code
  Keeping this code separate from the beginning makes it easier to out-source
def _set_delta_rbound(d, size):
def _move_delta_lbound(d, bytes):
def delta_duplicate(src):
def delta_chunk_apply(dc, bbuf, write):
class DeltaChunk:
def _closest_index(dcl, absofs):
def delta_list_apply(dcl, bbuf, write):
def delta_list_slice(dcl, absofs, size, ndcl):
class DeltaChunkList(list):
class TopdownDeltaChunkList(DeltaChunkList):
def is_loose_object(m):
def loose_object_header_info(m):
def pack_object_header_info(data):
def create_pack_object_header(obj_type, obj_size):
def msb_size(data, offset=0):
def loose_object_header(type, size):
def write_object(type, size, read, write, chunk_size=chunk_size):
def stream_copy(read, write, size, chunk_size):
def connect_deltas(dstreams):
def apply_delta_data(src_buf, src_buf_size, delta_buf, delta_buf_size, write):
def is_equal_canonical_sha(canonical_length, match, sha1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\pack.py
-----------------------------
> """Contains PackIndexFile and PackFile implementations"""
  import zlib
  
  from gitdb.exc import (
def pack_object_at(cursor, offset, as_stream):
def write_stream_to_pack(read, write, zstream, base_crc=None):
class IndexWriter:
class PackIndexFile(LazyMixin):
class PackFile(LazyMixin):
class PackEntity(LazyMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\stream.py
-----------------------------
>     """Reads data in chunks from a memory map and decompresses it. The client sees
      only the uncompressed data, respective file-like read calls are handling on-demand
      buffered decompression accordingly
  
class DecompressMemMapReader(LazyMixin):
class DeltaApplyReader(LazyMixin):
class Sha1Writer:
class FlexibleSha1Writer(Sha1Writer):
class ZippedStoreShaWriter(Sha1Writer):
class FDCompressedSha1Writer(Sha1Writer):
class FDStream:
class NullStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\typ.py
-----------------------------
> """Module containing information about types known to the database"""
  
  str_blob_type = b'blob'
  str_commit_type = b'commit'

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\util.py
-----------------------------
>     """Wrapper to provide required functionality in case memory maps cannot or may
def _retry(func, *args, **kwargs):
def remove(*args, **kwargs):
class _RandomAccessBytesIO:
def byte_ord(b):
def make_sha(source=b''):
def allocate_memory(size):
def file_contents_ro(fd, stream=False, allow_mmap=True):
def file_contents_ro_filepath(filepath, stream=False, allow_mmap=True, flags=0):
def sliding_ro_buffer(filepath, flags=0):
def to_hex_sha(sha):
def to_bin_sha(sha):
class LazyMixin:
class LockedFD:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\gitdb\__init__.py
-----------------------------
> """Initialize the object database module"""
  
  __author__ = "Sebastian Thiel"
  __contact__ = "byronimo@gmail.com"

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\compiler\plugin_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\compiler\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\api_implementation.py
-----------------------------
> """Determine which implementation of the protobuf API is used in this process.
def _ApiVersionToImplementationType(api_version):
def _CanImport(mod_name):
def Type():
def IsPythonDefaultSerializationDeterministic():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\builder.py
-----------------------------
> """Builds descriptors, message classes and services for generated _pb2.py.
  
  This file is only called in python generated _pb2.py files. It builds
  descriptors, message classes and services that users can directly use
def BuildMessageAndEnumDescriptors(file_des, module):
def BuildTopDescriptorsAndMessages(file_des, module_name, module):
def AddHelpersToExtensions(file_des):
def BuildServices(file_des, module_name, module):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\containers.py
-----------------------------
> """Contains container classes to represent different protocol buffer types.
  
  This file defines container classes which represent categories of protocol
  buffer field types which need extra maintenance. Currently these categories
class BaseContainer(Sequence[_T]):
class RepeatedScalarFieldContainer(BaseContainer[_T], MutableSequence[_T]):
class RepeatedCompositeFieldContainer(BaseContainer[_T], MutableSequence[_T]):
class ScalarMap(MutableMapping[_K, _V]):
class MessageMap(MutableMapping[_K, _V]):
class _UnknownField:
class UnknownFieldRef:  # pylint: disable=missing-class-docstring
class UnknownFieldSet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\decoder.py
-----------------------------
> """Code for decoding protocol buffer primitives.
  
  This code is very similar to encoder.py -- read the docs for that module first.
  
def IsDefaultScalarValue(value):
def _VarintDecoder(mask, result_type):
def _SignedVarintDecoder(bits, result_type):
def ReadTag(buffer, pos):
def DecodeTag(tag_bytes):
def _SimpleDecoder(wire_type, decode_value):
def _ModifiedDecoder(wire_type, decode_value, modify_value):
def _StructPackDecoder(wire_type, format):
def _FloatDecoder():
def _DoubleDecoder():
def EnumDecoder(field_number, is_repeated, is_packed, key, new_default,
def StringDecoder(field_number, is_repeated, is_packed, key, new_default,
def BytesDecoder(field_number, is_repeated, is_packed, key, new_default,
def GroupDecoder(field_number, is_repeated, is_packed, key, new_default):
def MessageDecoder(field_number, is_repeated, is_packed, key, new_default):
def MessageSetItemDecoder(descriptor):
def UnknownMessageSetItemDecoder():
def MapDecoder(field_descriptor, new_default, is_message_map):
def _DecodeFixed64(buffer, pos):
def _DecodeFixed32(buffer, pos):
def SetRecursionLimit(new_limit):
def _DecodeUnknownFieldSet(buffer, pos, end_pos=None, current_depth=0):
def _DecodeUnknownField(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\encoder.py
-----------------------------
> """Code for encoding protocol message primitives.
  
  Contains the logic for encoding every logical protocol field type
  into one of the 5 physical wire types.
def _VarintSize(value):
def _SignedVarintSize(value):
def _TagSize(field_number):
def _SimpleSizer(compute_value_size):
def _ModifiedSizer(compute_value_size, modify_value):
def _FixedSizer(value_size):
def StringSizer(field_number, is_repeated, is_packed):
def BytesSizer(field_number, is_repeated, is_packed):
def GroupSizer(field_number, is_repeated, is_packed):
def MessageSizer(field_number, is_repeated, is_packed):
def MessageSetItemSizer(field_number):
def MapSizer(field_descriptor, is_message_map):
def _VarintEncoder():
def _SignedVarintEncoder():
def _VarintBytes(value):
def TagBytes(field_number, wire_type):
def _SimpleEncoder(wire_type, encode_value, compute_value_size):
def _ModifiedEncoder(wire_type, encode_value, compute_value_size, modify_value):
def _StructPackEncoder(wire_type, format):
def _FloatingPointEncoder(wire_type, format):
def BoolEncoder(field_number, is_repeated, is_packed):
def StringEncoder(field_number, is_repeated, is_packed):
def BytesEncoder(field_number, is_repeated, is_packed):
def GroupEncoder(field_number, is_repeated, is_packed):
def MessageEncoder(field_number, is_repeated, is_packed):
def MessageSetItemEncoder(field_number):
def MapEncoder(field_descriptor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\enum_type_wrapper.py
-----------------------------
> """A simple wrapper around enum types to expose utility functions.
  
  Instances are created as properties with the same name as the enum they wrap
  on proto classes.  For usage, see:
class EnumTypeWrapper(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\extension_dict.py
-----------------------------
> """Contains _ExtensionDict class to represent extensions.
def _VerifyExtensionHandle(message, extension_handle):
class _ExtensionDict(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\field_mask.py
-----------------------------
> """Contains FieldMask class."""
  
  from google.protobuf.descriptor import FieldDescriptor
  
class FieldMask(object):
def _IsValidPath(message_descriptor, path):
def _CheckFieldMaskMessage(message):
def _SnakeCaseToCamelCase(path_name):
def _CamelCaseToSnakeCase(path_name):
class _FieldMaskTree(object):
def _StrConvert(value):
def _MergeMessage(
def _AddFieldPaths(node, prefix, field_mask):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\message_listener.py
-----------------------------
> """Defines a listener interface for observing certain
  state transitions on Message objects.
  
  Also defines a null implementation of this interface.
class MessageListener(object):
class NullMessageListener(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\python_edition_defaults.py
-----------------------------
> """
  This file contains the serialized FeatureSetDefaults object corresponding to
  the Pure Python runtime.  This is used for feature resolution under Editions.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\python_message.py
-----------------------------
> """Contains a metaclass and helper functions used to create
  protocol message classes from Descriptor objects at runtime.
  
  Recall that a metaclass is the "type" of a class.
class GeneratedProtocolMessageType(type):
def _PropertyName(proto_field_name):
def _AddSlots(message_descriptor, dictionary):
def _IsMessageSetExtension(field):
def _IsMapField(field):
def _IsMessageMapField(field):
def _AttachFieldHelpers(cls, field_descriptor):
def _MaybeAddEncoder(cls, field_descriptor):
def _MaybeAddDecoder(cls, field_descriptor):
def _AddClassAttributesForNestedExtensions(descriptor, dictionary):
def _AddEnumValues(descriptor, cls):
def _GetInitializeDefaultForMap(field):
def _DefaultValueConstructorForField(field):
def _ReraiseTypeErrorWithFieldName(message_name, field_name):
def _AddInitMethod(message_descriptor, cls):
def _GetFieldByName(message_descriptor, field_name):
def _AddPropertiesForFields(descriptor, cls):
def _AddPropertiesForField(field, cls):
class _FieldProperty(property):
def _AddPropertiesForRepeatedField(field, cls):
def _AddPropertiesForNonRepeatedScalarField(field, cls):
def _AddPropertiesForNonRepeatedCompositeField(field, cls):
def _AddPropertiesForExtensions(descriptor, cls):
def _AddStaticMethods(cls):
def _IsPresent(item):
def _AddListFieldsMethod(message_descriptor, cls):
def _AddHasFieldMethod(message_descriptor, cls):
def _AddClearFieldMethod(message_descriptor, cls):
def _AddClearExtensionMethod(cls):
def _AddHasExtensionMethod(cls):
def _InternalUnpackAny(msg):
def _AddEqualsMethod(message_descriptor, cls):
def _AddStrMethod(message_descriptor, cls):
def _AddReprMethod(message_descriptor, cls):
def _AddUnicodeMethod(unused_message_descriptor, cls):
def _AddContainsMethod(message_descriptor, cls):
def _BytesForNonRepeatedElement(value, field_number, field_type):
def _AddByteSizeMethod(message_descriptor, cls):
def _AddSerializeToStringMethod(message_descriptor, cls):
def _AddSerializePartialToStringMethod(message_descriptor, cls):
def _AddMergeFromStringMethod(message_descriptor, cls):
def _AddIsInitializedMethod(message_descriptor, cls):
def _FullyQualifiedClassName(klass):
def _AddMergeFromMethod(cls):
def _AddWhichOneofMethod(message_descriptor, cls):
def _Clear(self):
def _UnknownFields(self):
def _DiscardUnknownFields(self):
def _SetListener(self, listener):
def _AddMessageMethods(message_descriptor, cls):
def _AddPrivateHelperMethods(message_descriptor, cls):
class _Listener(object):
class _OneofListener(_Listener):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\testing_refleaks.py
-----------------------------
> """A subclass of unittest.TestCase which checks for reference leaks.
  
  To use:
  - Use testing_refleak.BaseTestCase instead of unittest.TestCase
class LocalTestResult(unittest.TestResult):
class ReferenceLeakCheckerMixin(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\type_checkers.py
-----------------------------
> """Provides type checking routines.
  
  This module defines type checking utilities in the forms of dictionaries:
  
def TruncateToFourByteFloat(original):
def ToShortestFloat(original):
def GetTypeChecker(field):
class TypeChecker(object):
class TypeCheckerWithDefault(TypeChecker):
class BoolValueChecker(object):
class IntValueChecker(object):
class EnumValueChecker(object):
class UnicodeValueChecker(object):
class Int32ValueChecker(IntValueChecker):
class Uint32ValueChecker(IntValueChecker):
class Int64ValueChecker(IntValueChecker):
class Uint64ValueChecker(IntValueChecker):
class DoubleValueChecker(object):
class FloatValueChecker(DoubleValueChecker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\well_known_types.py
-----------------------------
> """Contains well known classes.
  
  This files defines well known classes which need extra maintenance including:
    - Any
class Any(object):
class Timestamp(object):
def _CheckTimestampValid(seconds, nanos):
class Duration(object):
def _CheckDurationValid(seconds, nanos):
def _RoundTowardZero(value, divider):
def _SetStructValue(struct_value, value):
def _GetStructValue(struct_value):
class Struct(object):
class ListValue(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\wire_format.py
-----------------------------
> """Constants and static functions to support protocol buffer wire format."""
  
  __author__ = 'robinson@google.com (Will Robinson)'
  
def PackTag(field_number, wire_type):
def UnpackTag(tag):
def ZigZagEncode(value):
def ZigZagDecode(value):
def Int32ByteSize(field_number, int32):
def Int32ByteSizeNoTag(int32):
def Int64ByteSize(field_number, int64):
def UInt32ByteSize(field_number, uint32):
def UInt64ByteSize(field_number, uint64):
def SInt32ByteSize(field_number, int32):
def SInt64ByteSize(field_number, int64):
def Fixed32ByteSize(field_number, fixed32):
def Fixed64ByteSize(field_number, fixed64):
def SFixed32ByteSize(field_number, sfixed32):
def SFixed64ByteSize(field_number, sfixed64):
def FloatByteSize(field_number, flt):
def DoubleByteSize(field_number, double):
def BoolByteSize(field_number, b):
def EnumByteSize(field_number, enum):
def StringByteSize(field_number, string):
def BytesByteSize(field_number, b):
def GroupByteSize(field_number, message):
def MessageByteSize(field_number, message):
def MessageSetItemByteSize(field_number, msg):
def TagByteSize(field_number):
def _VarUInt64ByteSizeNoTag(uint64):
def IsTypePackable(field_type):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\internal\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\pyext\cpp_message.py
-----------------------------
> """Protocol message implementation hooks for C++ implementation.
  
  Contains helper functions used to create protocol message classes from
  Descriptor objects at runtime backed by the protocol buffer C++ API.
class GeneratedProtocolMessageType(_message.MessageMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\pyext\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\testdata\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\any.py
-----------------------------
> """Contains the Any helper APIs."""
  
  from typing import Optional, TypeVar
  
def pack(
def unpack(any_msg: Any, msg: Message) -> bool:
def unpack_as(any_msg: Any, message_type: type[_MessageT]) -> _MessageT:
def type_name(any_msg: Any) -> str:
def is_type(any_msg: Any, des: descriptor.Descriptor) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\any_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\api_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\descriptor.py
-----------------------------
> """Descriptors essentially contain exactly the information found in a .proto
  
  file, in types that make this information accessible in Python.
class Error(Exception):
class TypeTransformationError(Error):
class _Lock(object):
def _Deprecated(
class DescriptorBase(metaclass=DescriptorMetaclass):
class _NestedDescriptorBase(DescriptorBase):
class Descriptor(_NestedDescriptorBase):
class FieldDescriptor(DescriptorBase):
class EnumDescriptor(_NestedDescriptorBase):
class EnumValueDescriptor(DescriptorBase):
class OneofDescriptor(DescriptorBase):
class ServiceDescriptor(_NestedDescriptorBase):
class MethodDescriptor(DescriptorBase):
class FileDescriptor(DescriptorBase):
def _ParseOptions(message, string):
def _ToCamelCase(name):
def _OptionsOrNone(descriptor_proto):
def _ToJsonName(name):
def MakeDescriptor(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\descriptor_database.py
-----------------------------
> """Provides a container for DescriptorProtos."""
  
  __author__ = 'matthewtoia@google.com (Matt Toia)'
  
class Error(Exception):
class DescriptorDatabaseConflictingDefinitionError(Error):
class DescriptorDatabase(object):
def _ExtractSymbols(desc_proto, package):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\descriptor_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\descriptor_pool.py
-----------------------------
> """Provides DescriptorPool to use as a container for proto2 descriptors.
  
  The DescriptorPool is used in conjection with a DescriptorDatabase to maintain
  a collection of protocol buffer descriptors for use when dynamically creating
def _NormalizeFullyQualifiedName(name):
def _OptionsOrNone(descriptor_proto):
def _IsMessageSetExtension(field):
class DescriptorPool(object):
def _PrefixWithDot(name):
def Default():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\duration.py
-----------------------------
> """Contains the Duration helper APIs."""
  
  import datetime
  
def from_json_string(value: str) -> Duration:
def from_microseconds(micros: float) -> Duration:
def from_milliseconds(millis: float) -> Duration:
def from_nanoseconds(nanos: float) -> Duration:
def from_seconds(seconds: float) -> Duration:
def from_timedelta(td: datetime.timedelta) -> Duration:
def to_json_string(duration: Duration) -> str:
def to_microseconds(duration: Duration) -> int:
def to_milliseconds(duration: Duration) -> int:
def to_nanoseconds(duration: Duration) -> int:
def to_seconds(duration: Duration) -> int:
def to_timedelta(duration: Duration) -> datetime.timedelta:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\duration_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\empty_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\field_mask_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\json_format.py
-----------------------------
> """Contains routines for printing protocol messages in JSON format.
  
  Simple usage example:
  
class Error(Exception):
class SerializeToJsonError(Error):
class ParseError(Error):
class EnumStringValueParseError(ParseError):
def MessageToJson(
def MessageToDict(
def _IsMapEntry(field):
class _Printer(object):
def _IsWrapperMessage(message_descriptor):
def _DuplicateChecker(js):
def _CreateMessageFromTypeUrl(type_url, descriptor_pool):
def Parse(
def ParseDict(
class _Parser(object):
def _ConvertScalarFieldValue(value, field, path, require_str=False):
def _ConvertInteger(value):
def _ConvertFloat(value, field):
def _ConvertBool(value, require_str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\message.py
-----------------------------
> """Contains an abstract base class for protocol messages."""
  
  __author__ = 'robinson@google.com (Will Robinson)'
  
class Error(Exception):
class DecodeError(Error):
class EncodeError(Error):
class Message(object):
def _InternalConstructMessage(full_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\message_factory.py
-----------------------------
> """Provides a factory class for generating dynamic messages.
  
  The easiest way to use this class is if you have access to the FileDescriptor
  protos containing the messages you want to create you can just do the following:
def GetMessageClass(descriptor):
def GetMessageClassesForFiles(files, pool):
def _InternalCreateMessageClass(descriptor):
class MessageFactory(object):
def GetMessages(file_protos, pool=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\proto.py
-----------------------------
> """Contains the Nextgen Pythonic protobuf APIs."""
  
  import io
  from typing import Text, Type, TypeVar
def serialize(message: _MESSAGE, deterministic: bool = None) -> bytes:
def parse(message_class: Type[_MESSAGE], payload: bytes) -> _MESSAGE:
def serialize_length_prefixed(message: _MESSAGE, output: io.BytesIO) -> None:
def parse_length_prefixed(
def byte_size(message: Message) -> int:
def clear_message(message: Message) -> None:
def clear_field(message: Message, field_name: Text) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\proto_builder.py
-----------------------------
> """Dynamic Protobuf class creator."""
  
  from collections import OrderedDict
  import hashlib
def _GetMessageFromFactory(pool, full_name):
def MakeSimpleProtoClass(fields, full_name=None, pool=None):
def _MakeFileDescriptorProto(proto_file_name, full_name, field_items):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\proto_json.py
-----------------------------
> """Contains the Nextgen Pythonic Protobuf JSON APIs."""
  
  from typing import Optional, Type
  
def serialize(
def parse(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\proto_text.py
-----------------------------
> """Contains the Nextgen Pythonic Protobuf Text Format APIs."""
  from typing import AnyStr, Callable, Optional, Text, Type, Union
  
  from google.protobuf import text_format
def serialize(
def parse(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\reflection.py
-----------------------------
> """Contains a metaclass and helper functions used to create
  protocol message classes from Descriptor objects at runtime.
  
  Recall that a metaclass is the "type" of a class.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\runtime_version.py
-----------------------------
> """Protobuf Runtime versions and validators.
  
  It should only be accessed by Protobuf gencodes and tests. DO NOT USE it
  elsewhere.
class Domain(Enum):
class VersionError(Exception):
def _ReportVersionError(msg):
def ValidateProtobufRuntimeVersion(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\service_reflection.py
-----------------------------
> """Contains metaclasses used to create protocol service and service stub
  classes from ServiceDescriptor objects at runtime.
  
  The GeneratedServiceType and GeneratedServiceStubType metaclasses are used to
class GeneratedServiceType(type):
class GeneratedServiceStubType(GeneratedServiceType):
class _ServiceBuilder(object):
class _ServiceStubBuilder(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\source_context_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\struct_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\symbol_database.py
-----------------------------
> """A database of Python protocol buffer generated symbols.
  
  SymbolDatabase is the MessageFactory for messages generated at compile time,
  and makes it easy to create new instances of a registered type, given only the
class SymbolDatabase():
def Default():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\text_encoding.py
-----------------------------
> """Encoding related utilities."""
  import re
  
  def _AsciiIsPrint(i):
def _AsciiIsPrint(i):
def _MakeStrEscapes():
def _DecodeUtf8EscapeErrors(text_bytes):
def CEscape(text, as_utf8) -> str:
def CUnescape(text: str) -> bytes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\text_format.py
-----------------------------
> """Contains routines for printing protocol messages in text format.
  
  Simple usage example::
  
class Error(Exception):
class ParseError(Error):
class TextWriter(object):
def MessageToString(
def MessageToBytes(message, **kwargs) -> bytes:
def _IsMapEntry(field):
def _IsGroupLike(field):
def PrintMessage(message,
def PrintField(field,
def PrintFieldValue(field,
def _BuildMessageFromTypeName(type_name, descriptor_pool):
class _Printer(object):
def Parse(text,
def Merge(text,
def ParseLines(lines,
def MergeLines(lines,
class _Parser(object):
class Tokenizer(object):
def _ConsumeInt32(tokenizer):
def _ConsumeUint32(tokenizer):
def _TryConsumeInt64(tokenizer):
def _ConsumeInt64(tokenizer):
def _TryConsumeUint64(tokenizer):
def _ConsumeUint64(tokenizer):
def _ConsumeInteger(tokenizer, is_signed=False, is_long=False):
def ParseInteger(text, is_signed=False, is_long=False):
def _ParseAbstractInteger(text):
def ParseFloat(text):
def ParseBool(text):
def ParseEnum(field, value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\timestamp.py
-----------------------------
> """Contains the Timestamp helper APIs."""
  
  import datetime
  from typing import Optional
def from_json_string(value: str) -> Timestamp:
def from_microseconds(micros: float) -> Timestamp:
def from_milliseconds(millis: float) -> Timestamp:
def from_nanoseconds(nanos: float) -> Timestamp:
def from_seconds(seconds: float) -> Timestamp:
def from_current_time() -> Timestamp:
def to_json_string(ts: Timestamp) -> str:
def to_microseconds(ts: Timestamp) -> int:
def to_milliseconds(ts: Timestamp) -> int:
def to_nanoseconds(ts: Timestamp) -> int:
def to_seconds(ts: Timestamp) -> int:
def to_datetime(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\timestamp_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\type_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\unknown_fields.py
-----------------------------
> """Contains Unknown Fields APIs.
  
  Simple usage example:
    unknown_field_set = UnknownFieldSet(message)

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\wrappers_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import runtime_version as _runtime_version

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\google\protobuf\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\platform\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_clearing_run_switches.py
-----------------------------
> """
  If we have a run callable passed to the constructor or set as an
  attribute, but we don't actually use that (because ``__getattribute__``
  or the like interferes), then when we clear callable before beginning
class RunCallable:
class G(greenlet.greenlet):
def run_func():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_cpp_exception.py
-----------------------------
> """
  Helper for testing a C++ exception throw aborts the process.
  
  Takes one argument, the name of the function in :mod:`_test_extension_cpp` to call.
def run_unhandled_exception_in_greenlet_aborts():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_initialstub_already_started.py
-----------------------------
> """
  Testing initialstub throwing an already started exception.
def a_run(*args):
def c_run():
class A(greenlet.greenlet): pass
class B(greenlet.greenlet):
class C(greenlet.greenlet):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_slp_switch.py
-----------------------------
> """
  A test helper for seeing what happens when slp_switch()
  fails.
def func():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_switch_three_greenlets.py
-----------------------------
> """
  Uses a trace function to switch greenlets at unexpected times.
  
  In the trace function, we switch from the current greenlet to another
def tracefunc(*args):
def g1_run():
def g2_run():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_switch_three_greenlets2.py
-----------------------------
> """
  Like fail_switch_three_greenlets, but the call into g1_run would actually be
  valid.
def tracefunc(*args):
def g1_run(arg):
def g2_run(arg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\fail_switch_two_greenlets.py
-----------------------------
> """
  Uses a trace function to switch greenlets at unexpected times.
  
  In the trace function, we switch from the current greenlet to another
def tracefunc(*args):
def g1_run():
def g2_run():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\leakcheck.py
-----------------------------
>     """
      Ignore the given object during leakchecks.
  
      Can be applied to a method, in which case the method will run, but
def ignores_leakcheck(func):
def fails_leakcheck(func):
class LeakCheckError(AssertionError):
class ignores_types_in_strict_leakcheck(object):
class _RefCountChecker(object):
def wrap_refcount(method):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_contextvars.py
-----------------------------
class ContextVarsTests(TestCase):
class NoContextVarsTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_cpp.py
-----------------------------
class CPPTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_extension_interface.py
-----------------------------
class CAPITests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_gc.py
-----------------------------
class GCTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_generator.py
-----------------------------
class genlet(greenlet):
def Yield(value):
def generator(func):
class GeneratorTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_generator_nested.py
-----------------------------
class genlet(greenlet):
def Yield(value, level=1):
def Genlet(func):
def g1(n, seen):
def g2(n, seen):
def nested(i):
def g3(n, seen):
def a(n):
def perms(l):
def gr1(n):
def gr2(n, seen):
class NestedGeneratorTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_greenlet.py
-----------------------------
class SomeError(Exception):
def fmain(seen):
def send_exception(g, exc):
class TestGreenlet(TestCase):
class TestGreenletSetParentErrors(TestCase):
class TestRepr(TestCase):
class TestMainGreenlet(TestCase):
class TestBrokenGreenlets(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_greenlet_trash.py
-----------------------------
> """
  Tests for greenlets interacting with the CPython trash can API.
  
  The CPython trash can API is not designed to be re-entered from a
class TestTrashCanReEnter(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_leaks.py
-----------------------------
> """
  Testing scenarios that may have leaked.
class HasFinalizerTracksInstances(object):
def fails_leakcheck_except_on_free_thraded(func):
class TestLeaks(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_stack_saved.py
-----------------------------
class Test(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_throw.py
-----------------------------
def switch(*args):
class ThrowTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_tracing.py
-----------------------------
>     """
      Tests of ``greenlet.settrace()``
class SomeError(Exception):
class GreenletTracer(object):
class TestGreenletTracing(TestCase):
class PythonTracer(object):
def tpt_callback():
class TestPythonTracing(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_version.py
-----------------------------
class VersionTests(NonLeakingTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\test_weakref.py
-----------------------------
class WeakRefTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\tests\__init__.py
-----------------------------
> """
  Tests for greenlet.
  
class TestCaseMetaClass(type):
class TestCase(unittest.TestCase, metaclass=TestCaseMetaClass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\greenlet\__init__.py
-----------------------------
> """
  The root of the greenlet package.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_abnf.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_connection.py
-----------------------------
>     """An object encapsulating the state of an HTTP connection.
  
      Args:
          our_role: If you're implementing a client, pass :data:`h11.CLIENT`. If
class NEED_DATA(Sentinel, metaclass=Sentinel):
class PAUSED(Sentinel, metaclass=Sentinel):
def _keep_alive(event: Union[Request, Response]) -> bool:
def _body_framing(
class Connection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_events.py
-----------------------------
>     """
      Base class for h11 events.
class Event(ABC):
class Request(Event):
class _ResponseBase(Event):
class InformationalResponse(_ResponseBase):
class Response(_ResponseBase):
class Data(Event):
class EndOfMessage(Event):
class ConnectionClosed(Event):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_headers.py
-----------------------------
>     """
      A list-like interface that allows iterating over headers as byte-pairs
      of (lowercased-name, value).
  
class Headers(Sequence[Tuple[bytes, bytes]]):
def normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers:
def normalize_and_validate(headers: HeaderTypes, _parsed: Literal[False]) -> Headers:
def normalize_and_validate(
def normalize_and_validate(
def get_comma_header(headers: Headers, name: bytes) -> List[bytes]:
def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:
def has_expect_100_continue(request: "Request") -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_readers.py
-----------------------------
def _obsolete_line_fold(lines: Iterable[bytes]) -> Iterable[bytes]:
def _decode_header_lines(
def maybe_read_from_IDLE_client(buf: ReceiveBuffer) -> Optional[Request]:
def maybe_read_from_SEND_RESPONSE_server(
class ContentLengthReader:
class ChunkedReader:
class Http10Reader:
def expect_nothing(buf: ReceiveBuffer) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_receivebuffer.py
-----------------------------
>         """
          Extract a fixed number of bytes from the buffer.
class ReceiveBuffer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_state.py
-----------------------------
class CLIENT(Sentinel, metaclass=Sentinel):
class SERVER(Sentinel, metaclass=Sentinel):
class IDLE(Sentinel, metaclass=Sentinel):
class SEND_RESPONSE(Sentinel, metaclass=Sentinel):
class SEND_BODY(Sentinel, metaclass=Sentinel):
class DONE(Sentinel, metaclass=Sentinel):
class MUST_CLOSE(Sentinel, metaclass=Sentinel):
class CLOSED(Sentinel, metaclass=Sentinel):
class ERROR(Sentinel, metaclass=Sentinel):
class MIGHT_SWITCH_PROTOCOL(Sentinel, metaclass=Sentinel):
class SWITCHED_PROTOCOL(Sentinel, metaclass=Sentinel):
class _SWITCH_UPGRADE(Sentinel, metaclass=Sentinel):
class _SWITCH_CONNECT(Sentinel, metaclass=Sentinel):
class ConnectionState:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_util.py
-----------------------------
>     """Exception indicating a violation of the HTTP/1.1 protocol.
  
      This as an abstract base class, with two concrete base classes:
      :exc:`LocalProtocolError`, which indicates that you tried to do something
class ProtocolError(Exception):
class LocalProtocolError(ProtocolError):
class RemoteProtocolError(ProtocolError):
def validate(
class Sentinel(type):
def bytesify(s: Union[bytes, bytearray, memoryview, int, str]) -> bytes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\_writers.py
-----------------------------
def write_headers(headers: Headers, write: Writer) -> None:
def write_request(request: Request, write: Writer) -> None:
def write_any_response(
class BodyWriter:
class ContentLengthWriter(BodyWriter):
class ChunkedWriter(BodyWriter):
class Http10Writer(BodyWriter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\h11\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\connection.py
-----------------------------
>     """
      Generate a geometric sequence that has a ratio of 2 and starts with 0.
  
      For example:
def exponential_backoff(factor: float) -> typing.Iterator[float]:
class AsyncHTTPConnection(AsyncConnectionInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\connection_pool.py
-----------------------------
>     """
      A connection pool for making HTTP requests.
class AsyncPoolRequest:
class AsyncConnectionPool(AsyncRequestInterface):
class PoolByteStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\http11.py
-----------------------------
class HTTPConnectionState(enum.IntEnum):
class AsyncHTTP11Connection(AsyncConnectionInterface):
class HTTP11ConnectionByteStream:
class AsyncHTTP11UpgradeStream(AsyncNetworkStream):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\http2.py
-----------------------------
>         """
          The HTTP/2 connection requires some initial setup before we can start
          using individual request/response streams on it.
def has_body_headers(request: Request) -> bool:
class HTTPConnectionState(enum.IntEnum):
class AsyncHTTP2Connection(AsyncConnectionInterface):
class HTTP2ConnectionByteStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\http_proxy.py
-----------------------------
>     """
      Append default_headers and override_headers, de-duplicating if a key exists
      in both cases.
def merge_headers(
class AsyncHTTPProxy(AsyncConnectionPool):  # pragma: nocover
class AsyncForwardHTTPConnection(AsyncConnectionInterface):
class AsyncTunnelHTTPConnection(AsyncConnectionInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\interfaces.py
-----------------------------
>         """
          Return `True` if the connection is currently able to accept an
          outgoing request.
  
class AsyncRequestInterface:
class AsyncConnectionInterface(AsyncRequestInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\socks_proxy.py
-----------------------------
>     """
      A connection pool that sends requests via an HTTP proxy.
class AsyncSOCKSProxy(AsyncConnectionPool):  # pragma: nocover
class AsyncSocks5Connection(AsyncConnectionInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_async\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\anyio.py
-----------------------------
class AnyIOStream(AsyncNetworkStream):
class AnyIOBackend(AsyncNetworkBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\auto.py
-----------------------------
class AutoBackend(AsyncNetworkBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\base.py
-----------------------------
class NetworkStream:
class NetworkBackend:
class AsyncNetworkStream:
class AsyncNetworkBackend:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\mock.py
-----------------------------
class MockSSLObject:
class MockStream(NetworkStream):
class MockBackend(NetworkBackend):
class AsyncMockStream(AsyncNetworkStream):
class AsyncMockBackend(AsyncNetworkBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\sync.py
-----------------------------
>     """
      Because the standard `SSLContext.wrap_socket` method does
      not work for `SSLSocket` objects, we need this class
      to implement TLS stream using an underlying `SSLObject`
class TLSinTLSStream(NetworkStream):  # pragma: no cover
class SyncStream(NetworkStream):
class SyncBackend(NetworkBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\trio.py
-----------------------------
class TrioStream(AsyncNetworkStream):
class TrioBackend(AsyncNetworkBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_backends\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\connection.py
-----------------------------
>     """
      Generate a geometric sequence that has a ratio of 2 and starts with 0.
  
      For example:
def exponential_backoff(factor: float) -> typing.Iterator[float]:
class HTTPConnection(ConnectionInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py
-----------------------------
>     """
      A connection pool for making HTTP requests.
class PoolRequest:
class ConnectionPool(RequestInterface):
class PoolByteStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\http11.py
-----------------------------
class HTTPConnectionState(enum.IntEnum):
class HTTP11Connection(ConnectionInterface):
class HTTP11ConnectionByteStream:
class HTTP11UpgradeStream(NetworkStream):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\http2.py
-----------------------------
>         """
          The HTTP/2 connection requires some initial setup before we can start
          using individual request/response streams on it.
def has_body_headers(request: Request) -> bool:
class HTTPConnectionState(enum.IntEnum):
class HTTP2Connection(ConnectionInterface):
class HTTP2ConnectionByteStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\http_proxy.py
-----------------------------
>     """
      Append default_headers and override_headers, de-duplicating if a key exists
      in both cases.
def merge_headers(
class HTTPProxy(ConnectionPool):  # pragma: nocover
class ForwardHTTPConnection(ConnectionInterface):
class TunnelHTTPConnection(ConnectionInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\interfaces.py
-----------------------------
>         """
          Return `True` if the connection is currently able to accept an
          outgoing request.
  
class RequestInterface:
class ConnectionInterface(RequestInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\socks_proxy.py
-----------------------------
>     """
      A connection pool that sends requests via an HTTP proxy.
def _init_socks5_connection(
class SOCKSProxy(ConnectionPool):  # pragma: nocover
class Socks5Connection(ConnectionInterface):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_sync\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_api.py
-----------------------------
>     """
      Sends an HTTP request, returning the response.
  
      ```
def request(
def stream(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_exceptions.py
-----------------------------
def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:
class ConnectionNotAvailable(Exception):
class ProxyError(Exception):
class UnsupportedProtocol(Exception):
class ProtocolError(Exception):
class RemoteProtocolError(ProtocolError):
class LocalProtocolError(ProtocolError):
class TimeoutException(Exception):
class PoolTimeout(TimeoutException):
class ConnectTimeout(TimeoutException):
class ReadTimeout(TimeoutException):
class WriteTimeout(TimeoutException):
class NetworkError(Exception):
class ConnectError(NetworkError):
class ReadError(NetworkError):
class WriteError(NetworkError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_models.py
-----------------------------
>     """
      Any arguments that are ultimately represented as bytes can be specified
      either as bytes or as strings.
  
def enforce_bytes(value: bytes | str, *, name: str) -> bytes:
def enforce_url(value: URL | bytes | str, *, name: str) -> URL:
def enforce_headers(
def enforce_stream(
def include_request_headers(
class ByteStream:
class Origin:
class URL:
class Request:
class Response:
class Proxy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_ssl.py
-----------------------------
def default_ssl_context() -> ssl.SSLContext:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_synchronization.py
-----------------------------
>     """
      This is a standard lock.
  
      In the sync case `Lock` provides thread locking.
def current_async_library() -> str:
class AsyncLock:
class AsyncThreadLock:
class AsyncEvent:
class AsyncSemaphore:
class AsyncShieldCancellation:
class Lock:
class ThreadLock:
class Event:
class Semaphore:
class ShieldCancellation:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_trace.py
-----------------------------
class Trace:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\_utils.py
-----------------------------
>     """
      Return whether a socket, as identifed by its file descriptor, is readable.
      "A socket is readable" means that the read buffer isn't empty, i.e. that calling
      .recv() on it would immediately return some data.
def is_socket_readable(sock: socket.socket | None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpcore\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httptools\parser\errors.py
-----------------------------
class HttpParserError(Exception):
class HttpParserCallbackError(HttpParserError):
class HttpParserInvalidStatusError(HttpParserError):
class HttpParserInvalidMethodError(HttpParserError):
class HttpParserInvalidURLError(HttpParserError):
class HttpParserUpgrade(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httptools\parser\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httptools\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httptools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_transports\asgi.py
-----------------------------
>     """
      A custom AsyncTransport that handles sending requests directly to an ASGI app.
  
      ```python
def is_running_trio() -> bool:
def create_event() -> Event:
class ASGIResponseStream(AsyncByteStream):
class ASGITransport(AsyncBaseTransport):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_transports\base.py
-----------------------------
>         """
          Send a single HTTP request and return a response.
  
          Developers shouldn't typically ever need to call into this API directly,
class BaseTransport:
class AsyncBaseTransport:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_transports\default.py
-----------------------------
> """
  Custom transports, with nicely configured defaults.
  
  The following additional keyword arguments are currently supported by httpcore...
def _load_httpcore_exceptions() -> dict[type[Exception], type[httpx.HTTPError]]:
def map_httpcore_exceptions() -> typing.Iterator[None]:
class ResponseStream(SyncByteStream):
class HTTPTransport(BaseTransport):
class AsyncResponseStream(AsyncByteStream):
class AsyncHTTPTransport(AsyncBaseTransport):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_transports\mock.py
-----------------------------
class MockTransport(AsyncBaseTransport, BaseTransport):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_transports\wsgi.py
-----------------------------
>     """
      A custom transport that handles sending requests directly to an WSGI app.
      The simplest way to use this functionality is to use the `app` argument.
  
def _skip_leading_empty_chunks(body: typing.Iterable[_T]) -> typing.Iterable[_T]:
class WSGIByteStream(SyncByteStream):
class WSGITransport(BaseTransport):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_transports\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_api.py
-----------------------------
>     """
      Sends an HTTP request.
  
      **Parameters:**
def request(
def stream(
def get(
def options(
def head(
def post(
def put(
def patch(
def delete(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_auth.py
-----------------------------
>     """
      Base class for all authentication schemes.
  
      To implement a custom authentication scheme, subclass `Auth` and override
class Auth:
class FunctionAuth(Auth):
class BasicAuth(Auth):
class NetRCAuth(Auth):
class DigestAuth(Auth):
class _DigestAuthChallenge(typing.NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_client.py
-----------------------------
>     """
      Return 'True' if 'location' is a HTTPS upgrade of 'url'
def _is_https_redirect(url: URL, location: URL) -> bool:
def _port_or_default(url: URL) -> int | None:
def _same_origin(url: URL, other: URL) -> bool:
class UseClientDefault:
class ClientState(enum.Enum):
class BoundSyncStream(SyncByteStream):
class BoundAsyncStream(AsyncByteStream):
class BaseClient:
class Client(BaseClient):
class AsyncClient(BaseClient):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_config.py
-----------------------------
>     """
      Timeout configuration.
  
      **Usage**:
class UnsetType:
def create_ssl_context(
class Timeout:
class Limits:
class Proxy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_content.py
-----------------------------
>     """
      If a request or response is serialized using pickle, then it is no longer
      attached to a stream for I/O purposes. Any stream operations should result
      in `httpx.StreamClosed`.
class ByteStream(AsyncByteStream, SyncByteStream):
class IteratorByteStream(SyncByteStream):
class AsyncIteratorByteStream(AsyncByteStream):
class UnattachedStream(AsyncByteStream, SyncByteStream):
def encode_content(
def encode_urlencoded_data(
def encode_multipart_data(
def encode_text(text: str) -> tuple[dict[str, str], ByteStream]:
def encode_html(html: str) -> tuple[dict[str, str], ByteStream]:
def encode_json(json: Any) -> tuple[dict[str, str], ByteStream]:
def encode_request(
def encode_response(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_decoders.py
-----------------------------
> """
  Handlers for Content-Encoding.
  
  See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
class ContentDecoder:
class IdentityDecoder(ContentDecoder):
class DeflateDecoder(ContentDecoder):
class GZipDecoder(ContentDecoder):
class BrotliDecoder(ContentDecoder):
class ZStandardDecoder(ContentDecoder):
class MultiDecoder(ContentDecoder):
class ByteChunker:
class TextChunker:
class TextDecoder:
class LineDecoder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_exceptions.py
-----------------------------
> """
  Our exception hierarchy:
  
  * HTTPError
class HTTPError(Exception):
class RequestError(HTTPError):
class TransportError(RequestError):
class TimeoutException(TransportError):
class ConnectTimeout(TimeoutException):
class ReadTimeout(TimeoutException):
class WriteTimeout(TimeoutException):
class PoolTimeout(TimeoutException):
class NetworkError(TransportError):
class ReadError(NetworkError):
class WriteError(NetworkError):
class ConnectError(NetworkError):
class CloseError(NetworkError):
class ProxyError(TransportError):
class UnsupportedProtocol(TransportError):
class ProtocolError(TransportError):
class LocalProtocolError(ProtocolError):
class RemoteProtocolError(ProtocolError):
class DecodingError(RequestError):
class TooManyRedirects(RequestError):
class HTTPStatusError(HTTPError):
class InvalidURL(Exception):
class CookieConflict(Exception):
class StreamError(RuntimeError):
class StreamConsumed(StreamError):
class StreamClosed(StreamError):
class ResponseNotRead(StreamError):
class RequestNotRead(StreamError):
def request_context(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_main.py
-----------------------------
>     """
      An HTTP command line client.
      Sends a request and displays the response.
def print_help() -> None:
def get_lexer_for_response(response: Response) -> str:
def format_request_headers(request: httpcore.Request, http2: bool = False) -> str:
def format_response_headers(
def print_request_headers(request: httpcore.Request, http2: bool = False) -> None:
def print_response_headers(
def print_response(response: Response) -> None:
def format_certificate(cert: _PeerCertRetDictType) -> str:  # pragma: no cover
def trace(
def download_response(response: Response, download: typing.BinaryIO) -> None:
def validate_json(
def validate_auth(
def handle_help(
def main(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_models.py
-----------------------------
>     """
      Return `True` if `encoding` is a known codec.
def _is_known_encoding(encoding: str) -> bool:
def _normalize_header_key(key: str | bytes, encoding: str | None = None) -> bytes:
def _normalize_header_value(value: str | bytes, encoding: str | None = None) -> bytes:
def _parse_content_type_charset(content_type: str) -> str | None:
def _parse_header_links(value: str) -> list[dict[str, str]]:
def _obfuscate_sensitive_headers(
class Headers(typing.MutableMapping[str, str]):
class Request:
class Response:
class Cookies(typing.MutableMapping[str, str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_multipart.py
-----------------------------
>     """
      Encode a name/value pair within a multipart form.
def _format_form_param(name: str, value: str) -> bytes:
def _guess_content_type(filename: str | None) -> str | None:
def get_multipart_boundary_from_content_type(
class DataField:
class FileField:
class MultipartStream(SyncByteStream, AsyncByteStream):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_status_codes.py
-----------------------------
>     """HTTP status codes and reason phrases
  
      Status codes from the following RFCs are all observed:
  
class codes(IntEnum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_types.py
-----------------------------
> """
  Type definitions for type checking purposes.
class SyncByteStream:
class AsyncByteStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_urlparse.py
-----------------------------
> """
  An implementation of `urlparse` that provides URL validation and normalization
  as described by RFC3986.
  
class ParseResult(typing.NamedTuple):
def urlparse(url: str = "", **kwargs: str | None) -> ParseResult:
def encode_host(host: str) -> str:
def normalize_port(port: str | int | None, scheme: str) -> int | None:
def validate_path(path: str, has_scheme: bool, has_authority: bool) -> None:
def normalize_path(path: str) -> str:
def PERCENT(string: str) -> str:
def percent_encoded(string: str, safe: str) -> str:
def quote(string: str, safe: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_urls.py
-----------------------------
>     """
      url = 
httpx.URL("HTTPS://jo%40email.com:a%20secret@mÃ¼ller.de:1234/pa%20th?search=ab#anchorlink")
  
      assert url.scheme == "https"
class URL:
class QueryParams(typing.Mapping[str, str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\_utils.py
-----------------------------
>     """
      Coerce a primitive data type into a string value.
  
      Note that we prefer JSON-style 'true'/'false' for boolean values here.
def primitive_value_to_str(value: PrimitiveData) -> str:
def get_environment_proxies() -> dict[str, str | None]:
def to_bytes(value: str | bytes, encoding: str = "utf-8") -> bytes:
def to_str(value: str | bytes, encoding: str = "utf-8") -> str:
def to_bytes_or_str(value: str, match_type_of: typing.AnyStr) -> typing.AnyStr:
def unquote(value: str) -> str:
def peek_filelike_length(stream: typing.Any) -> int | None:
class URLPattern:
def is_ipv4_hostname(hostname: str) -> bool:
def is_ipv6_hostname(hostname: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\httpx\__version__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\django\_fields.py
-----------------------------
>     """Add an entry to the global field-to-strategy lookup used by
      :func:`~hypothesis.extra.django.from_field`.
  
      ``field_type`` must be a subtype of :class:`django.db.models.Field` or
def numeric_bounds_from_validators(
def integers_for_field(min_value, max_value):
def timezones():
def register_for(field_type):
def _for_datetime(field):
def using_sqlite():
def _for_model_time(field):
def _for_form_time(field):
def _for_duration(field):
def _for_slug(field):
def _for_model_ip(field):
def _for_form_ip(field):
def _for_decimal(field):
def length_bounds_from_validators(field):
def _for_binary(field):
def _for_text(field):
def _for_form_boolean(field):
def _model_choice_strategy(field):
def _for_model_choice(field):
def _for_model_multiple_choice(field):
def register_field_strategy(
def from_field(field: F) -> st.SearchStrategy[Union[F, None]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\django\_impl.py
-----------------------------
>     """Return a strategy for examples of ``model``.
  
      .. warning::
          Hypothesis creates saved models. This will run inside your testing
class HypothesisTestCase:
class SimpleTestCase(HypothesisTestCase, dt.SimpleTestCase):
class TestCase(HypothesisTestCase, dt.TestCase):
class TransactionTestCase(HypothesisTestCase, dt.TransactionTestCase):
class LiveServerTestCase(HypothesisTestCase, dt.LiveServerTestCase):
class StaticLiveServerTestCase(HypothesisTestCase, dst.StaticLiveServerTestCase):
def from_model(
def _models_impl(draw, strat):
def from_form(
def _forms_impl(draw, strat):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\django\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\pandas\impl.py
-----------------------------
>     """Provides a strategy which generates an :class:`~pandas.Index` whose
      values are 0, 1, ..., n for some n.
  
      Arguments:
def dtype_for_elements_strategy(s):
def infer_dtype_if_necessary(dtype, values, elements, draw):
def elements_and_dtype(elements, dtype, source=None):
class ValueIndexStrategy(st.SearchStrategy):
def range_indexes(
def indexes(
def series(
class column(Generic[Ex]):
def columns(
def data_frames(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\pandas\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\array_api.py
-----------------------------
>     """Returns builtin type which can have values that are castable to the given
      dtype, according to :xp-ref:`type promotion rules <type_promotion.html>`.
  
      For floating dtypes we always return ``float``, even though ``int`` is also castable.
def check_xp_attributes(xp: Any, attributes: list[str]) -> None:
def partition_attributes_and_stubs(
def warn_on_missing_dtypes(xp: Any, stubs: list[str]) -> None:
def find_castable_builtin_for_dtype(
def dtype_from_name(xp: Any, name: str) -> Any:
def _from_dtype(
class ArrayStrategy(st.SearchStrategy):
def _arrays(
def check_dtypes(xp: Any, dtypes: list[DataType], stubs: list[str]) -> None:
def _scalar_dtypes(xp: Any, api_version: NominalVersion) -> st.SearchStrategy[DataType]:
def _boolean_dtypes(xp: Any) -> st.SearchStrategy[DataType]:
def _real_dtypes(xp: Any) -> st.SearchStrategy[DataType]:
def _numeric_dtypes(
def check_valid_sizes(
def numeric_dtype_names(base_name: str, sizes: Sequence[int]) -> Iterator[str]:
def _integer_dtypes(
def _unsigned_integer_dtypes(
def _floating_dtypes(
def _complex_dtypes(
def valid_tuple_axes(*args, **kwargs):
def mutually_broadcastable_shapes(
def indices(
def make_strategies_namespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\cli.py
-----------------------------
> """
  ::
  
      $ hypothesis --help

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\codemods.py
-----------------------------
> """
  This module provides codemods based on the :pypi:`LibCST` library, which can
  both detect *and automatically fix* issues with code that uses Hypothesis,
  including upgrading from deprecated features to our recommended style.
def refactor(code: str) -> str:
def match_qualname(name):
class HypothesisFixComplexMinMagnitude(VisitorBasedCodemodCommand):
def get_fn(import_path):
class HypothesisFixPositionalKeywonlyArgs(VisitorBasedCodemodCommand):
class HypothesisFixHealthCheckAll(VisitorBasedCodemodCommand):
class HypothesisFixCharactersArguments(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\dateutil.py
-----------------------------
> """
  This module provides :pypi:`dateutil <python-dateutil>` timezones.
  
  You can use this strategy to make :func:`~hypothesis.strategies.datetimes`
def __zone_sort_key(zone):
def timezones() -> st.SearchStrategy[dt.tzinfo]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\dpcontracts.py
-----------------------------
> """
  This module provides tools for working with the :pypi:`dpcontracts` library,
  because `combining contracts and property-based testing works really well
  <https://hillelwayne.com/talks/beyond-unit-tests/>`_.
def fulfill(contract_func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\ghostwriter.py
-----------------------------
> """
  Writing tests with Hypothesis frees you from the tedium of deciding on and
  writing out specific inputs to test.  Now, the ``hypothesis.extra.ghostwriter``
  module can write your test functions for you too!
def test_{test_kind}_{func_name}({arg_names}){return_annotation}:
def _dedupe_exceptions(exc: tuple[type[Exception], ...]) -> tuple[type[Exception], ...]:
def _check_except(except_: Except) -> tuple[type[Exception], ...]:
def _exception_string(except_: tuple[type[Exception], ...]) -> tuple[ImportSet, str]:
def _check_style(style: str) -> None:
def _exceptions_from_docstring(doc: str) -> tuple[type[Exception], ...]:
def _type_from_doc_fragment(token: str) -> Optional[type]:
def _strip_typevars(type_):
def _strategy_for(param: inspect.Parameter, docstring: str) -> st.SearchStrategy:
def _guess_strategy_by_argname(name: str) -> st.SearchStrategy:
def _get_params_builtin_fn(func: Callable) -> list[inspect.Parameter]:
def _get_params_ufunc(func: Callable) -> list[inspect.Parameter]:
def _get_params(func: Callable) -> dict[str, inspect.Parameter]:
def _params_to_dict(
def _with_any_registered():
def _get_strategies(
def _assert_eq(style: str, a: str, b: str) -> str:
def _imports_for_object(obj):
def _imports_for_strategy(strategy):
def _valid_syntax_repr(strategy):
def _get_module_helper(obj):
def _get_module(obj):
def _get_qualname(obj: Any, *, include_module: bool = False) -> str:
def _write_call(
def _st_strategy_names(s: str) -> str:
def _make_test_body(
def _annotate_args(
class _AnnotationData(NamedTuple):
def _parameters_to_annotation_name(
def _join_generics(
def _join_argument_annotations(
def _parameter_to_annotation(parameter: Any) -> Optional[_AnnotationData]:
def _are_annotations_used(*functions: Callable) -> bool:
def _make_test(imports: ImportSet, body: str) -> str:
def _is_probably_ufunc(obj):
def _get_testable_functions(thing: object) -> dict[str, Callable]:
def magic(
def fuzz(
def idempotent(
def _make_roundtrip_body(funcs, except_, style, annotate):
def roundtrip(
def _get_varnames(funcs):
def _make_equiv_body(funcs, except_, style, annotate):
def _make_equiv_errors_body(funcs, except_, style, annotate):
def equivalent(
def binary_operation(
def _make_binop_body(
def ufunc(
def _make_ufunc_body(func, *, except_, style, annotate):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\lark.py
-----------------------------
> """
  This extra can be used to generate strings matching any context-free grammar,
  using the `Lark parser library <https://github.com/lark-parser/lark>`_.
  
def get_terminal_names(
class LarkStrategy(st.SearchStrategy):
def check_explicit(name):
def from_lark(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\numpy.py
-----------------------------
>     """Creates a strategy which can generate any value of the given dtype.
  
      Compatible parameters are passed to the inferred strategy function while
      inapplicable ones are ignored.
def _try_import(mod_name: str, attr_name: str) -> Any:
def from_dtype(
class ArrayStrategy(st.SearchStrategy):
def fill_for(elements, unique, fill, name=""):
def arrays(
def arrays(
def arrays(
def scalar_dtypes() -> st.SearchStrategy[np.dtype]:
def defines_dtype_strategy(strat: T) -> T:
def boolean_dtypes() -> st.SearchStrategy["np.dtype[np.bool_]"]:
def dtype_factory(kind, sizes, valid_sizes, endianness):
def unsigned_integer_dtypes(
def unsigned_integer_dtypes(
def unsigned_integer_dtypes(
def unsigned_integer_dtypes(
def unsigned_integer_dtypes(
def unsigned_integer_dtypes(
def integer_dtypes(
def integer_dtypes(
def integer_dtypes(
def integer_dtypes(
def integer_dtypes(
def integer_dtypes(
def floating_dtypes(
def floating_dtypes(
def floating_dtypes(
def floating_dtypes(
def floating_dtypes(
def floating_dtypes(
def complex_number_dtypes(
def complex_number_dtypes(
def complex_number_dtypes(
def complex_number_dtypes(
def complex_number_dtypes(
def validate_time_slice(max_period, min_period):
def datetime64_dtypes(
def timedelta64_dtypes(
def byte_string_dtypes(
def unicode_string_dtypes(
def _no_title_is_name_of_a_titled_field(ls):
def array_dtypes(
def nested_dtypes(
def valid_tuple_axes(*args, **kwargs):
def mutually_broadcastable_shapes(*args, **kwargs):
def basic_indices(
def integer_array_indices(
def integer_array_indices(
def integer_array_indices(
def _unpack_generic(thing):
def _unpack_dtype(dtype):
def _dtype_from_args(args):
def _from_type(thing: type[Ex]) -> Optional[st.SearchStrategy[Ex]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\pytestplugin.py
-----------------------------
> """
  Stub for users who manually load our pytest plugin.
  
  The plugin implementation is now located in a top-level module outside the main

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\pytz.py
-----------------------------
> """
  This module provides :pypi:`pytz` timezones.
  
  If you are unable to use the stdlib :mod:`zoneinfo` module, e.g. via the
def timezones() -> st.SearchStrategy[dt.tzinfo]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\redis.py
-----------------------------
>     """Store Hypothesis examples as sets in the given :class:`~redis.Redis` datastore.
  
      This is particularly useful for shared databases, as per the recipe
      for a :class:`~hypothesis.database.MultiplexedDatabase`.
class RedisExampleDatabase(ExampleDatabase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\_array_helpers.py
-----------------------------
>     """Return a strategy for array shapes (tuples of int >= 1).
  
      * ``min_dims`` is the smallest length that the generated shape can possess.
      * ``max_dims`` is the largest length that the generated shape can possess,
class BroadcastableShapes(NamedTuple):
def check_argument(condition, fail_message, *f_args, **f_kwargs):
def order_check(name, floor, min_, max_):
def check_valid_dims(dims, name):
def array_shapes(
def valid_tuple_axes(
def broadcastable_shapes(
class _GUfuncSig(NamedTuple):
def _hypothesis_parse_gufunc_signature(signature):
def mutually_broadcastable_shapes(
class MutuallyBroadcastableShapesStrategy(st.SearchStrategy):
class BasicIndexStrategy(st.SearchStrategy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\_patching.py
-----------------------------
> """
  Write patches which add @example() decorators for discovered test cases.
  
  Requires `hypothesis[codemods,ghostwriter]` installed, i.e. black and libcst.
def dedent(text: str) -> tuple[str, str]:
def indent(text: str, prefix: str) -> str:
class AddExamplesCodemod(VisitorBasedCodemodCommand):
def get_patch_for(
def _get_patch_for(
def make_patch(
def save_patch(patch: str, *, slug: str = "") -> Path:  # pragma: no cover
def gc_patches(slug: str = "") -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\extra\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\dfa\lstar.py
-----------------------------
> """
  This module contains an implementation of the L* algorithm
  for learning a deterministic finite automaton based on an
  unknown membership function and a series of examples of
class DistinguishedState:
class LStar:
class LearnedDFA(DFA):
class IntegerNormalizer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\dfa\__init__.py
-----------------------------
>     """Base class for implementations of deterministic finite
      automata.
  
      This is abstract to allow for the possibility of states
def cached(fn):
class DFA:
class ConcreteDFA(DFA):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\bytes.py
-----------------------------
class Bytes(Collection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\choicetree.py
-----------------------------
>     """Select choices starting from ``prefix```,
      preferring to move left then wrapping around
def prefix_selection_order(
def random_selection_order(random: Random) -> Callable[[int, int], Iterable[int]]:
class Chooser:
class ChoiceTree:
class TreeNode:
class DeadBranch(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\collection.py
-----------------------------
class Collection(Shrinker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\common.py
-----------------------------
> """This module implements various useful common functions for shrinking tasks."""
  
  
  class Shrinker:
class Shrinker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\floats.py
-----------------------------
class Float(Shrinker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\integer.py
-----------------------------
> """
  This module implements a shrinker for non-negative integers.
class Integer(Shrinker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\ordering.py
-----------------------------
>     """A shrinker that tries to make a sequence more sorted.
  
      Will not change the length or the contents, only tries to reorder
      the elements of the sequence.
class Ordering(Shrinker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\string.py
-----------------------------
class String(Collection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinking\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\choice.py
-----------------------------
>         """
          A node is trivial if it cannot be simplified any further. This does not
          mean that modifying a trivial node can't produce simpler test cases when
          viewing the tree as a whole. Just that when viewing this node in
class IntegerConstraints(TypedDict):
class FloatConstraints(TypedDict):
class StringConstraints(TypedDict):
class BytesConstraints(TypedDict):
class BooleanConstraints(TypedDict):
class ChoiceTemplate:
class ChoiceNode:
def _size_to_index(size: int, *, alphabet_size: int) -> int:
def _index_to_size(index: int, alphabet_size: int) -> int:
def collection_index(
def collection_value(
def zigzag_index(value: int, *, shrink_towards: int) -> int:
def zigzag_value(index: int, *, shrink_towards: int) -> int:
def choice_to_index(choice: ChoiceT, constraints: ChoiceConstraintsT) -> int:
def choice_from_index(
def choice_permitted(choice: ChoiceT, constraints: ChoiceConstraintsT) -> bool:
def choices_key(choices: Sequence[ChoiceT]) -> tuple[ChoiceKeyT, ...]:
def choice_key(choice: ChoiceT) -> ChoiceKeyT:
def choice_equal(choice1: ChoiceT, choice2: ChoiceT) -> bool:
def choice_constraints_equal(
def choice_constraints_key(
def choices_size(choices: Iterable[ChoiceT]) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\data.py
-----------------------------
>     """A class for holding shared state on a ``ConjectureData`` that should
def __getattr__(name: str) -> Any:
class ExtraInformation:
class Status(IntEnum):
class StructuralCoverageTag:
def structural_coverage(label: int) -> StructuralCoverageTag:
class Span:
class SpanProperty:
class TrailType(IntEnum):
class SpanRecord:
class _starts_and_ends(SpanProperty):
class _discarded(SpanProperty):
class _parentage(SpanProperty):
class _depths(SpanProperty):
class _label_indices(SpanProperty):
class _mutator_groups(SpanProperty):
class Spans:
class _Overrun:
class DataObserver:
class ConjectureResult:
class ConjectureData:
def draw_choice(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\datatree.py
-----------------------------
>     """Represents a transition to part of the tree which has been marked as
      "killed", meaning we want to treat it as not worth exploring, so it will
      be treated as if it were completely explored for the purposes of
class PreviouslyUnseenBehaviour(HypothesisException):
class Killed:
def _node_pretty(
class Branch:
class Conclusion:
def _count_distinct_strings(*, alphabet_size: int, min_size: int, max_size: int) -> int:
def compute_max_children(
def _floats_between(a: float, b: float) -> Generator[float, None, None]:
def all_children(
class TreeNode:
class DataTree:
class TreeRecordingObserver(DataObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\engine.py
-----------------------------
>         """Return a terminal report describing what was slow."""
          if not self.draw_times:
              return ""
          width = max(
def shortlex(s):
class HealthCheckState:
class ExitReason(Enum):
class RunIsComplete(Exception):
def _get_provider(backend: str) -> Union[type, PrimitiveProvider]:
class CallStats(TypedDict):
def choice_count(choices: Sequence[Union[ChoiceT, ChoiceTemplate]]) -> Optional[int]:
class DiscardObserver(DataObserver):
def realize_choices(data: ConjectureData, *, for_failure: bool) -> None:
class ConjectureRunner:
class ContainsDiscard(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\floats.py
-----------------------------
> """
  This module implements support for arbitrary floating point numbers in
  Conjecture. It doesn't make any attempt to get a good distribution, only to
  get a format that will shrink well.
def exponent_key(e: int) -> float:
def decode_exponent(e: int) -> int:
def encode_exponent(e: int) -> int:
def reverse_byte(b: int) -> int:
def reverse64(v: int) -> int:
def reverse_bits(x: int, n: int) -> int:
def update_mantissa(unbiased_exponent: int, mantissa: int) -> int:
def lex_to_float(i: int) -> float:
def float_to_lex(f: float) -> int:
def base_float_to_lex(f: float) -> int:
def is_simple(f: float) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\junkdrawer.py
-----------------------------
> """A module for miscellaneous useful bits and bobs that don't
  obviously belong anywhere else. If you spot a better home for
def replace_all(
class IntList(Sequence[int]):
def binary_search(lo: int, hi: int, f: Callable[[int], bool]) -> int:
class LazySequenceCopy(Generic[T]):
def stack_depth_of_caller() -> int:
class StackframeLimiter:
class ensure_free_stackframes:
def find_integer(f: Callable[[int], bool]) -> int:
class NotFound(Exception):
class SelfOrganisingList(Generic[T]):
def gc_cumulative_time() -> float:
def startswith(l1: Sequence[T], l2: Sequence[T]) -> bool:
def endswith(l1: Sequence[T], l2: Sequence[T]) -> bool:
def bits_to_bytes(n: int) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\optimiser.py
-----------------------------
>     """A fairly basic optimiser designed to increase the value of scores for
      targeted property-based testing.
  
      This implements a fairly naive hill climbing algorithm based on randomly
class Optimiser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\pareto.py
-----------------------------
>     """Returns the dominance relation between ``left`` and ``right``, according
      to the rules that one ConjectureResult dominates another if and only if it
      is better in every way.
  
class DominanceRelation(Enum):
def dominance(left: ConjectureResult, right: ConjectureResult) -> DominanceRelation:
class ParetoFront:
class ParetoOptimiser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\providers.py
-----------------------------
>     """
      |PrimitiveProvider| is the implementation interface of a
      :ref:`Hypothesis backend <alternative-backends>`.
  
def _get_local_constants() -> Constants:
class _BackendInfoMsg(TypedDict):
class PrimitiveProvider(abc.ABC):
class HypothesisProvider(PrimitiveProvider):
class BytestringProvider(PrimitiveProvider):
class URandom(Random):
class URandomProvider(HypothesisProvider):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\provider_conformance.py
-----------------------------
>     """
      Test that the given ``Provider`` class conforms to the |PrimitiveProvider|
      interface.
  
def build_intervals(intervals: list[int]) -> list[tuple[int, int]]:
def interval_lists(
def intervals(
def integer_weights(
def integer_constraints(
def _collection_constraints(
def string_constraints(
def bytes_constraints(
def float_constraints(
def boolean_constraints(draw: DrawFn, *, use_forced: bool = False) -> Any:
def constraints_strategy(choice_type, strategy_constraints=None, *, use_forced=False):
def choice_types_constraints(strategy_constraints=None, *, use_forced=False):
def run_conformance_test(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\shrinker.py
-----------------------------
>     """Returns a sort key such that "simpler" choice sequences are smaller than
      "more complicated" ones.
  
      We define sort_key so that x is simpler than y if x is shorter than y or if
def sort_key(nodes: Sequence[ChoiceNode]) -> tuple[int, tuple[int, ...]]:
class ShrinkPass:
class StopShrinking(Exception):
class Shrinker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\utils.py
-----------------------------
>     """Sampler based on Vose's algorithm for the alias method. See
      http://www.keithschwarz.com/darts-dice-coins/ for a good explanation.
  
      The general idea is that we store a table of triples (base, alternate, p).
def calc_label_from_name(name: str) -> int:
def calc_label_from_cls(cls: type) -> int:
def calc_label_from_hash(obj: object) -> int:
def combine_labels(*labels: int) -> int:
def identity(v: T) -> T:
def check_sample(
def compute_sampler_table(weights: tuple[float, ...]) -> list[tuple[int, int, float]]:
class Sampler:
class many:
def _calc_p_continue(desired_avg: float, max_size: Union[int, float]) -> float:
def _p_continue_to_avg(p_continue: float, max_size: Union[int, float]) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\conjecture\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\cache.py
-----------------------------
>     """Generic supertype for cache implementations.
  
      Defines a dict-like mapping with a maximum size, where as well as mapping
      to a value, each key also maps to a score. When a write would cause the
class Entry(Generic[K, V]):
class GenericCache(Generic[K, V]):
class LRUReusedCache(GenericCache[K, V]):
class LRUCache(Generic[K, V]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\cathetus.py
-----------------------------
>     """Given the lengths of the hypotenuse and a side of a right triangle,
      return the length of the other side.
  
      A companion to the C99 hypot() function.  Some care is needed to avoid
def cathetus(h: float, a: float) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\charmap.py
-----------------------------
>     """Return a dict that maps a Unicode category, to a tuple of 2-tuples
      covering the codepoint intervals for characters in that category.
  
      >>> charmap()['Co']
def charmap_file(fname: str = "charmap") -> Path:
def charmap() -> dict[CategoryName, IntervalsT]:
def intervals_from_codec(codec_name: str) -> IntervalSet:  # pragma: no cover
def categories() -> Categories:
def as_general_categories(cats: Categories, name: str = "cats") -> CategoriesTuple:
def _category_key(cats: Optional[Iterable[str]]) -> CategoriesTuple:
def _query_for_key(key: Categories) -> IntervalsT:
def query(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\compat.py
-----------------------------
>                 """A runtime placeholder for the NotRequired type, which is not available 
in Python <3.11."""
  
                  def __class_getitem__(cls, item):
                      return cls
def add_note(exc, note):
def escape_unicode_characters(s: str) -> str:
def int_from_bytes(data: Union[bytes, bytearray]) -> int:
def int_to_bytes(i: int, size: int) -> bytes:
def int_to_byte(i: int) -> bytes:
def is_typed_named_tuple(cls: type) -> bool:
def _hint_and_args(x):
def get_type_hints(thing: object) -> dict[str, Any]:
def floor(x):
def ceil(x):
def extract_bits(x: int, /, width: Optional[int] = None) -> list[int]:
def bad_django_TestCase(runner: Optional["ConjectureRunner"]) -> bool:
def _asdict_inner(obj, dict_factory):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\constants_ast.py
-----------------------------
class Constants:
class TooManyConstants(Exception):
class ConstantVisitor(NodeVisitor):
def _constants_from_source(source: Union[str, bytes], *, limit: bool) -> Constants:
def _constants_file_str(constants: Constants) -> str:
def constants_from_module(module: ModuleType, *, limit: bool = True) -> Constants:
def is_local_module_file(path: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\coverage.py
-----------------------------
> """
  This module implements a custom coverage system that records conditions and
  then validates that every condition has been seen to be both True and False
  during the execution of our tests.
def pretty_file_name(f):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\detection.py
-----------------------------
>     """
      Returns ``True`` if ``f`` represents a test function that has been defined
      with Hypothesis. This is true for:
  
def is_hypothesis_test(f: object) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\entropy.py
-----------------------------
>     """Register (a weakref to) the given Random-like instance for management by
      Hypothesis.
  
      You can pass instances of structural subtypes of ``random.Random``
class NumpyRandomWrapper:
def register_random(r: RandomLike) -> None:
def get_seeder_and_restorer(
def deterministic_PRNG(seed: int = 0) -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\escalation.py
-----------------------------
>     """Return the current traceback, minus any frames added by Hypothesis."""
      if exception is None:
          _, exception, tb = sys.exc_info()
      else:
def belongs_to(package: ModuleType) -> Callable[[str], bool]:
def get_trimmed_traceback(
class InterestingOrigin(NamedTuple):
def _get_exceptioninfo():
def format_exception(err, tb):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\filtering.py
-----------------------------
> """Tools for understanding predicates, to satisfy them by construction.
  
  For example::
  
class ConstructivePredicate(NamedTuple):
def convert(node: ast.AST, argname: str) -> object:
def comp_to_constraints(x: ast.AST, op: ast.AST, y: ast.AST, *, argname: str) -> dict:
def merge_preds(*con_predicates: ConstructivePredicate) -> ConstructivePredicate:
def numeric_bounds_from_ast(
def get_numeric_predicate_bounds(predicate: Predicate) -> ConstructivePredicate:
def get_integer_predicate_bounds(predicate: Predicate) -> ConstructivePredicate:
def get_float_predicate_bounds(predicate: Predicate) -> ConstructivePredicate:
def max_len(size: int, element: Collection[object]) -> bool:
def min_len(size: int, element: Collection[object]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\floats.py
-----------------------------
>     """Return the first float larger than finite `val` - IEEE 754's `nextUp`.
  
      From https://stackoverflow.com/a/10426033, with thanks to Mark Dickinson.
def reinterpret_bits(x: float, from_: str, to: str) -> float:
def float_of(x: SupportsFloat, width: Width) -> float:
def is_negative(x: SupportsFloat) -> bool:
def count_between_floats(x: float, y: float, width: int = 64) -> int:
def float_to_int(value: float, width: int = 64) -> int:
def int_to_float(value: int, width: int = 64) -> float:
def next_up(value: float, width: int = 64) -> float:
def next_down(value: float, width: int = 64) -> float:
def next_down_normal(value: float, width: int, *, allow_subnormal: bool) -> float:
def next_up_normal(value: float, width: int, *, allow_subnormal: bool) -> float:
def make_float_clamper(
def sign_aware_lte(x: float, y: float) -> bool:
def clamp(lower: float, value: float, upper: float) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\healthcheck.py
-----------------------------
def fail_health_check(settings, message, label):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\intervalsets.py
-----------------------------
>     """
      A compact and efficient representation of a set of ``(a, b)`` intervals. Can
      be treated like a set of integers, in that ``n in intervals`` will return
      ``True`` if ``n`` is contained in any of the ``(a, b)`` intervals, and
class IntervalSet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\observability.py
-----------------------------
> """Observability tools to spit out analysis-ready tables, one row per test case."""
  
  import base64
  import dataclasses
class PredicateCounts:
def _choice_to_json(choice: Union[ChoiceT, None]) -> Any:
def choices_to_json(choices: tuple[ChoiceT, ...]) -> list[Any]:
def _constraints_to_json(
def nodes_to_json(nodes: tuple[ChoiceNode, ...]) -> list[dict[str, Any]]:
class ObservationMetadata:
class BaseObservation:
class InfoObservation(BaseObservation):
class TestCaseObservation(BaseObservation):
def add_observability_callback(f: CallbackT, /, *, all_threads: bool = False) -> None:
def remove_observability_callback(f: CallbackT, /) -> None:
def observability_enabled() -> bool:
def with_observability_callback(
def deliver_observation(observation: Observation) -> None:
class _TestcaseCallbacks:
def make_testcase(
def _deliver_to_file(
def _system_metadata() -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\reflection.py
-----------------------------
> """This file can approximately be considered the collection of hypothesis going
def is_mock(obj: object) -> bool:
def _clean_source(src: str) -> bytes:
def function_digest(function: Any) -> bytes:
def check_signature(sig: Signature) -> None:
def get_signature(
def arg_is_required(param: Parameter) -> bool:
def required_args(
def convert_keyword_arguments(
def convert_positional_arguments(
def ast_arguments_matches_signature(args: ast.arguments, sig: Signature) -> bool:
def is_first_param_referenced_in_function(f: Any) -> bool:
def extract_all_lambdas(tree):
def _lambda_source_key(f, *, bounded_size=False):
def _mimic_lambda_from_source(f, source):
def _lambda_code_matches_source(f, source):
def _lambda_description(f):
def lambda_description(f):
def get_pretty_function_description(f: object) -> str:
def nicerepr(v: Any) -> str:
def repr_call(
def check_valid_identifier(identifier: str) -> None:
def source_exec_as_module(source: str) -> ModuleType:
def accept({funcname}):
def get_varargs(
def define_function_signature(name, docstring, signature):
def impersonate(target):
def proxies(target: T) -> Callable[[Callable], T]:
def is_identity_function(f: Callable) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\scrutineer.py
-----------------------------
>     """A super-simple branch coverage tracer."""
  
      __slots__ = (
          "_previous_location",
def should_trace_file(fname: str) -> bool:
class Tracer:
def _glob_to_re(locs: Iterable[str]) -> str:
def get_explaining_locations(traces):
class ModuleLocation(IntEnum):
def _sort_key(path: str, lineno: int) -> tuple[int, str, int]:
def make_report(explanations, *, cap_lines_at=5):
def explanatory_lines(traces, settings):
def _get_git_repo_root() -> Path:
def tractable_coverage_report(trace: Trace) -> dict[str, list[int]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\validation.py
-----------------------------
>     """Checks that value is either unspecified, or a valid integer.
  
      Otherwise raises InvalidArgument.
def check_type(typ: Union[type, tuple[type, ...]], arg: object, name: str) -> None:
def check_valid_integer(value, name):
def check_valid_bound(value, name):
def check_valid_magnitude(value, name):
def try_convert(typ, value, name):
def check_valid_size(value, name):
def check_valid_interval(lower_bound, upper_bound, lower_name, upper_name):
def check_valid_sizes(min_size, max_size):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\internal\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\attrs.py
-----------------------------
>     """
      Get an attrs attribute by its alias, rather than its name (compare
      getattr(fields, name)).
  
def get_attribute_by_alias(
def from_attrs(
def from_attrs_attribute(
def types_to_strategy(attrib: Attribute, types: Collection[Any]) -> SearchStrategy:
def ordered_intersection(in_: Sequence[Iterable[T]]) -> Generator[T, None, None]:
def all_substrings(s: str) -> Generator[str, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\collections.py
-----------------------------
>     """A strategy responsible for fixed length tuples based on heterogeneous
class TupleStrategy(SearchStrategy[tuple[Ex, ...]]):
def tuples() -> SearchStrategy[tuple[()]]:  # pragma: no cover
def tuples(__a1: SearchStrategy[Ex]) -> SearchStrategy[tuple[Ex]]:  # pragma: no cover
def tuples(
def tuples(
def tuples(
def tuples(
def tuples(
def tuples(*args: SearchStrategy[Any]) -> SearchStrategy[tuple[Any, ...]]:
class ListStrategy(SearchStrategy[list[Ex]]):
class UniqueListStrategy(ListStrategy[Ex]):
class UniqueSampledListStrategy(UniqueListStrategy):
class FixedDictStrategy(SearchStrategy[dict[Any, Any]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\core.py
-----------------------------
>     """Returns a strategy which generates instances of :class:`python:bool`.
  
      Examples from this strategy will shrink towards ``False`` (i.e.
      shrinking will replace ``True`` with ``False`` where possible).
def booleans() -> SearchStrategy[bool]:
def sampled_from(elements: Sequence[T]) -> SearchStrategy[T]:  # pragma: no cover
def sampled_from(elements: type[enum.Enum]) -> SearchStrategy[Any]:  # pragma: no cover
def sampled_from(
def sampled_from(
def _gets_first_item(fn: Callable) -> bool:
def lists(
def sets(
def frozensets(
class PrettyIter:
def iterables(
def fixed_dictionaries(
def dictionaries(
def characters(
def text(
def from_regex(
def from_regex(
def from_regex(
def binary(
def randoms(
class RandomSeeder:
class RandomModule(SearchStrategy):
def random_module() -> SearchStrategy[RandomSeeder]:
class BuildsStrategy(SearchStrategy[Ex]):
def builds(
def from_type(thing: type[T]) -> SearchStrategy[T]:
def _from_type_deferred(thing: type[Ex]) -> SearchStrategy[Ex]:
def _from_type(thing: type[Ex]) -> SearchStrategy[Ex]:
def fractions(
def _as_finite_decimal(
def decimals(
def recursive(
class PermutationStrategy(SearchStrategy):
def permutations(values: Sequence[T]) -> SearchStrategy[list[T]]:
class CompositeStrategy(SearchStrategy):
class DrawFn(Protocol):
def _composite(f):
def complex_numbers(
def shared(
def _maybe_nil_uuids(draw, uuid):
def uuids(
class RunnerStrategy(SearchStrategy):
def runner(*, default: Any = not_set) -> SearchStrategy[Any]:
class DataObject:
class DataStrategy(SearchStrategy):
def data() -> SearchStrategy[DataObject]:
def register_type_strategy(
def deferred(definition: Callable[[], SearchStrategy[Ex]]) -> SearchStrategy[Ex]:
def domains() -> SearchStrategy[str]:
def emails(
def _functions(*, like, returns, pure):
def slices(draw: Any, size: int) -> slice:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\datetime.py
-----------------------------
>     """This function tests whether the given datetime can be round-tripped to and
      from UTC.  It is an exact inverse of (and very similar to) the dateutil method
      https://dateutil.readthedocs.io/en/stable/tz.html#dateutil.tz.datetime_exists
def is_pytz_timezone(tz):
def replace_tzinfo(value, timezone):
def datetime_does_not_exist(value):
def draw_capped_multipart(
class DatetimeStrategy(SearchStrategy):
def datetimes(
class TimeStrategy(SearchStrategy):
def times(
class DateStrategy(SearchStrategy):
def dates(
class TimedeltaStrategy(SearchStrategy):
def timedeltas(
def _valid_key_cacheable(tzpath, key):
def timezone_keys(
def timezones(*, no_cache: bool = False) -> SearchStrategy["zoneinfo.ZoneInfo"]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\deferred.py
-----------------------------
>     """A strategy which may be used before it is fully defined."""
  
      def __init__(self, definition: Callable[[], SearchStrategy[Ex]]):
          super().__init__()
class DeferredStrategy(SearchStrategy[Ex]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\featureflags.py
-----------------------------
>     """Object that can be used to control a number of feature flags for a
      given test run.
  
      This enables an approach to data generation called swarm testing (
class FeatureFlags:
class FeatureStrategy(SearchStrategy[FeatureFlags]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\flatmapped.py
-----------------------------
class FlatMapStrategy(SearchStrategy[MappedTo], Generic[MappedFrom, MappedTo]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\functions.py
-----------------------------
class FunctionStrategy(SearchStrategy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\ipaddress.py
-----------------------------
>     r"""Generate IP addresses - ``v=4`` for :class:`~python:ipaddress.IPv4Address`\ es,
      ``v=6`` for :class:`~python:ipaddress.IPv6Address`\ es, or leave unspecified
      to allow both versions.
  
def ip_addresses(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\lazy.py
-----------------------------
>     """A strategy which is defined purely by conversion to and from another
      strategy.
  
      Its parameter and distribution come from that other strategy.
def unwrap_strategies(s):
class LazyStrategy(SearchStrategy[Ex]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\misc.py
-----------------------------
>     """A strategy which always returns a single fixed value.
  
      It's implemented as a length-one SampledFromStrategy so that all our
      special-case logic for filtering and sets applies also to just(x).
class JustStrategy(SampledFromStrategy[Ex]):
def just(value: T) -> SearchStrategy[T]:
def none() -> SearchStrategy[None]:
class Nothing(SearchStrategy["Never"]):
def nothing() -> SearchStrategy["Never"]:
class BooleansStrategy(SearchStrategy[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\numbers.py
-----------------------------
>     """Returns a strategy which generates integers.
  
      If min_value is not None then all values will be >= min_value. If
      max_value is not None then all values will be <= max_value
class IntegersStrategy(SearchStrategy[int]):
def integers(
class FloatStrategy(SearchStrategy[float]):
def floats(
class NanStrategy(SearchStrategy[float]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\random.py
-----------------------------
>     """A subclass of Random designed to expose the seed it was initially
class HypothesisRandom(Random, abc.ABC):
def getrandbits(self, n: int) -> int:  # type: ignore
def random(self) -> float:  # type: ignore
def _randbelow(self, n: int) -> int:  # type: ignore
def sig_of(name):
def define_copy_method(name):
class RandomState:
def state_for_seed(data, seed):
def normalize_zero(f: float) -> float:
class ArtificialRandom(HypothesisRandom):
def convert_kwargs(name, kwargs):
class TrueRandom(HypothesisRandom):
class RandomStrategy(SearchStrategy[HypothesisRandom]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\recursive.py
-----------------------------
class LimitReached(BaseException):
class LimitedStrategy(SearchStrategy):
class RecursiveStrategy(SearchStrategy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\regex.py
-----------------------------
>     """Helper object that allows to configure `characters` strategy with
      various unicode categories and characters. Also allows negation of
      configured set.
  
class IncompatibleWithAlphabet(InvalidArgument):
def update_group(draw, group_name, strategy):
def reuse_group(draw, group_name):
def group_conditional(draw, group_name, if_yes, if_no):
def clear_cache_after_draw(draw, base_strategy):
def chars_not_in_alphabet(alphabet, string):
class Context:
class CharactersBuilder:
class BytesBuilder(CharactersBuilder):
def maybe_pad(draw, regex, strategy, left_pad_strategy, right_pad_strategy):
def base_regex_strategy(regex, parsed=None, alphabet=None):
def regex_strategy(
def _strategy(codes, context, is_unicode, *, alphabet):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\shared.py
-----------------------------
class SharedStrategy(SearchStrategy[Ex]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\strategies.py
-----------------------------
>     """Handle properties which may be mutually recursive among a set of
      strategies.
  
      These are essentially lazily cached properties, with the ability to set
def recursive_property(strategy: "SearchStrategy", name: str, default: object) -> Any:
class SearchStrategy(Generic[Ex]):
def _is_hashable(value: object) -> tuple[bool, Optional[int]]:
def is_hashable(value: object) -> bool:
class SampledFromStrategy(SearchStrategy[Ex]):
class OneOfStrategy(SearchStrategy[Ex]):
def one_of(
def one_of(__a1: SearchStrategy[Ex]) -> SearchStrategy[Ex]:  # pragma: no cover
def one_of(
def one_of(
def one_of(
def one_of(
def one_of(*args: SearchStrategy[Any]) -> SearchStrategy[Any]:  # pragma: no cover
def one_of(
class MappedStrategy(SearchStrategy[MappedTo], Generic[MappedFrom, MappedTo]):
def _list_strategy_type() -> Any:
def _collection_ish_functions() -> Sequence[Any]:
class FilteredStrategy(SearchStrategy[Ex]):
def check_strategy(arg: object, name: str = "") -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\strings.py
-----------------------------
>     """A strategy which generates single character strings of text type."""
  
      def __init__(
          self, intervals: IntervalSet, force_repr: Optional[str] = None
def _check_is_single_character(c):
class OneCharStringStrategy(SearchStrategy[str]):
class TextStrategy(ListStrategy[str]):
def _string_filter_rewrite(self, kind, condition):
def _identifier_characters():
class BytesStrategy(SearchStrategy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\types.py
-----------------------------
>     """Minimise to None, then non-container types, then container types."""
      if t is None or t is type(None):
          return (-1, repr(t))
      t = get_origin(t) or t
def type_sorting_key(t):
def _compatible_args(args, superclass_args):
def try_issubclass(thing, superclass):
def is_a_new_type(thing):
def is_a_type_alias_type(thing):  # pragma: no cover # covered by 3.12+ tests
def is_a_union(thing: object) -> bool:
def is_a_type(thing: object) -> bool:
def is_typing_literal(thing: object) -> bool:
def is_annotated_type(thing: object) -> bool:
def get_constraints_filter_map():
def _get_constraints(args: tuple[Any, ...]) -> Iterator["at.BaseMetadata"]:
def _flat_annotated_repr_parts(annotated_type):
def find_annotated_strategy(annotated_type):
def has_type_arguments(type_):
def is_generic_type(type_):
def _try_import_forward_ref(thing, typ, *, type_params):  # pragma: no cover
def from_typing_type(thing):
def can_cast(type, value):
def _networks(bits):
def _from_numpy_type(thing: type) -> typing.Optional[st.SearchStrategy]:
def register(type_, fallback=None, *, module=typing):
def resolve_Type(thing):
def resolve_List(thing):
def resolve_Tuple(thing):
def _can_hash(val):
def _from_hashable_type(type_):
def resolve_Set(thing):
def resolve_FrozenSet(thing):
def resolve_Dict(thing):
def resolve_DefaultDict(thing):
def resolve_ItemsView(thing):
def resolve_KeysView(thing):
def resolve_ValuesView(thing):
def resolve_Iterator(thing):
def resolve_Counter(thing):
def resolve_deque(thing):
def resolve_ChainMap(thing):
def resolve_OrderedDict(thing):
def resolve_Pattern(thing):
def resolve_Match(thing):
class GeneratorStrategy(st.SearchStrategy):
def resolve_Generator(thing):
def resolve_Callable(thing):
def resolve_TypeVar(thing):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\utils.py
-----------------------------
>     """Returns a decorator for strategy functions.
  
      If ``force_reusable_values`` is True, the returned strategy will be marked
      with ``.has_reusable_values == True`` even if it uses maps/filters or
def convert_value(v: object) -> ValueKey:
def clear_cache() -> None:
def cacheable(fn: T) -> T:
def defines_strategy(
def to_jsonable(obj: object, *, avoid_realization: bool) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\_internal\__init__.py
-----------------------------
> """Package defining SearchStrategy, which is the core type that Hypothesis uses

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\strategies\__init__.py
-----------------------------
def _check_exports(_public):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\utils\conventions.py
-----------------------------
>     """A factory for sentinel objects with nice reprs."""
  
      def __init__(self, identifier: str) -> None:
          self.identifier = identifier
class UniqueIdentifier:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\utils\dynamicvariables.py
-----------------------------
class DynamicVariable(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\utils\terminal.py
-----------------------------
>     """Returns one of "dark", "light", or "unknown".
  
      This is basically just guessing, but better than always guessing "dark"!
      See also https://stackoverflow.com/questions/2507337/ and
def guess_background_color() -> Literal["light", "dark", "unknown"]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\utils\threading.py
-----------------------------
>     """
      Manages thread-local state. ThreadLocal forwards getattr and setattr to a
      threading.local() instance. The passed kwargs defines the available attributes
      on the threadlocal and their default values.
class ThreadLocal:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\utils\__init__.py
-----------------------------
> """hypothesis.utils is a package for things that you can consider part of the

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\vendor\pretty.py
-----------------------------
> """
  Python advanced pretty printer.  This pretty printer is intended to
  replace the old `pprint` python module which does not allow developers
  to provide their own pretty print callbacks.
def _safe_getattr(obj: object, attr: str, default: Optional[Any] = None) -> Any:
def pretty(obj: object) -> str:
class IDKey:
class RepresentationPrinter:
class Printable:
class Text(Printable):
class Breakable(Printable):
class Group(Printable):
class GroupQueue:
def _seq_pprinter_factory(start: str, end: str, basetype: type) -> PrettyPrintFunction:
def get_class_name(cls: type[object]) -> str:
def _set_pprinter_factory(
def _dict_pprinter_factory(
def _super_pprint(obj: Any, p: RepresentationPrinter, cycle: bool) -> None:
def _re_pattern_pprint(obj: re.Pattern, p: RepresentationPrinter, cycle: bool) -> None:
def _type_pprint(obj: type[object], p: RepresentationPrinter, cycle: bool) -> None:
def _repr_pprint(obj: object, p: RepresentationPrinter, cycle: bool) -> None:
def pprint_fields(
def _function_pprint(
def _exception_pprint(
def _repr_integer(obj: int, p: RepresentationPrinter, cycle: bool) -> None:
def _repr_float_counting_nans(
def for_type_by_name(
def _defaultdict_pprint(
def _ordereddict_pprint(
def _deque_pprint(obj: deque[object], p: RepresentationPrinter, cycle: bool) -> None:
def _counter_pprint(
def _repr_dataframe(
def _repr_enum(obj: Enum, p: RepresentationPrinter, cycle: bool) -> None:
class _ReprDots:
def _repr_partial(obj: partial[Any], p: RepresentationPrinter, cycle: bool) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\configuration.py
-----------------------------
>     """Called from locations that should not be executed during initialization, for example
      touching disk or materializing lazy/deferred strategies from plugins. If initialization
      is in progress, a warning is emitted.
  
def set_hypothesis_home_dir(directory: Union[str, Path, None]) -> None:
def storage_directory(*names: str, intent_to_write: bool = True) -> Path:
def check_sideeffect_during_initialization(
def notice_initialization_restarted(*, warn: bool = True) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\control.py
-----------------------------
>     """Calling ``assume`` is like an :ref:`assert <python:assert>` that marks
      the example as bad, rather than failing the test.
  
      This allows you to specify properties that you *assume* will be
def _calling_function_location(what: str, frame: Any) -> str:
def reject() -> NoReturn:
def assume(condition: object) -> bool:
def currently_in_test_context() -> bool:
def current_build_context() -> "BuildContext":
def deprecate_random_in_strategy(fmt, *args):
class BuildContext:
def cleanup(teardown):
def should_note():
def note(value: object) -> None:
def event(value: str, payload: Union[str, int, float] = "") -> None:
def _event_to_string(event, allowed_types=str):
def target(observation: Union[int, float], *, label: str = "") -> Union[int, float]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\core.py
-----------------------------
> """This module provides the core primitives of Hypothesis, such as given."""
  import base64
  import contextlib
  import dataclasses
class Example:
class example:
def seed(seed: Hashable) -> Callable[[TestFunc], TestFunc]:
def reproduce_failure(version: str, blob: bytes) -> Callable[[TestFunc], TestFunc]:
def reproduction_decorator(choices: Iterable[ChoiceT]) -> str:
def encode_failure(choices: Iterable[ChoiceT]) -> bytes:
def decode_failure(blob: bytes) -> Sequence[ChoiceT]:
def _invalid(message, *, exc=InvalidArgument, test, given_kwargs):
def is_invalid_test(test, original_sig, given_arguments, given_kwargs):
def execute_explicit_examples(state, wrapped_test, arguments, kwargs, original_sig):
def get_random_for_wrapped_test(test, wrapped_test):
class Stuff:
def process_arguments_to_given(
def skip_exceptions_to_reraise():
def failure_exceptions_to_catch() -> tuple[type[BaseException], ...]:
def new_given_signature(original_sig, given_kwargs):
def default_executor(data, function):
def get_executor(runner):
def _flatten_group(excgroup: BaseExceptionGroup[T]) -> list[T]:
def unwrap_markers_from_group() -> Generator[None, None, None]:
class StateForActualGivenExecution:
def _raise_to_user(
def fake_subTest(self, msg=None, **__):
class HypothesisHandle:
def given(
def given(
def given(
def given(
def find(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\database.py
-----------------------------
>     """
      Returns True if the desired path can be used as database path because
      either the directory exists and can be used, or its root directory can
      be used and we can make the directory as needed.
def _usable_dir(path: StrPathT) -> bool:
def _db_for_path(
class _EDMeta(abc.ABCMeta):
class ExampleDatabase(metaclass=_EDMeta):
class InMemoryExampleDatabase(ExampleDatabase):
def _hash(key: bytes) -> str:
class DirectoryBasedExampleDatabase(ExampleDatabase):
class ReadOnlyDatabase(ExampleDatabase):
class MultiplexedDatabase(ExampleDatabase):
class GitHubArtifactDatabase(ExampleDatabase):
class BackgroundWriteDatabase(ExampleDatabase):
def _pack_uleb128(value: int) -> bytes:
def _unpack_uleb128(buffer: bytes) -> tuple[int, int]:
def choices_to_bytes(choices: Iterable[ChoiceT], /) -> bytes:
def _choices_from_bytes(buffer: bytes, /) -> tuple[ChoiceT, ...]:
def choices_from_bytes(buffer: bytes, /) -> Optional[tuple[ChoiceT, ...]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\entry_points.py
-----------------------------
> """Run all functions registered for the "hypothesis" entry point.
  
  This can be used with `st.register_type_strategy` to register strategies for your
  custom types, running the relevant code when *hypothesis* is imported instead of
def get_entry_points() -> Generator[EntryPoint, None, None]:
def run() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\errors.py
-----------------------------
>     """Generic parent class for exceptions thrown by Hypothesis."""
  
  
  class _Trimmable(HypothesisException):
class HypothesisException(Exception):
class _Trimmable(HypothesisException):
class UnsatisfiedAssumption(HypothesisException):
class NoSuchExample(HypothesisException):
class Unsatisfiable(_Trimmable):
class ChoiceTooLarge(HypothesisException):
class Flaky(_Trimmable):
class FlakyReplay(Flaky):
class FlakyStrategyDefinition(Flaky):
class _WrappedBaseException(Exception):
class FlakyFailure(ExceptionGroup, Flaky):
class FlakyBackendFailure(FlakyFailure):
class InvalidArgument(_Trimmable, TypeError):
class ResolutionFailed(InvalidArgument):
class InvalidState(HypothesisException):
class InvalidDefinition(_Trimmable, TypeError):
class HypothesisWarning(HypothesisException, Warning):
class FailedHealthCheck(_Trimmable):
class NonInteractiveExampleWarning(HypothesisWarning):
class HypothesisDeprecationWarning(HypothesisWarning, FutureWarning):
class HypothesisSideeffectWarning(HypothesisWarning):
class Frozen(HypothesisException):
def __getattr__(name: str) -> Any:
class DeadlineExceeded(_Trimmable):
class StopTest(BaseException):
class DidNotReproduce(HypothesisException):
class Found(HypothesisException):
class RewindRecursive(Exception):
class SmallSearchSpaceWarning(HypothesisWarning):
class BackendCannotProceed(HypothesisException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\provisional.py
-----------------------------
> """This module contains various provisional APIs and strategies.
  
  It is intended for internal use, to ease code reuse, and is not stable.
  Point releases may move or break the contents at any time!
def get_top_level_domains() -> tuple[str, ...]:
def _recase_randomly(draw: DrawFn, tld: str) -> str:
class DomainNameStrategy(st.SearchStrategy[str]):
def domains(
def urls() -> st.SearchStrategy[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\reporting.py
-----------------------------
def default(value: object) -> None:
def current_reporter() -> ReporterT:
def with_reporter(new_reporter: ReporterT) -> AbstractContextManager[None]:
def current_verbosity() -> Verbosity:
def verbose_report(text: str) -> None:
def debug_report(text: str) -> None:
def report(text: str) -> None:
def base_report(text: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\stateful.py
-----------------------------
> """This module provides support for a stateful style of testing, where tests
  attempt to find a sequence of operations that cause a breakage rather than just
  a single value.
  
def _is_singleton(obj: object) -> bool:
class _OmittedArgument:
class TestCaseProperty:  # pragma: no cover
def get_state_machine_test(state_machine_factory, *, settings=None, _min_steps=0):
def run_state_machine_as_test(state_machine_factory, *, settings=None, _min_steps=0):
class StateMachineMeta(type):
class _SetupState:
class RuleBasedStateMachine(metaclass=StateMachineMeta):
class Rule:
class BundleReferenceStrategy(SearchStrategy):
class Bundle(SearchStrategy[Ex]):
class BundleConsumer(Bundle[Ex]):
def consumes(bundle: Bundle[Ex]) -> SearchStrategy[Ex]:
class MultipleResults(Iterable[Ex]):
def multiple(*args: T) -> MultipleResults[T]:
def _convert_targets(targets, target):
def _rule_qualname(f: Any) -> str:
def rule(
def rule(
def rule(
def rule(
def initialize(
def initialize(
def initialize(
def initialize(
class VarReference:
def precondition(precond: Callable[[Any], bool]) -> Callable[[TestFunc], TestFunc]:
class Invariant:
def invariant(*, check_during_init: bool = False) -> Callable[[TestFunc], TestFunc]:
class RuleStrategy(SearchStrategy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\statistics.py
-----------------------------
>     """Return a list of lines describing the results of `target`, if any."""
      # These lines are included in the general statistics description below,
      # but also printed immediately below failing examples to alleviate the
      # "threshold problem" where shrinking can make severe bug look trivial.
def note_statistics(stats_dict: "StatisticsDict") -> None:
def describe_targets(best_targets: dict[str, float]) -> list[str]:
def format_ms(times: Iterable[float]) -> str:
def describe_statistics(stats_dict: "StatisticsDict") -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\_settings.py
-----------------------------
> """The settings module configures runtime options for Hypothesis.
  
  Either an explicit settings object can be used or the default object on
  this module can be modified.
class Verbosity(IntEnum):
class Phase(IntEnum):
class HealthCheckMeta(EnumMeta):
class HealthCheck(Enum, metaclass=HealthCheckMeta):
class duration(datetime.timedelta):
def is_in_ci() -> bool:
def _validate_choices(name: str, value: T, *, choices: Sequence[object]) -> T:
def _validate_max_examples(max_examples: int) -> int:
def _validate_database(
def _validate_phases(phases: Collection[Phase]) -> Sequence[Phase]:
def _validate_stateful_step_count(stateful_step_count: int) -> int:
def _validate_suppress_health_check(suppressions):
def _validate_deadline(
def _validate_backend(backend: str) -> str:
class settingsMeta(type):
class settings(metaclass=settingsMeta):
def local_settings(s: settings) -> Generator[settings, None, None]:
def note_deprecation(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\hypothesis\__init__.py
-----------------------------
> """Hypothesis is a library for writing unit tests which are parametrized by
  some source of data.
  
  It verifies your code against a wide range of input and minimizes any

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\vendor\licenses.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\cli.py
-----------------------------
def main(argv: Sequence[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\extensions.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\identify.py
-----------------------------
>     """Return whether the first KB of contents seems to be binary.
  
      This is roughly based on libmagic's binary/text detection:
      https://github.com/file/file/blob/df74b09b9027676088c797528edcaae5a9ce9ad0/src/encoding.
c#L203-L228
def tags_from_path(path: str) -> set[str]:
def tags_from_filename(path: str) -> set[str]:
def tags_from_interpreter(interpreter: str) -> set[str]:
def is_text(bytesio: IO[bytes]) -> bool:
def file_is_text(path: str) -> bool:
def _shebang_split(line: str) -> list[str]:
def _parse_nix_shebang(
def parse_shebang(bytesio: IO[bytes]) -> tuple[str, ...]:
def parse_shebang_from_file(path: str) -> tuple[str, ...]:
def _norm_license(s: str) -> str:
def license_id(filename: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\interpreters.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\identify\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\codec.py
-----------------------------
class Codec(codecs.Codec):
class IncrementalEncoder(codecs.BufferedIncrementalEncoder):
class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
class StreamWriter(Codec, codecs.StreamWriter):
class StreamReader(Codec, codecs.StreamReader):
def search_function(name: str) -> Optional[codecs.CodecInfo]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\compat.py
-----------------------------
def ToASCII(label: str) -> bytes:
def ToUnicode(label: Union[bytes, bytearray]) -> str:
def nameprep(s: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\core.py
-----------------------------
>     """Base exception for all IDNA-encoding related problems"""
  
      pass
  
class IDNAError(UnicodeError):
class IDNABidiError(IDNAError):
class InvalidCodepoint(IDNAError):
class InvalidCodepointContext(IDNAError):
def _combining_class(cp: int) -> int:
def _is_script(cp: str, script: str) -> bool:
def _punycode(s: str) -> bytes:
def _unot(s: int) -> str:
def valid_label_length(label: Union[bytes, str]) -> bool:
def valid_string_length(label: Union[bytes, str], trailing_dot: bool) -> bool:
def check_bidi(label: str, check_ltr: bool = False) -> bool:
def check_initial_combiner(label: str) -> bool:
def check_hyphen_ok(label: str) -> bool:
def check_nfc(label: str) -> None:
def valid_contextj(label: str, pos: int) -> bool:
def valid_contexto(label: str, pos: int, exception: bool = False) -> bool:
def check_label(label: Union[str, bytes, bytearray]) -> None:
def alabel(label: str) -> bytes:
def ulabel(label: Union[str, bytes, bytearray]) -> str:
def uts46_remap(domain: str, std3_rules: bool = True, transitional: bool = False) -> str:
def encode(
def decode(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\idnadata.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\intranges.py
-----------------------------
> """
  Given a list of integers, made up of (hopefully) a small number of long runs
  of consecutive integers, compute a representation of the form
  ((start1, end1), (start2, end2) ...). Then answer the question "was x present
def intranges_from_list(list_: List[int]) -> Tuple[int, ...]:
def _encode_range(start: int, end: int) -> int:
def _decode_range(r: int) -> Tuple[int, int]:
def intranges_contain(int_: int, ranges: Tuple[int, ...]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\package_data.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\uts46data.py
-----------------------------
> """IDNA Mapping Table from UTS46."""
  
  
  __version__ = "15.1.0"
def _seg_0() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_1() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_2() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_3() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_4() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_5() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_6() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_7() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_8() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_9() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_10() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_11() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_12() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_13() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_14() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_15() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_16() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_17() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_18() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_19() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_20() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_21() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_22() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_23() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_24() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_25() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_26() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_27() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_28() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_29() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_30() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_31() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_32() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_33() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_34() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_35() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_36() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_37() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_38() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_39() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_40() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_41() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_42() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_43() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_44() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_45() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_46() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_47() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_48() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_49() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_50() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_51() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_52() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_53() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_54() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_55() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_56() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_57() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_58() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_59() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_60() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_61() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_62() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_63() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_64() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_65() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_66() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_67() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_68() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_69() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_70() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_71() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_72() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_73() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_74() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_75() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_76() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_77() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_78() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_79() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_80() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_81() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\idna\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\iniconfig\exceptions.py
-----------------------------
class ParseError(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\iniconfig\_parse.py
-----------------------------
class _ParsedLine(NamedTuple):
def parse_lines(path: str, line_iter: list[str]) -> list[_ParsedLine]:
def _parseline(path: str, line: str, lineno: int) -> tuple[str | None, str | None]:
def iscommentline(line: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\iniconfig\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\iniconfig\__init__.py
-----------------------------
> """ brain-dead simple parser for ini-style files.
  (C) Ronny Pfannschmidt, Holger Krekel -- MIT licensed
class SectionWrapper:
class IniConfig:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\async_utils.py
-----------------------------
def async_variant(normal_func):  # type: ignore
class _IteratorToAsyncIterator(t.Generic[V]):
def auto_aiter(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\bccache.py
-----------------------------
> """The optional bytecode cache system. This is useful if you have very
  complex template situations and the compilation of all those templates
  slows down your application too much.
  
class Bucket:
class BytecodeCache:
class FileSystemBytecodeCache(BytecodeCache):
class MemcachedBytecodeCache(BytecodeCache):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\compiler.py
-----------------------------
> """Compiles nodes from the parser into Python code."""
  
  import typing as t
  from contextlib import contextmanager
def optimizeconst(f: F) -> F:
def _make_binop(op: str) -> t.Callable[["CodeGenerator", nodes.BinExpr, "Frame"], None]:
def _make_unop(
def generate(
def has_safe_repr(value: t.Any) -> bool:
def find_undeclared(
class MacroRef:
class Frame:
class VisitorExit(RuntimeError):
class DependencyFinderVisitor(NodeVisitor):
class UndeclaredNameVisitor(NodeVisitor):
class CompilerExit(Exception):
class CodeGenerator(NodeVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\constants.py
-----------------------------
> LOREM_IPSUM_WORDS = """\
  a ac accumsan ad adipiscing aenean aliquam aliquet amet ante aptent arcu at
  auctor augue bibendum blandit class commodo condimentum congue consectetuer
  consequat conubia convallis cras cubilia cum curabitur curae cursus dapibus

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\debug.py
-----------------------------
>     """Rewrite the current exception to replace any tracebacks from
      within compiled template code with tracebacks that look like they
      came from the template source.
  
def rewrite_traceback_stack(source: t.Optional[str] = None) -> BaseException:
def fake_traceback(  # type: ignore
def get_template_locals(real_locals: t.Mapping[str, t.Any]) -> t.Dict[str, t.Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\defaults.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\environment.py
-----------------------------
> """Classes for managing templates and their runtime and compile time
  options.
def get_spontaneous_environment(cls: t.Type[_env_bound], *args: t.Any) -> _env_bound:
def create_cache(
def copy_cache(
def load_extensions(
def _environment_config_check(environment: _env_bound) -> _env_bound:
class Environment:
class Template:
class TemplateModule:
class TemplateExpression:
class TemplateStream:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\exceptions.py
-----------------------------
>     """Baseclass for all template errors."""
  
      def __init__(self, message: t.Optional[str] = None) -> None:
          super().__init__(message)
class TemplateError(Exception):
class TemplateNotFound(IOError, LookupError, TemplateError):
class TemplatesNotFound(TemplateNotFound):
class TemplateSyntaxError(TemplateError):
class TemplateAssertionError(TemplateSyntaxError):
class TemplateRuntimeError(TemplateError):
class UndefinedError(TemplateRuntimeError):
class SecurityError(TemplateRuntimeError):
class FilterArgumentError(TemplateRuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\ext.py
-----------------------------
> """Extension API for adding custom tags and behavior."""
  
  import pprint
  import re
class Extension:
def _gettext_alias(
def _make_new_gettext(func: t.Callable[[str], str]) -> t.Callable[..., str]:
def _make_new_ngettext(func: t.Callable[[str, str, int], str]) -> t.Callable[..., str]:
def _make_new_pgettext(func: t.Callable[[str, str], str]) -> t.Callable[..., str]:
def _make_new_npgettext(
class InternationalizationExtension(Extension):
class ExprStmtExtension(Extension):
class LoopControlExtension(Extension):
class DebugExtension(Extension):
def extract_from_ast(
class _CommentFinder:
def babel_extract(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\filters.py
-----------------------------
> """Built-in template filters used with the ``|`` operator."""
  
  import math
  import random
def ignore_case(value: V) -> V:
def make_attrgetter(
def make_multi_attrgetter(
def _prepare_attribute_parts(
def do_forceescape(value: "t.Union[str, HasHTML]") -> Markup:
def do_urlencode(
def do_replace(
def do_upper(s: str) -> str:
def do_lower(s: str) -> str:
def do_items(value: t.Union[t.Mapping[K, V], Undefined]) -> t.Iterator[t.Tuple[K, V]]:
def do_xmlattr(
def do_capitalize(s: str) -> str:
def do_title(s: str) -> str:
def do_dictsort(
def do_sort(
def sync_do_unique(
def _min_or_max(
def do_min(
def do_max(
def do_default(
def sync_do_join(
def do_center(value: str, width: int = 80) -> str:
def sync_do_first(
def do_last(
def do_random(context: "Context", seq: "t.Sequence[V]") -> "t.Union[V, Undefined]":
def do_filesizeformat(value: t.Union[str, float, int], binary: bool = False) -> str:
def do_pprint(value: t.Any) -> str:
def do_urlize(
def do_indent(
def do_truncate(
def do_wordwrap(
def do_wordcount(s: str) -> int:
def do_int(value: t.Any, default: int = 0, base: int = 10) -> int:
def do_float(value: t.Any, default: float = 0.0) -> float:
def do_format(value: str, *args: t.Any, **kwargs: t.Any) -> str:
def do_trim(value: str, chars: t.Optional[str] = None) -> str:
def do_striptags(value: "t.Union[str, HasHTML]") -> str:
def sync_do_slice(
def do_batch(
def do_round(
class _GroupTuple(t.NamedTuple):
def sync_do_groupby(
def sync_do_sum(
def sync_do_list(value: "t.Iterable[V]") -> "t.List[V]":
def do_mark_safe(value: str) -> Markup:
def do_mark_unsafe(value: str) -> str:
def do_reverse(value: str) -> str: ...
def do_reverse(value: "t.Iterable[V]") -> "t.Iterable[V]": ...
def do_reverse(value: t.Union[str, t.Iterable[V]]) -> t.Union[str, t.Iterable[V]]:
def do_attr(
def sync_do_map(
def sync_do_map(
def sync_do_map(
def do_map(
def do_map(
def sync_do_select(
def sync_do_reject(
def sync_do_selectattr(
def sync_do_rejectattr(
def do_tojson(
def prepare_map(
def prepare_select_or_reject(
def select_or_reject(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\idtracking.py
-----------------------------
>     """A visitor for `Frame.inspect`."""
  
      def __init__(self, symbols: "Symbols") -> None:
          self.symbols = symbols
def find_symbols(
def symbols_for_node(
class Symbols:
class RootVisitor(NodeVisitor):
class FrameSymbolVisitor(NodeVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\lexer.py
-----------------------------
> """Implements a Jinja / Python combination lexer. The ``Lexer`` class
  is used to do some preprocessing. It filters out invalid operators like
  the bitshift operators we don't allow in templates. It separates
  template code and python code in expressions.
def _describe_token_type(token_type: str) -> str:
def describe_token(token: "Token") -> str:
def describe_token_expr(expr: str) -> str:
def count_newlines(value: str) -> int:
def compile_rules(environment: "Environment") -> t.List[t.Tuple[str, str]]:
class Failure:
class Token(t.NamedTuple):
class TokenStreamIterator:
class TokenStream:
def get_lexer(environment: "Environment") -> "Lexer":
class OptionalLStrip(tuple):  # type: ignore[type-arg]
class _Rule(t.NamedTuple):
class Lexer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\loaders.py
-----------------------------
> """API and implementations for loading templates from different data
  sources.
def split_template_path(template: str) -> t.List[str]:
class BaseLoader:
class FileSystemLoader(BaseLoader):
class PackageLoader(BaseLoader):
class DictLoader(BaseLoader):
class FunctionLoader(BaseLoader):
class PrefixLoader(BaseLoader):
class ChoiceLoader(BaseLoader):
class _TemplateModule(ModuleType):
class ModuleLoader(BaseLoader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\meta.py
-----------------------------
> """Functions that expose information about templates that might be
  interesting for introspection.
class TrackingCodeGenerator(CodeGenerator):
def find_undeclared_variables(ast: nodes.Template) -> t.Set[str]:
def find_referenced_templates(ast: nodes.Template) -> t.Iterator[t.Optional[str]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\nativetypes.py
-----------------------------
>     """Return a native Python type from the list of compiled nodes. If
      the result is a single node, its value is returned. Otherwise, the
      nodes are concatenated as strings. If the result can be parsed with
      :func:`ast.literal_eval`, the parsed value is returned. Otherwise,
def native_concat(values: t.Iterable[t.Any]) -> t.Optional[t.Any]:
class NativeCodeGenerator(CodeGenerator):
class NativeEnvironment(Environment):
class NativeTemplate(Template):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\nodes.py
-----------------------------
> """AST nodes generated by the parser for the compiler. Also provides
  some node tree helper functions used by the parser and compiler in order
  to normalize nodes.
class Impossible(Exception):
class NodeType(type):
class EvalContext:
def get_eval_context(node: "Node", ctx: t.Optional[EvalContext]) -> EvalContext:
class Node(metaclass=NodeType):
class Stmt(Node):
class Helper(Node):
class Template(Node):
class Output(Stmt):
class Extends(Stmt):
class For(Stmt):
class If(Stmt):
class Macro(Stmt):
class CallBlock(Stmt):
class FilterBlock(Stmt):
class With(Stmt):
class Block(Stmt):
class Include(Stmt):
class Import(Stmt):
class FromImport(Stmt):
class ExprStmt(Stmt):
class Assign(Stmt):
class AssignBlock(Stmt):
class Expr(Node):
class BinExpr(Expr):
class UnaryExpr(Expr):
class Name(Expr):
class NSRef(Expr):
class Literal(Expr):
class Const(Literal):
class TemplateData(Literal):
class Tuple(Literal):
class List(Literal):
class Dict(Literal):
class Pair(Helper):
class Keyword(Helper):
class CondExpr(Expr):
def args_as_const(
class _FilterTestCommon(Expr):
class Filter(_FilterTestCommon):
class Test(_FilterTestCommon):
class Call(Expr):
class Getitem(Expr):
class Getattr(Expr):
class Slice(Expr):
class Concat(Expr):
class Compare(Expr):
class Operand(Helper):
class Mul(BinExpr):
class Div(BinExpr):
class FloorDiv(BinExpr):
class Add(BinExpr):
class Sub(BinExpr):
class Mod(BinExpr):
class Pow(BinExpr):
class And(BinExpr):
class Or(BinExpr):
class Not(UnaryExpr):
class Neg(UnaryExpr):
class Pos(UnaryExpr):
class EnvironmentAttribute(Expr):
class ExtensionAttribute(Expr):
class ImportedName(Expr):
class InternalName(Expr):
class MarkSafe(Expr):
class MarkSafeIfAutoescape(Expr):
class ContextReference(Expr):
class DerivedContextReference(Expr):
class Continue(Stmt):
class Break(Stmt):
class Scope(Stmt):
class OverlayScope(Stmt):
class EvalContextModifier(Stmt):
class ScopedEvalContextModifier(EvalContextModifier):
def _failing_new(*args: t.Any, **kwargs: t.Any) -> "te.NoReturn":

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\optimizer.py
-----------------------------
> """The optimizer tries to constant fold expressions and modify the AST
  in place so that it should be faster to evaluate.
  
  Because the AST does not contain all the scoping information and the
def optimize(node: nodes.Node, environment: "Environment") -> nodes.Node:
class Optimizer(NodeTransformer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\parser.py
-----------------------------
> """Parse tokens from the lexer into nodes for the compiler."""
  
  import typing
  import typing as t
class Parser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\runtime.py
-----------------------------
> """The runtime functions and state used by compiled templates."""
  
  import functools
  import sys
def identity(x: V) -> V:
def markup_join(seq: t.Iterable[t.Any]) -> str:
def str_join(seq: t.Iterable[t.Any]) -> str:
def new_context(
class TemplateReference:
def _dict_method_all(dict_method: F) -> F:
class Context:
class BlockReference:
class LoopContext:
class AsyncLoopContext(LoopContext):
class Macro:
class Undefined:
def make_logging_undefined(
class ChainableUndefined(Undefined):
class DebugUndefined(Undefined):
class StrictUndefined(Undefined):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\sandbox.py
-----------------------------
> """A sandbox layer that ensures unsafe operations cannot be performed.
  Useful when the template itself comes from an untrusted source.
def safe_range(*args: int) -> range:
def unsafe(f: F) -> F:
def is_internal_attribute(obj: t.Any, attr: str) -> bool:
def modifies_known_mutable(obj: t.Any, attr: str) -> bool:
class SandboxedEnvironment(Environment):
class ImmutableSandboxedEnvironment(SandboxedEnvironment):
class SandboxedFormatter(Formatter):
class SandboxedEscapeFormatter(SandboxedFormatter, EscapeFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\tests.py
-----------------------------
> """Built-in template tests used with the ``is`` operator."""
  
  import operator
  import typing as t
def test_odd(value: int) -> bool:
def test_even(value: int) -> bool:
def test_divisibleby(value: int, num: int) -> bool:
def test_defined(value: t.Any) -> bool:
def test_undefined(value: t.Any) -> bool:
def test_filter(env: "Environment", value: str) -> bool:
def test_test(env: "Environment", value: str) -> bool:
def test_none(value: t.Any) -> bool:
def test_boolean(value: t.Any) -> bool:
def test_false(value: t.Any) -> bool:
def test_true(value: t.Any) -> bool:
def test_integer(value: t.Any) -> bool:
def test_float(value: t.Any) -> bool:
def test_lower(value: str) -> bool:
def test_upper(value: str) -> bool:
def test_string(value: t.Any) -> bool:
def test_mapping(value: t.Any) -> bool:
def test_number(value: t.Any) -> bool:
def test_sequence(value: t.Any) -> bool:
def test_sameas(value: t.Any, other: t.Any) -> bool:
def test_iterable(value: t.Any) -> bool:
def test_escaped(value: t.Any) -> bool:
def test_in(value: t.Any, seq: t.Container[t.Any]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\utils.py
-----------------------------
> """Special singleton representing missing values for the runtime."""
  
  internal_code: t.MutableSet[CodeType] = set()
  
class _MissingType:
def pass_context(f: F) -> F:
def pass_eval_context(f: F) -> F:
def pass_environment(f: F) -> F:
class _PassArg(enum.Enum):
def internalcode(f: F) -> F:
def is_undefined(obj: t.Any) -> bool:
def consume(iterable: t.Iterable[t.Any]) -> None:
def clear_caches() -> None:
def import_string(import_name: str, silent: bool = False) -> t.Any:
def open_if_exists(filename: str, mode: str = "rb") -> t.Optional[t.IO[t.Any]]:
def object_type_repr(obj: t.Any) -> str:
def pformat(obj: t.Any) -> str:
def urlize(
def generate_lorem_ipsum(
def url_quote(obj: t.Any, charset: str = "utf-8", for_qs: bool = False) -> str:
class LRUCache:
def select_autoescape(
def htmlsafe_json_dumps(
class Cycler:
class Joiner:
class Namespace:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\visitor.py
-----------------------------
> """API for traversing the AST nodes. Implemented by the compiler and
  meta introspection.
class NodeVisitor:
class NodeTransformer(NodeVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\_identifier.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jinja2\__init__.py
-----------------------------
> """Jinja is a template engine written in pure Python. It provides a
  non-XML syntax that supports inline expressions and an optional
  sandboxed environment.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\const_vs_enum.py
-----------------------------
> """
  A benchmark for comparing equivalent validation of `const` and `enum`.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\contains.py
-----------------------------
> """
  A benchmark for validation of the `contains` keyword.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\issue232.py
-----------------------------
> """
  A performance benchmark using the example from issue #232.
  
  See https://github.com/python-jsonschema/jsonschema/pull/232.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\json_schema_test_suite.py
-----------------------------
> """
  A performance benchmark using the official test suite.
  
  This benchmarks jsonschema using every valid example in the

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\nested_schemas.py
-----------------------------
> """
  Validating highly nested schemas shouldn't cause exponential time blowups.
  
  See https://github.com/python-jsonschema/jsonschema/issues/1097.
def nested_schema(levels):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\subcomponents.py
-----------------------------
> """
  A benchmark which tries to compare the possible slow subparts of validation.
def registry_data_structures():
def registry_add():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\unused_registry.py
-----------------------------
> """
  An unused schema registry should not cause slower validation.
  
  "Unused" here means one where no reference resolution is occurring anyhow.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\useless_applicator_schemas.py
-----------------------------
> """
  A benchmark for validation of applicators containing lots of useless schemas.
  
  Signals a small possible optimization to remove all such schemas ahead of time.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\useless_keywords.py
-----------------------------
> """
  A benchmark for validation of schemas containing lots of useless keywords.
  
  Checks we filter them out once, ahead of time.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\validator_creation.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\benchmarks\__init__.py
-----------------------------
> """
  Benchmarks for validation.
  
  This package is *not* public API.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\typing\test_all_concrete_validators_match_protocol.py
-----------------------------
> """
  This module acts as a test that type checkers will allow each validator
  class to be assigned to a variable of type `type[Validator]`
  
class to be assigned to a variable of type `type[Validator]`

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\typing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\fuzz_validate.py
-----------------------------
> """
  Fuzzing setup for OSS-Fuzz.
  
  See https://github.com/google/oss-fuzz/tree/master/projects/jsonschema for the
def test_schemas(obj1, obj2):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_cli.py
-----------------------------
>                 f"""
                      Expected an exit code of {exit_code} != {actual_exit_code}.
  
                      stdout: {stdout.getvalue()}
def fake_validator(*errors):
def fake_open(all_contents):
def _message_for(non_json):
class TestCLI(TestCase):
class TestParser(TestCase):
class TestCLIIntegration(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_deprecations.py
-----------------------------
>         """
          As of v4.0.0, __version__ is deprecated in favor of importlib.metadata.
class TestDeprecations(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_exceptions.py
-----------------------------
>         """
          A property you *must* match is probably better than one you have to
          match a part of.
class TestBestMatch(TestCase):
class TestByRelevance(TestCase):
class TestErrorTree(TestCase):
class TestErrorInitReprStr(TestCase):
class TestHashable(TestCase):
class TestJsonPathRendering(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_format.py
-----------------------------
> """
  Tests for the parts of jsonschema related to the :kw:`format` keyword.
def boom(thing):
class TestFormatChecker(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_jsonschema_test_suite.py
-----------------------------
> """
  Test runner for the JSON Schema official test suite
  
  Tests comprehensive correctness of each draft's validator.
def skip(message, **kwargs):
def ecmascript_regex(test):
def missing_format(Validator):
def complex_email_validation(test):
def leap_second(test):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_types.py
-----------------------------
> """
  Tests for the `TypeChecker`-based type interface.
  
  The actual correctness of the type checking is handled in
def equals_2(checker, instance):
def is_namedtuple(instance):
def is_object_or_named_tuple(checker, instance):
class TestTypeChecker(TestCase):
class TestCustomTypes(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_utils.py
-----------------------------
class TestEqual(TestCase):
class TestDictEqual(TestCase):
class TestListEqual(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\test_validators.py
-----------------------------
>         """
          One can create a validator class whose metaschema uses a different
          dialect than itself.
def fail(validator, errors, instance, schema):
class TestCreateAndExtend(TestCase):
class TestValidationErrorMessages(TestCase):
class TestValidationErrorDetails(TestCase):
class MetaSchemaTestsMixin:
class ValidatorTestMixin(MetaSchemaTestsMixin):
class AntiDraft6LeakMixin:
class TestDraft3Validator(AntiDraft6LeakMixin, ValidatorTestMixin, TestCase):
class TestDraft4Validator(AntiDraft6LeakMixin, ValidatorTestMixin, TestCase):
class TestDraft6Validator(ValidatorTestMixin, TestCase):
class TestDraft7Validator(ValidatorTestMixin, TestCase):
class TestDraft201909Validator(ValidatorTestMixin, TestCase):
class TestDraft202012Validator(ValidatorTestMixin, TestCase):
class TestLatestValidator(TestCase):
class TestValidatorFor(TestCase):
class TestValidate(TestCase):
class TestThreading(TestCase):
class TestReferencing(TestCase):
class TestRefResolver(TestCase):
def sorted_errors(errors):
class ReallyFakeRequests:
class _ReallyFakeJSONResponse:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\_suite.py
-----------------------------
> """
  Python representations of the JSON Schema Test Suite tests.
def _find_suite():
class Suite:
class Version:
class _Case:
def remotes_in(
class _Test:
def _someone_save_us_the_module_of_the_caller():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\cli.py
-----------------------------
> """
  The ``jsonschema`` command line.
class _CannotLoadFile(Exception):
class _Outputter:
class _PrettyFormatter:
class _PlainFormatter:
def _resolve_name_with_default(name):
def parse_args(args):  # noqa: D103
def _validate_instance(instance_path, instance, validator, outputter):
def main(args=sys.argv[1:]):  # noqa: D103
def run(arguments, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin):  # noqa: D103

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\exceptions.py
-----------------------------
> """
  Validation errors, and some surrounding helpers.
def _pretty(thing: Any, prefix: str):
def __getattr__(name):
class _Error(Exception):
class ValidationError(_Error):
class SchemaError(_Error):
class _RefResolutionError(Exception):  # noqa: PLW1641
class _WrappedReferencingError(_RefResolutionError, _Unresolvable):  # pragma: no cover -- partially uncovered but to be removed  # noqa: E501
class UndefinedTypeCheck(Exception):
class UnknownType(Exception):
class FormatError(Exception):
class ErrorTree:
def by_relevance(weak=WEAK_MATCHES, strong=STRONG_MATCHES):
def best_match(errors, key=relevance):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\protocols.py
-----------------------------
> """
  typing.Protocol classes for jsonschema interfaces.
class Validator(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\validators.py
-----------------------------
> """
  Creation and extension of validators, with implementations for existing drafts.
def __getattr__(name):
def validates(version):
def _warn_for_remote_retrieve(uri: str):
def create(
def extend(
class _RefResolver:
def _match_keyword(keyword):
def _match_subschema_keywords(value):
def _search_schema(schema, matcher):
def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417
def validator_for(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\_format.py
-----------------------------
>     """
      A ``format`` property checker.
  
      JSON Schema does not mandate that the ``format`` property actually do any
class FormatChecker:
def _checks_drafts(
def is_email(instance: object) -> bool:
def is_ipv4(instance: object) -> bool:
def is_ipv6(instance: object) -> bool:
def is_regex(instance: object) -> bool:
def is_date(instance: object) -> bool:
def is_draft3_time(instance: object) -> bool:
def is_uuid(instance: object) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\_keywords.py
-----------------------------
def patternProperties(validator, patternProperties, instance, schema):
def propertyNames(validator, propertyNames, instance, schema):
def additionalProperties(validator, aP, instance, schema):
def items(validator, items, instance, schema):
def const(validator, const, instance, schema):
def contains(validator, contains, instance, schema):
def exclusiveMinimum(validator, minimum, instance, schema):
def exclusiveMaximum(validator, maximum, instance, schema):
def minimum(validator, minimum, instance, schema):
def maximum(validator, maximum, instance, schema):
def multipleOf(validator, dB, instance, schema):
def minItems(validator, mI, instance, schema):
def maxItems(validator, mI, instance, schema):
def uniqueItems(validator, uI, instance, schema):
def pattern(validator, patrn, instance, schema):
def format(validator, format, instance, schema):
def minLength(validator, mL, instance, schema):
def maxLength(validator, mL, instance, schema):
def dependentRequired(validator, dependentRequired, instance, schema):
def dependentSchemas(validator, dependentSchemas, instance, schema):
def enum(validator, enums, instance, schema):
def ref(validator, ref, instance, schema):
def dynamicRef(validator, dynamicRef, instance, schema):
def type(validator, types, instance, schema):
def properties(validator, properties, instance, schema):
def required(validator, required, instance, schema):
def minProperties(validator, mP, instance, schema):
def maxProperties(validator, mP, instance, schema):
def allOf(validator, allOf, instance, schema):
def anyOf(validator, anyOf, instance, schema):
def oneOf(validator, oneOf, instance, schema):
def not_(validator, not_schema, instance, schema):
def if_(validator, if_schema, instance, schema):
def unevaluatedItems(validator, unevaluatedItems, instance, schema):
def unevaluatedProperties(validator, unevaluatedProperties, instance, schema):
def prefixItems(validator, prefixItems, instance, schema):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\_legacy_keywords.py
-----------------------------
>     """
      Ignore siblings of ``$ref`` if it is present.
  
      Otherwise, return all keywords.
def ignore_ref_siblings(schema):
def dependencies_draft3(validator, dependencies, instance, schema):
def dependencies_draft4_draft6_draft7(
def disallow_draft3(validator, disallow, instance, schema):
def extends_draft3(validator, extends, instance, schema):
def items_draft3_draft4(validator, items, instance, schema):
def additionalItems(validator, aI, instance, schema):
def items_draft6_draft7_draft201909(validator, items, instance, schema):
def minimum_draft3_draft4(validator, minimum, instance, schema):
def maximum_draft3_draft4(validator, maximum, instance, schema):
def properties_draft3(validator, properties, instance, schema):
def type_draft3(validator, types, instance, schema):
def contains_draft6_draft7(validator, contains, instance, schema):
def recursiveRef(validator, recursiveRef, instance, schema):
def find_evaluated_item_indexes_by_schema(validator, instance, schema):
def unevaluatedItems_draft2019(validator, unevaluatedItems, instance, schema):
def find_evaluated_property_keys_by_schema(validator, instance, schema):
def unevaluatedProperties_draft2019(validator, uP, instance, schema):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\_types.py
-----------------------------
>     """
      A :kw:`type` property checker.
  
      A `TypeChecker` performs type checking for a `Validator`, converting
def _typed_map_converter(
def is_array(checker, instance):
def is_bool(checker, instance):
def is_integer(checker, instance):
def is_null(checker, instance):
def is_number(checker, instance):
def is_object(checker, instance):
def is_string(checker, instance):
def is_any(checker, instance):
class TypeChecker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\_typing.py
-----------------------------
> """
  Some (initially private) typing helpers for jsonschema's types.
class SchemaKeywordValidator(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\_utils.py
-----------------------------
>     """
      Dictionary which uses normalized URIs as keys.
class URIDict(MutableMapping):
class Unset:
def format_as_index(container, indices):
def find_additional_properties(instance, schema):
def extras_msg(extras):
def ensure_list(thing):
def _mapping_equal(one, two):
def _sequence_equal(one, two):
def equal(one, two):
def unbool(element, true=object(), false=object()):
def uniq(container):
def find_evaluated_item_indexes_by_schema(validator, instance, schema):
def find_evaluated_property_keys_by_schema(validator, instance, schema):
def is_valid(errs_it):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\__init__.py
-----------------------------
> """
  An implementation of JSON Schema for Python.
  
  The main functionality is provided by the validator classes for each of the
def __getattr__(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema\__main__.py
-----------------------------
> """
  The jsonschema CLI is now deprecated in favor of check-jsonschema.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema_specifications\tests\test_jsonschema_specifications.py
-----------------------------
>     """
      Ignore files like .DS_Store if someone has actually caused one to exist.
  
      We test here through the private interface as of course the global has
def test_it_contains_metaschemas():
def test_it_is_crawled():
def test_it_copes_with_dotfiles(ignored_relative_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema_specifications\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema_specifications\_core.py
-----------------------------
> """
  Load all the JSON Schema specification's official schemas.
def _schemas():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\jsonschema_specifications\__init__.py
-----------------------------
> """
  The JSON Schema meta-schemas and vocabularies, exposed as a Registry.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\tests\test_codegen_clean.py
-----------------------------
>         """
          Verifies that codegen of visitor functions would not result in a
          changed file. If this test fails, please run 'python -m libcst.codegen.generate all'
          to generate new files.
class TestCodegenClean(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\gather.py
-----------------------------
>     """
      Get all base classes that are subclasses of CSTNode but not an actual
      node itself. This allows us to keep our types sane by refering to the
      base classes themselves.
def _get_bases() -> Iterator[Type[cst.CSTNode]]:
def _get_nodes() -> Iterator[Type[cst.CSTNode]]:
def _get_most_generic_base_for_node(node: Type[cst.CSTNode]) -> Type[cst.CSTNode]:
class Usage:
def _is_maybe(typeobj: object) -> bool:
def _get_origin(typeobj: object) -> object:
def _get_args(typeobj: object) -> List[object]:
def _is_sequence(typeobj: object) -> bool:
def _is_union(typeobj: object) -> bool:
def _calc_node_usage(typeobj: object) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\generate.py
-----------------------------
>     """
      Generalized sanity clean-up for all codegen so we can fix issues such as
      Union[SingleType]. The transforms found here are strictly for form and
      do not affect functionality.
def format_file(fname: str) -> None:
def clean_generated_code(code: str) -> str:
def codegen_visitors() -> None:
def codegen_matchers() -> None:
def codegen_return_types() -> None:
def main(cli_args: List[str]) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\gen_matcher_classes.py
-----------------------------
>     """
      Given a BaseExpression from a type, return a new BaseExpression that does not
      refer to any types listed in values.
class CleanseFullTypeNames(cst.CSTTransformer):
class RemoveTypesFromGeneric(cst.CSTTransformer):
def _remove_types(
class MatcherClassToLibCSTClass(cst.CSTTransformer):
def _convert_match_nodes_to_cst_nodes(
def _get_match_if_true(oldtype: cst.BaseExpression) -> cst.SubscriptElement:
def _add_generic(name: str, oldtype: cst.BaseExpression) -> cst.BaseExpression:
class AddLogicMatchersToUnions(cst.CSTTransformer):
class AddWildcardsToSequenceUnions(cst.CSTTransformer):
def _get_do_not_care() -> cst.SubscriptElement:
def _get_match_metadata() -> cst.SubscriptElement:
def _get_wrapped_union_type(
class Alias:
class Field:
def _get_raw_name(node: cst.CSTNode) -> Optional[str]:
def _get_alias_name(node: cst.CSTNode) -> Optional[str]:
def _wrap_clean_type(
def _get_clean_type_from_expression(
def _maybe_fix_sequence_in_union(
def _get_clean_type_from_union(
def _get_clean_type_from_subscript(
def _get_clean_type_and_aliases(
def _get_fields(node: Type[cst.CSTNode]) -> Generator[Field, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\gen_type_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\gen_visitor_functions.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\transforms.py
-----------------------------
class SimplifyUnionsTransformer(m.MatcherDecoratableTransformer):
class DoubleQuoteForwardRefsTransformer(m.MatcherDecoratableTransformer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codegen\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_add_pyre_directive.py
-----------------------------
>         before = """
              def baz() -> List[Foo]:
                  pass
class TestAddPyreUnsafeCommand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_add_trailing_commas.py
-----------------------------
>         before = """
          def f(x, y):
              pass
  
class AddTrailingCommasTest(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_convert_format_to_fstring.py
-----------------------------
>         """
          Should do nothing, since there's nothing to do.
class ConvertFormatStringCommandTest(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_convert_namedtuple_to_dataclass.py
-----------------------------
>         """
          Should result in no change as there are no children of NamedTuple.
class ConvertNamedTupleToDataclassCommandTest(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_convert_percent_format_to_fstring.py
-----------------------------
class ConvertPercentFormatStringCommandTest(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_convert_type_comments.py
-----------------------------
>         """
          Assert that the codemod works on Python 3.9+, and that we raise
          a NotImplementedError on other Python versions.
class TestConvertTypeCommentsBase(CodemodTest):
class TestConvertTypeComments_AssignForWith(TestConvertTypeCommentsBase):
class TestConvertTypeComments_FunctionDef(TestConvertTypeCommentsBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_convert_union_to_or.py
-----------------------------
>         before = """
              from typing import Union
              x: Union[int, str]
class TestConvertUnionToOrCommand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_ensure_import_present.py
-----------------------------
class EnsureImportPresentCommandTest(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_fix_pyre_directives.py
-----------------------------
>         """
          Tests that a pyre-strict inside the module header doesn't get touched.
class TestFixPyreDirectivesCommand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_fix_variadic_callable.py
-----------------------------
>         before = """
              from typing import Callable
              x: Callable[[...], int] = ...
class TestFixVariadicCallableCommmand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_noop.py
-----------------------------
>         before = """
              foo: str = ""
  
              class Class:
class TestNOOPCodemod(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_remove_pyre_directive.py
-----------------------------
>         before = """
              # pyre-strict
              def baz() -> List[Foo]:
                  pass
class TestRemovePyreStrictCommand(CodemodTest):
class TestRemovePyreUnsafeCommand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_remove_unused_imports.py
-----------------------------
>         before = """
              if True:
                  import a
              else:
class RemoveUnusedImportsCommandTest(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_rename.py
-----------------------------
>         before = """
              from foo import bar
  
              def test() -> None:
class TestRenameCommand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_rename_typing_generic_aliases.py
-----------------------------
>         before = """
              from typing import List, Set, Dict, FrozenSet, Tuple
              x: List[int] = []
              y: Set[int] = set()
class TestRenameCommand(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_strip_strings_from_types.py
-----------------------------
>         before = """
              foo: str = ""
  
              class Class:
class TestStripStringsCodemod(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\test_unnecessary_format_string.py
-----------------------------
>         before = r"""
              good: str = "good"
              good: str = f"with_arg{arg}"
              good = "good{arg1}".format(1234)
class TestUnnecessaryFormatString(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\add_pyre_directive.py
-----------------------------
>     """
      Given a source file, we'll add the strict tag if the file doesn't already
      contain it.
class AddPyreDirectiveCommand(VisitorBasedCodemodCommand, ABC):
class AddPyreStrictCommand(AddPyreDirectiveCommand):
class AddPyreUnsafeCommand(AddPyreDirectiveCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\add_trailing_commas.py
-----------------------------
>         """
          Codemod that adds trailing commas to arguments in function
          headers and function calls.
  
class AddTrailingCommas(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\convert_format_to_fstring.py
-----------------------------
def _get_lhs(field: cst.BaseExpression) -> cst.BaseExpression:
def _find_expr_from_field_name(
def _get_field(formatstr: str) -> Tuple[str, Optional[str], Optional[str]]:
def _get_tokens(  # noqa: C901
class StringQuoteGatherer(ContextAwareVisitor):
class StripNewlinesTransformer(ContextAwareTransformer):
class SwitchStringQuotesTransformer(ContextAwareTransformer):
class ConvertFormatStringCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\convert_namedtuple_to_dataclass.py
-----------------------------
>     """
      Convert NamedTuple class declarations to Python 3.7 dataclasses.
  
      This only performs a conversion at the class declaration level.
class ConvertNamedTupleToDataclassCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\convert_percent_format_to_fstring.py
-----------------------------
>             for quo in ["'", '"', "'''", '"""']:
                  if quo != original_node.quote and quo not in original_node.raw_value:
                      escaped_string = cst.SimpleString(
                          original_node.prefix + quo + original_node.raw_value + quo
def _match_simple_string(node: cst.CSTNode) -> bool:
def _gen_match_simple_expression(module: cst.Module) -> Callable[[cst.CSTNode], bool]:
class EscapeStringQuote(cst.CSTTransformer):
class ConvertPercentFormatStringCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\convert_type_comments.py
-----------------------------
>     """
      Get the type-comment-enriched python AST for a node.
  
      If there are illegal type comments, this can return a SyntaxError.
def _empty_module() -> cst.Module:
def _code_for_node(node: cst.CSTNode) -> str:
def _ast_for_statement(node: cst.CSTNode) -> ast.stmt:
def _parse_type_comment(
def _annotation_for_statement(
def _parse_func_type_comment(
def _builtins() -> Set[str]:
def _is_builtin(annotation: str) -> bool:
def _convert_annotation(
def _is_type_comment(comment: Optional[cst.Comment]) -> bool:
def _strip_type_comment(comment: Optional[cst.Comment]) -> Optional[cst.Comment]:
class _FailedToApplyAnnotation:
class _ArityError(Exception):
class AnnotationSpreader:
def convert_Assign(
class FunctionTypeInfo:
class ConvertTypeComments(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\convert_union_to_or.py
-----------------------------
>         """
          Given a subscript, check if it's a Union - if so, either flatten the members
          into a nested BitOr (if multiple members) or unwrap the type (if only one member).
class ConvertUnionToOrCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\ensure_import_present.py
-----------------------------
class EnsureImportPresentCommand(MagicArgsCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\fix_pyre_directives.py
-----------------------------
>     """
      Given a source file, we'll move the any strict or unsafe tag to the top of the
      file if it contains one. Also tries to fix typo'd directives.
class FixPyreDirectivesCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\fix_variadic_callable.py
-----------------------------
class FixVariadicCallableCommmand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\noop.py
-----------------------------
class NOOPCommand(CodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\remove_pyre_directive.py
-----------------------------
>     """
      Given a source file, we'll remove the any strict tag if the file already
      contains it.
class RemovePyreDirectiveCommand(VisitorBasedCodemodCommand, ABC):
class RemovePyreStrictCommand(RemovePyreDirectiveCommand):
class RemovePyreUnsafeCommand(RemovePyreDirectiveCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\remove_unused_imports.py
-----------------------------
>     """
      Remove all unused imports from a file based on scope analysis.
  
      This command analyses individual files in isolation and does not attempt
class RemoveUnusedImportsCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\rename.py
-----------------------------
>     """
      Rename all instances of a local or imported object.
def leave_import_decorator(
class RenameCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\rename_typing_generic_aliases.py
-----------------------------
class RenameTypingGenericAliases(MagicArgsCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\strip_strings_from_types.py
-----------------------------
class StripStringsCommand(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\unnecessary_format_string.py
-----------------------------
class UnnecessaryFormatString(VisitorBasedCodemodCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\commands\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\tests\test_codemod.py
-----------------------------
>         code = """
              def foo() -> None:
                  pass
  
class SimpleCodemod(Codemod):
class TestSkipDetection(CodemodTest):
class IncrementCodemod(Codemod):
class TestMultipass(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\tests\test_codemod_cli.py
-----------------------------
>         code = """
          def baz() -> str:
              return "{}: {}".format(*baz)
class TestCodemodCLI(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\tests\test_metadata.py
-----------------------------
>         code = """
              def foo() -> None:
                  pass
  
class TestingCollector(ContextAwareVisitor):
class TestingTransform(ContextAwareTransformer):
class TestMetadata(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\tests\test_runner.py
-----------------------------
>         before = """
              def foo() -> None:
                  pass
  
class TestRunner(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_add_imports.py
-----------------------------
>         """
          Should do nothing.
class TestAddImportsCodemod(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_apply_type_annotations.py
-----------------------------
>                 """
                  bar: int = ...
class TestApplyAnnotationsVisitor(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_gather_comments.py
-----------------------------
>             """
              def foo() -> None:
                  pass
class TestGatherCommentsVisitor(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_gather_exports.py
-----------------------------
>         code = """
              from foo import bar
  
              from typing import List
class TestGatherExportsVisitor(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_gather_global_names.py
-----------------------------
>         code = """
              from a import b
              b()
class TestGatherGlobalNamesVisitor(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_gather_imports.py
-----------------------------
>         code = """
              def foo() -> None:
                  pass
  
class TestGatherImportsVisitor(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_gather_string_annotation_names.py
-----------------------------
>             """
              def foo() -> None:
                  pass
class TestGatherNamesFromStringAnnotationsVisitor(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_gather_unused_imports.py
-----------------------------
>             """
              foo = 1
class TestGatherUnusedImportsVisitor(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\test_remove_imports.py
-----------------------------
>         """
          Should do nothing.
class TestRemoveImportsCodemod(CodemodTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_add_imports.py
-----------------------------
>     """
      Works similarly to GatherImportsVisitor, but only considers imports
      declared before any other statements of the module with the exception
      of docstrings and __strict__ flag.
class _GatherTopImportsBeforeStatements(_GatherImportsMixin):
class AddImportsVisitor(ContextAwareTransformer):
def _skip_first(orig_module: libcst.Module) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_apply_type_annotations.py
-----------------------------
>     """
      Given a series of import statements (both Import and ImportFrom),
      determine all of the names that have been imported into the current
      scope. For example:
def _module_and_target(qualified_name: str) -> Tuple[str, str]:
def _get_unique_qualified_name(
def _get_import_alias_names(
def _get_imported_names(
def _is_non_sentinel(
def _get_string_value(
def _find_generic_base(
class FunctionKey:
class FunctionAnnotation:
class Annotations:
class ImportedSymbol:
class ImportedSymbolCollector(m.MatcherDecoratableVisitor):
class TypeCollector(m.MatcherDecoratableVisitor):
class _TypeCollectorDequalifier(cst.CSTTransformer):
class AnnotationCounts:
class ApplyTypeAnnotationsVisitor(ContextAwareTransformer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_gather_comments.py
-----------------------------
>     """
      Collects all comments matching a certain regex and their line numbers.
      This visitor is useful for capturing special-purpose comments, for example
      ``noqa`` style lint suppression annotations.
class GatherCommentsVisitor(ContextAwareVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_gather_exports.py
-----------------------------
>     """
      Gathers all explicit exports in a module and stores them as attributes on the
      instance. Intended to be instantiated and passed to a :class:`~libcst.Module`
      :meth:`~libcst.CSTNode.visit` method in order to gather up information about
class GatherExportsVisitor(ContextAwareVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_gather_global_names.py
-----------------------------
>     """
      Gathers all globally accessible names defined in a module and stores them as
      attributes on the instance.
      Intended to be instantiated and passed to a :class:`~libcst.Module`
class GatherGlobalNamesVisitor(ContextAwareVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_gather_imports.py
-----------------------------
>     """
      A Mixin class for tracking visited imports.
class _GatherImportsMixin(ContextAwareVisitor):
class GatherImportsVisitor(_GatherImportsMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_gather_string_annotation_names.py
-----------------------------
>     """
      Collects all names from string literals used for typing purposes.
      This includes annotations like ``foo: "SomeType"``, and parameters to
      special functions related to typing (currently only `typing.TypeVar`).
class GatherNamesFromStringAnnotationsVisitor(ContextAwareVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_gather_unused_imports.py
-----------------------------
>     """
      Collects all imports from a module not directly used in the same module.
      Intended to be instantiated and passed to a :class:`libcst.Module`
      :meth:`~libcst.CSTNode.visit` method to process the full module.
class GatherUnusedImportsVisitor(ContextAwareVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_imports.py
-----------------------------
>     """Representation of individual import items for codemods."""
  
      module_name: str
      obj_name: Optional[str] = None
class ImportItem:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\_remove_imports.py
-----------------------------
>     """
      Attempt to remove given imports from a module, dependent on whether there are
      any uses of the imported objects. Given a :class:`~libcst.codemod.CodemodContext`
      and a sequence of tuples specifying a module to remove as a string. Optionally
class RemovedNodeVisitor(ContextAwareVisitor):
class RemoveImportsVisitor(ContextAwareTransformer):
def _merge_whitespace_after(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\visitors\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_cli.py
-----------------------------
> """
  Provides helpers for CLI interaction.
def invoke_formatter(formatter_args: Sequence[str], code: AnyStr) -> AnyStr:
def print_execution_result(result: TransformResult) -> None:
def gather_files(
def diff_code(
def exec_transform_with_prettyprint(
class ExecutionResult:
class ExecutionConfig:
def _execute_transform(  # noqa: C901
class Progress:
def _print_parallel_result(
class ParallelTransformResult:
def _execute_transform_wrap(
def parallel_exec_transform_with_prettyprint(  # noqa: C901

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_codemod.py
-----------------------------
>     """
      Abstract base class that all codemods must subclass from. Classes wishing
      to perform arbitrary, non-visitor-based mutations on a tree should subclass
      from this class directly. Classes wishing to perform visitor-based mutation
class Codemod(MetadataDependent, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_command.py
-----------------------------
>     """
      A :class:`~libcst.codemod.Codemod` which can be invoked on the command-line
      using the ``libcst.tool codemod`` utility. It behaves like any other codemod
      in that it can be instantiated and run identically to a
class CodemodCommand(Codemod, ABC):
class VisitorBasedCodemodCommand(ContextAwareTransformer, CodemodCommand, ABC):
class MagicArgsCodemodCommand(CodemodCommand, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_context.py
-----------------------------
>     """
      A context holding all information that is shared amongst all transforms
      and visitors in a single codemod invocation. When chaining multiple
      transforms together, the context holds the state that needs to be passed
class CodemodContext:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_dummy_pool.py
-----------------------------
>     """
      Synchronous dummy `multiprocessing.Pool` analogue.
class DummyPool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_runner.py
-----------------------------
> """
  Provides everything needed to run a CodemodCommand.
class TransformSuccess:
class TransformFailure:
class TransformExit:
class SkipReason(Enum):
class TransformSkip:
class SkipFile(Exception):
def transform_module(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_testing.py
-----------------------------
>     """
      Mixin that can be added to a unit test framework in order to provide
      convenience features. This is provided as an internal-only feature so
      that CodemodTest can be used with other frameworks. This is necessary
class _CodemodTest:
class CodemodTest(_CodemodTest, UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\_visitor.py
-----------------------------
>     """
      A transformer which visits using LibCST. Allows visitor-based mutation of a tree.
      Classes wishing to do arbitrary non-visitor-based mutation on a tree should
      instead subclass from :class:`Codemod` and implement
class ContextAwareTransformer(Codemod, MatcherDecoratableTransformer):
class ContextAwareVisitor(MatcherDecoratableVisitor, MetadataDependent):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\codemod\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\display\tests\test_dump_graphviz.py
-----------------------------
>     """Check dump_graphviz contains CST nodes."""
  
      source_code: str = dedent(
class CSTDumpGraphvizTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\display\tests\test_dump_text.py
-----------------------------
>         module = r"""
              Module(
                body=[
                  FunctionDef(
class CSTDumpTextTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\display\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\display\graphviz.py
-----------------------------
> """Graphviz style for specific CST nodes"""
  
  
  def _create_node_graphviz(node: CSTNode) -> str:
def _create_node_graphviz(node: CSTNode) -> str:
def _node_repr_recursive(
def dump_graphviz(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\display\text.py
-----------------------------
>     """
      Returns a string representation of the node that contains minimal differences
      from the default contruction of the node while also hiding whitespace and
      syntax fields.
def _node_repr_recursive(  # noqa: C901
def dump(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\display\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\tests\test_expression.py
-----------------------------
class ExpressionTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\tests\test_module.py
-----------------------------
class ModuleTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\tests\test_node_fields.py
-----------------------------
>     """Node fields related tests."""
  
      module: Module
      annotation: Annotation
class _NodeFieldsTest(TestCase):
class IsWhitespaceNodeFieldTest(_NodeFieldsTest):
class IsSyntaxNodeFieldTest(_NodeFieldsTest):
class IsDefaultNodeFieldTest(_NodeFieldsTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\tests\test_paths.py
-----------------------------
class PathsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\tests\test_template.py
-----------------------------
>                 """
                  from {module} import {obj}
  
                  def foo() -> {obj}:
class TemplateTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\common.py
-----------------------------
>     """
      Takes any python object, and a LibCST :class:`~libcst.CSTNode` subclass and
      refines the type of the python object. This is most useful when you already
      know that a particular object is a certain type but your type checker is not
def ensure_type(node: object, nodetype: Type[T]) -> T:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\expression.py
-----------------------------
>     """Return a dot concatenated full name for str, :class:`~libcst.Name`, 
:class:`~libcst.Attribute`.
      :class:`~libcst.Call`, :class:`~libcst.Subscript`, :class:`~libcst.FunctionDef`, 
:class:`~libcst.ClassDef`,
      :class:`~libcst.Decorator`.
      Return ``None`` for not supported Node.
def get_full_name_for_node(node: Union[str, cst.CSTNode]) -> Optional[str]:
def get_full_name_for_node_or_raise(node: Union[str, cst.CSTNode]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\module.py
-----------------------------
>     """
      Insert comments after last non-empty line in header. Use this to insert one or more
      comments after any copyright preamble in a :class:`~libcst.Module`. Each comment in
      the list of ``comments`` must start with a ``#`` and will be placed on its own line
def insert_header_comments(node: Module, comments: List[str]) -> Module:
def get_absolute_module(
def get_absolute_module_for_import(
def get_absolute_module_for_import_or_raise(
def get_absolute_module_from_package(
def get_absolute_module_from_package_for_import(
def get_absolute_module_from_package_for_import_or_raise(
class ModuleNameAndPackage:
def calculate_module_and_package(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\node_fields.py
-----------------------------
>     """
      Returns the sequence of a given CST-node's fields.
def get_node_fields(node: CSTNode) -> Sequence[dataclasses.Field[CSTNode]]:
def is_whitespace_node_field(node: CSTNode, field: dataclasses.Field[CSTNode]) -> bool:
def is_syntax_node_field(node: CSTNode, field: dataclasses.Field[CSTNode]) -> bool:
def get_field_default_value(field: dataclasses.Field[CSTNode]) -> object:
def is_default_node_field(node: CSTNode, field: dataclasses.Field[CSTNode]) -> bool:
def filter_node_fields(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\paths.py
-----------------------------
>     """
      Temporarily chdir to the given path, and then return to the previous path.
def chdir(path: StrPath) -> Generator[Path, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\_template.py
-----------------------------
>     """
      Accepts an entire python module template, including all leading and trailing
      whitespace. Any :class:`~libcst.CSTNode` provided as a keyword argument to
      this function will be inserted into the template at the appropriate location
def mangled_name(var: str) -> str:
def unmangled_name(var: str) -> Optional[str]:
def mangle_template(template: str, template_vars: Set[str]) -> str:
class TemplateTransformer(cst.CSTTransformer):
class TemplateChecker(cst.CSTVisitor):
def unmangle_nodes(
def parse_template_module(
def parse_template_statement(
def parse_template_expression(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\helpers\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_decorators.py
-----------------------------
>             """
              a = "foo"
              b = "bar"
  
def fixture(code: str) -> cst.Module:
class MatchersGatingDecoratorsTest(UnitTest):
class MatchersVisitLeaveDecoratorsTest(UnitTest):
class MatchersUnionDecoratorsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_extract.py
-----------------------------
class MatchersExtractTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_findall.py
-----------------------------
>         code = """
              a = 1
              b = True
  
class MatchersFindAllTest(UnitTest):
class MatchersExtractAllTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_matchers.py
-----------------------------
class MatchersMatcherTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_matchers_with_metadata.py
-----------------------------
>             """A dummy metadata provider"""
  
          module = cst.parse_module(
              "from typing import List\n\ndef foo() -> None: pass\n"
class MatchersMetadataTest(UnitTest):
class MatchersVisitorMetadataTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_replace.py
-----------------------------
class MatchersReplaceTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\test_visitors.py
-----------------------------
class MatchersVisitLeaveDecoratorTypingTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\_decorators.py
-----------------------------
>     """
      A decorator for visit and leave methods inside a :class:`MatcherDecoratableTransformer`
      or a :class:`MatcherDecoratableVisitor`. A method that is decorated with this decorator
      will only be called if it or one of its parents matches the supplied matcher.
def call_if_inside(
def call_if_not_inside(
def visit(matcher: BaseMatcherNode) -> Callable[[_CSTVisitFuncT], _CSTVisitFuncT]:
def leave(matcher: BaseMatcherNode) -> Callable[[_CSTVisitFuncT], _CSTVisitFuncT]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\_matcher_base.py
-----------------------------
>     """
      A sentinel that is used in matcher classes to indicate that a caller
      does not care what this value is. We recommend that you do not use this
      directly, and instead use the :func:`DoNotCare` helper. You do not
class DoNotCareSentinel(Enum):
class AbstractBaseMatcherNodeMeta(ABCMeta):
class BaseMatcherNode:
def DoNotCare() -> DoNotCareSentinel:
class TypeOf(Generic[_MatcherTypeT], BaseMatcherNode):
class OneOf(Generic[_MatcherT], BaseMatcherNode):
class AllOf(Generic[_MatcherT], BaseMatcherNode):
class _InverseOf(Generic[_MatcherT]):
class _ExtractMatchingNode(Generic[_MatcherT]):
class MatchIfTrue(Generic[_MatchIfTrueT]):
def MatchRegex(regex: Union[str, Pattern[str]]) -> MatchIfTrue[str]:
class _BaseMetadataMatcher:
class MatchMetadata(_BaseMetadataMatcher):
class MatchMetadataIfTrue(_BaseMetadataMatcher):
class _BaseWildcardNode:
class AtLeastN(Generic[_MatcherT], _BaseWildcardNode):
def ZeroOrMore(
class AtMostN(Generic[_MatcherT], _BaseWildcardNode):
def ZeroOrOne(
def DoesNotMatch(obj: _OtherNodeT) -> _OtherNodeT:
def SaveMatchedNode(matcher: _OtherNodeT, name: str) -> _OtherNodeT:
def _matches_zero_nodes(
class _SequenceMatchesResult:
def _sequence_matches(  # noqa: C901
def _attribute_matches(  # noqa: C901
def _metadata_matches(  # noqa: C901
def _node_matches(  # noqa: C901
def _matches(
def _construct_metadata_fetcher_null() -> (
def _construct_metadata_fetcher_dependent(
def _construct_metadata_fetcher_wrapper(
def extract(
def matches(
class _FindAllVisitor(libcst.CSTVisitor):
def _find_or_extract_all(
def findall(
def extractall(
class _ReplaceTransformer(libcst.CSTTransformer):
def replace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\_return_types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\_visitors.py
-----------------------------
>     """Check if obj.attr is a property without evaluating it."""
      return isinstance(getattr(type(obj), attr_name, None), property)
  
  
def is_property(obj: object, attr_name: str) -> bool:
def _match_decorator_unpickler(kwargs: Any) -> "MatchDecoratorMismatch":
class MatchDecoratorMismatch(Exception):
def _get_possible_match_classes(matcher: BaseMatcherNode) -> List[Type[cst.CSTNode]]:
def _annotation_is_union(annotation: object) -> bool:
def _get_possible_annotated_classes(annotation: object) -> List[Type[object]]:
def _get_valid_leave_annotations_for_classes(
def _verify_return_annotation(
def _verify_parameter_annotations(
def _check_types(
def _gather_matchers(obj: object) -> Dict[BaseMatcherNode, Optional[cst.CSTNode]]:
def _assert_not_concrete(
def _gather_constructed_visit_funcs(
def _gather_constructed_leave_funcs(
def _visit_matchers(
def _leave_matchers(
def _all_positive_matchers_true(
def _all_negative_matchers_false(
def _should_allow_visit(
def _visit_constructed_funcs(
class MatcherDecoratableTransformer(CSTTransformer):
class MatcherDecoratableVisitor(CSTVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\matchers\__init__.py
-----------------------------
>         Literal['"', "'", '"""', "'''"],
          MetadataMatchType,
class _NodeABC(metaclass=AbstractBaseMatcherNodeMeta):
class BaseAssignTargetExpression(_NodeABC):
class BaseAugOp(_NodeABC):
class BaseBinaryOp(_NodeABC):
class BaseBooleanOp(_NodeABC):
class BaseComp(_NodeABC):
class BaseCompOp(_NodeABC):
class BaseCompoundStatement(_NodeABC):
class BaseDelTargetExpression(_NodeABC):
class BaseDict(_NodeABC):
class BaseDictElement(_NodeABC):
class BaseElement(_NodeABC):
class BaseExpression(_NodeABC):
class BaseFormattedStringContent(_NodeABC):
class BaseList(_NodeABC):
class BaseMetadataProvider(_NodeABC):
class BaseNumber(_NodeABC):
class BaseParenthesizableWhitespace(_NodeABC):
class BaseSet(_NodeABC):
class BaseSimpleComp(_NodeABC):
class BaseSlice(_NodeABC):
class BaseSmallStatement(_NodeABC):
class BaseStatement(_NodeABC):
class BaseString(_NodeABC):
class BaseSuite(_NodeABC):
class BaseUnaryOp(_NodeABC):
class Add(BaseBinaryOp, BaseMatcherNode):
class AddAssign(BaseAugOp, BaseMatcherNode):
class And(BaseBooleanOp, BaseMatcherNode):
class AnnAssign(BaseSmallStatement, BaseMatcherNode):
class Annotation(BaseMatcherNode):
class Arg(BaseMatcherNode):
class AsName(BaseMatcherNode):
class Assert(BaseSmallStatement, BaseMatcherNode):
class Assign(BaseSmallStatement, BaseMatcherNode):
class AssignEqual(BaseMatcherNode):
class AssignTarget(BaseMatcherNode):
class Asynchronous(BaseMatcherNode):
class Attribute(
class AugAssign(BaseSmallStatement, BaseMatcherNode):
class Await(BaseExpression, BaseMatcherNode):
class BinaryOperation(BaseExpression, BaseMatcherNode):
class BitAnd(BaseBinaryOp, BaseMatcherNode):
class BitAndAssign(BaseAugOp, BaseMatcherNode):
class BitInvert(BaseUnaryOp, BaseMatcherNode):
class BitOr(BaseBinaryOp, BaseMatcherNode):
class BitOrAssign(BaseAugOp, BaseMatcherNode):
class BitXor(BaseBinaryOp, BaseMatcherNode):
class BitXorAssign(BaseAugOp, BaseMatcherNode):
class BooleanOperation(BaseExpression, BaseMatcherNode):
class Break(BaseSmallStatement, BaseMatcherNode):
class Call(BaseExpression, BaseMatcherNode):
class ClassDef(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class Colon(BaseMatcherNode):
class Comma(BaseMatcherNode):
class Comment(BaseMatcherNode):
class CompFor(BaseMatcherNode):
class CompIf(BaseMatcherNode):
class Comparison(BaseExpression, BaseMatcherNode):
class ComparisonTarget(BaseMatcherNode):
class ConcatenatedString(BaseExpression, BaseString, BaseMatcherNode):
class Continue(BaseSmallStatement, BaseMatcherNode):
class Decorator(BaseMatcherNode):
class Del(BaseSmallStatement, BaseMatcherNode):
class Dict(BaseDict, BaseExpression, BaseMatcherNode):
class DictComp(BaseComp, BaseDict, BaseExpression, BaseMatcherNode):
class DictElement(BaseDictElement, BaseMatcherNode):
class Divide(BaseBinaryOp, BaseMatcherNode):
class DivideAssign(BaseAugOp, BaseMatcherNode):
class Dot(BaseMatcherNode):
class Element(BaseElement, BaseMatcherNode):
class Ellipsis(BaseExpression, BaseMatcherNode):
class Else(BaseMatcherNode):
class EmptyLine(BaseMatcherNode):
class Equal(BaseCompOp, BaseMatcherNode):
class ExceptHandler(BaseMatcherNode):
class ExceptStarHandler(BaseMatcherNode):
class Expr(BaseSmallStatement, BaseMatcherNode):
class Finally(BaseMatcherNode):
class Float(BaseExpression, BaseNumber, BaseMatcherNode):
class FloorDivide(BaseBinaryOp, BaseMatcherNode):
class FloorDivideAssign(BaseAugOp, BaseMatcherNode):
class For(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class FormattedString(BaseExpression, BaseString, BaseMatcherNode):
class FormattedStringExpression(BaseFormattedStringContent, BaseMatcherNode):
class FormattedStringText(BaseFormattedStringContent, BaseMatcherNode):
class From(BaseMatcherNode):
class FunctionDef(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class GeneratorExp(BaseComp, BaseExpression, BaseSimpleComp, BaseMatcherNode):
class Global(BaseSmallStatement, BaseMatcherNode):
class GreaterThan(BaseCompOp, BaseMatcherNode):
class GreaterThanEqual(BaseCompOp, BaseMatcherNode):
class If(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class IfExp(BaseExpression, BaseMatcherNode):
class Imaginary(BaseExpression, BaseNumber, BaseMatcherNode):
class Import(BaseSmallStatement, BaseMatcherNode):
class ImportAlias(BaseMatcherNode):
class ImportFrom(BaseSmallStatement, BaseMatcherNode):
class ImportStar(BaseMatcherNode):
class In(BaseCompOp, BaseMatcherNode):
class IndentedBlock(BaseSuite, BaseMatcherNode):
class Index(BaseSlice, BaseMatcherNode):
class Integer(BaseExpression, BaseNumber, BaseMatcherNode):
class Is(BaseCompOp, BaseMatcherNode):
class IsNot(BaseCompOp, BaseMatcherNode):
class Lambda(BaseExpression, BaseMatcherNode):
class LeftCurlyBrace(BaseMatcherNode):
class LeftParen(BaseMatcherNode):
class LeftShift(BaseBinaryOp, BaseMatcherNode):
class LeftShiftAssign(BaseAugOp, BaseMatcherNode):
class LeftSquareBracket(BaseMatcherNode):
class LessThan(BaseCompOp, BaseMatcherNode):
class LessThanEqual(BaseCompOp, BaseMatcherNode):
class List(
class ListComp(BaseComp, BaseExpression, BaseList, BaseSimpleComp, BaseMatcherNode):
class Match(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class MatchAs(BaseMatcherNode):
class MatchCase(BaseMatcherNode):
class MatchClass(BaseMatcherNode):
class MatchKeywordElement(BaseMatcherNode):
class MatchList(BaseMatcherNode):
class MatchMapping(BaseMatcherNode):
class MatchMappingElement(BaseMatcherNode):
class MatchOr(BaseMatcherNode):
class MatchOrElement(BaseMatcherNode):
class MatchPattern(BaseMatcherNode):
class MatchSequence(BaseMatcherNode):
class MatchSequenceElement(BaseMatcherNode):
class MatchSingleton(BaseMatcherNode):
class MatchStar(BaseMatcherNode):
class MatchTuple(BaseMatcherNode):
class MatchValue(BaseMatcherNode):
class MatrixMultiply(BaseBinaryOp, BaseMatcherNode):
class MatrixMultiplyAssign(BaseAugOp, BaseMatcherNode):
class Minus(BaseUnaryOp, BaseMatcherNode):
class Module(BaseMatcherNode):
class Modulo(BaseBinaryOp, BaseMatcherNode):
class ModuloAssign(BaseAugOp, BaseMatcherNode):
class Multiply(BaseBinaryOp, BaseMatcherNode):
class MultiplyAssign(BaseAugOp, BaseMatcherNode):
class Name(
class NameItem(BaseMatcherNode):
class NamedExpr(BaseExpression, BaseMatcherNode):
class Newline(BaseMatcherNode):
class Nonlocal(BaseSmallStatement, BaseMatcherNode):
class Not(BaseUnaryOp, BaseMatcherNode):
class NotEqual(BaseCompOp, BaseMatcherNode):
class NotIn(BaseCompOp, BaseMatcherNode):
class Or(BaseBooleanOp, BaseMatcherNode):
class Param(BaseMatcherNode):
class ParamSlash(BaseMatcherNode):
class ParamSpec(BaseMatcherNode):
class ParamStar(BaseMatcherNode):
class Parameters(BaseMatcherNode):
class ParenthesizedWhitespace(BaseParenthesizableWhitespace, BaseMatcherNode):
class Pass(BaseSmallStatement, BaseMatcherNode):
class Plus(BaseUnaryOp, BaseMatcherNode):
class Power(BaseBinaryOp, BaseMatcherNode):
class PowerAssign(BaseAugOp, BaseMatcherNode):
class Raise(BaseSmallStatement, BaseMatcherNode):
class Return(BaseSmallStatement, BaseMatcherNode):
class RightCurlyBrace(BaseMatcherNode):
class RightParen(BaseMatcherNode):
class RightShift(BaseBinaryOp, BaseMatcherNode):
class RightShiftAssign(BaseAugOp, BaseMatcherNode):
class RightSquareBracket(BaseMatcherNode):
class Semicolon(BaseMatcherNode):
class Set(BaseExpression, BaseSet, BaseMatcherNode):
class SetComp(BaseComp, BaseExpression, BaseSet, BaseSimpleComp, BaseMatcherNode):
class SimpleStatementLine(BaseStatement, BaseMatcherNode):
class SimpleStatementSuite(BaseSuite, BaseMatcherNode):
class SimpleString(BaseExpression, BaseString, BaseMatcherNode):
class SimpleWhitespace(BaseParenthesizableWhitespace, BaseMatcherNode):
class Slice(BaseSlice, BaseMatcherNode):
class StarredDictElement(BaseDictElement, BaseMatcherNode):
class StarredElement(BaseElement, BaseExpression, BaseMatcherNode):
class Subscript(
class SubscriptElement(BaseMatcherNode):
class Subtract(BaseBinaryOp, BaseMatcherNode):
class SubtractAssign(BaseAugOp, BaseMatcherNode):
class TrailingWhitespace(BaseMatcherNode):
class Try(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class TryStar(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class Tuple(
class TypeAlias(BaseSmallStatement, BaseMatcherNode):
class TypeParam(BaseMatcherNode):
class TypeParameters(BaseMatcherNode):
class TypeVar(BaseMatcherNode):
class TypeVarTuple(BaseMatcherNode):
class UnaryOperation(BaseExpression, BaseMatcherNode):
class While(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class With(BaseCompoundStatement, BaseStatement, BaseMatcherNode):
class WithItem(BaseMatcherNode):
class Yield(BaseExpression, BaseMatcherNode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_accessor_provider.py
-----------------------------
>                 """
                  foo = 'toplevel'
                  fn1(foo)
                  fn2(foo)
class DependentVisitor(cst.CSTVisitor):
class AccessorProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_base_provider.py
-----------------------------
>             """
              Sets metadata on every node to 1.
class BaseMetadataProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_expression_context_provider.py
-----------------------------
>         code = """
          class Foo(Bar):
              x = y
class DependentVisitor(CSTVisitor):
class ExpressionContextProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_file_path_provider.py
-----------------------------
class FilePathProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_full_repo_manager.py
-----------------------------
class FullRepoManagerTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_metadata_provider.py
-----------------------------
>         """
          Tests that visitor providers are resolved correctly.
  
          Sets 2 metadata entries for every node:
class MetadataProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_metadata_wrapper.py
-----------------------------
>         """
          Tests that resolving the same provider twice is a no-op
class MetadataWrapperTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_name_provider.py
-----------------------------
>             """
              from a.b import c as d
              d
class QNameVisitor(cst.CSTVisitor):
def get_qualified_name_metadata_provider(
def get_qualified_names(module_str: str) -> Set[QualifiedName]:
def get_fully_qualified_names(file_path: str, module_str: str) -> Set[QualifiedName]:
class QualifiedNameProviderTest(UnitTest):
class FullyQualifiedNameProviderTest(UnitTest):
class FullyQualifiedNameIntegrationTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_parent_node_provider.py
-----------------------------
>                 """
                  foo = 'toplevel'
                  fn1(foo)
                  fn2(foo)
class DependentVisitor(cst.CSTVisitor):
class ParentNodeProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_position_provider.py
-----------------------------
>         """
          Sets 2 metadata entries for every node:
              SimpleProvider -> 1
              DependentProvider - > 2
def position(
class PositionProviderTest(UnitTest):
class PositionProvidingCodegenStateTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_reentrant_codegen.py
-----------------------------
>                     """\
                      import math
                      c = math.sqrt(a*a + b*b)
class ExperimentalReentrantCodegenProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_scope_provider.py
-----------------------------
>             """
              pass
class DependentVisitor(cst.CSTVisitor):
def get_scope_metadata_provider(
class ScopeProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_span_provider.py
-----------------------------
class SpanProvidingCodegenStateTest(UnitTest):
class ByteSpanPositionProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\test_type_inference_provider.py
-----------------------------
def _test_simple_class_helper(test: UnitTest, wrapper: MetadataWrapper) -> None:
class TypeInferenceProviderTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\accessor_provider.py
-----------------------------
class AccessorProvider(VisitorMetadataProvider[str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\base_provider.py
-----------------------------
>     """
      The low-level base class for all metadata providers. This class should be
      extended for metadata providers that are not visitor-based.
  
class GenCacheMethod(Protocol):
class BaseMetadataProvider(MetadataDependent, Generic[_ProvidedMetadataT]):
class VisitorMetadataProvider(CSTVisitor, BaseMetadataProvider[_ProvidedMetadataT]):
class BatchableMetadataProvider(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\expression_context_provider.py
-----------------------------
>     """Used in :class:`ExpressionContextProvider` to represent context of a variable
class ExpressionContext(Enum):
class ExpressionContextVisitor(cst.CSTVisitor):
class ExpressionContextProvider(BatchableMetadataProvider[ExpressionContext]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\file_path_provider.py
-----------------------------
>     """
      Provides the path to the current file on disk as metadata for the root
      :class:`~libcst.Module` node. Requires a :class:`~libcst.metadata.FullRepoManager`.
      The returned path will always be resolved to an absolute path using
class FilePathProvider(BatchableMetadataProvider[Path]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\full_repo_manager.py
-----------------------------
>         """
          Given project root directory with pyre and watchman setup, 
:class:`~libcst.metadata.FullRepoManager`
          handles the inter process communication to read the required full repository cache 
data for
          metadata provider like :class:`~libcst.metadata.TypeInferenceProvider`.
class FullRepoManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\name_provider.py
-----------------------------
>     """
      Compute possible qualified names of a variable CSTNode
      (extends `PEP-3155 <https://www.python.org/dev/peps/pep-3155/>`_).
      It uses the
class QualifiedNameProvider(BatchableMetadataProvider[Collection[QualifiedName]]):
class QualifiedNameVisitor(cst.CSTVisitor):
class FullyQualifiedNameProvider(BatchableMetadataProvider[Collection[QualifiedName]]):
class FullyQualifiedNameVisitor(cst.CSTVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\parent_node_provider.py
-----------------------------
class ParentNodeVisitor(cst.CSTVisitor):
class ParentNodeProvider(BatchableMetadataProvider[cst.CSTNode]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\position_provider.py
-----------------------------
>         """
          Computes new line and column numbers from adding the token [value].
class WhitespaceInclusivePositionProvidingCodegenState(CodegenState):
class WhitespaceInclusivePositionProvider(BaseMetadataProvider[CodeRange]):
class PositionProvidingCodegenState(WhitespaceInclusivePositionProvidingCodegenState):
class PositionProvider(BaseMetadataProvider[CodeRange]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\reentrant_codegen.py
-----------------------------
>     """
      Provided by :class:`ExperimentalReentrantCodegenProvider`.
  
      Stores enough information to generate either a small patch
class CodegenPartial:
class _ReentrantCodegenState(CodegenState):
class ExperimentalReentrantCodegenProvider(BaseMetadataProvider[CodegenPartial]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\scope_provider.py
-----------------------------
>     """
      An Access records an access of an assignment.
  
      .. note::
class Access:
class QualifiedNameSource(Enum):
class QualifiedName:
class BaseAssignment(abc.ABC):
class Assignment(BaseAssignment):
class BuiltinAssignment(BaseAssignment):
class ImportAssignment(Assignment):
class Assignments:
class Accesses:
class Scope(abc.ABC):
class BuiltinScope(Scope):
class GlobalScope(Scope):
class LocalScope(Scope, abc.ABC):
class FunctionScope(LocalScope):
class ClassScope(LocalScope):
class ComprehensionScope(LocalScope):
class AnnotationScope(LocalScope):
def _gen_dotted_names(
def _is_assignment(node: cst.CSTNode, assignment_node: cst.CSTNode) -> bool:
class DeferredAccess:
class ScopeVisitor(cst.CSTVisitor):
class ScopeProvider(BatchableMetadataProvider[Optional[Scope]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\span_provider.py
-----------------------------
>     """
      Represents the position of a piece of code by its starting position and length.
  
      Note: This class does not specify the unit of distance - it can be bytes,
class CodeSpan:
class SpanProvidingCodegenState(CodegenState):
def byte_length_in_utf8(value: str) -> int:
class ByteSpanPositionProvider(BaseMetadataProvider[CodeSpan]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\type_inference_provider.py
-----------------------------
>     """
      Access inferred type annotation through `Pyre Query API 
<https://pyre-check.org/docs/querying-pyre.html>`_.
      It requires `setup watchman <https://pyre-check.org/docs/getting-started/>`_
      and start pyre server by running ``pyre`` command.
class Position(TypedDict):
class Location(TypedDict):
class InferredType(TypedDict):
class PyreData(TypedDict, total=False):
class TypeInferenceProvider(BatchableMetadataProvider[str]):
def run_command(
class RawPyreData(TypedDict):
def _process_pyre_data(data: RawPyreData) -> PyreData:
def _sort_by_position(data: InferredType) -> Tuple[int, int, int, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\wrapper.py
-----------------------------
>     """
      Returns map of metadata mappings from resolving ``providers`` on ``wrapper``.
def _gen_batchable(
def _gather_providers(
def _resolve_impl(
class MetadataWrapper:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\metadata\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\testing\utils.py
-----------------------------
def none_throws(value: Optional[T], message: str = "Unexpected None value") -> T:
def update_test_limit(test_method: Any, test_limit: int) -> None:
def try_get_provider_attr(
def populate_data_provider_tests(dct: Dict[str, Any]) -> None:
def validate_provider_tests(dct: Dict[str, Any]) -> None:
def data_provider(
class BaseTestMeta(type):
class UnitTest(TestCase, metaclass=BaseTestMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\testing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\pyre\simple_class.py
-----------------------------
class Item:
class ItemCollector:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_add_slots.py
-----------------------------
class A:
class AddSlotsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_batched_visitor.py
-----------------------------
class BatchedVisitorTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_deep_clone.py
-----------------------------
>                 """
                  foo = 'toplevel'
                  fn1(foo)
                  fn2(foo)
class DeepCloneTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_deep_replace.py
-----------------------------
>         old_code = """
              pass
class DeepReplaceTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_e2e.py
-----------------------------
>             example.write_text("""print("Hello")""")
              # File that should not be modified
              other = tmp / "other.py"
              other.touch()
class PrintToPPrintCommand(VisitorBasedCodemodCommand):
def temp_workspace() -> Generator[Path, None, None]:
class ToolE2ETest(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_exceptions.py
-----------------------------
>                     """
                      Syntax Error @ 1:1.
                      some message
  
class ExceptionsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_fuzz.py
-----------------------------
> """
  Fuzz-tests for libCST, by Zac Hatfield-Dodds (zac@hypothesis.works)
  
  For Hypothesis documentation, see https://hypothesis.readthedocs.io/
class FuzzTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_pyre_integration.py
-----------------------------
class TypeVerificationVisitor(cst.CSTVisitor):
class PyreIntegrationTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_roundtrip.py
-----------------------------
class NOOPTransformer(CSTTransformer):
class RoundTripTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_tabs.py
-----------------------------
class ExpandTabsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_type_enforce.py
-----------------------------
class MyExampleClass:
class MyExampleChildClass(MyExampleClass):
class WeirdSubclassOfList(List[int]):
class MyExampleMetaclass(type):
class MyExampleClassWithMetaclass(metaclass=MyExampleMetaclass):
class NamedTupleSubclass(NamedTuple):
class TypeEnforcementTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\test_visitor.py
-----------------------------
class VisitorTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tests\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\base.py
-----------------------------
>     """
      For use with addTypeEqualityFunc.
class _CSTCodegenPatchTarget:
class _NOOPVisitor(CSTTransformer):
def _cst_node_equality_func(
def parse_expression_as(**config: Any) -> Callable[[str], cst.BaseExpression]:
def parse_statement_as(**config: Any) -> Callable[[str], cst.BaseStatement]:
class CSTNodeTest(UnitTest):
class DummyIndentedBlock(cst.CSTNode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_assert.py
-----------------------------
class AssertConstructionTest(CSTNodeTest):
def _assert_parser(code: str) -> cst.Assert:
class AssertParsingTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_assign.py
-----------------------------
class AssignTest(CSTNodeTest):
class AnnAssignTest(CSTNodeTest):
class AugAssignTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_atom.py
-----------------------------
>                 "node": cst.SimpleString('"""test"""'),
def _parse_expression_force_38(code: str) -> cst.BaseExpression:
class AtomTest(CSTNodeTest):
class StringHelperTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_attribute.py
-----------------------------
class AttributeTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_await.py
-----------------------------
class AwaitTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_binary_op.py
-----------------------------
class BinaryOperationTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_boolean_op.py
-----------------------------
class BooleanOperationTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_call.py
-----------------------------
class CallTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_classdef.py
-----------------------------
class ClassDefCreationTest(CSTNodeTest):
class ClassDefParserTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_comment.py
-----------------------------
class CommentTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_comparison.py
-----------------------------
class ComparisonTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_cst_node.py
-----------------------------
>                 """
                  SimpleStatementLine(
                      body=[
                          Pass(
class _TestVisitor(CSTTransformer):
class CSTNodeTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_del.py
-----------------------------
class DelTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_dict.py
-----------------------------
class DictTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_dict_comp.py
-----------------------------
class DictCompTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_docstring.py
-----------------------------
>                 """docstring in triple quotes."""
                  ''',
                  "docstring in triple quotes.",
              ),
class DocstringTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_else.py
-----------------------------
class ElseTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_empty_line.py
-----------------------------
class EmptyLineTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_flatten_behavior.py
-----------------------------
class InsertPrintBeforeReturn(CSTTransformer):
class FlattenLines(CSTTransformer):
class RemoveReturnWithEmpty(CSTTransformer):
class FlattenBehavior(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_for.py
-----------------------------
class ForTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_funcdef.py
-----------------------------
class FunctionDefCreationTest(CSTNodeTest):
def _parse_statement_force_38(code: str) -> cst.BaseCompoundStatement:
class FunctionDefParserTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_global.py
-----------------------------
class GlobalConstructionTest(CSTNodeTest):
class GlobalParsingTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_if.py
-----------------------------
class IfTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_ifexp.py
-----------------------------
class IfExpTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_import.py
-----------------------------
class ImportCreateTest(CSTNodeTest):
class ImportParseTest(CSTNodeTest):
class ImportFromCreateTest(CSTNodeTest):
class ImportFromParseTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_indented_block.py
-----------------------------
class IndentedBlockTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_lambda.py
-----------------------------
class LambdaCreationTest(CSTNodeTest):
def _parse_expression_force_38(code: str) -> cst.BaseExpression:
class LambdaParserTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_leaf_small_statements.py
-----------------------------
class LeafSmallStatementsTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_list.py
-----------------------------
class ListTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_match.py
-----------------------------
class MatchTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_matrix_multiply.py
-----------------------------
class NamedExprTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_module.py
-----------------------------
class ModuleTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_namedexpr.py
-----------------------------
def _parse_expression_force_38(code: str) -> cst.BaseExpression:
def _parse_statement_force_38(code: str) -> cst.BaseCompoundStatement:
class NamedExprTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_newline.py
-----------------------------
class NewlineTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_nonlocal.py
-----------------------------
class NonlocalConstructionTest(CSTNodeTest):
class NonlocalParsingTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_number.py
-----------------------------
class NumberTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_raise.py
-----------------------------
class RaiseConstructionTest(CSTNodeTest):
class RaiseParsingTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_removal_behavior.py
-----------------------------
class IfStatementRemovalVisitor(CSTTransformer):
class ContinueStatementRemovalVisitor(CSTTransformer):
class SpecificImportRemovalVisitor(CSTTransformer):
class RemovalBehavior(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_return.py
-----------------------------
class ReturnCreateTest(CSTNodeTest):
class ReturnParseTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_set.py
-----------------------------
class ListTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_simple_comp.py
-----------------------------
class SimpleCompTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_simple_statement.py
-----------------------------
class SimpleStatementTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_simple_string.py
-----------------------------
>             ('"""c"""', '"""'),
              ("'''d'''", "'''"),
class TestSimpleString(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_simple_whitespace.py
-----------------------------
class SimpleWhitespaceTest(CSTNodeTest):
class ParenthesizedWhitespaceTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_small_statement.py
-----------------------------
class SmallStatementTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_subscript.py
-----------------------------
class SubscriptTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_trailing_whitespace.py
-----------------------------
class TrailingWhitespaceTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_try.py
-----------------------------
class TryTest(CSTNodeTest):
class TryStarTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_tuple.py
-----------------------------
class TupleTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_type_alias.py
-----------------------------
class TypeAliasCreationTest(CSTNodeTest):
class TypeAliasParserTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_unary_op.py
-----------------------------
class UnaryOperationTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_while.py
-----------------------------
class WhileTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_with.py
-----------------------------
class WithTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\test_yield.py
-----------------------------
class YieldConstructionTest(CSTNodeTest):
class YieldParsingTest(CSTNodeTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\base.py
-----------------------------
>         """
          HACK: Add our implementation of `__repr__`, `__hash__`, and `__eq__` to the
          class's __dict__ to prevent dataclass from generating it's own `__repr__`,
          `__hash__`, and `__eq__`.
class CSTValidationError(SyntaxError):
class CSTCodegenError(SyntaxError):
class _ChildrenCollectionVisitor(CSTVisitor):
class _ChildReplacementTransformer(CSTTransformer):
class _ChildWithChangesTransformer(CSTTransformer):
class _NOOPVisitor(CSTTransformer):
def _pretty_repr(value: object) -> str:
def _pretty_repr_sequence(seq: Sequence[object]) -> str:
def _indent(value: str) -> str:
def _clone(val: object) -> object:
class CSTNode(ABC):
class BaseLeaf(CSTNode, ABC):
class BaseValueToken(BaseLeaf, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\deep_equals.py
-----------------------------
> """
  Provides the implementation of `CSTNode.deep_equals`.
def deep_equals(a: object, b: object) -> bool:
def _deep_equals_sequence(a: Sequence[object], b: Sequence[object]) -> bool:
def _deep_equals_cst_node(a: "CSTNode", b: "CSTNode") -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\expression.py
-----------------------------
>     """
      Used by various nodes to denote a subscript or list section. This doesn't own
      the whitespace to the left of it since this is owned by the parent node.
class LeftSquareBracket(CSTNode):
class RightSquareBracket(CSTNode):
class LeftCurlyBrace(CSTNode):
class RightCurlyBrace(CSTNode):
class LeftParen(CSTNode):
class RightParen(CSTNode):
class Asynchronous(CSTNode):
class _BaseParenthesizedNode(CSTNode, ABC):
class ExpressionPosition(Enum):
class BaseExpression(_BaseParenthesizedNode, ABC):
class BaseAssignTargetExpression(BaseExpression, ABC):
class BaseDelTargetExpression(BaseExpression, ABC):
class Name(BaseAssignTargetExpression, BaseDelTargetExpression):
class Ellipsis(BaseExpression):
class BaseNumber(BaseExpression, ABC):
class Integer(BaseNumber):
class Float(BaseNumber):
class Imaginary(BaseNumber):
class BaseString(BaseExpression, ABC):
class _BasePrefixedString(BaseString, ABC):
class SimpleString(_BasePrefixedString):
class BaseFormattedStringContent(CSTNode, ABC):
class FormattedStringText(BaseFormattedStringContent):
class FormattedStringExpression(BaseFormattedStringContent):
class FormattedString(_BasePrefixedString):
class ConcatenatedString(BaseString):
class ComparisonTarget(CSTNode):
class Comparison(BaseExpression):
class UnaryOperation(BaseExpression):
class BinaryOperation(BaseExpression):
class BooleanOperation(BaseExpression):
class Attribute(BaseAssignTargetExpression, BaseDelTargetExpression):
class BaseSlice(CSTNode, ABC):
class Index(BaseSlice):
class Slice(BaseSlice):
class SubscriptElement(CSTNode):
class Subscript(BaseAssignTargetExpression, BaseDelTargetExpression):
class Annotation(CSTNode):
class ParamStar(CSTNode):
class ParamSlash(CSTNode):
class Param(CSTNode):
class Parameters(CSTNode):
class Lambda(BaseExpression):
class Arg(CSTNode):
class _BaseExpressionWithArgs(BaseExpression, ABC):
class Call(_BaseExpressionWithArgs):
class Await(BaseExpression):
class IfExp(BaseExpression):
class From(CSTNode):
class Yield(BaseExpression):
class _BaseElementImpl(CSTNode, ABC):
class BaseElement(_BaseElementImpl, ABC):
class BaseDictElement(_BaseElementImpl, ABC):
class Element(BaseElement):
class DictElement(BaseDictElement):
class StarredElement(BaseElement, BaseExpression, _BaseParenthesizedNode):
class StarredDictElement(BaseDictElement):
class Tuple(BaseAssignTargetExpression, BaseDelTargetExpression):
class BaseList(BaseExpression, ABC):
class List(BaseList, BaseAssignTargetExpression, BaseDelTargetExpression):
class _BaseSetOrDict(BaseExpression, ABC):
class BaseSet(_BaseSetOrDict, ABC):
class Set(BaseSet):
class BaseDict(_BaseSetOrDict, ABC):
class Dict(BaseDict):
class CompFor(CSTNode):
class CompIf(CSTNode):
class BaseComp(BaseExpression, ABC):
class BaseSimpleComp(BaseComp, ABC):
class GeneratorExp(BaseSimpleComp):
class ListComp(BaseList, BaseSimpleComp):
class SetComp(BaseSet, BaseSimpleComp):
class DictComp(BaseDict, BaseComp):
class NamedExpr(BaseExpression):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\internal.py
-----------------------------
>         """
          Called by :meth:`libcst.Module._codegen_impl` at the end of the file to remove
          the last token (a trailing newline), assuming the file isn't empty.
class CodegenState:
def visit_required(
def visit_optional(
def visit_sentinel(
def visit_iterable(
def visit_sequence(
def visit_body_iterable(
def visit_body_sequence(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\module.py
-----------------------------
>     """
      Contains some top-level information inferred from the file letting us set correct
      defaults when printing the tree about global formatting rules. All code parsed
      with :func:`parse_module` will be encapsulated in a module.
class Module(CSTNode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\op.py
-----------------------------
>     """
      Any node that has a static value and needs to own whitespace on both sides.
class _BaseOneTokenOp(CSTNode, ABC):
class _BaseTwoTokenOp(CSTNode, ABC):
class BaseUnaryOp(CSTNode, ABC):
class BaseBooleanOp(_BaseOneTokenOp, ABC):
class BaseBinaryOp(CSTNode, ABC):
class BaseCompOp(CSTNode, ABC):
class BaseAugOp(CSTNode, ABC):
class Semicolon(_BaseOneTokenOp):
class Colon(_BaseOneTokenOp):
class Comma(_BaseOneTokenOp):
class Dot(_BaseOneTokenOp):
class ImportStar(BaseLeaf):
class AssignEqual(_BaseOneTokenOp):
class Plus(BaseUnaryOp):
class Minus(BaseUnaryOp):
class BitInvert(BaseUnaryOp):
class Not(BaseUnaryOp):
class And(BaseBooleanOp):
class Or(BaseBooleanOp):
class Add(BaseBinaryOp, _BaseOneTokenOp):
class Subtract(BaseBinaryOp, _BaseOneTokenOp):
class Multiply(BaseBinaryOp, _BaseOneTokenOp):
class Divide(BaseBinaryOp, _BaseOneTokenOp):
class FloorDivide(BaseBinaryOp, _BaseOneTokenOp):
class Modulo(BaseBinaryOp, _BaseOneTokenOp):
class Power(BaseBinaryOp, _BaseOneTokenOp):
class LeftShift(BaseBinaryOp, _BaseOneTokenOp):
class RightShift(BaseBinaryOp, _BaseOneTokenOp):
class BitOr(BaseBinaryOp, _BaseOneTokenOp):
class BitAnd(BaseBinaryOp, _BaseOneTokenOp):
class BitXor(BaseBinaryOp, _BaseOneTokenOp):
class MatrixMultiply(BaseBinaryOp, _BaseOneTokenOp):
class LessThan(BaseCompOp, _BaseOneTokenOp):
class GreaterThan(BaseCompOp, _BaseOneTokenOp):
class Equal(BaseCompOp, _BaseOneTokenOp):
class LessThanEqual(BaseCompOp, _BaseOneTokenOp):
class GreaterThanEqual(BaseCompOp, _BaseOneTokenOp):
class NotEqual(BaseCompOp, _BaseOneTokenOp):
class In(BaseCompOp, _BaseOneTokenOp):
class NotIn(BaseCompOp, _BaseTwoTokenOp):
class Is(BaseCompOp, _BaseOneTokenOp):
class IsNot(BaseCompOp, _BaseTwoTokenOp):
class AddAssign(BaseAugOp, _BaseOneTokenOp):
class SubtractAssign(BaseAugOp, _BaseOneTokenOp):
class MultiplyAssign(BaseAugOp, _BaseOneTokenOp):
class MatrixMultiplyAssign(BaseAugOp, _BaseOneTokenOp):
class DivideAssign(BaseAugOp, _BaseOneTokenOp):
class ModuloAssign(BaseAugOp, _BaseOneTokenOp):
class BitAndAssign(BaseAugOp, _BaseOneTokenOp):
class BitOrAssign(BaseAugOp, _BaseOneTokenOp):
class BitXorAssign(BaseAugOp, _BaseOneTokenOp):
class LeftShiftAssign(BaseAugOp, _BaseOneTokenOp):
class RightShiftAssign(BaseAugOp, _BaseOneTokenOp):
class PowerAssign(BaseAugOp, _BaseOneTokenOp):
class FloorDivideAssign(BaseAugOp, _BaseOneTokenOp):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\statement.py
-----------------------------
>     """
      A dummy base-class for both :class:`SimpleStatementSuite` and :class:`IndentedBlock`.
      This exists to simplify type definitions and isinstance checks.
  
class BaseSuite(CSTNode, ABC):
class BaseStatement(CSTNode, ABC):
class BaseSmallStatement(CSTNode, ABC):
class Del(BaseSmallStatement):
class Pass(BaseSmallStatement):
class Break(BaseSmallStatement):
class Continue(BaseSmallStatement):
class Return(BaseSmallStatement):
class Expr(BaseSmallStatement):
class _BaseSimpleStatement(CSTNode, ABC):
class SimpleStatementLine(_BaseSimpleStatement, BaseStatement):
class SimpleStatementSuite(_BaseSimpleStatement, BaseSuite):
class Else(CSTNode):
class BaseCompoundStatement(BaseStatement, ABC):
class If(BaseCompoundStatement):
class IndentedBlock(BaseSuite):
class AsName(CSTNode):
class ExceptHandler(CSTNode):
class ExceptStarHandler(CSTNode):
class Finally(CSTNode):
class Try(BaseCompoundStatement):
class TryStar(BaseCompoundStatement):
class ImportAlias(CSTNode):
class Import(BaseSmallStatement):
class ImportFrom(BaseSmallStatement):
class AssignTarget(CSTNode):
class Assign(BaseSmallStatement):
class AnnAssign(BaseSmallStatement):
class AugAssign(BaseSmallStatement):
class Decorator(CSTNode):
def get_docstring_impl(
class FunctionDef(BaseCompoundStatement):
class ClassDef(BaseCompoundStatement):
class WithItem(CSTNode):
class With(BaseCompoundStatement):
class For(BaseCompoundStatement):
class While(BaseCompoundStatement):
class Raise(BaseSmallStatement):
class Assert(BaseSmallStatement):
class NameItem(CSTNode):
class Global(BaseSmallStatement):
class Nonlocal(BaseSmallStatement):
class MatchPattern(_BaseParenthesizedNode, ABC):
class Match(BaseCompoundStatement):
class MatchCase(CSTNode):
class MatchValue(MatchPattern):
class MatchSingleton(MatchPattern):
class MatchSequenceElement(CSTNode):
class MatchStar(CSTNode):
class MatchSequence(MatchPattern, ABC):
class MatchList(MatchSequence):
class MatchTuple(MatchSequence):
class MatchMappingElement(CSTNode):
class MatchMapping(MatchPattern):
class MatchKeywordElement(CSTNode):
class MatchClass(MatchPattern):
class MatchAs(MatchPattern):
class MatchOrElement(CSTNode):
class MatchOr(MatchPattern):
class TypeVar(CSTNode):
class TypeVarTuple(CSTNode):
class ParamSpec(CSTNode):
class TypeParam(CSTNode):
class TypeParameters(CSTNode):
class TypeAlias(BaseSmallStatement):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\whitespace.py
-----------------------------
>     """
      This is the kind of whitespace you might see inside the body of a statement or
      expression between two tokens. This is the most common type of whitespace.
  
class BaseParenthesizableWhitespace(CSTNode, ABC):
class SimpleWhitespace(BaseParenthesizableWhitespace, BaseValueToken):
class Newline(BaseLeaf):
class Comment(BaseValueToken):
class TrailingWhitespace(CSTNode):
class EmptyLine(CSTNode):
class ParenthesizedWhitespace(BaseParenthesizableWhitespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_nodes\__init__.py
-----------------------------
> """
  This package contains CSTNode and all of the subclasses needed to express Python's full
  grammar in a whitespace-sensitive fashion, forming a "Concrete" Syntax Tree (CST).

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\conversions\expression.py
-----------------------------
def convert_expression_input(
def convert_namedexpr_test(
def convert_test(
def convert_test_nocond(
def convert_lambda(
def convert_boolop(
def convert_not_test(
def convert_comparison(
def convert_comp_op(
def convert_star_expr(
def convert_binop(
def convert_factor(
def convert_power(
def convert_atom_expr(
def convert_atom_expr_await(
def convert_atom_expr_trailer(
def convert_trailer(
def convert_trailer_arglist(
def convert_trailer_subscriptlist(
def convert_subscriptlist(
def convert_subscript(
def convert_sliceop(
def convert_trailer_attribute(
def convert_atom(
def convert_atom_basic(
def convert_atom_squarebrackets(
def convert_atom_curlybraces(
def convert_atom_parens(
def convert_atom_ellipses(
def convert_atom_string(
def convert_fstring(
def convert_fstring_content(
def convert_fstring_conversion(
def convert_fstring_equality(
def convert_fstring_expr(
def convert_fstring_format_spec(
def convert_testlist_comp_tuple(
def convert_testlist_comp_list(
def _convert_testlist_comp(
def convert_test_or_expr_list(
def _convert_sequencelike(
def convert_dictorsetmaker(
def _convert_dict_element(
def _convert_dict(
def _convert_dict_comp(config, children: typing.Sequence[typing.Any]) -> typing.Any:
def _convert_set(
def convert_arglist(
def convert_argument(
def convert_arg_assign_comp_for(
def convert_star_arg(
def convert_sync_comp_for(
def convert_comp_for(
def convert_comp_if(
def convert_yield_expr(
def convert_yield_arg(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\conversions\module.py
-----------------------------
def convert_file_input(config: ParserConfig, children: Sequence[Any]) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\conversions\params.py
-----------------------------
>     """(
        (tfpdef_assign (',' tfpdef_assign)* ',' tfpdef_posind [',' [ tfpdef_assign (
              ',' tfpdef_assign)* [',' [
              tfpdef_star (',' tfpdef_assign)* [',' [tfpdef_starstar [',']]]
def convert_argslist(  # noqa: C901
def convert_fpdef_star(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_fpdef_starstar(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_fpdef_assign(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_fpdef(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_fpdef_slash(config: ParserConfig, children: Sequence[Any]) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\conversions\statement.py
-----------------------------
>     """
      This function is similar to convert_simple_stmt_suite, but yields a different type
def convert_stmt_input(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_simple_stmt_partial(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_simple_stmt_line(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_simple_stmt_suite(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_small_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_expr_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_annassign(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_augassign(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_assign(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_pass_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_del_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_continue_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_break_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_return_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_import_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_import_name(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_import_relative(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_import_from(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_import_as_name(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_dotted_as_name(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_import_as_names(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_dotted_as_names(config: ParserConfig, children: Sequence[Any]) -> Any:
def _gather_import_names(
def convert_dotted_name(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_raise_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def _construct_nameitems(config: ParserConfig, names: Sequence[Any]) -> List[NameItem]:
def convert_global_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_nonlocal_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_assert_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_compound_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_if_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_if_stmt_elif(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_if_stmt_else(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_while_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_for_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_try_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_except_clause(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_with_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_with_item(config: ParserConfig, children: Sequence[Any]) -> Any:
def _extract_async(
def convert_asyncable_funcdef(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_funcdef(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_parameters(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_funcdef_annotation(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_classdef(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_decorator(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_decorators(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_decorated(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_asyncable_stmt(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_suite(config: ParserConfig, children: Sequence[Any]) -> Any:
def convert_indented_suite(config: ParserConfig, children: Sequence[Any]) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\conversions\terminals.py
-----------------------------
def convert_NAME(config: ParserConfig, token: Token) -> Any:
def convert_NUMBER(config: ParserConfig, token: Token) -> Any:
def convert_STRING(config: ParserConfig, token: Token) -> Any:
def convert_OP(config: ParserConfig, token: Token) -> Any:
def convert_NEWLINE(config: ParserConfig, token: Token) -> Any:
def convert_INDENT(config: ParserConfig, token: Token) -> Any:
def convert_DEDENT(config: ParserConfig, token: Token) -> Any:
def convert_ENDMARKER(config: ParserConfig, token: Token) -> Any:
def convert_FSTRING_START(config: ParserConfig, token: Token) -> Any:
def convert_FSTRING_END(config: ParserConfig, token: Token) -> Any:
def convert_FSTRING_STRING(config: ParserConfig, token: Token) -> Any:
def convert_ASYNC(config: ParserConfig, token: Token) -> Any:
def convert_AWAIT(config: ParserConfig, token: Token) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\conversions\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\pgen2\generator.py
-----------------------------
> """
  This module defines the data structures used to represent a grammar.
  
  Specifying grammars in pgen is possible with this grammar::
class DFAPlan:
class DFAState(Generic[_TokenTypeT]):
class ReservedString:
class Grammar(Generic[_TokenTypeT]):
def _simplify_dfas(dfas):
def _make_dfas(start, finish):
def generate_grammar(bnf_grammar: str, token_namespace: Any) -> Grammar[Any]:
def _make_transition(token_namespace, reserved_syntax_strings, label):
def _calculate_tree_traversal(nonterminal_to_dfas):
def _calculate_first_plans(nonterminal_to_dfas, first_plans, nonterminal):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\pgen2\grammar_parser.py
-----------------------------
>     """
      The parser for Python grammar files.
class NFAArc:
class NFAState:
class GrammarParser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\pgen2\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\python\py_token.py
-----------------------------
>     """
      Basically an enum, but Python 2 doesn't have enums in the standard library.
class TokenType:
class PythonTokenTypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\python\token.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\python\tokenize.py
-----------------------------
>     # Tail end of """ string.
class TokenCollection:
def group(*choices: str, **kwargs: object) -> str:
def maybe(*choices: str) -> str:
def _all_string_prefixes(
def _compile(expr: str) -> Pattern:
def _get_token_collection(version_info: PythonVersionInfo) -> TokenCollection:
def _create_token_collection(  # noqa: C901
class Token(namedtuple("Token", ["type", "string", "start_pos", "prefix"])):
class PythonToken(Token):
class FStringNode:
def _close_fstring_if_necessary(fstring_stack, string, start_pos, additional_prefix):
def _find_fstring_string(endpats, fstring_stack, line, lnum, pos):
def tokenize(
def tokenize_lines(  # noqa: C901
def _tokenize_lines_py36_or_below(  # noqa: C901
def _tokenize_lines_py37_or_above(  # noqa: C901
def _split_illegal_unicode_name(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\python\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\tests\test_fstring.py
-----------------------------
>                 'f"""\n {\nfoo\n }"""',
                  [(1, 0), (1, 4), (2, 1), (3, 0), (4, 1), (4, 2), (4, 5)],
              ),
          )
class ParsoTokenizeTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\tests\test_tokenize.py
-----------------------------
>         simple_docstring = '"""simple one line docstring"""'
          token_list = _get_token_list(simple_docstring)
          _, value, _, prefix = token_list[0]
          assert prefix == ""
def _get_token_list(string, version=None):
class ParsoTokenizerTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\tests\test_utils.py
-----------------------------
class ParsoUtilsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\utils.py
-----------------------------
>     r"""
      Intended for Python code. In contrast to Python's :py:meth:`str.splitlines`,
      looks at form feeds and other special characters as normal text. Just
      splits ``\n`` and ``\r\n``.
class Version:
def split_lines(string: str, keepends: bool = False) -> Sequence[str]:
def python_bytes_to_unicode(
class PythonVersionInfo:
def _parse_version(version: str) -> PythonVersionInfo:
def parse_version_string(version: Optional[str] = None) -> PythonVersionInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\parso\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_config.py
-----------------------------
class ConfigTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_detect_config.py
-----------------------------
class TestDetectConfig(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_footer_behavior.py
-----------------------------
class FooterBehaviorTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_node_identity.py
-----------------------------
>                 """
                  foo = 'toplevel'
                  fn1(foo)
                  fn2(foo)
class DuplicateLeafNodeTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_parse_errors.py
-----------------------------
>                     """
                      Syntax Error @ 1:1.
                      "'" is not a valid token.
  
class ParseErrorsTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_version_compare.py
-----------------------------
class VersionCompareTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_whitespace_parser.py
-----------------------------
class WhitespaceParserTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\test_wrapped_tokenize.py
-----------------------------
class WrappedTokenizeTest(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\tests\test_config.py
-----------------------------
class TestConfig(UnitTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\config.py
-----------------------------
>     """
      A sentinel value used in PartialParserConfig
class AutoConfig(Enum):
class PartialParserConfig:
def _pick_compatible_python_version(version: Optional[str] = None) -> PythonVersionInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\conversions.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\partials.py
-----------------------------
class WithLeadingWhitespace(Generic[_T]):
class SimpleStatementPartial:
class SlicePartial:
class AttributePartial:
class ArglistPartial:
class CallPartial:
class SubscriptPartial:
class AnnAssignPartial:
class AugAssignPartial:
class AssignPartial:
class ParamStarPartial:
class FuncdefPartial:
class DecoratorPartial:
class ImportPartial:
class ImportRelativePartial:
class FormattedStringConversionPartial:
class FormattedStringFormatSpecPartial:
class ExceptClausePartial:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\production.py
-----------------------------
class Production:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\py_config.py
-----------------------------
>     """
      Represents the subset of ParserConfig that the whitespace parser requires. This
      makes calling the whitespace parser in tests with a mocked configuration easier.
class BaseWhitespaceParserConfig(abc.ABC):
class MockWhitespaceParserConfig(BaseWhitespaceParserConfig):
class ParserConfig(BaseWhitespaceParserConfig):
def parser_config_asdict(config: ParserConfig) -> Mapping[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\py_token.py
-----------------------------
class Token:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\py_whitespace_state.py
-----------------------------
>     """
      A frequently mutated store of the whitespace parser's current state. This object
      must be cloned prior to speculative parsing.
  
class WhitespaceState:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\token.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\whitespace_state.py
-----------------------------
> """
  Defines the state object used by the whitespace parser.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\types\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\base_parser.py
-----------------------------
>     """Parser engine.
  
      A Parser instance contains state pertaining to the current token
      sequence, and should not be used concurrently by different threads
class StackNode(Generic[_TokenTypeT, _NodeT]):
def _token_to_transition(
class BaseParser(Generic[_TokenT, _TokenTypeT, _NodeT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\custom_itertools.py
-----------------------------
def grouper(iterable: Iterable[_T], n: int, fillvalue: _T = None) -> Iterator[_T]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\detect_config.py
-----------------------------
>     """
      Detects the encoding from the presence of a UTF-8 BOM or an encoding cookie as
      specified in PEP 263.
  
class ConfigDetectionResult:
def _detect_encoding(source: Union[str, bytes]) -> str:
def _detect_default_newline(source_str: str) -> str:
def _detect_indent(tokens: Iterable[Token]) -> str:
def _detect_trailing_newline(source_str: str) -> bool:
def _detect_future_imports(tokens: Iterable[Token]) -> FrozenSet[str]:
def convert_to_utf8(
def detect_config(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\entrypoints.py
-----------------------------
> """
  Parser entrypoints define the way users of our API are allowed to interact with the
  parser. A parser entrypoint should take the source code and some configuration
  information
def is_native() -> bool:
def _parse(
def _pure_python_parse(
def parse_module(
def parse_statement(
def parse_expression(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\grammar.py
-----------------------------
>     """
      Returns an BNF-like grammar text that `parso.pgen2.generator.generate_grammar` can
      handle.
  
def get_grammar_str(version: PythonVersionInfo, future_imports: FrozenSet[str]) -> str:
def get_grammar(
def get_terminal_conversions() -> Mapping[str, TerminalConversion]:
def validate_grammar() -> None:
def _get_version_comparison(version: str) -> Tuple[str, PythonVersionInfo]:
def _compare_versions(
def _should_include(
def _should_include_future(
def get_nonterminal_productions(
def get_nonterminal_conversions(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\production_decorator.py
-----------------------------
>     """
      Attaches a bit of grammar to a conversion function. The parser extracts all of these
      production strings, and uses it to form the language's full grammar.
  
def with_production(
def get_productions(fn: NonterminalConversion) -> Sequence[Production]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\python_parser.py
-----------------------------
class PythonCSTParser(BaseParser[Token, TokenType, Any]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\py_whitespace_parser.py
-----------------------------
>     """
      Returns True if indentation was found, otherwise False.
def parse_simple_whitespace(
def parse_empty_lines(
def parse_trailing_whitespace(
def parse_parenthesizable_whitespace(
def _parse_empty_line(
def _parse_indent(
def _parse_comment(
def _parse_newline(
def _parse_trailing_whitespace(
def _parse_parenthesized_whitespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\whitespace_parser.py
-----------------------------
> """
  Parso doesn't attempt to parse (or even emit tokens for) whitespace or comments that
  aren't syntatically important. Instead, we're just given the whitespace as a "prefix" of
  the token.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\wrapped_tokenize.py
-----------------------------
> """
  Parso's tokenize doesn't give us tokens in the format that we'd ideally like, so this
  performs a small number of transformations to the token stream:
  
class _ParenthesisOrFStringStackEntry(Enum):
class _TokenizeState:
def tokenize(code: str, version_info: PythonVersionInfo) -> Iterator[Token]:
def tokenize_lines(
def tokenize_lines_py(
def _convert_token(  # noqa: C901: too complex

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_parser\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\tool.py
-----------------------------
>     """
      Given a base directory and a base module, recursively walk the directory looking
      for importable python modules, returning them and their relative module name
      based off of the base_module.
def _print_tree_impl(proc_name: str, command_args: List[str]) -> int:
def _default_config() -> Dict[str, Any]:
def _find_and_load_config(proc_name: str) -> Dict[str, Any]:
def _codemod_impl(proc_name: str, command_args: List[str]) -> int:  # noqa: C901
class _SerializerBase(ABC):
class _StrSerializer(_SerializerBase):
class _ListSerializer(_SerializerBase):
def _initialize_impl(proc_name: str, command_args: List[str]) -> int:
def _recursive_find(base_dir: str, base_module: str) -> List[Tuple[str, object]]:
def _list_impl(proc_name: str, command_args: List[str]) -> int:  # noqa: C901
def main(proc_name: str, cli_args: List[str]) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_add_slots.py
-----------------------------
def add_slots(cls: Type[_T]) -> Type[_T]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_batched_visitor.py
-----------------------------
>     """
      The low-level base visitor class for traversing a CST as part of a batched
      set of traversals. This should be used in conjunction with the
      :func:`~libcst.visit_batched` function or the
class BatchableCSTVisitor(CSTTypedVisitorFunctions, MetadataDependent):
def visit_batched(
def _get_visitor_methods(
class _BatchedCSTVisitor(CSTVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_exceptions.py
-----------------------------
>     """
      An internal exception that represents a partially-constructed
      :class:`ParserSyntaxError`. It's raised by our internal parser conversion functions,
      which don't always know the current line and column information.
class EOFSentinel(Enum):
def get_expected_str(
def _parser_syntax_error_unpickle(kwargs: Any) -> "ParserSyntaxError":
class PartialParserSyntaxError(Exception):
class ParserSyntaxError(Exception):
class MetadataException(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_flatten_sentinel.py
-----------------------------
>     """
      A :class:`FlattenSentinel` may be returned by a :meth:`CSTTransformer.on_leave`
      method when one wants to replace a node with multiple nodes. The replaced
      node must be contained in a `Sequence` attribute such as
class FlattenSentinel(Sequence[CSTNodeT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_maybe_sentinel.py
-----------------------------
>     """
      A :class:`MaybeSentinel` value is used as the default value for some attributes to
      denote that when generating code (when :attr:`Module.code` is evaluated) we should
      optionally include this element in order to generate valid code.
class MaybeSentinel(Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_metadata_dependent.py
-----------------------------
>     """
      The class for implementing a lazy metadata loading mechanism that improves the
      performance when retriving expensive metadata (e.g., qualified names). Providers
      including :class:`~libcst.metadata.QualifiedNameProvider` use this class to load
class _UNDEFINED_DEFAULT:
class LazyValue(Generic[_T]):
class MetadataDependent(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_position.py
-----------------------------
> """
  Data structures used for storing position information.
  
  These are publicly exported by metadata, but their implementation lives outside of
class CodePosition:
class CodeRange:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_removal_sentinel.py
-----------------------------
> """
  Used by visitors. This is hoisted into a separate module to avoid some circular
  dependencies in the definition of CSTNode.
class RemovalSentinel(Enum):
def RemoveFromParent() -> RemovalSentinel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_tabs.py
-----------------------------
>     """
      Tabs are treated as 1-8 spaces according to
      https://docs.python.org/3/reference/lexical_analysis.html#indentation
  
def expand_tabs(line: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_typed_visitor.py
-----------------------------
class CSTTypedBaseFunctions:
class CSTTypedVisitorFunctions(CSTTypedBaseFunctions):
class CSTTypedTransformerFunctions(CSTTypedBaseFunctions):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_typed_visitor_base.py
-----------------------------
>     """
      Annotates stubs with a field to indicate they should not be collected
      by BatchableCSTVisitor.get_visitors() to reduce function call
      overhead when running a batched visitor pass.
def mark_no_op(f: F) -> F:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_type_enforce.py
-----------------------------
>     """
      This method attempts to verify a given value is of a given type. If the type is
      not supported, it returns True but throws an exception in tests.
  
def is_value_of_type(  # noqa: C901 "too complex"

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\_visitors.py
-----------------------------
>     """
      The low-level base visitor class for traversing a CST and creating an
      updated copy of the original CST. This should be used in conjunction with
      the :func:`~libcst.CSTNode.visit` method on a :class:`~libcst.CSTNode` to
class CSTTransformer(CSTTypedTransformerFunctions, MetadataDependent):
class CSTVisitor(CSTTypedVisitorFunctions, MetadataDependent):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\libcst\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\linkify_it\main.py
-----------------------------
>     """Linkify schema error"""
  
      def __init__(self, name, val):
          message = "(LinkifyIt) Invalid schema '{}': '{}'".format(name, val)
def _escape_re(string):
def _index_of(text, search_value):
class SchemaError(Exception):
class Match:
class LinkifyIt:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\linkify_it\tlds.py
-----------------------------
> """TLDS
  
  Version 2020110600, Last Updated Fri Nov  6 07:07:02 2020 UTC
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\linkify_it\ucre.py
-----------------------------
>     """Build regex
  
      Args:
          opts (dict): options
def _re_host_terminator(opts):
def _re_src_path(opts):
def build_re(opts):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\linkify_it\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_asyncio_loop.py
-----------------------------
def load_loop_functions():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_better_exceptions.py
-----------------------------
class SyntaxHighlighter:
class ExceptionFormatter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_colorama.py
-----------------------------
def should_colorize(stream):
def should_wrap(stream):
def wrap(stream):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_colorizer.py
-----------------------------
class Style:
class Fore:
class Back:
def ansi_escape(codes):
class TokenType:
class AnsiParser:
class ColoringMessage(str):
class ColoredMessage:
class ColoredFormat:
class Colorizer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_contextvars.py
-----------------------------
def load_contextvar_class():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_ctime_functions.py
-----------------------------
def load_ctime_functions():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_datetime.py
-----------------------------
def _builtin_datetime_formatter(is_utc, format_string, dt):
def _loguru_datetime_formatter(is_utc, format_string, formatters, dt):
def _default_datetime_formatter(dt):
def _format_timezone(tzinfo, *, sep):
def _compile_format(spec):
class datetime(datetime_):  # noqa: N801
def aware_now():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_defaults.py
-----------------------------
def env(key, type_, default=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_error_interceptor.py
-----------------------------
class ErrorInterceptor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_file_sink.py
-----------------------------
def generate_rename_path(root, ext, creation_time):
class FileDateFormatter:
class Compression:
class Retention:
class Rotation:
class FileSink:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_filters.py
-----------------------------
def filter_none(record):
def filter_by_name(record, parent, length):
def filter_by_level(record, level_per_module):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_get_frame.py
-----------------------------
def get_frame_fallback(n):
def load_get_frame_function():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_handler.py
-----------------------------
>         """Acquire the lock, but fail fast if its already acquired by the current thread."""
          if getattr(self._lock_acquired, "acquired", False):
              raise RuntimeError(
                  "Could not acquire internal lock because it was already in use (deadlock 
avoided). "
def prepare_colored_format(format_, ansi_level):
def prepare_stripped_format(format_):
def memoize(function):
class Message(str):
class Handler:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_locks_machinery.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_logger.py
-----------------------------
> """Core logging functionalities of the `Loguru` library.
  
  .. References and links rendered by Sphinx are kept here as "module documentation" so that 
they can
     be used in the ``Logger`` docstrings but do not pollute ``help(logger)`` output.
class Core:
class Logger:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_recattrs.py
-----------------------------
class RecordLevel:
class RecordFile:
class RecordThread:
class RecordProcess:
class RecordException(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_simple_sinks.py
-----------------------------
class StreamSink:
class StandardSink:
class AsyncSink:
class CallableSink:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\_string_parsers.py
-----------------------------
class Frequencies:
def parse_size(size):
def parse_duration(duration):
def parse_frequency(frequency):
def parse_day(day):
def parse_time(time):
def parse_daytime(daytime):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\loguru\__init__.py
-----------------------------
> """
  The Loguru library provides a pre-instanced logger to facilitate dealing with logging in 
Python.
  
  Just ``from loguru import logger``.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\autohandler.py
-----------------------------
> """adds autohandler functionality to Mako templates.
  
  requires that the TemplateLookup class is used with templates.
  
def autohandler(template, context, name="autohandler"):
def _file_exists(lookup, path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\babelplugin.py
-----------------------------
> """gettext message extraction via Babel: https://pypi.org/project/Babel/"""
  from babel.messages.extract import extract_python
  
  from mako.ext.extract import MessageExtractor
class BabelMakoExtractor(MessageExtractor):
def extract(fileobj, keywords, comment_tags, options):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\beaker_cache.py
-----------------------------
> """Provide a :class:`.CacheImpl` for the Beaker caching system."""
  
  from mako import exceptions
  from mako.cache import CacheImpl
class BeakerCacheImpl(CacheImpl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\extract.py
-----------------------------
>         """Return the multiline comment at lineno split into a list of
class MessageExtractor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\linguaplugin.py
-----------------------------
>     """Mako templates"""
  
      use_bytes = False
      extensions = [".mako"]
class LinguaMakoExtractor(Extractor, MessageExtractor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\preprocessors.py
-----------------------------
> """preprocessing functions, used with the 'preprocessor'
def convert_comments(text):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\pygmentplugin.py
-----------------------------
>             (r"""(?s)<%doc>.*?</%doc>""", Comment.Preproc),
              (
                  r"(<%)([\w\.\:]+)",
                  bygroups(Comment.Preproc, Name.Builtin),
class MakoLexer(RegexLexer):
class MakoHtmlLexer(DelegatingLexer):
class MakoXmlLexer(DelegatingLexer):
class MakoJavascriptLexer(DelegatingLexer):
class MakoCssLexer(DelegatingLexer):
def syntax_highlight(filename="", language=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\turbogears.py
-----------------------------
>     """TurboGears compatible Template Plugin."""
  
      def __init__(self, extra_vars_func=None, options=None, extension="mak"):
          self.extra_vars_func = extra_vars_func
class TGPlugin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ext\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\assertions.py
-----------------------------
>     """Assert a == b, with repr messaging on failure."""
      assert a == b, msg or "%r != %r" % (a, b)
  
  
def eq_(a, b, msg=None):
def ne_(a, b, msg=None):
def in_(a, b, msg=None):
def not_in(a, b, msg=None):
def _assert_proper_exception_context(exception):
def _assert_proper_cause_cls(exception, cause_cls):
def assert_raises(except_cls, callable_, *args, **kw):
def assert_raises_with_proper_context(except_cls, callable_, *args, **kw):
def assert_raises_with_given_cause(
def assert_raises_message(except_cls, msg, callable_, *args, **kwargs):
def assert_raises_message_with_proper_context(
def assert_raises_message_with_given_cause(
def _assert_raises(
class _ErrorContainer:
def _expect_raises(except_cls, msg=None, check_context=False, cause_cls=None):
def expect_raises(except_cls, check_context=False):
def expect_raises_message(except_cls, msg, check_context=False):
def expect_raises_with_proper_context(except_cls, check_context=True):
def expect_raises_message_with_proper_context(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\config.py
-----------------------------
class Config(ReadsCfg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\exclusions.py
-----------------------------
def _pygments_version():
def requires_no_pygments_exceptions(fn):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\fixtures.py
-----------------------------
>     """Simple memory cache impl so that tests which
class TemplateTest:
class PlainCacheImpl(CacheImpl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\helpers.py
-----------------------------
>             """
  i am an artificial template just for you
def flatten_result(result):
def result_lines(result):
def result_raw_lines(result):
def make_path(
def _unlink_path(path, missing_ok=False):
def replace_file_with_dir(pathspec):
def file_with_template_code(filespec):
def rewind_compile_time(hours=1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\_config.py
-----------------------------
class ConfigError(BaseException):
class MissingConfig(ConfigError):
class MissingConfigSection(ConfigError):
class MissingConfigItem(ConfigError):
class ConfigValueTypeError(ConfigError):
class _GetterDispatch:
def _parse_cfg_file(filespec: Union[Path, str]):
def _build_getter(cfg_obj, cfg_section, method, converter=None):
def _build_getter_dispatch(cfg_obj, cfg_section, converters=None):
class ReadsCfg:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\testing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\ast.py
-----------------------------
> """utilities for analyzing expressions and blocks of Python
class PythonCode:
class ArgumentList:
class PythonFragment(PythonCode):
class FunctionDecl:
class FunctionArgs(FunctionDecl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\cache.py
-----------------------------
>     """Represents a data content cache made available to the module
      space of a specific :class:`.Template` object.
  
      .. versionadded:: 0.6
class Cache:
class CacheImpl:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\cmd.py
-----------------------------
def varsplit(var):
def _exit():
def cmdline(argv=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\codegen.py
-----------------------------
> """provides functionality for rendering a parsetree constructing into module
def compile(  # noqa
class _CompileContext:
class _GenerateRenderMethod:
class _Identifiers:
def mangle_mako_loop(node, printer):
class LoopVariable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\compat.py
-----------------------------
>     """getargspec based on fully vendored getfullargspec from Python 3.3."""
  
      if inspect.ismethod(func):
          func = func.__func__
def inspect_getargspec(func):
def load_module(module_id, path):
def exception_as():
def exception_name(exc):
def importlib_metadata_get(group):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\exceptions.py
-----------------------------
> """exception classes"""
  
  import sys
  import traceback
class MakoException(Exception):
class RuntimeException(MakoException):
def _format_filepos(lineno, pos, filename):
class CompileException(MakoException):
class SyntaxException(MakoException):
class UnsupportedError(MakoException):
class NameConflictError(MakoException):
class TemplateLookupException(MakoException):
class TopLevelLookupException(TemplateLookupException):
class RichTraceback:
def text_error_template(lookup=None):
def _install_pygments():
def _install_fallback():
def _install_highlighting():
def html_error_template():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\filters.py
-----------------------------
>         """Replace characters with their character entity references.
  
          Only characters corresponding to a named entity are replaced.
def xml_escape(string):
def url_escape(string):
def trim(string):
class Decode:
class XMLEntityEscaper:
def htmlentityreplace_errors(ex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\lexer.py
-----------------------------
> """provides the Lexer class for parsing template strings into parse trees."""
  
  import codecs
  import re
class Lexer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\lookup.py
-----------------------------
>     """Represent a collection of :class:`.Template` objects,
      identifiable via URI.
  
      A :class:`.TemplateCollection` is linked to the usage of
class TemplateCollection:
class TemplateLookup(TemplateCollection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\parsetree.py
-----------------------------
> """defines the parse tree components for Mako templates."""
  
  import re
  
class Node:
class TemplateNode(Node):
class ControlLine(Node):
class Text(Node):
class Code(Node):
class Comment(Node):
class Expression(Node):
class _TagMeta(type):
class Tag(Node, metaclass=_TagMeta):
class IncludeTag(Tag):
class NamespaceTag(Tag):
class TextTag(Tag):
class DefTag(Tag):
class BlockTag(Tag):
class CallTag(Tag):
class CallNamespaceTag(Tag):
class InheritTag(Tag):
class PageTag(Tag):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\pygen.py
-----------------------------
> """utilities for generating and formatting literal Python code."""
  
  import re
  
class PythonPrinter:
def adjust_whitespace(text):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\pyparser.py
-----------------------------
> """Handles parsing of Python code.
  
  Parsing to AST is done via _ast on Python > 2.5, otherwise the compiler
  module is used.
def parse(code, mode="exec", **exception_kwargs):
class FindIdentifiers(_ast_util.NodeVisitor):
class FindTuple(_ast_util.NodeVisitor):
class ParseFunc(_ast_util.NodeVisitor):
class ExpressionGenerator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\runtime.py
-----------------------------
> """provides runtime services for templates, including Context,
class Context:
class CallerStack(list):
class Undefined:
class LoopStack:
class LoopContext:
class _NSAttr:
class Namespace:
class TemplateNamespace(Namespace):
class ModuleNamespace(Namespace):
def supports_caller(func):
def capture(context, callable_, *args, **kwargs):
def _decorate_toplevel(fn):
def _decorate_inline(context, fn):
def _include_file(context, uri, calling_uri, **kwargs):
def _inherit_from(context, uri, calling_uri):
def _lookup_template(context, uri, relativeto):
def _populate_self_namespace(context, template, self_ns=None):
def _render(template, callable_, args, data, as_unicode=False):
def _kwargs_for_callable(callable_, data):
def _kwargs_for_include(callable_, data, **kwargs):
def _render_context(tmpl, callable_, context, *args, **kwargs):
def _exec_template(callable_, context, args=None, kwargs=None):
def _render_error(template, context, error):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\template.py
-----------------------------
> """Provides the Template class, a facade for parsing, generating and executing
class Template:
class ModuleTemplate(Template):
class DefTemplate(Template):
class ModuleInfo:
def _compile(template, text, filename, generate_magic_comment):
def _compile_text(template, text, filename):
def _compile_module_file(template, text, filename, outputpath, module_writer):
def _get_module_info_from_callable(callable_):
def _get_module_info(filename):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\util.py
-----------------------------
>     """create and/or verify a filesystem directory."""
  
      tries = 0
  
def update_wrapper(decorated, fn):
class PluginLoader:
def verify_directory(dir_):
def to_list(x, default=None):
class memoized_property:
class memoized_instancemethod:
class SetLikeDict(dict):
class FastEncodingBuffer:
class LRUCache(dict):
def parse_encoding(fp):
def sorted_dict_repr(d):
def restore__ast(_ast):
def foo(): pass
class Bar: pass
def read_file(path, mode="rb"):
def read_python_file(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\_ast_util.py
-----------------------------
> """
      ast
      ~~~
  
def parse(expr, filename="<unknown>", mode="exec"):
def iter_fields(node):
class NodeVisitor:
class NodeTransformer(NodeVisitor):
class SourceGenerator(NodeVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mako\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\cli\parse.py
-----------------------------
> """
  CLI interface to markdown-it-py
  
  Parse one or more markdown files, convert each to HTML, and print to stdout.
def main(args: Sequence[str] | None = None) -> int:
def convert(filenames: Iterable[str]) -> None:
def convert_file(filename: str) -> None:
def interactive() -> None:
def parse_args(args: Sequence[str] | None) -> argparse.Namespace:
def print_heading() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\cli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\common\entities.py
-----------------------------
> """HTML5 entities map: { name -> characters }."""
  
  import html.entities
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\common\html_blocks.py
-----------------------------
> """List of valid html blocks names, according to commonmark spec
  http://jgm.github.io/CommonMark/spec.html#html-blocks

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\common\html_re.py
-----------------------------
> """Regexps to match html elements"""
  
  import re
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\common\normalize_url.py
-----------------------------
>     """Normalize destination URLs in links
  
      ::
  
def normalizeLink(url: str) -> str:
def normalizeLinkText(url: str) -> str:
def validateLink(url: str, validator: Callable[[str], bool] | None = None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\common\utils.py
-----------------------------
> """Utilities for parsing source text"""
  
  from __future__ import annotations
  
def charCodeAt(src: str, pos: int) -> int | None:
def charStrAt(src: str, pos: int) -> str | None:
def arrayReplaceAt(
def isValidEntityCode(c: int) -> bool:
def fromCodePoint(c: int) -> str:
def replaceEntityPattern(match: str, name: str) -> str:
def unescapeAll(string: str) -> str:
def stripEscape(string: str) -> str:
def escapeHtml(raw: str) -> str:
def escapeRE(string: str) -> str:
def isSpace(code: int | None) -> bool:
def isStrSpace(ch: str | None) -> bool:
def isWhiteSpace(code: int) -> bool:
def isPunctChar(ch: str) -> bool:
def isMdAsciiPunct(ch: int) -> bool:
def normalizeReference(string: str) -> str:
def isLinkOpen(string: str) -> bool:
def isLinkClose(string: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\common\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\helpers\parse_link_destination.py
-----------------------------
> """
  Parse link destination
class _Result:
def parseLinkDestination(string: str, pos: int, maximum: int) -> _Result:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\helpers\parse_link_label.py
-----------------------------
> """
  Parse link label
  
  this function assumes that first character ("[") already matches
def parseLinkLabel(state: StateInline, start: int, disableNested: bool = False) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\helpers\parse_link_title.py
-----------------------------
> """Parse link title"""
  
  from ..common.utils import charCodeAt, unescapeAll
  
class _State:
def parseLinkTitle(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\helpers\__init__.py
-----------------------------
> """Functions for parsing Links"""
  
  __all__ = ("parseLinkDestination", "parseLinkLabel", "parseLinkTitle")
  from .parse_link_destination import parseLinkDestination

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\presets\commonmark.py
-----------------------------
> """Commonmark default options.
  
  This differs to presets.default,
  primarily in that it allows HTML and does not enable components:
def make() -> PresetType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\presets\default.py
-----------------------------
> """markdown-it default options."""
  
  from ..utils import PresetType
  
def make() -> PresetType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\presets\zero.py
-----------------------------
> """
  "Zero" preset, with nothing enabled. Useful for manual configuring of simple
  modes. For example, to parse bold/italic only.
def make() -> PresetType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\presets\__init__.py
-----------------------------
>     """GitHub Flavoured Markdown (GFM) like.
  
      This adds the linkify, table and strikethrough components to CommmonMark.
  
class gfm_like:  # noqa: N801

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\blockquote.py
-----------------------------
def blockquote(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\code.py
-----------------------------
> """Code block (4 spaces padded)."""
  
  import logging
  
def code(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\fence.py
-----------------------------
def fence(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\heading.py
-----------------------------
> """Atex heading (#, ##, ...)"""
  
  from __future__ import annotations
  
def heading(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\hr.py
-----------------------------
> """Horizontal rule
  
  At least 3 of these characters on a line * - _
def hr(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\html_block.py
-----------------------------
def html_block(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\lheading.py
-----------------------------
def lheading(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\list.py
-----------------------------
def skipBulletListMarker(state: StateBlock, startLine: int) -> int:
def skipOrderedListMarker(state: StateBlock, startLine: int) -> int:
def markTightParagraphs(state: StateBlock, idx: int) -> None:
def list_block(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\paragraph.py
-----------------------------
> """Paragraph."""
  
  import logging
  
def paragraph(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\reference.py
-----------------------------
def reference(state: StateBlock, startLine: int, _endLine: int, silent: bool) -> bool:
def getNextLine(state: StateBlock, nextLine: int) -> None | str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\state_block.py
-----------------------------
>         """Push new token to "stream"."""
          token = Token(ttype, tag, nesting)
          token.block = True
          if nesting < 0:
class StateBlock(StateBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\table.py
-----------------------------
def getLine(state: StateBlock, line: int) -> str:
def escapedSplit(string: str) -> list[str]:
def table(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_block\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\block.py
-----------------------------
def block(state: StateCore) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\inline.py
-----------------------------
>     """Parse inlines"""
      for token in state.tokens:
          if token.type == "inline":
              if token.children is None:
def inline(state: StateCore) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\linkify.py
-----------------------------
>     """Rule for identifying plain-text links."""
      if not state.md.options.linkify:
          return
  
def linkify(state: StateCore) -> None:
class _LinkType(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\normalize.py
-----------------------------
> """Normalize input string."""
  
  import re
  
def normalize(state: StateCore) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\replacements.py
-----------------------------
> """Simple typographic replacements
  
  * ``(c)``, ``(C)`` â†’ Â©
  * ``(tm)``, ``(TM)`` â†’ â„¢
def replaceFn(match: re.Match[str]) -> str:
def replace_scoped(inlineTokens: list[Token]) -> None:
def replace_rare(inlineTokens: list[Token]) -> None:
def replace(state: StateCore) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\smartquotes.py
-----------------------------
> """Convert straight quotation marks to typographic ones"""
  
  from __future__ import annotations
  
def replaceAt(string: str, index: int, ch: str) -> str:
def process_inlines(tokens: list[Token], state: StateCore) -> None:
def smartquotes(state: StateCore) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\state_core.py
-----------------------------
class StateCore(StateBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\text_join.py
-----------------------------
> """Join raw text tokens with the rest of the text
  
  This is set as a separate rule to provide an opportunity for plugins
  to run text replacements after text join, but before escape join.
def text_join(state: StateCore) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_core\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\autolink.py
-----------------------------
def autolink(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\backticks.py
-----------------------------
def backtick(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\balance_pairs.py
-----------------------------
> """Balance paired characters (*, _, etc) in inline tokens."""
  
  from __future__ import annotations
  
def processDelimiters(state: StateInline, delimiters: list[Delimiter]) -> None:
def link_pairs(state: StateInline) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\emphasis.py
-----------------------------
>     """Insert each marker as a separate text token, and add it to delimiter list"""
      start = state.pos
      marker = state.src[start]
  
def tokenize(state: StateInline, silent: bool) -> bool:
def _postProcess(state: StateInline, delimiters: list[Delimiter]) -> None:
def postProcess(state: StateInline) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\entity.py
-----------------------------
def entity(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\escape.py
-----------------------------
> """
  Process escaped chars and hardbreaks
def escape(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\fragments_join.py
-----------------------------
>     """
      Clean up tokens after emphasis and strikethrough postprocessing:
      merge adjacent text nodes into one and re-calculate all token levels
  
def fragments_join(state: StateInline) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\html_inline.py
-----------------------------
def isLetter(ch: int) -> bool:
def html_inline(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\image.py
-----------------------------
def image(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\link.py
-----------------------------
def link(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\linkify.py
-----------------------------
> """Process links like https://example.org/"""
  
  import re
  
def linkify(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\newline.py
-----------------------------
> """Proceess '\n'."""
  
  from ..common.utils import charStrAt, isStrSpace
  from .state_inline import StateInline
def newline(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\state_inline.py
-----------------------------
>         """Push new token to "stream".
          If pending text exists - flush it as text token
class Delimiter:
class StateInline(StateBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\strikethrough.py
-----------------------------
>     """Insert each marker as a separate text token, and add it to delimiter list"""
      start = state.pos
      ch = state.src[start]
  
def tokenize(state: StateInline, silent: bool) -> bool:
def _postProcess(state: StateInline, delimiters: list[Delimiter]) -> None:
def postProcess(state: StateInline) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\text.py
-----------------------------
def _terminator_char_regex() -> re.Pattern[str]:
def text(state: StateInline, silent: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\rules_inline\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\main.py
-----------------------------
>         """Main parser class
  
          :param config: name of configuration to load or a pre-defined dictionary
          :param options_update: dictionary that will be merged into ``config["options"]``
class MarkdownIt:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\parser_block.py
-----------------------------
> """Block-level tokenizer."""
  
  from __future__ import annotations
  
class ParserBlock:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\parser_core.py
-----------------------------
> """
  * class Core
  *
  * Top-level rules executor. Glues block/inline parsers and does intermediate
class ParserCore:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\parser_inline.py
-----------------------------
> """Tokenizes paragraph content."""
  
  from __future__ import annotations
  
class ParserInline:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\renderer.py
-----------------------------
> """
  class Renderer
  
  Generates HTML from parsed token stream. Each instance has independent
class Renderer
class RendererProtocol(Protocol):
class RendererHTML(RendererProtocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\ruler.py
-----------------------------
> """
  class Ruler
  
  Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
class Ruler
class StateBase:
class RuleOptionsType(TypedDict, total=False):
class Rule(Generic[RuleFuncTv]):
class Ruler(Generic[RuleFuncTv]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\token.py
-----------------------------
>     """Convert Token.attrs set as ``None`` or ``[[key, value], ...]`` to a dict.
  
      This improves compatibility with upstream markdown-it.
def convert_attrs(value: Any) -> Any:
class Token:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\tree.py
-----------------------------
> """A tree representation of a linear markdown-it token stream.
  
  This module is not part of upstream JavaScript markdown-it.
class _NesterTokens(NamedTuple):
class SyntaxTreeNode:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\utils.py
-----------------------------
> """Type for the environment sandbox used in parsing and rendering,
  which stores mutable variables for use by plugins and rules.
class OptionsType(TypedDict):
class PresetType(TypedDict):
class OptionsDict(MutableMappingABC):  # type: ignore
def read_fixture_file(path: str | Path) -> list[list[Any]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\_compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\_punycode.py
-----------------------------
def encode(uni: str) -> str:
def decode(ascii: str) -> str:
def map_domain(string: str, fn: Callable[[str], str]) -> str:
def to_unicode(obj: str) -> str:
def to_ascii(obj: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markdown_it\__init__.py
-----------------------------
> """A Python port of Markdown-It"""
  
  __all__ = ("MarkdownIt",)
  __version__ = "4.0.0"

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markupsafe\_native.py
-----------------------------
def _escape_inner(s: str, /) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\markupsafe\__init__.py
-----------------------------
>     """Replace the characters ``&``, ``<``, ``>``, ``'``, and ``"`` in
      the string with HTML-safe sequences. Use this if you need to display
      text that might contain such characters in HTML.
  
class _HasHTML(t.Protocol):
class _TPEscape(t.Protocol):
def escape(s: t.Any, /) -> Markup:
def escape_silent(s: t.Any | None, /) -> Markup:
def soft_str(s: t.Any, /) -> str:
class Markup(str):
class EscapeFormatter(string.Formatter):
class _MarkupEscapeHelper:
def __getattr__(name: str) -> t.Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\admon\index.py
-----------------------------
>     """Check for multiple tags when the title is double quoted."""
      re_tags = re.compile(r'^\s*(?P<tokens>[^"]+)\s+"(?P<title>.*)"\S*$')
      match = re_tags.match(params)
      if match:
def _get_multiple_tags(params: str) -> tuple[list[str], str]:
def _get_tag(_params: str) -> tuple[list[str], str]:
def _validate(params: str) -> bool:
def _extra_classes(markup: str) -> list[str]:
def admonition(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:
def admon_plugin(md: MarkdownIt, render: None | Callable[..., str] = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\admon\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\amsmath\__init__.py
-----------------------------
> """An extension to capture amsmath latex environments."""
  
  from __future__ import annotations
  
def amsmath_plugin(
def amsmath_block(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\anchors\index.py
-----------------------------
>     """Plugin for adding header anchors, based on
      `markdown-it-anchor <https://github.com/valeriangalliat/markdown-it-anchor>`__
  
      .. code-block:: md
def anchors_plugin(
def _make_anchors_func(
def slugify(title: str) -> str:
def unique_slug(slug: str, slugs: set[str]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\anchors\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\attrs\index.py
-----------------------------
>     """Parse inline attributes that immediately follow certain inline elements::
  
          ![alt](https://image.com){#id .a b=c}
  
def attrs_plugin(
def attrs_block_plugin(md: MarkdownIt, *, allowed: Sequence[str] | None = None) -> None:
def _find_opening(tokens: Sequence[Token], index: int) -> int | None:
def _span_rule(state: StateInline, silent: bool) -> bool:
def _attr_inline_rule(
def _attr_block_rule(
def _attr_resolve_block_rule(state: StateCore, *, allowed: set[str] | None) -> None:
def _add_attrs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\attrs\parse.py
-----------------------------
> """Parser for attributes::
  
      attributes { id = "foo", class = "bar baz",
                  key1 = "val1", key2 = "val2" }
class State(Enum):
class TokenState:
class ParseError(Exception):
def parse(string: str) -> tuple[int, dict[str, str]]:
def handle_start(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_comment(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_id(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_class(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_key(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_value(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_bare_value(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_escaped(char: str, pos: int, tokens: TokenState) -> State:
def handle_scanning_quoted_value(char: str, pos: int, tokens: TokenState) -> State:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\attrs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\container\index.py
-----------------------------
> """Process block-level custom containers."""
  
  from __future__ import annotations
  
def container_plugin(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\container\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\deflist\index.py
-----------------------------
> """Process definition lists."""
  
  from markdown_it import MarkdownIt
  from markdown_it.rules_block import StateBlock
def deflist_plugin(md: MarkdownIt) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\deflist\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\dollarmath\index.py
-----------------------------
>     """Plugin for parsing dollar enclosed math,
      e.g. inline: ``$a=1$``, block: ``$$b=2$$``
  
      This is an improved version of ``texmath``; it is more performant,
def dollarmath_plugin(
def is_escaped(state: StateInline, back_pos: int, mod: int = 0) -> bool:
def math_inline_dollar(
def math_block_dollar(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\dollarmath\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\field_list\__init__.py
-----------------------------
> """Field list plugin"""
  
  from collections.abc import Iterator
  from contextlib import contextmanager
def fieldlist_plugin(md: MarkdownIt) -> None:
def parseNameMarker(state: StateBlock, startLine: int) -> tuple[int, str]:
def set_parent_type(state: StateBlock, name: str) -> Iterator[None]:
def _fieldlist_rule(
def temp_state_changes(state: StateBlock, startLine: int) -> Iterator[None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\footnote\index.py
-----------------------------
> """Process footnotes"""
  
  from __future__ import annotations
  
def footnote_plugin(
class _RefData(TypedDict, total=False):
class _FootnoteData(TypedDict):
def _data_from_env(env: EnvType) -> _FootnoteData:
def footnote_def(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:
def footnote_inline(state: StateInline, silent: bool) -> bool:
def footnote_ref(
def footnote_tail(state: StateCore) -> None:
def render_footnote_anchor_name(
def render_footnote_caption(
def render_footnote_ref(
def render_footnote_block_open(
def render_footnote_block_close(
def render_footnote_open(
def render_footnote_close(
def render_footnote_anchor(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\footnote\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\front_matter\index.py
-----------------------------
> """Process front matter."""
  
  from markdown_it import MarkdownIt
  from markdown_it.rules_block import StateBlock
def front_matter_plugin(md: MarkdownIt) -> None:
def _front_matter_rule(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\front_matter\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\myst_blocks\index.py
-----------------------------
>     """Parse MyST targets (``(name)=``), blockquotes (``% comment``) and block breaks 
(``+++``)."""
      md.block.ruler.before(
          "blockquote",
          "myst_line_comment",
def myst_block_plugin(md: MarkdownIt) -> None:
def line_comment(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:
def block_break(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:
def target(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:
def render_myst_target(
def render_myst_line_comment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\myst_blocks\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\myst_role\index.py
-----------------------------
>     """Parse ``{role-name}`content```"""
      md.inline.ruler.before("backticks", "myst_role", myst_role)
      md.add_render_rule("myst_role", render_myst_role)
  
def myst_role_plugin(md: MarkdownIt) -> None:
def myst_role(state: StateInline, silent: bool) -> bool:
def render_myst_role(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\myst_role\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\subscript\__init__.py
-----------------------------
> """
  Markdown-it-py plugin to introduce <sub> markup using ~subscript~.
  
  Ported from
def tokenize(state: StateInline, silent: bool) -> bool:
def sub_open(
def sub_close(
def sub_plugin(md: MarkdownIt) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\tasklists\__init__.py
-----------------------------
> """Builds task/todo lists out of markdown lists with items starting with [ ] or [x]"""
  
  # Ported by Wolmar Nyberg Ã…kerstrÃ¶m from https://github.com/revin/markdown-it-task-lists
  # ISC License
def tasklists_plugin(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\texmath\index.py
-----------------------------
>     """Plugin ported from
      `markdown-it-texmath <https://github.com/goessner/markdown-it-texmath>`__.
  
      It parses TeX math equations set inside opening and closing delimiters:
def texmath_plugin(
class _RuleDictReqType(TypedDict):
class RuleDictType(_RuleDictReqType, total=False):
def applyRule(
def make_inline_func(rule: RuleDictType) -> Callable[[StateInline, bool], bool]:
def make_block_func(rule: RuleDictType) -> Callable[[StateBlock, int, int, bool], bool]:
def dollar_pre(src: str, beg: int) -> bool:
def dollar_post(src: str, end: int) -> bool:
def render(tex: str, displayMode: bool, macros: Any) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\texmath\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\wordcount\__init__.py
-----------------------------
>     """Split the string and ignore punctuation only elements."""
      return sum([el.strip(string.punctuation).isalpha() for el in text.split()])
  
  
def basic_count(text: str) -> int:
def wordcount_plugin(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\colon_fence.py
-----------------------------
>     """This plugin directly mimics regular fences, but with `:` colons.
  
      Example::
  
def colon_fence_plugin(md: MarkdownIt) -> None:
def _rule(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool:
def _skipCharsStr(state: StateBlock, pos: int, ch: str) -> int:
def _render(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\substitution.py
-----------------------------
>     """A plugin to create substitution tokens.
  
      These, token should be handled by the renderer.
  
def substitution_plugin(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\utils.py
-----------------------------
>     """Check if the line is part of a code block, compat for markdown-it-py v2."""
      try:
          # markdown-it-py v3+
          return state.is_code_block(line)
def is_code_block(state: StateBlock, line: int) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdit_py_plugins\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdurl\_decode.py
-----------------------------
def get_decode_cache(exclude: str) -> Sequence[str]:
def decode(string: str, exclude: str = DECODE_DEFAULT_CHARS) -> str:
def repl_func_with_cache(match: re.Match, cache: Sequence[str]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdurl\_encode.py
-----------------------------
def get_encode_cache(exclude: str) -> Sequence[str]:
def encode(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdurl\_format.py
-----------------------------
def format(url: URL) -> str:  # noqa: A001

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdurl\_parse.py
-----------------------------
class MutableURL:
def url_parse(url: URL | str, *, slashes_denote_host: bool = False) -> URL:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdurl\_url.py
-----------------------------
class URL(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mdurl\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mutmut\file_mutation.py
-----------------------------
> """This module contains code for managing mutant creation for whole files."""
  
  from collections import defaultdict
  from collections.abc import Iterable, Sequence, Mapping
class Mutation:
def mutate_file_contents(filename: str, code: str) -> tuple[str, Sequence[str]]:
def create_mutations(
class OuterFunctionProvider(cst.BatchableMetadataProvider):
class OuterFunctionVisitor(cst.CSTVisitor):
class MutationVisitor(cst.CSTVisitor):
def combine_mutations_to_source(module: cst.Module, mutations: Sequence[Mutation]) -> tuple[str, Sequence[str]]:
def function_trampoline_arrangement(function: cst.FunctionDef, mutants: Iterable[Mutation], class_name: Union[str, None]) -> tuple[Sequence[MODULE_STATEMENT], Sequence[str]]:
def get_statements_until_func_or_class(statements: Sequence[MODULE_STATEMENT]) -> list[MODULE_STATEMENT]:
def group_by_top_level_node(mutations: Sequence[Mutation]) -> Mapping[cst.CSTNode, Sequence[Mutation]]:
def pragma_no_mutate_lines(source: str) -> set[int]:
def deep_replace(tree: cst.CSTNode, old_node: cst.CSTNode, new_node: cst.CSTNode) -> cst.CSTNode:
class ChildReplacementTransformer(cst.CSTTransformer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mutmut\node_mutation.py
-----------------------------
> """This module contains the mutations for indidvidual nodes, e.g. replacing a != b with a 
== b."""
  import re
  from typing import Any, Union, cast
  from collections.abc import Callable, Iterable, Sequence
def operator_number(
def operator_string(
def operator_lambda(
def operator_dict_arguments(
def operator_arg_removal(
def operator_symmetric_string_methods_swap(
def operator_unsymmetrical_string_methods_swap(
def operator_remove_unary_ops(
def operator_keywords(
def operator_name(node: cst.Name) -> Iterable[cst.CSTNode]:
def operator_swap_op(
def operator_augmented_assignment(
def operator_assignment(
def operator_match(node: cst.Match) -> Iterable[cst.CSTNode]:
def _simple_mutation_mapping(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mutmut\trampoline_templates.py
-----------------------------
>     return f"""
  {mutants_dict}
  
  def {orig_name}({'self, ' if class_name is not None else ''}*args, **kwargs):
def build_trampoline(*, orig_name, mutants, class_name):
def mangle_function_name(*, name, class_name):
def _mutmut_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mutmut\__init__.py
-----------------------------
def _reset_globals():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mutmut\__main__.py
-----------------------------
>     """Guess the path to source code to mutate
  
      :rtype: str
def guess_paths_to_mutate():
def record_trampoline_hit(name):
def walk_all_files():
def walk_source_files():
class MutmutProgrammaticFailException(Exception):
class CollectTestsFailedException(Exception):
class BadTestExecutionCommandsException(Exception):
class InvalidGeneratedSyntaxException(Exception):
def copy_src_dir():
class FileMutationResult:
def create_mutants(max_children: int):
def create_file_mutants(path: Path) -> FileMutationResult:
def copy_also_copy_files():
def create_mutants_for_file(filename, output_path) -> FileMutationResult:
def write_all_mutants_to_file(*, out, source, filename):
class SourceFileMutationData:
def unused(*_):
def strip_prefix(s, *, prefix, strict=False):
class TestRunner(ABC):
def change_cwd(path):
def collected_test_names():
class ListAllTestsResult:
class PytestRunner(TestRunner):
class HammettRunner(TestRunner):
def mangled_name_from_mutant_name(mutant_name):
def orig_function_and_class_names_from_key(mutant_name):
def status_printer():
class Stat:
def collect_stat(m: SourceFileMutationData):
def calculate_summary_stats(source_file_mutation_data_by_path):
def print_stats(source_file_mutation_data_by_path, force_output=False):
def run_forced_fail_test(runner):
class CatchOutput:
class Config:
def config_reader():
def ensure_config_loaded():
def load_config():
def cli():
def run_stats_collection(runner, tests=None):
def collect_or_load_stats(runner):
def load_stats():
def save_stats():
def collect_source_file_mutation_data(*, mutant_names):
def estimated_worst_case_time(mutant_name):
def print_time_estimates(mutant_names):
def tests_for_mutant(mutant_name):
def stop_all_children(mutants):
def timeout_checker(mutants):
def run(mutant_names, *, max_children):
def _run(mutant_names: Union[tuple, list], max_children: Union[None, int]):
def tests_for_mutant_names(mutant_names):
def results(all):
def read_mutants_module(path) -> cst.Module:
def read_orig_module(path) -> cst.Module:
def find_top_level_function_or_method(module: cst.Module, name: str) -> Union[cst.FunctionDef, None]:
def read_original_function(module: cst.Module, mutant_name: str):
def read_mutant_function(module: cst.Module, mutant_name: str):
def find_mutant(mutant_name):
def get_diff_for_mutant(mutant_name, source=None, path=None):
def show(mutant_name):
def apply(mutant_name):
def apply_mutant(mutant_name):
def browse(show_killed):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\dmypy\client.py
-----------------------------
> """Client for mypy daemon mode.
  
  This manages a daemon process which keeps useful state in memory
  rather than having to read it back from disk on each run.
class AugmentedHelpFormatter(argparse.RawDescriptionHelpFormatter):
class BadStatus(Exception):
def main(argv: list[str]) -> None:
def fail(msg: str) -> NoReturn:
def action(subparser: argparse.ArgumentParser) -> Callable[[ActionFunction], ActionFunction]:
def do_start(args: argparse.Namespace) -> None:
def do_restart(args: argparse.Namespace) -> None:
def restart_server(args: argparse.Namespace, allow_sources: bool = False) -> None:
def start_server(args: argparse.Namespace, allow_sources: bool = False) -> None:
def wait_for_server(status_file: str, timeout: float = 5.0) -> None:
def do_run(args: argparse.Namespace) -> None:
def do_status(args: argparse.Namespace) -> None:
def do_stop(args: argparse.Namespace) -> None:
def do_kill(args: argparse.Namespace) -> None:
def do_check(args: argparse.Namespace) -> None:
def do_recheck(args: argparse.Namespace) -> None:
def do_suggest(args: argparse.Namespace) -> None:
def do_inspect(args: argparse.Namespace) -> None:
def check_output(
def show_stats(response: Mapping[str, object]) -> None:
def do_hang(args: argparse.Namespace) -> None:
def do_daemon(args: argparse.Namespace) -> None:
def do_help(args: argparse.Namespace) -> None:
def request(
def get_status(status_file: str) -> tuple[int, str]:
def check_status(data: dict[str, Any]) -> tuple[int, str]:
def read_status(status_file: str) -> dict[str, object]:
def is_running(status_file: str) -> bool:
def console_entry() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\dmypy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\dmypy\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\attrs.py
-----------------------------
> """Plugin for supporting the attrs library (http://www.attrs.org)"""
  
  from __future__ import annotations
  
class Converter:
class Attribute:
def _determine_eq_order(ctx: mypy.plugin.ClassDefContext) -> bool:
def _get_decorator_optional_bool_argument(
def attr_tag_callback(ctx: mypy.plugin.ClassDefContext) -> None:
def attr_class_maker_callback(
def attr_class_maker_callback_impl(
def _get_frozen(ctx: mypy.plugin.ClassDefContext, frozen_default: bool) -> bool:
def _analyze_class(
def _add_empty_metadata(info: TypeInfo) -> None:
def _detect_auto_attribs(ctx: mypy.plugin.ClassDefContext) -> bool:
def _attributes_from_assignment(
def _cleanup_decorator(stmt: Decorator, attr_map: dict[str, Attribute]) -> None:
def _attribute_from_auto_attrib(
def _attribute_from_attrib_maker(
def _parse_converter(
def is_valid_overloaded_converter(defn: OverloadedFuncDef) -> bool:
def _parse_assignments(
def _add_order(ctx: mypy.plugin.ClassDefContext, adder: MethodAdder) -> None:
def _make_frozen(ctx: mypy.plugin.ClassDefContext, attributes: list[Attribute]) -> None:
def _add_init(
def _add_attrs_magic_attribute(
def _add_slots(ctx: mypy.plugin.ClassDefContext, attributes: list[Attribute]) -> None:
def _add_match_args(ctx: mypy.plugin.ClassDefContext, attributes: list[Attribute]) -> None:
def _remove_hashability(ctx: mypy.plugin.ClassDefContext) -> None:
class MethodAdder:
def _get_attrs_init_type(typ: Instance) -> CallableType | None:
def _fail_not_attrs_class(ctx: mypy.plugin.FunctionSigContext, t: Type, parent_t: Type) -> None:
def _get_expanded_attr_types(
def _meet_fields(types: list[Mapping[str, Type]]) -> Mapping[str, Type]:
def evolve_function_sig_callback(ctx: mypy.plugin.FunctionSigContext) -> CallableType:
def fields_function_sig_callback(ctx: mypy.plugin.FunctionSigContext) -> CallableType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\common.py
-----------------------------
>     """Return the bool argument for the decorator.
  
      This handles both @decorator(...) and @decorator.
def _get_decorator_bool_argument(ctx: ClassDefContext, name: str, default: bool) -> bool:
def _get_bool_argument(ctx: ClassDefContext, expr: CallExpr, name: str, default: bool) -> bool:
def _get_argument(call: CallExpr, name: str) -> Expression | None:
def find_shallow_matching_overload_item(overload: Overloaded, call: CallExpr) -> CallableType:
def _get_callee_type(call: CallExpr) -> CallableType | None:
def add_method(
class MethodSpec(NamedTuple):
def add_method_to_class(
def add_overloaded_method_to_class(
def _prepare_class_namespace(cls: ClassDef, name: str) -> None:
def _add_method_by_spec(
def add_attribute_to_class(
def deserialize_and_fixup_type(data: str | JsonDict, api: SemanticAnalyzerPluginInterface) -> Type:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\ctypes.py
-----------------------------
> """Plugin to provide accurate types for some parts of the ctypes module."""
  
  from __future__ import annotations
  
def _find_simplecdata_base_arg(
def _autoconvertible_to_cdata(tp: Type, api: mypy.plugin.CheckerPluginInterface) -> Type:
def _autounboxed_cdata(tp: Type) -> ProperType:
def _get_array_element_type(tp: Type) -> ProperType | None:
def array_constructor_callback(ctx: mypy.plugin.FunctionContext) -> Type:
def array_getitem_callback(ctx: mypy.plugin.MethodContext) -> Type:
def array_setitem_callback(ctx: mypy.plugin.MethodSigContext) -> CallableType:
def array_iter_callback(ctx: mypy.plugin.MethodContext) -> Type:
def array_value_callback(ctx: mypy.plugin.AttributeContext) -> Type:
def array_raw_callback(ctx: mypy.plugin.AttributeContext) -> Type:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\dataclasses.py
-----------------------------
> """Plugin that provides support for dataclasses."""
  
  from __future__ import annotations
  
class DataclassAttribute:
class DataclassTransformer:
def add_dataclass_tag(info: TypeInfo) -> None:
def dataclass_tag_callback(ctx: ClassDefContext) -> None:
def dataclass_class_maker_callback(ctx: ClassDefContext) -> bool:
def _get_transform_spec(reason: Expression) -> DataclassTransformSpec:
def _is_dataclasses_decorator(node: Node) -> bool:
def _has_direct_dataclass_transform_metaclass(info: TypeInfo) -> bool:
def _get_expanded_dataclasses_fields(
def _meet_replace_sigs(sigs: list[CallableType]) -> CallableType:
def replace_function_sig_callback(ctx: FunctionSigContext) -> CallableType:
def is_processed_dataclass(info: TypeInfo) -> bool:
def check_post_init(api: TypeChecker, defn: FuncItem, info: TypeInfo) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\default.py
-----------------------------
>     """Type checker plugin that is enabled by default."""
  
      def get_function_hook(self, fullname: str) -> Callable[[FunctionContext], Type] | None:
          from mypy.plugins import ctypes, enums, singledispatch
class DefaultPlugin(Plugin):
def typed_dict_get_signature_callback(ctx: MethodSigContext) -> CallableType:
def typed_dict_get_callback(ctx: MethodContext) -> Type:
def typed_dict_pop_signature_callback(ctx: MethodSigContext) -> CallableType:
def typed_dict_pop_callback(ctx: MethodContext) -> Type:
def typed_dict_setdefault_signature_callback(ctx: MethodSigContext) -> CallableType:
def typed_dict_setdefault_callback(ctx: MethodContext) -> Type:
def typed_dict_delitem_callback(ctx: MethodContext) -> Type:
def typed_dict_update_signature_callback(ctx: MethodSigContext) -> CallableType:
def int_pow_callback(ctx: MethodContext) -> Type:
def int_neg_callback(ctx: MethodContext, multiplier: int = -1) -> Type:
def int_pos_callback(ctx: MethodContext) -> Type:
def tuple_mul_callback(ctx: MethodContext) -> Type:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\enums.py
-----------------------------
> """
  This file contains a variety of plugins for refining how mypy infers types of
  expressions involving Enums.
  
def enum_name_callback(ctx: mypy.plugin.AttributeContext) -> Type:
def _first(it: Iterable[_T]) -> _T | None:
def _infer_value_type_with_auto_fallback(
def _implements_new(info: TypeInfo) -> bool:
def enum_member_callback(ctx: mypy.plugin.FunctionContext) -> Type:
def enum_value_callback(ctx: mypy.plugin.AttributeContext) -> Type:
def _extract_underlying_field_name(typ: Type) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\functools.py
-----------------------------
> """Plugin for supporting the functools standard library module."""
  
  from __future__ import annotations
  
class _MethodInfo(NamedTuple):
def functools_total_ordering_maker_callback(
def _find_other_type(method: _MethodInfo) -> Type:
def _analyze_class(ctx: mypy.plugin.ClassDefContext) -> dict[str, _MethodInfo | None]:
def partial_new_callback(ctx: mypy.plugin.FunctionContext) -> Type:
def handle_partial_with_callee(ctx: mypy.plugin.FunctionContext, callee: Type) -> Type:
def partial_call_callback(ctx: mypy.plugin.MethodContext) -> Type:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\proper_plugin.py
-----------------------------
> """
  This plugin is helpful for mypy development itself.
  By default, it is not enabled for mypy users.
  
class ProperTypePlugin(Plugin):
def isinstance_proper_hook(ctx: FunctionContext) -> Type:
def is_special_target(right: ProperType) -> bool:
def is_improper_type(typ: Type) -> bool:
def is_dangerous_target(typ: ProperType) -> bool:
def proper_type_hook(ctx: FunctionContext) -> Type:
def proper_types_hook(ctx: FunctionContext) -> Type:
def get_proper_type_instance(ctx: FunctionContext) -> Instance:
def plugin(version: str) -> type[ProperTypePlugin]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\singledispatch.py
-----------------------------
>     """Get the element that corresponds to the first argument passed to the function"""
      if args and args[0]:
          return args[0][0]
      return None
class SingledispatchTypeVars(NamedTuple):
class RegisterCallableInfo(NamedTuple):
def get_singledispatch_info(typ: Instance) -> SingledispatchTypeVars | None:
def get_first_arg(args: list[list[T]]) -> T | None:
def make_fake_register_class_instance(
def fail(ctx: PluginContext, msg: str, context: Context | None) -> None:
def create_singledispatch_function_callback(ctx: FunctionContext) -> Type:
def singledispatch_register_callback(ctx: MethodContext) -> Type:
def register_function(
def get_dispatch_type(func: CallableType, register_arg: Type | None) -> Type | None:
def call_singledispatch_function_after_register_argument(ctx: MethodContext) -> Type:
def call_singledispatch_function_callback(ctx: MethodSigContext) -> FunctionLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugins\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\astdiff.py
-----------------------------
> """Utilities for comparing two versions of a module symbol table.
  
  The goal is to find which AST nodes have externally visible changes, so
  that we can fire triggers and re-process other parts of the program
def compare_symbol_table_snapshots(
def snapshot_symbol_table(name_prefix: str, table: SymbolTable) -> dict[str, SymbolSnapshot]:
def snapshot_definition(node: SymbolNode | None, common: SymbolSnapshot) -> SymbolSnapshot:
def snapshot_type(typ: Type) -> SnapshotItem:
def snapshot_optional_type(typ: Type | None) -> SnapshotItem:
def snapshot_types(types: Sequence[Type]) -> SnapshotItem:
def snapshot_simple_type(typ: Type) -> SnapshotItem:
def encode_optional_str(s: str | None) -> str:
class SnapshotTypeVisitor(TypeVisitor[SnapshotItem]):
def snapshot_untyped_signature(func: OverloadedFuncDef | FuncItem) -> SymbolSnapshot:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\astmerge.py
-----------------------------
> """Merge a new version of a module AST and symbol table to older versions of those.
  
  When the source code of a module has a change in fine-grained incremental mode,
  we build a new AST from the updated source. However, other parts of the program
def merge_asts(
def replacement_map_from_symbol_table(
def replace_nodes_in_ast(
class NodeReplaceVisitor(TraverserVisitor):
class TypeReplaceVisitor(SyntheticTypeVisitor[None]):
def replace_nodes_in_symbol_table(
def _get_ignored_slots(node: SymbolNode) -> tuple[str, ...]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\aststrip.py
-----------------------------
> """Strip/reset AST in-place to match state after semantic analyzer pre-analysis.
  
  Fine-grained incremental mode reruns semantic analysis main pass
  and type checking for *existing* AST nodes (targets) when changes are
def strip_target(
class NodeStripVisitor(TraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\deps.py
-----------------------------
> """Generate fine-grained dependencies for AST nodes, for use in the daemon mode.
  
  Dependencies are stored in a map from *triggers* to *sets of affected locations*.
  
def get_dependencies(
def get_dependencies_of_target(
class DependencyVisitor(TraverserVisitor):
def get_type_triggers(
class TypeTriggersVisitor(TypeVisitor[list[str]]):
def merge_dependencies(new_deps: dict[str, set[str]], deps: dict[str, set[str]]) -> None:
def non_trivial_bases(info: TypeInfo) -> list[TypeInfo]:
def has_user_bases(info: TypeInfo) -> bool:
def dump_all_dependencies(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\mergecheck.py
-----------------------------
> """Check for duplicate AST nodes after merge."""
  
  from __future__ import annotations
  
def check_consistency(o: object) -> None:
def path_to_str(path: list[tuple[object, object]]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\objgraph.py
-----------------------------
> """Find all objects reachable from a root object."""
  
  from __future__ import annotations
  
def isproperty(o: object, attr: str) -> bool:
def get_edge_candidates(o: object) -> Iterator[tuple[object, object]]:
def get_edges(o: object) -> Iterator[tuple[object, object]]:
def get_reachable_graph(root: object) -> tuple[dict[int, object], dict[int, tuple[int, object]]]:
def get_path(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\subexpr.py
-----------------------------
> """Find all subexpressions of an AST node."""
  
  from __future__ import annotations
  
def get_subexpressions(node: Node) -> list[Expression]:
class SubexpressionFinder(TraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\target.py
-----------------------------
def trigger_to_target(s: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\trigger.py
-----------------------------
> """AST triggers that are used for fine-grained dependency handling."""
  
  from __future__ import annotations
  
def make_trigger(name: str) -> str:
def make_wildcard_trigger(module: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\update.py
-----------------------------
> """Update build by processing changes using fine-grained dependencies.
  
  Use fine-grained dependencies to update targets in other modules that
  may be affected by externally-visible changes in the changed modules.
class FineGrainedBuildManager:
def find_unloaded_deps(
def ensure_deps_loaded(module: str, deps: dict[str, set[str]], graph: dict[str, State]) -> None:
def ensure_trees_loaded(
class NormalUpdate(NamedTuple):
class BlockedUpdate(NamedTuple):
def update_module_isolated(
def find_relative_leaf_module(modules: list[tuple[str, str]], graph: Graph) -> tuple[str, str]:
def delete_module(module_id: str, path: str, graph: Graph, manager: BuildManager) -> None:
def dedupe_modules(modules: list[tuple[str, str]]) -> list[tuple[str, str]]:
def get_module_to_path_map(graph: Graph) -> dict[str, str]:
def get_sources(
def calculate_active_triggers(
def replace_modules_with_new_variants(
def propagate_changes_using_dependencies(
def find_targets_recursive(
def reprocess_nodes(
def find_symbol_tables_recursive(prefix: str, symbols: SymbolTable) -> dict[str, SymbolTable]:
def update_deps(
def lookup_target(
def is_verbose(manager: BuildManager) -> bool:
def target_from_node(module: str, node: FuncDef | MypyFile | OverloadedFuncDef) -> str | None:
def refresh_suppressed_submodules(
def extract_fnam_from_message(message: str) -> str | None:
def extract_possible_fnam_from_message(message: str) -> str:
def sort_messages_preserving_file_order(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\server\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\meta\test_diff_helper.py
-----------------------------
class DiffHelperSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\meta\test_parse_data.py
-----------------------------
> """
  A "meta test" which tests the parsing of .test files. This is not meant to become exhaustive
  but to ensure we maintain a basic level of ergonomics for mypy contributors.
def _run_pytest(data_suite: str) -> PytestResult:
class ParseTestDataSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\meta\test_update_data.py
-----------------------------
> """
  A "meta test" which tests the `--update-data` feature for updating .test files.
  Updating the expected output, especially when it's in the form of inline (comment) 
assertions,
  can be brittle, which is why we're "meta-testing" here.
def _run_pytest_update_data(data_suite: str) -> PytestResult:
class UpdateDataSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\meta\_pytest.py
-----------------------------
>     """
      Runs a suite of data test cases through pytest until either tests pass
      or until a maximum number of attempts (needed for incremental tests).
  
class PytestResult:
def dedent_docstring(s: str) -> str:
def run_pytest_data_suite(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\meta\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\config.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\data.py
-----------------------------
> """Utilities for processing .test files containing test case descriptions."""
  
  from __future__ import annotations
  
class UpdateFile(NamedTuple):
class DeleteFile(NamedTuple):
def _file_arg_to_module(filename: str) -> str:
def parse_test_case(case: DataDrivenTestCase) -> None:
class DataDrivenTestCase(pytest.Item):
def module_from_path(path: str) -> str:
class TestItem:
def parse_test_data(raw_data: str, name: str) -> list[TestItem]:
def strip_list(l: list[str]) -> list[str]:
def collapse_line_continuation(l: list[str]) -> list[str]:
def expand_variables(s: str) -> str:
def expand_errors(input: list[str], output: list[str], fnam: str) -> None:
def fix_win_path(line: str) -> str:
def fix_cobertura_filename(line: str) -> str:
def pytest_sessionstart(session: Any) -> None:
def pytest_addoption(parser: Any) -> None:
def pytest_cmdline_main(config: pytest.Config) -> None:
def pytest_pycollect_makeitem(collector: Any, name: str, obj: object) -> Any | None:
def split_test_cases(
class DataSuiteCollector(pytest.Class):
class DataFileFix(NamedTuple):
class DataFileCollector(pytest.Collector):
def add_test_name_suffix(name: str, suffix: str) -> str:
def is_incremental(testcase: DataDrivenTestCase) -> bool:
def has_stable_flags(testcase: DataDrivenTestCase) -> bool:
class DataSuite:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\helpers.py
-----------------------------
>     """Assert that two string arrays are equal.
  
      Display any differences in a human-readable form.
def run_mypy(args: list[str]) -> None:
def diff_ranges(
def render_diff_range(
def assert_string_arrays_equal(
def assert_module_equivalence(name: str, expected: Iterable[str], actual: Iterable[str]) -> None:
def assert_target_equivalence(name: str, expected: list[str], actual: list[str]) -> None:
def show_align_message(s1: str, s2: str) -> None:
def clean_up(a: list[str]) -> list[str]:
def local_sys_path_set() -> Iterator[None]:
def testfile_pyversion(path: str) -> tuple[int, int]:
def normalize_error_messages(messages: list[str]) -> list[str]:
def retry_on_error(func: Callable[[], Any], max_wait: float = 1.0) -> None:
def good_repr(obj: object) -> str:
def assert_equal(a: object, b: object, fmt: str = "{} != {}") -> None:
def typename(t: type) -> str:
def assert_type(typ: type, value: object) -> None:
def parse_options(
def split_lines(*streams: bytes) -> list[str]:
def write_and_fudge_mtime(content: str, target_path: str) -> None:
def perform_file_operations(operations: list[UpdateFile | DeleteFile]) -> None:
def check_test_output_files(
def normalize_file_output(content: list[str], current_abs_path: str) -> list[str]:
def find_test_files(pattern: str, exclude: list[str] | None = None) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testapi.py
-----------------------------
>         """stderr should be captured when a bad option is passed."""
          _, stderr, _ = mypy.api.run(["--some-bad-option"])
          assert isinstance(stderr, str)
          assert stderr != ""
class APISuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testargs.py
-----------------------------
> """Ensure the argparse parser and Options class are in sync.
  
  In particular, verify that the argparse defaults are the same as the Options
  defaults, and that argparse doesn't assign any new members to the Options
class ArgSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testcheck.py
-----------------------------
> """Type checker test cases"""
  
  from __future__ import annotations
  
class TypeCheckSuite(DataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testcmdline.py
-----------------------------
> """Test cases for the command line.
  
  To begin we test that "mypy <directory>[/]" always recurses down the
  whole tree.
class PythonCmdlineSuite(DataSuite):
def test_python_cmdline(testcase: DataDrivenTestCase, step: int) -> None:
def parse_args(line: str) -> list[str]:
def parse_cwd(line: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testconstraints.py
-----------------------------
class ConstraintsSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testdaemon.py
-----------------------------
> """End-to-end test cases for the daemon (dmypy).
  
  These are special because they run multiple shell commands.
  
class DaemonSuite(DataSuite):
def test_daemon(testcase: DataDrivenTestCase) -> None:
def parse_script(input: list[str]) -> list[list[str]]:
def run_cmd(input: str) -> tuple[int, str]:
class DaemonUtilitySuite(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testdeps.py
-----------------------------
> """Test cases for generating node-level dependencies (for fine-grained incremental 
checking)"""
  
  from __future__ import annotations
  
class GetDependenciesSuite(DataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testdiff.py
-----------------------------
> """Test cases for AST diff (used for fine-grained incremental checking)"""
  
  from __future__ import annotations
  
class ASTDiffSuite(DataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testerrorstream.py
-----------------------------
> """Tests for mypy incremental error output."""
  
  from __future__ import annotations
  
class ErrorStreamSuite(DataSuite):
def test_error_stream(testcase: DataDrivenTestCase) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testfinegrained.py
-----------------------------
> """Test cases for fine-grained incremental checking.
  
  Each test cases runs a batch build followed by one or more fine-grained
  incremental steps. We verify that each step produces the expected output.
class FineGrainedSuite(DataSuite):
def normalize_messages(messages: list[str]) -> list[str]:
class TestMessageSorting(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testfinegrainedcache.py
-----------------------------
> """Tests for fine-grained incremental checking using the cache.
  
  All of the real code for this lives in testfinegrained.py.
class FineGrainedCacheSuite(mypy.test.testfinegrained.FineGrainedSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testformatter.py
-----------------------------
class FancyErrorFormattingTestCases(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testfscache.py
-----------------------------
> """Unit tests for file system cache."""
  
  from __future__ import annotations
  
class TestFileSystemCache(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testgraph.py
-----------------------------
> """Test cases for graph processing code in build.py."""
  
  from __future__ import annotations
  
class GraphSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testinfer.py
-----------------------------
> """Test cases for type inference helper functions."""
  
  from __future__ import annotations
  
class MapActualsToFormalsSuite(Suite):
def expand_caller_kinds(
def expand_callee_kinds(
class OperandDisjointDictSuite(Suite):
class OperandComparisonGroupingSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testipc.py
-----------------------------
def server(msg: str, q: Queue[str]) -> None:
def server_multi_message_echo(q: Queue[str]) -> None:
class IPCTests(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testmerge.py
-----------------------------
> """Test cases for AST merge (used for fine-grained incremental checking)"""
  
  from __future__ import annotations
  
class ASTMergeSuite(DataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testmodulefinder.py
-----------------------------
>         """
          If namespace_packages is False, we shouldn't find nsx
class ModuleFinderSuite(Suite):
class ModuleFinderSitePackagesSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testmypyc.py
-----------------------------
> """A basic check to make sure that we are using a mypyc-compiled version when expected."""
  
  from __future__ import annotations
  
class MypycTest(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testoutput.py
-----------------------------
> """Test cases for `--output=json`.
  
  These cannot be run by the usual unit test runner because of the backslashes in
  the output, which get normalized to forward slashes by the test suite on Windows.
class OutputJSONsuite(DataSuite):
def test_output_json(testcase: DataDrivenTestCase) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testparse.py
-----------------------------
> """Tests for the mypy parser."""
  
  from __future__ import annotations
  
class ParserSuite(DataSuite):
def test_parser(testcase: DataDrivenTestCase) -> None:
class ParseErrorSuite(DataSuite):
def test_parse_error(testcase: DataDrivenTestCase) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testpep561.py
-----------------------------
>     """Context manager that creates a virtualenv in a temporary directory
  
      Returns the path to the created Python executable
class PEP561Suite(DataSuite):
def virtualenv(python_executable: str = sys.executable) -> Iterator[tuple[str, str]]:
def upgrade_pip(python_executable: str) -> None:
def install_package(
def test_pep561(testcase: DataDrivenTestCase) -> None:
def parse_pkgs(comment: str) -> tuple[list[str], list[str]]:
def parse_mypy_args(line: str) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testpythoneval.py
-----------------------------
> """Test cases for running mypy programs using a Python interpreter.
  
  Each test case type checks a program then runs it using Python. The
  output (stdout) of the program is compared to expected output. Type checking
class PythonEvaluationSuite(DataSuite):
def test_python_evaluation(testcase: DataDrivenTestCase, cache_dir: str) -> None:
def adapt_output(testcase: DataDrivenTestCase) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testreports.py
-----------------------------
> """Test cases for reports generated by mypy."""
  
  from __future__ import annotations
  
class CoberturaReportSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testsemanal.py
-----------------------------
> """Semantic analyzer test cases"""
  
  from __future__ import annotations
  
def get_semanal_options(program_text: str, testcase: DataDrivenTestCase) -> Options:
class SemAnalSuite(DataSuite):
def test_semanal(testcase: DataDrivenTestCase) -> None:
class SemAnalErrorSuite(DataSuite):
def test_semanal_error(testcase: DataDrivenTestCase) -> None:
class SemAnalSymtableSuite(DataSuite):
class SemAnalTypeInfoSuite(DataSuite):
class TypeInfoMap(dict[str, TypeInfo]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testsolve.py
-----------------------------
> """Test cases for the constraint solver used in type inference."""
  
  from __future__ import annotations
  
class SolveSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\teststubgen.py
-----------------------------
>     """Test cases for processing command-line options and finding files."""
  
      @unittest.skipIf(sys.platform == "win32", "clean up fails on Windows")
      def test_files_found(self) -> None:
class StubgenCmdLineSuite(unittest.TestCase):
class StubgenCliParseSuite(unittest.TestCase):
class StubgenUtilSuite(unittest.TestCase):
class StubgenHelpersSuite(unittest.TestCase):
class StubgenPythonSuite(DataSuite):
class TestBaseClass:
class TestClass(TestBaseClass):
class StubgencSuite(unittest.TestCase):
class ArgSigSuite(unittest.TestCase):
class IsValidTypeSuite(unittest.TestCase):
class ModuleInspectSuite(unittest.TestCase):
def module_to_path(out_dir: str, module: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\teststubinfo.py
-----------------------------
class TestStubInfo(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\teststubtest.py
-----------------------------
> stubtest_typing_stub = """
  Any = object()
  
  class _SpecialForm:
def use_tmp_dir(mod_name: str) -> Iterator[str]:
class _SpecialForm:
class TypeVar:
class ParamSpec:
class Coroutine(Generic[_T_co, _S, _R]): ...
class Iterable(Generic[_T_co]): ...
class Iterator(Iterable[_T_co]): ...
class Mapping(Generic[_K, _V]): ...
class Match(Generic[AnyStr]): ...
class Sequence(Iterable[_T_co]): ...
class Tuple(Sequence[_T_co]): ...
class NamedTuple(tuple[Any, ...]): ...
class _TypedDict(Mapping[str, object]):
def overload(func: _T) -> _T: ...
def type_check_only(func: _T) -> _T: ...
def final(func: _T) -> _T: ...
class object:
class type: ...
class tuple(Sequence[T_co], Generic[T_co]):
class dict(Mapping[KT, VT]): ...
class frozenset(Generic[T]): ...
class function: pass
class ellipsis: pass
class int: ...
class float: ...
class bool(int): ...
class str: ...
class bytes: ...
class list(Sequence[T]): ...
def property(f: T) -> T: ...
def classmethod(f: T) -> T: ...
def staticmethod(f: T) -> T: ...
class EnumMeta(type):
class Enum(metaclass=EnumMeta):
class Flag(Enum):
def run_stubtest_with_stderr(
def run_stubtest(
class Case:
def collect_cases(fn: Callable[..., Iterator[Case]]) -> Callable[..., None]:
class StubtestUnit(unittest.TestCase):
def remove_color_code(s: str) -> str:
class StubtestMiscUnit(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testsubtypes.py
-----------------------------
class SubtypingSuite(Suite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testtransform.py
-----------------------------
> """Identity AST transform test cases"""
  
  from __future__ import annotations
  
class TransformSuite(DataSuite):
def test_transform(testcase: DataDrivenTestCase) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testtypegen.py
-----------------------------
> """Test cases for the type checker: exporting inferred types"""
  
  from __future__ import annotations
  
class TypeExportSuite(DataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testtypes.py
-----------------------------
> """Test cases for mypy types and type operations."""
  
  from __future__ import annotations
  
class TypesSuite(Suite):
class TypeOpsSuite(Suite):
class JoinSuite(Suite):
class MeetSuite(Suite):
class SameTypeSuite(Suite):
class RemoveLastKnownValueSuite(Suite):
class ShallowOverloadMatchingSuite(Suite):
def make_call(*items: tuple[str, str | None]) -> CallExpr:
class TestExpandTypeLimitGetProperType(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\testutil.py
-----------------------------
>         expected = """<?xml version="1.0" encoding="utf-8"?>
  <testsuite errors="0" failures="0" name="mypy" skips="0" tests="1" time="1.230">
    <testcase classname="mypy" file="mypy" line="1" name="mypy-py3.14-test-plat" time="1.230">
    </testcase>
class TestGetTerminalSize(TestCase):
class TestWriteJunitXml(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\test_config_parser.py
-----------------------------
def chdir(target: Path) -> Iterator[None]:
def write_config(path: Path, content: str | None = None) -> None:
class FindConfigFileSuite(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\test_find_sources.py
-----------------------------
class FakeFSCache(FileSystemCache):
def normalise_path(path: str) -> str:
def normalise_build_source_list(sources: list[BuildSource]) -> list[tuple[str, str | None]]:
def crawl(finder: SourceFinder, f: str) -> tuple[str, str]:
def find_sources_in_dir(finder: SourceFinder, f: str) -> list[tuple[str, str | None]]:
def find_sources(
class SourceFinderSuite(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\test_ref_info.py
-----------------------------
> """Test exporting line-level reference information (undocumented feature)"""
  
  from __future__ import annotations
  
class RefInfoSuite(DataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\typefixture.py
-----------------------------
> """Fixture used in type-related test cases.
  
  It contains class TypeInfos and Type objects.
class TypeFixture:
class InterfaceTypeFixture(TypeFixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\update_data.py
-----------------------------
def update_testcase_output(
def _iter_fixes(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\visitors.py
-----------------------------
> """Visitor classes pulled out from different tests
  
  These are here because we don't currently support having interpreted
  classes subtype compiled ones but pytest grabs the python file
class SkippedNodeSearcher(TraverserVisitor):
def ignore_node(node: Expression) -> bool:
class TypeAssertTransformVisitor(TransformVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\test\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\api.py
-----------------------------
> """This module makes it possible to use mypy as part of a Python application.
  
  Since mypy still changes, the API was kept utterly simple and non-intrusive.
  It just mimics command line activation without starting a new interpreter.
def _run(main_wrapper: Callable[[TextIO, TextIO], None]) -> tuple[str, str, int]:
def run(args: list[str]) -> tuple[str, str, int]:
def run_dmypy(args: list[str]) -> tuple[str, str, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\applytype.py
-----------------------------
>     """Apply generic type arguments to a callable type.
  
      For example, applying [int] to 'def [T] (T) -> T' results in
      'def (int) -> int'.
def get_target_type(
def apply_generic_arguments(
def apply_poly(tp: CallableType, poly_tvars: Sequence[TypeVarLikeType]) -> CallableType | None:
class PolyTranslationError(Exception):
class PolyTranslator(TypeTranslator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\argmap.py
-----------------------------
> """Utilities for mapping between actual and formal arguments (and their types)."""
  
  from __future__ import annotations
  
def map_actuals_to_formals(
def map_formals_to_actuals(
class ArgTypeExpander:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\binder.py
-----------------------------
>     """A Frame represents a specific point in the execution of a program.
  
      It carries information about the current types of expressions at
      that point, arising either from assignments to those expressions
class CurrentType(NamedTuple):
class Frame:
class ConditionalTypeBinder:
def get_declaration(expr: BindableExpression) -> Type | None:
def collapse_variadic_union(typ: UnionType) -> Type:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\bogus_type.py
-----------------------------
> """A Bogus[T] type alias for marking when we subvert the type system
  
  We need this for compiling with mypyc, which inserts runtime
  typechecks that cause problems when we subvert the type system. So

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\build.py
-----------------------------
> """Facilities to analyze entire programs, including imported modules.
  
  Parse and analyze the source files of a program in the correct order
  (based on file dependencies), and collect the results.
class BuildResult:
def build(
def _build(
def default_data_dir() -> str:
def normpath(path: str, options: Options) -> str:
class CacheMeta(NamedTuple):
class FgDepMeta(TypedDict):
def cache_meta_from_dict(meta: dict[str, Any], data_json: str) -> CacheMeta:
def import_priority(imp: ImportBase, toplevel_priority: int) -> int:
def load_plugins_from_config(
def load_plugins(
def take_module_snapshot(module: types.ModuleType) -> str:
def find_config_file_line_number(path: str, section: str, setting_name: str) -> int:
class BuildManager:
def deps_to_json(x: dict[str, set[str]]) -> bytes:
def write_deps_cache(
def invert_deps(deps: dict[str, set[str]], graph: Graph) -> dict[str, dict[str, set[str]]]:
def generate_deps_for_cache(manager: BuildManager, graph: Graph) -> dict[str, dict[str, set[str]]]:
def write_plugins_snapshot(manager: BuildManager) -> None:
def read_plugins_snapshot(manager: BuildManager) -> dict[str, str] | None:
def read_quickstart_file(
def read_deps_cache(manager: BuildManager, graph: Graph) -> dict[str, FgDepMeta] | None:
def _load_json_file(
def _cache_dir_prefix(options: Options) -> str:
def add_catch_all_gitignore(target_dir: str) -> None:
def exclude_from_backups(target_dir: str) -> None:
def create_metastore(options: Options) -> MetadataStore:
def get_cache_names(id: str, path: str, options: Options) -> tuple[str, str, str | None]:
def find_cache_meta(id: str, path: str, manager: BuildManager) -> CacheMeta | None:
def validate_meta(
def compute_hash(text: str) -> str:
def write_cache(
def delete_cache(id: str, path: str, manager: BuildManager) -> None:
class ModuleNotFound(Exception):
class State:
def find_module_and_diagnose(
def exist_added_packages(suppressed: list[str], manager: BuildManager, options: Options) -> bool:
def find_module_simple(id: str, manager: BuildManager) -> str | None:
def find_module_with_reason(id: str, manager: BuildManager) -> ModuleSearchResult:
def in_partial_package(id: str, manager: BuildManager) -> bool:
def module_not_found(
def skipping_module(
def skipping_ancestor(manager: BuildManager, id: str, path: str, ancestor_for: State) -> None:
def log_configuration(manager: BuildManager, sources: list[BuildSource]) -> None:
def dispatch(sources: list[BuildSource], manager: BuildManager, stdout: TextIO) -> Graph:
class NodeInfo:
def dump_timing_stats(path: str, graph: Graph) -> None:
def dump_line_checking_stats(path: str, graph: Graph) -> None:
def dump_graph(graph: Graph, stdout: TextIO | None = None) -> None:
def load_graph(
def process_graph(graph: Graph, manager: BuildManager) -> None:
def order_ascc(graph: Graph, ascc: AbstractSet[str], pri_max: int = PRI_ALL) -> list[str]:
def process_fresh_modules(graph: Graph, modules: list[str], manager: BuildManager) -> None:
def process_stale_scc(graph: Graph, scc: list[str], manager: BuildManager) -> None:
def sorted_components(
def deps_filtered(graph: Graph, vertices: AbstractSet[str], id: str, pri_max: int) -> list[str]:
def missing_stubs_file(cache_dir: str) -> str:
def record_missing_stub_packages(cache_dir: str, missing_stub_packages: set[str]) -> None:
def is_silent_import_module(manager: BuildManager, path: str) -> bool:
def write_undocumented_ref_info(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checker.py
-----------------------------
> """Mypy type checker."""
  
  from __future__ import annotations
  
class DeferredNode(NamedTuple):
class FineGrainedDeferredNode(NamedTuple):
class PartialTypeScope(NamedTuple):
class TypeChecker(NodeVisitor[None], TypeCheckerSharedApi):
class CollectArgTypeVarTypes(TypeTraverserVisitor):
def conditional_types(
def conditional_types(
def conditional_types(
def conditional_types_to_typemaps(
def gen_unique_name(base: str, table: SymbolTable) -> str:
def is_true_literal(n: Expression) -> bool:
def is_false_literal(n: Expression) -> bool:
def is_literal_none(n: Expression) -> bool:
def is_literal_not_implemented(n: Expression) -> bool:
def _is_empty_generator_function(func: FuncItem) -> bool:
def builtin_item_type(tp: Type) -> Type | None:
def and_conditional_maps(m1: TypeMap, m2: TypeMap, use_meet: bool = False) -> TypeMap:
def or_conditional_maps(m1: TypeMap, m2: TypeMap, coalesce_any: bool = False) -> TypeMap:
def reduce_conditional_maps(
def convert_to_typetype(type_map: TypeMap) -> TypeMap:
def flatten(t: Expression) -> list[Expression]:
def flatten_types(t: Type) -> list[Type]:
def expand_func(defn: FuncItem, map: dict[TypeVarId, Type]) -> FuncItem:
class TypeTransformVisitor(TransformVisitor):
def are_argument_counts_overlapping(t: CallableType, s: CallableType) -> bool:
def expand_callable_variants(c: CallableType) -> list[CallableType]:
def is_unsafe_overlapping_overload_signatures(
def detach_callable(typ: CallableType, class_type_vars: list[TypeVarLikeType]) -> CallableType:
def overload_can_never_match(signature: CallableType, other: CallableType) -> bool:
def is_more_general_arg_prefix(t: FunctionLike, s: FunctionLike) -> bool:
def is_same_arg_prefix(t: CallableType, s: CallableType) -> bool:
def infer_operator_assignment_method(typ: Type, operator: str) -> tuple[bool, str]:
def _find_inplace_method(inst: Instance, method: str, operator: str) -> str | None:
def is_valid_inferred_type(
class InvalidInferredTypes(BoolTypeQuery):
class SetNothingToAny(TypeTranslator):
def is_node_static(node: Node | None) -> bool | None:
class DisjointDict(Generic[TKey, TValue]):
def group_comparison_operands(
def is_typed_callable(c: Type | None) -> bool:
def is_untyped_decorator(typ: Type | None) -> bool:
def is_static(func: FuncBase | Decorator) -> bool:
def is_property(defn: SymbolNode) -> bool:
def is_settable_property(defn: SymbolNode | None) -> TypeGuard[OverloadedFuncDef]:
def is_custom_settable_property(defn: SymbolNode | None) -> bool:
def get_property_type(t: ProperType) -> ProperType:
def is_subset_no_promote(left: Type, right: Type) -> bool:
def is_overlapping_types_for_overload(left: Type, right: Type) -> bool:
def is_private(node_name: str) -> bool:
def is_string_literal(typ: Type) -> bool:
def has_bool_item(typ: ProperType) -> bool:
def collapse_walrus(e: Expression) -> Expression:
def find_last_var_assignment_line(n: Node, v: Var) -> int:
class VarAssignVisitor(TraverserVisitor):
def is_ambiguous_mix_of_enums(types: list[Type]) -> bool:
def _ambiguous_enum_variants(types: list[Type]) -> set[str]:
def is_typeddict_type_context(lvalue_type: Type | None) -> bool:
def is_method(node: SymbolNode | None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checker_shared.py
-----------------------------
> """Shared definitions used by different parts of type checker."""
  
  from __future__ import annotations
  
class TypeRange(NamedTuple):
class ExpressionCheckerSharedApi:
class TypeCheckerSharedApi(CheckerPluginInterface):
class CheckerScope:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checker_state.py
-----------------------------
class TypeCheckerState:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checkexpr.py
-----------------------------
> """Expression type checker. This file is conceptually part of TypeChecker."""
  
  from __future__ import annotations
  
class TooManyUnions(Exception):
def allow_fast_container_literal(t: Type) -> bool:
def extract_refexpr_names(expr: RefExpr) -> set[str]:
class Finished(Exception):
class UseReverse(enum.Enum):
class ExpressionChecker(ExpressionVisitor[Type], ExpressionCheckerSharedApi):
def has_any_type(t: Type, ignore_in_type_obj: bool = False) -> bool:
class HasAnyType(types.BoolTypeQuery):
def has_coroutine_decorator(t: Type) -> bool:
def is_async_def(t: Type) -> bool:
def is_non_empty_tuple(t: Type) -> bool:
def is_duplicate_mapping(
def replace_callable_return_type(c: CallableType, new_ret_type: Type) -> CallableType:
class ArgInferSecondPassQuery(types.BoolTypeQuery):
def has_erased_component(t: Type | None) -> bool:
class HasErasedComponentsQuery(types.BoolTypeQuery):
def has_uninhabited_component(t: Type | None) -> bool:
class HasUninhabitedComponentsQuery(types.BoolTypeQuery):
def arg_approximate_similarity(actual: Type, formal: Type) -> bool:
def any_causes_overload_ambiguity(
def all_same_types(types: list[Type]) -> bool:
def merge_typevars_in_callables_by_name(
def try_getting_literal(typ: Type) -> ProperType:
def is_expr_literal_type(node: Expression) -> bool:
def has_bytes_component(typ: Type) -> bool:
def type_info_from_type(typ: Type) -> TypeInfo | None:
def is_operator_method(fullname: str | None) -> bool:
def get_partial_instance_type(t: Type | None) -> PartialType | None:
def is_type_type_context(context: Type | None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checkmember.py
-----------------------------
> """Type checking of attribute access"""
  
  from __future__ import annotations
  
class MemberContext:
def analyze_member_access(
def _analyze_member_access(
def may_be_awaitable_attribute(
def report_missing_attribute(
def analyze_instance_member_access(
def validate_super_call(node: FuncBase, mx: MemberContext) -> None:
def analyze_type_callable_member_access(name: str, typ: FunctionLike, mx: MemberContext) -> Type:
def analyze_type_type_member_access(
def analyze_union_member_access(name: str, typ: UnionType, mx: MemberContext) -> Type:
def analyze_none_member_access(name: str, typ: NoneType, mx: MemberContext) -> Type:
def analyze_member_var_access(
def check_final_member(name: str, info: TypeInfo, msg: MessageBuilder, ctx: Context) -> None:
def analyze_descriptor_access(descriptor_type: Type, mx: MemberContext) -> Type:
def analyze_descriptor_assign(descriptor_type: Instance, mx: MemberContext) -> Type:
def is_instance_var(var: Var) -> bool:
def analyze_var(
def expand_without_binding(
def expand_and_bind_callable(
def expand_self_type_if_needed(
def check_self_arg(
def analyze_class_attribute_access(
def apply_class_attr_hook(
def analyze_enum_class_attribute_access(
def analyze_typeddict_access(
def add_class_tvars(
def analyze_decorator_or_funcbase_access(
def bind_self_fast(method: F, original_type: Type | None = None) -> F:
def has_operator(typ: Type, op_method: str, named_type: Callable[[str], Instance]) -> bool:
def instance_fallback(typ: ProperType, named_type: Callable[[str], Instance]) -> Instance:
def meta_has_operator(item: Type, op_method: str, named_type: Callable[[str], Instance]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checkpattern.py
-----------------------------
> """Pattern checker. This file is conceptually part of TypeChecker."""
  
  from __future__ import annotations
  
class PatternType(NamedTuple):
class PatternChecker(PatternVisitor[PatternType]):
def get_match_arg_names(typ: TupleType) -> list[str | None]:
def get_var(expr: Expression) -> Var:
def get_type_range(typ: Type) -> TypeRange:
def is_uninhabited(typ: Type) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\checkstrformat.py
-----------------------------
> """
  Format expression type checker.
  
  This file is conceptually part of ExpressionChecker and TypeChecker. Main functionality
def compile_format_re() -> Pattern[str]:
def compile_new_format_re(custom_spec: bool) -> Pattern[str]:
class ConversionSpecifier:
def parse_conversion_specifiers(format_str: str) -> list[ConversionSpecifier]:
def parse_format_value(
def find_non_escaped_targets(
class StringFormatterChecker:
def has_type_component(typ: Type, fullname: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\config_parser.py
-----------------------------
>     """Provide a fallback value if the Python version is unsupported."""
  
      def __init__(self, *args: Any, fallback: tuple[int, int]) -> None:
          self.fallback = fallback
class VersionTypeError(argparse.ArgumentTypeError):
def parse_version(v: str | float) -> tuple[int, int]:
def try_split(v: str | Sequence[str], split_regex: str = "[,]") -> list[str]:
def validate_codes(codes: list[str]) -> list[str]:
def validate_package_allow_list(allow_list: list[str]) -> list[str]:
def expand_path(path: str) -> str:
def str_or_array_as_list(v: str | Sequence[str]) -> list[str]:
def split_and_match_files_list(paths: Sequence[str]) -> list[str]:
def split_and_match_files(paths: str) -> list[str]:
def check_follow_imports(choice: str) -> str:
def check_junit_format(choice: str) -> str:
def split_commas(value: str) -> list[str]:
def _parse_individual_file(
def _find_config_file(
def parse_config_file(
def get_prefix(file_read: str, name: str) -> str:
def is_toml(filename: str) -> bool:
def destructure_overrides(toml_data: dict[str, Any]) -> dict[str, Any]:
def parse_section(
def convert_to_boolean(value: Any | None) -> bool:
def split_directive(s: str) -> tuple[list[str], list[str]]:
def mypy_comments_to_config_map(line: str, template: Options) -> tuple[dict[str, str], list[str]]:
def parse_mypy_comments(
def get_config_module_names(filename: str | None, modules: list[str]) -> str:
class ConfigTOMLValueError(ValueError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\constant_fold.py
-----------------------------
> """Constant folding of expressions.
  
  For example, 3 + 5 can be constant folded into 8.
def constant_fold_expr(expr: Expression, cur_mod_id: str) -> ConstantValue | None:
def constant_fold_binary_op(
def constant_fold_binary_int_op(op: str, left: int, right: int) -> int | float | None:
def constant_fold_binary_float_op(op: str, left: int | float, right: int | float) -> float | None:
def constant_fold_unary_op(op: str, value: ConstantValue) -> int | float | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\constraints.py
-----------------------------
> """Type inference constraints."""
  
  from __future__ import annotations
  
class Constraint:
def infer_constraints_for_callable(
def infer_constraints(
def _infer_constraints(
def _is_type_type(tp: ProperType) -> TypeGuard[TypeType | UnionType]:
def _unwrap_type_type(tp: TypeType | UnionType) -> ProperType:
def infer_constraints_if_possible(
def select_trivial(options: Sequence[list[Constraint] | None]) -> list[list[Constraint]]:
def merge_with_any(constraint: Constraint) -> Constraint:
def handle_recursive_union(template: UnionType, actual: Type, direction: int) -> list[Constraint]:
def any_constraints(options: list[list[Constraint] | None], *, eager: bool) -> list[Constraint]:
def filter_satisfiable(option: list[Constraint] | None) -> list[Constraint] | None:
def exclude_non_meta_vars(option: list[Constraint] | None) -> list[Constraint] | None:
def is_same_constraints(x: list[Constraint], y: list[Constraint]) -> bool:
def is_same_constraint(c1: Constraint, c2: Constraint) -> bool:
def is_similar_constraints(x: list[Constraint], y: list[Constraint]) -> bool:
def _is_similar_constraints(x: list[Constraint], y: list[Constraint]) -> bool:
def simplify_away_incomplete_types(types: Iterable[Type]) -> list[Type]:
def is_complete_type(typ: Type) -> bool:
class CompleteTypeVisitor(TypeQuery[bool]):
class ConstraintBuilderVisitor(TypeVisitor[list[Constraint]]):
def neg_op(op: int) -> int:
def find_matching_overload_item(overloaded: Overloaded, template: CallableType) -> CallableType:
def find_matching_overload_items(
def get_tuple_fallback_from_unpack(unpack: UnpackType) -> TypeInfo:
def repack_callable_args(callable: CallableType, tuple_type: TypeInfo) -> list[Type]:
def build_constraints_for_simple_unpack(
def infer_directed_arg_constraints(left: Type, right: Type, direction: int) -> list[Constraint]:
def infer_callable_arguments_constraints(
def filter_imprecise_kinds(cs: list[Constraint]) -> list[Constraint]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\copytype.py
-----------------------------
>     """Create a shallow copy of a type.
  
      This can be used to mutate the copy with truthiness information.
  
def copy_type(t: ProperType) -> ProperType:
class TypeShallowCopier(TypeVisitor[ProperType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\defaults.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\dmypy_os.py
-----------------------------
>     """Is the process alive?"""
      if sys.platform == "win32":
          # why can't anything be easy...
          status = DWORD()
def alive(pid: int) -> bool:
def kill(pid: int) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\dmypy_server.py
-----------------------------
> """Server for mypy daemon mode.
  
  This implements a daemon process which keeps useful state in memory
  to enable fine-grained incremental reprocessing of changes.
def process_start_options(flags: list[str], allow_sources: bool) -> Options:
def ignore_suppressed_imports(module: str) -> bool:
class Server:
def get_meminfo() -> dict[str, Any]:
def find_all_sources_in_build(
def add_all_sources_to_changed(sources: list[BuildSource], changed: list[tuple[str, str]]) -> None:
def fix_module_deps(graph: mypy.build.Graph) -> None:
def filter_out_missing_top_level_packages(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\dmypy_util.py
-----------------------------
> """Shared code between dmypy.py and dmypy_server.py.
  
  This should be pretty lightweight and not depend on other mypy code (other than ipc).
def receive(connection: IPCBase) -> Any:
def send(connection: IPCBase, data: Any) -> None:
class WriteToConn(TextIO):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\erasetype.py
-----------------------------
>     """Erase any type variables from a type.
  
      Also replace tuple types with the corresponding concrete types.
  
def erase_type(typ: Type) -> ProperType:
class EraseTypeVisitor(TypeVisitor[ProperType]):
def erase_typevars(t: Type, ids_to_erase: Container[TypeVarId] | None = None) -> Type:
def replace_meta_vars(t: Type, target_type: Type) -> Type:
class TypeVarEraser(TypeTranslator):
def remove_instance_last_known_values(t: Type) -> Type:
class LastKnownValueEraser(TypeTranslator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\errorcodes.py
-----------------------------
> """Classification of possible errors mypy can detect.
  
  These can be used for filtering specific errors.
class ErrorCode:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\errors.py
-----------------------------
>     """Representation of a single error message."""
  
      # Description of a sequence of imports that refer to the source file
      # related to this error. Each item is a (path, line number) tuple.
class ErrorInfo:
class ErrorWatcher:
class IterationDependentErrors:
class IterationErrorWatcher(ErrorWatcher):
class Errors:
class CompileError(Exception):
def remove_path_prefix(path: str, prefix: str | None) -> str:
def report_internal_error(
class MypyError:
def create_errors(error_tuples: list[ErrorTuple]) -> list[MypyError]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\error_formatter.py
-----------------------------
> """Defines the different custom formats in which mypy can output."""
  
  import json
  from abc import ABC, abstractmethod
class ErrorFormatter(ABC):
class JSONFormatter(ErrorFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\evalexpr.py
-----------------------------
> """
  
  Evaluate an expression.
  
class _NodeEvaluator(ExpressionVisitor[object]):
def evaluate_expression(expr: mypy.nodes.Expression) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\expandtype.py
-----------------------------
>     """Substitute any type variable references in a type given by a type
      environment.
def expand_type(typ: CallableType, env: Mapping[TypeVarId, Type]) -> CallableType: ...
def expand_type(typ: ProperType, env: Mapping[TypeVarId, Type]) -> ProperType: ...
def expand_type(typ: Type, env: Mapping[TypeVarId, Type]) -> Type: ...
def expand_type(typ: Type, env: Mapping[TypeVarId, Type]) -> Type:
def expand_type_by_instance(typ: CallableType, instance: Instance) -> CallableType: ...
def expand_type_by_instance(typ: ProperType, instance: Instance) -> ProperType: ...
def expand_type_by_instance(typ: Type, instance: Instance) -> Type: ...
def expand_type_by_instance(typ: Type, instance: Instance) -> Type:
def freshen_function_type_vars(callee: F) -> F:
class HasGenericCallable(BoolTypeQuery):
def freshen_all_functions_type_vars(t: T) -> T:
class FreshenCallableVisitor(mypy.type_visitor.TypeTranslator):
class ExpandTypeVisitor(TrivialSyntheticTypeTranslator):
def expand_self_type(var: Var, typ: ProperType, replacement: ProperType) -> ProperType: ...
def expand_self_type(var: Var, typ: Type, replacement: Type) -> Type: ...
def expand_self_type(var: Var, typ: Type, replacement: Type) -> Type:
def remove_trivial(types: Iterable[Type]) -> list[Type]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\exprtotype.py
-----------------------------
> """Translate an Expression to a Type value."""
  
  from __future__ import annotations
  
class TypeTranslationError(Exception):
def _extract_argument_name(expr: Expression) -> str | None:
def expr_to_unanalyzed_type(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\fastparse.py
-----------------------------
>     """Parse a source file, without doing any semantic analysis.
  
      Return the parse tree. If errors is not provided, raise ParseError
      on failure. Otherwise, use the errors object to report parse errors.
def ast3_parse(
def parse(
def parse_type_ignore_tag(tag: str | None) -> list[str] | None:
def parse_type_comment(
def parse_type_string(
def is_no_type_check_decorator(expr: ast3.expr) -> bool:
def find_disallowed_expression_in_annotation_scope(expr: ast3.expr | None) -> ast3.expr | None:
class ASTConverter:
class TypeConverter:
def stringify_name(n: AST) -> str | None:
class FindAttributeAssign(TraverserVisitor):
class FindYield(TraverserVisitor):
def is_possible_trivial_body(s: list[Statement]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\find_sources.py
-----------------------------
> """Routines for finding the sources that mypy will check"""
  
  from __future__ import annotations
  
class InvalidSourceList(Exception):
def create_source_list(
def keyfunc(name: str) -> tuple[bool, int, str]:
def normalise_package_base(root: str) -> str:
def get_explicit_package_bases(options: Options) -> list[str] | None:
class SourceFinder:
def module_join(parent: str, child: str) -> str:
def strip_py(arg: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\fixup.py
-----------------------------
> """Fix up various things after deserialization."""
  
  from __future__ import annotations
  
def fixup_module(tree: MypyFile, modules: dict[str, MypyFile], allow_missing: bool) -> None:
class NodeFixer(NodeVisitor[None]):
class TypeFixer(TypeVisitor[None]):
def lookup_fully_qualified_typeinfo(
def lookup_fully_qualified_alias(
def missing_info(modules: dict[str, MypyFile]) -> TypeInfo:
def missing_alias() -> TypeAlias:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\freetree.py
-----------------------------
> """Generic node traverser visitor"""
  
  from __future__ import annotations
  
class TreeFreer(TraverserVisitor):
def free_tree(tree: MypyFile) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\fscache.py
-----------------------------
> """Interface for accessing the file system with automatic caching.
  
  The idea is to cache the results of any file system state reads during
  a single transaction. This has two main benefits:
class FileSystemCache:
def copy_os_error(e: OSError) -> OSError:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\fswatcher.py
-----------------------------
> """Watch parts of the file system for changes."""
  
  from __future__ import annotations
  
class FileData(NamedTuple):
class FileSystemWatcher:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\gclogger.py
-----------------------------
>     """Context manager to log GC stats and overall time."""
  
      def __enter__(self) -> GcLogger:
          self.gc_start_time: float | None = None
class GcLogger:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\git.py
-----------------------------
> """Git utilities."""
  
  # Used also from setup.py, so don't pull in anything additional here (like mypy or typing):
  from __future__ import annotations
def is_git_repo(dir: str) -> bool:
def have_git() -> bool:
def git_revision(dir: str) -> bytes:
def is_dirty(dir: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\graph_utils.py
-----------------------------
> """Helpers for manipulations with graphs."""
  
  from __future__ import annotations
  
def strongly_connected_components(
def prepare_sccs(
def topsort(data: dict[T, set[T]]) -> Iterable[set[T]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\indirection.py
-----------------------------
>     """Returns the module names of a fully qualified type name."""
      if type_name is not None:
          # Discard the first one, which is just the qualified name of the type
          possible_module_names = split_module_names(type_name)
def extract_module_names(type_name: str | None) -> list[str]:
class TypeIndirectionVisitor(TypeVisitor[None]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\infer.py
-----------------------------
> """Utilities for type argument inference."""
  
  from __future__ import annotations
  
class ArgumentInferContext(NamedTuple):
def infer_function_type_arguments(
def infer_type_arguments(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\inspections.py
-----------------------------
>     """Format expression span as in mypy error messages."""
      return f"{expr.line}:{expr.column + 1}:{expr.end_line}:{expr.end_column}"
  
  
def node_starts_after(o: Node, line: int, column: int) -> bool:
def node_ends_before(o: Node, line: int, column: int) -> bool:
def expr_span(expr: Expression) -> str:
def get_instance_fallback(typ: ProperType) -> list[Instance]:
def find_node(name: str, info: TypeInfo) -> Var | FuncBase | None:
def find_module_by_fullname(fullname: str, modules: dict[str, State]) -> State | None:
class SearchVisitor(ExtendedTraverserVisitor):
def find_by_location(
class SearchAllVisitor(ExtendedTraverserVisitor):
def find_all_by_location(tree: MypyFile, line: int, column: int) -> list[Expression]:
class InspectionEngine:
def parse_location(location: str) -> tuple[str, list[int]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\ipc.py
-----------------------------
> """Cross platform abstractions for inter-process communication
  
  On Unix, this uses AF_UNIX sockets.
  On Windows, this uses NamedPipes.
class IPCException(Exception):
class IPCBase:
class IPCClient(IPCBase):
class IPCServer(IPCBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\join.py
-----------------------------
> """Calculation of the least upper bound types (joins)."""
  
  from __future__ import annotations
  
class InstanceJoiner:
def trivial_join(s: Type, t: Type) -> Type:
def join_types(
def join_types(s: Type, t: Type, instance_joiner: InstanceJoiner | None = None) -> Type: ...
def join_types(s: Type, t: Type, instance_joiner: InstanceJoiner | None = None) -> Type:
class TypeJoinVisitor(TypeVisitor[ProperType]):
def is_better(t: Type, s: Type) -> bool:
def normalize_callables(s: ProperType, t: ProperType) -> tuple[ProperType, ProperType]:
def is_similar_callables(t: CallableType, s: CallableType) -> bool:
def is_similar_params(t: Parameters, s: Parameters) -> bool:
def update_callable_ids(c: CallableType, ids: list[TypeVarId]) -> CallableType:
def match_generic_callables(t: CallableType, s: CallableType) -> tuple[CallableType, CallableType]:
def join_similar_callables(t: CallableType, s: CallableType) -> CallableType:
def safe_join(t: Type, s: Type) -> Type:
def safe_meet(t: Type, s: Type) -> Type:
def combine_similar_callables(t: CallableType, s: CallableType) -> CallableType:
def combine_arg_names(
def object_from_instance(instance: Instance) -> Instance:
def object_or_any_from_type(typ: ProperType) -> ProperType:
def join_type_list(types: Sequence[Type]) -> Type:
def unpack_callback_protocol(t: Instance) -> ProperType | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\literals.py
-----------------------------
>     """Generate a hashable, (mostly) opaque key for expressions supported by the binder.
  
      These allow using expressions as dictionary keys based on structural/value
      matching (instead of based on expression identity).
def literal_hash(e: Expression) -> Key | None:
def literal(e: Expression) -> int:
def subkeys(key: Key) -> Iterable[Key]:
def extract_var_from_literal_hash(key: Key) -> Var | None:
class _Hasher(ExpressionVisitor[Optional[Key]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\lookup.py
-----------------------------
> """
  This is a module for various lookup functions:
  functions that will find a semantic node by its name.
def lookup_fully_qualified(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\main.py
-----------------------------
> """Mypy type checker command line tool."""
  
  from __future__ import annotations
  
def stat_proxy(path: str) -> os.stat_result:
def main(
def run_build(
def show_messages(
class AugmentedHelpFormatter(argparse.RawDescriptionHelpFormatter):
def invert_flag_name(flag: str) -> str:
class PythonExecutableInferenceError(Exception):
def python_executable_prefix(v: str) -> list[str]:
def _python_executable_from_version(python_version: tuple[int, int]) -> str:
def infer_python_executable(options: Options, special_opts: argparse.Namespace) -> None:
class CapturableArgumentParser(argparse.ArgumentParser):
class CapturableVersionAction(argparse.Action):
def process_options(
def process_package_roots(
def process_cache_map(
def maybe_write_junit_xml(
def fail(msg: str, stderr: TextIO, options: Options) -> NoReturn:
def read_types_packages_to_install(cache_dir: str, after_run: bool) -> list[str]:
def install_types(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\maptype.py
-----------------------------
>     """Produce a supertype of `instance` that is an Instance
      of `superclass`, mapping type arguments up the chain of bases.
  
      If `superclass` is not a nominal superclass of `instance.type`,
def map_instance_to_supertype(instance: Instance, superclass: TypeInfo) -> Instance:
def map_instance_to_supertypes(instance: Instance, supertype: TypeInfo) -> list[Instance]:
def class_derivation_paths(typ: TypeInfo, supertype: TypeInfo) -> list[list[TypeInfo]]:
def map_instance_to_direct_supertypes(instance: Instance, supertype: TypeInfo) -> list[Instance]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\meet.py
-----------------------------
>     """Return one of types (expanded) if it is a subtype of other, otherwise bottom type."""
      if is_subtype(s, t):
          return get_proper_type(s)
      elif is_subtype(t, s):
def trivial_meet(s: Type, t: Type) -> ProperType:
def meet_types(s: Type, t: Type) -> ProperType:
def narrow_declared_type(declared: Type, narrowed: Type) -> Type:
def get_possible_variants(typ: Type) -> list[Type]:
def is_enum_overlapping_union(x: ProperType, y: ProperType) -> bool:
def is_literal_in_union(x: ProperType, y: ProperType) -> bool:
def is_object(t: ProperType) -> bool:
def is_overlapping_types(
def is_overlapping_erased_types(
def are_typed_dicts_overlapping(
def are_tuples_overlapping(
def expand_tuple_if_possible(tup: TupleType, target: int) -> TupleType:
def adjust_tuple(left: ProperType, r: ProperType) -> TupleType | None:
def is_tuple(typ: Type) -> bool:
class TypeMeetVisitor(TypeVisitor[ProperType]):
def meet_similar_callables(t: CallableType, s: CallableType) -> CallableType:
def meet_type_list(types: list[Type]) -> Type:
def typed_dict_mapping_pair(left: Type, right: Type) -> bool:
def typed_dict_mapping_overlap(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\memprofile.py
-----------------------------
> """Utility for dumping memory usage stats.
  
  This is tailored to mypy and knows (a little) about which list objects are
  owned by particular AST nodes, etc.
def collect_memory_stats() -> tuple[dict[str, int], dict[str, int]]:
def print_memory_profile(run_gc: bool = True) -> None:
def find_recursive_objects(objs: list[object]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\messages.py
-----------------------------
> """Facilities for generating error messages during type checking.
  
  Don't add any non-trivial message construction logic to the type
  checker, as it can compromise clarity and make messages less
class MessageBuilder:
def quote_type_string(type_string: str) -> str:
def format_callable_args(
def format_type_inner(
def collect_all_named_types(t: Type) -> list[Type]:
class CollectAllNamedTypesQuery(TypeTraverserVisitor):
def scoped_type_var_name(t: TypeVarLikeType) -> str:
def find_type_overlaps(*types: Type) -> set[str]:
def format_type(
def format_type_bare(
def format_type_distinctly(*types: Type, options: Options, bare: bool = False) -> tuple[str, ...]:
def pretty_class_or_static_decorator(tp: CallableType) -> str | None:
def pretty_callable(tp: CallableType, options: Options, skip_self: bool = False) -> str:
def variance_string(variance: int) -> str:
def get_missing_protocol_members(left: Instance, right: Instance, skip: list[str]) -> list[str]:
def get_conflict_protocol_types(
def get_bad_protocol_flags(
def capitalize(s: str) -> str:
def extract_type(name: str) -> str:
def strip_quotes(s: str) -> str:
def format_string_list(lst: list[str]) -> str:
def format_item_name_list(s: Iterable[str]) -> str:
def callable_name(type: FunctionLike) -> str | None:
def for_function(callee: CallableType) -> str:
def wrong_type_arg_count(low: int, high: int, act: str, name: str) -> str:
def find_defining_module(modules: dict[str, MypyFile], typ: CallableType) -> MypyFile | None:
def _real_quick_ratio(a: str, b: str) -> float:
def best_matches(current: str, options: Collection[str], n: int) -> list[str]:
def pretty_seq(args: Sequence[str], conjunction: str) -> str:
def append_invariance_notes(
def append_union_note(
def append_numbers_notes(
def make_inferred_type_note(
def format_key_list(keys: list[str], *, short: bool = False) -> str:
def ignore_last_known_values(t: UnionType) -> Type:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\message_registry.py
-----------------------------
> """Message constants for generating error messages during type checking.
  
  Literal messages should be defined as constants in this module so they won't get out of sync
  if used in more than one place, and so that they can be easily introspected. These messages 
are
class ErrorMessage(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\metastore.py
-----------------------------
> """Interfaces for accessing metadata.
  
  We provide two implementations.
   * The "classic" file system implementation, which uses a directory
class MetadataStore:
def random_string() -> str:
class FilesystemMetadataStore(MetadataStore):
def connect_db(db_file: str) -> sqlite3.Connection:
class SqliteMetadataStore(MetadataStore):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\mixedtraverser.py
-----------------------------
>     """Recursive traversal of both Node and Type objects."""
  
      def __init__(self) -> None:
          self.in_type_alias_expr = False
class MixedTraverserVisitor(TraverserVisitor, TypeTraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\modulefinder.py
-----------------------------
> """Low-level infrastructure to find modules.
  
  This builds on fscache.py; find_sources.py builds on top of this.
class SearchPaths:
class ModuleNotFoundReason(Enum):
class BuildSource:
class BuildSourceSet:
class FindModuleCache:
def matches_exclude(
def matches_gitignore(subpath: str, fscache: FileSystemCache, verbose: bool) -> bool:
def find_gitignores(dir: str) -> list[tuple[str, PathSpec]]:
def is_init_file(path: str) -> bool:
def verify_module(fscache: FileSystemCache, id: str, path: str, prefix: str) -> bool:
def highest_init_level(fscache: FileSystemCache, id: str, path: str, prefix: str) -> int:
def mypy_path() -> list[str]:
def default_lib_path(
def get_search_dirs(python_executable: str | None) -> tuple[list[str], list[str]]:
def compute_search_paths(
def load_stdlib_py_versions(custom_typeshed_dir: str | None) -> StdlibVersions:
def parse_version(version: str) -> tuple[int, int]:
def typeshed_py_version(options: Options) -> tuple[int, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\moduleinspect.py
-----------------------------
> """Basic introspection of modules."""
  
  from __future__ import annotations
  
class ModuleProperties:
def is_c_module(module: ModuleType) -> bool:
def is_pyc_only(file: str | None) -> bool:
class InspectError(Exception):
def get_package_properties(package_id: str) -> ModuleProperties:
def worker(tasks: Queue[str], results: Queue[str | ModuleProperties], sys_path: list[str]) -> None:
class ModuleInspect:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\mro.py
-----------------------------
>     """Calculate and set mro (method resolution order).
  
      Raise MroError if cannot determine mro.
def calculate_mro(info: TypeInfo, obj_type: Callable[[], Instance] | None = None) -> None:
class MroError(Exception):
def linearize_hierarchy(
def merge(seqs: list[list[TypeInfo]]) -> list[TypeInfo]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\nodes.py
-----------------------------
> """Abstract syntax tree node classes (i.e. parse tree)."""
  
  from __future__ import annotations
  
class Context:
class Node(Context):
class Statement(Node):
class Expression(Node):
class FakeExpression(Expression):
class SymbolNode(Node):
class MypyFile(SymbolNode):
class ImportBase(Statement):
class Import(ImportBase):
class ImportFrom(ImportBase):
class ImportAll(ImportBase):
class FuncBase(Node):
class OverloadedFuncDef(FuncBase, SymbolNode, Statement):
class Argument(Node):
class TypeParam:
class FuncItem(FuncBase):
class FuncDef(FuncItem, SymbolNode, Statement):
class Decorator(SymbolNode, Statement):
class Var(SymbolNode):
class ClassDef(Statement):
class GlobalDecl(Statement):
class NonlocalDecl(Statement):
class Block(Statement):
class ExpressionStmt(Statement):
class AssignmentStmt(Statement):
class OperatorAssignmentStmt(Statement):
class WhileStmt(Statement):
class ForStmt(Statement):
class ReturnStmt(Statement):
class AssertStmt(Statement):
class DelStmt(Statement):
class BreakStmt(Statement):
class ContinueStmt(Statement):
class PassStmt(Statement):
class IfStmt(Statement):
class RaiseStmt(Statement):
class TryStmt(Statement):
class WithStmt(Statement):
class MatchStmt(Statement):
class TypeAliasStmt(Statement):
class IntExpr(Expression):
class StrExpr(Expression):
def is_StrExpr_list(seq: list[Expression]) -> TypeGuard[list[StrExpr]]:  # noqa: N802
class BytesExpr(Expression):
class FloatExpr(Expression):
class ComplexExpr(Expression):
class EllipsisExpr(Expression):
class StarExpr(Expression):
class RefExpr(Expression):
class NameExpr(RefExpr):
class MemberExpr(RefExpr):
class ArgKind(Enum):
class CallExpr(Expression):
class YieldFromExpr(Expression):
class YieldExpr(Expression):
class IndexExpr(Expression):
class UnaryExpr(Expression):
class AssignmentExpr(Expression):
class OpExpr(Expression):
class ComparisonExpr(Expression):
class SliceExpr(Expression):
class CastExpr(Expression):
class AssertTypeExpr(Expression):
class RevealExpr(Expression):
class SuperExpr(Expression):
class LambdaExpr(FuncItem, Expression):
class ListExpr(Expression):
class DictExpr(Expression):
class TupleExpr(Expression):
class SetExpr(Expression):
class GeneratorExpr(Expression):
class ListComprehension(Expression):
class SetComprehension(Expression):
class DictionaryComprehension(Expression):
class ConditionalExpr(Expression):
class TypeApplication(Expression):
class TypeVarLikeExpr(SymbolNode, Expression):
class TypeVarExpr(TypeVarLikeExpr):
class ParamSpecExpr(TypeVarLikeExpr):
class TypeVarTupleExpr(TypeVarLikeExpr):
class TypeAliasExpr(Expression):
class NamedTupleExpr(Expression):
class TypedDictExpr(Expression):
class EnumCallExpr(Expression):
class PromoteExpr(Expression):
class NewTypeExpr(Expression):
class AwaitExpr(Expression):
class TempNode(Expression):
class TypeInfo(SymbolNode):
class FakeInfo(TypeInfo):
class TypeAlias(SymbolNode):
class PlaceholderNode(SymbolNode):
class SymbolTableNode:
class SymbolTable(dict[str, SymbolTableNode]):
class DataclassTransformSpec:
def get_flags(node: Node, names: list[str]) -> list[str]:
def set_flags(node: Node, flags: list[str]) -> None:
def get_member_expr_fullname(expr: MemberExpr) -> str | None:
def check_arg_kinds(
def check_arg_names(
def is_class_var(expr: NameExpr) -> bool:
def is_final_node(node: SymbolNode | None) -> bool:
def local_definitions(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\operators.py
-----------------------------
> """Information about Python operators"""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\options.py
-----------------------------
>     """Options collected from flags."""
  
      def __init__(self) -> None:
          # Cache for clone_for_module()
class BuildType:
class Options:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\parse.py
-----------------------------
>     """Parse a source file, without doing any semantic analysis.
  
      Return the parse tree. If errors is not provided, raise ParseError
      on failure. Otherwise, use the errors object to report parse errors.
def parse(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\partially_defined.py
-----------------------------
>     """BranchState contains information about variable definition at the end of a branching 
statement.
      `if` and `match` are examples of branching statements.
  
      `may_be_defined` contains variables that were defined in only some branches.
class BranchState:
class BranchStatement:
class ScopeType(Enum):
class Scope:
class DefinedVariableTracker:
class Loop:
class PossiblyUndefinedVariableVisitor(ExtendedTraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\patterns.py
-----------------------------
> """Classes for representing match statement patterns."""
  
  from __future__ import annotations
  
class Pattern(Node):
class AsPattern(Pattern):
class OrPattern(Pattern):
class ValuePattern(Pattern):
class SingletonPattern(Pattern):
class SequencePattern(Pattern):
class StarredPattern(Pattern):
class MappingPattern(Pattern):
class ClassPattern(Pattern):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\plugin.py
-----------------------------
> """Plugin system for extending mypy.
  
  At large scale the plugin system works as following:
  
class TypeAnalyzerPluginInterface:
class AnalyzeTypeContext(NamedTuple):
class CommonPluginApi:
class CheckerPluginInterface:
class SemanticAnalyzerPluginInterface:
class ReportConfigContext(NamedTuple):
class FunctionSigContext(NamedTuple):
class FunctionContext(NamedTuple):
class MethodSigContext(NamedTuple):
class MethodContext(NamedTuple):
class AttributeContext(NamedTuple):
class ClassDefContext(NamedTuple):
class DynamicClassDefContext(NamedTuple):
class Plugin(CommonPluginApi):
class ChainedPlugin(Plugin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\pyinfo.py
-----------------------------
> """Utilities to find the site and prefix information of a Python executable.
  
  This file MUST remain compatible with all Python 3.9+ versions. Since we cannot make any
  assumptions about the Python being executed, this module should not use *any* dependencies 
outside
def getsitepackages() -> list[str]:
def getsyspath() -> list[str]:
def getsearchdirs() -> tuple[list[str], list[str]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\reachability.py
-----------------------------
> """Utilities related to determining the reachability of code (in semantic analysis)."""
  
  from __future__ import annotations
  
def infer_reachability_of_if_statement(s: IfStmt, options: Options) -> None:
def infer_reachability_of_match_statement(s: MatchStmt, options: Options) -> None:
def assert_will_always_fail(s: AssertStmt, options: Options) -> bool:
def infer_condition_value(expr: Expression, options: Options) -> int:
def infer_pattern_value(pattern: Pattern) -> int:
def consider_sys_version_info(expr: Expression, pyversion: tuple[int, ...]) -> int:
def consider_sys_platform(expr: Expression, platform: str) -> int:
def fixed_comparison(left: Targ, op: str, right: Targ) -> int:
def contains_int_or_tuple_of_ints(expr: Expression) -> None | int | tuple[int, ...]:
def contains_sys_version_info(expr: Expression) -> None | int | tuple[int | None, int | None]:
def is_sys_attr(expr: Expression, name: str) -> bool:
def mark_block_unreachable(block: Block) -> None:
class MarkImportsUnreachableVisitor(TraverserVisitor):
def mark_block_mypy_only(block: Block) -> None:
class MarkImportsMypyOnlyVisitor(TraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\refinfo.py
-----------------------------
> """Find line-level reference information from a mypy AST (undocumented feature)"""
  
  from __future__ import annotations
  
class RefInfoVisitor(TraverserVisitor):
def type_fullname(typ: Type, node: SymbolNode | None = None) -> str | None:
def get_undocumented_ref_info_json(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\renaming.py
-----------------------------
>     """Rename variables to allow redefinition of variables.
  
      For example, consider this code:
  
class VariableRenameVisitor(TraverserVisitor):
class LimitedVariableRenameVisitor(TraverserVisitor):
def rename_refs(names: list[NameExpr], index: int) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\report.py
-----------------------------
> """Classes for producing HTML reports about imprecision."""
  
  from __future__ import annotations
  
class Reports:
class AbstractReporter(metaclass=ABCMeta):
def register_reporter(
def alias_reporter(source_reporter: str, target_reporter: str) -> None:
def should_skip_path(path: str) -> bool:
def iterate_python_lines(path: str) -> Iterator[tuple[int, str]]:
class FuncCounterVisitor(TraverserVisitor):
class LineCountReporter(AbstractReporter):
class AnyExpressionsReporter(AbstractReporter):
class LineCoverageVisitor(TraverserVisitor):
class LineCoverageReporter(AbstractReporter):
class FileInfo:
class MemoryXmlReporter(AbstractReporter):
def get_line_rate(covered_lines: int, total_lines: int) -> str:
class CoberturaPackage:
class CoberturaXmlReporter(AbstractReporter):
class AbstractXmlReporter(AbstractReporter):
class XmlReporter(AbstractXmlReporter):
class XsltHtmlReporter(AbstractXmlReporter):
class XsltTxtReporter(AbstractXmlReporter):
class LinePrecisionReporter(AbstractReporter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\scope.py
-----------------------------
> """Track current scope to easily calculate the corresponding fine-grained target.
  
  TODO: Use everywhere where we track targets, including in mypy.errors.
class Scope:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal.py
-----------------------------
> """The semantic analyzer.
  
  Bind names to definitions and do various other simple consistency
  checks.  Populate symbol tables.  The semantic analyzer also detects
class SemanticAnalyzer(
def replace_implicit_first_type(sig: FunctionLike, new: Type) -> FunctionLike:
def refers_to_fullname(node: Expression, fullnames: str | tuple[str, ...]) -> bool:
def refers_to_class_or_function(node: Expression) -> bool:
def find_duplicate(list: list[T]) -> T | None:
def remove_imported_names_from_symtable(names: SymbolTable, module: str) -> None:
def make_any_non_explicit(t: Type) -> Type:
class MakeAnyNonExplicit(TrivialSyntheticTypeTranslator):
def make_any_non_unimported(t: Type) -> Type:
class MakeAnyNonUnimported(TrivialSyntheticTypeTranslator):
def apply_semantic_analyzer_patches(patches: list[tuple[int, Callable[[], None]]]) -> None:
def names_modified_by_assignment(s: AssignmentStmt) -> list[NameExpr]:
def names_modified_in_lvalue(lvalue: Lvalue) -> list[NameExpr]:
def is_same_var_from_getattr(n1: SymbolNode | None, n2: SymbolNode | None) -> bool:
def dummy_context() -> Context:
def is_valid_replacement(old: SymbolTableNode, new: SymbolTableNode) -> bool:
def is_same_symbol(a: SymbolNode | None, b: SymbolNode | None) -> bool:
def is_trivial_body(block: Block) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_classprop.py
-----------------------------
> """Calculate some properties of classes.
  
  These happen after semantic analysis and before type checking.
def calculate_class_abstract_status(typ: TypeInfo, is_stub_file: bool, errors: Errors) -> None:
def check_protocol_status(info: TypeInfo, errors: Errors) -> None:
def calculate_class_vars(info: TypeInfo) -> None:
def add_type_promotion(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_enum.py
-----------------------------
> """Semantic analysis of call-based Enum definitions.
  
  This is conceptually part of mypy.semanal (semantic analyzer pass 2).
class EnumCallAnalyzer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_infer.py
-----------------------------
> """Simple type inference for decorated functions during semantic analysis."""
  
  from __future__ import annotations
  
def infer_decorator_signature_if_simple(
def is_identity_signature(sig: Type) -> bool:
def calculate_return_type(expr: Expression) -> ProperType | None:
def find_fixed_callable_return(expr: Expression) -> CallableType | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_main.py
-----------------------------
> """Top-level logic for the semantic analyzer.
  
  The semantic analyzer binds names, resolves imports, detects various
  special constructs that don't have dedicated AST nodes after parse
def semantic_analysis_for_scc(graph: Graph, scc: list[str], errors: Errors) -> None:
def cleanup_builtin_scc(state: State) -> None:
def semantic_analysis_for_targets(
def restore_saved_attrs(saved_attrs: SavedAttributes) -> None:
def process_top_levels(graph: Graph, scc: list[str], patches: Patches) -> None:
def order_by_subclassing(targets: list[FullTargetInfo]) -> Iterator[FullTargetInfo]:
def process_functions(graph: Graph, scc: list[str], patches: Patches) -> None:
def process_top_level_function(
def get_all_leaf_targets(file: MypyFile) -> list[TargetInfo]:
def semantic_analyze_target(
def check_type_arguments(graph: Graph, scc: list[str], errors: Errors) -> None:
def check_type_arguments_in_targets(
def apply_class_plugin_hooks(graph: Graph, scc: list[str], errors: Errors) -> None:
def apply_hooks_to_class(
def calculate_class_properties(graph: Graph, scc: list[str], errors: Errors) -> None:
def check_blockers(graph: Graph, scc: list[str]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_namedtuple.py
-----------------------------
> """Semantic analysis of named tuple definitions.
  
  This is conceptually part of mypy.semanal.
class NamedTupleAnalyzer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_newtype.py
-----------------------------
> """Semantic analysis of NewType definitions.
  
  This is conceptually part of mypy.semanal (semantic analyzer pass 2).
class NewTypeAnalyzer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_pass1.py
-----------------------------
> """Block/import reachability analysis."""
  
  from __future__ import annotations
  
class SemanticAnalyzerPreAnalysis(TraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_shared.py
-----------------------------
> """Shared definitions used by different parts of semantic analysis."""
  
  from __future__ import annotations
  
class SemanticAnalyzerCoreInterface:
class SemanticAnalyzerInterface(SemanticAnalyzerCoreInterface):
def set_callable_name(sig: Type, fdef: FuncDef) -> ProperType:
def calculate_tuple_fallback(typ: TupleType) -> None:
class _NamedTypeCallback(Protocol):
def paramspec_args(
def paramspec_kwargs(
class HasPlaceholders(BoolTypeQuery):
def has_placeholder(typ: Type) -> bool:
def find_dataclass_transform_spec(node: Node | None) -> DataclassTransformSpec | None:
def require_bool_literal_argument(
def require_bool_literal_argument(
def require_bool_literal_argument(
def parse_bool(expr: Expression) -> bool | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_typeargs.py
-----------------------------
> """Verify properties of type arguments, like 'int' in C[int] being valid.
  
  This must happen after semantic analysis since there can be placeholder
  types until the end of semantic analysis, and these break various type
class TypeArgumentAnalyzer(MixedTraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\semanal_typeddict.py
-----------------------------
> """Semantic analysis of TypedDict definitions."""
  
  from __future__ import annotations
  
class TypedDictAnalyzer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\sharedparse.py
-----------------------------
> """Shared logic between our three mypy parser files."""
  
  
  _NON_BINARY_MAGIC_METHODS: Final = {
def special_function_elide_names(name: str) -> bool:
def argument_elide_name(name: str | None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\solve.py
-----------------------------
> """Type inference constraint solving"""
  
  from __future__ import annotations
  
def solve_constraints(
def solve_with_dependent(
def solve_iteratively(
def _join_sorted_key(t: Type) -> int:
def solve_one(lowers: Iterable[Type], uppers: Iterable[Type]) -> Type | None:
def choose_free(
def is_trivial_bound(tp: ProperType, allow_tuple: bool = False) -> bool:
def find_linear(c: Constraint) -> tuple[bool, TypeVarId | None]:
def transitive_closure(
def add_secondary_constraints(cs: set[Constraint], lower: Type, upper: Type) -> None:
def compute_dependencies(
def check_linear(scc: set[TypeVarId], lowers: Bounds, uppers: Bounds) -> bool:
def skip_reverse_union_constraints(cs: list[Constraint]) -> list[Constraint]:
def get_vars(target: Type, vars: list[TypeVarId]) -> set[TypeVarId]:
def pre_validate_solutions(
def is_callable_protocol(t: Type) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\split_namespace.py
-----------------------------
> """Split namespace for argparse to allow separating options by prefix.
  
  We use this to direct some options to an Options object and some to a
  regular namespace.
class SplitNamespace(argparse.Namespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\state.py
-----------------------------
class StrictOptionalState:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stats.py
-----------------------------
> """Utilities for calculating and reporting statistics about types."""
  
  from __future__ import annotations
  
class StatisticsVisitor(TraverserVisitor):
def dump_type_stats(
def is_special_module(path: str) -> bool:
def is_imprecise(t: Type) -> bool:
class HasAnyQuery(TypeQuery[bool]):
def is_imprecise2(t: Type) -> bool:
class HasAnyQuery2(HasAnyQuery):
def is_generic(t: Type) -> bool:
def is_complex(t: Type) -> bool:
def is_special_form_any(t: AnyType) -> bool:
def get_original_any(t: AnyType) -> AnyType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\strconv.py
-----------------------------
> """Conversion of parse tree nodes to strings."""
  
  from __future__ import annotations
  
class StrConv(NodeVisitor[str]):
def dump_tagged(nodes: Sequence[object], tag: str | None, str_conv: StrConv) -> str:
def indent(s: str, n: int) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stubdoc.py
-----------------------------
> """Parsing/inferring signatures from documentation.
  
  This module provides several functions to generate better stubs using
  docstrings and Sphinx docs (.rst files).
def is_valid_type(s: str) -> bool:
class ArgSig:
class FunctionSig(NamedTuple):
class DocStringParser:
def infer_sig_from_docstring(docstr: str | None, name: str) -> list[FunctionSig] | None:
def infer_arg_sig_from_anon_docstring(docstr: str) -> list[ArgSig]:
def infer_ret_type_sig_from_docstring(docstr: str, name: str) -> str | None:
def infer_ret_type_sig_from_anon_docstring(docstr: str) -> str | None:
def parse_signature(sig: str) -> tuple[str, list[str], list[str]] | None:
def build_signature(positional: Sequence[str], optional: Sequence[str]) -> str:
def parse_all_signatures(lines: Sequence[str]) -> tuple[list[Sig], list[Sig]]:
def find_unique_signatures(sigs: Sequence[Sig]) -> list[Sig]:
def infer_prop_type_from_docstring(docstr: str | None) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stubgen.py
-----------------------------
> """Generator of dynamically typed draft stubs for arbitrary modules.
  
  The logic of this script can be split in three steps:
  * parsing options and finding sources:
class Options:
class StubSource:
class AliasPrinter(NodeVisitor[str]):
def find_defined_names(file: MypyFile) -> set[str]:
def get_assigned_names(lvalues: Iterable[Expression]) -> Iterator[str]:
class DefinitionFinder(mypy.traverser.TraverserVisitor):
def find_referenced_names(file: MypyFile) -> set[str]:
def is_none_expr(expr: Expression) -> bool:
class ReferenceFinder(mypy.mixedtraverser.MixedTraverserVisitor):
class ASTStubGenerator(BaseStubGenerator, mypy.traverser.TraverserVisitor):
def find_method_names(defs: list[Statement]) -> set[str]:
class SelfTraverser(mypy.traverser.TraverserVisitor):
def find_self_initializers(fdef: FuncBase) -> list[tuple[str, Expression, Type | None]]:
def get_qualified_name(o: Expression) -> str:
def remove_blacklisted_modules(modules: list[StubSource]) -> list[StubSource]:
def split_pyc_from_py(modules: list[StubSource]) -> tuple[list[StubSource], list[StubSource]]:
def is_blacklisted_path(path: str) -> bool:
def normalize_path_separators(path: str) -> str:
def collect_build_targets(
def find_module_paths_using_imports(
def is_non_library_module(module: str) -> bool:
def translate_module_name(module: str, relative: int) -> tuple[str, int]:
def find_module_paths_using_search(
def mypy_options(stubgen_options: Options) -> MypyOptions:
def parse_source_file(mod: StubSource, mypy_options: MypyOptions) -> None:
def generate_asts_for_modules(
def generate_stub_for_py_module(
def generate_stubs(options: Options) -> None:
def parse_options(args: list[str]) -> Options:
def main(args: list[str] | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stubgenc.py
-----------------------------
> """Stub generator for C modules.
  
  The public interface is via the mypy.stubgen module.
class ExternalSignatureGenerator(SignatureGenerator):
class DocstringSignatureGenerator(SignatureGenerator):
def is_pybind11_overloaded_function_docstring(docstring: str, name: str) -> bool:
def generate_stub_for_c_module(
class CFunctionStub:
class InspectionStubGenerator(BaseStubGenerator):
def method_name_sort_key(name: str) -> tuple[int, str]:
def is_pybind_skipped_attribute(attr: str) -> bool:
def infer_c_method_args(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stubinfo.py
-----------------------------
def is_module_from_legacy_bundled_package(module: str) -> bool:
def stub_distribution_name(module: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stubtest.py
-----------------------------
> """Tests for stubs.
  
  Verify that various things in stubs are consistent with how things behave at runtime.
  
class Missing:
class Unrepresentable:
def _style(message: str, **kwargs: Any) -> str:
def _truncate(message: str, length: int) -> str:
class StubtestFailure(Exception):
class Error:
def silent_import_module(module_name: str) -> types.ModuleType:
def test_module(module_name: str) -> Iterator[Error]:
def verify(
def _verify_exported_names(
def _module_symbol_table(runtime: types.ModuleType) -> symtable.SymbolTable | None:
def verify_mypyfile(
def _verify_final(
def _verify_metaclass(
def verify_typeinfo(
def _static_lookup_runtime(object_path: list[str]) -> MaybeMissing[Any]:
def _verify_static_class_methods(
def _verify_arg_name(
def _verify_arg_default_value(
def maybe_strip_cls(name: str, args: list[nodes.Argument]) -> list[nodes.Argument]:
class Signature(Generic[T]):
def _verify_signature(
def _is_private_parameter(arg: inspect.Parameter) -> bool:
def verify_funcitem(
def verify_missing(
def verify_var(
def verify_overloadedfuncdef(
def verify_typevarexpr(
def verify_paramspecexpr(
def _is_django_cached_property(runtime: Any) -> bool:  # pragma: no cover
def _verify_readonly_property(stub: nodes.Decorator, runtime: Any) -> Iterator[str]:
def _verify_abstract_status(stub: nodes.FuncDef, runtime: Any) -> Iterator[str]:
def _verify_final_method(
def _resolve_funcitem_from_decorator(dec: nodes.OverloadPart) -> nodes.FuncItem | None:
def verify_decorator(
def verify_typealias(
def is_probably_private(name: str) -> bool:
def is_probably_a_function(runtime: Any) -> bool:
def is_read_only_property(runtime: object) -> bool:
def safe_inspect_signature(runtime: Any) -> inspect.Signature | None:
def describe_runtime_callable(signature: inspect.Signature, *, is_async: bool) -> str:
def is_subtype_helper(left: mypy.types.Type, right: mypy.types.Type) -> bool:
def get_mypy_type_of_runtime_value(runtime: Any) -> mypy.types.Type | None:
def build_stubs(modules: list[str], options: Options, find_submodules: bool = False) -> list[str]:
def get_stub(module: str) -> nodes.MypyFile | None:
def get_typeshed_stdlib_modules(
def get_importable_stdlib_modules() -> set[str]:
def get_allowlist_entries(allowlist_file: str) -> Iterator[str]:
class _Arguments:
def test_stubs(args: _Arguments, use_builtins_fixtures: bool = False) -> int:
def parse_options(args: list[str]) -> _Arguments:
def main() -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\stubutil.py
-----------------------------
> """Utilities for mypy.stubgen, mypy.stubgenc, and mypy.stubdoc modules."""
  
  from __future__ import annotations
  
class CantImport(Exception):
def walk_packages(
def find_module_path_using_sys_path(module: str, sys_path: list[str]) -> str | None:
def find_module_path_and_all_py3(
def generate_guarded(
def report_missing(mod: str, message: str | None = "", traceback: str = "") -> None:
def fail_missing(mod: str, reason: ModuleNotFoundReason) -> None:
def remove_misplaced_type_comments(source: bytes) -> bytes: ...
def remove_misplaced_type_comments(source: str) -> str: ...
def remove_misplaced_type_comments(source: str | bytes) -> str | bytes:
def common_dir_prefix(paths: list[str]) -> str:
class AnnotationPrinter(TypeStrVisitor):
class ClassInfo:
class FunctionContext:
def infer_method_ret_type(name: str) -> str | None:
def infer_method_arg_types(
class SignatureGenerator:
class ImportTracker:
class BaseStubGenerator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\subtypes.py
-----------------------------
>     """Is 'left' subtype of 'right'?
  
      Also consider Any to be a subtype of any type, and vice versa. This
      recursively applies to components of composite types (List[int] is subtype
class SubtypeContext:
def is_subtype(
def is_proper_subtype(
def is_equivalent(
def is_same_type(
def _is_subtype(
def check_type_parameter(
class SubtypeVisitor(TypeVisitor[bool]):
def pop_on_exit(stack: list[tuple[T, T]], left: T, right: T) -> Iterator[None]:
def is_protocol_implementation(
def find_member(
def find_member_simple(
def get_member_flags(name: str, itype: Instance, class_obj: bool = False) -> set[int]:
def is_descriptor(typ: Type | None) -> bool:
def find_node_type(
def non_method_protocol_members(tp: TypeInfo) -> list[str]:
def is_callable_compatible(
def are_trivial_parameters(param: Parameters | NormalizedCallableType) -> bool:
def is_trivial_suffix(param: Parameters | NormalizedCallableType) -> bool:
def are_parameters_compatible(
def are_args_compatible(
def flip_compat_check(is_compat: Callable[[Type, Type], bool]) -> Callable[[Type, Type], bool]:
def unify_generic_callable(
def try_restrict_literal_union(t: UnionType, s: Type) -> list[Type] | None:
def restrict_subtype_away(t: Type, s: Type) -> Type:
def covers_at_runtime(item: Type, supertype: Type) -> bool:
def is_more_precise(left: Type, right: Type, *, ignore_promotions: bool = False) -> bool:
def all_non_object_members(info: TypeInfo) -> set[str]:
def infer_variance(info: TypeInfo, i: int) -> bool:
def has_underscore_prefix(name: str) -> bool:
def infer_class_variances(info: TypeInfo) -> bool:
def erase_return_self_types(typ: Type, self_type: Instance) -> Type:
def is_erased_instance(t: Instance) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\suggestions.py
-----------------------------
> """Mechanisms for inferring function types based on callsites.
  
  Currently works by collecting all argument types at callsites,
  synthesizing a list of possible function types from that, trying them
class PyAnnotateSignature(TypedDict):
class Callsite(NamedTuple):
class SuggestionPlugin(Plugin):
class ReturnFinder(TraverserVisitor):
def get_return_types(typemap: dict[Expression, Type], func: FuncDef) -> list[Type]:
class ArgUseFinder(TraverserVisitor):
def get_arg_uses(typemap: dict[Expression, Type], func: FuncDef) -> list[list[Type]]:
class SuggestionFailure(Exception):
def is_explicit_any(typ: AnyType) -> bool:
def is_implicit_any(typ: Type) -> bool:
class SuggestionEngine:
def any_score_type(ut: Type, arg_pos: bool) -> float:
def any_score_callable(t: CallableType, is_method: bool, ignore_return: bool) -> float:
def is_tricky_callable(t: CallableType) -> bool:
class TypeFormatter(TypeStrVisitor):
def make_suggestion_anys(t: TType) -> TType:
class MakeSuggestionAny(TypeTranslator):
def generate_type_combinations(types: list[Type]) -> list[Type]:
def count_errors(msgs: list[str]) -> int:
def refine_type(ti: Type, si: Type) -> Type:
def refine_union(t: UnionType, s: ProperType) -> Type:
def refine_callable(t: CallableType, s: CallableType) -> CallableType:
def dedup(old: list[T]) -> list[T]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\traverser.py
-----------------------------
> """Generic node traverser visitor"""
  
  from __future__ import annotations
  
class TraverserVisitor(NodeVisitor[None]):
class ExtendedTraverserVisitor(TraverserVisitor):
class ReturnSeeker(TraverserVisitor):
def has_return_statement(fdef: FuncBase) -> bool:
class FuncCollectorBase(TraverserVisitor):
class YieldSeeker(FuncCollectorBase):
def has_yield_expression(fdef: FuncBase) -> bool:
class YieldFromSeeker(FuncCollectorBase):
def has_yield_from_expression(fdef: FuncBase) -> bool:
class AwaitSeeker(TraverserVisitor):
def has_await_expression(expr: Expression) -> bool:
class ReturnCollector(FuncCollectorBase):
def all_return_statements(node: Node) -> list[ReturnStmt]:
class YieldCollector(FuncCollectorBase):
def all_yield_expressions(node: Node) -> list[tuple[YieldExpr, bool]]:
class YieldFromCollector(FuncCollectorBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\treetransform.py
-----------------------------
> """Base visitor that implements an identity AST transform.
  
  Subclass TransformVisitor to perform non-trivial transformations.
class TransformVisitor(NodeVisitor[Node]):
class FuncMapInitializer(TraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\tvar_scope.py
-----------------------------
>     """Set namespace for all TypeVarLikeTypes types."""
  
      def __init__(self, namespace: str) -> None:
          self.namespace = namespace
class TypeVarLikeNamespaceSetter(TypeTraverserVisitor):
class TypeVarLikeScope:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\typeanal.py
-----------------------------
> """Semantic analysis of types"""
  
  from __future__ import annotations
  
def analyze_type_alias(
class TypeAnalyser(SyntheticTypeVisitor[Type], TypeAnalyzerPluginInterface):
class MsgCallback(Protocol):
def get_omitted_any(
def fix_type_var_tuple_argument(t: Instance) -> None:
def fix_instance(
def instantiate_type_alias(
def set_any_tvars(
class DivergingAliasDetector(TrivialSyntheticTypeTranslator):
def detect_diverging_alias(
def check_for_explicit_any(
def has_explicit_any(t: Type) -> bool:
class HasExplicitAny(TypeQuery[bool]):
def has_any_from_unimported_type(t: Type) -> bool:
class HasAnyFromUnimportedType(BoolTypeQuery):
def collect_all_inner_types(t: Type) -> list[Type]:
class CollectAllInnerTypesQuery(TypeQuery[list[Type]]):
def make_optional_type(t: Type) -> Type:
def validate_instance(t: Instance, fail: MsgCallback, empty_tuple_index: bool) -> bool:
def find_self_type(typ: Type, lookup: Callable[[str], SymbolTableNode | None]) -> bool:
class HasSelfType(BoolTypeQuery):
def unknown_unpack(t: Type) -> bool:
class FindTypeVarVisitor(SyntheticTypeVisitor[None]):
class TypeVarDefaultTranslator(TrivialSyntheticTypeTranslator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\typeops.py
-----------------------------
> """Miscellaneous type operations and helpers for use during type checking.
  
  NOTE: These must not be accessed from mypy.nodes or mypy.types to avoid import
        cycles. These must not be called from the semantic analysis main pass
def is_recursive_pair(s: Type, t: Type) -> bool:
def tuple_fallback(typ: TupleType) -> Instance:
def get_self_type(func: CallableType, default_self: Instance | TupleType) -> Type | None:
def type_object_type(info: TypeInfo, named_type: Callable[[str], Instance]) -> ProperType:
def is_valid_constructor(n: SymbolNode | None) -> bool:
def type_object_type_from_function(
def class_callable(
def map_type_from_supertype(typ: Type, sub_info: TypeInfo, super_info: TypeInfo) -> Type:
def supported_self_type(
def bind_self(
def is_valid_self_type_best_effort(c: CallableType, self_type: Instance) -> bool:
def erase_to_bound(t: Type) -> Type:
def callable_corresponding_argument(
def simple_literal_type(t: ProperType | None) -> Instance | None:
def is_simple_literal(t: ProperType) -> bool:
def make_simplified_union(
def _remove_redundant_union_items(items: list[Type], keep_erased: bool) -> list[Type]:
def _get_type_method_ret_type(t: ProperType, *, name: str) -> Type | None:
def true_only(t: Type) -> ProperType:
def false_only(t: Type) -> ProperType:
def true_or_false(t: Type) -> ProperType:
def erase_def_to_union_or_bound(tdef: TypeVarLikeType) -> Type:
def erase_to_union_or_bound(typ: TypeVarType) -> ProperType:
def function_type(func: FuncBase, fallback: Instance) -> FunctionLike:
def callable_type(
def try_getting_str_literals(expr: Expression, typ: Type) -> list[str] | None:
def try_getting_str_literals_from_type(typ: Type) -> list[str] | None:
def try_getting_int_literals_from_type(typ: Type) -> list[int] | None:
def try_getting_literals_from_type(
def is_literal_type_like(t: Type | None) -> bool:
def is_singleton_type(typ: Type) -> bool:
def try_expanding_sum_type_to_union(typ: Type, target_fullname: str) -> ProperType:
def try_contracting_literals_in_union(types: Sequence[Type]) -> list[ProperType]:
def coerce_to_literal(typ: Type) -> Type:
def get_type_vars(tp: Type) -> list[TypeVarType]:
def get_all_type_vars(tp: Type) -> list[TypeVarLikeType]:
class TypeVarExtractor(TypeQuery[list[TypeVarLikeType]]):
def freeze_all_type_vars(member_type: Type) -> None:
class FreezeTypeVarsVisitor(TypeTraverserVisitor):
def custom_special_method(typ: Type, name: str, check_all: bool = False) -> bool:
def separate_union_literals(t: UnionType) -> tuple[Sequence[LiteralType], Sequence[Type]]:
def try_getting_instance_fallback(typ: Type) -> Instance | None:
def fixup_partial_type(typ: Type) -> Type:
def get_protocol_member(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\types.py
-----------------------------
> """Classes for representing mypy types."""
  
  from __future__ import annotations
  
class TypeOfAny:
def deserialize_type(data: JsonDict | str) -> Type:
class Type(mypy.nodes.Context):
class TypeAliasType(Type):
class TypeGuardedType(Type):
class RequiredType(Type):
class ReadOnlyType(Type):
class ProperType(Type):
class TypeVarId:
class TypeVarLikeType(ProperType):
class TypeVarType(TypeVarLikeType):
class ParamSpecFlavor:
class ParamSpecType(TypeVarLikeType):
class TypeVarTupleType(TypeVarLikeType):
class UnboundType(ProperType):
class CallableArgument(ProperType):
class TypeList(ProperType):
class UnpackType(ProperType):
class AnyType(ProperType):
class UninhabitedType(ProperType):
class NoneType(ProperType):
class ErasedType(ProperType):
class DeletedType(ProperType):
class ExtraAttrs:
class Instance(ProperType):
class FunctionLike(ProperType):
class FormalArgument(NamedTuple):
class Parameters(ProperType):
class CallableType(FunctionLike):
class Overloaded(FunctionLike):
class TupleType(ProperType):
class TypedDictType(ProperType):
class RawExpressionType(ProperType):
class LiteralType(ProperType):
class UnionType(ProperType):
class PartialType(ProperType):
class EllipsisType(ProperType):
class TypeType(ProperType):
class PlaceholderType(ProperType):
def get_proper_type(typ: None) -> None: ...
def get_proper_type(typ: Type) -> ProperType: ...
def get_proper_type(typ: Type | None) -> ProperType | None:
def get_proper_types(types: list[Type] | tuple[Type, ...]) -> list[ProperType]: ...
def get_proper_types(
def get_proper_types(
class TypeStrVisitor(SyntheticTypeVisitor[str]):
class TrivialSyntheticTypeTranslator(TypeTranslator, SyntheticTypeVisitor[Type]):
class UnrollAliasVisitor(TrivialSyntheticTypeTranslator):
def is_named_instance(t: Type, fullnames: str | tuple[str, ...]) -> TypeGuard[Instance]:
class LocationSetter(TypeTraverserVisitor):
class HasTypeVars(BoolTypeQuery):
def has_type_vars(typ: Type) -> bool:
class HasRecursiveType(BoolTypeQuery):
def has_recursive_types(typ: Type) -> bool:
def split_with_prefix_and_suffix(
def extend_args_for_prefix_and_suffix(
def flatten_nested_unions(
def find_unpack_in_list(items: Sequence[Type]) -> int | None:
def flatten_nested_tuples(types: Iterable[Type]) -> list[Type]:
def is_literal_type(typ: ProperType, fallback_fullname: str, value: LiteralValue) -> bool:
def callable_with_ellipsis(any_type: AnyType, ret_type: Type, fallback: Instance) -> CallableType:
def remove_dups(types: list[T]) -> list[T]:
def type_vars_as_args(type_vars: Sequence[TypeVarLikeType]) -> tuple[Type, ...]:
class InstantiateAliasVisitor(ExpandTypeVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\typestate.py
-----------------------------
> """
  A shared state for all TypeInfos that holds global cache and dependency information,
  and potentially other mutable TypeInfo state. This module contains mutable global state.
class TypeState:
def reset_global_state() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\types_utils.py
-----------------------------
> """
  This module is for (more basic) type operations that should not depend on is_subtype(),
  meet_types(), join_types() etc. We don't want to keep them in mypy/types.py for two reasons:
  * Reduce the size of that module.
def flatten_types(types: Iterable[Type]) -> Iterable[Type]:
def strip_type(typ: Type) -> Type:
def is_invalid_recursive_alias(seen_nodes: set[TypeAlias], target: Type) -> bool:
def get_bad_type_type_item(item: Type) -> str | None:
def is_union_with_any(tp: Type) -> bool:
def is_generic_instance(tp: Type) -> bool:
def is_overlapping_none(t: Type) -> bool:
def remove_optional(typ: Type) -> Type:
def is_self_type_like(typ: Type, *, is_classmethod: bool) -> bool:
def store_argument_type(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\typetraverser.py
-----------------------------
>     """Visitor that traverses all components of a type"""
  
      # Atomic types
  
class TypeTraverserVisitor(SyntheticTypeVisitor[None]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\typevars.py
-----------------------------
>     """For a non-generic type, return instance type representing the type.
  
      For a generic G type with parameters T1, .., Tn, return G[T1, ..., Tn].
def fill_typevars(typ: TypeInfo) -> Instance | TupleType:
def fill_typevars_with_any(typ: TypeInfo) -> Instance | TupleType:
def has_no_typevars(typ: Type) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\typevartuples.py
-----------------------------
> """Helpers for interacting with type var tuples."""
  
  from __future__ import annotations
  
def split_with_instance(
def erased_vars(type_vars: Sequence[TypeVarLikeType], type_of_any: int) -> list[Type]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\type_visitor.py
-----------------------------
> """Type visitor classes.
  
  This module defines the type visitors that are intended to be
  subclassed by other code.  They have been separated out into their own
class TypeVisitor(Generic[T]):
class SyntheticTypeVisitor(TypeVisitor[T]):
class TypeTranslator(TypeVisitor[Type]):
class TypeQuery(SyntheticTypeVisitor[T]):
class BoolTypeQuery(SyntheticTypeVisitor[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\util.py
-----------------------------
> """Utility functions with no non-trivial dependencies."""
  
  from __future__ import annotations
  
def is_dunder(name: str, exclude_special: bool = False) -> bool:
def is_sunder(name: str) -> bool:
def split_module_names(mod_name: str) -> list[str]:
def module_prefix(modules: Iterable[str], target: str) -> str | None:
def split_target(modules: Iterable[str], target: str) -> tuple[str, str] | None:
def short_type(obj: object) -> str:
def find_python_encoding(text: bytes) -> tuple[str, int]:
def bytes_to_human_readable_repr(b: bytes) -> str:
class DecodeError(Exception):
def decode_python_encoding(source: bytes) -> str:
def read_py_file(path: str, read: Callable[[str], bytes]) -> list[str] | None:
def trim_source_line(line: str, max_len: int, col: int, min_width: int) -> tuple[str, int]:
def get_mypy_comments(source: str) -> list[tuple[int, str]]:
def _generate_junit_contents(
def write_junit_xml(
class IdMapper:
def get_prefix(fullname: str) -> str:
def correct_relative_import(
def get_class_descriptors(cls: type[object]) -> Sequence[str]:
def replace_object_state(
def is_sub_path_normabs(path: str, dir: str) -> bool:
def hard_exit(status: int = 0) -> None:
def unmangle(name: str) -> str:
def get_unique_redefinition_name(name: str, existing: Container[str]) -> str:
def check_python_version(program: str) -> None:
def count_stats(messages: list[str]) -> tuple[int, int, int]:
def split_words(msg: str) -> list[str]:
def get_terminal_width() -> int:
def soft_wrap(msg: str, max_len: int, first_offset: int, num_indent: int = 0) -> str:
def hash_digest(data: bytes) -> str:
def parse_gray_color(cup: bytes) -> str:
def should_force_color() -> bool:
class FancyFormatter:
def is_typeshed_file(typeshed_dir: str | None, file: str) -> bool:
def is_stdlib_file(typeshed_dir: str | None, file: str) -> bool:
def is_stub_package_file(file: str) -> bool:
def unnamed_function(name: str | None) -> bool:
def time_spent_us(t0: int) -> int:
def plural_s(s: int | Sized) -> str:
def quote_docstring(docstr: str) -> str:
def json_dumps(obj: object, debug: bool = False) -> bytes:
def json_loads(data: bytes) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\visitor.py
-----------------------------
> """Generic abstract syntax tree node visitor"""
  
  from __future__ import annotations
  
class ExpressionVisitor(Generic[T]):
class StatementVisitor(Generic[T]):
class PatternVisitor(Generic[T]):
class NodeVisitor(Generic[T], ExpressionVisitor[T], StatementVisitor[T], PatternVisitor[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy\__main__.py
-----------------------------
> """Mypy type checker command line tool."""
  
  from __future__ import annotations
  
def console_entry() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\analysis\attrdefined.py
-----------------------------
> """Always defined attribute analysis.
  
  An always defined attribute has some statements in __init__ or the
  class body that cause the attribute to be always initialized when an
class body that cause the attribute to be always initialized when an
def analyze_always_defined_attrs(class_irs: list[ClassIR]) -> None:
def analyze_always_defined_attrs_in_class(cl: ClassIR, seen: set[ClassIR]) -> None:
def find_always_defined_attributes(
def find_sometimes_defined_attributes(
def mark_attr_initialization_ops(
def attributes_initialized_by_init_call(op: Call) -> set[str]:
def attributes_maybe_initialized_by_init_call(op: Call) -> set[str]:
class AttributeMaybeDefinedVisitor(BaseAnalysisVisitor[str]):
def analyze_maybe_defined_attrs_in_init(
class AttributeMaybeUndefinedVisitor(BaseAnalysisVisitor[str]):
def analyze_maybe_undefined_attrs_in_init(
def update_always_defined_attrs_using_subclasses(cl: ClassIR, seen: set[ClassIR]) -> None:
def detect_undefined_bitmap(cl: ClassIR, seen: set[ClassIR]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\analysis\blockfreq.py
-----------------------------
> """Find basic blocks that are likely to be executed frequently.
  
  For example, this would not include blocks that have exception handlers.
  
def frequently_executed_blocks(entry_point: BasicBlock) -> set[BasicBlock]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\analysis\dataflow.py
-----------------------------
> """Data-flow analyses."""
  
  from __future__ import annotations
  
class CFG:
def get_cfg(blocks: list[BasicBlock], *, use_yields: bool = False) -> CFG:
def get_real_target(label: BasicBlock) -> BasicBlock:
def cleanup_cfg(blocks: list[BasicBlock]) -> None:
class AnalysisResult(Generic[T]):
class BaseAnalysisVisitor(OpVisitor[GenAndKill[T]]):
class DefinedVisitor(BaseAnalysisVisitor[Value]):
def analyze_maybe_defined_regs(
def analyze_must_defined_regs(
class BorrowedArgumentsVisitor(BaseAnalysisVisitor[Value]):
def analyze_borrowed_arguments(
class UndefinedVisitor(BaseAnalysisVisitor[Value]):
def non_trivial_sources(op: Op) -> set[Value]:
class LivenessVisitor(BaseAnalysisVisitor[Value]):
def analyze_live_regs(blocks: list[BasicBlock], cfg: CFG) -> AnalysisResult[Value]:
def run_analysis(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\analysis\ircheck.py
-----------------------------
> """Utilities for checking that internal ir is valid and consistent."""
  
  from __future__ import annotations
  
class FnError:
def check_func_ir(fn: FuncIR) -> list[FnError]:
class IrCheckException(Exception):
def assert_func_ir_valid(fn: FuncIR) -> None:
def check_op_sources_valid(fn: FuncIR) -> list[FnError]:
def can_coerce_to(src: RType, dest: RType) -> bool:
class OpChecker(OpVisitor[None]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\analysis\selfleaks.py
-----------------------------
>     """Analyze whether 'self' may be seen by arbitrary code in '__init__'.
  
      More formally, the set is not empty if along some path from IR entry point
      arbitrary code could have been executed that has access to 'self'.
class SelfLeakedVisitor(OpVisitor[GenAndKill]):
def analyze_self_leaks(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\analysis\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\cstring.py
-----------------------------
> """Encode valid C string literals from Python strings.
  
  If a character is not allowed in C string literals, it is either emitted
  as a simple escape sequence (e.g. '\\n'), or an octal escape sequence
def encode_bytes_as_c_string(b: bytes) -> str:
def c_string_initializer(value: bytes) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\emit.py
-----------------------------
> """Utilities for emitting C code."""
  
  from __future__ import annotations
  
class HeaderDeclaration:
class EmitterContext:
class ErrorHandler:
class AssignHandler(ErrorHandler):
class GotoHandler(ErrorHandler):
class TracebackAndGotoHandler(ErrorHandler):
class ReturnHandler(ErrorHandler):
class Emitter:
def c_array_initializer(components: list[str], *, indented: bool = False) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\emitclass.py
-----------------------------
> """Code generation for native classes and related wrappers."""
  
  from __future__ import annotations
  
def native_slot(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_call_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def slot_key(attr: str) -> str:
def generate_slots(cl: ClassIR, table: SlotTable, emitter: Emitter) -> dict[str, str]:
def generate_class_type_decl(
def generate_class(cl: ClassIR, module: str, emitter: Emitter) -> None:
def getter_name(cl: ClassIR, attribute: str, names: NameGenerator) -> str:
def setter_name(cl: ClassIR, attribute: str, names: NameGenerator) -> str:
def generate_object_struct(cl: ClassIR, emitter: Emitter) -> None:
def generate_vtables(
def generate_offset_table(
def generate_vtable(
def generate_setup_for_class(
def generate_constructor_for_class(
def generate_init_for_class(cl: ClassIR, init_fn: FuncIR, emitter: Emitter) -> str:
def generate_new_for_class(
def generate_new_for_trait(cl: ClassIR, func_name: str, emitter: Emitter) -> None:
def generate_traverse_for_class(cl: ClassIR, func_name: str, emitter: Emitter) -> None:
def generate_clear_for_class(cl: ClassIR, func_name: str, emitter: Emitter) -> None:
def generate_dealloc_for_class(
def generate_finalize_for_class(
def generate_methods_table(cl: ClassIR, name: str, emitter: Emitter) -> None:
def generate_side_table_for_class(
def generate_getseter_declarations(cl: ClassIR, emitter: Emitter) -> None:
def generate_getseters_table(cl: ClassIR, name: str, emitter: Emitter) -> None:
def generate_getseters(cl: ClassIR, emitter: Emitter) -> None:
def generate_getter(cl: ClassIR, attr: str, rtype: RType, emitter: Emitter) -> None:
def generate_setter(cl: ClassIR, attr: str, rtype: RType, emitter: Emitter) -> None:
def generate_readonly_getter(
def generate_property_setter(
def has_managed_dict(cl: ClassIR, emitter: Emitter) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\emitfunc.py
-----------------------------
> """Code generation for native function bodies."""
  
  from __future__ import annotations
  
def native_function_type(fn: FuncIR, emitter: Emitter) -> str:
def native_function_header(fn: FuncDecl, emitter: Emitter) -> str:
def generate_native_function(
class FunctionEmitterVisitor(OpVisitor[None]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\emitmodule.py
-----------------------------
> """Generate C code for a Python C extension module from Python source code."""
  
  # FIXME: Basically nothing in this file operates on the level of a
  # single module and it should be renamed.
class MarkedDeclaration:
class MypycPlugin(Plugin):
def parse_and_typecheck(
def compile_scc_to_ir(
def compile_modules_to_ir(
def compile_ir_to_c(
def get_ir_cache_name(id: str, path: str, options: Options) -> str:
def get_state_ir_cache_name(state: State) -> str:
def write_cache(
def load_scc_from_cache(
def compile_modules_to_c(
def generate_function_declaration(fn: FuncIR, emitter: Emitter) -> None:
def pointerize(decl: str, name: str) -> str:
def group_dir(group_name: str) -> str:
class GroupGenerator:
def toposort(deps: dict[T, set[T]]) -> list[T]:
def is_fastcall_supported(fn: FuncIR, capi_version: tuple[int, int]) -> bool:
def collect_literals(fn: FuncIR, literals: Literals) -> None:
def c_string_array_initializer(components: list[bytes]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\emitwrapper.py
-----------------------------
> """Generate CPython API wrapper functions for native functions.
  
  The wrapper functions are used by the CPython runtime when calling
  native functions from interpreted code, and when the called function
def wrapper_function_header(fn: FuncIR, names: NameGenerator) -> str:
def generate_traceback_code(
def make_arg_groups(args: list[RuntimeArg]) -> dict[ArgKind, list[RuntimeArg]]:
def reorder_arg_groups(groups: dict[ArgKind, list[RuntimeArg]]) -> list[RuntimeArg]:
def make_static_kwlist(args: list[RuntimeArg]) -> str:
def make_format_string(func_name: str | None, groups: dict[ArgKind, list[RuntimeArg]]) -> str:
def generate_wrapper_function(
def legacy_wrapper_function_header(fn: FuncIR, names: NameGenerator) -> str:
def generate_legacy_wrapper_function(
def generate_dunder_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_ipow_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_bin_op_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_bin_op_forward_only_wrapper(
def generate_bin_op_reverse_only_wrapper(
def generate_bin_op_both_wrappers(
def generate_bin_op_reverse_dunder_call(fn: FuncIR, emitter: Emitter, rmethod: str) -> None:
def handle_third_pow_argument(
def generate_richcompare_wrapper(cl: ClassIR, emitter: Emitter) -> str | None:
def generate_get_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_hash_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_len_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_bool_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_del_item_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_set_del_item_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_set_del_item_wrapper_inner(
def generate_contains_wrapper(cl: ClassIR, fn: FuncIR, emitter: Emitter) -> str:
def generate_wrapper_core(
def generate_arg_check(
class WrapperGenerator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\literals.py
-----------------------------
>     """Collection of literal values used in a compilation group and related helpers."""
  
      def __init__(self) -> None:
          # Each dict maps value to literal index (0, 1, ...)
def _is_literal_value(obj: object) -> TypeGuard[LiteralValue]:
class Literals:
def _encode_str_values(values: dict[str, int]) -> list[bytes]:
def _encode_bytes_values(values: dict[bytes, int]) -> list[bytes]:
def format_int(n: int) -> bytes:
def format_str_literal(s: str) -> bytes:
def _encode_int_values(values: dict[int, int]) -> list[bytes]:
def float_to_c(x: float) -> str:
def _encode_float_values(values: dict[float, int]) -> list[str]:
def _encode_complex_values(values: dict[complex, int]) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\codegen\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\class_ir.py
-----------------------------
> """Intermediate representation of classes."""
  
  from __future__ import annotations
  
class VTableMethod(NamedTuple):
class ClassIR:
class NonExtClassInfo:
def serialize_vtable_entry(entry: VTableMethod) -> JsonDict:
def serialize_vtable(vtable: VTableEntries) -> list[JsonDict]:
def deserialize_vtable_entry(data: JsonDict, ctx: DeserMaps) -> VTableMethod:
def deserialize_vtable(data: list[JsonDict], ctx: DeserMaps) -> VTableEntries:
def all_concrete_classes(class_ir: ClassIR) -> list[ClassIR] | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\func_ir.py
-----------------------------
> """Intermediate representation of functions."""
  
  from __future__ import annotations
  
class RuntimeArg:
class FuncSignature:
def num_bitmap_args(args: tuple[RuntimeArg, ...]) -> int:
class FuncDecl:
class FuncIR:
def all_values(args: list[Register], blocks: list[BasicBlock]) -> list[Value]:
def all_values_full(args: list[Register], blocks: list[BasicBlock]) -> list[Value]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\module_ir.py
-----------------------------
> """Intermediate representation of modules."""
  
  from __future__ import annotations
  
class ModuleIR:
def deserialize_modules(data: dict[str, JsonDict], ctx: DeserMaps) -> dict[str, ModuleIR]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\ops.py
-----------------------------
> """Low-level opcodes for compiler intermediate representation (IR).
  
  Opcodes operate on abstract values (Value) in a register machine. Each
  value has a type (RType). A value can hold various things, such as:
class BasicBlock:
class Value:
class Register(Value):
class Integer(Value):
class Float(Value):
class Op(Value):
class BaseAssign(Op):
class Assign(BaseAssign):
class AssignMulti(BaseAssign):
class ControlOp(Op):
class Goto(ControlOp):
class Branch(ControlOp):
class Return(ControlOp):
class Unreachable(ControlOp):
class RegisterOp(Op):
class IncRef(RegisterOp):
class DecRef(RegisterOp):
class Call(RegisterOp):
class MethodCall(RegisterOp):
class PrimitiveDescription:
class PrimitiveOp(RegisterOp):
class LoadErrorValue(RegisterOp):
class LoadLiteral(RegisterOp):
class GetAttr(RegisterOp):
class SetAttr(RegisterOp):
class LoadStatic(RegisterOp):
class InitStatic(RegisterOp):
class TupleSet(RegisterOp):
class TupleGet(RegisterOp):
class Cast(RegisterOp):
class Box(RegisterOp):
class Unbox(RegisterOp):
class RaiseStandardError(RegisterOp):
class CallC(RegisterOp):
class Truncate(RegisterOp):
class Extend(RegisterOp):
class LoadGlobal(RegisterOp):
class IntOp(RegisterOp):
class ComparisonOp(RegisterOp):
class FloatOp(RegisterOp):
class FloatNeg(RegisterOp):
class FloatComparisonOp(RegisterOp):
class LoadMem(RegisterOp):
class SetMem(Op):
class GetElementPtr(RegisterOp):
class LoadAddress(RegisterOp):
class KeepAlive(RegisterOp):
class Unborrow(RegisterOp):
class OpVisitor(Generic[T]):
class DeserMaps(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\pprint.py
-----------------------------
> """Utilities for pretty-printing IR in a human-readable form."""
  
  from __future__ import annotations
  
class IRPrettyPrintVisitor(OpVisitor[str]):
def format_registers(func_ir: FuncIR, names: dict[Value, str]) -> list[str]:
def format_blocks(
def format_func(fn: FuncIR, errors: Sequence[tuple[ErrorSource, str]] = ()) -> list[str]:
def format_modules(modules: ModuleIRs) -> list[str]:
def generate_names_for_ir(args: list[Register], blocks: list[BasicBlock]) -> dict[Value, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\rtypes.py
-----------------------------
> """Types used in the intermediate representation.
  
  These are runtime types (RTypes), as opposed to mypy Type objects.
  The latter are only used during type checking and not directly used at
class RType:
def deserialize_type(data: JsonDict | str, ctx: DeserMaps) -> RType:
class RTypeVisitor(Generic[T]):
class RVoid(RType):
class RPrimitive(RType):
def is_tagged(rtype: RType) -> bool:
def is_int_rprimitive(rtype: RType) -> bool:
def is_short_int_rprimitive(rtype: RType) -> bool:
def is_int16_rprimitive(rtype: RType) -> TypeGuard[RPrimitive]:
def is_int32_rprimitive(rtype: RType) -> TypeGuard[RPrimitive]:
def is_int64_rprimitive(rtype: RType) -> bool:
def is_fixed_width_rtype(rtype: RType) -> TypeGuard[RPrimitive]:
def is_uint8_rprimitive(rtype: RType) -> TypeGuard[RPrimitive]:
def is_uint32_rprimitive(rtype: RType) -> bool:
def is_uint64_rprimitive(rtype: RType) -> bool:
def is_c_py_ssize_t_rprimitive(rtype: RType) -> bool:
def is_pointer_rprimitive(rtype: RType) -> bool:
def is_float_rprimitive(rtype: RType) -> bool:
def is_bool_rprimitive(rtype: RType) -> bool:
def is_bit_rprimitive(rtype: RType) -> bool:
def is_object_rprimitive(rtype: RType) -> bool:
def is_none_rprimitive(rtype: RType) -> bool:
def is_list_rprimitive(rtype: RType) -> bool:
def is_dict_rprimitive(rtype: RType) -> bool:
def is_set_rprimitive(rtype: RType) -> bool:
def is_frozenset_rprimitive(rtype: RType) -> bool:
def is_str_rprimitive(rtype: RType) -> bool:
def is_bytes_rprimitive(rtype: RType) -> bool:
def is_tuple_rprimitive(rtype: RType) -> bool:
def is_range_rprimitive(rtype: RType) -> bool:
def is_sequence_rprimitive(rtype: RType) -> bool:
class TupleNameVisitor(RTypeVisitor[str]):
class RTuple(RType):
def compute_rtype_alignment(typ: RType) -> int:
def compute_rtype_size(typ: RType) -> int:
def compute_aligned_offsets_and_size(types: list[RType]) -> tuple[list[int], int]:
class RStruct(RType):
class RInstance(RType):
class RUnion(RType):
def flatten_nested_unions(types: list[RType]) -> list[RType]:
def optional_value_type(rtype: RType) -> RType | None:
def is_optional_type(rtype: RType) -> bool:
class RArray(RType):
def check_native_int_range(rtype: RPrimitive, n: int) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\ir\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\ast_helpers.py
-----------------------------
> """IRBuilder AST transform helpers shared between expressions and statements.
  
  Shared code that is tightly coupled to mypy ASTs can be put here instead of
  making mypyc.irbuild.builder larger.
def process_conditional(
def maybe_process_conditional_comparison(
def is_borrow_friendly_expr(self: IRBuilder, expr: Expression) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\builder.py
-----------------------------
> """Builder class to transform a mypy AST to the IR form.
  
  See the docstring of class IRBuilder for more information.
class IRVisitor(ExpressionVisitor[Value], StatementVisitor[None]):
class UnsupportedException(Exception):
class IRBuilder:
def gen_arg_defaults(builder: IRBuilder) -> None:
def remangle_redefinition_name(name: str) -> str:
def get_call_target_fullname(ref: RefExpr) -> str:
def create_type_params(
def calculate_arg_defaults(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\callable_class.py
-----------------------------
> """Generate a class that represents a nested function.
  
  The class defines __call__ for calling the function and allows access to
  non-local variables defined in outer scopes.
def setup_callable_class(builder: IRBuilder) -> None:
def add_call_to_callable_class(
def add_get_to_callable_class(builder: IRBuilder, fn_info: FuncInfo) -> None:
def instantiate_callable_class(builder: IRBuilder, fn_info: FuncInfo) -> Value:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\classdef.py
-----------------------------
> """Transform class definitions from the mypy AST form to IR."""
  
  from __future__ import annotations
  
def transform_class_def(builder: IRBuilder, cdef: ClassDef) -> None:
class ClassBuilder:
class NonExtClassBuilder(ClassBuilder):
class ExtClassBuilder(ClassBuilder):
class DataClassBuilder(ExtClassBuilder):
class AttrsClassBuilder(DataClassBuilder):
def allocate_class(builder: IRBuilder, cdef: ClassDef) -> Value:
def make_generic_base_class(
def populate_non_ext_bases(builder: IRBuilder, cdef: ClassDef) -> Value:
def find_non_ext_metaclass(builder: IRBuilder, cdef: ClassDef, bases: Value) -> Value:
def setup_non_ext_dict(
def add_non_ext_class_attr_ann(
def add_non_ext_class_attr(
def find_attr_initializers(
def generate_attr_defaults_init(
def check_deletable_declaration(builder: IRBuilder, cl: ClassIR, line: int) -> None:
def create_ne_from_eq(builder: IRBuilder, cdef: ClassDef) -> None:
def gen_glue_ne_method(builder: IRBuilder, cls: ClassIR, line: int) -> None:
def load_non_ext_class(
def load_decorated_class(builder: IRBuilder, cdef: ClassDef, type_obj: Value) -> Value:
def cache_class_attrs(
def create_mypyc_attrs_tuple(builder: IRBuilder, ir: ClassIR, line: int) -> Value:
def add_dunders_to_non_ext_dict(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\constant_fold.py
-----------------------------
> """Constant folding of IR values.
  
  For example, 3 + 5 can be constant folded into 8.
  
def constant_fold_expr(builder: IRBuilder, expr: Expression) -> ConstantValue | None:
def constant_fold_binary_op_extended(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\context.py
-----------------------------
> """Helpers that store information about functions and the related classes."""
  
  from __future__ import annotations
  
class FuncInfo:
class ImplicitClass:
class GeneratorClass(ImplicitClass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\env_class.py
-----------------------------
> """Generate classes representing function environments (+ related operations).
  
  If we have a nested function that has non-local (free) variables, access to the
  non-locals is via an instance of an environment class. Example:
def setup_env_class(builder: IRBuilder) -> ClassIR:
def finalize_env_class(builder: IRBuilder) -> None:
def instantiate_env_class(builder: IRBuilder) -> Value:
def load_env_registers(builder: IRBuilder) -> None:
def load_outer_env(
def load_outer_envs(builder: IRBuilder, base: ImplicitClass) -> None:
def num_bitmap_args(builder: IRBuilder, args: list[Argument]) -> int:
def add_args_to_env(
def add_vars_to_env(builder: IRBuilder) -> None:
def setup_func_for_recursive_call(builder: IRBuilder, fdef: FuncDef, base: ImplicitClass) -> None:
def is_free_variable(builder: IRBuilder, symbol: SymbolNode) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\expression.py
-----------------------------
> """Transform mypy expression ASTs to mypyc IR (Intermediate Representation).
  
  The top-level AST transformation logic is implemented in mypyc.irbuild.visitor
  and mypyc.irbuild.builder.
def transform_name_expr(builder: IRBuilder, expr: NameExpr) -> Value:
def transform_member_expr(builder: IRBuilder, expr: MemberExpr) -> Value:
def check_instance_attribute_access_through_class(
def transform_super_expr(builder: IRBuilder, o: SuperExpr) -> Value:
def transform_call_expr(builder: IRBuilder, expr: CallExpr) -> Value:
def translate_call(builder: IRBuilder, expr: CallExpr, callee: Expression) -> Value:
def translate_refexpr_call(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value:
def translate_method_call(builder: IRBuilder, expr: CallExpr, callee: MemberExpr) -> Value:
def call_classmethod(builder: IRBuilder, ir: ClassIR, expr: CallExpr, callee: MemberExpr) -> Value:
def translate_super_method_call(builder: IRBuilder, expr: CallExpr, callee: SuperExpr) -> Value:
def translate_cast_expr(builder: IRBuilder, expr: CastExpr) -> Value:
def transform_unary_expr(builder: IRBuilder, expr: UnaryExpr) -> Value:
def transform_op_expr(builder: IRBuilder, expr: OpExpr) -> Value:
def try_optimize_int_floor_divide(expr: OpExpr) -> OpExpr:
def transform_index_expr(builder: IRBuilder, expr: IndexExpr) -> Value:
def try_constant_fold(builder: IRBuilder, expr: Expression) -> Value | None:
def try_gen_slice_op(builder: IRBuilder, base: Value, index: SliceExpr) -> Value | None:
def transform_conditional_expr(builder: IRBuilder, expr: ConditionalExpr) -> Value:
def set_literal_values(builder: IRBuilder, items: Sequence[Expression]) -> list[object] | None:
def precompute_set_literal(builder: IRBuilder, s: SetExpr) -> Value | None:
def transform_comparison_expr(builder: IRBuilder, e: ComparisonExpr) -> Value:
def translate_is_none(builder: IRBuilder, expr: Expression, negated: bool) -> Value:
def transform_basic_comparison(
def translate_printf_style_formatting(
def transform_int_expr(builder: IRBuilder, expr: IntExpr) -> Value:
def transform_float_expr(builder: IRBuilder, expr: FloatExpr) -> Value:
def transform_complex_expr(builder: IRBuilder, expr: ComplexExpr) -> Value:
def transform_str_expr(builder: IRBuilder, expr: StrExpr) -> Value:
def transform_bytes_expr(builder: IRBuilder, expr: BytesExpr) -> Value:
def transform_ellipsis(builder: IRBuilder, o: EllipsisExpr) -> Value:
def transform_list_expr(builder: IRBuilder, expr: ListExpr) -> Value:
def _visit_list_display(builder: IRBuilder, items: list[Expression], line: int) -> Value:
def transform_tuple_expr(builder: IRBuilder, expr: TupleExpr) -> Value:
def _visit_tuple_display(builder: IRBuilder, expr: TupleExpr) -> Value:
def transform_dict_expr(builder: IRBuilder, expr: DictExpr) -> Value:
def transform_set_expr(builder: IRBuilder, expr: SetExpr) -> Value:
def _visit_display(
def transform_list_comprehension(builder: IRBuilder, o: ListComprehension) -> Value:
def transform_set_comprehension(builder: IRBuilder, o: SetComprehension) -> Value:
def transform_dictionary_comprehension(builder: IRBuilder, o: DictionaryComprehension) -> Value:
def transform_slice_expr(builder: IRBuilder, expr: SliceExpr) -> Value:
def transform_generator_expr(builder: IRBuilder, o: GeneratorExpr) -> Value:
def transform_assignment_expr(builder: IRBuilder, o: AssignmentExpr) -> Value:
def transform_math_literal(builder: IRBuilder, fullname: str) -> Value | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\format_str_tokenizer.py
-----------------------------
> """Tokenizers for three string formatting methods"""
  
  from __future__ import annotations
  
class FormatOp(Enum):
def generate_format_ops(specifiers: list[ConversionSpecifier]) -> list[FormatOp] | None:
def tokenizer_printf_style(format_str: str) -> tuple[list[str], list[FormatOp]] | None:
def tokenizer_format_call(format_str: str) -> tuple[list[str], list[FormatOp]] | None:
def convert_format_expr_to_str(
def join_formatted_strings(
def convert_format_expr_to_bytes(
def join_formatted_bytes(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\for_helpers.py
-----------------------------
> """Helpers for generating for loops and comprehensions.
  
  We special case certain kinds for loops such as "for x in range(...)"
  for better efficiency.  Each for loop generator class below deals one
def for_loop_helper(
def for_loop_helper_with_index(
def sequence_from_generator_preallocate_helper(
def translate_list_comprehension(builder: IRBuilder, gen: GeneratorExpr) -> Value:
def raise_error_if_contains_unreachable_names(
def translate_set_comprehension(builder: IRBuilder, gen: GeneratorExpr) -> Value:
def comprehension_helper(
def is_range_ref(expr: RefExpr) -> bool:
def make_for_loop_generator(
class ForGenerator:
class ForIterable(ForGenerator):
class ForAsyncIterable(ForGenerator):
def unsafe_index(builder: IRBuilder, target: Value, index: Value, line: int) -> Value:
class ForSequence(ForGenerator):
class ForDictionaryCommon(ForGenerator):
class ForDictionaryKeys(ForDictionaryCommon):
class ForDictionaryValues(ForDictionaryCommon):
class ForDictionaryItems(ForDictionaryCommon):
class ForRange(ForGenerator):
class ForInfiniteCounter(ForGenerator):
class ForEnumerate(ForGenerator):
class ForZip(ForGenerator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\function.py
-----------------------------
> """Transform mypy AST functions to IR (and related things).
  
  Normal functions are translated into a list of basic blocks
  containing various IR ops (defined in mypyc.ir.ops).
def transform_func_def(builder: IRBuilder, fdef: FuncDef) -> None:
def transform_overloaded_func_def(builder: IRBuilder, o: OverloadedFuncDef) -> None:
def transform_decorator(builder: IRBuilder, dec: Decorator) -> None:
def transform_lambda_expr(builder: IRBuilder, expr: LambdaExpr) -> Value:
def gen_func_item(
def gen_func_body(
def has_nested_func_self_reference(builder: IRBuilder, fitem: FuncItem) -> bool:
def gen_func_ir(
def handle_ext_method(builder: IRBuilder, cdef: ClassDef, fdef: FuncDef) -> None:
def handle_non_ext_method(
def gen_func_ns(builder: IRBuilder) -> str:
def load_decorated_func(builder: IRBuilder, fdef: FuncDef, orig_func_reg: Value) -> Value:
def is_decorated(builder: IRBuilder, fdef: FuncDef) -> bool:
def gen_glue(
class ArgInfo(NamedTuple):
def get_args(builder: IRBuilder, rt_args: Sequence[RuntimeArg], line: int) -> ArgInfo:
def gen_glue_method(
def check_native_override(
def gen_glue_property(
def get_func_target(builder: IRBuilder, fdef: FuncDef) -> AssignmentTarget:
def load_type(builder: IRBuilder, typ: TypeInfo, unbounded_type: Type | None, line: int) -> Value:
def load_func(builder: IRBuilder, func_name: str, fullname: str | None, line: int) -> Value:
def generate_singledispatch_dispatch_function(
def gen_calls_to_correct_impl(
def gen_dispatch_func_ir(
def generate_dispatch_glue_native_function(
def generate_singledispatch_callable_class_ctor(builder: IRBuilder) -> None:
def add_register_method_to_callable_class(builder: IRBuilder, fn_info: FuncInfo) -> None:
def load_singledispatch_registry(builder: IRBuilder, dispatch_func_obj: Value, line: int) -> Value:
def singledispatch_main_func_name(orig_name: str) -> str:
def maybe_insert_into_registry_dict(builder: IRBuilder, fitem: FuncDef) -> None:
def get_native_impl_ids(builder: IRBuilder, singledispatch_func: FuncDef) -> dict[FuncDef, int]:
def gen_property_getter_ir(
def gen_property_setter_ir(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\generator.py
-----------------------------
> """Generate IR for generator functions.
  
  A generator function is represented by a class that implements the
  generator protocol and keeps track of the generator state, including
def gen_generator_func(
def gen_generator_func_body(
def instantiate_generator_class(builder: IRBuilder) -> Value:
def setup_generator_class(builder: IRBuilder) -> ClassIR:
def create_switch_for_generator_class(builder: IRBuilder) -> None:
def populate_switch_for_generator_class(builder: IRBuilder) -> None:
def add_raise_exception_blocks_to_generator_class(builder: IRBuilder, line: int) -> None:
def add_methods_to_generator_class(
def add_helper_to_generator_class(
def add_iter_to_generator_class(builder: IRBuilder, fn_info: FuncInfo) -> None:
def add_next_to_generator_class(
def add_send_to_generator_class(
def add_throw_to_generator_class(
def add_close_to_generator_class(builder: IRBuilder, fn_info: FuncInfo) -> None:
def add_await_to_generator_class(builder: IRBuilder, fn_info: FuncInfo) -> None:
def setup_env_for_generator_class(builder: IRBuilder) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\ll_builder.py
-----------------------------
> """A "low-level" IR builder class.
  
  See the docstring of class LowLevelIRBuilder for more information.
  
class LowLevelIRBuilder:
def num_positional_args(arg_values: list[Value], arg_kinds: list[ArgKind] | None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\main.py
-----------------------------
> """Transform a mypy AST to the IR form (Intermediate Representation).
  
  For example, consider a function like this:
  
def build_ir(
def transform_mypy_file(builder: IRBuilder, mypyfile: MypyFile) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\mapper.py
-----------------------------
> """Maintain a mapping from mypy concepts to IR/compiled concepts."""
  
  from __future__ import annotations
  
class Mapper:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\match.py
-----------------------------
class MatchVisitor(TraverserVisitor):
def prep_sequence_pattern(
def extract_dunder_match_args_names(info: TypeInfo) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\missingtypevisitor.py
-----------------------------
>     """AST visitor that can be used to add any missing types as a generic AnyType."""
  
      def __init__(self, types: dict[Expression, Type]) -> None:
          super().__init__()
class MissingTypesVisitor(ExtendedTraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\nonlocalcontrol.py
-----------------------------
> """Helpers for dealing with nonlocal control such as 'break' and 'return'.
  
  Model how these behave differently in different contexts.
class NonlocalControl:
class BaseNonlocalControl(NonlocalControl):
class LoopNonlocalControl(NonlocalControl):
class GeneratorNonlocalControl(BaseNonlocalControl):
class CleanupNonlocalControl(NonlocalControl):
class TryFinallyNonlocalControl(NonlocalControl):
class ExceptNonlocalControl(CleanupNonlocalControl):
class FinallyNonlocalControl(CleanupNonlocalControl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\prebuildvisitor.py
-----------------------------
>     """Mypy file AST visitor run before building the IR.
  
      This collects various things, including:
  
class PreBuildVisitor(ExtendedTraverserVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\prepare.py
-----------------------------
> """Prepare for IR transform.
  
  This needs to run after type checking and before generating IR.
  
def build_type_map(
def is_from_module(node: SymbolNode, module: MypyFile) -> bool:
def load_type_map(mapper: Mapper, modules: list[MypyFile], deser_ctx: DeserMaps) -> None:
def get_module_func_defs(module: MypyFile) -> Iterable[FuncDef]:
def prepare_func_def(
def prepare_method_def(
def is_valid_multipart_property_def(prop: OverloadedFuncDef) -> bool:
def can_subclass_builtin(builtin_base: str) -> bool:
def prepare_class_def(
def prepare_methods_and_attributes(
def prepare_implicit_property_accessors(
def add_property_methods_for_attribute_if_needed(
def add_getter_declaration(
def add_setter_declaration(
def prepare_init_method(cdef: ClassDef, ir: ClassIR, module_name: str, mapper: Mapper) -> None:
def prepare_non_ext_class_def(
class SingledispatchInfo(NamedTuple):
def find_singledispatch_register_impls(
class SingledispatchVisitor(TraverserVisitor):
class RegisteredImpl(NamedTuple):
def get_singledispatch_register_call_info(
def registered_impl_from_possible_register_call(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\specialize.py
-----------------------------
> """Special case IR generation of calls to specific builtin functions.
  
  Most special cases should be handled using the data driven "primitive
  ops" system, but certain operations require special handling that has
def _apply_specialization(
def apply_function_specialization(
def apply_method_specialization(
def specialize_function(
def translate_globals(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_builtins_with_unary_dunder(
def translate_len(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def dict_methods_fast_path(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_list_from_generator_call(
def translate_tuple_from_generator_call(
def translate_set_from_generator_call(
def faster_min_max(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_safe_generator_call(
def translate_any_call(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_all_call(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def any_all_helper(
def translate_sum_call(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_dataclasses_field_call(
def translate_next_call(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_isinstance(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_dict_setdefault(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_str_format(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_fstring(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def str_encode_fast_path(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_i64(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_i32(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_i16(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_u8(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def truncate_literal(value: Value, rtype: RPrimitive) -> Value:
def translate_int(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_bool(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_float(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:
def translate_ord(builder: IRBuilder, expr: CallExpr, callee: RefExpr) -> Value | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\statement.py
-----------------------------
> """Transform mypy statement ASTs to mypyc IR (Intermediate Representation).
  
  The top-level AST transformation logic is implemented in mypyc.irbuild.visitor
  and mypyc.irbuild.builder.
def transform_block(builder: IRBuilder, block: Block) -> None:
def transform_expression_stmt(builder: IRBuilder, stmt: ExpressionStmt) -> None:
def transform_return_stmt(builder: IRBuilder, stmt: ReturnStmt) -> None:
def transform_assignment_stmt(builder: IRBuilder, stmt: AssignmentStmt) -> None:
def is_simple_lvalue(expr: Expression) -> bool:
def transform_operator_assignment_stmt(builder: IRBuilder, stmt: OperatorAssignmentStmt) -> None:
def import_globals_id_and_name(module_id: str, as_name: str | None) -> tuple[str, str]:
def transform_import(builder: IRBuilder, node: Import) -> None:
def transform_import_from(builder: IRBuilder, node: ImportFrom) -> None:
def transform_import_all(builder: IRBuilder, node: ImportAll) -> None:
def transform_if_stmt(builder: IRBuilder, stmt: IfStmt) -> None:
def transform_while_stmt(builder: IRBuilder, s: WhileStmt) -> None:
def transform_for_stmt(builder: IRBuilder, s: ForStmt) -> None:
def transform_break_stmt(builder: IRBuilder, node: BreakStmt) -> None:
def transform_continue_stmt(builder: IRBuilder, node: ContinueStmt) -> None:
def transform_raise_stmt(builder: IRBuilder, s: RaiseStmt) -> None:
def transform_try_except(
def transform_try_except_stmt(builder: IRBuilder, t: TryStmt) -> None:
def try_finally_try(
def try_finally_entry_blocks(
def try_finally_body(
def try_finally_resolve_control(
def transform_try_finally_stmt(
def transform_try_finally_stmt_async(
class AwaitDetector(mypy.traverser.TraverserVisitor):
def transform_try_stmt(builder: IRBuilder, t: TryStmt) -> None:
def get_sys_exc_info(builder: IRBuilder) -> list[Value]:
def transform_with(
def transform_with_stmt(builder: IRBuilder, o: WithStmt) -> None:
def transform_assert_stmt(builder: IRBuilder, a: AssertStmt) -> None:
def transform_del_stmt(builder: IRBuilder, o: DelStmt) -> None:
def transform_del_item(builder: IRBuilder, target: AssignmentTarget, line: int) -> None:
def emit_yield(builder: IRBuilder, val: Value, line: int) -> Value:
def emit_yield_from_or_await(
def emit_await(builder: IRBuilder, val: Value, line: int) -> Value:
def transform_yield_expr(builder: IRBuilder, expr: YieldExpr) -> Value:
def transform_yield_from_expr(builder: IRBuilder, o: YieldFromExpr) -> Value:
def transform_await_expr(builder: IRBuilder, o: AwaitExpr) -> Value:
def transform_match_stmt(builder: IRBuilder, m: MatchStmt) -> None:
def transform_type_alias_stmt(builder: IRBuilder, s: TypeAliasStmt) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\targets.py
-----------------------------
>     """Abstract base class for assignment targets during IR building."""
  
      type: RType = object_rprimitive
  
class AssignmentTarget:
class AssignmentTargetRegister(AssignmentTarget):
class AssignmentTargetIndex(AssignmentTarget):
class AssignmentTargetAttr(AssignmentTarget):
class AssignmentTargetTuple(AssignmentTarget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\util.py
-----------------------------
> """Various utilities that don't depend on other modules in mypyc.irbuild."""
  
  from __future__ import annotations
  
def is_final_decorator(d: Expression) -> bool:
def is_trait_decorator(d: Expression) -> bool:
def is_trait(cdef: ClassDef) -> bool:
def dataclass_decorator_type(d: Expression) -> str | None:
def is_dataclass_decorator(d: Expression) -> bool:
def is_dataclass(cdef: ClassDef) -> bool:
def dataclass_type(cdef: ClassDef) -> str | None:
def get_mypyc_attr_literal(e: Expression) -> Any:
def get_mypyc_attr_call(d: Expression) -> CallExpr | None:
def get_mypyc_attrs(stmt: ClassDef | Decorator) -> dict[str, Any]:
def is_extension_class(path: str, cdef: ClassDef, errors: Errors) -> bool:
def get_explicit_native_class(path: str, cdef: ClassDef, errors: Errors) -> bool | None:
def is_implicit_extension_class(cdef: ClassDef) -> tuple[bool, str]:
def get_func_def(op: FuncDef | Decorator | OverloadedFuncDef) -> FuncDef:
def concrete_arg_kind(kind: ArgKind) -> ArgKind:
def is_constant(e: Expression) -> bool:
def bytes_from_str(value: str) -> bytes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\visitor.py
-----------------------------
> """Dispatcher used when transforming a mypy AST to the IR form.
  
  mypyc.irbuild.builder and mypyc.irbuild.main are closely related.
class IRBuilderVisitor(IRVisitor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\vtable.py
-----------------------------
> """Compute vtables of native (extension) classes."""
  
  from __future__ import annotations
  
def compute_vtable(cls: ClassIR) -> None:
def specialize_parent_vtable(cls: ClassIR, parent: ClassIR) -> VTableEntries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\irbuild\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\lower\int_ops.py
-----------------------------
> """Convert tagged int primitive ops to lower-level ops."""
  
  from __future__ import annotations
  
class IntComparisonOpDescription(NamedTuple):
def compare_tagged(self: LowLevelIRBuilder, lhs: Value, rhs: Value, op: str, line: int) -> Value:
def lower_int_eq(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def lower_int_ne(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def lower_int_lt(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def lower_int_le(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def lower_int_gt(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def lower_int_ge(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\lower\list_ops.py
-----------------------------
>     """Initialize an item in a buffer of "PyObject *" values at given index.
  
      This can be used to initialize the data buffer of a freshly allocated list
      object.
def buf_init_item(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def list_items(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:
def list_item_ptr(builder: LowLevelIRBuilder, obj: Value, index: Value, line: int) -> Value:
def list_get_item_unsafe(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\lower\misc_ops.py
-----------------------------
def var_object_size(builder: LowLevelIRBuilder, args: list[Value], line: int) -> Value:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\lower\registry.py
-----------------------------
>     """Register a handler that generates low-level IR for a primitive op."""
  
      def wrapper(f: LF) -> LF:
          assert name not in lowering_registry
def lower_primitive_op(name: str) -> Callable[[LF], LF]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\lower\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\bytes_ops.py
-----------------------------
> """Primitive bytes ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\dict_ops.py
-----------------------------
> """Primitive dict ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\exc_ops.py
-----------------------------
> """Exception-related primitive ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\float_ops.py
-----------------------------
> """Primitive float ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\generic_ops.py
-----------------------------
> """Fallback primitive operations that operate on 'object' operands.
  
  These just call the relevant Python C API function or a thin wrapper
  around an API function. Most of these also have faster, specialized

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\int_ops.py
-----------------------------
> """Arbitrary-precision integer primitive ops.
  
  These mostly operate on (usually) unboxed integers that use a tagged pointer
  representation (CPyTagged) and correspond to the Python 'int' type.
def int_binary_primitive(
def int_binary_op(
def int_unary_op(name: str, c_function_name: str) -> PrimitiveDescription:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\list_ops.py
-----------------------------
> """List primitive ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\misc_ops.py
-----------------------------
> """Miscellaneous primitive ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\registry.py
-----------------------------
> """Utilities for defining primitive ops.
  
  Most of the ops can be automatically generated by matching against AST
  nodes and types. For example, a func_op is automatically generated when
class CFunctionDescription(NamedTuple):
class LoadAddressDescription(NamedTuple):
def method_op(
def function_op(
def binary_op(
def custom_op(
def custom_primitive_op(
def unary_op(
def load_address_op(name: str, type: RType, src: str) -> LoadAddressDescription:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\set_ops.py
-----------------------------
> """Primitive set and frozenset ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\str_ops.py
-----------------------------
> """Primitive str ops."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\tuple_ops.py
-----------------------------
> """Primitive tuple ops for *variable-length* tuples.
  
  Note: Varying-length tuples are represented as boxed Python tuple
  objects, i.e. tuple_rprimitive (RPrimitive), not RTuple.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\primitives\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\config.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\testutil.py
-----------------------------
> """Helpers for writing tests"""
  
  from __future__ import annotations
  
class MypycDataSuite(DataSuite):
def builtins_wrapper(
def use_custom_builtins(builtins_path: str, testcase: DataDrivenTestCase) -> Iterator[None]:
def perform_test(
def build_ir_for_single_file(
def build_ir_for_single_file2(
def update_testcase_output(testcase: DataDrivenTestCase, output: list[str]) -> None:
def assert_test_output(
def get_func_names(expected: list[str]) -> list[str]:
def remove_comment_lines(a: list[str]) -> list[str]:
def print_with_line_numbers(s: str) -> None:
def heading(text: str) -> None:
def show_c(cfiles: list[list[tuple[str, str]]]) -> None:
def fudge_dir_mtimes(dir: str, delta: int) -> None:
def replace_word_size(text: list[str]) -> list[str]:
def infer_ir_build_options_from_test_name(name: str) -> CompilerOptions | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_alwaysdefined.py
-----------------------------
> """Test cases for inferring always defined attributes in classes."""
  
  from __future__ import annotations
  
class TestAlwaysDefined(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_analysis.py
-----------------------------
> """Test runner for data-flow analysis test cases."""
  
  from __future__ import annotations
  
class TestAnalysis(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_annotate.py
-----------------------------
> """Test cases for annotating source code to highlight inefficiencies."""
  
  from __future__ import annotations
  
class TestReport(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_cheader.py
-----------------------------
> """Test that C functions used in primitives are declared in a header such as CPy.h."""
  
  from __future__ import annotations
  
class TestHeaderInclusion(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_commandline.py
-----------------------------
> """Test cases for invoking mypyc on the command line.
  
  These are slow -- do not add test cases unless you have a very good reason to do so.
class TestCommandLine(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_emit.py
-----------------------------
>             == """\
   /* [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
class TestEmitter(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_emitclass.py
-----------------------------
class TestEmitClass(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_emitfunc.py
-----------------------------
>     """Test generation of fragments of C from individual IR ops."""
  
      def setUp(self) -> None:
          self.registers: list[Register] = []
class TestFunctionEmitterVisitor(unittest.TestCase):
class TestGenerateFunction(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_emitwrapper.py
-----------------------------
class TestArgCheck(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_exceptions.py
-----------------------------
> """Test runner for exception handling transform test cases.
  
  The transform inserts exception handling branch operations to IR.
class TestExceptionTransform(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_external.py
-----------------------------
> """Test cases that run tests as subprocesses."""
  
  from __future__ import annotations
  
class TestExternal(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_irbuild.py
-----------------------------
> """Test cases for IR generation."""
  
  from __future__ import annotations
  
class TestGenOps(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_ircheck.py
-----------------------------
def assert_has_error(fn: FuncIR, error: FnError) -> None:
def assert_no_errors(fn: FuncIR) -> None:
class TestIrcheck(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_literals.py
-----------------------------
> """Test code geneneration for literals."""
  
  from __future__ import annotations
  
class TestLiterals(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_lowering.py
-----------------------------
> """Runner for lowering transform tests."""
  
  from __future__ import annotations
  
class TestLowering(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_misc.py
-----------------------------
class TestMisc(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_namegen.py
-----------------------------
class TestNameGen(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_optimizations.py
-----------------------------
> """Runner for IR optimization tests."""
  
  from __future__ import annotations
  
class OptimizationSuite(MypycDataSuite):
class TestCopyPropagation(OptimizationSuite):
class TestFlagElimination(OptimizationSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_pprint.py
-----------------------------
def register(name: str) -> Register:
def make_block(ops: list[Op]) -> BasicBlock:
class TestGenerateNames(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_rarray.py
-----------------------------
> """Unit tests for RArray types."""
  
  from __future__ import annotations
  
class TestRArray(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_refcount.py
-----------------------------
> """Test runner for reference count opcode insertion transform test cases.
  
  The transform inserts needed reference count increment/decrement
  operations to IR.
class TestRefCountTransform(MypycDataSuite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_run.py
-----------------------------
> """Test cases for building an C extension and running it."""
  
  from __future__ import annotations
  
def run_setup(script_name: str, script_args: list[str]) -> bool:
def chdir_manager(target: str) -> Iterator[None]:
class TestRun(MypycDataSuite):
class TestRunMultiFile(TestRun):
class TestRunSeparate(TestRun):
class TestRunStrictDunderTyping(TestRun):
def fix_native_line_number(message: str, fnam: str, delta: int) -> str:
def copy_output_files(target_dir: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_serialization.py
-----------------------------
> """Functions to check that serialization round-tripped properly."""
  
  # This file is named test_serialization.py even though it doesn't
  # contain its own tests so that pytest will rewrite the asserts...
def get_dict(x: Any) -> dict[str, Any]:
def get_function_dict(x: FuncIR) -> dict[str, Any]:
def assert_blobs_same(x: Any, y: Any, trail: tuple[Any, ...]) -> None:
def assert_modules_same(ir1: ModuleIR, ir2: ModuleIR) -> None:
def check_serialization_roundtrip(irs: dict[str, ModuleIR]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_struct.py
-----------------------------
class TestStruct(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_tuplename.py
-----------------------------
class TestTupleNames(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\test_typeops.py
-----------------------------
> """Test cases for various RType operations."""
  
  from __future__ import annotations
  
class TestSubtype(unittest.TestCase):
class TestRuntimeSubtype(unittest.TestCase):
class TestUnionSimplification(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\test\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\copy_propagation.py
-----------------------------
> """Simple copy propagation optimization.
  
  Example input:
  
def do_copy_propagation(fn: FuncIR, options: CompilerOptions) -> None:
class CopyPropagationTransform(IRTransform):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\exceptions.py
-----------------------------
> """Transform that inserts error checks after opcodes.
  
  When initially building the IR, the code doesn't perform error checks
  for exceptions. This module is used to insert all required error checks
def insert_exception_handling(ir: FuncIR) -> None:
def add_default_handler_block(ir: FuncIR) -> BasicBlock:
def split_blocks_at_errors(
def primitive_call(desc: CFunctionDescription, args: list[Value], line: int) -> CallC:
def adjust_error_kinds(block: BasicBlock) -> None:
def insert_overlapping_error_value_check(ops: list[Op], target: Value) -> ComparisonOp:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\flag_elimination.py
-----------------------------
> """Bool register elimination optimization.
  
  Example input:
  
def do_flag_elimination(fn: FuncIR, options: CompilerOptions) -> None:
class FlagEliminationTransform(IRTransform):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\ir_transform.py
-----------------------------
> """Helpers for implementing generic IR to IR transforms."""
  
  from __future__ import annotations
  
class IRTransform(OpVisitor[Optional[Value]]):
class PatchVisitor(OpVisitor[None]):
def is_empty_block(block: BasicBlock) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\lower.py
-----------------------------
> """Transform IR to lower-level ops.
  
  Higher-level ops are used in earlier compiler passes, as they make
  various analyses, optimizations and transforms easier to implement.
def lower_ir(ir: FuncIR, options: CompilerOptions) -> None:
class LoweringVisitor(IRTransform):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\refcount.py
-----------------------------
> """Transformation for inserting refrecence count inc/dec opcodes.
  
  This transformation happens towards the end of compilation. Before this
  transformation, reference count management is not explicitly handled at all.
def insert_ref_count_opcodes(ir: FuncIR) -> None:
def is_maybe_undefined(post_must_defined: set[Value], src: Value) -> bool:
def maybe_append_dec_ref(
def maybe_append_inc_ref(ops: list[Op], dest: Value) -> None:
def transform_block(
def insert_branch_inc_and_decrefs(
def after_branch_decrefs(
def after_branch_increfs(
def add_block(
def make_value_ordering(ir: FuncIR) -> dict[Value, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\spill.py
-----------------------------
> """Insert spills for values that are live across yields."""
  
  from __future__ import annotations
  
def insert_spills(ir: FuncIR, env: ClassIR) -> None:
def spill_regs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\uninit.py
-----------------------------
> """Insert checks for uninitialized values."""
  
  from __future__ import annotations
  
def insert_uninit_checks(ir: FuncIR) -> None:
def split_blocks_at_uninits(
def check_for_uninit_using_bitmap(
def update_register_assignments_to_set_bitmap(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\transform\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\annotate.py
-----------------------------
> """Generate source code formatted as HTML, with bottlenecks annotated and highlighted.
  
  Various heuristics are used to detect common issues that cause slower than
  expected performance.
class Annotation:
class AnnotatedSource:
def generate_annotated_html(
def generate_annotations(
def function_annotations(func_ir: FuncIR, tree: MypyFile) -> dict[int, list[Annotation]]:
class ASTAnnotateVisitor(TraverserVisitor):
def get_str_literal(v: Value) -> str | None:
def get_max_prio(anns: list[Annotation]) -> list[Annotation]:
def generate_html_report(sources: list[AnnotatedSource]) -> str:
def colorize_line(linenum: str, s: str, hint_html: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\build.py
-----------------------------
> """Support for building extensions using mypyc with distutils or setuptools
  
  The main entry point is mypycify, which produces a list of extension
  modules to be passed to setup. A trivial setup.py for a mypyc built
def get_extension() -> type[Extension]:
def setup_mypycify_vars() -> None:
def fail(message: str) -> NoReturn:
def emit_messages(options: Options, messages: list[str], dt: float, serious: bool = False) -> None:
def get_mypy_config(
def generate_c_extension_shim(
def group_name(modules: list[str]) -> str:
def include_dir() -> str:
def generate_c(
def build_using_shared_lib(
def build_single_module(
def write_file(path: str, contents: str) -> None:
def construct_groups(
def get_header_deps(cfiles: list[tuple[str, str]]) -> list[str]:
def mypyc_build(
def mypycify(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\common.py
-----------------------------
>     """Given a group name, return the actual name of its extension module.
  
      (This just adds a suffix to the final component.)
def shared_lib_name(group_name: str) -> str:
def short_name(name: str) -> str:
def get_id_from_name(name: str, fullname: str, line: int) -> str:
def short_id_from_name(func_name: str, shortname: str, line: int | None) -> str:
def bitmap_name(index: int) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\crash.py
-----------------------------
def catch_errors(module_path: str, line: int) -> Iterator[None]:
def crash_report(module_path: str, line: int) -> NoReturn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\errors.py
-----------------------------
class Errors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\namegen.py
-----------------------------
>     """Utility for generating distinct C names from Python names.
  
      Since C names can't use '.' (or unicode), some care is required to
      make C names generated from Python names unique. Also, we want to
class NameGenerator:
def exported_name(fullname: str) -> str:
def make_module_translation_map(names: list[str]) -> dict[str, str]:
def candidate_suffixes(fullname: str) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\options.py
-----------------------------
class CompilerOptions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\rt_subtype.py
-----------------------------
> """'Runtime subtype' check for RTypes.
  
  A type S is a runtime subtype of T if a value of type S can be used at runtime
  when a value of type T is expected without requiring any runtime conversions.
def is_runtime_subtype(left: RType, right: RType) -> bool:
class RTSubtypeVisitor(RTypeVisitor[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\sametype.py
-----------------------------
> """Same type check for RTypes."""
  
  from __future__ import annotations
  
def is_same_type(a: RType, b: RType) -> bool:
def is_same_signature(a: FuncSignature, b: FuncSignature) -> bool:
def is_same_method_signature(a: FuncSignature, b: FuncSignature) -> bool:
class SameTypeVisitor(RTypeVisitor[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\subtype.py
-----------------------------
> """Subtype check for RTypes."""
  
  from __future__ import annotations
  
def is_subtype(left: RType, right: RType) -> bool:
class SubtypeVisitor(RTypeVisitor[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypyc\__main__.py
-----------------------------
> """Mypyc command-line tool.
  
  Usage:
  
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\dependencies.py
-----------------------------
>     """Check whether `df` is a pandas DataFrame without importing pandas."""
      return ((pd := get_pandas()) is not None and isinstance(df, pd.DataFrame)) or any(
          (mod := sys.modules.get(module_name, None)) is not None
          and isinstance(df, mod.pandas.DataFrame)
def is_pandas_dataframe(df: Any) -> TypeIs[pd.DataFrame]:
def is_pandas_series(ser: Any) -> TypeIs[pd.Series[Any]]:
def is_modin_dataframe(df: Any) -> TypeIs[mpd.DataFrame]:
def is_modin_series(ser: Any) -> TypeIs[mpd.Series]:
def is_cudf_dataframe(df: Any) -> TypeIs[cudf.DataFrame]:
def is_cudf_series(ser: Any) -> TypeIs[cudf.Series[Any]]:
def is_dask_dataframe(df: Any) -> TypeIs[dd.DataFrame]:
def is_ibis_table(df: Any) -> TypeIs[ibis.Table]:
def is_polars_dataframe(df: Any) -> TypeIs[pl.DataFrame]:
def is_polars_lazyframe(df: Any) -> TypeIs[pl.LazyFrame]:
def is_polars_series(ser: Any) -> TypeIs[pl.Series]:
def is_pyarrow_chunked_array(ser: Any) -> TypeIs[pa.ChunkedArray[Any]]:
def is_pyarrow_table(df: Any) -> TypeIs[pa.Table]:
def is_pandas_like_dataframe(df: Any) -> bool:
def is_pandas_like_series(ser: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\dtypes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\selectors.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\typing.py
-----------------------------
> """Anything which can be converted to an expression.
  
  Use this to mean "either a Narwhals expression, or something
  which can be converted into one". For example, `exprs` in `DataFrame.select` is

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\_dtypes.py
-----------------------------
>     """A fixed categorical encoding of a unique set of strings.
  
      Polars has an Enum data type, while pandas and PyArrow do not.
  
class Datetime(NwDatetime):
class Duration(NwDuration):
class Enum(NwEnum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\_namespace.py
-----------------------------
class Namespace(NwNamespace[CompliantNamespaceT_co], version=Version.V1): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v1\__init__.py
-----------------------------
>         r"""Get the last `n` rows."""
          return super().tail(n)
  
      def gather_every(self, n: int, offset: int = 0) -> Self:
class DataFrame(NwDataFrame[IntoDataFrameT]):  # type: ignore[type-var]
class LazyFrame(NwLazyFrame[IntoLazyFrameT]):
class Series(NwSeries[IntoSeriesT]):
class Expr(NwExpr):
class Schema(NwSchema):
def _stableify(obj: NwDataFrame[IntoDataFrameT]) -> DataFrame[IntoDataFrameT]: ...  # type: ignore[type-var]
def _stableify(obj: NwLazyFrame[IntoLazyFrameT]) -> LazyFrame[IntoLazyFrameT]: ...
def _stableify(obj: NwSeries[IntoSeriesT]) -> Series[IntoSeriesT]: ...
def _stableify(obj: NwExpr) -> Expr: ...
def _stableify(
def from_native(native_object: SeriesT, **kwds: Any) -> SeriesT: ...
def from_native(native_object: DataFrameT, **kwds: Any) -> DataFrameT: ...
def from_native(native_object: LazyFrameT, **kwds: Any) -> LazyFrameT: ...
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def to_native(
def to_native(
def to_native(
def to_native(narwhals_object: Any, *, strict: bool) -> Any: ...
def to_native(
def to_native(
def to_native(
def to_native(narwhals_object: Any, *, pass_through: bool) -> Any: ...
def to_native(
def narwhalify(
def all() -> Expr:
def col(*names: str | Iterable[str]) -> Expr:
def exclude(*names: str | Iterable[str]) -> Expr:
def nth(*indices: int | Sequence[int]) -> Expr:
def len() -> Expr:
def lit(value: NonNestedLiteral, dtype: IntoDType | None = None) -> Expr:
def min(*columns: str) -> Expr:
def max(*columns: str) -> Expr:
def mean(*columns: str) -> Expr:
def median(*columns: str) -> Expr:
def sum(*columns: str) -> Expr:
def sum_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def all_horizontal(
def any_horizontal(
def mean_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def min_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def max_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def concat_str(
def coalesce(exprs: IntoExpr | Iterable[IntoExpr], *more_exprs: IntoExpr) -> Expr:
def get_level(
class When(nw_f.When):
class Then(nw_f.Then, Expr):
def when(*predicates: IntoExpr | Iterable[IntoExpr]) -> When:
def new_series(
def from_arrow(
def from_dict(
def from_numpy(
def read_csv(
def scan_csv(
def read_parquet(
def scan_parquet(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v2\dependencies.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v2\dtypes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v2\selectors.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v2\typing.py
-----------------------------
> """Anything which can be converted to an expression.
  
  Use this to mean "either a Narwhals expression, or something
  which can be converted into one". For example, `exprs` in `DataFrame.select` is

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v2\_namespace.py
-----------------------------
class Namespace(NwNamespace[CompliantNamespaceT_co], version=Version.V2): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\v2\__init__.py
-----------------------------
>     """Convert `native_object` to Narwhals Dataframe, Lazyframe, or Series.
  
      Arguments:
          native_object: Raw object from user.
class DataFrame(NwDataFrame[IntoDataFrameT]):
class LazyFrame(NwLazyFrame[IntoLazyFrameT]):
class Series(NwSeries[IntoSeriesT]):
class Expr(NwExpr): ...
class Schema(NwSchema):
def _stableify(obj: NwDataFrame[IntoDataFrameT]) -> DataFrame[IntoDataFrameT]: ...
def _stableify(obj: NwLazyFrame[IntoLazyFrameT]) -> LazyFrame[IntoLazyFrameT]: ...
def _stableify(obj: NwSeries[IntoSeriesT]) -> Series[IntoSeriesT]: ...
def _stableify(obj: NwExpr) -> Expr: ...
def _stableify(
def from_native(native_object: SeriesT, **kwds: Any) -> SeriesT: ...
def from_native(native_object: DataFrameT, **kwds: Any) -> DataFrameT: ...
def from_native(native_object: LazyFrameT, **kwds: Any) -> LazyFrameT: ...
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(  # noqa: D417
def to_native(
def to_native(
def to_native(
def to_native(narwhals_object: Any, *, pass_through: bool) -> Any: ...
def to_native(
def narwhalify(
def all() -> Expr:
def col(*names: str | Iterable[str]) -> Expr:
def exclude(*names: str | Iterable[str]) -> Expr:
def nth(*indices: int | Sequence[int]) -> Expr:
def len() -> Expr:
def lit(value: NonNestedLiteral, dtype: IntoDType | None = None) -> Expr:
def min(*columns: str) -> Expr:
def max(*columns: str) -> Expr:
def mean(*columns: str) -> Expr:
def median(*columns: str) -> Expr:
def sum(*columns: str) -> Expr:
def sum_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def all_horizontal(*exprs: IntoExpr | Iterable[IntoExpr], ignore_nulls: bool) -> Expr:
def any_horizontal(*exprs: IntoExpr | Iterable[IntoExpr], ignore_nulls: bool) -> Expr:
def mean_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def min_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def max_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def concat_str(
def coalesce(exprs: IntoExpr | Iterable[IntoExpr], *more_exprs: IntoExpr) -> Expr:
class When(nw_f.When):
class Then(nw_f.Then, Expr):
def when(*predicates: IntoExpr | Iterable[IntoExpr]) -> When:
def new_series(
def from_arrow(
def from_dict(
def from_numpy(
def read_csv(
def scan_csv(
def read_parquet(
def scan_parquet(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\stable\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\dataframe.py
-----------------------------
class ArrowDataFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\expr.py
-----------------------------
class ArrowExpr(EagerExpr["ArrowDataFrame", ArrowSeries]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\group_by.py
-----------------------------
class ArrowGroupBy(EagerGroupBy["ArrowDataFrame", "ArrowExpr", "Aggregation"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\namespace.py
-----------------------------
class ArrowNamespace(
class ArrowWhen(EagerWhen[ArrowDataFrame, ArrowSeries, ArrowExpr, "ChunkedArrayAny"]):
class ArrowThen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\selectors.py
-----------------------------
class ArrowSelectorNamespace(EagerSelectorNamespace["ArrowDataFrame", "ArrowSeries"]):
class ArrowSelector(CompliantSelector["ArrowDataFrame", "ArrowSeries"], ArrowExpr):  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\series.py
-----------------------------
>         """Parallel is unused, exists for compatibility."""
          from narwhals._arrow.dataframe import ArrowDataFrame
  
          index_name_ = "index" if self._name is None else self._name
def maybe_extract_py_scalar(
def maybe_extract_py_scalar(
def maybe_extract_py_scalar(
def maybe_extract_py_scalar(
def maybe_extract_py_scalar(value: Any, return_py_scalar: bool) -> Any:  # noqa: FBT001
class ArrowSeries(EagerSeries["ChunkedArrayAny"]):
class _ArrowHist(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\series_cat.py
-----------------------------
class ArrowSeriesCatNamespace(ArrowSeriesNamespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\series_dt.py
-----------------------------
class ArrowSeriesDateTimeNamespace(ArrowSeriesNamespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\series_list.py
-----------------------------
class ArrowSeriesListNamespace(ArrowSeriesNamespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\series_str.py
-----------------------------
class ArrowSeriesStringNamespace(ArrowSeriesNamespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\series_struct.py
-----------------------------
class ArrowSeriesStructNamespace(ArrowSeriesNamespace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\typing.py
-----------------------------
> """
  Marker for working code that fails on the stubs.
  
  Common issues:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\utils.py
-----------------------------
> """Alias for `pyarrow.scalar`."""
  
  
  def extract_py_scalar(value: Any, /) -> Any:
def extract_py_scalar(value: Any, /) -> Any:
def is_array_or_scalar(obj: Any) -> TypeIs[ArrayOrScalar]:
def chunked_array(
def nulls_like(n: int, series: ArrowSeries) -> ArrayAny:
def zeros(n: int, /) -> pa.Int64Array:
def native_to_narwhals_dtype(dtype: pa.DataType, version: Version) -> DType:  # noqa: C901, PLR0912
def narwhals_to_native_dtype(dtype: IntoDType, version: Version) -> pa.DataType:
def extract_native(
def floordiv_compat(left: ArrayOrScalar, right: ArrayOrScalar, /) -> Any:
def cast_for_truediv(
def _extract_regex_concat_arrays(
def parse_datetime_format(arr: ChunkedArrayAny) -> str:
def _parse_date_format(arr: pc.StringArray) -> str:
def _parse_time_format(arr: pc.StringArray) -> str:
def pad_series(
def cast_to_comparable_string_types(
class ArrowSeriesNamespace(EagerSeriesNamespace["ArrowSeries", "ChunkedArrayAny"]): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_arrow\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\any_namespace.py
-----------------------------
> """`Expr` and `Series` namespace accessor protocols."""
  
  from __future__ import annotations
  
class CatNamespace(_StoresCompliant[CompliantT_co], Protocol[CompliantT_co]):
class DateTimeNamespace(_StoresCompliant[CompliantT_co], Protocol[CompliantT_co]):
class ListNamespace(_StoresCompliant[CompliantT_co], Protocol[CompliantT_co]):
class NameNamespace(_StoresCompliant[CompliantT_co], Protocol[CompliantT_co]):
class StringNamespace(_StoresCompliant[CompliantT_co], Protocol[CompliantT_co]):
class StructNamespace(_StoresCompliant[CompliantT_co], Protocol[CompliantT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\column.py
-----------------------------
>     """Common parts of `Expr`, `Series`."""
  
      _version: Version
  
class CompliantColumn(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\dataframe.py
-----------------------------
>         """`select` where all args are column names."""
          ...
  
      def aggregate(self, *exprs: CompliantExprT_contra) -> Self:
class CompliantDataFrame(
class CompliantLazyFrame(
class EagerDataFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\expr.py
-----------------------------
>     """An `Expr`-like object from a package with [Lazy-only 
support](https://narwhals-dev.github.io/narwhals/extending/#levels-of-support).
  
      Protocol members are chosen *purely* for matching statically - as they
      are common to all currently supported packages.
class NativeExpr(Protocol):
class CompliantExpr(
class DepthTrackingExpr(
class EagerExpr(
class LazyExpr(  # type: ignore[misc]
class _ExprNamespace(  # type: ignore[misc]
class EagerExprNamespace(_ExprNamespace[EagerExprT], Generic[EagerExprT]):
class LazyExprNamespace(_ExprNamespace[LazyExprT], Generic[LazyExprT]):
class EagerExprCatNamespace(
class EagerExprDateTimeNamespace(
class EagerExprListNamespace(
class CompliantExprNameNamespace(  # type: ignore[misc]
class EagerExprNameNamespace(
class LazyExprNameNamespace(
class EagerExprStringNamespace(
class EagerExprStructNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\group_by.py
-----------------------------
>         """Parses key expressions to set up `.agg` operation with correct information.
  
          Since keys are expressions, it's possible to alias any such key to match
          other dataframe column names.
def _evaluate_aliases(
class CompliantGroupBy(Protocol[CompliantFrameT_co, CompliantExprT_contra]):
class DataFrameGroupBy(
class ParseKeysGroupBy(
class DepthTrackingGroupBy(
class EagerGroupBy(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\namespace.py
-----------------------------
class CompliantNamespace(Protocol[CompliantFrameT, CompliantExprT]):
class DepthTrackingNamespace(
class LazyNamespace(
class EagerNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\selectors.py
-----------------------------
> """Almost entirely complete, generic `selectors` implementation."""
  
  from __future__ import annotations
  
class CompliantSelectorNamespace(Protocol[FrameT, SeriesOrExprT]):
class EagerSelectorNamespace(
class LazySelectorNamespace(
class CompliantSelector(
def _eval_lhs_rhs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\series.py
-----------------------------
>         """`Series.hist(bins=..., bin_count=None)`."""
          ...
  
      @unstable
class CompliantSeries(
class EagerSeries(CompliantSeries[NativeSeriesT], Protocol[NativeSeriesT]):
class _SeriesNamespace(  # type: ignore[misc]
class EagerSeriesNamespace(
class EagerSeriesCatNamespace(  # type: ignore[misc]
class EagerSeriesDateTimeNamespace(  # type: ignore[misc]
class EagerSeriesListNamespace(  # type: ignore[misc]
class EagerSeriesStringNamespace(  # type: ignore[misc]
class EagerSeriesStructNamespace(  # type: ignore[misc]
class EagerSeriesHist(Protocol[NativeSeriesT, _CountsT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\typing.py
-----------------------------
>         """Non-expressifiable args which we may need to reuse in `agg` or `over`."""
  
          adjust: bool
          alpha: float | None

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\when_then.py
-----------------------------
> """A native literal value."""
  
  IntoExpr: TypeAlias = "SeriesT | ExprT | NonNestedLiteral | Scalar"
class CompliantWhen(Protocol[FrameT, SeriesT, ExprT]):
class CompliantThen(
class EagerWhen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\window.py
-----------------------------
class WindowInputs(Generic[NativeExprT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_compliant\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\dataframe.py
-----------------------------
> """Using `_pandas_like` utils with `_dask`.
  
  Typing this correctly will complicate the `_pandas_like`-side.
  Very low priority until `dask` adds typing.
class DaskLazyFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\expr.py
-----------------------------
class DaskExpr(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\expr_dt.py
-----------------------------
class DaskExprDateTimeNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\expr_str.py
-----------------------------
class DaskExprStringNamespace(LazyExprNamespace["DaskExpr"], StringNamespace["DaskExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\group_by.py
-----------------------------
> """The name of an aggregation function, or the function itself."""
  
  
  def n_unique() -> dd.Aggregation:
def n_unique() -> dd.Aggregation:
def _all() -> dd.Aggregation:
def _any() -> dd.Aggregation:
def var(ddof: int) -> _AggFn:
def std(ddof: int) -> _AggFn:
class DaskLazyGroupBy(DepthTrackingGroupBy["DaskLazyFrame", "DaskExpr", Aggregation]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\namespace.py
-----------------------------
class DaskNamespace(
class DaskWhen(CompliantWhen[DaskLazyFrame, "dx.Series", DaskExpr]):  # pyright: ignore[reportInvalidTypeArguments]
class DaskThen(CompliantThen[DaskLazyFrame, "dx.Series", DaskExpr, DaskWhen], DaskExpr):  # pyright: ignore[reportInvalidTypeArguments]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\selectors.py
-----------------------------
class DaskSelectorNamespace(LazySelectorNamespace["DaskLazyFrame", "dx.Series"]):  # pyright: ignore[reportInvalidTypeArguments]
class DaskSelector(CompliantSelector["DaskLazyFrame", "dx.Series"], DaskExpr):  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\utils.py
-----------------------------
def maybe_evaluate_expr(df: DaskLazyFrame, obj: DaskExpr | object) -> dx.Series | object:
def evaluate_exprs(df: DaskLazyFrame, /, *exprs: DaskExpr) -> list[tuple[str, dx.Series]]:
def align_series_full_broadcast(
def add_row_index(frame: dd.DataFrame, name: str) -> dd.DataFrame:
def validate_comparand(lhs: dx.Series, rhs: dx.Series) -> None:
def narwhals_to_native_dtype(dtype: IntoDType, version: Version) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_dask\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\dataframe.py
-----------------------------
>         query = f"""
              SELECT {",".join(select)}
              FROM lhs
              ASOF LEFT JOIN rhs
class DuckDBLazyFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\expr.py
-----------------------------
class DuckDBExpr(SQLExpr["DuckDBLazyFrame", "Expression"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\expr_dt.py
-----------------------------
class DuckDBExprDateTimeNamespace(SQLExprDateTimeNamesSpace["DuckDBExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\expr_list.py
-----------------------------
class DuckDBExprListNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\expr_str.py
-----------------------------
class DuckDBExprStringNamespace(SQLExprStringNamespace["DuckDBExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\expr_struct.py
-----------------------------
class DuckDBExprStructNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\group_by.py
-----------------------------
class DuckDBGroupBy(SQLGroupBy["DuckDBLazyFrame", "DuckDBExpr", "Expression"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\namespace.py
-----------------------------
class DuckDBNamespace(
class DuckDBWhen(SQLWhen["DuckDBLazyFrame", Expression, DuckDBExpr]):
class DuckDBThen(SQLThen["DuckDBLazyFrame", Expression, DuckDBExpr], DuckDBExpr): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\selectors.py
-----------------------------
class DuckDBSelectorNamespace(LazySelectorNamespace["DuckDBLazyFrame", "Expression"]):
class DuckDBSelector(  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\series.py
-----------------------------
class DuckDBInterchangeSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\typing.py
-----------------------------
class WindowExpressionKwargs(TypedDict, total=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\utils.py
-----------------------------
> """Alias for `duckdb.ColumnExpression`."""
  
  lit = duckdb.ConstantExpression
def concat_str(*exprs: Expression, separator: str = "") -> Expression:
def evaluate_exprs(
class DeferredTimeZone:
def native_to_narwhals_dtype(
def fetch_rel_time_zone(rel: duckdb.DuckDBPyRelation) -> str:
def _non_nested_native_to_narwhals_dtype(duckdb_dtype_id: str, version: Version) -> DType:
def narwhals_to_native_dtype(  # noqa: PLR0912, C901
def parse_into_expression(into_expression: str | Expression) -> Expression:
def generate_partition_by_sql(*partition_by: str | Expression) -> str:
def generate_order_by_sql(
def window_expression(
def catch_duckdb_exception(
def function(name: str, *args: Expression) -> Expression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duckdb\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\dataframe.py
-----------------------------
>         """Ibis adds a suffix to the right table col, even when it matches the left during 
a join."""
          duplicates = set(df.columns).intersection(columns)
          return df.drop(*duplicates) if duplicates else df
  
class IbisLazyFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\expr.py
-----------------------------
class IbisExpr(SQLExpr["IbisLazyFrame", "ir.Value"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\expr_dt.py
-----------------------------
class IbisExprDateTimeNamespace(SQLExprDateTimeNamesSpace["IbisExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\expr_list.py
-----------------------------
class IbisExprListNamespace(LazyExprNamespace["IbisExpr"], ListNamespace["IbisExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\expr_str.py
-----------------------------
class IbisExprStringNamespace(SQLExprStringNamespace["IbisExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\expr_struct.py
-----------------------------
class IbisExprStructNamespace(LazyExprNamespace["IbisExpr"], StructNamespace["IbisExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\group_by.py
-----------------------------
class IbisGroupBy(SQLGroupBy["IbisLazyFrame", "IbisExpr", "ir.Value"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\namespace.py
-----------------------------
class IbisNamespace(SQLNamespace[IbisLazyFrame, IbisExpr, "ir.Table", "ir.Value"]):
class IbisWhen(SQLWhen["IbisLazyFrame", "ir.Value", IbisExpr]):
class IbisThen(SQLThen["IbisLazyFrame", "ir.Value", IbisExpr], IbisExpr): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\selectors.py
-----------------------------
class IbisSelectorNamespace(LazySelectorNamespace["IbisLazyFrame", "ir.Value"]):
class IbisSelector(  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\series.py
-----------------------------
class IbisInterchangeSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\utils.py
-----------------------------
> """Marker for upstream issues."""
  
  
  @overload
def lit(value: bool, dtype: None = ...) -> ir.BooleanScalar: ...  # noqa: FBT001
def lit(value: int, dtype: None = ...) -> ir.IntegerScalar: ...
def lit(value: float, dtype: None = ...) -> ir.FloatingScalar: ...
def lit(value: str, dtype: None = ...) -> ir.StringScalar: ...
def lit(value: PythonLiteral | ir.Value, dtype: None = ...) -> ir.Scalar: ...
def lit(value: Any, dtype: Any) -> Incomplete: ...
def lit(value: Any, dtype: Any | None = None) -> Incomplete:
def evaluate_exprs(df: IbisLazyFrame, /, *exprs: IbisExpr) -> list[tuple[str, ir.Value]]:
def native_to_narwhals_dtype(ibis_dtype: IbisDataType, version: Version) -> DType:  # noqa: C901, PLR0912
def is_timestamp(obj: IbisDataType) -> TypeIs[ibis_dtypes.Timestamp]:
def is_interval(obj: IbisDataType) -> TypeIs[ibis_dtypes.Interval]:
def is_array(obj: IbisDataType) -> TypeIs[ibis_dtypes.Array[Any]]:
def is_struct(obj: IbisDataType) -> TypeIs[ibis_dtypes.Struct]:
def is_floating(obj: IbisDataType) -> TypeIs[ibis_dtypes.Floating]:
def narwhals_to_native_dtype(dtype: IntoDType, version: Version) -> IbisDataType:
def timedelta_to_ibis_interval(td: timedelta) -> ibis.expr.types.temporal.IntervalScalar:
def function(name: str, *args: ir.Value | PythonLiteral) -> ir.Value:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_ibis\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_interchange\dataframe.py
-----------------------------
class DtypeKind(enum.IntEnum):
def map_interchange_dtype_to_narwhals_dtype(  # noqa: C901, PLR0911, PLR0912
class InterchangeFrame:
def supports_dataframe_interchange(obj: Any) -> TypeIs[DataFrameLike]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_interchange\series.py
-----------------------------
class InterchangeSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_interchange\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\dataframe.py
-----------------------------
>         """Helper function to avoid creating extra columns and row duplication.
  
          Used in `"anti"` and `"semi`" join's.
  
class PandasLikeDataFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\expr.py
-----------------------------
def window_kwargs_to_pandas_equivalent(
class PandasLikeExpr(EagerExpr["PandasLikeDataFrame", PandasLikeSeries]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\group_by.py
-----------------------------
> """https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#built-in-aggregation
-methods"""
  
  _NativeAgg: TypeAlias = "Callable[[Any], pd.DataFrame | pd.Series[Any]]"
def _native_agg(name: NativeAggregation, /, **kwds: Unpack[ScalarKwargs]) -> _NativeAgg:
class AggExpr:
class PandasLikeGroupBy(
def empty_results_error() -> ValueError:
def warn_complex_group_by() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\namespace.py
-----------------------------
> """Escape hatch, but leaving a trace that this isn't ideal."""
  
  
  _Vertical: TypeAlias = Literal[0]
class PandasLikeNamespace(
class _NativeConcat(Protocol[NativeDataFrameT, NativeSeriesT]):
class PandasWhen(
class PandasThen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\selectors.py
-----------------------------
class PandasSelectorNamespace(
class PandasSelector(  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\series.py
-----------------------------
>         """Pandas always maintains order, as per its docstring.
  
          > Uniques are returned in order of appearance.
class PandasLikeSeries(EagerSeries[Any]):
class _PandasHist(EagerSeriesHist["pd.Series[Any]", "list[float]"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\series_cat.py
-----------------------------
class PandasLikeSeriesCatNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\series_dt.py
-----------------------------
class PandasLikeSeriesDateTimeNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\series_list.py
-----------------------------
class PandasLikeSeriesListNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\series_str.py
-----------------------------
class PandasLikeSeriesStringNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\series_struct.py
-----------------------------
class PandasLikeSeriesStructNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\typing.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\utils.py
-----------------------------
> PD_DATETIME_RGX = r"""^
      datetime64\[
          (?P<time_unit>s|ms|us|ns)                 # Match time unit: s, ms, us, or ns
          (?:,                                      # Begin non-capturing group for optional 
timezone
def is_pandas_or_modin(implementation: Implementation) -> bool:
def align_and_extract_native(
def set_index(
def rename(
def non_object_native_to_narwhals_dtype(native_dtype: Any, version: Version) -> DType:  # noqa: C901, PLR0912
def object_native_to_narwhals_dtype(
def native_categorical_to_narwhals_dtype(
def _cudf_categorical_to_list(
def native_to_narwhals_dtype(
def get_dtype_backend(dtype: Any, implementation: Implementation) -> DTypeBackend:
def iter_dtype_backends(
def is_dtype_pyarrow(dtype: Any) -> TypeIs[pd.ArrowDtype]:
def narwhals_to_native_dtype(  # noqa: C901, PLR0912
def narwhals_to_native_arrow_dtype(
def int_dtype_mapper(dtype: Any) -> str:
def calculate_timestamp_datetime(
def calculate_timestamp_date(s: NativeSeriesT, time_unit: TimeUnit) -> NativeSeriesT:
def select_columns_by_name(
def is_non_nullable_boolean(s: PandasLikeSeries) -> bool:
def import_array_module(implementation: Implementation, /) -> ModuleType:
class PandasLikeSeriesNamespace(EagerSeriesNamespace["PandasLikeSeries", Any]): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_pandas_like\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\dataframe.py
-----------------------------
> """Generic alias representing all methods implemented via `__getattr__`.
  
  Where `R` is the return type.
class PolarsBaseFrame(Generic[NativePolarsFrame]):
class PolarsDataFrame(PolarsBaseFrame[pl.DataFrame]):
class PolarsLazyFrame(PolarsBaseFrame[pl.LazyFrame]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\expr.py
-----------------------------
class PolarsExpr:
class PolarsExprNamespace(PolarsAnyNamespace[PolarsExpr, pl.Expr]):
class PolarsExprDateTimeNamespace(
class PolarsExprStringNamespace(
class PolarsExprCatNamespace(
class PolarsExprNameNamespace(PolarsExprNamespace):
class PolarsExprListNamespace(
class PolarsExprStructNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\group_by.py
-----------------------------
class PolarsGroupBy:
class PolarsLazyGroupBy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\namespace.py
-----------------------------
class PolarsNamespace:
class PolarsSelectorNamespace:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\series.py
-----------------------------
>         """Prepare bins based on backend version compatibility.
  
          polars <1.15 does not adjust the bins when they have equivalent min/max
          polars <1.5 with bin_count=...
class PolarsSeries:
class PolarsSeriesNamespace(PolarsAnyNamespace[PolarsSeries, pl.Series]):
class PolarsSeriesDateTimeNamespace(
class PolarsSeriesStringNamespace(
class PolarsSeriesCatNamespace(
class PolarsSeriesListNamespace(
class PolarsSeriesStructNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\typing.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\utils.py
-----------------------------
> """Static backend version for `polars`."""
  
  SERIES_RESPECTS_DTYPE: Final[bool] = BACKEND_VERSION >= (0, 20, 26)
def extract_native(obj: _StoresNative[NativeT]) -> NativeT: ...
def extract_native(obj: T) -> T: ...
def extract_native(obj: _StoresNative[NativeT] | T) -> NativeT | T:
def _is_compliant_polars(
def extract_args_kwargs(
def native_to_narwhals_dtype(  # noqa: C901, PLR0912
def narwhals_to_native_dtype(  # noqa: C901
def _is_polars_exception(exception: Exception) -> bool:
def _is_cudf_exception(exception: Exception) -> bool:
def catch_polars_exception(exception: Exception) -> NarwhalsError | Exception:
class PolarsAnyNamespace(
class PolarsDateTimeNamespace(PolarsAnyNamespace[CompliantT, NativeT_co]):
class PolarsStringNamespace(PolarsAnyNamespace[CompliantT, NativeT_co]):
class PolarsCatNamespace(PolarsAnyNamespace[CompliantT, NativeT_co]):
class PolarsListNamespace(PolarsAnyNamespace[CompliantT, NativeT_co]):
class PolarsStructNamespace(PolarsAnyNamespace[CompliantT, NativeT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_polars\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\dataframe.py
-----------------------------
> """Marker for working code that fails type checking."""
  
  
  class SparkLikeLazyFrame(
class SparkLikeLazyFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\expr.py
-----------------------------
>         """Wraps `Window().partitionBy`, with default and `WindowInputs` handling."""
          return self._Window.partitionBy(*cols or [self._F.lit(1)])
  
      def __narwhals_expr__(self) -> None: ...
class SparkLikeExpr(SQLExpr["SparkLikeLazyFrame", "Column"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\expr_dt.py
-----------------------------
>         """Format datetime as ISO week string with day."""
          F = self.compliant._F
  
          year = F.date_format(expr, "yyyy")
class SparkLikeExprDateTimeNamespace(SQLExprDateTimeNamesSpace["SparkLikeExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\expr_list.py
-----------------------------
class SparkLikeExprListNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\expr_str.py
-----------------------------
class SparkLikeExprStringNamespace(SQLExprStringNamespace["SparkLikeExpr"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\expr_struct.py
-----------------------------
class SparkLikeExprStructNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\group_by.py
-----------------------------
class SparkLikeLazyGroupBy(SQLGroupBy["SparkLikeLazyFrame", "SparkLikeExpr", "Column"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\namespace.py
-----------------------------
class SparkLikeNamespace(
class SparkLikeWhen(SQLWhen[SparkLikeLazyFrame, "Column", SparkLikeExpr]):
class SparkLikeThen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\selectors.py
-----------------------------
class SparkLikeSelectorNamespace(LazySelectorNamespace["SparkLikeLazyFrame", "Column"]):
class SparkLikeSelector(CompliantSelector["SparkLikeLazyFrame", "Column"], SparkLikeExpr):  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\utils.py
-----------------------------
>     """Converts a Python strptime datetime format string to a PySpark datetime format 
string."""
      if format is None:  # pragma: no cover
          return None
  
def native_to_narwhals_dtype(  # noqa: C901, PLR0912
def fetch_session_time_zone(session: SparkSession) -> str:
def narwhals_to_native_dtype(
def evaluate_exprs(
def import_functions(implementation: Implementation, /) -> ModuleType:
def import_native_dtypes(implementation: Implementation, /) -> ModuleType:
def import_window(implementation: Implementation, /) -> type[Any]:
def strptime_to_pyspark_format(format: None) -> None: ...
def strptime_to_pyspark_format(format: str) -> str: ...
def strptime_to_pyspark_format(format: str | None) -> str | None:
def true_divide(F: Any, left: Column, right: Column) -> Column:
def catch_pyspark_sql_exception(
def catch_pyspark_connect_exception(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_spark_like\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\dataframe.py
-----------------------------
class SQLLazyFrame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\expr.py
-----------------------------
class SQLExpr(LazyExpr[SQLLazyFrameT, NativeExprT], Protocol[SQLLazyFrameT, NativeExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\expr_dt.py
-----------------------------
class SQLExprDateTimeNamesSpace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\expr_str.py
-----------------------------
class SQLExprStringNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\group_by.py
-----------------------------
class SQLGroupBy(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\namespace.py
-----------------------------
class SQLNamespace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\typing.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\when_then.py
-----------------------------
class SQLWhen(
class SQLThen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_sql\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\dataframe.py
-----------------------------
>     """Narwhals DataFrame, backed by a native eager dataframe.
  
      Warning:
          This class is not meant to be instantiated directly - instead:
class BaseFrame(Generic[_FrameT]):
class DataFrame(BaseFrame[DataFrameT]):
class LazyFrame(BaseFrame[LazyFrameT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\dependencies.py
-----------------------------
>     """Get Polars module (if already imported - else return None)."""
      return sys.modules.get("polars", None)
  
  
def get_polars() -> Any:
def get_pandas() -> Any:
def get_modin() -> Any:  # pragma: no cover
def get_cudf() -> Any:
def get_cupy() -> Any:
def get_pyarrow() -> Any:  # pragma: no cover
def get_numpy() -> Any:
def get_dask() -> Any:  # pragma: no cover
def get_dask_dataframe() -> Any:
def get_duckdb() -> Any:
def get_ibis() -> Any:
def get_dask_expr() -> Any:  # pragma: no cover
def get_pyspark() -> Any:  # pragma: no cover
def get_pyspark_sql() -> Any:
def get_pyspark_connect() -> Any:
def get_sqlframe() -> Any:
def _warn_if_narwhals_df_or_lf(df: Any) -> None:
def _warn_if_narwhals_series(ser: Any) -> None:
def is_pandas_dataframe(df: Any) -> TypeIs[pd.DataFrame]:
def is_pandas_series(ser: Any) -> TypeIs[pd.Series[Any]]:
def is_pandas_index(index: Any) -> TypeIs[pd.Index[Any]]:
def is_modin_dataframe(df: Any) -> TypeIs[mpd.DataFrame]:
def is_modin_series(ser: Any) -> TypeIs[mpd.Series]:
def is_modin_index(index: Any) -> TypeIs[mpd.Index[Any]]:  # pragma: no cover
def is_cudf_dataframe(df: Any) -> TypeIs[cudf.DataFrame]:
def is_cudf_series(ser: Any) -> TypeIs[cudf.Series[Any]]:
def is_cudf_index(index: Any) -> TypeIs[cudf.Index]:
def is_cupy_scalar(obj: Any) -> bool:
def is_dask_dataframe(df: Any) -> TypeIs[dd.DataFrame]:
def is_duckdb_relation(df: Any) -> TypeIs[duckdb.DuckDBPyRelation]:
def is_ibis_table(df: Any) -> TypeIs[ibis.Table]:
def is_polars_dataframe(df: Any) -> TypeIs[pl.DataFrame]:
def is_polars_lazyframe(df: Any) -> TypeIs[pl.LazyFrame]:
def is_polars_series(ser: Any) -> TypeIs[pl.Series]:
def is_pyarrow_chunked_array(ser: Any) -> TypeIs[pa.ChunkedArray[Any]]:
def is_pyarrow_table(df: Any) -> TypeIs[pa.Table]:
def is_pyarrow_scalar(obj: Any) -> TypeIs[pa.Scalar[Any]]:
def is_pyspark_dataframe(df: Any) -> TypeIs[pyspark_sql.DataFrame]:
def is_pyspark_connect_dataframe(df: Any) -> TypeIs[PySparkConnectDataFrame]:
def is_sqlframe_dataframe(df: Any) -> TypeIs[SQLFrameDataFrame]:
def is_numpy_array(arr: Any | _NDArray[_ShapeT]) -> TypeIs[_NDArray[_ShapeT]]:
def is_numpy_array_1d(arr: Any) -> TypeIs[_1DArray]:
def is_numpy_array_1d_int(arr: Any) -> TypeIs[_1DArrayInt]:
def is_numpy_array_2d(arr: Any) -> TypeIs[_2DArray]:
def is_numpy_scalar(scalar: Any) -> TypeGuard[_NumpyScalar]:
def is_pandas_like_dataframe(df: Any) -> bool:
def is_pandas_like_series(ser: Any) -> bool:
def is_pandas_like_index(index: Any) -> bool:
def is_into_series(native_series: Any | IntoSeriesT) -> TypeIs[IntoSeriesT]:
def is_into_dataframe(native_dataframe: Any | IntoDataFrameT) -> TypeIs[IntoDataFrameT]:
def is_narwhals_dataframe(
def is_narwhals_lazyframe(
def is_narwhals_series(ser: Any | Series[IntoSeriesT]) -> TypeIs[Series[IntoSeriesT]]:
def is_narwhals_series_int(ser: Any | Series[IntoSeriesT]) -> TypeIs[Series[IntoSeriesT]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\dtypes.py
-----------------------------
>         """Return this DType's fundamental/root type class.
  
          Examples:
              >>> import narwhals as nw
def _validate_dtype(dtype: DType | type[DType]) -> None:
def _is_into_dtype(obj: Any) -> TypeIs[IntoDType]:
def _is_nested_type(obj: Any) -> TypeIs[type[NestedType]]:
def _validate_into_dtype(dtype: Any) -> None:
class DType:
class NumericType(DType):
class IntegerType(NumericType):
class SignedIntegerType(IntegerType):
class UnsignedIntegerType(IntegerType):
class FloatType(NumericType):
class TemporalType(DType):
class NestedType(DType):
class Decimal(NumericType):
class Int128(SignedIntegerType):
class Int64(SignedIntegerType):
class Int32(SignedIntegerType):
class Int16(SignedIntegerType):
class Int8(SignedIntegerType):
class UInt128(UnsignedIntegerType):
class UInt64(UnsignedIntegerType):
class UInt32(UnsignedIntegerType):
class UInt16(UnsignedIntegerType):
class UInt8(UnsignedIntegerType):
class Float64(FloatType):
class Float32(FloatType):
class String(DType):
class Boolean(DType):
class Object(DType):
class Unknown(DType):
class _DatetimeMeta(type):
class Datetime(TemporalType, metaclass=_DatetimeMeta):
class _DurationMeta(type):
class Duration(TemporalType, metaclass=_DurationMeta):
class Categorical(DType):
class Enum(DType):
class Field:
class Struct(NestedType):
class List(NestedType):
class Array(NestedType):
class Date(TemporalType):
class Time(TemporalType):
class Binary(DType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\exceptions.py
-----------------------------
>     """Base class for all Narwhals exceptions."""
  
  
  class FormattedKeyError(KeyError):
class NarwhalsError(ValueError):
class FormattedKeyError(KeyError):
class ColumnNotFoundError(FormattedKeyError, NarwhalsError):
class ComputeError(NarwhalsError):
class ShapeError(NarwhalsError):
class MultiOutputExpressionError(NarwhalsError):
class DuplicateError(NarwhalsError):
class InvalidOperationError(NarwhalsError):
class InvalidIntoExprError(TypeError, NarwhalsError):
class UnsupportedDTypeError(NarwhalsError):
class NarwhalsUnstableWarning(UserWarning):
class PerformanceWarning(Warning): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr.py
-----------------------------
>         """Rename the expression.
  
          Arguments:
              name: The new name.
class Expr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr_cat.py
-----------------------------
>         """Get unique categories from column.
  
          Examples:
              >>> import polars as pl
class ExprCatNamespace(Generic[ExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr_dt.py
-----------------------------
>         """Extract the date from underlying DateTime representation.
  
          Raises:
              NotImplementedError: If pandas default backend is being used.
class ExprDateTimeNamespace(Generic[ExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr_list.py
-----------------------------
>         """Return the number of elements in each list.
  
          Null values count towards the total.
  
class ExprListNamespace(Generic[ExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr_name.py
-----------------------------
>         r"""Keep the original root name of the expression.
  
          Notes:
              For Polars versions prior to 1.32, this will undo any previous renaming 
operations on the expression.
class ExprNameNamespace(Generic[ExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr_str.py
-----------------------------
>         r"""Return the length of each string as the number of characters.
  
          Examples:
              >>> import polars as pl
class ExprStringNamespace(Generic[ExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\expr_struct.py
-----------------------------
>         r"""Retrieve a Struct field as a new expression.
  
          Arguments:
              name: Name of the struct field to retrieve.
class ExprStructNamespace(Generic[ExprT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\functions.py
-----------------------------
>     """Concatenate multiple DataFrames, LazyFrames into a single entity.
  
      Arguments:
          items: DataFrames, LazyFrames to concatenate.
def concat(items: Iterable[FrameT], *, how: ConcatMethod = "vertical") -> FrameT:
def new_series(
def _new_series_impl(
def from_dict(
def _from_dict_no_backend(
def from_numpy(
def _is_into_schema(obj: Any) -> TypeIs[_IntoSchema]:
def from_arrow(
def _get_sys_info() -> dict[str, str]:
def _get_deps_info() -> dict[str, str]:
def show_versions() -> None:
def read_csv(
def scan_csv(
def read_parquet(
def scan_parquet(
def col(*names: str | Iterable[str]) -> Expr:
def exclude(*names: str | Iterable[str]) -> Expr:
def nth(*indices: int | Sequence[int]) -> Expr:
def all_() -> Expr:
def len_() -> Expr:
def sum(*columns: str) -> Expr:
def mean(*columns: str) -> Expr:
def median(*columns: str) -> Expr:
def min(*columns: str) -> Expr:
def max(*columns: str) -> Expr:
def _expr_with_n_ary_op(
def sum_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def min_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def max_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
class When:
class Then(Expr):
def when(*predicates: IntoExpr | Iterable[IntoExpr]) -> When:
def all_horizontal(*exprs: IntoExpr | Iterable[IntoExpr], ignore_nulls: bool) -> Expr:
def lit(value: NonNestedLiteral, dtype: IntoDType | None = None) -> Expr:
def any_horizontal(*exprs: IntoExpr | Iterable[IntoExpr], ignore_nulls: bool) -> Expr:
def mean_horizontal(*exprs: IntoExpr | Iterable[IntoExpr]) -> Expr:
def concat_str(
def coalesce(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\group_by.py
-----------------------------
>         """Compute aggregations for each group of a group by operation.
  
          Arguments:
              aggs: Aggregations to compute for each group of the group by operation,
class GroupBy(Generic[DataFrameT]):
class LazyGroupBy(Generic[LazyFrameT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\schema.py
-----------------------------
> """Schema.
  
  Adapted from Polars implementation at:
  https://github.com/pola-rs/polars/blob/main/py-polars/polars/schema.py.
class Schema(OrderedDict[str, "DType"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\selectors.py
-----------------------------
>     """Select columns based on their dtype.
  
      Arguments:
          dtypes: one or data types to select
class Selector(Expr):
def by_dtype(*dtypes: DType | type[DType] | Iterable[DType | type[DType]]) -> Selector:
def matches(pattern: str) -> Selector:
def numeric() -> Selector:
def boolean() -> Selector:
def string() -> Selector:
def categorical() -> Selector:
def all() -> Selector:
def datetime(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\series.py
-----------------------------
>     """Narwhals Series, backed by a native series.
  
      Warning:
          This class is not meant to be instantiated directly - instead:
class Series(Generic[IntoSeriesT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\series_cat.py
-----------------------------
>         """Get unique categories from column.
  
          Examples:
              >>> import pandas as pd
class SeriesCatNamespace(Generic[SeriesT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\series_dt.py
-----------------------------
>         """Get the date in a datetime series.
  
          Raises:
              NotImplementedError: If pandas default backend is being used.
class SeriesDateTimeNamespace(Generic[SeriesT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\series_list.py
-----------------------------
>         """Return the number of elements in each list.
  
          Null values count towards the total.
  
class SeriesListNamespace(Generic[SeriesT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\series_str.py
-----------------------------
>         r"""Return the length of each string as the number of characters.
  
          Examples:
              >>> import polars as pl
class SeriesStringNamespace(Generic[SeriesT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\series_struct.py
-----------------------------
>         r"""Retrieve a Struct field as a new expression.
  
          Arguments:
              name: Name of the struct field to retrieve.
class SeriesStructNamespace(Generic[SeriesT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\this.py
-----------------------------
> ZEN = """\
  â£¿â£¿â£¿â£¿â£¿â˜â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿ 
THE ZEN OF NARWHALS
  â£¿â£¿â£¿â£¿â£¿ââ¢¹â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿ 
Keep it simple
  â£¿â£¿â£¿â£¿â£¿â¡€â¡„â¢¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿â£¿ 
Move slowly and keep things working

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\translate.py
-----------------------------
>     """Convert Narwhals object to native one.
  
      Arguments:
          narwhals_object: Narwhals object.
def to_native(
def to_native(
def to_native(
def to_native(narwhals_object: Any, *, pass_through: bool) -> Any: ...
def to_native(
def from_native(native_object: SeriesT, **kwds: Any) -> SeriesT: ...
def from_native(native_object: DataFrameT, **kwds: Any) -> DataFrameT: ...
def from_native(native_object: LazyFrameT, **kwds: Any) -> LazyFrameT: ...
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(
def from_native(  # noqa: D417
def _from_native_impl(  # noqa: C901, PLR0911, PLR0912, PLR0915
def get_native_namespace(*obj: Frame | Series[Any] | IntoFrame | IntoSeries) -> Any:
def _get_native_namespace_single_obj(
def narwhalify(
def to_py_scalar(scalar_like: Any) -> Any:
def _is_pandas_na(obj: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\typing.py
-----------------------------
> """Anything which can be converted to an expression.
  
  Use this to mean "either a Narwhals expression, or something which can be converted
  into one". For example, `exprs` in `DataFrame.select` is typed to accept `IntoExpr`,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\utils.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_constants.py
-----------------------------
> """Nanoseconds (`[ns]`) per minute."""
  US_PER_MINUTE = 60_000_000

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_duration.py
-----------------------------
> """Tools for working with the Polars duration string language."""
  
  from __future__ import annotations
  
class Interval:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_enum.py
-----------------------------
>     """Enum base class that prohibits the use of enum.auto() for value assignment.
  
      This behavior is achieved by overriding the value generation mechanism.
  
class NoAutoEnum(Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_exceptions.py
-----------------------------
>     """Find the first place in the stack that is not inside narwhals.
  
      Returns:
          Stacklevel.
def find_stacklevel() -> int:
def issue_deprecation_warning(message: str, _version: str) -> None:  # pragma: no cover
def issue_warning(message: str, category: type[Warning]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_expression_parsing.py
-----------------------------
>     """Check whether `obj` is a Narwhals Expr."""
      from narwhals.expr import Expr
  
      return isinstance(obj, Expr)
def is_expr(obj: Any) -> TypeIs[Expr]:
def is_series(obj: Any) -> TypeIs[Series[Any]]:
def combine_evaluate_output_names(
def combine_alias_output_names(*exprs: CompliantExprAny) -> AliasNames | None:
def extract_compliant(
def evaluate_output_names_and_aliases(
class ExprKind(Enum):
def is_scalar_like(
class ExpansionKind(Enum):
class ExprMetadata:
def combine_metadata(
def check_expressions_preserve_length(*args: IntoExpr, function_name: str) -> None:
def all_exprs_are_scalar_like(*args: IntoExpr, **kwargs: IntoExpr) -> bool:
def apply_n_ary_operation(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_namespace.py
-----------------------------
> """Narwhals-level equivalent of `CompliantNamespace`."""
  
  from __future__ import annotations
  
class Namespace(Generic[CompliantNamespaceT_co]):
def is_native_polars(obj: Any) -> TypeIs[_NativePolars]:
def is_native_arrow(obj: Any) -> TypeIs[_NativeArrow]:
def is_native_dask(obj: Any) -> TypeIs[_NativeDask]:
def is_native_pandas(obj: Any) -> TypeIs[_NativePandas]:
def is_native_modin(obj: Any) -> TypeIs[_NativeModin]:
def is_native_cudf(obj: Any) -> TypeIs[_NativeCuDF]:
def is_native_pandas_like(obj: Any) -> TypeIs[_NativePandasLike]:
def is_native_spark_like(obj: Any) -> TypeIs[_NativeSparkLike]:
def is_native_ibis(obj: Any) -> TypeIs[_NativeIbis]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_translate.py
-----------------------------
> """[Protocols] defining conversion methods between representations.
  
  These come in 3 flavors and are [generic] to promote reuse.
  
class ArrowStreamExportable(Protocol):
class ToNumpy(Protocol[ToNumpyT_co]):
class FromNumpy(Protocol[FromNumpyT_contra]):
class NumpyConvertible(
class FromIterable(Protocol[FromIterableT_contra]):
class ToDict(Protocol[ToDictDT_co]):
class FromDict(Protocol[FromDictDT_contra]):
class DictConvertible(
class ToArrow(Protocol[ToArrowT_co]):
class FromArrow(Protocol[FromArrowDT_contra]):
class ArrowConvertible(
class FromNative(Protocol[FromNativeT]):
class ToNarwhals(Protocol[ToNarwhalsT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_typing.py
-----------------------------
> """A string name or [`narwhals.Implementation`][] of an eager backend.
  
  - A string name, one of: `"cudf"`, `"modin"`, `"pandas"`, `"pyarrow"`, `"polars"`.
  - An Implementation, such as: `Implementation.CUDF`, `Implementation.MODIN`, ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_typing_compat.py
-----------------------------
> """Backward compatibility for newer/less buggy typing features.
  
  ## Important
  Import from here to avoid introducing a runtime dependency on [`typing_extensions`]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\_utils.py
-----------------------------
>     """Provides access to a native object.
  
      Native objects have types like:
  
class _StoresNative(Protocol[NativeT_co]):  # noqa: PYI046
class _StoresCompliant(Protocol[CompliantT_co]):  # noqa: PYI046
class _StoresBackendVersion(Protocol):
class _StoresVersion(Protocol):
class _StoresImplementation(Protocol):
class _LimitedContext(_StoresImplementation, _StoresVersion, Protocol):
class _FullContext(_StoresBackendVersion, _LimitedContext, Protocol):
class ValidateBackendVersion(_StoresImplementation, Protocol):
class Version(Enum):
class Implementation(NoAutoEnum):
def _import_native_namespace(module_name: str) -> ModuleType:
def backend_version(implementation: Implementation, /) -> tuple[int, ...]:
def flatten(args: Any) -> list[Any]:
def tupleify(arg: Any) -> Any:
def _is_iterable(arg: Any | Iterable[Any]) -> bool:
def parse_version(version: str | ModuleType | _SupportsVersion) -> tuple[int, ...]:
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(
def isinstance_or_issubclass(obj_or_cls: Any, cls_or_tuple: Any) -> bool:
def validate_laziness(items: Iterable[Any]) -> None:
def maybe_align_index(
def maybe_get_index(obj: DataFrame[Any] | LazyFrame[Any] | Series[Any]) -> Any | None:
def maybe_set_index(
def maybe_reset_index(obj: FrameOrSeriesT) -> FrameOrSeriesT:
def _is_range_index(obj: Any, native_namespace: Any) -> TypeIs[pd.RangeIndex]:
def _has_default_index(
def maybe_convert_dtypes(
def scale_bytes(sz: int, unit: SizeUnit) -> int | float:
def is_ordered_categorical(series: Series[Any]) -> bool:
def generate_unique_token(
def generate_temporary_column_name(n_bytes: int, columns: Container[str]) -> str:
def parse_columns_to_drop(
def is_sequence_but_not_str(sequence: Sequence[_T] | Any) -> TypeIs[Sequence[_T]]:
def is_slice_none(obj: Any) -> TypeIs[_SliceNone]:
def is_sized_multi_index_selector(
def is_sequence_like(
def is_slice_index(obj: Any) -> TypeIs[_SliceIndex]:
def is_range(obj: Any) -> TypeIs[range]:
def is_single_index_selector(obj: Any) -> TypeIs[SingleIndexSelector]:
def is_index_selector(
def is_list_of(obj: Any, tp: type[_T]) -> TypeIs[list[_T]]:
def is_sequence_of(obj: Any, tp: type[_T]) -> TypeIs[Sequence[_T]]:
def validate_strict_and_pass_though(
def deprecate_native_namespace(
def _validate_rolling_arguments(
def generate_repr(header: str, native_repr: str) -> str:
def check_columns_exist(
def check_column_names_are_unique(columns: Collection[str]) -> None:
def _parse_time_unit_and_time_zone(
def dtype_matches_time_unit_and_time_zone(
def get_column_names(frame: _StoresColumns, /) -> Sequence[str]:
def exclude_column_names(frame: _StoresColumns, names: Container[str]) -> Sequence[str]:
def passthrough_column_names(names: Sequence[str], /) -> EvalNames[Any]:
def _hasattr_static(obj: Any, attr: str) -> bool:
def is_compliant_dataframe(
def is_compliant_lazyframe(
def is_compliant_series(
def is_compliant_series_int(
def is_compliant_expr(
def is_eager_allowed(impl: Implementation, /) -> TypeIs[_EagerAllowedImpl]:
def can_lazyframe_collect(impl: Implementation, /) -> TypeIs[_LazyFrameCollectImpl]:
def can_dataframe_lazy(impl: Implementation, /) -> TypeIs[_DataFrameLazyImpl]:
def has_native_namespace(obj: Any) -> TypeIs[SupportsNativeNamespace]:
def supports_arrow_c_stream(obj: Any) -> TypeIs[ArrowStreamExportable]:
def _remap_full_join_keys(
def _into_arrow_table(data: IntoArrowTable, context: _LimitedContext, /) -> pa.Table:
def unstable(fn: _Fn, /) -> _Fn:
def _is_naive_format(format: str) -> bool:
class not_implemented:  # noqa: N801
def _raise_not_implemented_error(what: str, who: str, /) -> NotImplementedError:
class requires:  # noqa: N801
def convert_str_slice_to_int_slice(
def inherit_doc(
def qualified_type_name(obj: object | type[Any], /) -> str:
def ensure_type(obj: Any, /, *valid_types: type[Any], param_name: str = "") -> None:
class _DeferredIterable(Generic[_T]):
def deep_attrgetter(attr: str, *nested: str) -> attrgetter[Any]:
def deep_getattr(obj: Any, name_1: str, *nested: str) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\narwhals\__init__.py
-----------------------------
def __getattr__(name: _t.Literal["__version__"]) -> str:  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\char\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\arrayprint.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\defchararray.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\einsumfunc.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\fromnumeric.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\function_base.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\getlimits.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\multiarray.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\numeric.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\numerictypes.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\overrides.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\records.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\shape_base.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\umath.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\_dtype.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\_dtype_ctypes.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\_internal.py
-----------------------------
def _reconstruct(subtype, shape, dtype):
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\_multiarray_umath.py
-----------------------------
>         msg = textwrap.dedent(f"""
              A module that was compiled using NumPy 1.x cannot be run in
              NumPy {short_version} as it may crash. To support both 1.x and 2.x
              versions of NumPy, modules must be compiled with NumPy 2.0.
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\_utils.py
-----------------------------
def _raise_warning(attr: str, submodule: str | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\core\__init__.py
-----------------------------
> """
  The `numpy.core` submodule exists solely for backward compatibility
  purposes. The original `core` was renamed to `_core` and made private.
  `numpy.core` will be removed in the future.
def _ufunc_reconstruct(module, name):
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ctypeslib\_ctypeslib.py
-----------------------------
> """
  ============================
  ``ctypes`` Utility Functions
  ============================
def _num_fromflags(flaglist):
def _flags_fromnum(num):
class _ndptr(_ndptr_base):
class _concrete_ndptr(_ndptr):
def ndpointer(dtype=None, ndim=None, shape=None, flags=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ctypeslib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\autodist.py
-----------------------------
> """This module implements additional tests ala autoconf which can be useful.
  
def check_inline(cmd):
def check_restrict(cmd):
def check_compiler_gcc(cmd):
def check_gcc_version_at_least(cmd, major, minor=0, patchlevel=0):
def check_gcc_function_attribute(cmd, attribute, name):
def check_gcc_function_attribute_with_intrinsics(cmd, attribute, name, code,
def check_gcc_variable_attribute(cmd, attribute):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\bdist_rpm.py
-----------------------------
class bdist_rpm(old_bdist_rpm):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\build.py
-----------------------------
>         """
          the '_simd' module is a very large. Adding more dispatched features
          will increase binary size and compile time. By default we minimize
          the targeted features to those most commonly used by the NumPy SIMD interface(NPYV),
class build(old_build):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\build_clib.py
-----------------------------
> """ Modified version of build_clib that handles fortran source files.
class build_clib(old_build_clib):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\build_ext.py
-----------------------------
> """ Modified version of build_ext that handles fortran source files.
  
class build_ext (old_build_ext):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\build_py.py
-----------------------------
class build_py(old_build_py):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\build_scripts.py
-----------------------------
> """ Modified version of build_scripts that handles building scripts from functions.
  
class build_scripts(old_build_scripts):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\build_src.py
-----------------------------
> """ Build swig and f2py sources.
def subst_vars(target, source, d):
class build_src(build_ext.build_ext):
def get_swig_target(source):
def get_swig_modulename(source):
def _find_swig_target(target_dir, name):
def get_f2py_modulename(source):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\config.py
-----------------------------
>                     msg = textwrap.dedent("""\
                          Could not initialize compiler instance: do you have Visual Studio
                          installed?  If you are trying to build with MinGW, please use 
"python setup.py
                          build -c mingw32" instead.  If you have Visual Studio installed, 
check it is
class config(old_config):
class GrabStdout:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\config_compiler.py
-----------------------------
>     """ Distutils command to hold user specified options
      to Fortran compilers.
  
      config_fc command is used by the FCompiler.customize() method.
def show_fortran_compilers(_cache=None):
class config_fc(Command):
class config_cc(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\develop.py
-----------------------------
> """ Override the develop command from setuptools so we can ensure that our
  generated files (from build_src or build_scripts) are properly converted to real
  files with filenames.
  
class develop(old_develop):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\egg_info.py
-----------------------------
>             msg = textwrap.dedent("""
                  `build_src` is being run, this may lead to missing
                  files in your sdist!  You want to use distutils.sdist
                  instead of the setuptools version:
class egg_info(_egg_info):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\install.py
-----------------------------
>         """ The setuptools version of the .run() method.
  
          We must pull in the entire code so we can override the level used in the
          _getframe() call since we wrap this call by one more level.
class install(old_install):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\install_clib.py
-----------------------------
class install_clib(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\install_data.py
-----------------------------
class install_data (old_install_data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\install_headers.py
-----------------------------
class install_headers (old_install_headers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\sdist.py
-----------------------------
class sdist(old_sdist):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\command\__init__.py
-----------------------------
> """distutils.command
  
  Package containing implementation of all the standard Distutils
  commands.
def test_na_writable_attributes_deletion():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\absoft.py
-----------------------------
class AbsoftFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\arm.py
-----------------------------
>         """List of compiler library directories."""
          opt = FCompiler.get_library_dirs(self)
          flang_dir = dirname(self.executables['compiler_f77'][0])
          opt.append(normpath(join(flang_dir, '..', 'lib')))
class ArmFlangCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\compaq.py
-----------------------------
class CompaqFCompiler(FCompiler):
class CompaqVisualFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\environment.py
-----------------------------
class EnvironmentConfig:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\fujitsu.py
-----------------------------
> """
  fujitsu
  
  Supports Fujitsu compiler function.
class FujitsuFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\g95.py
-----------------------------
class G95FCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\gnu.py
-----------------------------
>         """Handle the different versions of GNU fortran compilers"""
          # Strip warning(s) that may be emitted by gfortran
          while version_string.startswith('gfortran: warning'):
              version_string =\
def is_win64():
class GnuFCompiler(FCompiler):
class Gnu95FCompiler(GnuFCompiler):
def _can_target(cmd, arch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\hpux.py
-----------------------------
class HPUXFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\ibm.py
-----------------------------
class IBMFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\intel.py
-----------------------------
def intel_version_match(type):
class BaseIntelFCompiler(FCompiler):
class IntelFCompiler(BaseIntelFCompiler):
class IntelItaniumFCompiler(IntelFCompiler):
class IntelEM64TFCompiler(IntelFCompiler):
class IntelVisualFCompiler(BaseIntelFCompiler):
class IntelItaniumVisualFCompiler(IntelVisualFCompiler):
class IntelEM64VisualFCompiler(IntelVisualFCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\lahey.py
-----------------------------
class LaheyFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\mips.py
-----------------------------
class MIPSFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\nag.py
-----------------------------
class BaseNAGFCompiler(FCompiler):
class NAGFCompiler(BaseNAGFCompiler):
class NAGFORCompiler(BaseNAGFCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\none.py
-----------------------------
class NoneFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\nv.py
-----------------------------
>     """ NVIDIA High Performance Computing (HPC) SDK Fortran Compiler
     
      https://developer.nvidia.com/hpc-sdk
     
class NVHPCFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\pathf95.py
-----------------------------
class PathScaleFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\pg.py
-----------------------------
>         """List of compiler library directories."""
          opt = FCompiler.get_library_dirs(self)
          flang_dir = dirname(self.executables['compiler_f77'][0])
          opt.append(normpath(join(flang_dir, '..', 'lib')))
class PGroupFCompiler(FCompiler):
class PGroupFlangCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\sun.py
-----------------------------
class SunFCompiler(FCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\vast.py
-----------------------------
class VastFCompiler(GnuFCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fcompiler\__init__.py
-----------------------------
> """numpy.distutils.fcompiler
  
  Contains FCompiler, an abstract base class that defines the interface
  for the numpy.distutils Fortran compiler abstraction model.
class CompilerNotFound(Exception):
def flaglist(s):
def str2bool(s):
def is_sequence_of_strings(seq):
class FCompiler(CCompiler):
def load_all_fcompiler_classes():
def _find_existing_fcompiler(compiler_types,
def available_fcompilers_for_platform(osname=None, platform=None):
def get_default_fcompiler(osname=None, platform=None, requiref90=False,
def new_fcompiler(plat=None,
def show_fcompilers(dist=None):
def dummy_fortran_file():
def is_free_format(file):
def has_f90_header(src):
def get_f77flags(src):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_build_ext.py
-----------------------------
def test_multi_fortran_libs_link(tmp_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt.py
-----------------------------
>         return textwrap.dedent("""\
              <<<<
              march    : {}
              compiler : {}
class FakeCCompilerOpt(CCompilerOpt):
class _Test_CCompilerOpt:
def new_test(arch, cc):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_ccompiler_opt_conf.py
-----------------------------
>     """A hook to check the sanity of configured features
  -   before it called by the abstract class '_Feature'
class FakeCCompilerOpt(CCompilerOpt):
class _TestConfFeatures(FakeCCompilerOpt):
class TestConfFeatures(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_exec_command.py
-----------------------------
>     """Context manager to redirect stdout for exec_command test."""
      def __init__(self, stdout=None):
          self._stdout = stdout or sys.stdout
  
class redirect_stdout:
class redirect_stderr:
class emulate_nonposix:
def test_exec_command_stdout():
def test_exec_command_stderr():
class TestExecCommand:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_fcompiler.py
-----------------------------
def test_fcompiler_flags(monkeypatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_fcompiler_gnu.py
-----------------------------
class TestG77Versions:
class TestGFortranVersions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_fcompiler_intel.py
-----------------------------
class TestIntelFCompilerVersions:
class TestIntelEM64TFCompilerVersions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_fcompiler_nagfor.py
-----------------------------
class TestNagFCompilerVersions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_from_template.py
-----------------------------
> pyf_src = """
  python module foo
      <_rd=real,double precision>
      interface
def normalize_whitespace(s):
def test_from_template():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_log.py
-----------------------------
def setup_module():
def teardown_module():
def test_log_prefix(func_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_mingw32ccompiler.py
-----------------------------
def test_build_import():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_misc_util.py
-----------------------------
class TestAppendpath:
class TestMinrelpath:
class TestGpaths:
class TestSharedExtension:
def test_installed_npymath_ini():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_npy_pkg_config.py
-----------------------------
> simple = """\
  [meta]
  Name = foo
  Description = foo lib
class TestLibraryInfo:
class TestParseFlags:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_shell_utils.py
-----------------------------
>     """
      Test that join produces strings understood by subprocess
def Parser(request):
def runner(Parser):
def test_join_matches_subprocess(Parser, runner, argv):
def test_roundtrip(Parser, argv):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\test_system_info.py
-----------------------------
>     """
      notfound_action:
        0 - do nothing
        1 - display warning message
def get_class(name, notfound_action=1):
def have_compiler():
class _system_info(system_info):
class Temp1Info(_system_info):
class Temp2Info(_system_info):
class DuplicateOptionInfo(_system_info):
class TestSystemInfoReading:
def test_distutils_parse_env_order(monkeypatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\utilities.py
-----------------------------
>         f"""\
          import os
          import sys
          sys.path = {repr(sys.path)}
def _get_compiler_status():
def has_c_compiler():
def has_f77_compiler():
def has_f90_compiler():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\armccompiler.py
-----------------------------
>     """
      Arm compiler.
class ArmCCompiler(UnixCCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\ccompiler.py
-----------------------------
>     """
      Check if an objects needs to be rebuild based on its dependencies
  
      Parameters
def _needs_build(obj, cc_args, extra_postargs, pp_opts):
def replace_method(klass, method_name, func):
def CCompiler_find_executables(self):
def CCompiler_spawn(self, cmd, display=None, env=None):
def CCompiler_object_filenames(self, source_filenames, strip_dir=0, output_dir=''):
def CCompiler_compile(self, sources, output_dir=None, macros=None,
def CCompiler_customize_cmd(self, cmd, ignore=()):
def _compiler_to_string(compiler):
def CCompiler_show_customization(self):
def CCompiler_customize(self, dist, need_cxx=0):
def simple_version_match(pat=r'[-.\d]+', ignore='', start=''):
def CCompiler_get_version(self, force=False, ok_status=[0]):
def CCompiler_cxx_compiler(self):
def new_compiler (plat=None,
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\ccompiler_opt.py
-----------------------------
> """Provides the `CCompilerOpt` class, used for handling the CPU/hardware
  optimization, starting from parsing the command arguments, to managing the
  relation between the CPU baseline and dispatch-able features,
  also generating the required C headers and ending with compiling
class _Config:
class _Distutils:
class _Cache:
class _CCompiler:
class _Feature:
class _Parse:
class CCompilerOpt(_Config, _Distutils, _Cache, _CCompiler, _Feature, _Parse):
def new_ccompiler_opt(compiler, dispatch_hpath, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\conv_template.py
-----------------------------
> """
  takes templated file .xxx.src and produces .xxx file  where .xxx is
  .i or .c or .h, using the following template rules
  
def parse_structure(astr, level):
def paren_repl(obj):
def parse_values(astr):
def parse_loop_header(loophead) :
def parse_string(astr, env, level, line) :
def process_str(astr):
def resolve_includes(source):
def process_file(source):
def unique_key(adict):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\core.py
-----------------------------
>     """ Return True if command line does not contain any
      help or display requests.
def _dict_append(d, **kws):
def _command_line_ok(_cache=None):
def get_distribution(always=False):
def setup(**attr):
def _check_append_library(libraries, item):
def _check_append_ext_library(libraries, lib_name, build_info):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\cpuinfo.py
-----------------------------
> """
  cpuinfo
  
  Copyright 2002 Pearu Peterson all rights reserved,
def getoutput(cmd, successful_status=(0,), stacklevel=1):
def command_info(successful_status=(0,), stacklevel=1, **kw):
def command_by_line(cmd, successful_status=(0,), stacklevel=1):
def key_value_from_command(cmd, sep, successful_status=(0,),
class CPUInfoBase:
class LinuxCPUInfo(CPUInfoBase):
class IRIXCPUInfo(CPUInfoBase):
class DarwinCPUInfo(CPUInfoBase):
class SunOSCPUInfo(CPUInfoBase):
class Win32CPUInfo(CPUInfoBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\exec_command.py
-----------------------------
> """
  exec_command
  
  Implements exec_command function that is (almost) equivalent to
def filepath_from_subprocess_output(output):
def forward_bytes_to_stdout(val):
def temp_file_name():
def get_pythonexe():
def find_executable(exe, path=None, _cache={}):
def _preserve_environment( names ):
def _update_environment( **env ):
def exec_command(command, execute_in='', use_shell=None, use_tee=None,
def _exec_command(command, use_shell=None, use_tee = None, **env):
def _quote_arg(arg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\extension.py
-----------------------------
> """distutils.extension
  
  Provides the Extension class, used to describe C/C++ extension
  modules in setup scripts.
class Extension(old_Extension):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\from_template.py
-----------------------------
> """
  
  process_file(filename)
  
def parse_structure(astr):
def find_repl_patterns(astr):
def find_and_remove_repl_patterns(astr):
def conv(astr):
def unique_key(adict):
def expand_sub(substr, names):
def process_str(allstr):
def resolve_includes(source):
def process_file(source):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\fujitsuccompiler.py
-----------------------------
>     """
      Fujitsu compiler.
class FujitsuCCompiler(UnixCCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\intelccompiler.py
-----------------------------
>     """A modified Intel compiler compatible with a GCC-built Python."""
      compiler_type = 'intel'
      cc_exe = 'icc'
      cc_args = 'fPIC'
class IntelCCompiler(UnixCCompiler):
class IntelItaniumCCompiler(IntelCCompiler):
class IntelEM64TCCompiler(UnixCCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\lib2def.py
-----------------------------
> __doc__ = """This module generates a DEF file from the symbols in
  an MSVC-compiled DLL import library.  It correctly discriminates between
  data and functions.  The data is collected from the output of the program
  nm(1).
def parse_cmd():
def getnm(nm_cmd=['nm', '-Cs', 'python%s.lib' % py_ver], shell=True):
def parse_nm(nm_output):
def output_def(dlist, flist, header, file = sys.stdout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\line_endings.py
-----------------------------
> """ Functions for converting from DOS to UNIX line endings
  
def dos2unix(file):
def dos2unix_one_dir(modified_files, dir_name, file_names):
def dos2unix_dir(dir_name):
def unix2dos(file):
def unix2dos_one_dir(modified_files, dir_name, file_names):
def unix2dos_dir(dir_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\log.py
-----------------------------
>         """
          If we log WARN messages, log this message as a 'nice' anti-warn
          message.
  
def _fix_args(args,flag=1):
class Log(old_Log):
def set_threshold(level, force=False):
def get_threshold():
def set_verbosity(v, force=False):
def error(msg, *a, **kw):
def warn(msg, *a, **kw):
def info(msg, *a, **kw):
def debug(msg, *a, **kw):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\mingw32ccompiler.py
-----------------------------
> """
  Support code for building Python extensions on Windows.
  
      # NT stuff
def get_msvcr_replacement():
class Mingw32CCompiler(distutils.cygwinccompiler.CygwinCCompiler):
def find_python_dll():
def dump_table(dll):
def generate_def(dll, dfile):
def find_dll(dll_name):
def build_msvcr_library(debug=False):
def build_import_library():
def _check_for_import_lib():
def _build_import_library_amd64():
def _build_import_library_arm64():
def _build_import_library_x86():
def msvc_manifest_xml(maj, min):
def manifest_rc(name, type='dll'):
def check_embedded_msvcr_match_linked(msver):
def configtest_name(config):
def manifest_name(config):
def rc_name(config):
def generate_manifest(config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\misc_util.py
-----------------------------
>     """
      Container to hold information on an installable library.
  
      Parameters
def clean_up_temporary_directory():
class InstallableLib:
def get_num_build_jobs():
def quote_args(args):
def allpath(name):
def rel_path(path, parent_path):
def get_path_from_frame(frame, parent_path=None):
def njoin(*path):
def get_mathlibs(path=None):
def minrelpath(path):
def sorted_glob(fileglob):
def _fix_paths(paths, local_path, include_non_existing):
def gpaths(paths, local_path='', include_non_existing=True):
def make_temp_file(suffix='', prefix='', text=True):
def terminal_has_colors():
def default_text(s):
def red_text(s):
def green_text(s):
def yellow_text(s):
def cyan_text(s):
def blue_text(s):
def cyg2win32(path: str) -> str:
def mingw32():
def msvc_runtime_version():
def msvc_runtime_library():
def msvc_runtime_major():
def _get_f90_modules(source):
def is_string(s):
def all_strings(lst):
def is_sequence(seq):
def is_glob_pattern(s):
def as_list(seq):
def get_language(sources):
def has_f_sources(sources):
def has_cxx_sources(sources):
def filter_sources(sources):
def _get_headers(directory_list):
def _get_directories(list_of_sources):
def _commandline_dep_string(cc_args, extra_postargs, pp_opts):
def get_dependencies(sources):
def is_local_src_dir(directory):
def general_source_files(top_path):
def general_source_directories_files(top_path):
def get_ext_source_files(ext):
def get_script_files(scripts):
def get_lib_source_files(lib):
def get_shared_lib_extension(is_python_ext=False):
def get_data_files(data):
def dot_join(*args):
def get_frame(level=0):
class Configuration:
def get_cmd(cmdname, _cache={}):
def get_numpy_include_dirs():
def get_npy_pkg_dir():
def get_pkg_info(pkgname, dirs=None):
def get_info(pkgname, dirs=None):
def is_bootstrapping():
def default_config_dict(name = None, parent_name = None, local_path=None):
def dict_append(d, **kws):
def appendpath(prefix, path):
def generate_config_py(target):
def msvc_version(compiler):
def get_build_architecture():
def sanitize_cxx_flags(cxxflags):
def exec_mod_from_location(modname, modfile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\msvc9compiler.py
-----------------------------
>     """Concatenate two environment paths avoiding repeats.
  
      Here `old` is the environment string before the base class initialize
      function is called and `new` is the string after the call. The new string
def _merge(old, new):
class MSVCCompiler(_MSVCCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\msvccompiler.py
-----------------------------
>     """Concatenate two environment paths avoiding repeats.
  
      Here `old` is the environment string before the base class initialize
      function is called and `new` is the string after the call. The new string
def _merge(old, new):
class MSVCCompiler(_MSVCCompiler):
def lib_opts_if_msvc(build_cmd):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\npy_pkg_config.py
-----------------------------
>     """
      Exception thrown when there is a problem parsing a configuration file.
  
class FormatError(OSError):
class PkgNotFound(OSError):
def parse_flags(line):
def _escape_backslash(val):
class LibraryInfo:
class VariableSet:
def parse_meta(config):
def parse_variables(config):
def parse_sections(config):
def pkg_to_filename(pkg_name):
def parse_config(filename, dirs=None):
def _read_config_imp(filenames, dirs=None):
def read_config(pkgname, dirs=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\numpy_distribution.py
-----------------------------
class NumpyDistribution(Distribution):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\pathccompiler.py
-----------------------------
>     """
      PathScale compiler compatible with an gcc built Python.
class PathScaleCCompiler(UnixCCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\system_info.py
-----------------------------
> """
  This file defines a set of system_info classes for getting
  information about various resources (libraries, library directories,
  include directories, etc.) in the system. Usage:
def customized_ccompiler():
def _c_string_literal(s):
def libpaths(paths, bits):
def get_standard_file(fname):
def _parse_env_order(base_order, env):
def get_info(name, notfound_action=0):
class NotFoundError(DistutilsError):
class AliasedOptionError(DistutilsError):
class AtlasNotFoundError(NotFoundError):
class FlameNotFoundError(NotFoundError):
class LapackNotFoundError(NotFoundError):
class LapackSrcNotFoundError(LapackNotFoundError):
class LapackILP64NotFoundError(NotFoundError):
class BlasOptNotFoundError(NotFoundError):
class BlasNotFoundError(NotFoundError):
class BlasILP64NotFoundError(NotFoundError):
class BlasSrcNotFoundError(BlasNotFoundError):
class FFTWNotFoundError(NotFoundError):
class DJBFFTNotFoundError(NotFoundError):
class NumericNotFoundError(NotFoundError):
class X11NotFoundError(NotFoundError):
class UmfpackNotFoundError(NotFoundError):
class system_info:
class fft_opt_info(system_info):
class fftw_info(system_info):
class fftw2_info(fftw_info):
class fftw3_info(fftw_info):
class fftw3_armpl_info(fftw_info):
class dfftw_info(fftw_info):
class sfftw_info(fftw_info):
class fftw_threads_info(fftw_info):
class dfftw_threads_info(fftw_info):
class sfftw_threads_info(fftw_info):
class djbfft_info(system_info):
class mkl_info(system_info):
class lapack_mkl_info(mkl_info):
class blas_mkl_info(mkl_info):
class ssl2_info(system_info):
class lapack_ssl2_info(ssl2_info):
class blas_ssl2_info(ssl2_info):
class armpl_info(system_info):
class lapack_armpl_info(armpl_info):
class blas_armpl_info(armpl_info):
class atlas_info(system_info):
class atlas_blas_info(atlas_info):
class atlas_threads_info(atlas_info):
class atlas_blas_threads_info(atlas_blas_info):
class lapack_atlas_info(atlas_info):
class lapack_atlas_threads_info(atlas_threads_info):
class atlas_3_10_info(atlas_info):
class atlas_3_10_blas_info(atlas_3_10_info):
class atlas_3_10_threads_info(atlas_3_10_info):
class atlas_3_10_blas_threads_info(atlas_3_10_blas_info):
class lapack_atlas_3_10_info(atlas_3_10_info):
class lapack_atlas_3_10_threads_info(atlas_3_10_threads_info):
class lapack_info(system_info):
class lapack_src_info(system_info):
def get_atlas_version(**config):
class lapack_opt_info(system_info):
class _ilp64_opt_info_mixin:
class lapack_ilp64_opt_info(lapack_opt_info, _ilp64_opt_info_mixin):
class lapack_ilp64_plain_opt_info(lapack_ilp64_opt_info):
class lapack64__opt_info(lapack_ilp64_opt_info):
class blas_opt_info(system_info):
class blas_ilp64_opt_info(blas_opt_info, _ilp64_opt_info_mixin):
class blas_ilp64_plain_opt_info(blas_ilp64_opt_info):
class blas64__opt_info(blas_ilp64_opt_info):
class cblas_info(system_info):
class blas_info(system_info):
class openblas_info(blas_info):
class openblas_lapack_info(openblas_info):
class openblas_clapack_info(openblas_lapack_info):
class openblas_ilp64_info(openblas_info):
class openblas_ilp64_lapack_info(openblas_ilp64_info):
class openblas64__info(openblas_ilp64_info):
class openblas64__lapack_info(openblas_ilp64_lapack_info, openblas64__info):
class blis_info(blas_info):
class flame_info(system_info):
class accelerate_info(system_info):
class accelerate_lapack_info(accelerate_info):
class blas_src_info(system_info):
class x11_info(system_info):
class _numpy_info(system_info):
class numarray_info(_numpy_info):
class Numeric_info(_numpy_info):
class numpy_info(_numpy_info):
class numerix_info(system_info):
class f2py_info(system_info):
class boost_python_info(system_info):
class agg2_info(system_info):
class _pkg_config_info(system_info):
class wx_info(_pkg_config_info):
class gdk_pixbuf_xlib_2_info(_pkg_config_info):
class gdk_pixbuf_2_info(_pkg_config_info):
class gdk_x11_2_info(_pkg_config_info):
class gdk_2_info(_pkg_config_info):
class gdk_info(_pkg_config_info):
class gtkp_x11_2_info(_pkg_config_info):
class gtkp_2_info(_pkg_config_info):
class xft_info(_pkg_config_info):
class freetype2_info(_pkg_config_info):
class amd_info(system_info):
class umfpack_info(system_info):
def combine_paths(*args, **kws):
def dict_append(d, **kws):
def parseCmdLine(argv=(None,)):
def show_all(argv=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\unixccompiler.py
-----------------------------
> """
  unixccompiler - can handle very long argument lists for ar.
  
def UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts):
def UnixCCompiler_create_static_lib(self, objects, output_libname,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\_shell_utils.py
-----------------------------
> """
  Helper functions for interacting with the shell, and consuming shell-style
  parameters provided in config files.
class CommandLineParser:
class WindowsParser:
class PosixParser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\distutils\__init__.py
-----------------------------
> """
  An enhanced distutils, providing support for Fortran compilers, for BLAS,
  LAPACK and other common libraries for numerical computing, and more.
  
def customized_fcompiler(plat=None, compiler=None):
def customized_ccompiler(plat=None, compiler=None, verbose=1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\doc\ufuncs.py
-----------------------------
> """
  ===================
  Universal Functions
  ===================

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_abstract_interface.py
-----------------------------
class TestAbstractInterface(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_array_from_pyobj.py
-----------------------------
>     """
      Build the required testing extension module
  
def get_testdir():
def setup_module():
def flags_info(arr):
def flags2names(flags):
class Intent:
class Type:
class Array:
class TestIntent:
class TestSharedMemory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_assumed_shape.py
-----------------------------
class TestAssumedShapeSumExample(util.F2PyTest):
class TestF2cmapOption(TestAssumedShapeSumExample):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_block_docstring.py
-----------------------------
class TestBlockDocString(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_callback.py
-----------------------------
>         expected = textwrap.dedent("""\
          a = t(fun,[fun_extra_args])
  
          Wrapper for ``t``.
class TestF77Callback(util.F2PyTest):
class TestF77CallbackPythonTLS(TestF77Callback):
class TestF90Callback(util.F2PyTest):
class TestGH18335(util.F2PyTest):
class TestGH25211(util.F2PyTest):
class TestCBFortranCallstatement(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_character.py
-----------------------------
>         code += textwrap.dedent(f"""
  
          subroutine {fprefix}_input_{fsuffix}(c, o, n)
            character*{clength}, intent(in) :: c
class TestCharacterString(util.F2PyTest):
class TestCharacter(util.F2PyTest):
class TestMiscCharacter(util.F2PyTest):
class TestStringScalarArr(util.F2PyTest):
class TestStringAssumedLength(util.F2PyTest):
class TestStringOptionalInOut(util.F2PyTest):
class TestNewCharHandling(util.F2PyTest):
class TestBCCharHandling(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_common.py
-----------------------------
class TestCommonBlock(util.F2PyTest):
class TestCommonWithUse(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_crackfortran.py
-----------------------------
>     """This test suite tests various expressions that are used as dimension
      specifications.
  
      There exists two usage cases where analyzing dimensions
class TestNoSpace(util.F2PyTest):
class TestPublicPrivate:
class TestModuleProcedure:
class TestExternal(util.F2PyTest):
class TestCrackFortran(util.F2PyTest):
class TestMarkinnerspaces:
class TestDimSpec(util.F2PyTest):
class TestModuleDeclaration:
class TestEval(util.F2PyTest):
class TestFortranReader(util.F2PyTest):
class TestUnicodeComment(util.F2PyTest):
class TestNameArgsPatternBacktracking:
class TestFunctionReturn(util.F2PyTest):
class TestFortranGroupCounters(util.F2PyTest):
class TestF77CommonBlockReader:
class TestParamEval:
class TestLowerF2PYDirective(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_data.py
-----------------------------
class TestData(util.F2PyTest):
class TestDataF77(util.F2PyTest):
class TestDataMultiplierF77(util.F2PyTest):
class TestDataWithCommentsF77(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_docs.py
-----------------------------
def get_docdir():
def _path(*args):
class TestDocAdvanced(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_f2cmap.py
-----------------------------
class TestF2Cmap(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_f2py2e.py
-----------------------------
>     """Takes in a temporary file for testing and returns the expected output and input paths
  
      Here expected output is essentially one of any of the possible generated
      files.
def compiler_check_f2pycli():
def get_io_paths(fname_inp, mname="untitled"):
def hello_world_f90(tmpdir_factory):
def gh23598_warn(tmpdir_factory):
def gh22819_cli(tmpdir_factory):
def hello_world_f77(tmpdir_factory):
def retreal_f77(tmpdir_factory):
def f2cmap_f90(tmpdir_factory):
def test_gh22819_cli(capfd, gh22819_cli, monkeypatch):
def test_gh22819_many_pyf(capfd, gh22819_cli, monkeypatch):
def test_gh23598_warn(capfd, gh23598_warn, monkeypatch):
def test_gen_pyf(capfd, hello_world_f90, monkeypatch):
def test_gen_pyf_stdout(capfd, hello_world_f90, monkeypatch):
def test_gen_pyf_no_overwrite(capfd, hello_world_f90, monkeypatch):
def test_untitled_cli(capfd, hello_world_f90, monkeypatch):
def test_no_py312_distutils_fcompiler(capfd, hello_world_f90, monkeypatch):
def test_f2py_skip(capfd, retreal_f77, monkeypatch):
def test_f2py_only(capfd, retreal_f77, monkeypatch):
def test_file_processing_switch(capfd, hello_world_f90, retreal_f77,
def test_mod_gen_f77(capfd, hello_world_f90, monkeypatch):
def test_mod_gen_gh25263(capfd, hello_world_f77, monkeypatch):
def test_lower_cmod(capfd, hello_world_f77, monkeypatch):
def test_lower_sig(capfd, hello_world_f77, monkeypatch):
def test_build_dir(capfd, hello_world_f90, monkeypatch):
def test_overwrite(capfd, hello_world_f90, monkeypatch):
def test_latexdoc(capfd, hello_world_f90, monkeypatch):
def test_nolatexdoc(capfd, hello_world_f90, monkeypatch):
def test_shortlatex(capfd, hello_world_f90, monkeypatch):
def test_restdoc(capfd, hello_world_f90, monkeypatch):
def test_norestexdoc(capfd, hello_world_f90, monkeypatch):
def test_debugcapi(capfd, hello_world_f90, monkeypatch):
def test_debugcapi_bld(hello_world_f90, monkeypatch):
def test_wrapfunc_def(capfd, hello_world_f90, monkeypatch):
def test_nowrapfunc(capfd, hello_world_f90, monkeypatch):
def test_inclheader(capfd, hello_world_f90, monkeypatch):
def test_inclpath():
def test_hlink():
def test_f2cmap(capfd, f2cmap_f90, monkeypatch):
def test_quiet(capfd, hello_world_f90, monkeypatch):
def test_verbose(capfd, hello_world_f90, monkeypatch):
def test_version(capfd, monkeypatch):
def test_npdistop(hello_world_f90, monkeypatch):
def test_no_freethreading_compatible(hello_world_f90, monkeypatch):
def test_freethreading_compatible(hello_world_f90, monkeypatch):
def test_npd_fcompiler():
def test_npd_compiler():
def test_npd_help_fcompiler():
def test_npd_f77exec():
def test_npd_f90exec():
def test_npd_f77flags():
def test_npd_f90flags():
def test_npd_opt():
def test_npd_arch():
def test_npd_noopt():
def test_npd_noarch():
def test_npd_debug():
def test_npd_link_auto():
def test_npd_lib():
def test_npd_define():
def test_npd_undefine():
def test_npd_incl():
def test_npd_linker():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_isoc.py
-----------------------------
class TestISOC(util.F2PyTest):
def test_process_f2cmap_dict():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_kind.py
-----------------------------
>         """Test `int` kind_func for integers up to 10**40."""
          selectedintkind = self.module.selectedintkind
  
          for i in range(40):
class TestKind(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_mixed.py
-----------------------------
>         expected = textwrap.dedent("""\
          a = bar11()
  
          Wrapper for ``bar11``.
class TestMixed(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_modules.py
-----------------------------
>             """\
                       i : 'i'-scalar
                       x : 'i'-array(4)
                       a : 'f'-array(2,3)
class TestModuleFilterPublicEntities(util.F2PyTest):
class TestModuleWithoutPublicEntities(util.F2PyTest):
class TestModuleDocString(util.F2PyTest):
class TestModuleAndSubroutine(util.F2PyTest):
class TestUsedModule(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_parameter.py
-----------------------------
class TestParameters(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_pyf_src.py
-----------------------------
> pyf_src = """
  python module foo
      <_rd=real,double precision>
      interface
def normalize_whitespace(s):
def test_from_template():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_quoted_character.py
-----------------------------
> """See https://github.com/numpy/numpy/pull/10676.
  
class TestQuotedCharacter(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_regression.py
-----------------------------
class TestIntentInOut(util.F2PyTest):
class TestDataOnlyMultiModule(util.F2PyTest):
class TestModuleWithDerivedType(util.F2PyTest):
class TestNegativeBounds(util.F2PyTest):
class TestNumpyVersionAttribute(util.F2PyTest):
def test_include_path():
class TestIncludeFiles(util.F2PyTest):
class TestF77Comments(util.F2PyTest):
class TestF90Contiuation(util.F2PyTest):
class TestLowerF2PYDirectives(util.F2PyTest):
def test_gh26623():
def test_gh25784():
class TestAssignmentOnlyModules(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_return_character.py
-----------------------------
class TestReturnCharacter(util.F2PyTest):
class TestFReturnCharacter(TestReturnCharacter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_return_complex.py
-----------------------------
class TestReturnComplex(util.F2PyTest):
class TestFReturnComplex(TestReturnComplex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_return_integer.py
-----------------------------
class TestReturnInteger(util.F2PyTest):
class TestFReturnInteger(TestReturnInteger):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_return_logical.py
-----------------------------
class TestReturnLogical(util.F2PyTest):
class TestFReturnLogical(TestReturnLogical):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_return_real.py
-----------------------------
>     code = """
  python module c_ext_return_real
  usercode \'\'\'
  float t4(float value) { return value; }
class TestReturnReal(util.F2PyTest):
class TestCReturnReal(TestReturnReal):
class TestFReturnReal(TestReturnReal):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_routines.py
-----------------------------
class TestRenamedFunc(util.F2PyTest):
class TestRenamedSubroutine(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_semicolon_split.py
-----------------------------
>     code = f"""
  python module {module_name}
      usercode '''
  void foo(int* x) {{
class TestMultiline(util.F2PyTest):
class TestCallstatement(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_size.py
-----------------------------
class TestSizeSumExample(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_string.py
-----------------------------
>         """Return the content of a string buffer as integer value.
  
          For example:
            _sint('1234') -> 4321
class TestString(util.F2PyTest):
class TestDocStringArguments(util.F2PyTest):
class TestFixedString(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_symbolic.py
-----------------------------
class TestSymbolic(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\test_value_attrspec.py
-----------------------------
class TestValueAttr(util.F2PyTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\util.py
-----------------------------
> """
  Utility functions for
  
  - building and importing modules on test time, using a temporary location
def check_language(lang, code_snippet=None):
class CompilerChecker:
def has_c_compiler():
def has_f77_compiler():
def has_f90_compiler():
def has_fortran_compiler():
def _cleanup():
def get_module_dir():
def get_temp_module_name():
def _memoize(func):
def build_module(source_files, options=[], skip=[], only=[], module_name=None):
def build_code(source_code,
class SimplifiedMesonBackend(MesonBackend):
def build_meson(source_files, module_name=None, **kwargs):
class F2PyTest:
def getpath(*a):
def switchdir(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\_backends\_backend.py
-----------------------------
>         """Compile the wrapper."""
          pass
class Backend(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\_backends\_distutils.py
-----------------------------
class DistutilsBackend(Backend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\_backends\_meson.py
-----------------------------
>     """Template meson build file generation class."""
  
      def __init__(
          self,
class MesonTemplate:
class MesonBackend(Backend):
def _prepare_sources(mname, sources, bdir):
def _get_flags(fc_flags):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\_backends\__init__.py
-----------------------------
def f2py_build_generator(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\auxfuncs.py
-----------------------------
> """
  Auxiliary functions for f2py2e.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
def outmess(t):
def debugcapi(var):
def _ischaracter(var):
def _isstring(var):
def ischaracter_or_characterarray(var):
def ischaracter(var):
def ischaracterarray(var):
def isstring_or_stringarray(var):
def isstring(var):
def isstringarray(var):
def isarrayofstrings(var):  # obsolete?
def isarray(var):
def isscalar(var):
def iscomplex(var):
def islogical(var):
def isinteger(var):
def isreal(var):
def get_kind(var):
def isint1(var):
def islong_long(var):
def isunsigned_char(var):
def isunsigned_short(var):
def isunsigned(var):
def isunsigned_long_long(var):
def isdouble(var):
def islong_double(var):
def islong_complex(var):
def iscomplexarray(var):
def isint1array(var):
def isunsigned_chararray(var):
def isunsigned_shortarray(var):
def isunsignedarray(var):
def isunsigned_long_longarray(var):
def issigned_chararray(var):
def issigned_shortarray(var):
def issigned_array(var):
def issigned_long_longarray(var):
def isallocatable(var):
def ismutable(var):
def ismoduleroutine(rout):
def ismodule(rout):
def isfunction(rout):
def isfunction_wrap(rout):
def issubroutine(rout):
def issubroutine_wrap(rout):
def isattr_value(var):
def hasassumedshape(rout):
def requiresf90wrapper(rout):
def isroutine(rout):
def islogicalfunction(rout):
def islong_longfunction(rout):
def islong_doublefunction(rout):
def iscomplexfunction(rout):
def iscomplexfunction_warn(rout):
def isstringfunction(rout):
def hasexternals(rout):
def isthreadsafe(rout):
def hasvariables(rout):
def isoptional(var):
def isexternal(var):
def getdimension(var):
def isrequired(var):
def iscstyledirective(f2py_line):
def isintent_in(var):
def isintent_inout(var):
def isintent_out(var):
def isintent_hide(var):
def isintent_nothide(var):
def isintent_c(var):
def isintent_cache(var):
def isintent_copy(var):
def isintent_overwrite(var):
def isintent_callback(var):
def isintent_inplace(var):
def isintent_aux(var):
def isintent_aligned4(var):
def isintent_aligned8(var):
def isintent_aligned16(var):
def isprivate(var):
def isvariable(var):
def hasinitvalue(var):
def hasinitvalueasstring(var):
def hasnote(var):
def hasresultnote(rout):
def hascommon(rout):
def containscommon(rout):
def hasderivedtypes(rout):
def containsderivedtypes(rout):
def containsmodule(block):
def hasbody(rout):
def hascallstatement(rout):
def istrue(var):
def isfalse(var):
class F2PYError(Exception):
class throw_error:
def l_and(*f):
def l_or(*f):
def l_not(f):
def isdummyroutine(rout):
def getfortranname(rout):
def getmultilineblock(rout, blockname, comment=1, counter=0):
def getcallstatement(rout):
def getcallprotoargument(rout, cb_map={}):
def getusercode(rout):
def getusercode1(rout):
def getpymethoddef(rout):
def getargs(rout):
def getargs2(rout):
def getrestdoc(rout):
def gentitle(name):
def flatlist(lst):
def stripcomma(s):
def replace(str, d, defaultsep=''):
def dictappend(rd, ar):
def applyrules(rules, d, var={}):
def get_f2py_modulename(source):
def getuseblocks(pymod):
def process_f2cmap_dict(f2cmap_all, new_map, c2py_map, verbose=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\capi_maps.py
-----------------------------
> """
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
  Copyright 2011 -- present NumPy Developers.
  Permission to use, modify, and distribute this software is given under the
def load_f2cmap_file(f2cmap_file):
def getctype(var):
def f2cexpr(expr):
def getstrlength(var):
def getarrdims(a, var, verbose=0):
def getpydocsign(a, var):
def getarrdocsign(a, var):
def getinit(a, var):
def get_elsize(var):
def sign2map(a, var):
def routsign2map(rout):
def modsign2map(m):
def cb_sign2map(a, var, index=None):
def cb_routsign2map(rout, um):
def common_sign2map(a, var):  # obsolete

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\cb_rules.py
-----------------------------
> """
  Build call-back mechanism for f2py2e.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
def buildcallbacks(m):
def buildcallback(rout, um):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\cfuncs.py
-----------------------------
> """
  C declarations, CPP macros, and C functions for f2py2e.
  Only required declarations/macros/functions will be used.
  
def errmess(s: str) -> None:
def buildcfuncs():
def append_needs(need, flag=1):
def get_needs():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\common_rules.py
-----------------------------
> """
  Build common block mechanism for f2py2e.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
def findcommonblocks(block, top=1):
def buildhooks(m):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\crackfortran.py
-----------------------------
> """
  crackfortran --- read fortran (77,90) code and extract declaration information.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
def reset_global_f2py_vars():
def outmess(line, flag=1):
def rmbadname1(name):
def rmbadname(names):
def undo_rmbadname1(name):
def undo_rmbadname(names):
def openhook(filename, mode):
def is_free_format(fname):
def readfortrancode(ffile, dowithline=show, istop=1):
def split_by_unquoted(line, characters):
def _simplifyargs(argsline):
def crackline(line, reset=0):
def markouterparen(line):
def markoutercomma(line, comma=','):
def unmarkouterparen(line):
def appenddecl(decl, decl2, force=1):
def _is_intent_callback(vdecl):
def _resolvetypedefpattern(line):
def parse_name_for_bind(line):
def _resolvenameargspattern(line):
def analyzeline(m, case, line):
def appendmultiline(group, context_name, ml):
def cracktypespec0(typespec, ll):
def removespaces(expr):
def markinnerspaces(line):
def updatevars(typespec, selector, attrspec, entitydecl):
def cracktypespec(typespec, selector):
def setattrspec(decl, attr, force=0):
def setkindselector(decl, sel, force=0):
def setcharselector(decl, sel, force=0):
def getblockname(block, unknown='unknown'):
def setmesstext(block):
def get_usedict(block):
def get_useparameters(block, param_map=None):
def postcrack2(block, tab='', param_map=None):
def postcrack(block, args=None, tab=''):
def sortvarnames(vars):
def analyzecommon(block):
def analyzebody(block, args, tab=''):
def buildimplicitrules(block):
def myeval(e, g=None, l=None):
def getlincoef(e, xset):  # e = a*x+b ; x in xset
def _get_depend_dict(name, vars, deps):
def _calc_depend_dict(vars):
def get_sorted_names(vars):
def _kind_func(string):
def _selected_int_kind_func(r):
def _selected_real_kind_func(p, r=0, radix=0):
def get_parameters(vars, global_params={}):
def _eval_length(length, params):
def _eval_scalar(value, params):
def analyzevars(block):
def param_eval(v, g_params, params, dimspec=None):
def param_parse(d, params):
def expr2name(a, block, args=[]):
def analyzeargs(block):
def _ensure_exprdict(r):
def determineexprtype(expr, vars, rules={}):
def crack2fortrangen(block, tab='\n', as_interface=False):
def common2fortran(common, tab=''):
def use2fortran(use, tab=''):
def true_intent_list(var):
def vars2fortran(block, vars, args, tab='', as_interface=False):
def crackfortran(files):
def crack2fortran(block):
def _is_visit_pair(obj):
def traverse(obj, visit, parents=[], result=None, *args, **kwargs):
def character_backward_compatibility_hook(item, parents, result,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\diagnose.py
-----------------------------
def run():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\f2py2e.py
-----------------------------
> """
  
  f2py2e - Fortran to Python C/API generator. 2nd Edition.
           See __usage__ below.
def scaninputline(inputline):
def callcrackfortran(files, options):
def buildmodules(lst):
def dict_append(d_out, d_in):
def run_main(comline_list):
def filter_files(prefix, suffix, files, remove_prefix=None):
def get_prefix(module):
class CombineIncludePaths(argparse.Action):
def f2py_parser():
def get_newer_options(iline):
def make_f2py_compile_parser():
def preparse_sysargv():
def run_compile():
def validate_modulename(pyf_files, modulename='untitled'):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\f90mod_rules.py
-----------------------------
> """
  Build F90 module support for f2py2e.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
def findf90modules(m):
def buildhooks(pymod):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\func2subr.py
-----------------------------
> """
  
  Rules for building C/API module with f2py2e.
  
def var2fixfortran(vars, a, fa=None, f90mode=None):
def useiso_c_binding(rout):
def createfuncwrapper(rout, signature=0):
def createsubrwrapper(rout, signature=0):
def assubr(rout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\rules.py
-----------------------------
> """
  
  Rules for building C/API module with f2py2e.
  
def buildmodule(m, um):
def buildapi(rout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\symbolic.py
-----------------------------
> """Fortran/C symbolic expressions
  
  References:
  - J3/21-007: Draft Fortran 202x. https://j3-fortran.org/doc/year/21/21-007.pdf
class Language(Enum):
class Op(Enum):
class RelOp(Enum):
class ArithOp(Enum):
class OpError(Exception):
class Precedence(Enum):
def _pairs_add(d, k, v):
class ExprWarning(UserWarning):
def ewarn(message):
class Expr:
def normalize(obj):
def as_expr(obj):
def as_symbol(obj):
def as_number(obj, kind=4):
def as_integer(obj, kind=4):
def as_real(obj, kind=4):
def as_string(obj, kind=1):
def as_array(obj):
def as_complex(real, imag=0):
def as_apply(func, *args, **kwargs):
def as_ternary(cond, expr1, expr2):
def as_ref(expr):
def as_deref(expr):
def as_eq(left, right):
def as_ne(left, right):
def as_lt(left, right):
def as_le(left, right):
def as_gt(left, right):
def as_ge(left, right):
def as_terms(obj):
def as_factors(obj):
def as_term_coeff(obj):
def as_numer_denom(obj):
def _counter():
def eliminate_quotes(s):
def insert_quotes(s, d):
def replace_parenthesis(s):
def _get_parenthesis_kind(s):
def unreplace_parenthesis(s, d):
def fromstring(s, language=Language.C):
class _Pair:
class _FromStringWorker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\use_rules.py
-----------------------------
> """
  Build 'use others module data' mechanism for f2py2e.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
def buildusevars(m, r):
def buildusevar(name, realname, vars, usemodulename):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\_isocbind.py
-----------------------------
> """
  ISO_C_BINDING maps for f2py2e.
  Only required declarations/macros/functions will be used.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\_src_pyf.py
-----------------------------
> """
  process_file(filename)
  
    takes templated file .xxx.src and produces .xxx file where .xxx
def parse_structure(astr):
def find_repl_patterns(astr):
def find_and_remove_repl_patterns(astr):
def conv(astr):
def unique_key(adict):
def expand_sub(substr, names):
def process_str(allstr):
def resolve_includes(source):
def process_file(source):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\__init__.py
-----------------------------
> """Fortran to Python Interface Generator.
  
  Copyright 1999 -- 2011 Pearu Peterson all rights reserved.
  Copyright 2011 -- present NumPy Developers.
def get_include():
def __getattr__(attr):
def __dir__():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\f2py\__version__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\tests\test_helper.py
-----------------------------
> """Test functions for fftpack.helper module
  
  Copied from fftpack.helper by Pearu Peterson, October 2005
  
class TestFFTShift:
class TestFFTFreq:
class TestRFFTFreq:
class TestIRFFTN:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\tests\test_pocketfft.py
-----------------------------
def fft1(x):
class TestFFTShift:
class TestFFT1D:
def test_fft_with_order(dtype, order, fft):
def test_fft_output_order(order, n):
class TestFFTThreadSafe:
def test_irfft_with_n_1_regression():
def test_irfft_with_n_large_regression():
def test_fft_with_integer_or_bool_input(data, fft):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\helper.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\_helper.py
-----------------------------
> """
  Discrete Fourier Transforms - _helper.py
  
def _fftshift_dispatcher(x, axes=None):
def fftshift(x, axes=None):
def ifftshift(x, axes=None):
def fftfreq(n, d=1.0, device=None):
def rfftfreq(n, d=1.0, device=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\_pocketfft.py
-----------------------------
> """
  Discrete Fourier Transforms
  
  Routines in this module:
def _raw_fft(a, n, axis, is_real, is_forward, norm, out=None):
def _swap_direction(norm):
def _fft_dispatcher(a, n=None, axis=None, norm=None, out=None):
def fft(a, n=None, axis=-1, norm=None, out=None):
def ifft(a, n=None, axis=-1, norm=None, out=None):
def rfft(a, n=None, axis=-1, norm=None, out=None):
def irfft(a, n=None, axis=-1, norm=None, out=None):
def hfft(a, n=None, axis=-1, norm=None, out=None):
def ihfft(a, n=None, axis=-1, norm=None, out=None):
def _cook_nd_args(a, s=None, axes=None, invreal=0):
def _raw_fftnd(a, s=None, axes=None, function=fft, norm=None, out=None):
def _fftn_dispatcher(a, s=None, axes=None, norm=None, out=None):
def fftn(a, s=None, axes=None, norm=None, out=None):
def ifftn(a, s=None, axes=None, norm=None, out=None):
def fft2(a, s=None, axes=(-2, -1), norm=None, out=None):
def ifft2(a, s=None, axes=(-2, -1), norm=None, out=None):
def rfftn(a, s=None, axes=None, norm=None, out=None):
def rfft2(a, s=None, axes=(-2, -1), norm=None, out=None):
def irfftn(a, s=None, axes=None, norm=None, out=None):
def irfft2(a, s=None, axes=(-2, -1), norm=None, out=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\fft\__init__.py
-----------------------------
> """
  Discrete Fourier Transform
  ==========================
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_arraypad.py
-----------------------------
> """Tests for the array padding functions.
  
class TestAsPairs:
class TestConditionalShortcuts:
class TestStatistic:
class TestConstant:
class TestLinearRamp:
class TestReflect:
class TestEmptyArray:
class TestSymmetric:
class TestWrap:
class TestEdge:
class TestEmpty:
def test_legacy_vector_functionality():
def test_unicode_mode():
def test_object_input(mode):
class TestPadWidth:
def test_kwargs(mode):
def test_constant_zero_default():
def test_unsupported_mode(mode):
def test_non_contiguous_array(mode):
def test_memory_layout_persistence(mode):
def test_dtype_persistence(dtype, mode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_arraysetops.py
-----------------------------
> """Test functions for 1D array set operations.
  
class TestSetOps:
class TestUnique:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_arrayterator.py
-----------------------------
def test():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_array_utils.py
-----------------------------
class TestByteBounds:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_format.py
-----------------------------
class BytesIOSRandomSize(BytesIO):
def roundtrip(arr):
def roundtrip_randsize(arr):
def roundtrip_truncated(arr):
def assert_equal_(o1, o2):
def test_roundtrip():
def test_roundtrip_randsize():
def test_roundtrip_truncated():
def test_file_truncated(tmp_path):
def test_long_str():
def test_memmap_roundtrip(tmpdir):
def test_compressed_roundtrip(tmpdir):
def test_load_padded_dtype(tmpdir, dt):
def test_python2_python3_interoperability():
def test_pickle_python2_python3():
def test_pickle_disallow(tmpdir):
def test_descr_to_dtype(dt):
def test_version_2_0():
def test_version_2_0_memmap(tmpdir):
def test_huge_header(tmpdir, mmap_mode):
def test_huge_header_npz(tmpdir):
def test_write_version():
def test_read_magic():
def test_read_magic_bad_magic():
def test_read_version_1_0_bad_magic():
def test_bad_magic_args():
def test_large_header():
def test_read_array_header_1_0():
def test_read_array_header_2_0():
def test_bad_header():
def test_large_file_support(tmpdir):
def test_large_archive(tmpdir):
def test_empty_npz(tmpdir):
def test_unicode_field_names(tmpdir):
def test_header_growth_axis():
def test_metadata_dtype(dt):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_function_base.py
-----------------------------
>     """
      Like real + 1j * imag, but behaves as expected when imag contains non-finite
      values
def get_mat(n):
def _make_complex(real, imag):
class TestRot90:
class TestFlip:
class TestAny:
class TestAll:
def test_any_and_all_result_dtype(dtype):
class TestCopy:
class TestAverage:
class TestSelect:
class TestInsert:
class TestAmax:
class TestAmin:
class TestPtp:
class TestCumsum:
class TestProd:
class TestCumprod:
def test_cumulative_include_initial():
class TestDiff:
class TestDelete:
class TestGradient:
class TestAngle:
class TestTrimZeros:
class TestExtins:
def _foo1(x, y=1.0):
def _foo2(x, y=1.0, z=0.0):
class TestVectorize:
class TestLeaks:
class TestDigitize:
class TestUnwrap:
class TestFilterwindows:
class TestTrapezoid:
class TestSinc:
class TestUnique:
class TestCheckFinite:
class TestCorrCoef:
class TestCov:
class Test_I0:
class TestKaiser:
class TestMeshgrid:
class TestPiecewise:
class TestBincount:
class TestInterp:
class TestPercentile:
class TestQuantile:
class TestLerp:
class TestMedian:
class TestSortComplex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_histograms.py
-----------------------------
>     """
      Provide test coverage when using provided estimators for optimal number of
      bins
class TestHistogram:
class TestHistogramOptimBinNums:
class TestHistogramdd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_index_tricks.py
-----------------------------
class TestRavelUnravelIndex:
class TestGrid:
class TestConcatenator:
class TestNdenumerate:
class TestIndexExpression:
class TestIx_:
def test_c_():
class TestFillDiagonal:
def test_diag_indices():
class TestDiagIndicesFrom:
def test_ndindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_io.py
-----------------------------
>     """Helper IO class.
  
      Writes encode strings to bytes if needed, reads return bytes.
      This makes it easier to emulate files opened in binary mode
class TextIO(BytesIO):
def strptime(s, fmt=None):
class RoundtripTest:
class TestSaveLoad(RoundtripTest):
class TestSavezLoad(RoundtripTest):
class TestSaveTxt:
class LoadTxtBase:
class TestLoadTxt(LoadTxtBase):
class Testfromregex:
class TestFromTxt(LoadTxtBase):
class TestPathUsage:
def test_gzip_load():
class JustWriter:
class JustReader:
def test_ducktyping():
def test_gzip_loadtxt():
def test_gzip_loadtxt_from_string():
def test_npzfile_dict():
def test_load_refcount():
def test_load_multiple_arrays_until_eof():
def test_savez_nopickle():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_loadtxt.py
-----------------------------
> """
  Tests specific to `np.loadtxt` added during the move of loadtxt to be backed
  by C code.
  These tests complement those found in `test_io.py`.
def test_scientific_notation():
def test_comment_multiple_chars(comment):
def mixed_types_structured():
def test_structured_dtype_and_skiprows_no_empty_lines(
def test_unpack_structured(mixed_types_structured):
def test_structured_dtype_with_shape():
def test_structured_dtype_with_multi_shape():
def test_nested_structured_subarray():
def test_structured_dtype_offsets():
def test_exception_negative_row_limits(param):
def test_exception_noninteger_row_limits(param):
def test_ndmin_single_row_or_col(data, shape):
def test_bad_ndmin(badval):
def test_blank_lines_spaces_delimit(ws):
def test_blank_lines_normal_delimiter():
def test_maxrows_no_blank_lines(dtype):
def test_exception_message_bad_values(dtype):
def test_converters_negative_indices():
def test_converters_negative_indices_with_usecols():
def test_ragged_error():
def test_ragged_usecols():
def test_empty_usecols():
def test_large_unicode_characters(c1, c2):
def test_unicode_with_converter():
def test_converter_with_structured_dtype():
def test_converter_with_unicode_dtype():
def test_read_huge_row():
def test_huge_float(dtype):
def test_string_no_length_given(given_dtype, expected_dtype):
def test_float_conversion():
def test_bool():
def test_integer_signs(dtype):
def test_implicit_cast_float_to_int_fails(dtype):
def test_complex_parsing(dtype, with_parens):
def test_read_from_generator():
def test_read_from_generator_multitype():
def test_read_from_bad_generator():
def test_object_cleanup_on_read_error():
def test_character_not_bytes_compatible():
def test_invalid_converter(conv):
def test_converters_dict_raises_non_integer_key():
def test_converters_dict_raises_non_col_key(bad_col_ind):
def test_converters_dict_raises_val_not_callable():
def test_quoted_field(q):
def test_quoted_field_with_whitepace_delimiter(q):
def test_quote_support_default():
def test_quotechar_multichar_error():
def test_comment_multichar_error_with_quote():
def test_structured_dtype_with_quotes():
def test_quoted_field_is_not_empty():
def test_quoted_field_is_not_empty_nonstrict():
def test_consecutive_quotechar_escaped():
def test_warn_on_no_data(data, ndmin, usecols):
def test_warn_on_skipped_data(skiprows):
def test_byteswapping_and_unaligned(dtype, value, swap):
def test_unicode_whitespace_stripping(dtype):
def test_unicode_whitespace_stripping_complex(dtype):
def test_bad_complex(dtype, field):
def test_nul_character_error(dtype):
def test_no_thousands_support(dtype):
def test_bad_newline_in_iterator(data):
def test_good_newline_in_iterator(data):
def test_universal_newlines_quoted(newline):
def test_null_character():
def test_iterator_fails_getting_next_line():
class TestCReaderUnitTests:
def test_delimiter_comment_collision_raises():
def test_delimiter_quotechar_collision_raises():
def test_comment_quotechar_collision_raises():
def test_delimiter_and_multiple_comments_collision_raises():
def test_collision_with_default_delimiter_raises(ws):
def test_control_character_newline_raises(nl):
def test_parametric_unit_discovery(
def test_str_dtype_unit_discovery_with_converter():
def test_control_character_empty():
def test_control_characters_as_bytes():
def test_field_growing_cases():
def test_maxrows_exceeding_chunksize(nmax):
def test_skiprow_exceeding_maxrows_exceeding_chunksize(tmpdir, nskip):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_mixins.py
-----------------------------
>             """Object that opts out of __array_ufunc__."""
              __array_ufunc__ = None
  
              def __add__(self, other):
class ArrayLike(np.lib.mixins.NDArrayOperatorsMixin):
def wrap_array_like(result):
def _assert_equal_type_and_value(result, expected, err_msg=None):
class TestNDArrayOperatorsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_nanfunctions.py
-----------------------------
>         """Construct a signature and replace all default parameter-values."""
          prm_list = []
          signature = inspect.signature(func)
          for prm in signature.parameters.values():
class TestSignatureMatch:
class TestNanFunctions_MinMax:
class TestNanFunctions_ArgminArgmax:
class TestNanFunctions_NumberTypes:
class SharedNanFunctionsTestsMixin:
class TestNanFunctions_SumProd(SharedNanFunctionsTestsMixin):
class TestNanFunctions_CumSumProd(SharedNanFunctionsTestsMixin):
class TestNanFunctions_MeanVarStd(SharedNanFunctionsTestsMixin):
class TestNanFunctions_Median:
class TestNanFunctions_Percentile:
class TestNanFunctions_Quantile:
def test__nan_mask(arr, expected):
def test__replace_nan():
def test_memmap_takes_fast_route(tmpdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_packbits.py
-----------------------------
def test_packbits():
def test_packbits_empty():
def test_packbits_empty_with_axis():
def test_packbits_large(bitorder):
def test_packbits_very_large():
def test_unpackbits():
def test_pack_unpack_order():
def test_unpackbits_empty():
def test_unpackbits_empty_with_axis():
def test_unpackbits_large():
class TestCount:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_polynomial.py
-----------------------------
>         """
          Regression test for gh-5096.
class TestPolynomial:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_recfunctions.py
-----------------------------
>     """
      Test append_fields with arrays containing objects
class TestRecFunctions:
class TestRecursiveFillFields:
class TestMergeArrays:
class TestAppendFields:
class TestStackArrays:
class TestJoinBy:
class TestJoinBy2:
class TestAppendFieldsObj:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_regression.py
-----------------------------
>             """Old-style class in python2, normal class in python3"""
              pass
  
          out = open(os.devnull, 'w')
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_shape_base.py
-----------------------------
>     """ hack in keepdims behavior into a function taking an axis """
      @functools.wraps(func)
      def wrapped(a, axis, **kwargs):
          res = func(a, axis=axis, **kwargs)
def _add_keepdims(func):
class TestTakeAlongAxis:
class TestPutAlongAxis:
class TestApplyAlongAxis:
class TestApplyOverAxes:
class TestExpandDims:
class TestArraySplit:
class TestSplit:
class TestColumnStack:
class TestDstack:
class TestHsplit:
class TestVsplit:
class TestDsplit:
class TestSqueeze:
class TestKron:
class TestTile:
class TestMayShareMemory:
def compare_results(res, desired):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_stride_tricks.py
-----------------------------
def assert_shapes_correct(input_shapes, expected_shape):
def assert_incompatible_shapes_raise(input_shapes):
def assert_same_as_ufunc(shape0, shape1, transposed=False, flipped=False):
def test_same():
def test_broadcast_kwargs():
def test_one_off():
def test_same_input_shapes():
def test_two_compatible_by_ones_input_shapes():
def test_two_compatible_by_prepending_ones_input_shapes():
def test_incompatible_shapes_raise_valueerror():
def test_same_as_ufunc():
def test_broadcast_to_succeeds():
def test_broadcast_to_raises():
def test_broadcast_shape():
def test_broadcast_shapes_succeeds():
def test_broadcast_shapes_raises():
def test_as_strided():
class TestSlidingWindowView:
def as_strided_writeable():
class VerySimpleSubClass(np.ndarray):
class SimpleSubClass(VerySimpleSubClass):
def test_subclasses():
def test_writeable():
def test_writeable_memoryview():
def test_reference_types():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_twodim_base.py
-----------------------------
> """Test functions for matrix module
  
def get_mat(n):
class TestEye:
class TestDiag:
class TestFliplr:
class TestFlipud:
class TestHistogram2d:
class TestTri:
def test_tril_triu_ndim2():
def test_tril_triu_ndim3():
def test_tril_triu_with_inf():
def test_tril_triu_dtype():
def test_mask_indices():
def test_tril_indices():
class TestTriuIndices:
class TestTrilIndicesFrom:
class TestTriuIndicesFrom:
class TestVander:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_type_check.py
-----------------------------
def assert_all(x):
class TestCommonType:
class TestMintypecode:
class TestIsscalar:
class TestReal:
class TestImag:
class TestIscomplex:
class TestIsreal:
class TestIscomplexobj:
class TestIsrealobj:
class TestIsnan:
class TestIsfinite:
class TestIsinf:
class TestIsposinf:
class TestIsneginf:
class TestNanToNum:
class TestRealIfClose:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_ufunclike.py
-----------------------------
class TestUfunclike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test_utils.py
-----------------------------
def test_assert_raises_regex_context_manager():
def test_info_method_heading():
def test_drop_metadata():
def test_drop_metadata_identity_and_copy(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test__datasource.py
-----------------------------
def urlopen_stub(url, data=None):
def setup_module():
def teardown_module():
def valid_textfile(filedir):
def invalid_textfile(filedir):
def valid_httpurl():
def invalid_httpurl():
def valid_baseurl():
def invalid_baseurl():
def valid_httpfile():
def invalid_httpfile():
class TestDataSourceOpen:
class TestDataSourceExists:
class TestDataSourceAbspath:
class TestRepositoryAbspath:
class TestRepositoryExists:
class TestOpenFunc:
def test_del_attr_handling():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test__iotools.py
-----------------------------
class TestLineSplitter:
class TestNameValidator:
def _bytes_to_date(s):
class TestStringConverter:
class TestMiscFunctions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\test__version.py
-----------------------------
> """Tests for the NumpyVersion class.
  
def test_main_versions():
def test_version_1_point_10():
def test_alpha_beta_rc():
def test_dev_version():
def test_dev_a_b_rc_mixed():
def test_dev0_version():
def test_dev0_a_b_rc_mixed():
def test_raises():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\array_utils.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\format.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\introspect.py
-----------------------------
> """
  Introspection helper functions.
def opt_func_info(func_name=None, signature=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\mixins.py
-----------------------------
> """
  Mixin classes for custom array types that don't inherit from ndarray.
def _disables_array_ufunc(obj):
def _binary_method(ufunc, name):
def _reflected_binary_method(ufunc, name):
def _inplace_binary_method(ufunc, name):
def _numeric_methods(ufunc, name):
def _unary_method(ufunc, name):
class NDArrayOperatorsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\npyio.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\recfunctions.py
-----------------------------
> """
  Collection of utilities to manipulate structured arrays.
  
  Most of these functions were initially implemented by John Hunter for
def _recursive_fill_fields_dispatcher(input, output):
def recursive_fill_fields(input, output):
def _get_fieldspec(dtype):
def get_names(adtype):
def get_names_flat(adtype):
def flatten_descr(ndtype):
def _zip_dtype(seqarrays, flatten=False):
def _zip_descr(seqarrays, flatten=False):
def get_fieldstructure(adtype, lastname=None, parents=None,):
def _izip_fields_flat(iterable):
def _izip_fields(iterable):
def _izip_records(seqarrays, fill_value=None, flatten=True):
def _fix_output(output, usemask=True, asrecarray=False):
def _fix_defaults(output, defaults=None):
def _merge_arrays_dispatcher(seqarrays, fill_value=None, flatten=None,
def merge_arrays(seqarrays, fill_value=-1, flatten=False,
def _drop_fields_dispatcher(base, drop_names, usemask=None, asrecarray=None):
def drop_fields(base, drop_names, usemask=True, asrecarray=False):
def _keep_fields(base, keep_names, usemask=True, asrecarray=False):
def _rec_drop_fields_dispatcher(base, drop_names):
def rec_drop_fields(base, drop_names):
def _rename_fields_dispatcher(base, namemapper):
def rename_fields(base, namemapper):
def _append_fields_dispatcher(base, names, data, dtypes=None,
def append_fields(base, names, data, dtypes=None,
def _rec_append_fields_dispatcher(base, names, data, dtypes=None):
def rec_append_fields(base, names, data, dtypes=None):
def _repack_fields_dispatcher(a, align=None, recurse=None):
def repack_fields(a, align=False, recurse=False):
def _get_fields_and_offsets(dt, offset=0):
def _common_stride(offsets, counts, itemsize):
def _structured_to_unstructured_dispatcher(arr, dtype=None, copy=None,
def structured_to_unstructured(arr, dtype=None, copy=False, casting='unsafe'):
def _unstructured_to_structured_dispatcher(arr, dtype=None, names=None,
def unstructured_to_structured(arr, dtype=None, names=None, align=False,
def _apply_along_fields_dispatcher(func, arr):
def apply_along_fields(func, arr):
def _assign_fields_by_name_dispatcher(dst, src, zero_unassigned=None):
def assign_fields_by_name(dst, src, zero_unassigned=True):
def _require_fields_dispatcher(array, required_dtype):
def require_fields(array, required_dtype):
def _stack_arrays_dispatcher(arrays, defaults=None, usemask=None,
def stack_arrays(arrays, defaults=None, usemask=True, asrecarray=False,
def _find_duplicates_dispatcher(
def find_duplicates(a, key=None, ignoremask=True, return_index=False):
def _join_by_dispatcher(
def join_by(key, r1, r2, jointype='inner', r1postfix='1', r2postfix='2',
def _rec_join_dispatcher(
def rec_join(key, r1, r2, jointype='inner', r1postfix='1', r2postfix='2',

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\scimath.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\stride_tricks.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\user_array.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_arraypad_impl.py
-----------------------------
> """
  The arraypad module contains a group of functions to pad values onto the edges
  of an n-dimensional array.
  
def _round_if_needed(arr, dtype):
def _slice_at_axis(sl, axis):
def _view_roi(array, original_area_slice, axis):
def _pad_simple(array, pad_width, fill_value=None):
def _set_pad_area(padded, axis, width_pair, value_pair):
def _get_edges(padded, axis, width_pair):
def _get_linear_ramps(padded, axis, width_pair, end_value_pair):
def _get_stats(padded, axis, width_pair, length_pair, stat_func):
def _set_reflect_both(padded, axis, width_pair, method,
def _set_wrap_both(padded, axis, width_pair, original_period):
def _as_pairs(x, ndim, as_index=False):
def _pad_dispatcher(array, pad_width, mode=None, **kwargs):
def pad(array, pad_width, mode='constant', **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_arraysetops_impl.py
-----------------------------
> """
  Set operations for arrays based on sorting.
  
  Notes
def _ediff1d_dispatcher(ary, to_end=None, to_begin=None):
def ediff1d(ary, to_end=None, to_begin=None):
def _unpack_tuple(x):
def _unique_dispatcher(ar, return_index=None, return_inverse=None,
def unique(ar, return_index=False, return_inverse=False,
def _unique1d(ar, return_index=False, return_inverse=False,
class UniqueAllResult(NamedTuple):
class UniqueCountsResult(NamedTuple):
class UniqueInverseResult(NamedTuple):
def _unique_all_dispatcher(x, /):
def unique_all(x):
def _unique_counts_dispatcher(x, /):
def unique_counts(x):
def _unique_inverse_dispatcher(x, /):
def unique_inverse(x):
def _unique_values_dispatcher(x, /):
def unique_values(x):
def _intersect1d_dispatcher(
def intersect1d(ar1, ar2, assume_unique=False, return_indices=False):
def _setxor1d_dispatcher(ar1, ar2, assume_unique=None):
def setxor1d(ar1, ar2, assume_unique=False):
def _in1d_dispatcher(ar1, ar2, assume_unique=None, invert=None, *,
def in1d(ar1, ar2, assume_unique=False, invert=False, *, kind=None):
def _in1d(ar1, ar2, assume_unique=False, invert=False, *, kind=None):
def _isin_dispatcher(element, test_elements, assume_unique=None, invert=None,
def isin(element, test_elements, assume_unique=False, invert=False, *,
def _union1d_dispatcher(ar1, ar2):
def union1d(ar1, ar2):
def _setdiff1d_dispatcher(ar1, ar2, assume_unique=None):
def setdiff1d(ar1, ar2, assume_unique=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_arrayterator_impl.py
-----------------------------
> """
  A buffered iterator for big arrays.
  
  This module solves the problem of iterating over a big file-based array
class Arrayterator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_array_utils_impl.py
-----------------------------
> """
  Miscellaneous utils.
def byte_bounds(a):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_datasource.py
-----------------------------
> """A file interface for handling local and remote data files.
  
  The goal of datasource is to abstract some of the file system operations
  when dealing with data files so the researcher doesn't have to know all the
def _check_mode(mode, encoding, newline):
class _FileOpeners:
def open(path, mode='r', destpath=os.curdir, encoding=None, newline=None):
class DataSource:
class Repository (DataSource):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_format_impl.py
-----------------------------
> """
  Binary serialization
  
  NPY format
def _check_version(version):
def magic(major, minor):
def read_magic(fp):
def dtype_to_descr(dtype):
def descr_to_dtype(descr):
def header_data_from_array_1_0(array):
def _wrap_header(header, version):
def _wrap_header_guess_version(header):
def _write_array_header(fp, d, version=None):
def write_array_header_1_0(fp, d):
def write_array_header_2_0(fp, d):
def read_array_header_1_0(fp, max_header_size=_MAX_HEADER_SIZE):
def read_array_header_2_0(fp, max_header_size=_MAX_HEADER_SIZE):
def _filter_header(s):
def _read_array_header(fp, version, max_header_size=_MAX_HEADER_SIZE):
def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):
def read_array(fp, allow_pickle=False, pickle_kwargs=None, *,
def open_memmap(filename, mode='r+', dtype=None, shape=None,
def _read_bytes(fp, size, error_template="ran out of data"):
def isfileobj(f):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_function_base_impl.py
-----------------------------
>     """
      Rotate an array by 90 degrees in the plane specified by axes.
  
      Rotation direction is from the first towards the second axis.
def _rot90_dispatcher(m, k=None, axes=None):
def rot90(m, k=1, axes=(0, 1)):
def _flip_dispatcher(m, axis=None):
def flip(m, axis=None):
def iterable(y):
def _weights_are_valid(weights, a, axis):
def _average_dispatcher(a, axis=None, weights=None, returned=None, *,
def average(a, axis=None, weights=None, returned=False, *,
def asarray_chkfinite(a, dtype=None, order=None):
def _piecewise_dispatcher(x, condlist, funclist, *args, **kw):
def piecewise(x, condlist, funclist, *args, **kw):
def _select_dispatcher(condlist, choicelist, default=None):
def select(condlist, choicelist, default=0):
def _copy_dispatcher(a, order=None, subok=None):
def copy(a, order='K', subok=False):
def _gradient_dispatcher(f, *varargs, axis=None, edge_order=None):
def gradient(f, *varargs, axis=None, edge_order=1):
def _diff_dispatcher(a, n=None, axis=None, prepend=None, append=None):
def diff(a, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue):
def _interp_dispatcher(x, xp, fp, left=None, right=None, period=None):
def interp(x, xp, fp, left=None, right=None, period=None):
def _angle_dispatcher(z, deg=None):
def angle(z, deg=False):
def _unwrap_dispatcher(p, discont=None, axis=None, *, period=None):
def unwrap(p, discont=None, axis=-1, *, period=2 * pi):
def _sort_complex(a):
def sort_complex(a):
def _arg_trim_zeros(filt):
def _trim_zeros(filt, trim=None, axis=None):
def trim_zeros(filt, trim='fb', axis=None):
def _extract_dispatcher(condition, arr):
def extract(condition, arr):
def _place_dispatcher(arr, mask, vals):
def place(arr, mask, vals):
def disp(mesg, device=None, linefeed=True):
def _parse_gufunc_signature(signature):
def _update_dim_sizes(dim_sizes, arg, core_dims):
def _parse_input_dimensions(args, input_core_dims):
def _calculate_shapes(broadcast_shape, dim_sizes, list_of_core_dims):
def _create_arrays(broadcast_shape, dim_sizes, list_of_core_dims, dtypes,
def _get_vectorize_dtype(dtype):
class vectorize:
def _cov_dispatcher(m, y=None, rowvar=None, bias=None, ddof=None,
def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,
def _corrcoef_dispatcher(x, y=None, rowvar=None, bias=None, ddof=None, *,
def corrcoef(x, y=None, rowvar=True, bias=np._NoValue, ddof=np._NoValue, *,
def blackman(M):
def bartlett(M):
def hanning(M):
def hamming(M):
def _chbevl(x, vals):
def _i0_1(x):
def _i0_2(x):
def _i0_dispatcher(x):
def i0(x):
def kaiser(M, beta):
def _sinc_dispatcher(x):
def sinc(x):
def _ureduce(a, func, keepdims=False, **kwargs):
def _median_dispatcher(
def median(a, axis=None, out=None, overwrite_input=False, keepdims=False):
def _median(a, axis=None, out=None, overwrite_input=False):
def _percentile_dispatcher(a, q, axis=None, out=None, overwrite_input=None,
def percentile(a,
def _quantile_dispatcher(a, q, axis=None, out=None, overwrite_input=None,
def quantile(a,
def _quantile_unchecked(a,
def _quantile_is_valid(q):
def _check_interpolation_as_method(method, interpolation, fname):
def _compute_virtual_index(n, quantiles, alpha: float, beta: float):
def _get_gamma(virtual_indexes, previous_indexes, method):
def _lerp(a, b, t, out=None):
def _get_gamma_mask(shape, default_value, conditioned_value, where):
def _discrete_interpolation_to_boundaries(index, gamma_condition_fun):
def _closest_observation(n, quantiles):
def _inverted_cdf(n, quantiles):
def _quantile_ureduce_func(
def _get_indexes(arr, virtual_indexes, valid_values_count):
def _quantile(
def _trapezoid_dispatcher(y, x=None, dx=None, axis=None):
def trapezoid(y, x=None, dx=1.0, axis=-1):
def trapz(y, x=None, dx=1.0, axis=-1):
def _meshgrid_dispatcher(*xi, copy=None, sparse=None, indexing=None):
def meshgrid(*xi, copy=True, sparse=False, indexing='xy'):
def _delete_dispatcher(arr, obj, axis=None):
def delete(arr, obj, axis=None):
def _insert_dispatcher(arr, obj, values, axis=None):
def insert(arr, obj, values, axis=None):
def _append_dispatcher(arr, values, axis=None):
def append(arr, values, axis=None):
def _digitize_dispatcher(x, bins, right=None):
def digitize(x, bins, right=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_histograms_impl.py
-----------------------------
> """
  Histogram-related functions
def _ptp(x):
def _hist_bin_sqrt(x, range):
def _hist_bin_sturges(x, range):
def _hist_bin_rice(x, range):
def _hist_bin_scott(x, range):
def _hist_bin_stone(x, range):
def _hist_bin_doane(x, range):
def _hist_bin_fd(x, range):
def _hist_bin_auto(x, range):
def _ravel_and_check_weights(a, weights):
def _get_outer_edges(a, range):
def _unsigned_subtract(a, b):
def _get_bin_edges(a, bins, range, weights):
def _search_sorted_inclusive(a, v):
def _histogram_bin_edges_dispatcher(a, bins=None, range=None, weights=None):
def histogram_bin_edges(a, bins=10, range=None, weights=None):
def _histogram_dispatcher(
def histogram(a, bins=10, range=None, density=None, weights=None):
def _histogramdd_dispatcher(sample, bins=None, range=None, density=None,
def histogramdd(sample, bins=10, range=None, density=None, weights=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_index_tricks_impl.py
-----------------------------
>     """
      Construct an open mesh from multiple sequences.
  
      This function takes N 1-D sequences and returns N outputs with N
def _ix__dispatcher(*args):
def ix_(*args):
class nd_grid:
class MGridClass(nd_grid):
class OGridClass(nd_grid):
class AxisConcatenator:
class RClass(AxisConcatenator):
class CClass(AxisConcatenator):
class ndenumerate:
class ndindex:
class IndexExpression:
def _fill_diagonal_dispatcher(a, val, wrap=None):
def fill_diagonal(a, val, wrap=False):
def diag_indices(n, ndim=2):
def _diag_indices_from(arr):
def diag_indices_from(arr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_iotools.py
-----------------------------
> """A collection of functions designed to help I/O with ascii files.
  
def _decode_line(line, encoding=None):
def _is_string_like(obj):
def _is_bytes_like(obj):
def has_nested_fields(ndtype):
def flatten_dtype(ndtype, flatten_base=False):
class LineSplitter:
class NameValidator:
def str2bool(value):
class ConverterError(Exception):
class ConverterLockError(ConverterError):
class ConversionWarning(UserWarning):
class StringConverter:
def easy_dtype(ndtype, names=None, defaultfmt="f%i", **validationargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_nanfunctions_impl.py
-----------------------------
> """
  Functions that ignore NaN.
  
  Functions
def _nan_mask(a, out=None):
def _replace_nan(a, val):
def _copyto(a, val, mask):
def _remove_nan_1d(arr1d, second_arr1d=None, overwrite_input=False):
def _divide_by_count(a, b, out=None):
def _nanmin_dispatcher(a, axis=None, out=None, keepdims=None,
def nanmin(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,
def _nanmax_dispatcher(a, axis=None, out=None, keepdims=None,
def nanmax(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,
def _nanargmin_dispatcher(a, axis=None, out=None, *, keepdims=None):
def nanargmin(a, axis=None, out=None, *, keepdims=np._NoValue):
def _nanargmax_dispatcher(a, axis=None, out=None, *, keepdims=None):
def nanargmax(a, axis=None, out=None, *, keepdims=np._NoValue):
def _nansum_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None,
def nansum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,
def _nanprod_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None,
def nanprod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,
def _nancumsum_dispatcher(a, axis=None, dtype=None, out=None):
def nancumsum(a, axis=None, dtype=None, out=None):
def _nancumprod_dispatcher(a, axis=None, dtype=None, out=None):
def nancumprod(a, axis=None, dtype=None, out=None):
def _nanmean_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None,
def nanmean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,
def _nanmedian1d(arr1d, overwrite_input=False):
def _nanmedian(a, axis=None, out=None, overwrite_input=False):
def _nanmedian_small(a, axis=None, out=None, overwrite_input=False):
def _nanmedian_dispatcher(
def nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=np._NoValue):
def _nanpercentile_dispatcher(
def nanpercentile(
def _nanquantile_dispatcher(a, q, axis=None, out=None, overwrite_input=None,
def nanquantile(
def _nanquantile_unchecked(
def _nanquantile_ureduce_func(
def _nanquantile_1d(
def _nanvar_dispatcher(a, axis=None, dtype=None, out=None, ddof=None,
def nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue,
def _nanstd_dispatcher(a, axis=None, dtype=None, out=None, ddof=None,
def nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_npyio_impl.py
-----------------------------
> """
  IO related functions.
class BagObj:
def zipfile_factory(file, *args, **kwargs):
class NpzFile(Mapping):
def load(file, mmap_mode=None, allow_pickle=False, fix_imports=True,
def _save_dispatcher(file, arr, allow_pickle=None, fix_imports=None):
def save(file, arr, allow_pickle=True, fix_imports=np._NoValue):
def _savez_dispatcher(file, *args, allow_pickle=True, **kwds):
def savez(file, *args, allow_pickle=True, **kwds):
def _savez_compressed_dispatcher(file, *args, allow_pickle=True, **kwds):
def savez_compressed(file, *args, allow_pickle=True, **kwds):
def _savez(file, args, kwds, compress, allow_pickle=True, pickle_kwargs=None):
def _ensure_ndmin_ndarray_check_param(ndmin):
def _ensure_ndmin_ndarray(a, *, ndmin: int):
def _check_nonneg_int(value, name="argument"):
def _preprocess_comments(iterable, comments, encoding):
def _read(fname, *, delimiter=',', comment='#', quote='"',
def loadtxt(fname, dtype=float, comments='#', delimiter=None,
def _savetxt_dispatcher(fname, X, fmt=None, delimiter=None, newline=None,
def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='',
def fromregex(file, regexp, dtype, encoding=None):
def genfromtxt(fname, dtype=float, comments='#', delimiter=None,
def recfromtxt(fname, **kwargs):
def recfromcsv(fname, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_polynomial_impl.py
-----------------------------
> """
  Functions to operate on polynomials.
  
def _poly_dispatcher(seq_of_zeros):
def poly(seq_of_zeros):
def _roots_dispatcher(p):
def roots(p):
def _polyint_dispatcher(p, m=None, k=None):
def polyint(p, m=1, k=None):
def _polyder_dispatcher(p, m=None):
def polyder(p, m=1):
def _polyfit_dispatcher(x, y, deg, rcond=None, full=None, w=None, cov=None):
def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):
def _polyval_dispatcher(p, x):
def polyval(p, x):
def _binary_op_dispatcher(a1, a2):
def polyadd(a1, a2):
def polysub(a1, a2):
def polymul(a1, a2):
def _polydiv_dispatcher(u, v):
def polydiv(u, v):
def _raise_power(astr, wrap=70):
class poly1d:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_scimath_impl.py
-----------------------------
> """
  Wrapper functions to more user-friendly calling of certain math functions
  whose output data-type is different than the input data-type in certain
  domains of the input.
def _tocomplex(arr):
def _fix_real_lt_zero(x):
def _fix_int_lt_zero(x):
def _fix_real_abs_gt_1(x):
def _unary_dispatcher(x):
def sqrt(x):
def log(x):
def log10(x):
def _logn_dispatcher(n, x):
def logn(n, x):
def log2(x):
def _power_dispatcher(x, p):
def power(x, p):
def arccos(x):
def arcsin(x):
def arctanh(x):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_shape_base_impl.py
-----------------------------
>     """
      Take values from the input array by matching 1d index and data slices.
  
      This iterates over matching 1d slices oriented along the specified axis in
def _make_along_axis_idx(arr_shape, indices, axis):
def _take_along_axis_dispatcher(arr, indices, axis=None):
def take_along_axis(arr, indices, axis=-1):
def _put_along_axis_dispatcher(arr, indices, values, axis):
def put_along_axis(arr, indices, values, axis):
def _apply_along_axis_dispatcher(func1d, axis, arr, *args, **kwargs):
def apply_along_axis(func1d, axis, arr, *args, **kwargs):
def _apply_over_axes_dispatcher(func, a, axes):
def apply_over_axes(func, a, axes):
def _expand_dims_dispatcher(a, axis):
def expand_dims(a, axis):
def row_stack(tup, *, dtype=None, casting="same_kind"):
def _column_stack_dispatcher(tup):
def column_stack(tup):
def _dstack_dispatcher(tup):
def dstack(tup):
def _replace_zero_by_x_arrays(sub_arys):
def _array_split_dispatcher(ary, indices_or_sections, axis=None):
def array_split(ary, indices_or_sections, axis=0):
def _split_dispatcher(ary, indices_or_sections, axis=None):
def split(ary, indices_or_sections, axis=0):
def _hvdsplit_dispatcher(ary, indices_or_sections):
def hsplit(ary, indices_or_sections):
def vsplit(ary, indices_or_sections):
def dsplit(ary, indices_or_sections):
def get_array_wrap(*args):
def _kron_dispatcher(a, b):
def kron(a, b):
def _tile_dispatcher(A, reps):
def tile(A, reps):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_stride_tricks_impl.py
-----------------------------
> """
  Utilities that manipulate strides to achieve desirable effects.
  
  An explanation of strides can be found in the :ref:`arrays.ndarray`.
class DummyArray:
def _maybe_view_as_subclass(original_array, new_array):
def as_strided(x, shape=None, strides=None, subok=False, writeable=True):
def _sliding_window_view_dispatcher(x, window_shape, axis=None, *,
def sliding_window_view(x, window_shape, axis=None, *,
def _broadcast_to(array, shape, subok, readonly):
def _broadcast_to_dispatcher(array, shape, subok=None):
def broadcast_to(array, shape, subok=False):
def _broadcast_shape(*args):
def broadcast_shapes(*args):
def _broadcast_arrays_dispatcher(*args, subok=None):
def broadcast_arrays(*args, subok=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_twodim_base_impl.py
-----------------------------
> """ Basic functions for manipulating 2d arrays
  
def _min_int(low, high):
def _flip_dispatcher(m):
def fliplr(m):
def flipud(m):
def eye(N, M=None, k=0, dtype=float, order='C', *, device=None, like=None):
def _diag_dispatcher(v, k=None):
def diag(v, k=0):
def diagflat(v, k=0):
def tri(N, M=None, k=0, dtype=float, *, like=None):
def _trilu_dispatcher(m, k=None):
def tril(m, k=0):
def triu(m, k=0):
def _vander_dispatcher(x, N=None, increasing=None):
def vander(x, N=None, increasing=False):
def _histogram2d_dispatcher(x, y, bins=None, range=None, density=None,
def histogram2d(x, y, bins=10, range=None, density=None, weights=None):
def mask_indices(n, mask_func, k=0):
def tril_indices(n, k=0, m=None):
def _trilu_indices_form_dispatcher(arr, k=None):
def tril_indices_from(arr, k=0):
def triu_indices(n, k=0, m=None):
def triu_indices_from(arr, k=0):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_type_check_impl.py
-----------------------------
> """Automatically adapted for numpy Sep 19, 2005 by convertcode.py
  
def mintypecode(typechars, typeset='GDFgdf', default='d'):
def _real_dispatcher(val):
def real(val):
def _imag_dispatcher(val):
def imag(val):
def _is_type_dispatcher(x):
def iscomplex(x):
def isreal(x):
def iscomplexobj(x):
def isrealobj(x):
def _getmaxmin(t):
def _nan_to_num_dispatcher(x, copy=None, nan=None, posinf=None, neginf=None):
def nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None):
def _real_if_close_dispatcher(a, tol=None):
def real_if_close(a, tol=100):
def typename(char):
def _common_type_dispatcher(*arrays):
def common_type(*arrays):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_ufunclike_impl.py
-----------------------------
> """
  Module of functions that are like ufuncs in acting on arrays and optionally
  storing results in an output array.
  
def _dispatcher(x, out=None):
def fix(x, out=None):
def isposinf(x, out=None):
def isneginf(x, out=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_user_array_impl.py
-----------------------------
> """
  Container class for backward compatibility with NumArray.
  
  The user_array.container class exists for backward compatibility with NumArray
class container:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_utils_impl.py
-----------------------------
>     """
      Print information about various resources in the system
      including available intrinsic support and BLAS/LAPACK library
      in use
def show_runtime():
def get_include():
class _Deprecate:
def _get_indent(lines):
def deprecate(*args, **kwargs):
def deprecate_with_doc(msg):
def _split_line(name, arguments, width):
def _makenamedict(module='numpy'):
def _info(obj, output=None):
def info(object=None, maxwidth=76, output=None, toplevel='numpy'):
def safe_eval(source):
def _median_nancheck(data, result, axis):
def _opt_info():
def drop_metadata(dtype, /):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\_version.py
-----------------------------
> """Utility to compare (NumPy) version strings.
  
  The NumpyVersion class allows properly comparing numpy version strings.
  The LooseVersion and StrictVersion classes that distutils provides don't
class NumpyVersion:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\lib\__init__.py
-----------------------------
> """
  ``numpy.lib`` is mostly a space for implementing functions that don't
  belong in core or in another NumPy submodule with a clear purpose
  (e.g. ``random``, ``fft``, ``linalg``, ``ma``).
def __getattr__(attr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\tests\test_deprecations.py
-----------------------------
> """Test deprecation and future warnings.
  
def test_qr_mode_full_future_warning():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\tests\test_linalg.py
-----------------------------
> """ Test functions for linalg module
  
def consistent_subclass(out, in_):
def assert_almost_equal(a, b, single_decimal=6, double_decimal=12, **kw):
def get_real_dtype(dtype):
def get_complex_dtype(dtype):
def get_rtol(dtype):
class LinalgCase:
def apply_tag(tag, cases):
def _make_generalized_cases():
def _stride_comb_iter(x):
def _make_strided_cases():
class LinalgTestCase:
class LinalgSquareTestCase(LinalgTestCase):
class LinalgNonsquareTestCase(LinalgTestCase):
class HermitianTestCase(LinalgTestCase):
class LinalgGeneralizedSquareTestCase(LinalgTestCase):
class LinalgGeneralizedNonsquareTestCase(LinalgTestCase):
class HermitianGeneralizedTestCase(LinalgTestCase):
def identity_like_generalized(a):
class SolveCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestSolve(SolveCases):
class InvCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestInv(InvCases):
class EigvalsCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestEigvals(EigvalsCases):
class EigCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestEig(EigCases):
class SVDBaseTests:
class SVDCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestSVD(SVDCases, SVDBaseTests):
class SVDHermitianCases(HermitianTestCase, HermitianGeneralizedTestCase):
class TestSVDHermitian(SVDHermitianCases, SVDBaseTests):
class CondCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestCond(CondCases):
class PinvCases(LinalgSquareTestCase,
class TestPinv(PinvCases):
class PinvHermitianCases(HermitianTestCase, HermitianGeneralizedTestCase):
class TestPinvHermitian(PinvHermitianCases):
def test_pinv_rtol_arg():
class DetCases(LinalgSquareTestCase, LinalgGeneralizedSquareTestCase):
class TestDet(DetCases):
class LstsqCases(LinalgSquareTestCase, LinalgNonsquareTestCase):
class TestLstsq(LstsqCases):
class TestMatrixPower:
class TestEigvalshCases(HermitianTestCase, HermitianGeneralizedTestCase):
class TestEigvalsh:
class TestEighCases(HermitianTestCase, HermitianGeneralizedTestCase):
class TestEigh:
class _TestNormBase:
class _TestNormGeneral(_TestNormBase):
class _TestNorm2D(_TestNormBase):
class _TestNorm(_TestNorm2D, _TestNormGeneral):
class TestNorm_NonSystematic:
class _TestNormDoubleBase(_TestNormBase):
class _TestNormSingleBase(_TestNormBase):
class _TestNormInt64Base(_TestNormBase):
class TestNormDouble(_TestNorm, _TestNormDoubleBase):
class TestNormSingle(_TestNorm, _TestNormSingleBase):
class TestNormInt64(_TestNorm, _TestNormInt64Base):
class TestMatrixRank:
def test_reduced_rank():
class TestQR:
class TestCholesky:
class TestOuter:
def test_byteorder_check():
def test_generalized_raise_multiloop():
def test_xerbla_override():
def test_sdot_bug_8577():
class TestMultiDot:
class TestTensorinv:
class TestTensorsolve:
def test_unsupported_commontype():
def test_blas64_dot():
def test_blas64_geqrf_lwork_smoketest():
def test_diagonal():
def test_trace():
def test_cross():
def test_tensordot():
def test_matmul():
def test_matrix_transpose():
def test_matrix_norm():
def test_matrix_norm_empty():
def test_vector_norm():
def test_vector_norm_empty():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\tests\test_regression.py
-----------------------------
> """ Test functions for linalg module
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\linalg.py
-----------------------------
def __getattr__(attr_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\_linalg.py
-----------------------------
> """Lite version of scipy.linalg.
  
  Notes
  -----
class EigResult(NamedTuple):
class EighResult(NamedTuple):
class QRResult(NamedTuple):
class SlogdetResult(NamedTuple):
class SVDResult(NamedTuple):
class LinAlgError(ValueError):
def _raise_linalgerror_singular(err, flag):
def _raise_linalgerror_nonposdef(err, flag):
def _raise_linalgerror_eigenvalues_nonconvergence(err, flag):
def _raise_linalgerror_svd_nonconvergence(err, flag):
def _raise_linalgerror_lstsq(err, flag):
def _raise_linalgerror_qr(err, flag):
def _makearray(a):
def isComplexType(t):
def _realType(t, default=double):
def _complexType(t, default=cdouble):
def _commonType(*arrays):
def _to_native_byte_order(*arrays):
def _assert_2d(*arrays):
def _assert_stacked_2d(*arrays):
def _assert_stacked_square(*arrays):
def _assert_finite(*arrays):
def _is_empty_2d(arr):
def transpose(a):
def _tensorsolve_dispatcher(a, b, axes=None):
def tensorsolve(a, b, axes=None):
def _solve_dispatcher(a, b):
def solve(a, b):
def _tensorinv_dispatcher(a, ind=None):
def tensorinv(a, ind=2):
def _unary_dispatcher(a):
def inv(a):
def _matrix_power_dispatcher(a, n):
def matrix_power(a, n):
def _cholesky_dispatcher(a, /, *, upper=None):
def cholesky(a, /, *, upper=False):
def _outer_dispatcher(x1, x2):
def outer(x1, x2, /):
def _qr_dispatcher(a, mode=None):
def qr(a, mode='reduced'):
def eigvals(a):
def _eigvalsh_dispatcher(a, UPLO=None):
def eigvalsh(a, UPLO='L'):
def eig(a):
def eigh(a, UPLO='L'):
def _svd_dispatcher(a, full_matrices=None, compute_uv=None, hermitian=None):
def svd(a, full_matrices=True, compute_uv=True, hermitian=False):
def _svdvals_dispatcher(x):
def svdvals(x, /):
def _cond_dispatcher(x, p=None):
def cond(x, p=None):
def _matrix_rank_dispatcher(A, tol=None, hermitian=None, *, rtol=None):
def matrix_rank(A, tol=None, hermitian=False, *, rtol=None):
def _pinv_dispatcher(a, rcond=None, hermitian=None, *, rtol=None):
def pinv(a, rcond=None, hermitian=False, *, rtol=_NoValue):
def slogdet(a):
def det(a):
def _lstsq_dispatcher(a, b, rcond=None):
def lstsq(a, b, rcond=None):
def _multi_svd_norm(x, row_axis, col_axis, op, initial=None):
def _norm_dispatcher(x, ord=None, axis=None, keepdims=None):
def norm(x, ord=None, axis=None, keepdims=False):
def _multidot_dispatcher(arrays, *, out=None):
def multi_dot(arrays, *, out=None):
def _multi_dot_three(A, B, C, out=None):
def _multi_dot_matrix_chain_order(arrays, return_costs=False):
def _multi_dot(arrays, order, i, j, out=None):
def _diagonal_dispatcher(x, /, *, offset=None):
def diagonal(x, /, *, offset=0):
def _trace_dispatcher(x, /, *, offset=None, dtype=None):
def trace(x, /, *, offset=0, dtype=None):
def _cross_dispatcher(x1, x2, /, *, axis=None):
def cross(x1, x2, /, *, axis=-1):
def _matmul_dispatcher(x1, x2, /):
def matmul(x1, x2, /):
def _tensordot_dispatcher(x1, x2, /, *, axes=None):
def tensordot(x1, x2, /, *, axes=2):
def _matrix_transpose_dispatcher(x):
def matrix_transpose(x, /):
def _matrix_norm_dispatcher(x, /, *, keepdims=None, ord=None):
def matrix_norm(x, /, *, keepdims=False, ord="fro"):
def _vector_norm_dispatcher(x, /, *, axis=None, keepdims=None, ord=None):
def vector_norm(x, /, *, axis=None, keepdims=False, ord=2):
def _vecdot_dispatcher(x1, x2, /, *, axis=None):
def vecdot(x1, x2, /, *, axis=-1):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\linalg\__init__.py
-----------------------------
> """
  ``numpy.linalg``
  ================
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_arrayobject.py
-----------------------------
def test_matrix_transpose_raises_error_for_1d():
def test_matrix_transpose_equals_transpose_2d():
def test_matrix_transpose_equals_swapaxes(shape):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_core.py
-----------------------------
> """Tests suite for MaskedArray & subclassing.
  
  :author: Pierre Gerard-Marchant
  :contact: pierregm_at_uga_dot_edu
class TestMaskedArray:
class TestMaskedArrayArithmetic:
class TestMaskedArrayAttributes:
class TestFillingValues:
class TestUfuncs:
class TestMaskedArrayInPlaceArithmetic:
class TestMaskedArrayMethods:
class TestMaskedArrayMathMethods:
class TestMaskedArrayMathMethodsComplex:
class TestMaskedArrayFunctions:
class TestMaskedFields:
class TestMaskedObjectArray:
class TestMaskedView:
class TestOptionalArgs:
class TestMaskedConstant:
class TestMaskedWhereAliases:
def test_masked_array():
def test_masked_array_no_copy():
def test_append_masked_array():
def test_append_masked_array_along_axis():
def test_default_fill_value_complex():
def test_ufunc_with_output():
def test_ufunc_with_out_varied():
def test_astype_mask_ordering():
def test_astype_basic(dt1, dt2):
def test_fieldless_void():
def test_mask_shape_assignment_does_not_break_masked():
def test_doc_note():
def test_gh_22556():
def test_gh_21022():
def test_deepcopy_2d_obj():
def test_deepcopy_0d_obj():
def test_uint_fill_value_and_filled():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_deprecations.py
-----------------------------
> """Test deprecation and future warnings.
  
class TestArgsort:
class TestMinimumMaximum:
class TestFromtextfile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_extras.py
-----------------------------
> """Tests suite for MaskedArray.
  Adapted from the original test_ma by Pierre Gerard-Marchant
  
  :author: Pierre Gerard-Marchant
class TestGeneric:
class TestAverage:
class TestConcatenator:
class TestNotMasked:
class TestCompressFunctions:
class TestApplyAlongAxis:
class TestApplyOverAxes:
class TestMedian:
class TestCov:
class TestCorrcoef:
class TestPolynomial:
class TestArraySetOps:
class TestShapeBase:
class TestNDEnumerate:
class TestStack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_mrecords.py
-----------------------------
> """Tests suite for mrecords.
  
  :author: Pierre Gerard-Marchant
  :contact: pierregm_at_uga_dot_edu
class TestMRecords:
class TestView:
class TestMRecordsImport:
def test_record_array_with_object_field():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_old_ma.py
-----------------------------
def eq(v, w, msg=''):
class TestMa:
class TestUfuncs:
class TestArrayMethods:
def eqmask(m1, m2):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_regression.py
-----------------------------
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\test_subclassing.py
-----------------------------
> """Tests suite for MaskedArray & subclassing.
  
  :author: Pierre Gerard-Marchant
  :contact: pierregm_at_uga_dot_edu
def assert_startswith(a, b):
class SubArray(np.ndarray):
class SubMaskedArray(MaskedArray):
class MSubArray(SubArray, MaskedArray):
class CSAIterator:
class ComplicatedSubArray(SubArray):
class WrappedArray(NDArrayOperatorsMixin):
class TestSubclassing:
class ArrayNoInheritance:
def test_array_no_inheritance():
class TestClassWrapping:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\core.py
-----------------------------
> """
  numpy.ma : a package to handle missing or invalid values.
  
  This package was initially written for numarray by Paul F. Dubois
class MaskedArrayFutureWarning(FutureWarning):
def _deprecate_argsort_axis(arr):
def doc_note(initialdoc, note):
def get_object_signature(obj):
class MAError(Exception):
class MaskError(MAError):
def _recursive_fill_value(dtype, f):
def _get_dtype_of(obj):
def default_fill_value(obj):
def _extremum_fill_value(obj, extremum, extremum_name):
def minimum_fill_value(obj):
def maximum_fill_value(obj):
def _recursive_set_fill_value(fillvalue, dt):
def _check_fill_value(fill_value, ndtype):
def set_fill_value(a, fill_value):
def get_fill_value(a):
def common_fill_value(a, b):
def filled(a, fill_value=None):
def get_masked_subclass(*arrays):
def getdata(a, subok=True):
def fix_invalid(a, mask=nomask, copy=True, fill_value=None):
def is_string_or_list_of_strings(val):
class _DomainCheckInterval:
class _DomainTan:
class _DomainSafeDivide:
class _DomainGreater:
class _DomainGreaterEqual:
class _MaskedUFunc:
class _MaskedUnaryOperation(_MaskedUFunc):
class _MaskedBinaryOperation(_MaskedUFunc):
class _DomainedBinaryOperation(_MaskedUFunc):
def _replace_dtype_fields_recursive(dtype, primitive_dtype):
def _replace_dtype_fields(dtype, primitive_dtype):
def make_mask_descr(ndtype):
def getmask(a):
def getmaskarray(arr):
def is_mask(m):
def _shrink_mask(m):
def make_mask(m, copy=False, shrink=True, dtype=MaskType):
def make_mask_none(newshape, dtype=None):
def _recursive_mask_or(m1, m2, newmask):
def mask_or(m1, m2, copy=False, shrink=True):
def flatten_mask(mask):
def _check_mask_axis(mask, axis, keepdims=np._NoValue):
def masked_where(condition, a, copy=True):
def masked_greater(x, value, copy=True):
def masked_greater_equal(x, value, copy=True):
def masked_less(x, value, copy=True):
def masked_less_equal(x, value, copy=True):
def masked_not_equal(x, value, copy=True):
def masked_equal(x, value, copy=True):
def masked_inside(x, v1, v2, copy=True):
def masked_outside(x, v1, v2, copy=True):
def masked_object(x, value, copy=True, shrink=True):
def masked_values(x, value, rtol=1e-5, atol=1e-8, copy=True, shrink=True):
def masked_invalid(a, copy=True):
class _MaskedPrintOption:
def _recursive_printoption(result, mask, printopt):
def _recursive_filled(a, mask, fill_value):
def flatten_structured_array(a):
def _arraymethod(funcname, onmask=True):
class MaskedIterator:
class MaskedArray(ndarray):
def _mareconstruct(subtype, baseclass, baseshape, basetype,):
class mvoid(MaskedArray):
def isMaskedArray(x):
class MaskedConstant(MaskedArray):
def array(data, dtype=None, copy=False, order=None,
def is_masked(x):
class _extrema_operation(_MaskedUFunc):
def min(obj, axis=None, out=None, fill_value=None, keepdims=np._NoValue):
def max(obj, axis=None, out=None, fill_value=None, keepdims=np._NoValue):
def ptp(obj, axis=None, out=None, fill_value=None, keepdims=np._NoValue):
class _frommethod:
def take(a, indices, axis=None, out=None, mode='raise'):
def power(a, b, third=None):
def argsort(a, axis=np._NoValue, kind=None, order=None, endwith=True,
def sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None, *,
def compressed(x):
def concatenate(arrays, axis=0):
def diag(v, k=0):
def left_shift(a, n):
def right_shift(a, n):
def put(a, indices, values, mode='raise'):
def putmask(a, mask, values):  # , mode='raise'):
def transpose(a, axes=None):
def reshape(a, new_shape, order='C'):
def resize(x, new_shape):
def ndim(obj):
def shape(obj):
def size(obj, axis=None):
def diff(a, /, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue):
def where(condition, x=_NoValue, y=_NoValue):
def choose(indices, choices, out=None, mode='raise'):
def round_(a, decimals=0, out=None):
def _mask_propagate(a, axis):
def dot(a, b, strict=False, out=None):
def inner(a, b):
def outer(a, b):
def _convolve_or_correlate(f, a, v, mode, propagate_mask):
def correlate(a, v, mode='valid', propagate_mask=True):
def convolve(a, v, mode='full', propagate_mask=True):
def allequal(a, b, fill_value=True):
def allclose(a, b, masked_equal=True, rtol=1e-5, atol=1e-8):
def asarray(a, dtype=None, order=None):
def asanyarray(a, dtype=None):
def fromfile(file, dtype=float, count=-1, sep=''):
def fromflex(fxarray):
class _convert2ma:
def append(a, b, axis=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\extras.py
-----------------------------
> """
  Masked arrays add-ons.
  
  A collection of utilities for `numpy.ma`.
def issequence(seq):
def count_masked(arr, axis=None):
def masked_all(shape, dtype=float):
def masked_all_like(arr):
class _fromnxfunction:
class _fromnxfunction_single(_fromnxfunction):
class _fromnxfunction_seq(_fromnxfunction):
class _fromnxfunction_args(_fromnxfunction):
class _fromnxfunction_allargs(_fromnxfunction):
def flatten_inplace(seq):
def apply_along_axis(func1d, axis, arr, *args, **kwargs):
def apply_over_axes(func, a, axes):
def average(a, axis=None, weights=None, returned=False, *,
def median(a, axis=None, out=None, overwrite_input=False, keepdims=False):
def _median(a, axis=None, out=None, overwrite_input=False):
def compress_nd(x, axis=None):
def compress_rowcols(x, axis=None):
def compress_rows(a):
def compress_cols(a):
def mask_rowcols(a, axis=None):
def mask_rows(a, axis=np._NoValue):
def mask_cols(a, axis=np._NoValue):
def ediff1d(arr, to_end=None, to_begin=None):
def unique(ar1, return_index=False, return_inverse=False):
def intersect1d(ar1, ar2, assume_unique=False):
def setxor1d(ar1, ar2, assume_unique=False):
def in1d(ar1, ar2, assume_unique=False, invert=False):
def isin(element, test_elements, assume_unique=False, invert=False):
def union1d(ar1, ar2):
def setdiff1d(ar1, ar2, assume_unique=False):
def _covhelper(x, y=None, rowvar=True, allow_masked=True):
def cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None):
def corrcoef(x, y=None, rowvar=True, bias=np._NoValue, allow_masked=True,
class MAxisConcatenator(AxisConcatenator):
class mr_class(MAxisConcatenator):
def ndenumerate(a, compressed=True):
def flatnotmasked_edges(a):
def notmasked_edges(a, axis=None):
def flatnotmasked_contiguous(a):
def notmasked_contiguous(a, axis=None):
def _ezclump(mask):
def clump_unmasked(a):
def clump_masked(a):
def vander(x, n=None):
def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\mrecords.py
-----------------------------
> """:mod:`numpy.ma..mrecords`
  
  Defines the equivalent of :class:`numpy.recarrays` for masked arrays,
  where fields can be accessed as attributes.
def _checknames(descr, names=None):
def _get_fieldmask(self):
class MaskedRecords(ma.MaskedArray):
def _mrreconstruct(subtype, baseclass, baseshape, basetype,):
def fromarrays(arraylist, dtype=None, shape=None, formats=None,
def fromrecords(reclist, dtype=None, shape=None, formats=None, names=None,
def _guessvartypes(arr):
def openfile(fname):
def fromtextfile(fname, delimiter=None, commentchar='#', missingchar='',
def addfield(mrecord, newfield, newfieldname=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\testutils.py
-----------------------------
> """Miscellaneous functions for testing masked arrays and subclasses
  
  :author: Pierre Gerard-Marchant
  :contact: pierregm_at_uga_dot_edu
def approx(a, b, fill_value=True, rtol=1e-5, atol=1e-8):
def almost(a, b, decimal=6, fill_value=True):
def _assert_equal_on_sequences(actual, desired, err_msg=''):
def assert_equal_records(a, b):
def assert_equal(actual, desired, err_msg=''):
def fail_if_equal(actual, desired, err_msg='',):
def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True):
def assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='',
def assert_array_equal(x, y, err_msg='', verbose=True):
def fail_if_array_equal(x, y, err_msg='', verbose=True):
def assert_array_approx_equal(x, y, decimal=6, err_msg='', verbose=True):
def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True):
def assert_array_less(x, y, err_msg='', verbose=True):
def assert_mask_equal(m1, m2, err_msg=''):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\ma\__init__.py
-----------------------------
> """
  =============
  Masked Arrays
  =============

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_defmatrix.py
-----------------------------
>         """Test whether matrix.sum(axis=1) preserves orientation.
          Fails in NumPy <= 0.9.6.2127.
class TestCtor:
class TestProperties:
class TestCasting:
class TestAlgebra:
class TestMatrixReturn:
class TestIndexing:
class TestNewScalarIndexing:
class TestPower:
class TestShape:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_interaction.py
-----------------------------
> """Tests of interaction of matrix with other parts of numpy.
  
  Note that tests with MaskedArray and linalg are done in separate files.
def test_fancy_indexing():
def test_polynomial_mapdomain():
def test_sort_matrix_none():
def test_partition_matrix_none():
def test_dot_scalar_and_matrix_of_objects():
def test_inner_scalar_and_matrix():
def test_inner_scalar_and_matrix_of_objects():
def test_iter_allocate_output_subtype():
def like_function():
def test_array_astype():
def test_stack():
def test_object_scalar_multiply():
def test_nanfunctions_matrices():
def test_nanfunctions_matrices_general():
def test_average_matrix():
def test_dot_matrix():
def test_ediff1d_matrix():
def test_apply_along_axis_matrix():
def test_kron_matrix():
class TestConcatenatorMatrix:
def test_array_equal_error_message_matrix():
def test_array_almost_equal_matrix():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_masked_matrix.py
-----------------------------
class MMatrix(MaskedArray, np.matrix,):
class TestMaskedMatrix:
class TestSubclassing:
class TestConcatenator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_matrix_linalg.py
-----------------------------
> """ Test functions for linalg module using the matrix class."""
  import numpy as np
  from numpy.linalg.tests.test_linalg import (
      CondCases,
class MatrixTestCase(LinalgTestCase):
class TestSolveMatrix(SolveCases, MatrixTestCase):
class TestInvMatrix(InvCases, MatrixTestCase):
class TestEigvalsMatrix(EigvalsCases, MatrixTestCase):
class TestEigMatrix(EigCases, MatrixTestCase):
class TestSVDMatrix(SVDCases, MatrixTestCase):
class TestCondMatrix(CondCases, MatrixTestCase):
class TestPinvMatrix(PinvCases, MatrixTestCase):
class TestDetMatrix(DetCases, MatrixTestCase):
class TestLstsqMatrix(LstsqCases, MatrixTestCase):
class _TestNorm2DMatrix(_TestNorm2D):
class TestNormDoubleMatrix(_TestNorm2DMatrix, _TestNormDoubleBase):
class TestNormSingleMatrix(_TestNorm2DMatrix, _TestNormSingleBase):
class TestNormInt64Matrix(_TestNorm2DMatrix, _TestNormInt64Base):
class TestQRMatrix(_TestQR):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_multiarray.py
-----------------------------
class TestView:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_numeric.py
-----------------------------
class TestDot:
def test_diagonal():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\test_regression.py
-----------------------------
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\defmatrix.py
-----------------------------
>     """
      Interpret the input as a matrix.
  
      Unlike `matrix`, `asmatrix` does not make a copy if the input is already
def _convert_from_string(data):
def asmatrix(data, dtype=None):
class matrix(N.ndarray):
def _from_string(str, gdict, ldict):
def bmat(obj, ldict=None, gdict=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matrixlib\__init__.py
-----------------------------
> """Sub-package containing the matrix class and related functions.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_chebyshev.py
-----------------------------
> """Tests for chebyshev module.
  
def trim(x):
class TestPrivate:
class TestConstants:
class TestArithmetic:
class TestEvaluation:
class TestIntegral:
class TestDerivative:
class TestVander:
class TestFitting:
class TestInterpolate:
class TestCompanion:
class TestGauss:
class TestMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_classes.py
-----------------------------
> """Test inter-conversion of different polynomial classes.
  
  This tests the convert and cast methods of all the polynomial classes.
  
def Poly(request):
def assert_poly_almost_equal(p1, p2, msg=""):
def test_conversion(Poly1, Poly2):
def test_cast(Poly1, Poly2):
def test_identity(Poly):
def test_basis(Poly):
def test_fromroots(Poly):
def test_bad_conditioned_fit(Poly):
def test_fit(Poly):
def test_equal(Poly):
def test_not_equal(Poly):
def test_add(Poly):
def test_sub(Poly):
def test_mul(Poly):
def test_floordiv(Poly):
def test_truediv(Poly):
def test_mod(Poly):
def test_divmod(Poly):
def test_roots(Poly):
def test_degree(Poly):
def test_copy(Poly):
def test_integ(Poly):
def test_deriv(Poly):
def test_linspace(Poly):
def test_pow(Poly):
def test_call(Poly):
def test_call_with_list(Poly):
def test_cutdeg(Poly):
def test_truncate(Poly):
def test_trim(Poly):
def test_mapparms(Poly):
def test_ufunc_override(Poly):
class TestInterpolate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_hermite.py
-----------------------------
> """Tests for hermite module.
  
def trim(x):
class TestConstants:
class TestArithmetic:
class TestEvaluation:
class TestIntegral:
class TestDerivative:
class TestVander:
class TestFitting:
class TestCompanion:
class TestGauss:
class TestMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_hermite_e.py
-----------------------------
> """Tests for hermite_e module.
  
def trim(x):
class TestConstants:
class TestArithmetic:
class TestEvaluation:
class TestIntegral:
class TestDerivative:
class TestVander:
class TestFitting:
class TestCompanion:
class TestGauss:
class TestMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_laguerre.py
-----------------------------
> """Tests for laguerre module.
  
def trim(x):
class TestConstants:
class TestArithmetic:
class TestEvaluation:
class TestIntegral:
class TestDerivative:
class TestVander:
class TestFitting:
class TestCompanion:
class TestGauss:
class TestMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_legendre.py
-----------------------------
> """Tests for legendre module.
  
def trim(x):
class TestConstants:
class TestArithmetic:
class TestEvaluation:
class TestIntegral:
class TestDerivative:
class TestVander:
class TestFitting:
class TestCompanion:
class TestGauss:
class TestMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_polynomial.py
-----------------------------
> """Tests for polynomial module.
  
def trim(x):
class TestConstants:
class TestArithmetic:
class TestFraction:
class TestEvaluation:
class TestIntegral:
class TestDerivative:
class TestVander:
class TestCompanion:
class TestMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_polyutils.py
-----------------------------
> """Tests for polyutils module.
  
class TestMisc:
class TestDomain:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_printing.py
-----------------------------
>     """Test both numpy and built-in complex."""
      coefs = [0 + 1j, 1 + 1j, -2 + 2j, 3 + 0j]
      # numpy complex
      p1 = poly.Polynomial(coefs)
class TestStrUnicodeSuperSubscripts:
class TestStrAscii:
class TestLinebreaking:
def test_set_default_printoptions():
def test_complex_coefficients():
def test_numeric_object_coefficients(coefs, tgt):
def test_nonnumeric_object_coefficients(coefs, tgt):
class TestFormat:
def test_symbol(poly, tgt):
class TestRepr:
class TestLatexRepr:
class TestPrintOptions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\test_symbol.py
-----------------------------
> """
  Tests related to the ``symbol`` attribute of the ABCPolyBase class.
class TestInit:
class TestUnaryOperators:
class TestBinaryOperatorsSameSymbol:
class TestBinaryOperatorsDifferentSymbol:
class TestEquality:
class TestExtraMethods:
def test_composition():
def test_fit():
def test_froomroots():
def test_identity():
def test_basis():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\chebyshev.py
-----------------------------
> """
  ====================================================
  Chebyshev Series (:mod:`numpy.polynomial.chebyshev`)
  ====================================================
def _cseries_to_zseries(c):
def _zseries_to_cseries(zs):
def _zseries_mul(z1, z2):
def _zseries_div(z1, z2):
def _zseries_der(zs):
def _zseries_int(zs):
def poly2cheb(pol):
def cheb2poly(c):
def chebline(off, scl):
def chebfromroots(roots):
def chebadd(c1, c2):
def chebsub(c1, c2):
def chebmulx(c):
def chebmul(c1, c2):
def chebdiv(c1, c2):
def chebpow(c, pow, maxpower=16):
def chebder(c, m=1, scl=1, axis=0):
def chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
def chebval(x, c, tensor=True):
def chebval2d(x, y, c):
def chebgrid2d(x, y, c):
def chebval3d(x, y, z, c):
def chebgrid3d(x, y, z, c):
def chebvander(x, deg):
def chebvander2d(x, y, deg):
def chebvander3d(x, y, z, deg):
def chebfit(x, y, deg, rcond=None, full=False, w=None):
def chebcompanion(c):
def chebroots(c):
def chebinterpolate(func, deg, args=()):
def chebgauss(deg):
def chebweight(x):
def chebpts1(npts):
def chebpts2(npts):
class Chebyshev(ABCPolyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\hermite.py
-----------------------------
> """
  ==============================================================
  Hermite Series, "Physicists" (:mod:`numpy.polynomial.hermite`)
  ==============================================================
def poly2herm(pol):
def herm2poly(c):
def hermline(off, scl):
def hermfromroots(roots):
def hermadd(c1, c2):
def hermsub(c1, c2):
def hermmulx(c):
def hermmul(c1, c2):
def hermdiv(c1, c2):
def hermpow(c, pow, maxpower=16):
def hermder(c, m=1, scl=1, axis=0):
def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
def hermval(x, c, tensor=True):
def hermval2d(x, y, c):
def hermgrid2d(x, y, c):
def hermval3d(x, y, z, c):
def hermgrid3d(x, y, z, c):
def hermvander(x, deg):
def hermvander2d(x, y, deg):
def hermvander3d(x, y, z, deg):
def hermfit(x, y, deg, rcond=None, full=False, w=None):
def hermcompanion(c):
def hermroots(c):
def _normed_hermite_n(x, n):
def hermgauss(deg):
def hermweight(x):
class Hermite(ABCPolyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\hermite_e.py
-----------------------------
> """
  ===================================================================
  HermiteE Series, "Probabilists" (:mod:`numpy.polynomial.hermite_e`)
  ===================================================================
def poly2herme(pol):
def herme2poly(c):
def hermeline(off, scl):
def hermefromroots(roots):
def hermeadd(c1, c2):
def hermesub(c1, c2):
def hermemulx(c):
def hermemul(c1, c2):
def hermediv(c1, c2):
def hermepow(c, pow, maxpower=16):
def hermeder(c, m=1, scl=1, axis=0):
def hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
def hermeval(x, c, tensor=True):
def hermeval2d(x, y, c):
def hermegrid2d(x, y, c):
def hermeval3d(x, y, z, c):
def hermegrid3d(x, y, z, c):
def hermevander(x, deg):
def hermevander2d(x, y, deg):
def hermevander3d(x, y, z, deg):
def hermefit(x, y, deg, rcond=None, full=False, w=None):
def hermecompanion(c):
def hermeroots(c):
def _normed_hermite_e_n(x, n):
def hermegauss(deg):
def hermeweight(x):
class HermiteE(ABCPolyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\laguerre.py
-----------------------------
> """
  ==================================================
  Laguerre Series (:mod:`numpy.polynomial.laguerre`)
  ==================================================
def poly2lag(pol):
def lag2poly(c):
def lagline(off, scl):
def lagfromroots(roots):
def lagadd(c1, c2):
def lagsub(c1, c2):
def lagmulx(c):
def lagmul(c1, c2):
def lagdiv(c1, c2):
def lagpow(c, pow, maxpower=16):
def lagder(c, m=1, scl=1, axis=0):
def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
def lagval(x, c, tensor=True):
def lagval2d(x, y, c):
def laggrid2d(x, y, c):
def lagval3d(x, y, z, c):
def laggrid3d(x, y, z, c):
def lagvander(x, deg):
def lagvander2d(x, y, deg):
def lagvander3d(x, y, z, deg):
def lagfit(x, y, deg, rcond=None, full=False, w=None):
def lagcompanion(c):
def lagroots(c):
def laggauss(deg):
def lagweight(x):
class Laguerre(ABCPolyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\legendre.py
-----------------------------
> """
  ==================================================
  Legendre Series (:mod:`numpy.polynomial.legendre`)
  ==================================================
def poly2leg(pol):
def leg2poly(c):
def legline(off, scl):
def legfromroots(roots):
def legadd(c1, c2):
def legsub(c1, c2):
def legmulx(c):
def legmul(c1, c2):
def legdiv(c1, c2):
def legpow(c, pow, maxpower=16):
def legder(c, m=1, scl=1, axis=0):
def legint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
def legval(x, c, tensor=True):
def legval2d(x, y, c):
def leggrid2d(x, y, c):
def legval3d(x, y, z, c):
def leggrid3d(x, y, z, c):
def legvander(x, deg):
def legvander2d(x, y, deg):
def legvander3d(x, y, z, deg):
def legfit(x, y, deg, rcond=None, full=False, w=None):
def legcompanion(c):
def legroots(c):
def leggauss(deg):
def legweight(x):
class Legendre(ABCPolyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\polynomial.py
-----------------------------
> """
  =================================================
  Power Series (:mod:`numpy.polynomial.polynomial`)
  =================================================
def polyline(off, scl):
def polyfromroots(roots):
def polyadd(c1, c2):
def polysub(c1, c2):
def polymulx(c):
def polymul(c1, c2):
def polydiv(c1, c2):
def polypow(c, pow, maxpower=None):
def polyder(c, m=1, scl=1, axis=0):
def polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
def polyval(x, c, tensor=True):
def polyvalfromroots(x, r, tensor=True):
def polyval2d(x, y, c):
def polygrid2d(x, y, c):
def polyval3d(x, y, z, c):
def polygrid3d(x, y, z, c):
def polyvander(x, deg):
def polyvander2d(x, y, deg):
def polyvander3d(x, y, z, deg):
def polyfit(x, y, deg, rcond=None, full=False, w=None):
def polycompanion(c):
def polyroots(c):
class Polynomial(ABCPolyBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\polyutils.py
-----------------------------
> """
  Utility classes and functions for the polynomial modules.
  
  This module provides: error and warning objects; a polynomial base class;
def trimseq(seq):
def as_series(alist, trim=True):
def trimcoef(c, tol=0):
def getdomain(x):
def mapparms(old, new):
def mapdomain(x, old, new):
def _nth_slice(i, ndim):
def _vander_nd(vander_fs, points, degrees):
def _vander_nd_flat(vander_fs, points, degrees):
def _fromroots(line_f, mul_f, roots):
def _valnd(val_f, c, *args):
def _gridnd(val_f, c, *args):
def _div(mul_f, c1, c2):
def _add(c1, c2):
def _sub(c1, c2):
def _fit(vander_f, x, y, deg, rcond=None, full=False, w=None):
def _pow(mul_f, c, pow, maxpower):
def _as_int(x, desc):
def format_float(x, parens=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\_polybase.py
-----------------------------
> """
  Abstract base class for the various polynomial Classes.
  
  The ABCPolyBase class provides the methods needed to implement the common API
class ABCPolyBase(abc.ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\polynomial\__init__.py
-----------------------------
> """
  A sub-package for efficiently dealing with polynomials.
  
  Within the documentation for this sub-package, a "finite power series,"
def set_default_printstyle(style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\data\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_direct.py
-----------------------------
>     """ Test spawning new generators and bit_generators directly.
def assert_state_equal(actual, target):
def uint32_to_float32(u):
def uniform32_from_uint64(x):
def uniform32_from_uint53(x):
def uniform32_from_uint32(x):
def uniform32_from_uint(x, bits):
def uniform_from_uint(x, bits):
def uniform_from_uint64(x):
def uniform_from_uint32(x):
def uniform_from_dsfmt(x):
def gauss_from_uint(x, n, bits):
def test_seedsequence():
def test_generator_spawning():
def test_non_spawnable():
class Base:
class TestPhilox(Base):
class TestPCG64(Base):
class TestPCG64DXSM(Base):
class TestMT19937(Base):
class TestSFC64(Base):
class TestDefaultRNG:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_extending.py
-----------------------------
def test_cython(tmp_path):
def test_numba():
def test_cffi():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_generator_mt19937.py
-----------------------------
def endpoint(request):
class TestSeed:
class TestBinomial:
class TestMultinomial:
class TestMultivariateHypergeometric:
class TestSetState:
class TestIntegers:
class TestRandomDist:
class TestBroadcast:
class TestThread:
class TestSingleEltArrayInput:
def test_jumped(config):
def test_broadcast_size_error():
def test_broadcast_size_scalar():
def test_ragged_shuffle():
def test_single_arg_integer_exception(high, endpoint):
def test_c_contig_req_out(dtype):
def test_contig_req_out(dist, order, dtype):
def test_generator_ctor_old_style_pickle():
def test_pickle_preserves_seed_sequence():
def test_legacy_pickle(version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_generator_mt19937_regressions.py
-----------------------------
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_random.py
-----------------------------
class TestSeed:
class TestBinomial:
class TestMultinomial:
class TestSetState:
class TestRandint:
class TestRandomDist:
class TestBroadcast:
class TestThread:
class TestSingleEltArrayInput:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_randomstate.py
-----------------------------
>     """Ensures that the singleton bitgen is restored after a test"""
      orig_bitgen = np.random.get_bit_generator()
      yield
      np.random.set_bit_generator(orig_bitgen)
def int_func(request):
def restore_singleton_bitgen():
def assert_mt19937_state_equal(a, b):
class TestSeed:
class TestBinomial:
class TestMultinomial:
class TestSetState:
class TestRandint:
class TestRandomDist:
class TestBroadcast:
class TestThread:
class TestSingleEltArrayInput:
def test_integer_dtype(int_func):
def test_integer_repeat(int_func):
def test_broadcast_size_error():
def test_randomstate_ctor_old_style_pickle():
def test_hot_swap(restore_singleton_bitgen):
def test_seed_alt_bit_gen(restore_singleton_bitgen):
def test_state_error_alt_bit_gen(restore_singleton_bitgen):
def test_swap_worked(restore_singleton_bitgen):
def test_swapped_singleton_against_direct(restore_singleton_bitgen):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_randomstate_regression.py
-----------------------------
class TestRegression:
def test_multinomial_empty():
def test_multinomial_1d_pval():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_regression.py
-----------------------------
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_seed_sequence.py
-----------------------------
>     """ Check that SeedSequence generates data the same as the C++ reference.
  
      https://gist.github.com/imneme/540829265469e673d045
def test_reference_data():
def test_zero_padding():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\test_smoke.py
-----------------------------
def dtype(request):
def params_0(f):
def params_1(f, bounded=False):
def comp_state(state1, state2):
def warmup(rg, n=None):
class RNG:
class TestMT19937(RNG):
class TestPhilox(RNG):
class TestSFC64(RNG):
class TestPCG64(RNG):
class TestPCG64DXSM(RNG):
class TestDefaultRNG(RNG):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\_examples\cffi\extending.py
-----------------------------
> """
  Use cffi to access any of the underlying C functions from distributions.h

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\_examples\cffi\parse.py
-----------------------------
>     """
      Parse distributions.h located in inc_dir for CFFI, filling in the ffi.cdef
  
      Read the function declarations without the "#define ..." macros that will
def parse_distributions_h(ffi, inc_dir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\_examples\numba\extending.py
-----------------------------
def normals(n, state):
def numbacall():
def numpycall():
def bounded_uint(lb, ub, state):
def bounded_uints(lb, ub, n, state):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\_examples\numba\extending_distributions.py
-----------------------------
> r"""
  Building the required library in this example requires a source distribution
  of NumPy or clone of the NumPy git repository since distributions.c is not
  included in binary distributions.
def normals(n, bit_generator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\_pickle.py
-----------------------------
>     """
      Pickling helper function that returns a bit generator object
  
      Parameters
def __bit_generator_ctor(bit_generator: str | type[BitGenerator] = 'MT19937'):
def __generator_ctor(bit_generator_name="MT19937",
def __randomstate_ctor(bit_generator_name="MT19937",

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\random\__init__.py
-----------------------------
> """
  ========================
  Random Number Generation
  ========================
def __RandomState_ctor():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\rec\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\strings\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\tests\test_utils.py
-----------------------------
>         """Test two equal array of rank 1 are found equal."""
          a = np.array([1, 2])
          b = np.array([1, 2])
  
class _GenericTest:
class TestArrayEqual(_GenericTest):
class TestBuildErrorMessage:
class TestEqual(TestArrayEqual):
class TestArrayAlmostEqual(_GenericTest):
class TestAlmostEqual(_GenericTest):
class TestApproxEqual:
class TestArrayAssertLess:
class TestWarns:
class TestAssertAllclose:
class TestArrayAlmostEqualNulp:
class TestULP:
class TestStringEqual:
def assert_warn_len_equal(mod, n_in_context):
def test_warn_len_equal_call_scenarios():
def _get_fresh_mod():
def test_clear_and_catch_warnings():
def test_suppress_warnings_module():
def test_suppress_warnings_type():
def test_suppress_warnings_decorate_no_record():
def test_suppress_warnings_record():
def test_suppress_warnings_forwarding():
def test_tempdir():
def test_temppath():
class my_cacw(clear_and_catch_warnings):
def test_clear_and_catch_warnings_inherit():
class TestAssertNoGcCycles:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\_private\extbuild.py
-----------------------------
> """
  Build a c-extension module on-the-fly in tests.
  See build_and_import_extensions for usage hints
  
def build_and_import_extension(
def compile_extension_module(
def _convert_str_to_file(source, dirname):
def _make_methods(functions, modname):
def _make_source(name, init, body):
def _c_compile(cfile, outputfilename, include_dirs, libraries,
def build(cfile, outputfilename, compile_extra, link_extra,
def get_so_suffix():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\_private\utils.py
-----------------------------
> """
  Utility function to facilitate testing.
  
class KnownFailureException(Exception):
def assert_(val, msg=''):
def build_err_msg(arrays, err_msg, header='Items are not equal:',
def assert_equal(actual, desired, err_msg='', verbose=True, *, strict=False):
def print_assert_equal(test_string, actual, desired):
def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True):
def assert_approx_equal(actual, desired, significant=7, err_msg='',
def assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='',
def assert_array_equal(actual, desired, err_msg='', verbose=True, *,
def assert_array_almost_equal(actual, desired, decimal=6, err_msg='',
def assert_array_less(x, y, err_msg='', verbose=True, *, strict=False):
def runstring(astr, dict):
def assert_string_equal(actual, desired):
def rundocs(filename=None, raise_on_error=True):
def check_support_sve(__cache=[]):
class _Dummy(unittest.TestCase):
def assert_raises(*args, **kwargs):
def assert_raises_regex(exception_class, expected_regexp, *args, **kwargs):
def decorate_methods(cls, decorator, testmatch=None):
def measure(code_str, times=1, label=None):
def _assert_valid_refcount(op):
def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=True,
def assert_array_almost_equal_nulp(x, y, nulp=1):
def assert_array_max_ulp(a, b, maxulp=1, dtype=None):
def nulp_diff(x, y, dtype=None):
def _integer_repr(x, vdt, comp):
def integer_repr(x):
def _assert_warns_context(warning_class, name=None):
def assert_warns(warning_class, *args, **kwargs):
def _assert_no_warnings_context(name=None):
def assert_no_warnings(*args, **kwargs):
def _gen_alignment_data(dtype=float32, type='binary', max_size=24):
class IgnoreException(Exception):
def tempdir(*args, **kwargs):
def temppath(*args, **kwargs):
class clear_and_catch_warnings(warnings.catch_warnings):
class suppress_warnings:
def _assert_no_gc_cycles_context(name=None):
def assert_no_gc_cycles(*args, **kwargs):
def break_cycles():
def requires_memory(free_bytes):
def check_free_memory(free_bytes):
def _parse_size(size_str):
def _get_mem_available():
def _no_tracing(func):
def _get_glibc_version():
def run_threaded(func, max_workers=8, pass_count=False,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\_private\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\overrides.py
-----------------------------
> """Tools for testing implementations of __array_function__ and ufunc overrides
  
  
def get_overridable_numpy_ufuncs():
def allows_array_ufunc_override(func):
def get_overridable_numpy_array_functions():
def allows_array_function_override(func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\print_coercion_tables.py
-----------------------------
> """Prints type-coercion tables for the built-in NumPy types
  
class GenericObject:
def print_cancast_table(ntypes):
def print_coercion_table(ntypes, inputfirstvalue, inputsecondvalue, firstarray,
def print_new_cast_table(*, can_cast=True, legacy=False, flags=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\testing\__init__.py
-----------------------------
> """Common test support for all numpy test scripts.
  
  This single module should provide all the common functionality for numpy tests
  in a single location, so that test scripts can just import it and work right

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_configtool.py
-----------------------------
class TestNumpyConfig:
def test_pkg_config_entrypoint():
def test_pkg_config_config_exists():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_ctypeslib.py
-----------------------------
>         """ Test that arguments are coerced from arrays """
          c_forward_pointer.restype = ctypes.c_void_p
          c_forward_pointer.argtypes = (ndpointer(ndim=2),)
  
class TestLoadLibrary:
class TestNdpointer:
class TestNdpointerCFunc:
class TestAsArray:
class TestAsCtypesType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_lazyloading.py
-----------------------------
def test_lazy_load():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_matlib.py
-----------------------------
def test_empty():
def test_ones():
def test_zeros():
def test_identity():
def test_eye():
def test_rand():
def test_randn():
def test_repmat():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_numpy_config.py
-----------------------------
> """
  Check the numpy config is valid.
class TestNumPyConfigs:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_numpy_version.py
-----------------------------
> """
  Check the numpy version is valid.
  
  Note that a development version is marked by the presence of 'dev0' or '+'
def test_valid_numpy_version():
def test_short_version():
def test_version_module():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_public_api.py
-----------------------------
>     """Returns a mapping of all objects with the wrong __module__ attribute."""
      if module_name is None:
          module_name = module.__name__
      results = {}
def check_dir(module, module_name=None):
def test_numpy_namespace():
def test_import_lazy_import(name):
def test_dir_testing():
def test_numpy_linalg():
def test_numpy_fft():
def test_NPY_NO_EXPORT():
def is_unexpected(name):
def test_all_modules_are_expected():
def test_all_modules_are_expected_2():
def test_api_importable():
def test_array_api_entry_point():
def test_main_namespace_all_dir_coherence():
def test_core_shims_coherence():
def test_functions_single_location():
def test___module___attribute():
def _check_correct_qualname_and_module(obj) -> bool:
def test___qualname___and___module___attribute():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_reloading.py
-----------------------------
>     """At the time of writing this, it is *not* truly supported, but
      apparently enough users rely on it, for it to be an annoying change
      when it started failing previously.
def test_numpy_reloading():
def test_novalue():
def test_full_reimport():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_scripts.py
-----------------------------
> """ Test scripts
  
  Test that we can run executable scripts that have been installed with numpy.
def find_f2py_commands():
def test_f2py(f2py_cmd):
def test_pep338():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test_warnings.py
-----------------------------
> """
  Tests which scan for certain occurrences in the code, they may not find
  all of these occurrences but should catch almost all.
class ParseCall(ast.NodeVisitor):
class FindFuncs(ast.NodeVisitor):
def test_warning_calls():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\test__all__.py
-----------------------------
def test_no_duplicates_in_np__all__():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\arithmetic.py
-----------------------------
class Object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\arrayprint.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\arrayterator.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\array_constructors.py
-----------------------------
class Index:
class SubClass(npt.NDArray[np.float64]):
def func(i: int, j: int, **kwargs: Any) -> SubClass:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\array_like.py
-----------------------------
class A:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\bitwise_ops.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\comparisons.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\dtype.py
-----------------------------
class Test:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\einsumfunc.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\flatiter.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\fromnumeric.py
-----------------------------
> """Tests for :mod:`numpy._core.fromnumeric`."""
  
  import numpy as np
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\index_tricks.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\lib_user_array.py
-----------------------------
> """Based on the `if __name__ == "__main__"` test code in `lib/_user_array_impl.py`."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\lib_utils.py
-----------------------------
def func(a: int) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\lib_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\literal.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ma.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\mod.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\modules.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\multiarray.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ndarray_conversion.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ndarray_misc.py
-----------------------------
> """
  Tests for miscellaneous (non-magic) ``np.ndarray``/``np.generic`` methods.
  
  More extensive tests are performed for the methods'
class SubClass(npt.NDArray[np.float64]): ...
class IntSubClass(npt.NDArray[np.intp]): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ndarray_shape_manipulation.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\nditer.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\numeric.py
-----------------------------
> """
  Tests for :mod:`numpy._core.numeric`.
  
  Does not include tests which fall under ``array_constructors``.
class SubClass(npt.NDArray[np.float64]): ...

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\numerictypes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\random.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\recfunctions.py
-----------------------------
> """These tests are based on the doctests from `numpy/lib/recfunctions.py`."""
  
  from typing import Any, assert_type
  
def test_recursive_fill_fields() -> None:
def test_get_names() -> None:
def test_get_names_flat() -> None:
def test_flatten_descr() -> None:
def test_get_fieldstructure() -> None:
def test_merge_arrays() -> None:
def test_drop_fields() -> None:
def test_rename_fields() -> None:
def test_repack_fields() -> None:
def test_structured_to_unstructured() -> None:
def unstructured_to_structured() -> None:
def test_apply_along_fields() -> None:
def test_assign_fields_by_name() -> None:
def test_require_fields() -> None:
def test_stack_arrays() -> None:
def test_find_duplicates() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\scalars.py
-----------------------------
class D:
class C:
class B:
class A:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\shape.py
-----------------------------
class XYGrid(NamedTuple):
def accepts_2d(a: np.ndarray[tuple[int, int], Any]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\simple.py
-----------------------------
> """Simple expression that should pass with mypy."""
  import operator
  
  import numpy as np
def ndarray_func(x: npt.NDArray[np.float64]) -> npt.NDArray[np.float64]:
def iterable_func(x: Iterable[object]) -> Iterable[object]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\simple_py3.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ufunclike.py
-----------------------------
class Object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ufuncs.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\ufunc_config.py
-----------------------------
> """Typing tests for `numpy._core._ufunc_config`."""
  
  import numpy as np
  
def func1(a: str, b: int) -> None:
def func2(a: str, b: int, c: float = 1.0) -> None:
def func3(a: str, b: int) -> int:
class Write1:
class Write2:
class Write3:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\data\pass\warnings_and_errors.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\test_isfile.py
-----------------------------
>         """Test if all ``.pyi`` files are properly installed."""
          for file in FILES:
              assert_(os.path.isfile(file))
class TestIsFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\test_runtime.py
-----------------------------
> """Test the runtime usage of `numpy.typing`."""
  
  from typing import (
      Any,
class TypeTup(NamedTuple):
def test_get_args(name: type, tup: TypeTup) -> None:
def test_get_origin(name: type, tup: TypeTup) -> None:
def test_get_type_hints(name: type, tup: TypeTup) -> None:
def test_get_type_hints_str(name: type, tup: TypeTup) -> None:
def test_keys() -> None:
class TestRuntimeProtocol:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\test_typing.py
-----------------------------
>     """Split at the first occurrence of the ``:`` character.
  
      Windows drive-letters (*e.g.* ``C:``) are ignored herein.
def _key_func(key: str) -> str:
def _strip_filename(msg: str) -> tuple[int, str]:
def strip_func(match: re.Match[str]) -> str:
def run_mypy() -> None:
def get_test_cases(*directories: str) -> "Iterator[ParameterSet]":
def test_pass(path) -> None:
def test_reveal(path: str) -> None:
def test_code_runs(path: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\mypy_plugin.py
-----------------------------
> """A mypy_ plugin for managing a number of platform-specific annotations.
  Its functionality can be split into three distinct parts:
  
  * Assigning the (platform-dependent) precisions of certain `~numpy.number`
def _get_precision_dict() -> dict[str, str]:
def _get_extended_precision_list() -> list[str]:
def _get_c_intp_name() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\typing\__init__.py
-----------------------------
> """
  ============================
  Typing (:mod:`numpy.typing`)
  ============================
def __dir__() -> list[str]:
def __getattr__(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\examples\cython\setup.py
-----------------------------
> """
  Provide python-space access to the functions exposed in numpy/__init__.pxd
  for testing.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\examples\limited_api\setup.py
-----------------------------
> """
  Build an example package using the limited Python C API.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_abc.py
-----------------------------
class TestABC:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_api.py
-----------------------------
def test_array_array():
def test_array_impossible_casts(array):
def test_array_astype():
def test_array_astype_to_string_discovery_empty(dt):
def test_array_astype_to_void(dt):
def test_object_array_astype_to_void():
def test_array_astype_warning(t):
def test_string_to_boolean_cast(dtype, out_dtype):
def test_string_to_complex_cast(str_type, scalar_type):
def test_none_to_nan_cast(dtype):
def test_copyto_fromscalar():
def test_copyto():
def test_copyto_cast_safety():
def test_copyto_permut():
def test_copy_order():
def test_contiguous_flags():
def test_broadcast_arrays():
def test_full_from_list(shape, fill_value, expected_output):
def test_astype_copyflag():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_argparse.py
-----------------------------
> """
  Tests for the private NumPy argument parsing functionality.
  They mainly exists to ensure good test coverage without having to try the
  weirder cases on actual numpy functions but test them in one place.
def test_thread_safe_argparse_cache():
def test_invalid_integers():
def test_missing_arguments():
def test_too_many_positional():
def test_multiple_values():
def test_string_fallbacks():
def test_too_many_arguments_method_forwarding():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_arraymethod.py
-----------------------------
> """
  This file tests the generic aspects of ArrayMethod.  At the time of writing
  this is private API, but when added, public API may be added here.
class TestResolveDescriptors:
class TestSimpleStridedCall:
class TestClassGetItem:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_arrayobject.py
-----------------------------
def test_matrix_transpose_raises_error_for_1d():
def test_matrix_transpose_equals_transpose_2d():
def test_matrix_transpose_equals_swapaxes(shape):
class MyArr(np.ndarray):
class MyArrNoWrap(np.ndarray):
def test_array_wrap(subclass_self, subclass_arr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_arrayprint.py
-----------------------------
>         """Basic test of array2string."""
          a = np.arange(3)
          assert_(np.array2string(a) == '[0 1 2]')
          assert_(np.array2string(a, max_line_width=4, legacy='1.13') == '[0 1\n 2]')
class TestArrayRepr:
class TestComplexArray:
class TestArray2String:
class TestPrintOptions:
def test_unicode_object_array():
class TestContextManager:
def test_scalar_repr_numbers(dtype, value):
def test_scalar_repr_special(scalar, legacy_repr, representation):
def test_scalar_void_float_str():
def test_printoptions_asyncio_safe():
def test_multithreaded_array_printing():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_array_api_info.py
-----------------------------
def test_capabilities():
def test_default_device():
def test_default_dtypes():
def test_dtypes_all():
def test_dtypes_kind(kind):
def test_dtypes_tuple():
def test_dtypes_invalid_kind():
def test_dtypes_invalid_device():
def test_devices():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_array_coercion.py
-----------------------------
> """
  Tests for array coercion, mainly through testing `np.array` results directly.
  Note that other such tests exist, e.g., in `test_api.py` and many corner-cases
  are tested (sometimes indirectly) elsewhere.
def arraylikes():
def scalar_instances(times=True, extended_precision=True, user_dtype=True):
def is_parametric_dtype(dtype):
class TestStringDiscovery:
class TestScalarDiscovery:
class TestTimeScalars:
class TestNested:
class TestBadSequences:
class TestArrayLikes:
class TestAsArray:
class TestSpecialAttributeLookupFailure:
def test_subarray_from_array_construction():
def test_empty_string():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_array_interface.py
-----------------------------
>     """ Some codes to generate data and manage temporary buffers use when
      sharing with numpy via the array interface protocol.
def get_module(tmp_path):
def test_cstruct(get_module):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_casting_floatingpoint_errors.py
-----------------------------
>     """
      Generate value+dtype pairs that generate floating point errors during
      casts.  The invalid casts to integers will generate "invalid" value
      warnings, the float casts all generate "overflow".
def values_and_dtypes():
def check_operations(dtype, value):
def test_floatingpoint_errors_casting(dtype, value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_casting_unittests.py
-----------------------------
> """
  The tests exercise the casting machinery in a more low-level manner.
  The reason is mostly to test a new implementation of the casting machinery.
  
def simple_dtype_instances():
def get_expected_stringlength(dtype):
class Casting(enum.IntEnum):
def _get_cancast_table():
class TestChanges:
class TestCasting:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_conversion_utils.py
-----------------------------
> """
  Tests for numpy/_core/src/multiarray/conversion_utils.c
class StringConverterTestCase:
class TestByteorderConverter(StringConverterTestCase):
class TestSortkindConverter(StringConverterTestCase):
class TestSelectkindConverter(StringConverterTestCase):
class TestSearchsideConverter(StringConverterTestCase):
class TestOrderConverter(StringConverterTestCase):
class TestClipmodeConverter(StringConverterTestCase):
class TestCastingConverter(StringConverterTestCase):
class TestIntpConverter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_cpu_dispatcher.py
-----------------------------
>     """
      Testing the utilities of the CPU dispatcher
def test_dispatcher():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_cpu_features.py
-----------------------------
> f"""
  ###########################################
  ### Extra debugging information
  ###########################################
def assert_features_equal(actual, desired, fname):
def _text_to_list(txt):
class AbstractTest:
class TestEnvPrivation:
def main():
class Test_X86_Features(AbstractTest):
class Test_POWER_Features(AbstractTest):
class Test_ZARCH_Features(AbstractTest):
class Test_ARM_Features(AbstractTest):
class Test_LOONGARCH_Features(AbstractTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_custom_dtypes.py
-----------------------------
>         """The addition method is special for the scaled float, because it
          includes the "cast" between different factors, thus cast-safety
          is influenced by the implementation.
class TestSFloat:
def test_type_pickle():
def test_is_numeric():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_cython.py
-----------------------------
>     """Check that the cython API can write to a vstring array."""
      import checks
  
      arr = np.array(['a', 'b', 'c'], dtype='T')
def install_temp(tmpdir_factory):
def test_is_timedelta64_object(install_temp):
def test_is_datetime64_object(install_temp):
def test_get_datetime64_value(install_temp):
def test_get_timedelta64_value(install_temp):
def test_get_datetime64_unit(install_temp):
def test_abstract_scalars(install_temp):
def test_default_int(install_temp):
def test_ravel_axis(install_temp):
def test_convert_datetime64_to_datetimestruct(install_temp):
class TestDatetimeStrings:
def test_multiiter_fields(install_temp, arrays):
def test_dtype_flags(install_temp):
def test_conv_intp(install_temp):
def test_npyiter_api(install_temp):
def test_fillwithbytes(install_temp):
def test_complex(install_temp):
def test_npystring_pack(install_temp):
def test_npystring_load(install_temp):
def test_npystring_multiple_allocators(install_temp):
def test_npystring_allocators_other_dtype(install_temp):
def test_npy_uintp_type_enum():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_datetime.py
-----------------------------
>         """
          Dates should have symmetric limits around the unix epoch at +/-np.int64
def _assert_equal_hash(v1, v2):
class TestDateTime:
class TestDateTimeData:
def test_comparisons_return_not_implemented():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_defchararray.py
-----------------------------
>     """Ticket #1276"""
  
      def setup_method(self):
          TestComparisons.setup_method(self)
class TestBasic:
class TestVecString:
class TestWhitespace:
class TestChar:
class TestComparisons:
class TestComparisonsMixed1(TestComparisons):
class TestComparisonsMixed2(TestComparisons):
class TestInformation:
class TestMethods:
class TestOperations:
class TestMethodsEmptyArray:
class TestMethodsScalarValues:
def test_empty_indexing():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_deprecations.py
-----------------------------
> """
  Tests related to deprecation warnings. Also a convenient place
  to document how deprecations should eventually be turned into errors.
  
class _DeprecationTestCase:
class _VisibleDeprecationTestCase(_DeprecationTestCase):
class TestTestDeprecated:
class TestBincount(_DeprecationTestCase):
class TestGeneratorSum(_DeprecationTestCase):
class BuiltInRoundComplexDType(_DeprecationTestCase):
class FlatteningConcatenateUnsafeCast(_DeprecationTestCase):
class TestCtypesGetter(_DeprecationTestCase):
class TestMachAr(_DeprecationTestCase):
class TestQuantileInterpolationDeprecation(_DeprecationTestCase):
class TestScalarConversion(_DeprecationTestCase):
class TestPyIntConversion(_DeprecationTestCase):
def test_future_scalar_attributes(name):
class TestRemovedGlobals:
class TestDeprecatedFinfo(_DeprecationTestCase):
class TestMathAlias(_DeprecationTestCase):
class TestLibImports(_DeprecationTestCase):
class TestDeprecatedDTypeAliases(_DeprecationTestCase):
class TestDeprecatedArrayWrap(_DeprecationTestCase):
class TestDeprecatedDTypeParenthesizedRepeatCount(_DeprecationTestCase):
class TestDeprecatedSaveFixImports(_DeprecationTestCase):
class TestAddNewdocUFunc(_DeprecationTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_dlpack.py
-----------------------------
def new_and_old_dlpack():
class TestDLPack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_dtype.py
-----------------------------
>         """Only test hash runs at all."""
          dt = np.dtype(t)
          hash(dt)
  
def assert_dtype_equal(a, b):
def assert_dtype_not_equal(a, b):
class TestBuiltin:
class TestRecord:
class TestSubarray:
def iter_struct_object_dtypes():
class TestStructuredObjectRefcounting:
class TestStructuredDtypeSparseFields:
class TestMonsterType:
class TestMetadata:
class TestString:
class TestDtypeAttributeDeletion:
class TestDtypeAttributes:
class TestDTypeMakeCanonical:
class TestPickling:
class TestPromotion:
def test_rational_dtype():
def test_dtypes_are_true():
def test_invalid_dtype_string():
def test_keyword_argument():
class TestFromDTypeAttribute:
class TestDTypeClasses:
class TestFromCTypes:
class TestUserDType:
class TestClassGetItem:
def test_result_type_integers_and_unitless_timedelta64():
def test_creating_dtype_with_dtype_class_errors():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_einsum.py
-----------------------------
>     """Most einsum operations are reductions and until NumPy 2.3 reductions
      never (or almost never?) used the `GROWINNER` mechanism to increase the
      inner loop size when no buffers are needed.
      Because einsum reductions work roughly:
class TestEinsum:
class TestEinsumPath:
def test_overlap():
def test_einsum_chunking_precision():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_errstate.py
-----------------------------
class TestErrstate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_extint128.py
-----------------------------
>     """
      Iterate over Cartesian product of *args, and if an exception is raised,
      add information of the current iterate.
def exc_iter(*args):
def test_safe_binop():
def test_to_128():
def test_to_64():
def test_mul_64_64():
def test_add_128():
def test_sub_128():
def test_neg_128():
def test_shl_128():
def test_shr_128():
def test_gt_128():
def test_divmod_128_64():
def test_floordiv_128_64():
def test_ceildiv_128_64():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_function_base.py
-----------------------------
>             """
              A generic object that supports the __array_interface__ and hence
              can in principle be converted to a numeric scalar, but is not
              otherwise recognized as numeric, but also happens to support
def _is_armhf():
class PhysicalQuantity(float):
class PhysicalQuantity2(ndarray):
class TestLogspace:
class TestGeomspace:
class TestLinspace:
class TestAdd_newdoc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_getlimits.py
-----------------------------
> """ Test functions for limits module.
  
class TestPythonFloat:
class TestHalf:
class TestSingle:
class TestDouble:
class TestLongdouble:
def assert_finfo_equal(f1, f2):
def assert_iinfo_equal(i1, i2):
class TestFinfo:
class TestIinfo:
class TestRepr:
def test_instances():
def assert_ma_equal(discovered, ma_like):
def test_known_types():
def test_subnormal_warning():
def test_plausible_finfo():
class TestRuntimeSubscriptable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_half.py
-----------------------------
>         """Checks that all 16-bit values survive conversion
def assert_raises_fpe(strmatch, callable, *args, **kwargs):
class TestHalf:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_hashtable.py
-----------------------------
def test_identity_hashtable(key_length, length):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_indexerrors.py
-----------------------------
class TestIndexErrors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_indexing.py
-----------------------------
>     """
      These tests use code to mimic the C-Code indexing for selection.
  
      NOTE:
class TestIndexing:
class TestFieldIndexing:
class TestBroadcastedAssignments:
class TestSubclasses:
class TestFancyIndexingCast:
class TestFancyIndexingEquivalence:
class TestMultiIndexingAutomated:
class TestFloatNonIntegerArgument:
class TestBooleanIndexing:
class TestArrayToIndexDeprecation:
class TestNonIntegerArrayLike:
class TestMultipleEllipsisError:
class TestCApiAccess:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_item_selection.py
-----------------------------
class TestTake:
class TestPutMask:
class TestPut:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_limited_api.py
-----------------------------
>     """Test building a third-party C extension with the limited API
      and building a cython extension with the limited API
def install_temp(tmpdir_factory):
def test_limited_api(install_temp):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_longdouble.py
-----------------------------
>     """Confirm that extracting a value doesn't convert to python float"""
      o = 1 + LD_INFO.eps
      a = np.array([o, o, o])
      assert_equal(a[1], o)
def test_scalar_extraction():
def test_str_roundtrip():
def test_str_roundtrip_bytes():
def test_array_and_stringlike_roundtrip(strtype):
def test_bogus_string():
def test_fromstring():
def test_fromstring_complex():
def test_fromstring_bogus():
def test_fromstring_empty():
def test_fromstring_missing():
class TestFileBased:
def test_str_exact():
def test_format():
def test_percent():
def test_array_repr():
class TestCommaDecimalPointLocale(CommaDecimalPointLocale):
def test_longdouble_from_int(int_val):
def test_longdouble_from_bool(bool_val):
def test_musllinux_x86_64_signature():
def test_eps_positive():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_machar.py
-----------------------------
> """
  Test machar. Given recent changes to hardcode type data, we might want to get
  rid of both MachAr and this test at some point.
  
class TestMachAr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_memmap.py
-----------------------------
class TestMemmap:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_mem_overlap.py
-----------------------------
>     """Returns slices of length nelems, from start onwards, in direction sign."""
  
      if nelems == 0:
          return [size // 2]  # int index
def _indices_for_nelems(nelems):
def _indices_for_axis():
def _indices(ndims):
def _check_assignment(srcidx, dstidx):
def test_overlapping_assignments():
def test_diophantine_fuzz():
def test_diophantine_overflow():
def check_may_share_memory_exact(a, b):
def test_may_share_memory_manual():
def iter_random_view_pairs(x, same_steps=True, equal_size=False):
def check_may_share_memory_easy_fuzz(get_max_work, same_steps, min_count):
def test_may_share_memory_easy_fuzz():
def test_may_share_memory_harder_fuzz():
def test_shares_memory_api():
def test_may_share_memory_bad_max_work():
def test_internal_overlap_diophantine():
def test_internal_overlap_slices():
def check_internal_overlap(a, manual_expected=None):
def test_internal_overlap_manual():
def test_internal_overlap_fuzz():
def test_non_ndarray_inputs():
def view_element_first_byte(x):
def assert_copy_equivalent(operation, args, out, **kwargs):
class TestUFunc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_mem_policy.py
-----------------------------
>     """ Add a memory policy that returns a false pointer 64 bytes into the
      actual allocation, and fill the prefix with some text. Then check at each
      memory manipulation that the prefix exists, to make sure all alloc/realloc/
      free/calloc go via the functions here.
def get_module(tmp_path):
def test_set_policy(get_module):
def test_default_policy_singleton(get_module):
def test_policy_propagation(get_module):
def test_context_locality(get_module):
def concurrent_thread1(get_module, event):
def concurrent_thread2(get_module, event):
def test_thread_locality(get_module):
def test_new_policy(get_module):
def test_switch_owner(get_module, policy):
def test_owner_is_base(get_module):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_multiarray.py
-----------------------------
>     """
      Allocate a new ndarray with aligned memory.
  
      The ndarray is guaranteed *not* aligned to twice the requested alignment.
def assert_arg_sorted(arr, arg):
def assert_arr_partitioned(kth, k, arr_part):
def _aligned_zeros(shape, dtype=float, order="C", align=None):
class TestFlags:
class TestHash:
class TestAttributes:
class TestArrayConstruction:
class TestAssignment:
class TestDtypedescr:
class TestZeroRank:
class TestScalarIndexing:
class TestCreation:
class TestStructured:
class TestBool:
class TestZeroSizeFlexible:
class TestMethods:
class TestCequenceMethods:
class TestBinop:
class TestTemporaryElide:
class TestCAPI:
class TestSubscripting:
class TestPickling:
class TestFancyIndexing:
class TestStringCompare:
class TestArgmaxArgminCommon:
class TestArgmax:
class TestArgmin:
class TestMinMax:
class TestNewaxis:
class TestClip:
class TestCompress:
class TestPutmask:
class TestTake:
class TestLexsort:
class TestIO:
class TestFromBuffer:
class TestFlat:
class TestResize:
class TestRecord:
class TestView:
def _mean(a, **args):
def _var(a, **args):
def _std(a, **args):
class TestStats:
class TestVdot:
class TestDot:
class MatmulCommon:
class TestMatmul(MatmulCommon):
class TestMatmulOperator(MatmulCommon):
class TestMatmulInplace:
def test_matmul_axes():
class TestInner:
class TestChoose:
class TestRepeat:
class TestNeighborhoodIter:
class TestStackedNeighborhoodIter:
class TestWarnings:
class TestMinScalarType:
class TestPEP3118Dtype:
class TestNewBufferProtocol:
class TestArrayCreationCopyArgument:
class TestArrayAttributeDeletion:
class TestArrayInterface:
def test_interface_no_shape():
def test_interface_no_shape_error():
def test_array_interface_itemsize():
def test_array_interface_empty_shape():
def test_array_interface_offset():
def test_array_interface_unicode_typestr():
def test_flat_element_deletion():
def test_scalar_element_deletion():
class TestAsCArray:
class TestConversion:
class TestWhere:
class TestHashing:
class TestArrayPriority:
class TestBytestringArrayNonzero:
class TestUnicodeEncoding:
class TestUnicodeArrayNonzero:
class TestFormat:
class TestCTypes:
class TestWritebackIfCopy:
class TestArange:
class TestDTypeCoercionForbidden:
class TestDateTimeCreationTuple:
class TestArrayFinalize:
def test_orderconverter_with_nonASCII_unicode_ordering():
def test_equal_override():
def test_equal_subclass_no_override(op, dt1, dt2):
def test_no_loop_gives_all_true_or_false(dt1, dt2):
def test_comparisons_forwards_error(op):
def test_richcompare_scalar_boolean_singleton_return():
def test_ragged_comparison_fails(op):
def test_npymath_complex(fun, npfun, x, y, test_dtype):
def test_npymath_real():
def test_uintalignment_and_alignment():
class TestAlignment:
def test_getfield():
class TestViewDtype:
def test_sort_float(N, dtype):
def test_sort_float16():
def test_sort_int(N, dtype):
def test_sort_uint():
def test_private_get_ndarray_c_version():
def test_argsort_float(N, dtype):
def test_argsort_int(N, dtype):
def test_sort_largearrays(dtype):
def test_argsort_largearrays(dtype):
def test_gh_22683():
def test_gh_24459():
def test_gh_28206():
def test_partition_int(N, dtype):
def test_partition_fp(N, dtype):
def test_cannot_assign_data():
def test_insufficient_width():
def test_npy_char_raises():
class TestDevice:
def test_array_interface_excess_dimensions_raises():
def test_array_dunder_array_preserves_dtype_on_none(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_multithreading.py
-----------------------------
def test_parallel_randomstate_creation():
def test_parallel_ufunc_execution():
def test_temp_elision_thread_safety():
def test_eigvalsh_thread_safety():
def test_printoptions_thread_safety():
def test_parallel_reduction():
def test_parallel_flat_iterator():
def test_multithreaded_repeat():
def test_structured_advanced_indexing():
def test_structured_threadsafety2():
def test_stringdtype_multithreaded_access_and_mutation(
def test_legacy_usertype_cast_init_thread_safety():
def test_nonzero(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_nditer.py
-----------------------------
>     code = textwrap.dedent("""
          import numpy as np
  
          it = np.nditer((np.array(1, dtype="i"),), op_dtypes=["S1"],
def iter_multi_index(i):
def iter_indices(i):
def iter_iterindices(i):
def test_iter_refcount():
def test_iter_best_order():
def test_iter_c_order():
def test_iter_f_order():
def test_iter_c_or_f_order():
def test_nditer_multi_index_set():
def test_nditer_multi_index_set_refcount():
def test_iter_best_order_multi_index_1d():
def test_iter_best_order_multi_index_2d():
def test_iter_best_order_multi_index_3d():
def test_iter_best_order_c_index_1d():
def test_iter_best_order_c_index_2d():
def test_iter_best_order_c_index_3d():
def test_iter_best_order_f_index_1d():
def test_iter_best_order_f_index_2d():
def test_iter_best_order_f_index_3d():
def test_iter_no_inner_full_coalesce():
def test_iter_no_inner_dim_coalescing():
def test_iter_dim_coalescing():
def test_iter_broadcasting():
def test_iter_itershape():
def test_iter_broadcasting_errors():
def test_iter_flags_errors():
def test_iter_slice():
def test_iter_assign_mapping():
def test_iter_nbo_align_contig():
def test_iter_array_cast():
def test_iter_array_cast_errors():
def test_iter_scalar_cast():
def test_iter_scalar_cast_errors():
def test_iter_object_arrays_basic():
def test_iter_object_arrays_conversions():
def test_iter_common_dtype():
def test_iter_copy_if_overlap():
def test_iter_op_axes():
def test_iter_op_axes_errors():
def test_iter_copy():
def test_iter_copy_casts(dtype, loop_dtype):
def test_iter_copy_casts_structured():
def test_iter_copy_casts_structured2():
def test_iter_allocate_output_simple():
def test_iter_allocate_output_buffered_readwrite():
def test_iter_allocate_output_itorder():
def test_iter_allocate_output_opaxes():
def test_iter_allocate_output_types_promotion():
def test_iter_allocate_output_types_byte_order():
def test_iter_allocate_output_types_scalar():
def test_iter_allocate_output_subtype():
def test_iter_allocate_output_errors():
def test_all_allocated():
def test_iter_remove_axis():
def test_iter_remove_multi_index_inner_loop():
def test_iter_iterindex():
def test_iter_iterrange():
def test_iter_buffering():
def test_iter_write_buffering():
def test_iter_buffering_delayed_alloc():
def test_iter_buffered_cast_simple():
def test_iter_buffered_cast_byteswapped():
def test_iter_buffered_cast_byteswapped_complex():
def test_iter_buffered_cast_structured_type():
def test_iter_buffered_cast_structured_type_failure_with_cleanup():
def test_buffered_cast_error_paths():
def test_buffered_cast_error_paths_unraisable():
def test_iter_buffered_cast_subarray():
def test_iter_buffering_badwriteback():
def test_iter_buffering_string():
def test_iter_buffering_growinner():
def test_iter_contig_flag_reduce_error(read_or_readwrite):
def test_iter_contig_flag_single_operand_strides(arr):
def test_iter_contig_flag_incorrect():
def test_iter_buffered_reduce_reuse():
def test_iter_buffered_reduce_reuse_core():
def test_iter_no_broadcast():
class TestIterNested:
def test_iter_reduction_error():
def test_iter_reduction():
def test_iter_buffering_reduction():
def test_iter_buffering_reduction_reuse_reduce_loops():
def test_iter_writemasked_badinput():
def _is_buffered(iterator):
def test_iter_writemasked(a):
def test_iter_writemasked_broadcast_error(mask, mask_axes):
def test_iter_writemasked_decref():
def test_iter_non_writable_attribute_deletion():
def test_iter_writable_attribute_deletion():
def test_iter_element_deletion():
def test_iter_allocated_array_dtypes():
def test_0d_iter():
def test_object_iter_cleanup():
def test_object_iter_cleanup_reduce():
def test_object_iter_cleanup_large_reduce(arr):
def test_iter_too_large():
def test_iter_too_large_with_multiindex():
def test_writebacks():
def test_close_equivalent():
def test_close_raises():
def test_close_parameters():
def test_warn_noclose():
def test_partial_iteration_cleanup(in_dtype, buf_dtype, steps):
def test_partial_iteration_error(in_dtype, buf_dtype):
def test_arbitrary_number_of_ops():
def test_arbitrary_number_of_ops_nested():
def test_arbitrary_number_of_ops_error():
def test_debug_print(capfd):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_nep50_promotions.py
-----------------------------
> """
  This file adds basic tests to test the NEP 50 style promotion compatibility
  mode.  Most of these test are likely to be simply deleted again once NEP 50
  is adopted in the main test suite.  A few may be moved elsewhere.
def test_nep50_examples():
def test_nep50_weak_integers(dtype):
def test_nep50_weak_integers_with_inexact(dtype):
def test_weak_promotion_scalar_path(op):
def test_nep50_complex_promotion():
def test_nep50_integer_conversion_errors():
def test_nep50_with_axisconcatenator():
def test_nep50_huge_integers(ufunc):
def test_nep50_in_concat_and_choose():
def test_expected_promotion(expected, dtypes, optional_dtypes, data):
def test_integer_comparison(sctype, other_val, comp):
def test_integer_comparison_with_cast(arr):
def test_integer_integer_comparison(comp):
def create_with_scalar(sctype, value):
def create_with_array(sctype, value):
def test_oob_creation(sctype, create):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_numeric.py
-----------------------------
>         """Metadata handling in promotion does not appear formalized
          right now in NumPy. This test should thus be considered to
          document behaviour, rather than test the correct definition of it.
  
class TestResize:
class TestNonarrayArgs:
class TestIsscalar:
class TestBoolScalar:
class TestBoolArray:
class TestBoolCmp:
class TestSeterr:
class TestFloatExceptions:
class TestTypes:
class NIterError(Exception):
class TestFromiter:
class TestNonzero:
class TestIndex:
class TestBinaryRepr:
class TestBaseRepr:
def _test_array_equal_parametrizations():
class TestArrayComparisons:
def assert_array_strict_equal(x, y):
class TestClip:
class TestAllclose:
class TestIsclose:
class TestStdVar:
class TestStdVarComplex:
class TestCreationFuncs:
class TestLikeFuncs:
class TestCorrelate:
class TestConvolve:
class TestArgwhere:
class TestRoll:
class TestRollaxis:
class TestMoveaxis:
class TestCross:
def test_outer_out_param():
class TestIndices:
class TestRequire:
class TestBroadcast:
class TestKeepdims:
class TestTensordot:
class TestAsType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_numerictypes.py
-----------------------------
>     """Check the creation of heterogeneous arrays zero-valued"""
  
      def test_zeros0D(self):
def normalize_descr(descr):
class CreateZeros:
class TestCreateZerosPlain(CreateZeros):
class TestCreateZerosNested(CreateZeros):
class CreateValues:
class TestCreateValuesPlainSingle(CreateValues):
class TestCreateValuesPlainMultiple(CreateValues):
class TestCreateValuesNestedSingle(CreateValues):
class TestCreateValuesNestedMultiple(CreateValues):
class ReadValuesPlain:
class TestReadValuesPlainSingle(ReadValuesPlain):
class TestReadValuesPlainMultiple(ReadValuesPlain):
class ReadValuesNested:
class TestReadValuesNestedSingle(ReadValuesNested):
class TestReadValuesNestedMultiple(ReadValuesNested):
class TestEmptyField:
class TestMultipleFields:
class TestIsSubDType:
class TestIsDType:
class TestSctypeDict:
class TestMaximumSctype:
class Test_sctype2char:
def test_issctype(rep, expected):
class TestDocStrings:
class TestScalarTypeNames:
class TestBoolDefinition:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_overrides.py
-----------------------------
>     """Docstring."""
      return 'original'
  
  
def _return_not_implemented(self, *args, **kwargs):
def dispatched_one_arg(array):
def dispatched_two_arg(array1, array2):
class TestGetImplementingArgs:
class TestNDArrayArrayFunction:
class TestArrayFunctionDispatch:
class TestVerifyMatchingSignatures:
def _new_duck_type_and_implements():
class TestArrayFunctionImplementation:
class TestNDArrayMethods:
class TestNumPyFunctions:
class TestArrayLike:
def test_function_like():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_print.py
-----------------------------
>     """ Check formatting.
  
          This is only for the str function, and only for simple types.
          The precision of np.float32 and np.longdouble aren't the same as the
def test_float_types(tp):
def test_nan_inf_float(tp):
def test_complex_types(tp):
def test_complex_inf_nan(dtype):
def _test_redirected_print(x, tp, ref=None):
def test_float_type_print(tp):
def test_complex_type_print(tp):
def test_scalar_format():
class TestCommaDecimalPointLocale(CommaDecimalPointLocale):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_protocols.py
-----------------------------
def test_getattr_warning():
def test_array_called():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_records.py
-----------------------------
>         """ Verify fromrecords works with a 0-length input """
          dtype = [('a', float), ('b', float)]
          r = np.rec.fromrecords([], dtype=dtype)
          assert_equal(r.shape, (0,))
class TestFromrecords:
class TestPathUsage:
class TestRecord:
def test_find_duplicate():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_regression.py
-----------------------------
class TestRegression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_scalarbuffer.py
-----------------------------
> """
  Test scalar buffer interface adheres to PEP 3118
class TestScalarPEP3118:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_scalarinherit.py
-----------------------------
> """ Test printing of scalar types.
  
class A:
class B(A, np.float64):
class C(B):
class D(C, B):
class B0(np.float64, A):
class C0(B0):
class HasNew:
class B1(np.float64, HasNew):
class TestInherit:
class TestCharacter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_scalarmath.py
-----------------------------
>     """
      This is a thorough test attempting to cover important promotion paths
      and ensuring that arrays and scalars stay as aligned as possible.
      However, if it creates troubles, it should maybe just be removed.
class TestTypes:
def check_ufunc_scalar_equivalence(op, arr1, arr2):
def test_array_scalar_ufunc_equivalence(op, arr1, arr2):
def test_array_scalar_ufunc_dtypes(op, dt1, dt2):
def test_int_float_promotion_truediv(fscalar):
class TestBaseMath:
class TestPower:
def floordiv_and_mod(x, y):
def _signs(dt):
class TestModulus:
class TestComparison:
class TestComplexDivision:
class TestConversion:
class TestRepr:
class TestMultiply:
class TestNegative:
class TestSubtract:
class TestAbs:
class TestBitShifts:
class TestHash:
def recursionlimit(n):
def test_operator_object_left(o, op, type_):
def test_operator_object_right(o, op, type_):
def test_operator_scalars(op, type1, type2):
def test_longdouble_operators_with_obj(sctype, op):
def test_longdouble_with_arrlike(sctype, op):
def test_longdouble_operators_with_large_int(sctype, op):
def test_scalar_integer_operation_overflow(dtype, operation):
def test_scalar_signed_integer_overflow(dtype, operation):
def test_scalar_unsigned_integer_overflow(dtype):
def test_scalar_integer_operation_divbyzero(dtype, operation):
def test_subclass_deferral(sctype, __op__, __rop__, op, cmp):
def test_longdouble_complex():
def test_pyscalar_subclasses(subtype, __op__, __rop__, op, cmp):
def test_truediv_int():
def test_scalar_matches_array_op_with_pyscalar(op, sctype, other_type, rop):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_scalarprint.py
-----------------------------
> """ Test printing of scalar types.
  
class TestRealScalars:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_scalar_ctors.py
-----------------------------
> """
  Test the scalar constructors, which also do type-coercion
class TestFromString:
class TestExtraArgs:
class TestFromInt:
class TestArrayFromScalar:
def test_void_via_length(length):
def test_void_from_byteslike(bytes_):
def test_void_arraylike_trumps_byteslike():
def test_void_dtype_arg():
def test_void_from_integer_with_dtype(data):
def test_void_from_structure():
def test_void_bad_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_scalar_methods.py
-----------------------------
> """
  Test the scalar constructors, which also do type-coercion
class TestAsIntegerRatio:
class TestIsInteger:
class TestClassGetItem:
class TestBitCount:
class TestDevice:
def test_array_wrap(scalar):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_shape_base.py
-----------------------------
>         """ Test to make sure equivalent Travis O's r1array function
class TestAtleast1d:
class TestAtleast2d:
class TestAtleast3d:
class TestHstack:
class TestVstack:
class TestConcatenate:
def test_stack():
def test_unstack():
def test_stack_out_and_dtype(axis, out_dtype, casting):
class TestBlock:
def test_block_dispatcher():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_simd.py
-----------------------------
>         """
          To call NPV intrinsics without the attribute 'npyv' and
          auto suffixing intrinsics according to class attribute 'sfx'
def check_floatstatus(divbyzero=False, overflow=False,
class _Test_Utility:
class _SIMD_BOOL(_Test_Utility):
class _SIMD_INT(_Test_Utility):
class _SIMD_FP32(_Test_Utility):
class _SIMD_FP64(_Test_Utility):
class _SIMD_FP(_Test_Utility):
class _SIMD_ALL(_Test_Utility):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_simd_module.py
-----------------------------
> """
  This testing unit only for checking the sanity of common functionality,
  therefore all we need is just to take one submodule that represents any
  of enabled SIMD extensions to run the test on it and the second submodule
class Test_SIMD_MODULE:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_stringdtype.py
-----------------------------
>     """Test that inserting a scalar works."""
      arr = np.array(string_list, dtype=dtype)
      scalar_instance = "what"
      arr[1] = scalar_instance
def string_list():
def coerce2(request):
def na_object2(request):
def dtype2(na_object2, coerce2):
def test_dtype_creation():
def test_dtype_equality(dtype):
def test_dtype_repr(dtype):
def test_create_with_na(dtype):
def test_set_replace_na(i):
def test_null_roundtripping():
def test_string_too_large_error():
def test_array_creation_utf8(dtype, data):
def test_scalars_string_conversion(data, dtype):
def test_self_casts(dtype, dtype2, strings):
class TestStringLikeCasts:
def test_additional_unicode_cast(random_string_list, dtype):
def test_insert_scalar(dtype, string_list):
def test_comparisons(string_list, dtype, op, o_dtype):
def test_isnan(dtype, string_list):
def test_pickle(dtype, string_list):
def test_stdlib_copy(dtype, string_list):
def test_sort(dtype, strings):
def test_nonzero(strings, na_object):
def test_where(string_list, na_object):
def test_fancy_indexing(string_list):
def test_creation_functions():
def test_concatenate(string_list):
def test_resize_method(string_list):
def test_create_with_copy_none(string_list):
def test_astype_copy_false():
def test_argmax(strings):
def test_arrfuncs_zeros(arrfunc, expected):
def test_cast_to_bool(strings, cast_answer, any_answer, all_answer):
def test_cast_from_bool(strings, cast_answer):
def test_sized_integer_casts(bitsize, signed):
def test_unsized_integer_casts(typename, signed):
def test_float_casts(typename):
def test_float_nan_cast_na_object():
def test_cfloat_casts(typename):
def test_take(string_list):
def test_ufuncs_minmax(string_list, ufunc_name, func, use_out):
def test_max_regression():
def test_ufunc_add(dtype, string_list, other_strings, use_out):
def test_ufunc_add_reduce(dtype):
def test_add_promoter(string_list):
def test_add_no_legacy_promote_with_signature():
def test_add_promoter_reduce():
def test_multiply_reduce():
def test_multiply_two_string_raises():
def test_ufunc_multiply(dtype, string_list, other, other_dtype, use_out):
def test_findlike_promoters():
def test_strip_promoter():
def test_replace_promoter():
def test_center_promoter():
def test_datetime_timedelta_cast(dtype, input_data, input_dtype):
def test_nat_casts():
def test_nat_conversion():
def test_growing_strings(dtype):
def test_assign_medium_strings():
def string_array(dtype):
def unicode_array():
def test_unary(string_array, unicode_array, function_name):
def call_func(func, args, array, sanitize=True):
def test_binary(string_array, unicode_array, function_name, args):
def test_non_default_start_stop(function, start, stop, expected):
def test_replace_non_default_repeat(count):
def test_strip_ljust_rjust_consistency(string_array, unicode_array):
def test_unset_na_coercion():
def test_repeat(string_array):
def test_accumulation(string_array, tile):
class TestImplementation:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_strings.py
-----------------------------
def test_mixed_string_comparison_ufuncs_fail(op, ufunc, sym):
def test_mixed_string_comparisons_ufuncs_with_cast(op, ufunc, sym):
def test_string_comparisons(op, ufunc, sym, dtypes, aligned):
def test_string_comparisons_empty(op, ufunc, sym, dtypes):
def test_float_to_string_cast(str_dt, float_dt):
def test_string_size_dtype_errors(str_dt, size):
def test_string_size_dtype_large_repr(str_dt):
def test_large_string_coercion_error(str_dt):
def test_large_string_addition_error(str_dt):
def test_large_string_cast():
class TestMethods:
class TestMethodsWithUnicode:
class TestMixedTypeMethods:
class TestUnicodeOnlyMethodsRaiseWithBytes:
def check_itemsize(n_elem, dt):
class TestReplaceOnArrays:
class TestOverride:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_ufunc.py
-----------------------------
>     """Test generic loops.
  
      The loops to be tested are:
  
class TestUfuncKwargs:
class TestUfuncGenericLoops:
def _pickleable_module_global():
class TestUfunc:
class TestGUFuncProcessCoreDims:
def test_ufunc_types(ufunc):
def test_ufunc_noncontiguous(ufunc):
def test_ufunc_warn_with_nan(ufunc):
def test_ufunc_out_casterrors():
def test_ufunc_input_casterrors(bad_offset):
def test_ufunc_input_floatingpoint_error(bad_offset):
def test_trivial_loop_invalid_cast():
def test_reduce_casterrors(offset):
def test_reduction_no_reference_leak():
def test_object_reduce_cleanup_on_failure():
def test_ufunc_methods_floaterrors(method):
def _check_neg_zero(value):
def test_addition_negative_zero(dtype):
def test_addition_reduce_negative_zero(dtype, use_initial):
def test_addition_string_types(dt1, dt2):
def test_addition_unicode_inverse_byte_order(order1, order2):
def test_find_non_long_args(dtype):
def test_find_access_past_buffer():
class TestLowlevelAPIAccess:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_umath.py
-----------------------------
>     """
      Helper to create "interesting" operands to cover common code paths:
      * scalar inputs
      * only first "values" is an array (e.g. scalar division fast-paths)
def interesting_binop_operands(val1, val2, dtype):
def on_powerpc():
def bad_arcsinh():
class _FilterInvalids:
class TestConstants:
class TestOut:
class TestComparisons:
class TestAdd:
class TestDivision:
def floor_divide_and_remainder(x, y):
def _signs(dt):
class TestRemainder:
class TestDivisionIntegerOverflowsAndDivideByZero:
class TestCbrt:
class TestPower:
class TestFloat_power:
class TestLog2:
class TestExp2:
class TestLogAddExp2(_FilterInvalids):
class TestLog:
class TestExp:
class TestSpecialFloats:
class TestFPClass:
class TestLDExp:
class TestFRExp:
class TestAVXUfuncs:
class TestAVXFloat32Transcendental:
class TestLogAddExp(_FilterInvalids):
class TestLog1p:
class TestExpm1:
class TestHypot:
def assert_hypot_isnan(x, y):
def assert_hypot_isinf(x, y):
class TestHypotSpecialValues:
def assert_arctan2_isnan(x, y):
def assert_arctan2_ispinf(x, y):
def assert_arctan2_isninf(x, y):
def assert_arctan2_ispzero(x, y):
def assert_arctan2_isnzero(x, y):
class TestArctan2SpecialValues:
class TestLdexp:
class TestMaximum(_FilterInvalids):
class TestMinimum(_FilterInvalids):
class TestFmax(_FilterInvalids):
class TestFmin(_FilterInvalids):
class TestBool:
class TestBitwiseUFuncs:
class TestInt:
class TestFloatingPoint:
class TestDegrees:
class TestRadians:
class TestHeavside:
class TestSign:
class TestMinMax:
class TestAbsoluteNegative:
class TestPositive:
class TestSpecialMethods:
class TestChoose:
class TestRationalFunctions:
class TestRoundingFunctions:
class TestComplexFunctions:
class TestAttributes:
class TestSubclass:
class TestFrompyfunc:
def _check_branch_cut(f, x0, dx, re_sign=1, im_sign=-1, sig_zero_ok=False,
def test_copysign():
def _test_nextafter(t):
def test_nextafter():
def test_nextafterf():
def test_nextafterl():
def test_nextafter_0():
def _test_spacing(t):
def test_spacing():
def test_spacingf():
def test_spacingl():
def test_spacing_gfortran():
def test_nextafter_vs_spacing():
def test_pos_nan():
def test_reduceat():
def test_reduceat_empty():
def test_complex_nan_comparisons():
def test_rint_big_int():
def test_memoverlap_accumulate(ftype):
def test_memoverlap_accumulate_cmp(ufunc, dtype):
def test_memoverlap_accumulate_symmetric(ufunc, dtype):
def test_signaling_nan_exceptions():
def test_outer_subclass_preserve(arr):
def test_outer_bad_subclass():
def test_outer_exceeds_maxdims():
def test_bad_legacy_ufunc_silent_errors():
def test_bad_legacy_gufunc_silent_errors(x1):
class TestAddDocstring:
class TestAdd_newdoc_ufunc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_umath_accuracy.py
-----------------------------
def convert(s, datatype="np.float32"):
class TestAccuracy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_umath_complex.py
-----------------------------
class TestCexp:
class TestClog:
class TestCsqrt:
class TestCpow:
class TestCabs:
class TestCarg:
def check_real_value(f, x1, y1, x, exact=True):
def check_complex_value(f, x1, y1, x2, y2, exact=True):
class TestSpecialComplexAVX:
class TestComplexAbsoluteAVX:
class TestComplexAbsoluteMixedDTypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test_unicode.py
-----------------------------
>     """Check the creation of zero-valued arrays"""
  
      def content_check(self, ua, ua_scalar, nbytes):
  
def buffer_length(arr):
def test_string_cast():
class CreateZeros:
class TestCreateZeros_1(CreateZeros):
class TestCreateZeros_2(CreateZeros):
class TestCreateZeros_1009(CreateZeros):
class CreateValues:
class TestCreateValues_1_UCS2(CreateValues):
class TestCreateValues_1_UCS4(CreateValues):
class TestCreateValues_2_UCS2(CreateValues):
class TestCreateValues_2_UCS4(CreateValues):
class TestCreateValues_1009_UCS2(CreateValues):
class TestCreateValues_1009_UCS4(CreateValues):
class AssignValues:
class TestAssignValues_1_UCS2(AssignValues):
class TestAssignValues_1_UCS4(AssignValues):
class TestAssignValues_2_UCS2(AssignValues):
class TestAssignValues_2_UCS4(AssignValues):
class TestAssignValues_1009_UCS2(AssignValues):
class TestAssignValues_1009_UCS4(AssignValues):
class ByteorderValues:
class TestByteorder_1_UCS2(ByteorderValues):
class TestByteorder_1_UCS4(ByteorderValues):
class TestByteorder_2_UCS2(ByteorderValues):
class TestByteorder_2_UCS4(ByteorderValues):
class TestByteorder_1009_UCS2(ByteorderValues):
class TestByteorder_1009_UCS4(ByteorderValues):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\test__exceptions.py
-----------------------------
> """
  Tests of the ._exceptions module. Primarily for exercising the __str__ methods.
class TestArrayMemoryError:
class TestUFuncNoLoopError:
class TestAxisError:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\_locales.py
-----------------------------
> """Provide class for testing in French locale
  
def find_comma_decimal_point_locale():
class CommaDecimalPointLocale:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\tests\_natype.py
-----------------------------
def _create_binary_propagating_op(name, is_divmod=False):
def _create_unary_propagating_op(name: str):
class NAType:
def get_stringdtype_dtype(na_object, coerce=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\arrayprint.py
-----------------------------
> """Array printing function
  
  $Id: arrayprint.py,v 1.9 2005/09/13 13:58:44 teoliphant Exp $
  
def _make_options_dict(precision=None, threshold=None, edgeitems=None,
def set_printoptions(precision=None, threshold=None, edgeitems=None,
def _set_printoptions(precision=None, threshold=None, edgeitems=None,
def get_printoptions():
def _get_legacy_print_mode():
def printoptions(*args, **kwargs):
def _leading_trailing(a, edgeitems, index=()):
def _object_format(o):
def repr_format(x):
def str_format(x):
def _get_formatdict(data, *, precision, floatmode, suppress, sign, legacy,
def _get_format_function(data, **options):
def _recursive_guard(fillvalue='...'):
def _array2string(a, options, separator=' ', prefix=""):
def _array2string_dispatcher(
def array2string(a, max_line_width=None, precision=None,
def _extendLine(s, line, word, line_width, next_line_prefix, legacy):
def _extendLine_pretty(s, line, word, line_width, next_line_prefix, legacy):
def _formatArray(a, format_function, line_width, next_line_prefix,
def _none_or_positive_arg(x, name):
class FloatingFormat:
def format_float_scientific(x, precision=None, unique=True, trim='k',
def format_float_positional(x, precision=None, unique=True,
class IntegerFormat:
class BoolFormat:
class ComplexFloatingFormat:
class _TimelikeFormat:
class DatetimeFormat(_TimelikeFormat):
class TimedeltaFormat(_TimelikeFormat):
class SubArrayFormat:
class StructuredVoidFormat:
def _void_scalar_to_string(x, is_repr=True):
def dtype_is_implied(dtype):
def dtype_short_repr(dtype):
def _array_repr_implementation(
def _array_repr_dispatcher(
def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):
def _guarded_repr_or_str(v):
def _array_str_implementation(
def _array_str_dispatcher(
def array_str(a, max_line_width=None, precision=None, suppress_small=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\cversions.py
-----------------------------
> """Simple script to compute the api hash of the current API.
  
  The API has is defined by numpy_api_order and ufunc_api_order.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\defchararray.py
-----------------------------
> """
  This module contains a set of functions for vectorized string
  operations and methods.
  
def _binary_op_dispatcher(x1, x2):
def equal(x1, x2):
def not_equal(x1, x2):
def greater_equal(x1, x2):
def less_equal(x1, x2):
def greater(x1, x2):
def less(x1, x2):
def multiply(a, i):
def partition(a, sep):
def rpartition(a, sep):
class chararray(ndarray):
def array(obj, itemsize=None, copy=True, unicode=None, order=None):
def asarray(obj, itemsize=None, unicode=None, order=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\einsumfunc.py
-----------------------------
> """
  Implementation of optimized einsum.
  
def _flop_count(idx_contraction, inner, num_terms, size_dictionary):
def _compute_size_by_dict(indices, idx_dict):
def _find_contraction(positions, input_sets, output_set):
def _optimal_path(input_sets, output_set, idx_dict, memory_limit):
def _parse_possible_contraction(
def _update_other_results(results, best):
def _greedy_path(input_sets, output_set, idx_dict, memory_limit):
def _can_dot(inputs, result, idx_removed):
def _parse_einsum_input(operands):
def _einsum_path_dispatcher(*operands, optimize=None, einsum_call=None):
def einsum_path(*operands, optimize='greedy', einsum_call=False):
def _einsum_dispatcher(*operands, out=None, optimize=None, **kwargs):
def einsum(*operands, out=None, optimize=False, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\fromnumeric.py
-----------------------------
> """Module containing non-deprecated functions borrowed from Numeric.
  
def _wrapit(obj, method, *args, **kwds):
def _wrapfunc(obj, method, *args, **kwds):
def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):
def _wrapreduction_any_all(obj, ufunc, method, axis, out, **kwargs):
def _take_dispatcher(a, indices, axis=None, out=None, mode=None):
def take(a, indices, axis=None, out=None, mode='raise'):
def _reshape_dispatcher(a, /, shape=None, order=None, *, newshape=None,
def reshape(a, /, shape=None, order='C', *, newshape=None, copy=None):
def _choose_dispatcher(a, choices, out=None, mode=None):
def choose(a, choices, out=None, mode='raise'):
def _repeat_dispatcher(a, repeats, axis=None):
def repeat(a, repeats, axis=None):
def _put_dispatcher(a, ind, v, mode=None):
def put(a, ind, v, mode='raise'):
def _swapaxes_dispatcher(a, axis1, axis2):
def swapaxes(a, axis1, axis2):
def _transpose_dispatcher(a, axes=None):
def transpose(a, axes=None):
def _matrix_transpose_dispatcher(x):
def matrix_transpose(x, /):
def _partition_dispatcher(a, kth, axis=None, kind=None, order=None):
def partition(a, kth, axis=-1, kind='introselect', order=None):
def _argpartition_dispatcher(a, kth, axis=None, kind=None, order=None):
def argpartition(a, kth, axis=-1, kind='introselect', order=None):
def _sort_dispatcher(a, axis=None, kind=None, order=None, *, stable=None):
def sort(a, axis=-1, kind=None, order=None, *, stable=None):
def _argsort_dispatcher(a, axis=None, kind=None, order=None, *, stable=None):
def argsort(a, axis=-1, kind=None, order=None, *, stable=None):
def _argmax_dispatcher(a, axis=None, out=None, *, keepdims=np._NoValue):
def argmax(a, axis=None, out=None, *, keepdims=np._NoValue):
def _argmin_dispatcher(a, axis=None, out=None, *, keepdims=np._NoValue):
def argmin(a, axis=None, out=None, *, keepdims=np._NoValue):
def _searchsorted_dispatcher(a, v, side=None, sorter=None):
def searchsorted(a, v, side='left', sorter=None):
def _resize_dispatcher(a, new_shape):
def resize(a, new_shape):
def _squeeze_dispatcher(a, axis=None):
def squeeze(a, axis=None):
def _diagonal_dispatcher(a, offset=None, axis1=None, axis2=None):
def diagonal(a, offset=0, axis1=0, axis2=1):
def _trace_dispatcher(
def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
def _ravel_dispatcher(a, order=None):
def ravel(a, order='C'):
def _nonzero_dispatcher(a):
def nonzero(a):
def _shape_dispatcher(a):
def shape(a):
def _compress_dispatcher(condition, a, axis=None, out=None):
def compress(condition, a, axis=None, out=None):
def _clip_dispatcher(a, a_min=None, a_max=None, out=None, *, min=None,
def clip(a, a_min=np._NoValue, a_max=np._NoValue, out=None, *,
def _sum_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None,
def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,
def _any_dispatcher(a, axis=None, out=None, keepdims=None, *,
def any(a, axis=None, out=None, keepdims=np._NoValue, *, where=np._NoValue):
def _all_dispatcher(a, axis=None, out=None, keepdims=None, *,
def all(a, axis=None, out=None, keepdims=np._NoValue, *, where=np._NoValue):
def _cumulative_func(x, func, axis, dtype, out, include_initial):
def _cumulative_prod_dispatcher(x, /, *, axis=None, dtype=None, out=None,
def cumulative_prod(x, /, *, axis=None, dtype=None, out=None,
def _cumulative_sum_dispatcher(x, /, *, axis=None, dtype=None, out=None,
def cumulative_sum(x, /, *, axis=None, dtype=None, out=None,
def _cumsum_dispatcher(a, axis=None, dtype=None, out=None):
def cumsum(a, axis=None, dtype=None, out=None):
def _ptp_dispatcher(a, axis=None, out=None, keepdims=None):
def ptp(a, axis=None, out=None, keepdims=np._NoValue):
def _max_dispatcher(a, axis=None, out=None, keepdims=None, initial=None,
def max(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,
def amax(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,
def _min_dispatcher(a, axis=None, out=None, keepdims=None, initial=None,
def min(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,
def amin(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,
def _prod_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None,
def prod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,
def _cumprod_dispatcher(a, axis=None, dtype=None, out=None):
def cumprod(a, axis=None, dtype=None, out=None):
def _ndim_dispatcher(a):
def ndim(a):
def _size_dispatcher(a, axis=None):
def size(a, axis=None):
def _round_dispatcher(a, decimals=None, out=None):
def round(a, decimals=0, out=None):
def around(a, decimals=0, out=None):
def _mean_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None, *,
def mean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, *,
def _std_dispatcher(a, axis=None, dtype=None, out=None, ddof=None,
def std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue, *,
def _var_dispatcher(a, axis=None, dtype=None, out=None, ddof=None,
def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue, *,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\function_base.py
-----------------------------
>     """
      Return evenly spaced numbers over a specified interval.
  
      Returns `num` evenly spaced samples, calculated over the
def _linspace_dispatcher(start, stop, num=None, endpoint=None, retstep=None,
def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None,
def _logspace_dispatcher(start, stop, num=None, endpoint=None, base=None,
def logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None,
def _geomspace_dispatcher(start, stop, num=None, endpoint=None, dtype=None,
def geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0):
def _needs_add_docstring(obj):
def _add_docstring(obj, doc, warn_on_python):
def add_newdoc(place, obj, doc, warn_on_python=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\getlimits.py
-----------------------------
> """Machine limits for Float32 and Float64 and (long double) if available...
  
def _fr0(a):
def _fr1(a):
class MachArLike:
def _register_type(machar, bytepat):
def _register_known_types():
def _get_machar(ftype):
def _discovered_machar(ftype):
class finfo:
class iinfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\memmap.py
-----------------------------
>     """Create a memory-map to an array stored in a *binary* file on disk.
  
      Memory-mapped files are used for accessing small segments of large files
      on disk, without reading the entire file into memory.  NumPy's
class memmap(ndarray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\multiarray.py
-----------------------------
> """
  Create the numpy._core.multiarray namespace for backward compatibility.
  In v1.16 the multiarray and umath c-extension modules were merged into
  a single _multiarray_umath extension module. So we replicate the old
def _override___module__():
def empty_like(
def concatenate(arrays, axis=None, out=None, *, dtype=None, casting=None):
def inner(a, b):
def where(condition, x=None, y=None):
def lexsort(keys, axis=None):
def can_cast(from_, to, casting=None):
def min_scalar_type(a):
def result_type(*arrays_and_dtypes):
def dot(a, b, out=None):
def vdot(a, b):
def bincount(x, weights=None, minlength=None):
def ravel_multi_index(multi_index, dims, mode=None, order=None):
def unravel_index(indices, shape=None, order=None):
def copyto(dst, src, casting=None, where=None):
def putmask(a, /, mask, values):
def packbits(a, axis=None, bitorder='big'):
def unpackbits(a, axis=None, count=None, bitorder='big'):
def shares_memory(a, b, max_work=None):
def may_share_memory(a, b, max_work=None):
def is_busday(dates, weekmask=None, holidays=None, busdaycal=None, out=None):
def busday_offset(dates, offsets, roll=None, weekmask=None, holidays=None,
def busday_count(begindates, enddates, weekmask=None, holidays=None,
def datetime_as_string(arr, unit=None, timezone=None, casting=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\numeric.py
-----------------------------
>     """
      Return an array of zeros with the same shape and type as a given array.
  
      Parameters
def _zeros_like_dispatcher(
def zeros_like(
def ones(shape, dtype=None, order='C', *, device=None, like=None):
def _ones_like_dispatcher(
def ones_like(
def _full_dispatcher(
def full(shape, fill_value, dtype=None, order='C', *, device=None, like=None):
def _full_like_dispatcher(
def full_like(
def _count_nonzero_dispatcher(a, axis=None, *, keepdims=None):
def count_nonzero(a, axis=None, *, keepdims=False):
def isfortran(a):
def _argwhere_dispatcher(a):
def argwhere(a):
def _flatnonzero_dispatcher(a):
def flatnonzero(a):
def _correlate_dispatcher(a, v, mode=None):
def correlate(a, v, mode='valid'):
def _convolve_dispatcher(a, v, mode=None):
def convolve(a, v, mode='full'):
def _outer_dispatcher(a, b, out=None):
def outer(a, b, out=None):
def _tensordot_dispatcher(a, b, axes=None):
def tensordot(a, b, axes=2):
def _roll_dispatcher(a, shift, axis=None):
def roll(a, shift, axis=None):
def _rollaxis_dispatcher(a, axis, start=None):
def rollaxis(a, axis, start=0):
def normalize_axis_tuple(axis, ndim, argname=None, allow_duplicate=False):
def _moveaxis_dispatcher(a, source, destination):
def moveaxis(a, source, destination):
def _cross_dispatcher(a, b, axisa=None, axisb=None, axisc=None, axis=None):
def cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None):
def indices(dimensions, dtype=int, sparse=False):
def fromfunction(function, shape, *, dtype=float, like=None, **kwargs):
def _frombuffer(buf, dtype, shape, order, axis_order=None):
def isscalar(element):
def binary_repr(num, width=None):
def base_repr(number, base=2, padding=0):
def _maketup(descr, val):
def identity(n, dtype=None, *, like=None):
def _allclose_dispatcher(a, b, rtol=None, atol=None, equal_nan=None):
def allclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
def _isclose_dispatcher(a, b, rtol=None, atol=None, equal_nan=None):
def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
def _array_equal_dispatcher(a1, a2, equal_nan=None):
def _dtype_cannot_hold_nan(dtype):
def array_equal(a1, a2, equal_nan=False):
def _array_equiv_dispatcher(a1, a2):
def array_equiv(a1, a2):
def _astype_dispatcher(x, dtype, /, *, copy=None, device=None):
def astype(x, dtype, /, *, copy=True, device=None):
def extend_all(module):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\numerictypes.py
-----------------------------
> """
  numerictypes: Define the numeric type objects
  
  This module is designed so "from numerictypes import \\*" is safe.
def maximum_sctype(t):
def issctype(rep):
def obj2sctype(rep, default=None):
def issubclass_(arg1, arg2):
def issubsctype(arg1, arg2):
class _PreprocessDTypeError(Exception):
def _preprocess_dtype(dtype):
def isdtype(dtype, kind):
def issubdtype(arg1, arg2):
def sctype2char(sctype):
def _scalar_type_key(typ):
def _register_types():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\overrides.py
-----------------------------
> """Implementation of __array_function__ overrides from NEP-18."""
  import collections
  import functools
  
def get_array_function_like_doc(public_api, docstring_template=""):
def finalize_array_function_like(public_api):
def verify_matching_signatures(implementation, dispatcher):
def array_function_dispatch(dispatcher=None, module=None, verify=True,
def array_function_from_dispatcher(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\printoptions.py
-----------------------------
> """
  Stores and defines the low-level format_options context variable.
  
  This is defined in its own file outside of the arrayprint module

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\records.py
-----------------------------
> """
  This module contains a set of functions for record arrays.
def find_duplicate(list):
class format_parser:
class record(nt.void):
class recarray(ndarray):
def _deprecate_shape_0_as_None(shape):
def fromarrays(arrayList, dtype=None, shape=None, formats=None,
def fromrecords(recList, dtype=None, shape=None, formats=None, names=None,
def fromstring(datastring, dtype=None, shape=None, offset=0, formats=None,
def get_remaining_size(fd):
def fromfile(fd, dtype=None, shape=None, offset=0, formats=None,
def array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\shape_base.py
-----------------------------
>     """
      Convert inputs to arrays with at least one dimension.
  
      Scalar inputs are converted to 1-dimensional arrays, whilst
def _atleast_1d_dispatcher(*arys):
def atleast_1d(*arys):
def _atleast_2d_dispatcher(*arys):
def atleast_2d(*arys):
def _atleast_3d_dispatcher(*arys):
def atleast_3d(*arys):
def _arrays_for_stack_dispatcher(arrays):
def _vhstack_dispatcher(tup, *, dtype=None, casting=None):
def vstack(tup, *, dtype=None, casting="same_kind"):
def hstack(tup, *, dtype=None, casting="same_kind"):
def _stack_dispatcher(arrays, axis=None, out=None, *,
def stack(arrays, axis=0, out=None, *, dtype=None, casting="same_kind"):
def _unstack_dispatcher(x, /, *, axis=None):
def unstack(x, /, *, axis=0):
def _block_format_index(index):
def _block_check_depths_match(arrays, parent_index=[]):
def _atleast_nd(a, ndim):
def _accumulate(values):
def _concatenate_shapes(shapes, axis):
def _block_info_recursion(arrays, max_depth, result_ndim, depth=0):
def _block(arrays, max_depth, result_ndim, depth=0):
def _block_dispatcher(arrays):
def block(arrays):
def _block_setup(arrays):
def _block_slicing(arrays, list_ndim, result_ndim):
def _block_concatenate(arrays, list_ndim, result_ndim):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\strings.py
-----------------------------
> """
  This module contains a set of functions for vectorized string
  operations.
def _override___module__():
def _get_num_chars(a):
def _to_bytes_or_str_array(result, output_dtype_like):
def _clean_args(*args):
def _multiply_dispatcher(a, i):
def multiply(a, i):
def _mod_dispatcher(a, values):
def mod(a, values):
def find(a, sub, start=0, end=None):
def rfind(a, sub, start=0, end=None):
def index(a, sub, start=0, end=None):
def rindex(a, sub, start=0, end=None):
def count(a, sub, start=0, end=None):
def startswith(a, prefix, start=0, end=None):
def endswith(a, suffix, start=0, end=None):
def _code_dispatcher(a, encoding=None, errors=None):
def decode(a, encoding=None, errors=None):
def encode(a, encoding=None, errors=None):
def _expandtabs_dispatcher(a, tabsize=None):
def expandtabs(a, tabsize=8):
def _just_dispatcher(a, width, fillchar=None):
def center(a, width, fillchar=' '):
def ljust(a, width, fillchar=' '):
def rjust(a, width, fillchar=' '):
def _zfill_dispatcher(a, width):
def zfill(a, width):
def lstrip(a, chars=None):
def rstrip(a, chars=None):
def strip(a, chars=None):
def _unary_op_dispatcher(a):
def upper(a):
def lower(a):
def swapcase(a):
def capitalize(a):
def title(a):
def _replace_dispatcher(a, old, new, count=None):
def replace(a, old, new, count=-1):
def _join_dispatcher(sep, seq):
def _join(sep, seq):
def _split_dispatcher(a, sep=None, maxsplit=None):
def _split(a, sep=None, maxsplit=None):
def _rsplit(a, sep=None, maxsplit=None):
def _splitlines_dispatcher(a, keepends=None):
def _splitlines(a, keepends=None):
def _partition_dispatcher(a, sep):
def partition(a, sep):
def rpartition(a, sep):
def _translate_dispatcher(a, table, deletechars=None):
def translate(a, table, deletechars=None):
def slice(a, start=None, stop=None, step=None, /):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\umath.py
-----------------------------
> """
  Create the numpy._core.umath namespace for backward compatibility. In v1.16
  the multiarray and umath c-extension modules were merged into a single
  _multiarray_umath extension module. So we replicate the old namespace

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_add_newdocs.py
-----------------------------
> """
  This is only meant to add docs to objects defined in C-extension modules.
  The purpose is to allow easier editing of the docstrings without
  requiring a re-compile.
def refer_to_array_attribute(attr, method=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_add_newdocs_scalars.py
-----------------------------
> """
  This file is separate from ``_add_newdocs.py`` so that it can be mocked out by
  our sphinx ``conf.py`` during doc builds, where we want to avoid showing
  platform-dependent information.
def numeric_type_aliases(aliases):
def _get_platform_and_machine():
def add_newdoc_for_scalar_type(obj, fixed_aliases, doc):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_asarray.py
-----------------------------
> """
  Functions in the ``as*array`` family that promote array-likes into arrays.
  
  `require` fits this category despite its name not matching this pattern.
def require(a, dtype=None, requirements=None, *, like=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_dtype.py
-----------------------------
> """
  A place for code to be called from the implementation of np.dtype
  
  String handling is much easier to do correctly in python.
def _kind_name(dtype):
def __str__(dtype):
def __repr__(dtype):
def _unpack_field(dtype, offset, title=None):
def _isunsized(dtype):
def _construction_repr(dtype, include_align=False, short=False):
def _scalar_str(dtype, short):
def _byte_order_str(dtype):
def _datetime_metadata_str(dtype):
def _struct_dict_str(dtype, includealignedflag):
def _aligned_offset(offset, alignment):
def _is_packed(dtype):
def _struct_list_str(dtype):
def _struct_str(dtype, include_align):
def _subarray_str(dtype):
def _name_includes_bit_suffix(dtype):
def _name_get(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_dtype_ctypes.py
-----------------------------
> """
  Conversion from ctypes to dtype.
  
  In an ideal world, we could achieve this through the PEP3118 buffer protocol,
def _from_ctypes_array(t):
def _from_ctypes_structure(t):
def _from_ctypes_scalar(t):
def _from_ctypes_union(t):
def dtype_from_ctypes_type(t):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_exceptions.py
-----------------------------
> """
  Various richly-typed exceptions, that also help us deal with string formatting
  in python where it's easier.
  
def _unpack_tuple(tup):
def _display_as_base(cls):
class UFuncTypeError(TypeError):
class _UFuncNoLoopError(UFuncTypeError):
class _UFuncBinaryResolutionError(_UFuncNoLoopError):
class _UFuncCastingError(UFuncTypeError):
class _UFuncInputCastingError(_UFuncCastingError):
class _UFuncOutputCastingError(_UFuncCastingError):
class _ArrayMemoryError(MemoryError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_internal.py
-----------------------------
> """
  A place for internal code
  
  Some things are more easily handled Python.
def _makenames_list(adict, align):
def _usefields(adict, align):
def _array_descr(descriptor):
def _commastring(astr):
class dummy_ctype:
def _getintp_ctype():
class _missing_ctypes:
class _ctypes:
def _newnames(datatype, order):
def _copy_fields(ary):
def _promote_fields(dt1, dt2):
def _getfield_is_safe(oldtype, newtype, offset):
def _view_is_safe(oldtype, newtype):
class _Stream:
def _dtype_from_pep3118(spec):
def __dtype_from_pep3118(stream, is_subdtype):
def _fix_names(field_spec):
def _add_trailing_padding(value, padding):
def _prod(a):
def _gcd(a, b):
def _lcm(a, b):
def array_ufunc_errmsg_formatter(dummy, ufunc, method, *inputs, **kwargs):
def array_function_errmsg_formatter(public_api, types):
def _ufunc_doc_signature_formatter(ufunc):
def npy_ctypes_check(cls):
def _convert_to_stringdtype_kwargs(coerce, na_object=_NoValue):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_machar.py
-----------------------------
> """
  Machine arithmetic - determine the parameters of the
  floating-point arithmetic system
  
class MachAr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_methods.py
-----------------------------
> """
  Array methods which are called by both the C-code for the method
  and the Python code for the NumPy-namespace function
  
def _amax(a, axis=None, out=None, keepdims=False,
def _amin(a, axis=None, out=None, keepdims=False,
def _sum(a, axis=None, dtype=None, out=None, keepdims=False,
def _prod(a, axis=None, dtype=None, out=None, keepdims=False,
def _any(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
def _all(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
def _count_reduce_items(arr, axis, keepdims=False, where=True):
def _clip(a, min=None, max=None, out=None, **kwargs):
def _mean(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
def _var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *,
def _std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *,
def _ptp(a, axis=None, out=None, keepdims=False):
def _dump(self, file, protocol=2):
def _dumps(self, protocol=2):
def _bitwise_count(a, out=None, *, where=True, casting='same_kind',

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_string_helpers.py
-----------------------------
> """
  String-handling utilities to avoid locale-dependence.
  
  Used primarily to generate type name aliases.
def english_lower(s):
def english_upper(s):
def english_capitalize(s):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_type_aliases.py
-----------------------------
> """
  Due to compatibility, numpy has a very large number of different naming
  conventions for the scalar types (those subclassing from `numpy.generic`).
  This file produces a convoluted set of dictionaries mapping names to types,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\_ufunc_config.py
-----------------------------
> """
  Functions for changing global ufunc configuration
  
  This provides helpers which wrap `_get_extobj_dict` and `_make_extobj`, and
def seterr(all=None, divide=None, over=None, under=None, invalid=None):
def geterr():
def setbufsize(size):
def getbufsize():
def seterrcall(func):
def geterrcall():
class _unspecified:
class errstate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_core\__init__.py
-----------------------------
> """
  Contains the core of NumPy: ndarray, ufuncs, dtypes, etc.
  
  Please note that this module is private.  All functions and objects
def _ufunc_reduce(func):
def _DType_reconstruct(scalar_type):
def _DType_reduce(DType):
def __getattr__(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_pyinstaller\tests\pyinstaller-smoke.py
-----------------------------
> """A crude *bit of everything* smoke test to verify PyInstaller compatibility.
  
  PyInstaller typically goes wrong by forgetting to package modules, extension
  modules or shared libraries. This script should aim to touch as many of those

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_pyinstaller\tests\test_pyinstaller.py
-----------------------------
>     """Compile and run pyinstaller-smoke.py using PyInstaller."""
  
      pyinstaller_cli = pytest.importorskip("PyInstaller.__main__").run
  
def test_pyinstaller(mode, tmp_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_pyinstaller\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_pyinstaller\hook-numpy.py
-----------------------------
> """This hook should collect all binary files and any hidden modules that numpy
  needs.
  
  Our (some-what inadequate) docs for writing PyInstaller hooks are kept here:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_pyinstaller\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_add_docstring.py
-----------------------------
> """A module for creating docstrings for sphinx ``data`` domains."""
  
  import re
  import textwrap
def add_newdoc(name: str, value: str, doc: str) -> None:
def _parse_docstrings() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_array_like.py
-----------------------------
>     """A protocol class representing `~class.__array_function__`."""
      def __array_function__(
          self,
          func: Callable[..., Any],
class _SupportsArray(Protocol[_DTypeT_co]):
class _SupportsArrayFunc(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_char_codes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_dtype_like.py
-----------------------------
class _DTypeDictBase(TypedDict):
class _DTypeDict(_DTypeDictBase, total=False):
class _SupportsDType(Protocol[_DTypeT_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_extended_precision.py
-----------------------------
> """A module with platform-specific extended precision
  `numpy.number` subclasses.
  
  The subclasses are defined here (instead of ``__init__.pyi``) such

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_nbit.py
-----------------------------
> """A module with the precisions of platform-specific `~numpy.number`s."""
  
  from typing import TypeAlias
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_nbit_base.py
-----------------------------
> """A module with the precisions of generic `~numpy.number` types."""
  from typing import final
  
  from numpy._utils import set_module
class NBitBase:
class _128Bit(NBitBase):  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]
class _96Bit(_128Bit):  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]
class _64Bit(_96Bit):  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]
class _32Bit(_64Bit):  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]
class _16Bit(_32Bit):  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]
class _8Bit(_16Bit):  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_nested_sequence.py
-----------------------------
> """A module containing the `_NestedSequence` protocol."""
  
  from typing import TYPE_CHECKING, Any, Protocol, TypeVar, runtime_checkable
  
class _NestedSequence(Protocol[_T_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_scalars.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_shape.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\_ufunc.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_typing\__init__.py
-----------------------------
> """Private counterpart of ``numpy.typing``."""
  
  from ._array_like import ArrayLike as ArrayLike
  from ._array_like import NDArray as NDArray

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_utils\_convertions.py
-----------------------------
> """
  A set of methods retained from np.compat module that
  are still used across codebase.
def asunicode(s):
def asbytes(s):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_utils\_inspect.py
-----------------------------
> """Subset of inspect module from upstream python
  
  We use this instead of upstream because upstream inspect is slow to import, and
  significantly contributes to numpy import times. Importing this copy has almost
def ismethod(object):
def isfunction(object):
def iscode(object):
def getargs(co):
def getargspec(func):
def getargvalues(frame):
def joinseq(seq):
def strseq(object, convert, join=joinseq):
def formatargspec(args, varargs=None, varkw=None, defaults=None,
def formatargvalues(args, varargs, varkw, locals,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_utils\_pep440.py
-----------------------------
> """Utility to compare pep440 compatible version strings.
  
  The LooseVersion and StrictVersion classes that distutils provides don't
  work; they don't recognize anything like alpha/beta/rc/dev versions.
class Infinity:
class NegativeInfinity:
def parse(version):
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s):
def _legacy_cmpkey(version):
class Version(_BaseVersion):
def _parse_letter_version(letter, number):
def _parse_local_version(local):
def _cmpkey(epoch, release, pre, post, dev, local):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_utils\__init__.py
-----------------------------
> """
  This is a module for defining private helpers which do not depend on the
  rest of NumPy.
  
def set_module(module):
def _rename_parameter(old_names, new_names, dep_version=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\conftest.py
-----------------------------
> """
  Pytest configuration and fixtures for the Numpy test suite.
def pytest_configure(config):
def pytest_addoption(parser):
def pytest_sessionstart(session):
def pytest_terminal_summary(terminalreporter, exitstatus, config):
def pytest_itemcollected(item):
def check_fpu_mode(request):
def add_np(doctest_namespace):
def env_setup(monkeypatch):
def random_string_list():
def coerce(request):
def na_object(request):
def dtype(na_object, coerce):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\dtypes.py
-----------------------------
> """
  This module is home to specific dtypes related functionality and their classes.
  For more general information about dtypes, also see `numpy.dtype` and
  :ref:`arrays.dtypes`.
def _add_dtype_helper(DType, alias):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\exceptions.py
-----------------------------
> """
  Exceptions and Warnings
  =======================
  
class ComplexWarning(RuntimeWarning):
class ModuleDeprecationWarning(DeprecationWarning):
class VisibleDeprecationWarning(UserWarning):
class RankWarning(RuntimeWarning):
class TooHardError(RuntimeError):
class AxisError(ValueError, IndexError):
class DTypePromotionError(TypeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\matlib.py
-----------------------------
>     """Return a new matrix of given shape and type, without initializing entries.
  
      Parameters
      ----------
def empty(shape, dtype=None, order='C'):
def ones(shape, dtype=None, order='C'):
def zeros(shape, dtype=None, order='C'):
def identity(n, dtype=None):
def eye(n, M=None, k=0, dtype=float, order='C'):
def rand(*args):
def randn(*args):
def repmat(a, m, n):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\version.py
-----------------------------
> """
  Module to expose more detailed version info for the installed `numpy`

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_array_api_info.py
-----------------------------
> """
  Array API Inspection namespace
  
  This is the namespace for inspection functions as defined by the array API
class __array_namespace_info__:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_configtool.py
-----------------------------
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_distributor_init.py
-----------------------------
> """ Distributor init file
  
  Distributors: you can add custom code here to support particular distributions
  of numpy.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_expired_attrs_2_0.py
-----------------------------
> """
  Dict of expired attributes that are discontinued since 2.0 release.
  Each item is associated with a migration note.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_globals.py
-----------------------------
> """
  Module defining global singleton classes.
  
  This module raises a RuntimeError if an attempt to reload it is made. In that
class _NoValueType:
class _CopyMode(enum.Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\_pytesttester.py
-----------------------------
> """
  Pytest test running.
  
  This module implements the ``test()`` function for NumPy modules. The usual
def _show_numpy_info():
class PytestTester:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\__config__.py
-----------------------------
>     """
      Removes empty values in a `dict` recursively
      This ensures we remove values that Meson could not provide to CONFIG
class DisplayModes(Enum):
def _cleanup(d):
def _check_pyyaml():
def show(mode=DisplayModes.stdout.value):
def show_config(mode=DisplayModes.stdout.value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\numpy\__init__.py
-----------------------------
> """
  NumPy
  =====
  
def _delvewheel_patch_1_11_0():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\licenses\_spdx.py
-----------------------------
class SPDXLicense(TypedDict):
class SPDXException(TypedDict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\licenses\__init__.py
-----------------------------
>     """Raised when a license-expression string is invalid
  
      >>> canonicalize_license_expression("invalid")
      Traceback (most recent call last):
class InvalidLicenseExpression(ValueError):
def canonicalize_license_expression(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Environment(TypedDict):
def _normalize_extra_values(results: Any) -> Any:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str | AbstractSet[str]) -> bool:
def _normalize(
def _evaluate_markers(
def format_full_version(info: sys._version_info) -> str:
def default_environment() -> Environment:
class Marker:
def _repair_python_full_version(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\metadata.py
-----------------------------
>         """A minimal implementation of :external:exc:`ExceptionGroup` from Python 3.11.
  
          If :external:exc:`ExceptionGroup` is already defined by Python itself,
          that version is used instead.
class InvalidMetadata(ValueError):
class RawMetadata(TypedDict, total=False):
def _parse_keywords(data: str) -> list[str]:
def _parse_project_urls(data: list[str]) -> dict[str, str]:
def _get_payload(msg: email.message.Message, source: bytes | str) -> str:
def parse_email(data: bytes | str) -> tuple[RawMetadata, dict[str, list[str]]]:
class _Validator(Generic[T]):
class Metadata:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\specifiers.py
-----------------------------
> """
  .. testsetup::
  
      from packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier
def _coerce_version(version: UnparsedVersion) -> Version:
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class Specifier(BaseSpecifier):
def _version_split(version: str) -> list[str]:
def _version_join(components: list[str]) -> str:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: list[str], right: list[str]) -> tuple[list[str], list[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> frozenset[Tag]:
def _get_config_var(name: str, warn: bool = False) -> int | str | None:
def _normalize_string(string: str) -> str:
def _is_threaded_cpython(abis: list[str]) -> bool:
def _abi3_applies(python_version: PythonVersion, threading: bool) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> list[str]:
def cpython_tags(
def _generic_abi() -> list[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: AppleVersion, cpu_arch: str) -> list[str]:
def mac_platforms(
def ios_platforms(
def android_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\utils.py
-----------------------------
>     """
      An invalid distribution name; users should refer to the packaging user guide.
class InvalidName(ValueError):
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str, *, validate: bool = False) -> NormalizedName:
def is_normalized_name(name: str) -> bool:
def canonicalize_version(
def _(version: str, *, strip_trailing_zero: bool = True) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\version.py
-----------------------------
> """
  .. testsetup::
  
      from packaging.version import parse, Version
class _Version(NamedTuple):
def parse(version: str) -> Version:
class InvalidVersion(ValueError):
class _BaseVersion:
class Version(_BaseVersion):
class _TrimmedRelease(Version):
def _parse_letter_version(
def _parse_local_version(local: str | None) -> LocalType | None:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\_elffile.py
-----------------------------
> """
  ELF file parser.
  
  This provides a class ``ELFFile`` that parses an ELF executable in a similar
class ELFInvalid(ValueError):
class EIClass(enum.IntEnum):
class EIData(enum.IntEnum):
class EMachine(enum.IntEnum):
class ELFFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\_manylinux.py
-----------------------------
>     """
      Primary implementation of glibc_version_string using os.confstr.
def _parse_elf(path: str) -> Generator[ELFFile | None, None, None]:
def _is_linux_armhf(executable: str) -> bool:
def _is_linux_i686(executable: str) -> bool:
def _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> str | None:
def _glibc_version_string_ctypes() -> str | None:
def _glibc_version_string() -> str | None:
def _parse_glibc_version(version_str: str) -> tuple[int, int]:
def _get_glibc_version() -> tuple[int, int]:
def _is_compatible(arch: str, version: _GLibCVersion) -> bool:
def platform_tags(archs: Sequence[str]) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> _MuslVersion | None:
def _get_musl_version(executable: str) -> _MuslVersion | None:
def platform_tags(archs: Sequence[str]) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\_parser.py
-----------------------------
> """Handwritten parser of dependency specifiers.
  
  The docstring for each __parse_* function contains EBNF-inspired grammar representing
  the implementation.
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
class ParsedRequirement(NamedTuple):
def parse_requirement(source: str) -> ParsedRequirement:
def _parse_requirement(tokenizer: Tokenizer) -> ParsedRequirement:
def _parse_requirement_details(
def _parse_requirement_marker(
def _parse_extras(tokenizer: Tokenizer) -> list[str]:
def _parse_extras_list(tokenizer: Tokenizer) -> list[str]:
def _parse_specifier(tokenizer: Tokenizer) -> str:
def _parse_version_many(tokenizer: Tokenizer) -> str:
def parse_marker(source: str) -> MarkerList:
def _parse_full_marker(tokenizer: Tokenizer) -> MarkerList:
def _parse_marker(tokenizer: Tokenizer) -> MarkerList:
def _parse_marker_atom(tokenizer: Tokenizer) -> MarkerAtom:
def _parse_marker_item(tokenizer: Tokenizer) -> MarkerItem:
def _parse_marker_var(tokenizer: Tokenizer) -> MarkerVar:
def process_env_var(env_var: str) -> Variable:
def process_python_str(python_str: str) -> Value:
def _parse_marker_op(tokenizer: Tokenizer) -> Op:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\_tokenizer.py
-----------------------------
>     """The provided source text could not be parsed correctly."""
  
      def __init__(
          self,
class Token:
class ParserSyntaxError(Exception):
class Tokenizer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\api\extensions\__init__.py
-----------------------------
> """
  Public API for extending pandas objects.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\api\indexers\__init__.py
-----------------------------
> """
  Public API for Rolling Window Indexers.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\api\interchange\__init__.py
-----------------------------
> """
  Public API for DataFrame interchange protocol.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\api\types\__init__.py
-----------------------------
> """
  Public toolkit API.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\api\typing\__init__.py
-----------------------------
> """
  Public API classes that store intermediate results useful for type-hinting.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\api\__init__.py
-----------------------------
> """ public toolkit API """
  from pandas.api import (
      extensions,
      indexers,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\arrays\__init__.py
-----------------------------
> """
  All of pandas' ExtensionArrays.
  
  See :ref:`extending.extension-types` for more.
def __getattr__(name: str) -> type[NumpyExtensionArray]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\numpy\function.py
-----------------------------
> """
  For compatibility with numpy libraries, pandas functions or methods have to
  accept '*args' and '**kwargs' parameters to accommodate numpy arguments that
  are not actually used or respected in the pandas implementation.
class CompatValidator:
def process_skipna(skipna: bool | ndarray | None, args) -> tuple[bool, Any]:
def validate_argmin_with_skipna(skipna: bool | ndarray | None, args, kwargs) -> bool:
def validate_argmax_with_skipna(skipna: bool | ndarray | None, args, kwargs) -> bool:
def validate_argsort_with_ascending(ascending: bool | int | None, args, kwargs) -> bool:
def validate_clip_with_axis(axis: ndarray, args, kwargs) -> None:
def validate_clip_with_axis(axis: AxisNoneT, args, kwargs) -> AxisNoneT:
def validate_clip_with_axis(
def validate_cum_func_with_skipna(skipna: bool, args, kwargs, name) -> bool:
def validate_take_with_convert(convert: ndarray | bool | None, args, kwargs) -> bool:
def validate_groupby_func(name: str, args, kwargs, allowed=None) -> None:
def validate_resampler_func(method: str, args, kwargs) -> None:
def validate_minmax_axis(axis: AxisInt | None, ndim: int = 1) -> None:
def validate_func(fname, args, kwargs) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\numpy\__init__.py
-----------------------------
> """ support numpy compatibility across versions """
  import warnings
  
  import numpy as np

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\compressors.py
-----------------------------
> """
  Patched ``BZ2File`` and ``LZMAFile`` to handle pickle protocol 5.
def flatten_buffer(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\pickle_compat.py
-----------------------------
> """
  Support pre-0.12 series pickle compatibility.
def load_reduce(self) -> None:
class Unpickler(pkl._Unpickler):
def load_newobj(self) -> None:
def load_newobj_ex(self) -> None:
def load(fh, encoding: str | None = None, is_verbose: bool = False):
def loads(
def patch_pickle() -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\pyarrow.py
-----------------------------
> """ support pyarrow compatibility across versions """
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\_constants.py
-----------------------------
> """
  _constants
  ======
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\_optional.py
-----------------------------
>     """
      Import an optional dependency.
  
      By default, if a dependency is missing an ImportError with a nice
def get_version(module: types.ModuleType) -> str:
def import_optional_dependency(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\compat\__init__.py
-----------------------------
> """
  compat
  ======
  
def set_function_name(f: F, name: str, cls: type) -> F:
def is_platform_little_endian() -> bool:
def is_platform_windows() -> bool:
def is_platform_linux() -> bool:
def is_platform_mac() -> bool:
def is_platform_arm() -> bool:
def is_platform_power() -> bool:
def is_ci_environment() -> bool:
def get_lzma_file() -> type[pandas.compat.compressors.LZMAFile]:
def get_bz2_file() -> type[pandas.compat.compressors.BZ2File]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\arrow\accessors.py
-----------------------------
> """Accessors for arrow-backed data."""
  
  from __future__ import annotations
  
class ArrowAccessor(metaclass=ABCMeta):
class ListAccessor(ArrowAccessor):
class StructAccessor(ArrowAccessor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\arrow\array.py
-----------------------------
>     """
      Convert dtype to a pyarrow type instance.
def get_unit_from_pa_dtype(pa_dtype):
def to_pyarrow_type(
class ArrowExtensionArray(
def transpose_homogeneous_pyarrow(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\arrow\extension_types.py
-----------------------------
> _ERROR_MSG = """\
  Disallowed deserialization of 'arrow.py_extension_type':
  storage_type = {storage_type}
  serialized = {serialized}
class ArrowPeriodType(pyarrow.ExtensionType):
class ArrowIntervalType(pyarrow.ExtensionType):
def patch_pyarrow():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\arrow\_arrow_utils.py
-----------------------------
>     """
      Convert a primitive pyarrow.Array to a numpy array and boolean mask based
      on the buffers of the Array.
  
def pyarrow_array_to_numpy_and_mask(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\arrow\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\sparse\accessor.py
-----------------------------
> """Sparse accessor"""
  from __future__ import annotations
  
  from typing import TYPE_CHECKING
class BaseAccessor:
class SparseAccessor(BaseAccessor, PandasDelegate):
class SparseFrameAccessor(BaseAccessor, PandasDelegate):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\sparse\array.py
-----------------------------
> """
  SparseArray data structure
def _get_fill(arr: SparseArray) -> np.ndarray:
def _sparse_array_op(
def _wrap_result(
class SparseArray(OpsMixin, PandasObject, ExtensionArray):
def _make_sparse(
def make_sparse_index(length: int, indices, kind: Literal["block"]) -> BlockIndex:
def make_sparse_index(length: int, indices, kind: Literal["integer"]) -> IntIndex:
def make_sparse_index(length: int, indices, kind: SparseIndexKind) -> SparseIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\sparse\scipy_sparse.py
-----------------------------
> """
  Interaction with scipy.sparse matrices.
  
  Currently only includes to_coo helpers.
def _check_is_partition(parts: Iterable, whole: Iterable):
def _levels_to_axis(
def _to_ijv(
def sparse_series_to_coo(
def coo_to_sparse_series(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\sparse\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\base.py
-----------------------------
> """
  An interface for extending pandas with custom arrays.
  
  .. warning::
class ExtensionArray:
class ExtensionArraySupportsAnyAll(ExtensionArray):
class ExtensionOpsMixin:
class ExtensionScalarOpsMixin(ExtensionOpsMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\boolean.py
-----------------------------
>     """
      Extension dtype for boolean data.
  
      .. warning::
class BooleanDtype(BaseMaskedDtype):
def coerce_to_array(
class BooleanArray(BaseMaskedArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\categorical.py
-----------------------------
>     """
      Helper for membership check for ``key`` in ``cat``.
  
      This is a helper method for :method:`__contains__`
def _cat_compare_op(op):
def contains(cat, key, container) -> bool:
class Categorical(NDArrayBackedExtensionArray, PandasObject, ObjectStringArrayMixin):
class CategoricalAccessor(PandasDelegate, PandasObject, NoNewAttributesMixin):
def _get_codes_for_values(
def recode_for_categories(
def factorize_from_iterable(values) -> tuple[np.ndarray, Index]:
def factorize_from_iterables(iterables) -> tuple[list[np.ndarray], list[Index]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\datetimelike.py
-----------------------------
>     """
      For PeriodArray methods, dispatch to DatetimeArray and re-wrap the results
      in PeriodArray.  We cannot use ._ndarray directly for the affected
      methods because the i8 data has different semantics on NaT values.
def _make_unpacked_invalid_op(op_name: str):
def _period_dispatch(meth: F) -> F:
class DatetimeLikeArrayMixin(  # type: ignore[misc]
class DatelikeOps(DatetimeLikeArrayMixin):
class TimelikeOps(DatetimeLikeArrayMixin):
def ensure_arraylike_for_datetimelike(
def validate_periods(periods: None) -> None:
def validate_periods(periods: int | float) -> int:
def validate_periods(periods: int | float | None) -> int | None:
def _validate_inferred_freq(
def dtype_to_unit(dtype: DatetimeTZDtype | np.dtype | ArrowDtype) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\datetimes.py
-----------------------------
>     """
      Return a datetime64[ns] dtype appropriate for the given timezone.
  
      Parameters
def tz_to_dtype(tz: tzinfo, unit: str = ...) -> DatetimeTZDtype:
def tz_to_dtype(tz: None, unit: str = ...) -> np.dtype[np.datetime64]:
def tz_to_dtype(
def _field_accessor(name: str, field: str, docstring: str | None = None):
class DatetimeArray(dtl.TimelikeOps, dtl.DatelikeOps):  # type: ignore[misc]
def _sequence_to_dt64(
def _construct_from_dt64_naive(
def objects_to_datetime64(
def maybe_convert_dtype(data, copy: bool, tz: tzinfo | None = None):
def _maybe_infer_tz(tz: tzinfo | None, inferred_tz: tzinfo | None) -> tzinfo | None:
def _validate_dt64_dtype(dtype):
def _validate_tz_from_dtype(
def _infer_tz_from_endpoints(
def _maybe_normalize_endpoints(
def _maybe_localize_point(
def _generate_range(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\floating.py
-----------------------------
>     """
      An ExtensionDtype to hold a single size of floating dtype.
  
      These specific implementations are subclasses of the non-public
class FloatingDtype(NumericDtype):
class FloatingArray(NumericArray):
class Float32Dtype(FloatingDtype):
class Float64Dtype(FloatingDtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\integer.py
-----------------------------
>     """
      An ExtensionDtype to hold a single size & kind of integer dtype.
  
      These specific implementations are subclasses of the non-public
class IntegerDtype(NumericDtype):
class IntegerArray(NumericArray):
class Int8Dtype(IntegerDtype):
class Int16Dtype(IntegerDtype):
class Int32Dtype(IntegerDtype):
class Int64Dtype(IntegerDtype):
class UInt8Dtype(IntegerDtype):
class UInt16Dtype(IntegerDtype):
class UInt32Dtype(IntegerDtype):
class UInt64Dtype(IntegerDtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\interval.py
-----------------------------
> ] = """
  %(summary)s
  
  Parameters
class IntervalArray(IntervalMixin, ExtensionArray):
def _maybe_convert_platform_interval(values) -> ArrayLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\masked.py
-----------------------------
>     """
      Base class for masked arrays (which use _data and _mask to store the data).
  
      numpy based
class BaseMaskedArray(OpsMixin, ExtensionArray):
def transpose_homogeneous_masked_arrays(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\numeric.py
-----------------------------
>         """
          Construct IntegerArray/FloatingArray from pyarrow Array/ChunkedArray.
class NumericDtype(BaseMaskedDtype):
def _coerce_to_data_and_mask(
class NumericArray(BaseMaskedArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\numpy_.py
-----------------------------
>     """
      A pandas ExtensionArray for NumPy data.
  
      This is mostly for internal compatibility, and is not especially
class NumpyExtensionArray(  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\period.py
-----------------------------
>     """
      Pandas ExtensionArray for storing Period data.
  
      Users should use :func:`~pandas.array` to create new instances.
def _field_accessor(name: str, docstring: str | None = None):
class PeriodArray(dtl.DatelikeOps, libperiod.PeriodMixin):  # type: ignore[misc]
def raise_on_incompatible(left, right) -> IncompatibleFrequency:
def period_array(
def validate_dtype_freq(dtype, freq: BaseOffsetT) -> BaseOffsetT:
def validate_dtype_freq(dtype, freq: timedelta | str | None) -> BaseOffset:
def validate_dtype_freq(
def dt64arr_to_periodarr(
def _get_ordinal_range(start, end, periods, freq, mult: int = 1):
def _range_from_fields(
def _make_field_arrays(*fields) -> list[np.ndarray]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\string_.py
-----------------------------
>     """
      Extension dtype for string data.
  
      .. warning::
class StringDtype(StorageExtensionDtype):
class BaseStringArray(ExtensionArray):
class StringArray(BaseStringArray, NumpyExtensionArray):  # type: ignore[misc]
class StringArrayNumpySemantics(StringArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\string_arrow.py
-----------------------------
>     """
      Extension array for string data in a ``pyarrow.ChunkedArray``.
  
      .. warning::
def _chk_pyarrow_available() -> None:
def _is_string_view(typ):
class ArrowStringArray(ObjectStringArrayMixin, ArrowExtensionArray, BaseStringArray):
class ArrowStringArrayNumpySemantics(ArrowStringArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\timedeltas.py
-----------------------------
>     """
      Pandas ExtensionArray for timedelta data.
  
      .. warning::
def _field_accessor(name: str, alias: str, docstring: str):
class TimedeltaArray(dtl.TimelikeOps):
def sequence_to_td64ns(
def _ints_to_td64ns(data, unit: str = "ns"):
def _objects_to_td64ns(data, unit=None, errors: DateTimeErrorChoices = "raise"):
def _validate_td64_dtype(dtype) -> DtypeObj:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\_arrow_string_mixins.py
-----------------------------
class ArrowStringArrayMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\_mixins.py
-----------------------------
>     """
      Decorator to ravel a 2D array before passing it to a cython operation,
      then reshape the result to our own shape.
def ravel_compat(meth: F) -> F:
class NDArrayBackedExtensionArray(NDArrayBacked, ExtensionArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\_ranges.py
-----------------------------
> """
  Helper functions to generate range-like data for DatetimeArray
  (and possibly TimedeltaArray/PeriodArray)
def generate_regular_range(
def _generate_range_overflow_safe(
def _generate_range_overflow_safe_signed(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\_utils.py
-----------------------------
def to_numpy_dtype_inference(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arrays\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\datetimelike_accumulations.py
-----------------------------
> """
  datetimelke_accumulations.py is for accumulations of datetimelike extension arrays
def _cum_func(
def cumsum(values: np.ndarray, *, skipna: bool = True) -> np.ndarray:
def cummin(values: np.ndarray, *, skipna: bool = True):
def cummax(values: np.ndarray, *, skipna: bool = True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\masked_accumulations.py
-----------------------------
> """
  masked_accumulations.py is for accumulation algorithms using a mask-based approach
  for missing values.
def _cum_func(
def cumsum(values: np.ndarray, mask: npt.NDArray[np.bool_], *, skipna: bool = True):
def cumprod(values: np.ndarray, mask: npt.NDArray[np.bool_], *, skipna: bool = True):
def cummin(values: np.ndarray, mask: npt.NDArray[np.bool_], *, skipna: bool = True):
def cummax(values: np.ndarray, mask: npt.NDArray[np.bool_], *, skipna: bool = True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\masked_reductions.py
-----------------------------
> """
  masked_reductions.py is for reduction algorithms using a mask-based approach
  for missing values.
def _reductions(
def sum(
def prod(
def _minmax(
def min(
def max(
def mean(
def var(
def std(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\putmask.py
-----------------------------
> """
  EA-compatible analogue to np.putmask
def putmask_inplace(values: ArrayLike, mask: npt.NDArray[np.bool_], value: Any) -> None:
def putmask_without_repeat(
def validate_putmask(
def extract_bool_array(mask: ArrayLike) -> npt.NDArray[np.bool_]:
def setitem_datetimelike_compat(values: np.ndarray, num_set: int, other):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\quantile.py
-----------------------------
>     """
      Compute the quantiles of the given values for each quantile in `qs`.
  
      Parameters
def quantile_compat(
def quantile_with_mask(
def _nanpercentile_1d(
def _nanpercentile(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\replace.py
-----------------------------
> """
  Methods used by Block.replace and related methods.
def should_use_regex(regex: bool, to_replace: Any) -> bool:
def compare_or_regex_search(
def replace_regex(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\take.py
-----------------------------
>     """
      Specialized Cython take which sets NaN values in one pass
  
      This dispatches to ``take`` defined on ExtensionArrays.
def take_nd(
def take_nd(
def take_nd(
def _take_nd_ndarray(
def take_1d(
def take_2d_multi(
def _get_take_nd_function_cached(
def _get_take_nd_function(
def _view_wrapper(f, arr_dtype=None, out_dtype=None, fill_wrap=None):
def _convert_wrapper(f, conv_dtype):
def _take_nd_object(
def _take_2d_multi_object(
def _take_preprocess_indexer_and_fill_value(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\transforms.py
-----------------------------
> """
  transforms.py is for shape-preserving functions.
def shift(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\array_algos\__init__.py
-----------------------------
> """
  core.array_algos is for algorithms that operate on ndarray and ExtensionArray.
  These should:
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\align.py
-----------------------------
> """
  Core eval alignment algorithms.
def _align_core_single_unary_op(
def _zip_axes_from_type(
def _any_pandas_objects(terms) -> bool:
def _filter_special_cases(f) -> Callable[[F], F]:
def _align_core(terms):
def align_terms(terms):
def reconstruct_object(typ, obj, axes, dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\api.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\check.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\common.py
-----------------------------
>     """
      If we have bytes, decode them to unicode.
def ensure_decoded(s) -> str:
def result_type_many(*arrays_and_dtypes):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\engines.py
-----------------------------
> """
  Engine classes for :func:`~pandas.eval`
def _check_ne_builtin_clash(expr: Expr) -> None:
class AbstractEngine(metaclass=abc.ABCMeta):
class NumExprEngine(AbstractEngine):
class PythonEngine(AbstractEngine):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\eval.py
-----------------------------
> """
  Top level ``eval`` module.
def _check_engine(engine: str | None) -> str:
def _check_parser(parser: str):
def _check_resolvers(resolvers):
def _check_expression(expr):
def _convert_expression(expr) -> str:
def _check_for_locals(expr: str, stack_level: int, parser: str):
def eval(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\expr.py
-----------------------------
> """
  :func:`~pandas.eval` parsers.
def _rewrite_assign(tok: tuple[int, str]) -> tuple[int, str]:
def _replace_booleans(tok: tuple[int, str]) -> tuple[int, str]:
def _replace_locals(tok: tuple[int, str]) -> tuple[int, str]:
def _compose2(f, g):
def _compose(*funcs):
def _preparse(
def _is_type(t):
def _filter_nodes(superclass, all_nodes=_all_nodes):
def _node_not_implemented(node_name: str) -> Callable[..., None]:
def disallow(nodes: set[str]) -> Callable[[type[_T]], type[_T]]:
def _op_maker(op_class, op_symbol):
def add_ops(op_classes):
class BaseExprVisitor(ast.NodeVisitor):
class PandasExprVisitor(BaseExprVisitor):
class PythonExprVisitor(BaseExprVisitor):
class Expr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\expressions.py
-----------------------------
> """
  Expressions
  -----------
  
def set_use_numexpr(v: bool = True) -> None:
def set_numexpr_threads(n=None) -> None:
def _evaluate_standard(op, op_str, a, b):
def _can_use_numexpr(op, op_str, a, b, dtype_check) -> bool:
def _evaluate_numexpr(op, op_str, a, b):
def _where_standard(cond, a, b):
def _where_numexpr(cond, a, b):
def _has_bool_dtype(x):
def _bool_arith_fallback(op_str, a, b) -> bool:
def evaluate(op, a, b, use_numexpr: bool = True):
def where(cond, a, b, use_numexpr: bool = True):
def set_test_mode(v: bool = True) -> None:
def _store_test_result(used_numexpr: bool) -> None:
def get_test_result() -> list[bool]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\ops.py
-----------------------------
> """
  Operator classes for eval.
class Term:
class Constant(Term):
class Op:
def _in(x, y):
def _not_in(x, y):
def is_term(obj) -> bool:
class BinOp(Op):
def isnumeric(dtype) -> bool:
class UnaryOp(Op):
class MathCall(Op):
class FuncNode:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\parsing.py
-----------------------------
> """
  :func:`~pandas.eval` source string parsing functions
def create_valid_python_identifier(name: str) -> str:
def clean_backtick_quoted_toks(tok: tuple[int, str]) -> tuple[int, str]:
def clean_column_name(name: Hashable) -> Hashable:
def tokenize_backtick_quoted_string(
def tokenize_string(source: str) -> Iterator[tuple[int, str]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\pytables.py
-----------------------------
> """ manage PyTables query interface via Expressions """
  from __future__ import annotations
  
  import ast
class PyTablesScope(_scope.Scope):
class Term(ops.Term):
class Constant(Term):
class BinOp(ops.BinOp):
class FilterBinOp(BinOp):
class JointFilterBinOp(FilterBinOp):
class ConditionBinOp(BinOp):
class JointConditionBinOp(ConditionBinOp):
class UnaryOp(ops.UnaryOp):
class PyTablesExprVisitor(BaseExprVisitor):
def _validate_where(w):
class PyTablesExpr(expr.Expr):
class TermValue:
def maybe_expression(s) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\scope.py
-----------------------------
> """
  Module for scope operations
class DeepChainMap(ChainMap[_KT, _VT]):
def ensure_scope(
def _replacer(x) -> str:
def _raw_hex_id(obj) -> str:
def _get_pretty_string(obj) -> str:
class Scope:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\computation\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\api.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\astype.py
-----------------------------
> """
  Functions for implementing 'astype' methods according to pandas conventions,
  particularly ones that differ from numpy.
def _astype_nansafe(
def _astype_nansafe(
def _astype_nansafe(
def _astype_float_to_int_nansafe(
def astype_array(values: ArrayLike, dtype: DtypeObj, copy: bool = False) -> ArrayLike:
def astype_array_safe(
def astype_is_view(dtype: DtypeObj, new_dtype: DtypeObj) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\base.py
-----------------------------
> """
  Extend pandas with custom array types.
class ExtensionDtype:
class StorageExtensionDtype(ExtensionDtype):
def register_extension_dtype(cls: type_t[ExtensionDtypeT]) -> type_t[ExtensionDtypeT]:
class Registry:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\cast.py
-----------------------------
> """
  Routines for casting.
def maybe_convert_platform(
def is_nested_object(obj) -> bool:
def maybe_box_datetimelike(value: Scalar, dtype: Dtype | None = None) -> Scalar:
def maybe_box_native(value: Scalar | None | NAType) -> Scalar | None | NAType:
def _maybe_unbox_datetimelike(value: Scalar, dtype: DtypeObj) -> Scalar:
def _disallow_mismatched_datetimelike(value, dtype: DtypeObj):
def maybe_downcast_to_dtype(result: np.ndarray, dtype: str | np.dtype) -> np.ndarray:
def maybe_downcast_to_dtype(result: ExtensionArray, dtype: str | np.dtype) -> ArrayLike:
def maybe_downcast_to_dtype(result: ArrayLike, dtype: str | np.dtype) -> ArrayLike:
def maybe_downcast_numeric(
def maybe_downcast_numeric(
def maybe_downcast_numeric(
def maybe_upcast_numeric_to_64bit(arr: NumpyIndexT) -> NumpyIndexT:
def maybe_cast_pointwise_result(
def _maybe_cast_to_extension_array(
def ensure_dtype_can_hold_na(dtype: np.dtype) -> np.dtype:
def ensure_dtype_can_hold_na(dtype: ExtensionDtype) -> ExtensionDtype:
def ensure_dtype_can_hold_na(dtype: DtypeObj) -> DtypeObj:
def maybe_promote(dtype: np.dtype, fill_value=np.nan):
def _maybe_promote_cached(dtype, fill_value, fill_value_type):
def _maybe_promote(dtype: np.dtype, fill_value=np.nan):
def _ensure_dtype_type(value, dtype: np.dtype):
def infer_dtype_from(val) -> tuple[DtypeObj, Any]:
def infer_dtype_from_scalar(val) -> tuple[DtypeObj, Any]:
def dict_compat(d: dict[Scalar, Scalar]) -> dict[Scalar, Scalar]:
def infer_dtype_from_array(arr) -> tuple[DtypeObj, ArrayLike]:
def _maybe_infer_dtype_type(element):
def invalidate_string_dtypes(dtype_set: set[DtypeObj]) -> None:
def coerce_indexer_dtype(indexer, categories) -> np.ndarray:
def convert_dtypes(
def maybe_infer_to_datetimelike(
def maybe_cast_to_datetime(
def _ensure_nanosecond_dtype(dtype: DtypeObj) -> None:
def find_result_type(left_dtype: DtypeObj, right: Any) -> DtypeObj:
def common_dtype_categorical_compat(
def np_find_common_type(*dtypes: np.dtype) -> np.dtype:
def find_common_type(types: list[np.dtype]) -> np.dtype:
def find_common_type(types: list[ExtensionDtype]) -> DtypeObj:
def find_common_type(types: list[DtypeObj]) -> DtypeObj:
def find_common_type(types):
def construct_2d_arraylike_from_scalar(
def construct_1d_arraylike_from_scalar(
def _maybe_box_and_unbox_datetimelike(value: Scalar, dtype: DtypeObj):
def construct_1d_object_array_from_listlike(values: Collection) -> np.ndarray:
def maybe_cast_to_integer_array(arr: list | np.ndarray, dtype: np.dtype) -> np.ndarray:
def can_hold_element(arr: ArrayLike, element: Any) -> bool:
def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
def _dtype_can_hold_range(rng: range, dtype: np.dtype) -> bool:
def np_can_cast_scalar(element: Scalar, dtype: np.dtype) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\common.py
-----------------------------
> """
  Common type operations.
def ensure_str(value: bytes | Any) -> str:
def ensure_python_int(value: int | np.integer) -> int:
def classes(*klasses) -> Callable:
def _classes_and_not_datetimelike(*klasses) -> Callable:
def is_object_dtype(arr_or_dtype) -> bool:
def is_sparse(arr) -> bool:
def is_scipy_sparse(arr) -> bool:
def is_datetime64_dtype(arr_or_dtype) -> bool:
def is_datetime64tz_dtype(arr_or_dtype) -> bool:
def is_timedelta64_dtype(arr_or_dtype) -> bool:
def is_period_dtype(arr_or_dtype) -> bool:
def is_interval_dtype(arr_or_dtype) -> bool:
def is_categorical_dtype(arr_or_dtype) -> bool:
def is_string_or_object_np_dtype(dtype: np.dtype) -> bool:
def is_string_dtype(arr_or_dtype) -> bool:
def is_dtype_equal(source, target) -> bool:
def is_integer_dtype(arr_or_dtype) -> bool:
def is_signed_integer_dtype(arr_or_dtype) -> bool:
def is_unsigned_integer_dtype(arr_or_dtype) -> bool:
def is_int64_dtype(arr_or_dtype) -> bool:
def is_datetime64_any_dtype(arr_or_dtype) -> bool:
def is_datetime64_ns_dtype(arr_or_dtype) -> bool:
def is_timedelta64_ns_dtype(arr_or_dtype) -> bool:
def is_numeric_v_string_like(a: ArrayLike, b) -> bool:
def needs_i8_conversion(dtype: DtypeObj | None) -> bool:
def is_numeric_dtype(arr_or_dtype) -> bool:
def is_any_real_numeric_dtype(arr_or_dtype) -> bool:
def is_float_dtype(arr_or_dtype) -> bool:
def is_bool_dtype(arr_or_dtype) -> bool:
def is_1d_only_ea_dtype(dtype: DtypeObj | None) -> bool:
def is_extension_array_dtype(arr_or_dtype) -> bool:
def is_ea_or_datetimelike_dtype(dtype: DtypeObj | None) -> bool:
def is_complex_dtype(arr_or_dtype) -> bool:
def _is_dtype(arr_or_dtype, condition) -> bool:
def _get_dtype(arr_or_dtype) -> DtypeObj:
def _is_dtype_type(arr_or_dtype, condition) -> bool:
def infer_dtype_from_object(dtype) -> type:
def _validate_date_like_dtype(dtype) -> None:
def validate_all_hashable(*args, error_name: str | None = None) -> None:
def pandas_dtype(dtype) -> DtypeObj:
def is_all_strings(value: ArrayLike) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\concat.py
-----------------------------
> """
  Utility functions related to concat.
def _is_nonempty(x, axis) -> bool:
def concat_compat(
def _get_result_dtype(
def union_categoricals(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\dtypes.py
-----------------------------
> """
  Define extension dtypes.
class PandasExtensionDtype(ExtensionDtype):
class CategoricalDtypeType(type):
class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
class DatetimeTZDtype(PandasExtensionDtype):
class PeriodDtype(PeriodDtypeBase, PandasExtensionDtype):
class IntervalDtype(PandasExtensionDtype):
class NumpyEADtype(ExtensionDtype):
class BaseMaskedDtype(ExtensionDtype):
class SparseDtype(ExtensionDtype):
class ArrowDtype(StorageExtensionDtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\generic.py
-----------------------------
> """ define generic base classes for pandas objects """
  from __future__ import annotations
  
  from typing import (
def create_pandas_abc_type(name, attr, comp):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\inference.py
-----------------------------
> """ basic inference routines """
  
  from __future__ import annotations
  
def is_number(obj) -> TypeGuard[Number | np.number]:
def iterable_not_string(obj) -> bool:
def is_file_like(obj) -> bool:
def is_re(obj) -> TypeGuard[Pattern]:
def is_re_compilable(obj) -> bool:
def is_array_like(obj) -> bool:
def is_nested_list_like(obj) -> bool:
def is_dict_like(obj) -> bool:
def is_named_tuple(obj) -> bool:
def is_hashable(obj) -> TypeGuard[Hashable]:
def is_sequence(obj) -> bool:
def is_dataclass(item) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\missing.py
-----------------------------
> """
  missing types & inference
def isna(obj: Scalar | Pattern) -> bool:
def isna(
def isna(obj: NDFrameT) -> NDFrameT:
def isna(obj: NDFrameT | ArrayLike | Index | list) -> NDFrameT | npt.NDArray[np.bool_]:
def isna(obj: object) -> bool | npt.NDArray[np.bool_] | NDFrame:
def isna(obj: object) -> bool | npt.NDArray[np.bool_] | NDFrame:
def _isna(obj, inf_as_na: bool = False):
def _use_inf_as_na(key) -> None:
def _isna_array(values: ArrayLike, inf_as_na: bool = False):
def _isna_string_dtype(values: np.ndarray, inf_as_na: bool) -> npt.NDArray[np.bool_]:
def _has_record_inf_value(record_as_array: np.ndarray) -> np.bool_:
def _isna_recarray_dtype(
def notna(obj: Scalar) -> bool:
def notna(
def notna(obj: NDFrameT) -> NDFrameT:
def notna(obj: NDFrameT | ArrayLike | Index | list) -> NDFrameT | npt.NDArray[np.bool_]:
def notna(obj: object) -> bool | npt.NDArray[np.bool_] | NDFrame:
def notna(obj: object) -> bool | npt.NDArray[np.bool_] | NDFrame:
def array_equivalent(
def _array_equivalent_float(left: np.ndarray, right: np.ndarray) -> bool:
def _array_equivalent_datetimelike(left: np.ndarray, right: np.ndarray):
def _array_equivalent_object(left: np.ndarray, right: np.ndarray, strict_nan: bool):
def array_equals(left: ArrayLike, right: ArrayLike) -> bool:
def infer_fill_value(val):
def construct_1d_array_from_inferred_fill_value(
def maybe_fill(arr: np.ndarray) -> np.ndarray:
def na_value_for_dtype(dtype: DtypeObj, compat: bool = True):
def remove_na_arraylike(arr: Series | Index | np.ndarray):
def is_valid_na_for_dtype(obj, dtype: DtypeObj) -> bool:
def isna_all(arr: ArrayLike) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\dtypes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\base.py
-----------------------------
> """
  Provide basic components for groupby.
class OutputKey:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\categorical.py
-----------------------------
>     """
      Code the categories to ensure we can groupby for categoricals.
  
      If observed=True, we return a new Categorical with the observed
def recode_for_groupby(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\generic.py
-----------------------------
> """
  Define the SeriesGroupBy and DataFrameGroupBy
  classes that hold the groupby interfaces (and some implementations).
  
class NamedAgg(NamedTuple):
class SeriesGroupBy(GroupBy[Series]):
class DataFrameGroupBy(GroupBy[DataFrame]):
def _wrap_transform_general_frame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\groupby.py
-----------------------------
> """
  Provide the groupby split-apply-combine paradigm. Define the GroupBy
  class providing the base-class of operations.
  
class providing the base-class of operations.
class GroupByPlot(PandasObject):
class BaseGroupBy(PandasObject, SelectionMixin[NDFrameT], GroupByIndexingMixin):
class GroupBy(BaseGroupBy[NDFrameT]):
def get_groupby(
def _insert_quantile_level(idx: Index, qs: npt.NDArray[np.float64]) -> MultiIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\grouper.py
-----------------------------
> """
  Provide user facing operators for doing the split part of the
  split-apply-combine paradigm.
class Grouper:
class Grouping:
def get_grouper(
def _is_label_like(val) -> bool:
def _convert_grouper(axis: Index, grouper):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\indexing.py
-----------------------------
>     """
      Mixin for adding ._positional_selector to GroupBy.
class GroupByIndexingMixin:
class GroupByPositionalSelector:
class GroupByNthSelector:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\numba_.py
-----------------------------
> """Common utilities for Numba operations with groupby ops"""
  from __future__ import annotations
  
  import functools
def validate_udf(func: Callable) -> None:
def generate_numba_agg_func(
def generate_numba_transform_func(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\ops.py
-----------------------------
> """
  Provide classes to perform the groupby aggregate operations.
  
  These are not exposed to the user and provide implementations of the grouping
def check_result_array(obj, dtype) -> None:
def extract_result(res):
class WrappedCythonOp:
class BaseGrouper:
class BinGrouper(BaseGrouper):
def _is_indexed_like(obj, axes, axis: AxisInt) -> bool:
class DataSplitter(Generic[NDFrameT]):
class SeriesSplitter(DataSplitter):
class FrameSplitter(DataSplitter):
def _get_splitter(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\groupby\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexers\objects.py
-----------------------------
> """Indexer objects for computing start/end window bounds for rolling operations"""
  from __future__ import annotations
  
  from datetime import timedelta
class BaseIndexer:
class FixedWindowIndexer(BaseIndexer):
class VariableWindowIndexer(BaseIndexer):
class VariableOffsetWindowIndexer(BaseIndexer):
class ExpandingIndexer(BaseIndexer):
class FixedForwardWindowIndexer(BaseIndexer):
class GroupbyIndexer(BaseIndexer):
class ExponentialMovingWindowIndexer(BaseIndexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexers\utils.py
-----------------------------
> """
  Low-dependency indexing utilities.
def is_valid_positional_slice(slc: slice) -> bool:
def is_list_like_indexer(key) -> bool:
def is_scalar_indexer(indexer, ndim: int) -> bool:
def is_empty_indexer(indexer) -> bool:
def check_setitem_lengths(indexer, value, values) -> bool:
def validate_indices(indices: np.ndarray, n: int) -> None:
def maybe_convert_indices(indices, n: int, verify: bool = True) -> np.ndarray:
def length_of_indexer(indexer, target=None) -> int:
def disallow_ndim_indexing(result) -> None:
def unpack_1tuple(tup):
def check_key_length(columns: Index, key, value: DataFrame) -> None:
def unpack_tuple_and_ellipses(item: tuple):
def check_array_indexer(array: AnyArrayLike, indexer: Any) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexers\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\accessors.py
-----------------------------
> """
  datetimelike delegation
class Properties(PandasDelegate, PandasObject, NoNewAttributesMixin):
class ArrowTemporalProperties(PandasDelegate, PandasObject, NoNewAttributesMixin):
class DatetimeProperties(Properties):
class TimedeltaProperties(Properties):
class PeriodProperties(Properties):
class CombinedDatetimelikeProperties(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\api.py
-----------------------------
>     """\
  Sorting because non-concatenation axis is not aligned. A future version
  of pandas will change to not sort by default.
  
def get_objs_combined_axis(
def _get_distinct_objs(objs: list[Index]) -> list[Index]:
def _get_combined_index(
def safe_sort_index(index: Index) -> Index:
def union_indexes(indexes, sort: bool | None = True) -> Index:
def _sanitize_and_check(indexes):
def all_indexes_same(indexes) -> bool:
def default_index(n: int) -> RangeIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\base.py
-----------------------------
>     """
      Decorator to simplify 'return_indexers' checks in Index.join.
def _maybe_return_indexers(meth: F) -> F:
def _new_Index(cls, d):
class Index(IndexOpsMixin, PandasObject):
def ensure_index_from_sequences(sequences, names=None) -> Index:
def ensure_index(index_like: Axes, copy: bool = False) -> Index:
def ensure_has_len(seq):
def trim_front(strings: list[str]) -> list[str]:
def _validate_join_method(method: str) -> None:
def maybe_extract_name(name, obj, cls) -> Hashable:
def get_unanimous_names(*indexes: Index) -> tuple[Hashable, ...]:
def _unpack_nested_dtype(other: Index) -> DtypeObj:
def _maybe_try_sort(result: Index | ArrayLike, sort: bool | None):
def get_values_for_csv(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\category.py
-----------------------------
>     """
      Index based on an underlying :class:`Categorical`.
  
      CategoricalIndex, like Categorical, can only take on a limited,
class CategoricalIndex(NDArrayBackedExtensionIndex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\datetimelike.py
-----------------------------
> """
  Base and utility classes for tseries type pandas objects.
class DatetimeIndexOpsMixin(NDArrayBackedExtensionIndex, ABC):
class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\datetimes.py
-----------------------------
>     """
      This is called upon unpickling, rather than the default which doesn't
      have arguments and breaks __new__
def _new_DatetimeIndex(cls, d):
class DatetimeIndex(DatetimeTimedeltaMixin):
def date_range(
def bdate_range(
def _time_to_micros(time_obj: dt.time) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\extension.py
-----------------------------
> """
  Shared methods for Index subclasses backed by ExtensionArray.
def _inherit_from_data(
def inherit_names(
class ExtensionIndex(Index):
class NDArrayBackedExtensionIndex(ExtensionIndex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\frozen.py
-----------------------------
> """
  frozen (immutable) data structures to support MultiIndexing
  
  These are used for:
class FrozenList(PandasObject, list):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\interval.py
-----------------------------
> """ define the IntervalIndex """
  from __future__ import annotations
  
  from operator import (
def _get_next_label(label):
def _get_prev_label(label):
def _new_IntervalIndex(cls, d):
class IntervalIndex(ExtensionIndex):
def _is_valid_endpoint(endpoint) -> bool:
def _is_type_compatible(a, b) -> bool:
def interval_range(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\multi.py
-----------------------------
>     """
      This class manages a MultiIndex by mapping label combinations to positive
      integers.
class MultiIndexUIntEngine(libindex.BaseMultiIndexCodesEngine, libindex.UInt64Engine):
class MultiIndexPyIntEngine(libindex.BaseMultiIndexCodesEngine, libindex.ObjectEngine):
def names_compat(meth: F) -> F:
class MultiIndex(Index):
def _lexsort_depth(codes: list[np.ndarray], nlevels: int) -> int:
def sparsify_labels(label_list, start: int = 0, sentinel: object = ""):
def _get_na_rep(dtype: DtypeObj) -> str:
def maybe_droplevels(index: Index, key) -> Index:
def _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:
def _require_listlike(level, arr, arrname: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\period.py
-----------------------------
>     """
      Immutable ndarray holding ordinal values indicating regular periods in time.
  
      Index keys are boxed to Period objects which carries the metadata (eg,
def _new_PeriodIndex(cls, **d):
class PeriodIndex(DatetimeIndexOpsMixin):
def period_range(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\range.py
-----------------------------
>     """
      Immutable Index implementing a monotonic integer range.
  
      RangeIndex is a memory-saving special case of an Index limited to representing
class RangeIndex(Index):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\timedeltas.py
-----------------------------
> """ implement the TimedeltaIndex """
  from __future__ import annotations
  
  from typing import TYPE_CHECKING
class TimedeltaIndex(DatetimeTimedeltaMixin):
def timedelta_range(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\buffer.py
-----------------------------
>     """
      Data in the buffer is guaranteed to be contiguous in memory.
class PandasBuffer(Buffer):
class PandasBufferPyarrow(Buffer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\column.py
-----------------------------
>     """
      A column object, with only the methods and properties required by the
      interchange protocol defined.
      A column can contain one or more chunks. Each chunk can contain up to three
class PandasColumn(Column):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\dataframe.py
-----------------------------
>     """
      A data frame class, with only the methods required by the interchange
      protocol defined.
      Instances of this (private) class are returned from
class PandasDataFrameXchg(DataFrameXchg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\dataframe_protocol.py
-----------------------------
> """
  A verbatim copy (vendored) of the spec from https://github.com/data-apis/dataframe-api
class DlpackDeviceType(enum.IntEnum):
class DtypeKind(enum.IntEnum):
class ColumnNullType(enum.IntEnum):
class ColumnBuffers(TypedDict):
class CategoricalDescription(TypedDict):
class Buffer(ABC):
class Column(ABC):
class DataFrame(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\from_dataframe.py
-----------------------------
>     """
      Build a ``pd.DataFrame`` from any DataFrame supporting the interchange protocol.
  
      .. note::
def from_dataframe(df, allow_copy: bool = True) -> pd.DataFrame:
def _from_dataframe(df: DataFrameXchg, allow_copy: bool = True):
def protocol_df_chunk_to_pandas(df: DataFrameXchg) -> pd.DataFrame:
def primitive_column_to_ndarray(col: Column) -> tuple[np.ndarray, Any]:
def categorical_column_to_series(col: Column) -> tuple[pd.Series, Any]:
def string_column_to_ndarray(col: Column) -> tuple[np.ndarray, Any]:
def parse_datetime_format_str(format_str, data) -> pd.Series | np.ndarray:
def datetime_column_to_ndarray(col: Column) -> tuple[np.ndarray | pd.Series, Any]:
def buffer_to_ndarray(
def set_nulls(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\utils.py
-----------------------------
> """
  Utility functions and objects for implementing the interchange API.
class ArrowCTypes:
class Endianness:
def dtype_to_arrow_c_fmt(dtype: DtypeObj) -> str:
def maybe_rechunk(series: pd.Series, *, allow_copy: bool) -> pd.Series | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\interchange\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\api.py
-----------------------------
> """
  This is a pseudo-public API for downstream libraries.  We ask that downstream
  authors
  
def make_block(
def maybe_infer_ndim(values, placement: BlockPlacement, ndim: int | None) -> int:
def __getattr__(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\array_manager.py
-----------------------------
> """
  Experimental manager based on storing a collection of 1D arrays
class BaseArrayManager(DataManager):
class ArrayManager(BaseArrayManager):
class SingleArrayManager(BaseArrayManager, SingleDataManager):
class NullArrayProxy:
def concat_arrays(to_concat: list) -> ArrayLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\base.py
-----------------------------
> """
  Base class for the internal managers. Both BlockManager and ArrayManager
  inherit from this class.
class _AlreadyWarned:
class DataManager(PandasObject):
class SingleDataManager(DataManager):
def interleaved_dtype(dtypes: list[DtypeObj]) -> DtypeObj | None:
def ensure_np_dtype(dtype: DtypeObj) -> np.dtype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\blocks.py
-----------------------------
> COW_WARNING_GENERAL_MSG = """\
  Setting a value on a view: behaviour will change in pandas 3.0.
  You are mutating a Series or DataFrame object, and currently this mutation will
  also have effect on other Series or DataFrame objects that share data with this
def maybe_split(meth: F) -> F:
class Block(PandasObject, libinternals.Block):
class EABackedBlock(Block):
class ExtensionBlock(EABackedBlock):
class NumpyBlock(Block):
class NumericBlock(NumpyBlock):
class ObjectBlock(NumpyBlock):
class NDArrayBackedExtensionBlock(EABackedBlock):
class DatetimeLikeBlock(NDArrayBackedExtensionBlock):
class DatetimeTZBlock(DatetimeLikeBlock):
def maybe_coerce_values(values: ArrayLike) -> ArrayLike:
def get_block_type(dtype: DtypeObj) -> type[Block]:
def new_block_2d(
def new_block(
def check_ndim(values, placement: BlockPlacement, ndim: int) -> None:
def extract_pandas_array(
def extend_blocks(result, blocks=None) -> list[Block]:
def ensure_block_shape(values: ArrayLike, ndim: int = 1) -> ArrayLike:
def external_values(values: ArrayLike) -> ArrayLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\concat.py
-----------------------------
>     """
      Concatenate array managers into one.
  
      Parameters
def _concatenate_array_managers(
def concatenate_managers(
def _maybe_reindex_columns_na_proxy(
def _is_homogeneous_mgr(mgr: BlockManager, first_dtype: DtypeObj) -> bool:
def _concat_homogeneous_fastpath(
def _get_combined_plan(
def _get_block_for_concat_plan(
class JoinUnit:
def _concatenate_join_units(join_units: list[JoinUnit], copy: bool) -> ArrayLike:
def _dtype_to_na_value(dtype: DtypeObj, has_none_blocks: bool):
def _get_empty_dtype(join_units: Sequence[JoinUnit]) -> tuple[DtypeObj, DtypeObj]:
def _is_uniform_join_units(join_units: list[JoinUnit]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\construction.py
-----------------------------
> """
  Functions for preparing various inputs passed to the DataFrame or Series
  constructors before passing them to a BlockManager.
def arrays_to_mgr(
def rec_array_to_mgr(
def mgr_to_mgr(mgr, typ: str, copy: bool = True) -> Manager:
def ndarray_to_mgr(
def _check_values_indices_shape_match(
def dict_to_mgr(
def nested_data_to_arrays(
def treat_as_nested(data) -> bool:
def _prep_ndarraylike(values, copy: bool = True) -> np.ndarray:
def _ensure_2d(values: np.ndarray) -> np.ndarray:
def _homogenize(
def _extract_index(data) -> Index:
def reorder_arrays(
def _get_names_from_index(data) -> Index:
def _get_axes(
def dataclasses_to_dicts(data):
def to_arrays(
def _list_to_arrays(data: list[tuple | list]) -> np.ndarray:
def _list_of_series_to_arrays(
def _list_of_dict_to_arrays(
def _finalize_columns_and_data(
def _validate_or_indexify_columns(
def convert_object_array(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\managers.py
-----------------------------
>     """
      Core internal data structure to implement DataFrame, Series, etc.
  
      Manage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a
class BaseBlockManager(DataManager):
class BlockManager(libinternals.BlockManager, BaseBlockManager):
class SingleBlockManager(BaseBlockManager, SingleDataManager):
def create_block_manager_from_blocks(
def create_block_manager_from_column_arrays(
def raise_construction_error(
def _grouping_func(tup: tuple[int, ArrayLike]) -> tuple[int, DtypeObj]:
def _form_blocks(arrays: list[ArrayLike], consolidate: bool, refs: list) -> list[Block]:
def _tuples_to_blocks_no_consolidate(tuples, refs) -> list[Block]:
def _stack_arrays(tuples, dtype: np.dtype):
def _consolidate(blocks: tuple[Block, ...]) -> tuple[Block, ...]:
def _merge_blocks(
def _fast_count_smallints(arr: npt.NDArray[np.intp]):
def _preprocess_slice_or_indexer(
def make_na_array(dtype: DtypeObj, shape: Shape, fill_value) -> ArrayLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\ops.py
-----------------------------
>     """
      Reset mgr_locs to correspond to our original DataFrame.
class BlockPairInfo(NamedTuple):
def _iter_block_pairs(
def operate_blockwise(
def _reset_block_mgr_locs(nbs: list[Block], locs) -> None:
def _get_same_shape_values(
def blockwise_all(left: BlockManager, right: BlockManager, op) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\internals\__init__.py
-----------------------------
def __getattr__(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\methods\describe.py
-----------------------------
> """
  Module responsible for execution of NDFrame.describe() method.
  
  Method NDFrame.describe() delegates actual execution to function describe_ndframe().
def describe_ndframe(
class NDFrameDescriberAbstract(ABC):
class SeriesDescriber(NDFrameDescriberAbstract):
class DataFrameDescriber(NDFrameDescriberAbstract):
def reorder_columns(ldesc: Sequence[Series]) -> list[Hashable]:
def describe_numeric_1d(series: Series, percentiles: Sequence[float]) -> Series:
def describe_categorical_1d(
def describe_timestamp_as_categorical_1d(
def describe_timestamp_1d(data: Series, percentiles: Sequence[float]) -> Series:
def select_describe_func(
def _refine_percentiles(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\methods\selectn.py
-----------------------------
> """
  Implementation of nlargest and nsmallest.
class SelectN:
class SelectNSeries(SelectN):
class SelectNFrame(SelectN):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\methods\to_dict.py
-----------------------------
>     """
      Convert the DataFrame to a dictionary.
  
      The type of the key-value pairs can be customized with the parameters
def to_dict(
def to_dict(
def to_dict(
def to_dict(
def to_dict(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\array_ops.py
-----------------------------
> """
  Functions for arithmetic and comparison operations on NumPy arrays and
  ExtensionArrays.
def fill_binop(left, right, fill_value):
def comp_method_OBJECT_ARRAY(op, x, y):
def _masked_arith_op(x: np.ndarray, y, op):
def _na_arithmetic_op(left: np.ndarray, right, op, is_cmp: bool = False):
def arithmetic_op(left: ArrayLike, right: Any, op):
def comparison_op(left: ArrayLike, right: Any, op) -> ArrayLike:
def na_logical_op(x: np.ndarray, y, op):
def logical_op(left: ArrayLike, right: Any, op) -> ArrayLike:
def get_array_op(op):
def maybe_prepare_scalar_for_op(obj, shape: Shape):
def _bool_arith_check(op, a: np.ndarray, b):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\common.py
-----------------------------
> """
  Boilerplate functions used in defining binary operations.
def unpack_zerodim_and_defer(name: str) -> Callable[[F], F]:
def _unpack_zerodim_and_defer(method, name: str):
def get_op_result_name(left, right):
def _maybe_match_name(a, b):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\dispatch.py
-----------------------------
> """
  Functions for defining unary operations.
def should_extension_dispatch(left: ArrayLike, right: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\docstrings.py
-----------------------------
> """
  Templating for ops docstrings
def make_flex_doc(op_name: str, typ: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\invalid.py
-----------------------------
> """
  Templates for invalid operations.
def invalid_comparison(left, right, op) -> npt.NDArray[np.bool_]:
def make_invalid_op(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\mask_ops.py
-----------------------------
> """
  Ops for masked arrays.
def kleene_or(
def kleene_xor(
def kleene_and(
def raise_for_nan(value, method: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\missing.py
-----------------------------
> """
  Missing data handling for arithmetic operations.
  
  In particular, pandas conventions regarding division by zero differ
def _fill_zeros(result: np.ndarray, x, y):
def mask_zero_div_zero(x, y, result: np.ndarray) -> np.ndarray:
def dispatch_fill_zeros(op, left, right, result):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\ops\__init__.py
-----------------------------
> """
  Arithmetic operations for PandasObjects
  
  This is not a public API.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\api.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\concat.py
-----------------------------
> """
  Concat routines.
def concat(
def concat(
def concat(
def concat(
def concat(
def concat(
class _Concatenator:
def _concat_indexes(indexes) -> Index:
def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\encoding.py
-----------------------------
>     """
      Convert categorical variable into dummy/indicator variables.
  
      Each variable is converted in as many 0/1 variables as there are different
def get_dummies(
def _get_dummies_1d(
def from_dummies(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\melt.py
-----------------------------
>     """
      Reshape wide-format data to long. Generalized inverse of DataFrame.pivot.
  
      Accepts a dictionary, ``groups``, in which each key is a new column name
def ensure_list_vars(arg_vars, variable: str, columns) -> list:
def melt(
def lreshape(data: DataFrame, groups: dict, dropna: bool = True) -> DataFrame:
def wide_to_long(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\merge.py
-----------------------------
> """
  SQL-style merge routines
def merge(
def _cross_merge(
def _groupby_and_merge(
def merge_ordered(
def merge_asof(
class _MergeOperation:
def get_join_indexers(
def get_join_indexers_non_unique(
def restore_dropped_levels_multijoin(
class _OrderedMerge(_MergeOperation):
def _asof_by_function(direction: str):
class _AsOfMerge(_OrderedMerge):
def _get_multiindex_indexer(
def _get_empty_indexer() -> tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]:
def _get_no_sort_one_missing_indexer(
def _left_join_on_index(
def _factorize_keys(
def _convert_arrays_and_get_rizer_klass(
def _sort_labels(
def _get_join_keys(
def _should_fill(lname, rname) -> bool:
def _any(x) -> bool:
def _validate_operand(obj: DataFrame | Series) -> DataFrame:
def _items_overlap_with_suffix(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\pivot.py
-----------------------------
>     """
      Helper of :func:`pandas.pivot_table` for any non-list ``aggfunc``.
def pivot_table(
def __internal_pivot_table(
def _add_margins(
def _compute_grand_margin(
def _generate_marginal_results(
def _generate_marginal_results_without_values(
def _convert_by(by):
def pivot(
def crosstab(
def _normalize(
def _get_names(arrs, names, prefix: str = "row"):
def _build_names_mapper(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\reshape.py
-----------------------------
>     """
      Helper class to unstack data / pivot with multi-level index
  
      Parameters
class _Unstacker:
def _unstack_multiple(
def unstack(obj: Series | DataFrame, level, fill_value=None, sort: bool = True):
def _unstack_frame(
def _unstack_extension_series(
def stack(frame: DataFrame, level=-1, dropna: bool = True, sort: bool = True):
def stack_multiple(frame: DataFrame, level, dropna: bool = True, sort: bool = True):
def _stack_multi_column_index(columns: MultiIndex) -> MultiIndex:
def _stack_multi_columns(
def _reorder_for_extension_array_stack(
def stack_v3(frame: DataFrame, level: list[int]) -> Series | DataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\tile.py
-----------------------------
> """
  Quantilization functions and related stuff
def cut(
def qcut(
def _nbins_to_bins(x_idx: Index, nbins: int, right: bool) -> Index:
def _bins_to_cuts(
def _coerce_to_type(x: Index) -> tuple[Index, DtypeObj | None]:
def _is_dt_or_td(dtype: DtypeObj) -> bool:
def _format_labels(
def _preprocess_for_cut(x) -> Index:
def _postprocess_for_cut(fac, bins, retbins: bool, original):
def _round_frac(x, precision: int):
def _infer_precision(base_precision: int, bins: Index) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\util.py
-----------------------------
>     """
      Numpy version of itertools.product.
      Sometimes faster (for large inputs)...
  
def cartesian_product(X) -> list[np.ndarray]:
def tile_compat(arr: NumpyIndexT, num: int) -> NumpyIndexT:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\reshape\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\sparse\api.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\sparse\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\strings\accessor.py
-----------------------------
>     """
      Decorator to forbid specific types for a method of StringMethods.
  
      For calling `.str.{method}` on a Series or Index, it is necessary to first
def forbid_nonstring_types(
def _map_and_wrap(name: str | None, docstring: str | None):
class StringMethods(NoNewAttributesMixin):
def cat_safe(list_of_columns: list[npt.NDArray[np.object_]], sep: str):
def cat_core(list_of_columns: list, sep: str):
def _result_dtype(arr):
def _get_single_group_name(regex: re.Pattern) -> Hashable:
def _get_group_names(regex: re.Pattern) -> list[Hashable]:
def str_extractall(arr, pat, flags: int = 0) -> DataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\strings\base.py
-----------------------------
>     """
      Base class for extension arrays implementing string methods.
  
      This is where our ExtensionArrays can override the implementation of
class BaseStringArrayMethods(abc.ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\strings\object_array.py
-----------------------------
>     """
      String Methods operating on object-dtype ndarrays.
class ObjectStringArrayMixin(BaseStringArrayMethods):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\strings\__init__.py
-----------------------------
> """
  Implementation of pandas.Series.str and its interface.
  
  * strings.accessor.StringMethods : Accessor for Series.str

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\tools\datetimes.py
-----------------------------
>     """
      Decides whether to do caching.
  
      If the percent of unique elements among `check_count` elements less
class YearMonthDayDict(TypedDict, total=True):
class FulldatetimeDict(YearMonthDayDict, total=False):
def _guess_datetime_format_for_array(arr, dayfirst: bool | None = False) -> str | None:
def should_cache(
def _maybe_cache(
def _box_as_indexlike(
def _convert_and_box_cache(
def _convert_listlike_datetimes(
def _array_strptime_with_fallback(
def _to_datetime_with_unit(arg, unit, name, utc: bool, errors: str) -> Index:
def _adjust_to_origin(arg, origin, unit):
def to_datetime(
def to_datetime(
def to_datetime(
def to_datetime(
def _assemble_from_unit_mappings(arg, errors: DateTimeErrorChoices, utc: bool):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\tools\numeric.py
-----------------------------
>     """
      Convert argument to a numeric type.
  
      The default return dtype is `float64` or `int64`
def to_numeric(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\tools\timedeltas.py
-----------------------------
> """
  timedelta support tools
def to_timedelta(
def to_timedelta(
def to_timedelta(
def to_timedelta(
def _coerce_scalar_to_timedelta_type(
def _convert_listlike(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\tools\times.py
-----------------------------
>     """
      Parse time strings to time objects using fixed strptime formats ("%H:%M",
      "%H%M", "%I:%M%p", "%I%M%p", "%H:%M:%S", "%H%M%S", "%I:%M:%S%p",
      "%I%M%S%p")
def to_time(
def _guess_time_format_for_array(arr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\tools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\util\hashing.py
-----------------------------
> """
  data hash pandas / numpy objects
def combine_hash_arrays(
def hash_pandas_object(
def hash_tuples(
def hash_array(
def _hash_ndarray(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\util\numba_.py
-----------------------------
> """Common utilities for Numba operations"""
  from __future__ import annotations
  
  import types
def maybe_use_numba(engine: str | None) -> bool:
def set_use_numba(enable: bool = False) -> None:
def get_jit_arguments(
def jit_user_function(func: Callable) -> Callable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\common.py
-----------------------------
> """Common utility functions for rolling operations"""
  from __future__ import annotations
  
  from collections import defaultdict
def flex_binary_moment(arg1, arg2, f, pairwise: bool = False):
def zsqrt(x):
def prep_binary(arg1, arg2):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\doc.py
-----------------------------
> """Any shareable docstring components for rolling/expanding/ewm"""
  from __future__ import annotations
  
  from textwrap import dedent
def create_section_header(header: str) -> str:
def window_agg_numba_parameters(version: str = "1.3") -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\ewm.py
-----------------------------
>     """
      Return the diff of the times divided by the half-life. These values are used in
      the calculation of the ewm mean.
  
def get_center_of_mass(
def _calculate_deltas(
class ExponentialMovingWindow(BaseWindow):
class ExponentialMovingWindowGroupby(BaseWindowGroupby, ExponentialMovingWindow):
class OnlineExponentialMovingWindow(ExponentialMovingWindow):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\expanding.py
-----------------------------
>     """
      Provide expanding window calculations.
  
      Parameters
class Expanding(RollingAndExpandingMixin):
class ExpandingGroupby(BaseWindowGroupby, Expanding):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\numba_.py
-----------------------------
>     """
      Generate a numba jitted apply function specified by values from engine_kwargs.
  
      1. jit the user's function
def generate_numba_apply_func(
def generate_numba_ewm_func(
def generate_numba_table_func(
def generate_manual_numpy_nan_agg_with_axis(nan_func):
def generate_numba_ewm_table_func(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\online.py
-----------------------------
>     """
      Generate a numba jitted groupby ewma function specified by values
      from engine_kwargs.
  
def generate_online_numba_ewma_func(
class EWMMeanState:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\rolling.py
-----------------------------
> """
  Provide a generic structure to support window functions,
  similar to how we have a Groupby object.
class BaseWindow(SelectionMixin):
class BaseWindowGroupby(BaseWindow):
class Window(BaseWindow):
class RollingAndExpandingMixin(BaseWindow):
class Rolling(RollingAndExpandingMixin):
class RollingGroupby(BaseWindowGroupby, Rolling):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\window\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\kernels\mean_.py
-----------------------------
> """
  Numba 1D mean kernels that can be shared by
  * Dataframe / Series
  * groupby
def add_mean(
def remove_mean(
def sliding_mean(
def grouped_mean(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\kernels\min_max_.py
-----------------------------
> """
  Numba 1D min/max kernels that can be shared by
  * Dataframe / Series
  * groupby
def sliding_min_max(
def grouped_min_max(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\kernels\shared.py
-----------------------------
>     """Check if int64 values are monotonically increasing."""
      n = len(bounds)
      if n < 2:
          return True
def is_monotonic_increasing(bounds: np.ndarray) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\kernels\sum_.py
-----------------------------
> """
  Numba 1D sum kernels that can be shared by
  * Dataframe / Series
  * groupby
def add_sum(
def remove_sum(
def sliding_sum(
def grouped_kahan_sum(
def grouped_sum(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\kernels\var_.py
-----------------------------
> """
  Numba 1D var kernels that can be shared by
  * Dataframe / Series
  * groupby
def add_var(
def remove_var(
def sliding_var(
def grouped_var(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\kernels\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\executor.py
-----------------------------
>     """
      Generate a Numba function that loops over the columns 2D object and applies
      a 1D numba kernel over each column.
  
def generate_apply_looper(func, nopython=True, nogil=True, parallel=False):
def make_looper(func, result_dtype, is_grouped_kernel, nopython, nogil, parallel):
def generate_shared_aggregator(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\extensions.py
-----------------------------
> """
  Utility classes/functions to let numba recognize
  pandas Index/Series/DataFrame
  
def set_numba_data(index: Index):
class IndexType(types.Type):
class SeriesType(types.Type):
def typeof_index(val, c):
def typeof_series(val, c):
def type_series_constructor(context):
def type_index_constructor(context):
class IndexModel(models.StructModel):
class SeriesModel(models.StructModel):
def pdseries_constructor(context, builder, sig, args):
def pdseries_constructor_with_name(context, builder, sig, args):
def index_constructor_2arg(context, builder, sig, args):
def index_constructor_2arg_parent(context, builder, sig, args):
def index_constructor_1arg(context, builder, sig, args):
def maybe_cast_str(x):
def maybe_cast_str_impl(x):
def unbox_index(typ, obj, c):
def unbox_series(typ, obj, c):
def box_index(typ, val, c):
def box_series(typ, val, c):
def generate_series_reduction(ser_reduction, ser_method):
def generate_series_binop(binop):
def index_get_loc(index, item):
def series_indexing(series, item):
def index_indexing(index, idx):
class IlocType(types.Type):
def typeof_iloc(val, c):
def type_iloc_constructor(context):
def iloc_constructor(context, builder, sig, args):
class ILocModel(models.StructModel):
def series_iloc(series):
def iloc_getitem(iloc_indexer, i):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\_numba\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\accessor.py
-----------------------------
> """
  
  accessor.py contains base classes for implementing accessor properties
  that can be mixed into or pinned onto other pandas classes.
class DirNamesMixin:
class PandasDelegate:
def delegate_names(
class CachedAccessor:
def _register_accessor(name: str, cls):
def register_dataframe_accessor(name: str):
def register_series_accessor(name: str):
def register_index_accessor(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\algorithms.py
-----------------------------
> """
  Generic data algorithms. This module is experimental at the moment and not
  intended for public consumption
def _ensure_data(values: ArrayLike) -> np.ndarray:
def _reconstruct_data(
def _ensure_arraylike(values, func_name: str) -> ArrayLike:
def _get_hashtable_algo(values: np.ndarray):
def _check_object_for_strings(values: np.ndarray) -> str:
def unique(values):
def nunique_ints(values: ArrayLike) -> int:
def unique_with_mask(values, mask: npt.NDArray[np.bool_] | None = None):
def isin(comps: ListLike, values: ListLike) -> npt.NDArray[np.bool_]:
def factorize_array(
def factorize(
def value_counts(
def value_counts_internal(
def value_counts_arraylike(
def duplicated(
def mode(
def rank(
def take(
def searchsorted(
def diff(arr, n: int, axis: AxisInt = 0):
def safe_sort(
def _sort_mixed(values) -> AnyArrayLike:
def _sort_tuples(values: np.ndarray) -> np.ndarray:
def union_with_duplicates(
def map_array(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\api.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\apply.py
-----------------------------
>     """construct and return a row or column based frame apply object"""
      axis = obj._get_axis_number(axis)
      klass: type[FrameApply]
      if axis == 0:
def frame_apply(
class Apply(metaclass=abc.ABCMeta):
class NDFrameApply(Apply):
class FrameApply(NDFrameApply):
class FrameRowApply(FrameApply):
class FrameColumnApply(FrameApply):
class SeriesApply(NDFrameApply):
class GroupByApply(Apply):
class ResamplerWindowApply(GroupByApply):
def reconstruct_func(
def is_multi_agg_with_relabel(**kwargs) -> bool:
def normalize_keyword_aggregation(
def _make_unique_kwarg_list(
def relabel_result(
def reconstruct_and_relabel_result(result, func, **kwargs) -> DataFrame | Series:
def _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:
def maybe_mangle_lambdas(agg_spec: Any) -> Any:
def validate_func_kwargs(
def include_axis(op_name: Literal["agg", "apply"], colg: Series | DataFrame) -> bool:
def warn_alias_replacement(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\arraylike.py
-----------------------------
> """
  Methods that can be shared by many array-like classes or subclasses:
      Series
      Index
class OpsMixin:
def array_ufunc(self, ufunc: np.ufunc, method: str, *inputs: Any, **kwargs: Any):
def _standardize_out_kwarg(**kwargs) -> dict:
def dispatch_ufunc_with_out(self, ufunc: np.ufunc, method: str, *inputs, **kwargs):
def _assign_where(out, result, where) -> None:
def default_array_ufunc(self, ufunc: np.ufunc, method: str, *inputs, **kwargs):
def dispatch_reduction_ufunc(self, ufunc: np.ufunc, method: str, *inputs, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\base.py
-----------------------------
> """
  Base and utility classes for pandas objects.
class PandasObject(DirNamesMixin):
class NoNewAttributesMixin:
class SelectionMixin(Generic[NDFrameT]):
class IndexOpsMixin(OpsMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\common.py
-----------------------------
> """
  Misc tools for implementing data structures
  
  Note: pandas.core.common is *not* part of the public API.
def flatten(line):
def consensus_name_attr(objs):
def is_bool_indexer(key: Any) -> bool:
def cast_scalar_indexer(val):
def not_none(*args):
def any_none(*args) -> bool:
def all_none(*args) -> bool:
def any_not_none(*args) -> bool:
def all_not_none(*args) -> bool:
def count_not_none(*args) -> int:
def asarray_tuplesafe(
def asarray_tuplesafe(values: Iterable, dtype: NpDtype | None = ...) -> ArrayLike:
def asarray_tuplesafe(values: Iterable, dtype: NpDtype | None = None) -> ArrayLike:
def index_labels_to_array(
def maybe_make_list(obj):
def maybe_iterable_to_list(obj: Iterable[T] | T) -> Collection[T] | T:
def is_null_slice(obj) -> bool:
def is_empty_slice(obj) -> bool:
def is_true_slices(line) -> list[bool]:
def is_full_slice(obj, line: int) -> bool:
def get_callable_name(obj):
def apply_if_callable(maybe_callable, obj, **kwargs):
def standardize_mapping(into):
def random_state(state: np.random.Generator) -> np.random.Generator:
def random_state(
def random_state(state: RandomState | None = None):
def pipe(
def get_rename_function(mapper):
def convert_to_list_like(
def temp_setattr(
def require_length_match(data, index: Index) -> None:
def get_cython_func(arg: Callable) -> str | None:
def is_builtin_func(arg):
def fill_missing_names(names: Sequence[Hashable | None]) -> list[Hashable]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\config_init.py
-----------------------------
> """
  This module is imported from the pandas package __init__.py file
  in order to ensure that the core.config options registered here will
  be available as soon as the user loads the package. if register_option
def use_bottleneck_cb(key) -> None:
def use_numexpr_cb(key) -> None:
def use_numba_cb(key) -> None:
def table_schema_cb(key) -> None:
def is_terminal() -> bool:
def use_inf_as_na_cb(key) -> None:
def is_valid_string_storage(value: Any) -> None:
def register_plotting_backend_cb(key) -> None:
def register_converter_cb(key) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\construction.py
-----------------------------
> """
  Constructor functions intended to be shared by pd.array, Series.__init__,
  and Index.__new__.
  
def array(
def extract_array(
def extract_array(
def extract_array(
def ensure_wrapped_if_datetimelike(arr):
def sanitize_masked_array(data: ma.MaskedArray) -> np.ndarray:
def sanitize_array(
def range_to_ndarray(rng: range) -> np.ndarray:
def _sanitize_non_ordered(data) -> None:
def _sanitize_ndim(
def _sanitize_str_dtypes(
def _maybe_repeat(arr: ArrayLike, index: Index | None) -> ArrayLike:
def _try_cast(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\flags.py
-----------------------------
>     """
      Flags that apply to pandas objects.
  
      Parameters
class Flags:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\frame.py
-----------------------------
> """
  DataFrame
  ---------
  An efficient 2D container for potentially mixed-type time series or other
class DataFrame(NDFrame, OpsMixin):
def _from_nested_dict(data) -> collections.defaultdict:
def _reindex_for_setitem(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\generic.py
-----------------------------
>     "inplace": """
      inplace : bool, default False
class NDFrame(PandasObject, indexing.IndexingMixin):
def make_doc(name: str, ndim: int) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\indexing.py
-----------------------------
>     """
      Create an object to more easily perform multi-index slicing.
  
      See Also
class _IndexSlice:
class IndexingMixin:
class _LocationIndexer(NDFrameIndexerBase):
class _LocIndexer(_LocationIndexer):
class _iLocIndexer(_LocationIndexer):
class _ScalarAccessIndexer(NDFrameIndexerBase):
class _AtIndexer(_ScalarAccessIndexer):
class _iAtIndexer(_ScalarAccessIndexer):
def _tuplify(ndim: int, loc: Hashable) -> tuple[Hashable | slice, ...]:
def _tupleize_axis_indexer(ndim: int, axis: AxisInt, key) -> tuple:
def check_bool_indexer(index: Index, key) -> np.ndarray:
def convert_missing_indexer(indexer):
def convert_from_missing_indexer_tuple(indexer, axes):
def maybe_convert_ix(*args):
def is_nested_tuple(tup, labels) -> bool:
def is_label_like(key) -> bool:
def need_slice(obj: slice) -> bool:
def check_dict_or_set_indexers(key) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\missing.py
-----------------------------
> """
  Routines for filling missing data.
def check_value_size(value, mask: npt.NDArray[np.bool_], length: int):
def mask_missing(arr: ArrayLike, values_to_mask) -> npt.NDArray[np.bool_]:
def clean_fill_method(
def clean_fill_method(
def clean_fill_method(
def clean_interp_method(method: str, index: Index, **kwargs) -> str:
def find_valid_index(how: str, is_valid: npt.NDArray[np.bool_]) -> int | None:
def validate_limit_direction(
def validate_limit_area(limit_area: str | None) -> Literal["inside", "outside"] | None:
def infer_limit_direction(
def get_interp_index(method, index: Index) -> Index:
def interpolate_2d_inplace(
def _index_to_interp_indices(index: Index, method: str) -> np.ndarray:
def _interpolate_1d(
def _interpolate_scipy_wrapper(
def _from_derivatives(
def _akima_interpolate(
def _cubicspline_interpolate(
def _interpolate_with_limit_area(
def pad_or_backfill_inplace(
def _fillna_prep(
def _datetimelike_compat(func: F) -> F:
def _pad_1d(
def _backfill_1d(
def _pad_2d(
def _backfill_2d(
def _fill_limit_area_1d(
def _fill_limit_area_2d(
def get_fill_func(method, ndim: int = 1):
def clean_reindex_fill_method(method) -> ReindexMethod | None:
def _interp_limit(
def _rolling_window(a: npt.NDArray[np.bool_], window: int) -> npt.NDArray[np.bool_]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\nanops.py
-----------------------------
>     """return the correct fill value for the dtype of the values"""
      if fill_value is not None:
          return fill_value
      if _na_ok_dtype(dtype):
def set_use_bottleneck(v: bool = True) -> None:
class disallow:
class bottleneck_switch:
def _bn_ok_dtype(dtype: DtypeObj, name: str) -> bool:
def _has_infs(result) -> bool:
def _get_fill_value(
def _maybe_get_mask(
def _get_values(
def _get_dtype_max(dtype: np.dtype) -> np.dtype:
def _na_ok_dtype(dtype: DtypeObj) -> bool:
def _wrap_results(result, dtype: np.dtype, fill_value=None):
def _datetimelike_compat(func: F) -> F:
def _na_for_min_count(values: np.ndarray, axis: AxisInt | None) -> Scalar | np.ndarray:
def maybe_operate_rowwise(func: F) -> F:
def nanany(
def nanall(
def nansum(
def _mask_datetimelike_result(
def nanmean(
def nanmedian(values, *, axis: AxisInt | None = None, skipna: bool = True, mask=None):
def _get_empty_reduction_result(
def _get_counts_nanvar(
def nanstd(
def nanvar(
def nansem(
def _nanminmax(meth, fill_value_typ):
def nanargmax(
def nanargmin(
def nanskew(
def nankurt(
def nanprod(
def _maybe_arg_null_out(
def _get_counts(
def _maybe_null_out(
def check_below_min_count(
def _zero_out_fperr(arg):
def nancorr(
def get_corr_func(
def nancov(
def _ensure_numeric(x):
def na_accum_func(values: ArrayLike, accum_func, *, skipna: bool) -> ArrayLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\resample.py
-----------------------------
>     """
      Class for resampling datetimelike data, a groupby-like operation.
      See aggregate, transform, and apply functions on this object.
  
class Resampler(BaseGroupBy, PandasObject):
class _GroupByMixin(PandasObject, SelectionMixin):
class DatetimeIndexResampler(Resampler):
class DatetimeIndexResamplerGroupby(  # type: ignore[misc]
class PeriodIndexResampler(DatetimeIndexResampler):
class PeriodIndexResamplerGroupby(  # type: ignore[misc]
class TimedeltaIndexResampler(DatetimeIndexResampler):
class TimedeltaIndexResamplerGroupby(  # type: ignore[misc]
def get_resampler(obj: Series | DataFrame, kind=None, **kwds) -> Resampler:
def get_resampler_for_grouping(
class TimeGrouper(Grouper):
def _take_new_index(
def _get_timestamp_range_edges(
def _get_period_range_edges(
def _insert_nat_bin(
def _adjust_dates_anchored(
def asfreq(
def _asfreq_compat(index: DatetimeIndex | PeriodIndex | TimedeltaIndex, freq):
def maybe_warn_args_and_kwargs(cls, kernel: str, args, kwargs) -> None:
def _apply(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\roperator.py
-----------------------------
> """
  Reversed Operations not available in the stdlib operator module.
  Defining these instead of using lambdas allows us to reference them by name.
def radd(left, right):
def rsub(left, right):
def rmul(left, right):
def rdiv(left, right):
def rtruediv(left, right):
def rfloordiv(left, right):
def rmod(left, right):
def rdivmod(left, right):
def rpow(left, right):
def rand_(left, right):
def ror_(left, right):
def rxor(left, right):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\sample.py
-----------------------------
> """
  Module containing utilities for NDFrame.sample() and .GroupBy.sample()
def preprocess_weights(obj: NDFrame, weights, axis: AxisInt) -> np.ndarray:
def process_sampling_size(
def sample(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\series.py
-----------------------------
> """
  Data structure for 1-dimensional cross-sectional and time series data
def _coerce_method(converter):
class Series(base.IndexOpsMixin, NDFrame):  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\shared_docs.py
-----------------------------
> ] = """
  Aggregate using one or more operations over the specified axis.
  
  Parameters

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\sorting.py
-----------------------------
> """ miscellaneous sorting / groupby utilities """
  from __future__ import annotations
  
  from collections import defaultdict
def get_indexer_indexer(
def get_group_index(
def get_compressed_ids(
def is_int64_overflow_possible(shape: Shape) -> bool:
def _decons_group_index(
def decons_obs_group_ids(
def lexsort_indexer(
def nargsort(
def nargminmax(values: ExtensionArray, method: str, axis: AxisInt = 0):
def _nanargminmax(values: np.ndarray, mask: npt.NDArray[np.bool_], func) -> int:
def _ensure_key_mapped_multiindex(
def ensure_key_mapped(
def get_flattened_list(
def get_indexer_dict(
def get_group_index_sorter(
def compress_group_index(
def _reorder_by_uniques(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\core\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\errors\__init__.py
-----------------------------
> """
  Expose public exceptions & warnings
class IntCastingNaNError(ValueError):
class NullFrequencyError(ValueError):
class PerformanceWarning(Warning):
class UnsupportedFunctionCall(ValueError):
class UnsortedIndexError(KeyError):
class ParserError(ValueError):
class DtypeWarning(Warning):
class EmptyDataError(ValueError):
class ParserWarning(Warning):
class MergeError(ValueError):
class AbstractMethodError(NotImplementedError):
class NumbaUtilError(Exception):
class DuplicateLabelError(ValueError):
class InvalidIndexError(Exception):
class DataError(Exception):
class SpecificationError(Exception):
class SettingWithCopyError(ValueError):
class SettingWithCopyWarning(Warning):
class ChainedAssignmentError(Warning):
def _check_cacher(obj):
class NumExprClobberingError(NameError):
class UndefinedVariableError(NameError):
class IndexingError(Exception):
class PyperclipException(RuntimeError):
class PyperclipWindowsException(PyperclipException):
class CSSWarning(UserWarning):
class PossibleDataLossError(Exception):
class ClosedFileError(Exception):
class IncompatibilityWarning(Warning):
class AttributeConflictWarning(Warning):
class DatabaseError(OSError):
class PossiblePrecisionLoss(Warning):
class ValueLabelTypeMismatch(Warning):
class InvalidColumnName(Warning):
class CategoricalConversionWarning(Warning):
class LossySetitemError(Exception):
class NoBufferPresent(Exception):
class InvalidComparison(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\clipboard\__init__.py
-----------------------------
> """
  Pyperclip
  
  A cross-platform clipboard module for Python,
class PyperclipTimeoutException(PyperclipException):
def _stringifyText(text) -> str:
def init_osx_pbcopy_clipboard():
def init_osx_pyobjc_clipboard():
def init_qt_clipboard():
def init_xclip_clipboard():
def init_xsel_clipboard():
def init_wl_clipboard():
def init_klipper_clipboard():
def init_dev_clipboard_clipboard():
def init_no_clipboard():
class CheckedCall:
def init_windows_clipboard():
def init_wsl_clipboard():
def determine_clipboard():
def set_clipboard(clipboard):
def lazy_load_stub_copy(text):
def lazy_load_stub_paste():
def is_available() -> bool:
def waitForPaste(timeout=None):
def waitForNewPaste(timeout=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_base.py
-----------------------------
>     """
  Read an Excel file into a ``pandas`` ``DataFrame``.
  
  Supports `xls`, `xlsx`, `xlsm`, `xlsb`, `odf`, `ods` and `odt` file extensions
def read_excel(
def read_excel(
def read_excel(
class BaseExcelReader(Generic[_WorkbookT]):
class ExcelWriter(Generic[_WorkbookT]):
def inspect_excel_format(
class ExcelFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_calamine.py
-----------------------------
>         """
          Reader using calamine engine (xlsx/xls/xlsb/ods).
  
          Parameters
class CalamineReader(BaseExcelReader["CalamineWorkbook"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_odfreader.py
-----------------------------
>         """
          Read tables out of OpenDocument formatted files.
  
          Parameters
class ODFReader(BaseExcelReader["OpenDocument"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_odswriter.py
-----------------------------
>         """
          Book instance of class odf.opendocument.OpenDocumentSpreadsheet.
  
          This attribute can be used to access engine-specific features.
class ODSWriter(ExcelWriter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_openpyxl.py
-----------------------------
>         """
          Book instance of class openpyxl.workbook.Workbook.
  
          This attribute can be used to access engine-specific features.
class OpenpyxlWriter(ExcelWriter):
class OpenpyxlReader(BaseExcelReader["Workbook"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_pyxlsb.py
-----------------------------
>         """
          Reader using pyxlsb engine.
  
          Parameters
class PyxlsbReader(BaseExcelReader["Workbook"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_util.py
-----------------------------
>     """
      Add engine to the excel writer registry.io.excel.
  
      You must use this method to integrate with ``to_excel``.
def register_writer(klass: ExcelWriter_t) -> None:
def get_default_engine(ext: str, mode: Literal["reader", "writer"] = "reader") -> str:
def get_writer(engine_name: str) -> ExcelWriter_t:
def _excel2num(x: str) -> int:
def _range2cols(areas: str) -> list[int]:
def maybe_convert_usecols(usecols: str | list[int]) -> list[int]:
def maybe_convert_usecols(usecols: list[str]) -> list[str]:
def maybe_convert_usecols(usecols: usecols_func) -> usecols_func:
def maybe_convert_usecols(usecols: None) -> None:
def maybe_convert_usecols(
def validate_freeze_panes(freeze_panes: tuple[int, int]) -> Literal[True]:
def validate_freeze_panes(freeze_panes: None) -> Literal[False]:
def validate_freeze_panes(freeze_panes: tuple[int, int] | None) -> bool:
def fill_mi_header(
def pop_header_name(
def combine_kwargs(engine_kwargs: dict[str, Any] | None, kwargs: dict) -> dict:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_xlrd.py
-----------------------------
>         """
          Reader using xlrd engine.
  
          Parameters
class XlrdReader(BaseExcelReader["Book"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\_xlsxwriter.py
-----------------------------
>         """
          converts a style_dict to an xlsxwriter format dict
  
          Parameters
class _XlsxStyler:
class XlsxWriter(ExcelWriter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\excel\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\console.py
-----------------------------
> """
  Internal module for console introspection
def get_console_size() -> tuple[int | None, int | None]:
def in_interactive_session() -> bool:
def in_ipython_frontend() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\css.py
-----------------------------
> """
  Utilities for interpreting CSS from Stylers for formatting non-HTML outputs.
def _side_expander(prop_fmt: str) -> Callable:
def _border_expander(side: str = "") -> Callable:
class CSSResolver:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\csvs.py
-----------------------------
> """
  Module for formatting output data into CSV files.
class CSVFormatter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\excel.py
-----------------------------
> """
  Utilities for conversion to writer-agnostic Excel representation.
class ExcelCell:
class CssExcelCell(ExcelCell):
class CSSToExcelConverter:
class ExcelFormatter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\format.py
-----------------------------
> """
  Internal module for formatting output data in csv, html, xml,
  and latex files. This module also applies to display formatting.
class SeriesFormatter:
def get_dataframe_repr_params() -> dict[str, Any]:
def get_series_repr_params() -> dict[str, Any]:
class DataFrameFormatter:
class DataFrameRenderer:
def save_to_buffer(
def _get_buffer(
def format_array(
class _GenericArrayFormatter:
class FloatArrayFormatter(_GenericArrayFormatter):
class _IntArrayFormatter(_GenericArrayFormatter):
class _Datetime64Formatter(_GenericArrayFormatter):
class _ExtensionArrayFormatter(_GenericArrayFormatter):
def format_percentiles(
def get_precision(array: np.ndarray | Sequence[float]) -> int:
def _format_datetime64(x: NaTType | Timestamp, nat_rep: str = "NaT") -> str:
def _format_datetime64_dateonly(
def get_format_datetime64(
class _Datetime64TZFormatter(_Datetime64Formatter):
class _Timedelta64Formatter(_GenericArrayFormatter):
def get_format_timedelta64(
def _make_fixed_width(
def _trim_zeros_complex(str_complexes: ArrayLike, decimal: str = ".") -> list[str]:
def _trim_zeros_single_float(str_float: str) -> str:
def _trim_zeros_float(
def _has_names(index: Index) -> bool:
class EngFormatter:
def set_eng_float_format(accuracy: int = 3, use_eng_prefix: bool = False) -> None:
def get_level_lengths(
def buffer_put_lines(buf: WriteBuffer[str], lines: list[str]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\html.py
-----------------------------
> """
  Module for formatting output data in HTML.
class HTMLFormatter:
class NotebookFormatter(HTMLFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\info.py
-----------------------------
>     """\
      max_cols : int, optional
          When to switch from the verbose to the truncated output. If the
          DataFrame has more than `max_cols` columns, the truncated output
def _put_str(s: str | Dtype, space: int) -> str:
def _sizeof_fmt(num: float, size_qualifier: str) -> str:
def _initialize_memory_usage(
class _BaseInfo(ABC):
class DataFrameInfo(_BaseInfo):
class SeriesInfo(_BaseInfo):
class _InfoPrinterAbstract:
class _DataFrameInfoPrinter(_InfoPrinterAbstract):
class _SeriesInfoPrinter(_InfoPrinterAbstract):
class _TableBuilderAbstract(ABC):
class _DataFrameTableBuilder(_TableBuilderAbstract):
class _DataFrameTableBuilderNonVerbose(_DataFrameTableBuilder):
class _TableBuilderVerboseMixin(_TableBuilderAbstract):
class _DataFrameTableBuilderVerbose(_DataFrameTableBuilder, _TableBuilderVerboseMixin):
class _SeriesTableBuilder(_TableBuilderAbstract):
class _SeriesTableBuilderNonVerbose(_SeriesTableBuilder):
class _SeriesTableBuilderVerbose(_SeriesTableBuilder, _TableBuilderVerboseMixin):
def _get_dataframe_dtype_counts(df: DataFrame) -> Mapping[str, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\printing.py
-----------------------------
> """
  Printing tools.
def adjoin(space: int, *lists: list[str], **kwargs) -> str:
def _adj_justify(texts: Iterable[str], max_len: int, mode: str = "right") -> list[str]:
def _pprint_seq(
def _pprint_dict(
def pprint_thing(
def pprint_thing_encoded(
def enable_data_resource_formatter(enable: bool) -> None:
def default_pprint(thing: Any, max_seq_items: int | None = None) -> str:
def format_object_summary(
def _justify(
class PrettyDict(dict[_KT, _VT]):
class _TextAdjustment:
class _EastAsianTextAdjustment(_TextAdjustment):
def get_adjustment() -> _TextAdjustment:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\string.py
-----------------------------
> """
  Module for formatting output data in console (to string).
class StringFormatter:
def _binify(cols: list[int], line_width: int) -> list[int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\style.py
-----------------------------
> """
  Module for applying conditional formatting to DataFrames and Series.
def _mpl(func: Callable) -> Generator[tuple[Any, Any], None, None]:
class Styler(StylerRenderer):
def _validate_apply_axis_arg(
def _background_gradient(
def _highlight_between(
def _highlight_value(data: DataFrame | Series, op: str, props: str) -> np.ndarray:
def _bar(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\style_render.py
-----------------------------
>     """
      Base class to process rendering a Styler with a specified jinja2 template.
class CSSDict(TypedDict):
class StylerRenderer:
def _element(
def _get_trimming_maximums(
def _get_level_lengths(
def _is_visible(idx_row, idx_col, lengths) -> bool:
def format_table_styles(styles: CSSStyles) -> CSSStyles:
def _default_formatter(x: Any, precision: int, thousands: bool = False) -> Any:
def _wrap_decimal_thousands(
def _str_escape(x, escape):
def _render_href(x, format):
def _maybe_wrap_formatter(
def non_reducing_slice(slice_: Subset):
def maybe_convert_css_to_tuples(style: CSSProperties) -> CSSList:
def refactor_levels(
class Tooltips:
def _parse_latex_table_wrapping(table_styles: CSSStyles, caption: str | None) -> bool:
def _parse_latex_table_styles(table_styles: CSSStyles, selector: str) -> str | None:
def _parse_latex_cell_styles(
def _parse_latex_header_span(
def _parse_latex_options_strip(value: str | float, arg: str) -> str:
def _parse_latex_css_conversion(styles: CSSList) -> CSSList:
def _escape_latex(s: str) -> str:
def _math_mode_with_dollar(s: str) -> str:
def _math_mode_with_parentheses(s: str) -> str:
def _escape_latex_math(s: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\xml.py
-----------------------------
> """
  :mod:`pandas.io.formats.xml` is a module for formatting data in XML.
class _BaseXMLFormatter:
class EtreeXMLFormatter(_BaseXMLFormatter):
class LxmlXMLFormatter(_BaseXMLFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\_color_data.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\formats\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\json\_json.py
-----------------------------
>         """Object to write in JSON format."""
  
  
  class SeriesWriter(Writer):
def to_json(
def to_json(
def to_json(
class Writer(ABC):
class SeriesWriter(Writer):
class FrameWriter(Writer):
class JSONTableWriter(FrameWriter):
def read_json(
def read_json(
def read_json(
def read_json(
def read_json(
class JsonReader(abc.Iterator, Generic[FrameSeriesStrT]):
class Parser:
class SeriesParser(Parser):
class FrameParser(Parser):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\json\_normalize.py
-----------------------------
>     """
      Helper function that converts JSON lists to line delimited JSON.
def convert_to_line_delimits(s: str) -> str:
def nested_to_record(
def _normalise_json(
def _normalise_json_ordered(data: dict[str, Any], separator: str) -> dict[str, Any]:
def _simple_json_normalize(
def json_normalize(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\json\_table_schema.py
-----------------------------
> """
  Table Schema builders
  
  https://specs.frictionlessdata.io/table-schema/
def as_json_table_type(x: DtypeObj) -> str:
def set_default_names(data):
def convert_pandas_type_to_json_field(arr) -> dict[str, JSONSerializable]:
def convert_json_field_to_pandas_type(field) -> str | CategoricalDtype:
def build_table_schema(
def parse_table_schema(json, precise_float: bool) -> DataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\json\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parsers\arrow_parser_wrapper.py
-----------------------------
>     """
      Wrapper for the pyarrow engine for read_csv()
class ArrowParserWrapper(ParserBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parsers\base_parser.py
-----------------------------
>         """
          Check if parse_dates are in columns.
  
          If user has provided names for parse_dates, check if those columns
class ParserBase:
def _make_date_converter(
def _process_date_conversion(
def _try_convert_dates(
def _get_na_values(col, na_values, na_fvalues, keep_default_na: bool):
def _validate_parse_dates_arg(parse_dates):
def is_index_col(col) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parsers\c_parser_wrapper.py
-----------------------------
>         """
          Set the columns that should not undergo dtype conversions.
  
          Currently, any column that is involved with date parsing will not
class CParserWrapper(ParserBase):
def _concatenate_chunks(chunks: list[dict[int, ArrayLike]]) -> dict:
def ensure_dtype_objs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parsers\python_parser.py
-----------------------------
>         """
          Workhorse function for processing nested list into DataFrame
class PythonParser(ParserBase):
class FixedWidthReader(abc.Iterator):
class FixedWidthFieldParser(PythonParser):
def count_empty_vals(vals) -> int:
def _validate_skipfooter_arg(skipfooter: int) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parsers\readers.py
-----------------------------
> """
  Module contains tools for processing files into DataFrames or other objects
  
  GH#48849 provides a convenient way of deprecating keyword arguments
class _C_Parser_Defaults(TypedDict):
class _Fwf_Defaults(TypedDict):
class _DeprecationConfig(NamedTuple):
def validate_integer(name: str, val: None, min_val: int = ...) -> None:
def validate_integer(name: str, val: float, min_val: int = ...) -> int:
def validate_integer(name: str, val: int | None, min_val: int = ...) -> int | None:
def validate_integer(
def _validate_names(names: Sequence[Hashable] | None) -> None:
def _read(
def read_csv(
def read_csv(
def read_csv(
def read_csv(
def read_csv(
def read_table(
def read_table(
def read_table(
def read_table(
def read_table(
def read_fwf(
def read_fwf(
def read_fwf(
def read_fwf(
class TextFileReader(abc.Iterator):
def TextParser(*args, **kwds) -> TextFileReader:
def _clean_na_values(na_values, keep_default_na: bool = True, floatify: bool = True):
def _floatify_na_values(na_values):
def _stringify_na_values(na_values, floatify: bool):
def _refine_defaults_read(
def _extract_dialect(kwds: dict[str, Any]) -> csv.Dialect | None:
def _validate_dialect(dialect: csv.Dialect) -> None:
def _merge_with_dialect_properties(
def _validate_skipfooter(kwds: dict[str, Any]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parsers\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\sas\sas7bdat.py
-----------------------------
> """
  Read SAS7BDAT files
  
  Based on code written by Jared Hobbs:
def _parse_datetime(sas_datetime: float, unit: str):
def _convert_datetimes(sas_datetimes: pd.Series, unit: str) -> pd.Series:
class _Column:
class SAS7BDATReader(ReaderBase, abc.Iterator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\sas\sasreader.py
-----------------------------
> """
  Read SAS sas7bdat or xport files.
class ReaderBase(ABC):
def read_sas(
def read_sas(
def read_sas(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\sas\sas_constants.py
-----------------------------
class SASIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\sas\sas_xport.py
-----------------------------
> """
  Read a SAS XPort format file into a Pandas DataFrame.
  
  Based on code from Jack Cushman (github.com/jcushman/xport).
def _parse_date(datestr: str) -> DatetimeNaTType:
def _split_line(s: str, parts):
def _handle_truncated_float_vec(vec, nbytes):
def _parse_float_vec(vec):
class XportReader(ReaderBase, abc.Iterator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\sas\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\api.py
-----------------------------
> """
  Data IO api

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\clipboards.py
-----------------------------
> """ io on the clipboard """
  from __future__ import annotations
  
  from io import StringIO
def read_clipboard(
def to_clipboard(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\common.py
-----------------------------
> """Common IO api utilities"""
  from __future__ import annotations
  
  from abc import (
class IOArgs:
class IOHandles(Generic[AnyStr]):
def is_url(url: object) -> bool:
def _expand_user(filepath_or_buffer: str) -> str:
def _expand_user(filepath_or_buffer: BaseBufferT) -> BaseBufferT:
def _expand_user(filepath_or_buffer: str | BaseBufferT) -> str | BaseBufferT:
def validate_header_arg(header: object) -> None:
def stringify_path(filepath_or_buffer: FilePath, convert_file_like: bool = ...) -> str:
def stringify_path(
def stringify_path(
def urlopen(*args, **kwargs):
def is_fsspec_url(url: FilePath | BaseBuffer) -> bool:
def _get_filepath_or_buffer(
def file_path_to_url(path: str) -> str:
def get_compression_method(
def infer_compression(
def check_parent_directory(path: Path | str) -> None:
def get_handle(
def get_handle(
def get_handle(
def get_handle(
class _BufferedWriter(BytesIO, ABC):  # type: ignore[misc]
class _BytesTarFile(_BufferedWriter):
class _BytesZipFile(_BufferedWriter):
class _IOWrapper:
class _BytesIOWrapper:
def _maybe_memory_map(
def file_exists(filepath_or_buffer: FilePath | BaseBuffer) -> bool:
def _is_binary_mode(handle: FilePath | BaseBuffer, mode: str) -> bool:
def _get_binary_io_classes() -> tuple[type, ...]:
def is_potential_multi_index(
def dedup_names(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\feather_format.py
-----------------------------
> """ feather-format compat """
  from __future__ import annotations
  
  from typing import (
def to_feather(
def read_feather(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\gbq.py
-----------------------------
> """ Google BigQuery support """
  from __future__ import annotations
  
  from typing import (
def _try_import():
def read_gbq(
def to_gbq(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\html.py
-----------------------------
> """
  :mod:`pandas.io.html` is a module containing functionality for dealing with
  HTML IO.
  
def _remove_whitespace(s: str, regex: Pattern = _RE_WHITESPACE) -> str:
def _get_skiprows(skiprows: int | Sequence[int] | slice | None) -> int | Sequence[int]:
def _read(
class _HtmlFrameParser:
class _BeautifulSoupHtml5LibFrameParser(_HtmlFrameParser):
def _build_xpath_expr(attrs) -> str:
class _LxmlFrameParser(_HtmlFrameParser):
def _expand_elements(body) -> None:
def _data_to_frame(**kwargs):
def _parser_dispatch(flavor: HTMLFlavors | None) -> type[_HtmlFrameParser]:
def _print_as_set(s) -> str:
def _validate_flavor(flavor):
def _parse(
def read_html(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\orc.py
-----------------------------
> """ orc compat """
  from __future__ import annotations
  
  import io
def read_orc(
def to_orc(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\parquet.py
-----------------------------
> """ parquet compat """
  from __future__ import annotations
  
  import io
def get_engine(engine: str) -> BaseImpl:
def _get_path_or_handle(
class BaseImpl:
class PyArrowImpl(BaseImpl):
class FastParquetImpl(BaseImpl):
def to_parquet(
def read_parquet(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\pickle.py
-----------------------------
> """ pickle compat """
  from __future__ import annotations
  
  import pickle
def to_pickle(
def read_pickle(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\pytables.py
-----------------------------
> """
  High level interface to PyTables for reading and writing pandas data structures
  to disk
def _ensure_decoded(s):
def _ensure_encoding(encoding: str | None) -> str:
def _ensure_str(name):
def _ensure_term(where, scope_level: int):
def _tables():
def to_hdf(
def read_hdf(
def _is_metadata_of(group: Node, parent_group: Node) -> bool:
class HDFStore:
class TableIterator:
class IndexCol:
class GenericIndexCol(IndexCol):
class DataCol(IndexCol):
class DataIndexableCol(DataCol):
class GenericDataIndexableCol(DataIndexableCol):
class Fixed:
class GenericFixed(Fixed):
class SeriesFixed(GenericFixed):
class BlockManagerFixed(GenericFixed):
class FrameFixed(BlockManagerFixed):
class Table(Fixed):
class WORMTable(Table):
class AppendableTable(Table):
class AppendableFrameTable(AppendableTable):
class AppendableSeriesTable(AppendableFrameTable):
class AppendableMultiSeriesTable(AppendableSeriesTable):
class GenericTable(AppendableFrameTable):
class AppendableMultiFrameTable(AppendableFrameTable):
def _reindex_axis(
def _get_tz(tz: tzinfo) -> str | tzinfo:
def _set_tz(
def _set_tz(values: np.ndarray | Index, tz: None, coerce: bool = False) -> np.ndarray:
def _set_tz(
def _convert_index(name: str, index: Index, encoding: str, errors: str) -> IndexCol:
def _unconvert_index(data, kind: str, encoding: str, errors: str) -> np.ndarray | Index:
def _maybe_convert_for_string_atom(
def _convert_string_array(data: np.ndarray, encoding: str, errors: str) -> np.ndarray:
def _unconvert_string_array(
def _maybe_convert(values: np.ndarray, val_kind: str, encoding: str, errors: str):
def _get_converter(kind: str, encoding: str, errors: str):
def _need_convert(kind: str) -> bool:
def _maybe_adjust_name(name: str, version: Sequence[int]) -> str:
def _dtype_to_kind(dtype_str: str) -> str:
def _get_data_and_dtype_name(data: ArrayLike):
class Selection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\spss.py
-----------------------------
>     """
      Load an SPSS file from the file path, returning a DataFrame.
  
      Parameters
def read_spss(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\sql.py
-----------------------------
> """
  Collection of query wrappers / abstractions to both facilitate data
  retrieval and to reduce dependency on DB-specific API.
def _process_parse_dates_argument(parse_dates):
def _handle_date_column(
def _parse_date_columns(data_frame, parse_dates):
def _convert_arrays_to_dataframe(
def _wrap_result(
def _wrap_result_adbc(
def execute(sql, con, params=None):
def read_sql_table(
def read_sql_table(
def read_sql_table(
def read_sql_query(
def read_sql_query(
def read_sql_query(
def read_sql(
def read_sql(
def read_sql(
def to_sql(
def has_table(table_name: str, con, schema: str | None = None) -> bool:
def pandasSQL_builder(
class SQLTable(PandasObject):
class PandasSQL(PandasObject, ABC):
class BaseEngine:
class SQLAlchemyEngine(BaseEngine):
def get_engine(engine: str) -> BaseEngine:
class SQLDatabase(PandasSQL):
class ADBCDatabase(PandasSQL):
def _get_unicode_name(name: object):
def _get_valid_sqlite_name(name: object):
class SQLiteTable(SQLTable):
class SQLiteDatabase(PandasSQL):
def get_schema(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\stata.py
-----------------------------
> """
  Module contains tools for processing Stata files into DataFrames
  
  The StataReader below was originally written by Joe Presbrey as part of PyDTA.
def _stata_elapsed_date_to_datetime_vec(dates: Series, fmt: str) -> Series:
def _datetime_to_stata_elapsed_vec(dates: Series, fmt: str) -> Series:
def _cast_to_stata_types(data: DataFrame) -> DataFrame:
class StataValueLabel:
class StataNonCatValueLabel(StataValueLabel):
class StataMissingValue:
class StataParser:
class StataReader(StataParser, abc.Iterator):
def read_stata(
def _set_endianness(endianness: str) -> str:
def _pad_bytes(name: AnyStr, length: int) -> AnyStr:
def _convert_datetime_to_stata_type(fmt: str) -> np.dtype:
def _maybe_convert_to_int_keys(convert_dates: dict, varlist: list[Hashable]) -> dict:
def _dtype_to_stata_type(dtype: np.dtype, column: Series) -> int:
def _dtype_to_default_stata_fmt(
class StataWriter(StataParser):
def _dtype_to_stata_type_117(dtype: np.dtype, column: Series, force_strl: bool) -> int:
def _pad_bytes_new(name: str | bytes, length: int) -> bytes:
class StataStrLWriter:
class StataWriter117(StataWriter):
class StataWriterUTF8(StataWriter117):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\xml.py
-----------------------------
> """
  :mod:``pandas.io.xml`` is a module for reading XML.
class _XMLFrameParser:
class _EtreeFrameParser(_XMLFrameParser):
class _LxmlFrameParser(_XMLFrameParser):
def get_data_from_filepath(
def preprocess_data(data) -> io.StringIO | io.BytesIO:
def _data_to_frame(data, **kwargs) -> DataFrame:
def _parse(
def read_xml(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\_util.py
-----------------------------
def _arrow_dtype_mapping() -> dict:
def _arrow_string_types_mapper() -> Callable:
def arrow_table_to_pandas(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\io\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\boxplot.py
-----------------------------
>     """Set the tick labels of a given axis.
  
      Due to https://github.com/matplotlib/matplotlib/pull/17266, we need to handle the
      case of repeated ticks (due to `FixedLocator`) and thus we duplicate the number of
def _set_ticklabels(ax: Axes, labels: list[str], is_vertical: bool, **kwargs) -> None:
class BoxPlot(LinePlot):
def maybe_color_bp(bp, color_tup, **kwds) -> None:
def _grouped_plot_by_column(
def boxplot(
def boxplot_frame(
def boxplot_frame_groupby(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\converter.py
-----------------------------
>     """
      Decorator applying pandas_converters.
def get_pairs():
def register_pandas_matplotlib_converters(func: F) -> F:
def pandas_converters() -> Generator[None, None, None]:
def register() -> None:
def deregister() -> None:
def _to_ordinalf(tm: pydt.time) -> float:
def time2num(d):
class TimeConverter(munits.ConversionInterface):
class TimeFormatter(Formatter):
class PeriodConverter(mdates.DateConverter):
def get_datevalue(date, freq):
class DatetimeConverter(mdates.DateConverter):
class PandasAutoDateFormatter(mdates.AutoDateFormatter):
class PandasAutoDateLocator(mdates.AutoDateLocator):
class MilliSecondLocator(mdates.DateLocator):
def _from_ordinal(x, tz: tzinfo | None = None) -> datetime:
def _get_default_annual_spacing(nyears) -> tuple[int, int]:
def _period_break(dates: PeriodIndex, period: str) -> npt.NDArray[np.intp]:
def _period_break_mask(dates: PeriodIndex, period: str) -> npt.NDArray[np.bool_]:
def has_level_label(label_flags: npt.NDArray[np.intp], vmin: float) -> bool:
def _get_periods_per_ymd(freq: BaseOffset) -> tuple[int, int, int]:
def _daily_finder(vmin: float, vmax: float, freq: BaseOffset) -> np.ndarray:
def _monthly_finder(vmin: float, vmax: float, freq: BaseOffset) -> np.ndarray:
def _quarterly_finder(vmin: float, vmax: float, freq: BaseOffset) -> np.ndarray:
def _annual_finder(vmin: float, vmax: float, freq: BaseOffset) -> np.ndarray:
def get_finder(freq: BaseOffset):
class TimeSeries_DateLocator(Locator):
class TimeSeries_DateFormatter(Formatter):
class TimeSeries_TimedeltaFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\core.py
-----------------------------
>     """
      Check if there is a color letter in the style string.
def _color_in_style(style: str) -> bool:
class MPLPlot(ABC):
class PlanePlot(MPLPlot, ABC):
class ScatterPlot(PlanePlot):
class HexBinPlot(PlanePlot):
class LinePlot(MPLPlot):
class AreaPlot(LinePlot):
class BarPlot(MPLPlot):
class BarhPlot(BarPlot):
class PiePlot(MPLPlot):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\groupby.py
-----------------------------
>     """
      Create data for iteration given `by` is assigned or not, and it is only
      used in both hist and boxplot.
  
def create_iter_data_given_by(
def reconstruct_data_with_by(
def reformat_hist_y_given_by(y: np.ndarray, by: IndexLabel | None) -> np.ndarray:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\hist.py
-----------------------------
>         """Calculate bins given data"""
          nd_values = data.infer_objects(copy=False)._get_numeric_data()
          values = np.ravel(nd_values)
          values = values[~isna(values)]
class HistPlot(LinePlot):
class KdePlot(HistPlot):
def _grouped_plot(
def _grouped_hist(
def hist_series(
def hist_frame(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\misc.py
-----------------------------
def scatter_matrix(
def _get_marker_compat(marker):
def radviz(
def andrews_curves(
def bootstrap_plot(
def parallel_coordinates(
def lag_plot(series: Series, lag: int = 1, ax: Axes | None = None, **kwds) -> Axes:
def autocorrelation_plot(series: Series, ax: Axes | None = None, **kwds) -> Axes:
def unpack_single_str_list(keys):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\style.py
-----------------------------
>     """
      Get standard colors based on `colormap`, `color_type` or `color` inputs.
  
      Parameters
def get_standard_colors(
def _derive_colors(
def _cycle_colors(colors: list[Color], num_colors: int) -> Iterator[Color]:
def _get_colors_from_colormap(
def _get_cmap_instance(colormap: str | Colormap) -> Colormap:
def _get_colors_from_color(
def _is_single_color(color: Color | Collection[Color]) -> bool:
def _gen_list_of_colors_from_iterable(color: Collection[Color]) -> Iterator[Color]:
def _is_floats_color(color: Color | Collection[Color]) -> bool:
def _get_colors_from_color_type(color_type: str, num_colors: int) -> list[Color]:
def _get_default_colors(num_colors: int) -> list[Color]:
def _get_random_colors(num_colors: int) -> list[Color]:
def _random_color(column: int) -> list[float]:
def _is_single_string_color(color: Color) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\timeseries.py
-----------------------------
>     """Initialize axes for time-series plotting"""
      if not hasattr(ax, "_plot_data"):
          # TODO #54485
          ax._plot_data = []  # type: ignore[attr-defined]
def maybe_resample(series: Series, ax: Axes, kwargs: dict[str, Any]):
def _is_sub(f1: str, f2: str) -> bool:
def _is_sup(f1: str, f2: str) -> bool:
def _upsample_others(ax: Axes, freq: BaseOffset, kwargs: dict[str, Any]) -> None:
def _replot_ax(ax: Axes, freq: BaseOffset):
def decorate_axes(ax: Axes, freq: BaseOffset) -> None:
def _get_ax_freq(ax: Axes):
def _get_period_alias(freq: timedelta | BaseOffset | str) -> str | None:
def _get_freq(ax: Axes, series: Series):
def use_dynamic_x(ax: Axes, data: DataFrame | Series) -> bool:
def _get_index_freq(index: Index) -> BaseOffset | None:
def maybe_convert_index(ax: Axes, data: NDFrameT) -> NDFrameT:
def _format_coord(freq, t, y) -> str:
def format_dateaxis(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\tools.py
-----------------------------
>     """Whether fig has constrained_layout enabled."""
      if not hasattr(fig, "get_constrained_layout"):
          return False
      return not fig.get_constrained_layout()
def do_adjust_figure(fig: Figure) -> bool:
def maybe_adjust_figure(fig: Figure, *args, **kwargs) -> None:
def format_date_labels(ax: Axes, rot) -> None:
def table(
def _get_layout(
def create_subplots(
def _remove_labels_from_axis(axis: Axis) -> None:
def _has_externally_shared_axis(ax1: Axes, compare_axis: str) -> bool:
def handle_shared_axes(
def flatten_axes(axes: Axes | Sequence[Axes]) -> np.ndarray:
def set_ticks_props(
def get_all_lines(ax: Axes) -> list[Line2D]:
def get_xlim(lines: Iterable[Line2D]) -> tuple[float, float]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_matplotlib\__init__.py
-----------------------------
def plot(data, kind, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_core.py
-----------------------------
>     """
      Draw histogram of the input series using matplotlib.
  
      Parameters
def hist_series(
def hist_frame(
def boxplot(
def boxplot_frame(
def boxplot_frame_groupby(
class PlotAccessor(PandasObject):
def _load_backend(backend: str) -> types.ModuleType:
def _get_plot_backend(backend: str | None = None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\_misc.py
-----------------------------
>     """
      Helper function to convert DataFrame and Series to matplotlib.table.
  
      Parameters
def table(ax: Axes, data: DataFrame | Series, **kwargs) -> Table:
def register() -> None:
def deregister() -> None:
def scatter_matrix(
def radviz(
def andrews_curves(
def bootstrap_plot(
def parallel_coordinates(
def lag_plot(series: Series, lag: int = 1, ax: Axes | None = None, **kwds) -> Axes:
def autocorrelation_plot(series: Series, ax: Axes | None = None, **kwargs) -> Axes:
class _Options(dict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\plotting\__init__.py
-----------------------------
> """
  Plotting public API.
  
  Authors of third-party plotting backends should implement a module with a

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\api\test_api.py
-----------------------------
class Base:
class TestPDApi(Base):
class TestApi(Base):
class TestTesting(Base):
def test_pandas_array_alias():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\api\test_types.py
-----------------------------
class TestTypes(Base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\api\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\common.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_frame_apply.py
-----------------------------
>     """
      Fixture for DataFrame of ints which are constant per column
  
      Columns are ['A', 'B', 'C'], with values (per column): [1, 2, 3]
def int_frame_const_col():
def engine(request):
def test_apply(float_frame, engine, request):
def test_apply_args(float_frame, axis, raw, engine, request):
def test_apply_categorical_func():
def test_apply_axis1_with_ea():
def test_agg_axis1_duplicate_index(data, dtype):
def test_apply_mixed_datetimelike():
def test_apply_empty(func, engine):
def test_apply_float_frame(float_frame, engine):
def test_apply_empty_except_index(engine):
def test_apply_with_reduce_empty():
def test_apply_funcs_over_empty(func):
def test_nunique_empty():
def test_apply_standard_nonunique():
def test_apply_broadcast_scalars(float_frame):
def test_apply_broadcast_scalars_axis1(float_frame):
def test_apply_broadcast_lists_columns(float_frame):
def test_apply_broadcast_lists_index(float_frame):
def test_apply_broadcast_list_lambda_func(int_frame_const_col):
def test_apply_broadcast_series_lambda_func(int_frame_const_col):
def test_apply_raw_float_frame(float_frame, axis, engine):
def test_apply_raw_float_frame_lambda(float_frame, axis, engine):
def test_apply_raw_float_frame_no_reduction(float_frame, engine):
def test_apply_raw_mixed_type_frame(axis, engine):
def test_apply_axis1(float_frame):
def test_apply_mixed_dtype_corner():
def test_apply_mixed_dtype_corner_indexing():
def test_apply_empty_infer_type(ax, func, raw, axis, engine, request):
def test_apply_empty_infer_type_broadcast():
def test_apply_with_args_kwds_add_some(float_frame):
def test_apply_with_args_kwds_agg_and_add(float_frame):
def test_apply_with_args_kwds_subtract_and_divide(float_frame):
def test_apply_yield_list(float_frame):
def test_apply_reduce_Series(float_frame):
def test_apply_reduce_to_dict():
def test_apply_differently_indexed():
def test_apply_bug():
def test_apply_convert_objects():
def test_apply_attach_name(float_frame):
def test_apply_attach_name_axis1(float_frame):
def test_apply_attach_name_non_reduction(float_frame):
def test_apply_attach_name_non_reduction_axis1(float_frame):
def test_apply_multi_index():
def test_apply_dict(df, dicts):
def test_apply_non_numpy_dtype():
def test_apply_non_numpy_dtype_category():
def test_apply_dup_names_multi_agg():
def test_apply_nested_result_axis_1(op):
def test_apply_noreduction_tzaware_object():
def test_apply_function_runs_once():
def test_apply_raw_function_runs_once(engine):
def test_apply_with_byte_string():
def test_apply_category_equalness(val):
def test_infer_row_shape():
def test_dictlike_lambda(ops, by_row, expected):
def test_dictlike_lambda_raises(ops):
def test_with_dictlike_columns():
def test_with_dictlike_columns_with_datetime():
def test_with_dictlike_columns_with_infer():
def test_listlike_lambda(ops, by_row, expected):
def test_listlike_lambda_raises(ops):
def test_with_listlike_columns():
def test_with_listlike_columns_returning_list():
def test_infer_output_shape_columns():
def test_infer_output_shape_listlike_columns():
def test_infer_output_shape_listlike_columns_np_func(val):
def test_infer_output_shape_listlike_columns_with_timestamp():
def test_consistent_coerce_for_shapes(lst):
def test_consistent_names(int_frame_const_col):
def test_result_type(int_frame_const_col):
def test_result_type_shorter_list(int_frame_const_col):
def test_result_type_broadcast(int_frame_const_col, request, engine):
def test_result_type_broadcast_series_func(int_frame_const_col, engine, request):
def test_result_type_series_result(int_frame_const_col, engine, request):
def test_result_type_series_result_other_index(int_frame_const_col, engine, request):
def test_consistency_for_boxed(box, int_frame_const_col):
def test_agg_transform(axis, float_frame):
def test_demo():
def test_demo_dict_agg():
def test_agg_with_name_as_column_name():
def test_agg_multiple_mixed():
def test_agg_multiple_mixed_raises():
def test_agg_reduce(axis, float_frame):
def test_nuiscance_columns():
def test_non_callable_aggregates(how):
def test_size_as_str(how, axis):
def test_agg_listlike_result():
def test_agg_args_kwargs(axis, args, kwargs):
def test_frequency_is_original(num_cols, engine, request):
def test_apply_datetime_tz_issue(engine, request):
def test_mixed_column_raises(df, method, using_infer_string):
def test_apply_dtype(col):
def test_apply_mutating(using_array_manager, using_copy_on_write, warn_copy_on_write):
def test_apply_empty_list_reduce():
def test_apply_no_suffix_index(engine, request):
def test_apply_raw_returns_string(engine):
def test_aggregation_func_column_order():
def test_apply_getitem_axis_1(engine, request):
def test_nuisance_depr_passes_through_warnings():
def test_apply_type():
def test_apply_on_empty_dataframe(engine):
def test_apply_return_list():
def test_unique_agg_type_is_series(test, constant):
def test_any_apply_keyword_non_zero_axis_regression():
def test_agg_mapping_func_deprecated():
def test_agg_std():
def test_agg_dist_like_and_nonunique_columns():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_frame_apply_relabeling.py
-----------------------------
def test_agg_relabel():
def test_agg_relabel_multi_columns_multi_methods():
def test_agg_relabel_partial_functions():
def test_agg_namedtuple():
def test_reconstruct_func():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_frame_transform.py
-----------------------------
>     """
      Helper to ensure we have the right type of object for a test parametrized
      over frame_or_series.
def unpack_obj(obj, klass, axis):
def test_transform_ufunc(axis, float_frame, frame_or_series):
def test_transform_listlike(axis, float_frame, ops, names):
def test_transform_empty_listlike(float_frame, ops, frame_or_series):
def test_transform_listlike_func_with_args():
def test_transform_dictlike(axis, float_frame, box):
def test_transform_dictlike_mixed():
def test_transform_empty_dictlike(float_frame, ops, frame_or_series):
def test_transform_udf(axis, float_frame, use_apply, frame_or_series):
def test_transform_bad_dtype(op, frame_or_series, request):
def test_transform_failure_typeerror(request, op):
def test_transform_failure_valueerror():
def test_transform_passes_args(use_apply, frame_or_series):
def test_transform_empty_dataframe():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_invalid_arg.py
-----------------------------
def test_result_type_error(result_type):
def test_apply_invalid_axis_value():
def test_agg_raises():
def test_map_with_invalid_na_action_raises():
def test_map_arg_is_dict_with_invalid_na_action_raises(input_na_action):
def test_nested_renamer(frame_or_series, method, func):
def test_series_nested_renamer(renamer):
def test_apply_dict_depr():
def test_dict_nested_renaming_depr(method):
def test_missing_column(method, func):
def test_transform_mixed_column_name_dtypes():
def test_apply_str_axis_1_raises(how, args):
def test_transform_axis_1_raises():
def test_apply_modify_traceback():
def test_agg_cython_table_raises_frame(df, func, expected, axis, using_infer_string):
def test_agg_cython_table_raises_series(series, func, expected, using_infer_string):
def test_agg_none_to_type():
def test_transform_none_to_type():
def test_apply_broadcast_error(func):
def test_transform_and_agg_err_agg(axis, float_frame):
def test_transform_and_agg_err_series(string_series, func, msg):
def test_transform_wont_agg_frame(axis, float_frame, func):
def test_transform_wont_agg_series(string_series, func):
def test_transform_reducer_raises(all_reductions, frame_or_series, op_wrapper):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_numba.py
-----------------------------
def apply_axis(request):
def test_numba_vs_python_noop(float_frame, apply_axis):
def test_numba_vs_python_string_index():
def test_numba_vs_python_indexing():
def test_numba_vs_python_reductions(reduction, apply_axis):
def test_numba_numeric_colnames(colnames):
def test_numba_parallel_unsupported(float_frame):
def test_numba_nonunique_unsupported(apply_axis):
def test_numba_unsupported_dtypes(apply_axis):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_series_apply.py
-----------------------------
def by_row(request):
def test_series_map_box_timedelta(by_row):
def test_apply(datetime_series, by_row):
def test_apply_map_same_length_inference_bug():
def test_apply_convert_dtype_deprecated(convert_dtype):
def test_apply_args():
def test_agg_args(args, kwargs, increment):
def test_agg_mapping_func_deprecated():
def test_series_apply_map_box_timestamps(by_row):
def test_apply_box_dt64():
def test_apply_box_dt64tz():
def test_apply_box_td64():
def test_apply_box_period():
def test_apply_datetimetz(by_row):
def test_apply_categorical(by_row, using_infer_string):
def test_apply_categorical_with_nan_values(series, by_row):
def test_apply_empty_integer_series_with_datetime_index(by_row):
def test_apply_dataframe_iloc():
def test_transform(string_series, by_row):
def test_transform_partial_failure(op, request):
def test_transform_partial_failure_valueerror():
def test_demo():
def test_apply_map_evaluate_lambdas_the_same(string_series, func, by_row):
def test_agg_evaluate_lambdas(string_series):
def test_with_nested_series(datetime_series, op_name):
def test_replicate_describe(string_series):
def test_reduce(string_series):
def test_non_callable_aggregates(how, kwds):
def test_series_apply_no_suffix_index(by_row):
def test_apply_series_on_date_time_index_aware_series(dti, exp, aware):
def test_apply_scalar_on_date_time_index_aware_series(by_row, expected):
def test_apply_to_timedelta(by_row):
def test_apply_listlike_reducer(string_series, ops, names, how, kwargs):
def test_apply_dictlike_reducer(string_series, ops, how, kwargs, by_row):
def test_apply_listlike_transformer(string_series, ops, names, by_row):
def test_apply_listlike_lambda(ops, expected, by_row):
def test_apply_dictlike_transformer(string_series, ops, by_row):
def test_apply_dictlike_lambda(ops, by_row, expected):
def test_apply_retains_column_name(by_row):
def test_apply_type():
def test_series_apply_unpack_nested_data():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_series_apply_relabeling.py
-----------------------------
def test_relabel_no_duplicated_method():
def test_relabel_duplicated_method():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_series_transform.py
-----------------------------
def test_agg_args(args, kwargs, increment):
def test_transform_listlike(string_series, ops, names):
def test_transform_listlike_func_with_args():
def test_transform_dictlike(string_series, box):
def test_transform_dictlike_mixed():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\test_str.py
-----------------------------
def test_apply_with_string_funcs(request, float_frame, func, args, kwds, how):
def test_with_string_args(datetime_series, arg):
def test_apply_np_reducer(op, how):
def test_apply_np_transformer(float_frame, op, how):
def test_agg_cython_table_series(series, func, expected):
def test_agg_cython_table_transform_series(series, func, expected):
def test_agg_cython_table_frame(df, func, expected, axis):
def test_agg_cython_table_transform_frame(df, func, expected, axis):
def test_transform_groupby_kernel_series(request, string_series, op):
def test_transform_groupby_kernel_frame(request, axis, float_frame, op):
def test_transform_method_name(method):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\apply\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\common.py
-----------------------------
> """
  Assertion helpers for arithmetic tests.
def assert_cannot_add(left, right, msg="cannot add"):
def assert_invalid_addsub_type(left, right, msg=None):
def get_upcast_box(left, right, is_cmp: bool = False):
def assert_invalid_comparison(left, right, box):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\conftest.py
-----------------------------
>     """
      Several variants of integer value 1. The zero-dim integer array
      behaves like an integer.
  
def one(request):
def zero(request):
def scalar_td(request):
def three_days(request):
def two_hours(request):
def not_daily(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_array_ops.py
-----------------------------
def test_na_logical_op_2d():
def test_object_comparison_2d():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_categorical.py
-----------------------------
class TestCategoricalComparisons:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py
-----------------------------
class TestDatetime64ArrayLikeComparisons:
class TestDatetime64SeriesComparison:
class TestDatetimeIndexComparisons:
class TestDatetime64Arithmetic:
class TestDatetime64DateOffsetArithmetic:
class TestDatetime64OverflowHandling:
class TestTimestampSeriesArithmetic:
class TestDatetimeIndexArithmetic:
def test_shift_months(years, months, unit):
def test_dt64arr_addsub_object_dtype_2d():
def test_non_nano_dt64_addsub_np_nat_scalars():
def test_non_nano_dt64_addsub_np_nat_scalars_unitless():
def test_non_nano_dt64_addsub_np_nat_scalars_unsupported_unit():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_interval.py
-----------------------------
>     """
      Fixture for building an IntervalArray from various dtypes
def left_right_dtypes(request):
def interval_array(left_right_dtypes):
def create_categorical_intervals(left, right, closed="right"):
def create_series_intervals(left, right, closed="right"):
def create_series_categorical_intervals(left, right, closed="right"):
class TestComparison:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_numeric.py
-----------------------------
>     """
      Fixture to test behavior for Index, Series and tm.to_array classes
def switch_numexpr_min_elements(request, monkeypatch):
def box_pandas_1d_array(request):
def numeric_idx(request):
def box_1d_array(request):
def adjust_negative_zero(zero, expected):
def compare_op(series, other, op):
class TestNumericComparisons:
class TestNumericArraylikeArithmeticWithDatetimeLike:
class TestDivisionByZero:
class TestMultiplicationDivision:
class TestAdditionSubtraction:
class TestUFuncCompat:
class TestObjectDtypeEquivalence:
class TestNumericArithmeticUnsorted:
def test_fill_value_inf_masking():
def test_dataframe_div_silenced():
def test_integer_array_add_list_like(
def test_sub_multiindex_swapped_levels():
def test_empty_str_comparison(power, string_size):
def test_series_add_sub_with_UInt64():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_object.py
-----------------------------
class TestObjectComparisons:
class TestArithmetic:
class MyIndex(pd.Index):
def test_index_ops_defer_to_unknown_subclasses(other):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_period.py
-----------------------------
>     """
      Several timedelta-like and DateOffset instances that are _not_
      compatible with Hourly frequencies.
def not_hourly(request):
def mismatched_freq(request):
class TestPeriodArrayLikeComparisons:
class TestPeriodIndexComparisons:
class TestPeriodSeriesComparisons:
class TestPeriodIndexSeriesComparisonConsistency:
class TestPeriodFrameArithmetic:
class TestPeriodIndexArithmetic:
class TestPeriodSeriesArithmetic:
class TestPeriodIndexSeriesMethods:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py
-----------------------------
>     """
      Helper to check the dtype for a Series, Index, or single-column DataFrame.
def assert_dtype(obj, expected_dtype):
def get_expected_name(box, names):
class TestTimedelta64ArrayLikeComparisons:
class TestTimedelta64ArrayComparisons:
class TestTimedelta64ArithmeticUnsorted:
class TestAddSubNaTMasking:
class TestTimedeltaArraylikeAddSubOps:
class TestTimedeltaArraylikeMulDivOps:
class TestTimedelta64ArrayLikeArithmetic:
def test_add_timestamp_to_timedelta():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arithmetic\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_arithmetic.py
-----------------------------
>     """Fixture returning boolean array with valid and missing values."""
      return pd.array(
          [True, False] * 4 + [np.nan] + [True, False] * 44 + [np.nan] + [True, False],
          dtype="boolean",
def data():
def left_array():
def right_array():
def test_add_mul(left_array, right_array, opname, exp):
def test_sub(left_array, right_array):
def test_div(left_array, right_array):
def test_op_int8(left_array, right_array, opname):
def test_error_invalid_values(data, all_arithmetic_operators):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_astype.py
-----------------------------
def test_astype(using_infer_string):
def test_astype_to_boolean_array():
def test_astype_to_integer_array():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_comparison.py
-----------------------------
>     """Fixture returning boolean array with valid and missing data"""
      return pd.array(
          [True, False] * 4 + [np.nan] + [True, False] * 44 + [np.nan] + [True, False],
          dtype="boolean",
def data():
def dtype():
class TestComparisonOps(ComparisonOps):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_construction.py
-----------------------------
def test_boolean_array_constructor():
def test_boolean_array_constructor_copy():
def test_to_boolean_array():
def test_to_boolean_array_all_none():
def test_to_boolean_array_missing_indicators(a, b):
def test_to_boolean_array_error(values):
def test_to_boolean_array_from_integer_array():
def test_to_boolean_array_from_float_array():
def test_to_boolean_array_integer_like():
def test_coerce_to_array():
def test_coerce_to_array_from_boolean_array():
def test_coerce_to_numpy_array():
def test_to_boolean_array_from_strings():
def test_to_boolean_array_from_strings_invalid_string():
def test_to_numpy(box):
def test_to_numpy_copy():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_function.py
-----------------------------
def test_ufuncs_binary(ufunc):
def test_ufuncs_unary(ufunc):
def test_ufunc_numeric():
def test_ufunc_reduce_raises(values):
def test_value_counts_na():
def test_value_counts_with_normalize():
def test_diff():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_indexing.py
-----------------------------
def test_setitem_missing_values(na):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_logical.py
-----------------------------
class TestLogicalOps(BaseOpsUtil):
def test_error_both_scalar(operation):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_ops.py
-----------------------------
class TestUnaryOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_reduction.py
-----------------------------
>     """Fixture returning boolean array, with valid and missing values."""
      return pd.array(
          [True, False] * 4 + [np.nan] + [True, False] * 44 + [np.nan] + [True, False],
          dtype="boolean",
def data():
def test_any_all(values, exp_any, exp_all, exp_any_noskip, exp_all_noskip):
def test_reductions_return_types(dropna, data, all_numeric_reductions):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\test_repr.py
-----------------------------
def test_repr():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\boolean\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_algos.py
-----------------------------
def test_factorize(categories, ordered):
def test_factorized_sort():
def test_factorized_sort_ordered():
def test_isin_cats():
def test_isin_cats_corner_cases(value):
def test_isin_empty(empty):
def test_diff():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_analytics.py
-----------------------------
class TestCategoricalAnalytics:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_api.py
-----------------------------
class TestCategoricalAPI:
class TestCategoricalAPIWithFactor:
class TestPrivateCategoricalAPI:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_astype.py
-----------------------------
class TestAstype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_constructors.py
-----------------------------
class TestCategoricalConstructors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_dtypes.py
-----------------------------
class TestCategoricalDtypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_indexing.py
-----------------------------
>     """
      Monkeypatch Categorical.__array__ to ensure no implicit conversion.
  
      Raises
class TestCategoricalIndexingWithFactor:
class TestCategoricalIndexing:
class TestContains:
def test_mask_with_boolean(index):
def test_mask_with_boolean_na_treated_as_false(index):
def non_coercible_categorical(monkeypatch):
def test_series_at():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_map.py
-----------------------------
def na_action(request):
def test_map_str(data, categories, ordered, na_action):
def test_map(na_action):
def test_map_with_nan_none(data, f, expected):  # GH 24241
def test_map_with_nan_ignore(data, f, expected):  # GH 24241
def test_map_with_dict_or_series(na_action):
def test_map_na_action_no_default_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_missing.py
-----------------------------
class TestCategoricalMissing:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_operators.py
-----------------------------
class TestCategoricalOpsWithFactor:
class TestCategoricalOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_replace.py
-----------------------------
def test_replace_categorical_series(to_replace, value, expected, flip_categories):
def test_replace_categorical(to_replace, value, result, expected_error_msg):
def test_replace_categorical_ea_dtype():
def test_replace_maintain_ordering():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_repr.py
-----------------------------
>         expected = """\
  ['aaaaa', 'bb', 'cccc', 'aaaaa', 'bb', ..., 'bb', 'cccc', 'aaaaa', 'bb', 'cccc']
  Length: 60
class TestCategoricalReprWithFactor:
class TestCategoricalRepr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_sorting.py
-----------------------------
class TestCategoricalSort:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_subclass.py
-----------------------------
class SubclassedCategorical(Categorical):
class TestCategoricalSubclassing:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_take.py
-----------------------------
>     """Boolean 'allow_fill' parameter for Categorical.take"""
      return request.param
  
  
def allow_fill(request):
class TestTake:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\test_warnings.py
-----------------------------
class TestCategoricalWarnings:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\categorical\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\datetimes\test_constructors.py
-----------------------------
class TestDatetimeArrayConstructor:
class TestSequenceToDT64NS:
def test_from_arrow_with_different_units_and_timezones_with(
def test_from_arrow_from_empty(unit, tz):
def test_from_arrow_from_integers():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\datetimes\test_cumulative.py
-----------------------------
class TestAccumulator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\datetimes\test_reductions.py
-----------------------------
>         """Fixture returning DatetimeArray with parametrized timezones"""
          tz = tz_naive_fixture
          dtype = DatetimeTZDtype(tz=tz) if tz is not None else np.dtype("M8[ns]")
          arr = DatetimeArray._from_sequence(
class TestReductions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\datetimes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\conftest.py
-----------------------------
>     """Parametrized fixture returning a float 'dtype'"""
      return request.param()
  
  
def dtype(request):
def data(dtype):
def data_missing(dtype):
def all_data(request, data, data_missing):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_arithmetic.py
-----------------------------
def test_array_op(dtype, opname, exp):
def test_divide_by_zero(dtype, zero, negative):
def test_pow_scalar(dtype):
def test_pow_array(dtype):
def test_rpow_one_to_na():
def test_arith_zero_dim_ndarray(other):
def test_error_invalid_values(data, all_arithmetic_operators):
def test_cross_type_arithmetic():
def test_unary_float_operators(float_ea_dtype, source, neg_target, abs_target):
def test_bitwise(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_astype.py
-----------------------------
def test_astype():
def test_astype_to_floating_array():
def test_astype_to_boolean_array():
def test_astype_to_integer_array():
def test_astype_str(using_infer_string):
def test_astype_copy():
def test_astype_object(dtype):
def test_Float64_conversion():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_comparison.py
-----------------------------
class TestComparisonOps(NumericOps, ComparisonOps):
def test_equals():
def test_equals_nan_vs_na():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_concat.py
-----------------------------
def test_concat_series(to_concat_dtypes, result_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_construction.py
-----------------------------
def test_uses_pandas_na():
def test_floating_array_constructor():
def test_floating_array_disallows_float16():
def test_floating_array_disallows_Float16_dtype(request):
def test_floating_array_constructor_copy():
def test_to_array():
def test_to_array_none_is_nan(a, b):
def test_to_array_mixed_integer_float():
def test_to_array_error(values):
def test_construct_from_float_strings(values):
def test_to_array_inferred_dtype():
def test_to_array_dtype_keyword():
def test_to_array_integer():
def test_to_array_bool(bool_values, values, target_dtype, expected_dtype):
def test_series_from_float(data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_contains.py
-----------------------------
def test_contains_nan():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_function.py
-----------------------------
def test_ufuncs_single(ufunc):
def test_ufuncs_single_float(ufunc):
def test_ufuncs_binary_float(ufunc):
def test_ufunc_reduce_raises(values):
def test_stat_method(pandasmethname, kwargs):
def test_value_counts_na():
def test_value_counts_empty():
def test_value_counts_with_normalize():
def test_floating_array_sum(skipna, min_count, dtype):
def test_floating_array_numpy_sum(values, expected):
def test_preserve_dtypes(op):
def test_floating_array_min_max(skipna, method, dtype):
def test_floating_array_prod(skipna, min_count, dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_repr.py
-----------------------------
>     expected = """<FloatingArray>
  [ 1.0,  2.0, <NA>,  1.0,  2.0, <NA>,  1.0,  2.0, <NA>,  1.0,
   ...
   <NA>,  1.0,  2.0, <NA>,  1.0,  2.0, <NA>,  1.0,  2.0, <NA>]
def test_dtypes(dtype):
def test_repr_dtype(dtype, expected):
def test_repr_array():
def test_repr_array_long():
def test_frame_repr(data_missing):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\test_to_numpy.py
-----------------------------
def test_to_numpy(box):
def test_to_numpy_float(box):
def test_to_numpy_int(box):
def test_to_numpy_na_value(box):
def test_to_numpy_na_value_with_nan():
def test_to_numpy_dtype(box, dtype):
def test_to_numpy_na_raises(box, dtype):
def test_to_numpy_string(box, dtype):
def test_to_numpy_copy():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\floating\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\conftest.py
-----------------------------
>     """Parametrized fixture returning integer 'dtype'"""
      return request.param()
  
  
def dtype(request):
def data(dtype):
def data_missing(dtype):
def all_data(request, data, data_missing):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_arithmetic.py
-----------------------------
def test_add_mul(dtype, opname, exp):
def test_sub(dtype):
def test_div(dtype):
def test_divide_by_zero(zero, negative):
def test_floordiv(dtype):
def test_floordiv_by_int_zero_no_mask(any_int_ea_dtype):
def test_mod(dtype):
def test_pow_scalar():
def test_pow_array():
def test_rpow_one_to_na():
def test_numpy_zero_dim_ndarray(other):
def test_error_invalid_values(data, all_arithmetic_operators):
def test_arith_coerce_scalar(data, all_arithmetic_operators):
def test_arithmetic_conversion(all_arithmetic_operators, other):
def test_cross_type_arithmetic():
def test_reduce_to_float(op):
def test_unary_int_operators(any_signed_int_ea_dtype, source, neg_target, abs_target):
def test_values_multiplying_large_series_by_NA():
def test_bitwise(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_comparison.py
-----------------------------
class TestComparisonOps(NumericOps, ComparisonOps):
def test_equals():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_concat.py
-----------------------------
def test_concat_series(to_concat_dtypes, result_dtype):
def test_concat_series_with_numpy(to_concat_dtypes, result_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_construction.py
-----------------------------
>     """Fixture returning parametrized IntegerArray from given sequence.
  
      Used to test dtype conversions.
def constructor(request):
def test_uses_pandas_na():
def test_from_dtype_from_float(data):
def test_conversions(data_missing):
def test_integer_array_constructor():
def test_integer_array_constructor_copy():
def test_to_integer_array_none_is_nan(a, b):
def test_to_integer_array_error(values):
def test_to_integer_array_inferred_dtype(constructor):
def test_to_integer_array_dtype_keyword(constructor):
def test_to_integer_array_float():
def test_to_integer_array_str():
def test_to_integer_array_bool(
def test_to_integer_array(values, to_dtype, result_dtype):
def test_integer_array_from_boolean():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_dtypes.py
-----------------------------
def test_dtypes(dtype):
def test_preserve_dtypes(op):
def test_astype_nansafe():
def test_construct_index(all_data, dropna):
def test_astype_index(all_data, dropna):
def test_astype(all_data):
def test_astype_copy():
def test_astype_to_larger_numpy():
def test_astype_specific_casting(dtype):
def test_astype_floating():
def test_astype_dt64():
def test_construct_cast_invalid(dtype):
def test_to_numpy_na_nan(in_series):
def test_to_numpy_dtype(dtype, in_series):
def test_to_numpy_na_raises(dtype):
def test_astype_str(using_infer_string):
def test_astype_boolean():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_function.py
-----------------------------
def test_ufuncs_single_int(ufunc):
def test_ufuncs_single_float(ufunc):
def test_ufuncs_binary_int(ufunc):
def test_ufunc_binary_output():
def test_ufunc_reduce_raises(values):
def test_stat_method(pandasmethname, kwargs):
def test_value_counts_na():
def test_value_counts_empty():
def test_value_counts_with_normalize():
def test_integer_array_sum(skipna, min_count, any_int_ea_dtype):
def test_integer_array_min_max(skipna, method, any_int_ea_dtype):
def test_integer_array_prod(skipna, min_count, any_int_ea_dtype):
def test_integer_array_numpy_sum(values, expected):
def test_dataframe_reductions(op):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_indexing.py
-----------------------------
def test_array_setitem_nullable_boolean_mask():
def test_array_setitem():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_reduction.py
-----------------------------
def test_series_reductions(op, expected):
def test_dataframe_reductions(op, expected):
def test_groupby_reductions(op, expected):
def test_mixed_reductions(op, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\test_repr.py
-----------------------------
def test_dtypes(dtype):
def test_repr_dtype(dtype, expected):
def test_repr_array():
def test_repr_array_long():
def test_frame_repr(data_missing):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\integer\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\interval\test_astype.py
-----------------------------
class TestAstype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\interval\test_formats.py
-----------------------------
def test_repr():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\interval\test_interval.py
-----------------------------
>     """
      Fixture for building an IntervalArray from various dtypes
def left_right_dtypes(request):
class TestAttributes:
class TestMethods:
class TestSetitem:
class TestReductions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\interval\test_interval_pyarrow.py
-----------------------------
def test_arrow_extension_type():
def test_arrow_array():
def test_arrow_array_missing():
def test_arrow_table_roundtrip(breaks):
def test_arrow_table_roundtrip_without_metadata(breaks):
def test_from_arrow_from_raw_struct_array():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\interval\test_overlaps.py
-----------------------------
> """Tests for Interval-Interval operations, such as overlaps, contains, etc."""
  import numpy as np
  import pytest
  
def constructor(request):
def start_shift(request):
class TestOverlaps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\interval\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\masked\test_arithmetic.py
-----------------------------
>     """Fixture returning parametrized (array, scalar) tuple.
  
      Used to test equivalence of scalars, numpy arrays with array ops, and the
      equivalence of DataFrame and Series ops.
def data(request):
def check_skip(data, op_name):
def is_bool_not_implemented(data, op_name):
def test_array_scalar_like_equivalence(data, all_arithmetic_operators):
def test_array_NA(data, all_arithmetic_operators):
def test_numpy_array_equivalence(data, all_arithmetic_operators):
def test_frame(data, all_arithmetic_operators):
def test_series(data, all_arithmetic_operators):
def test_error_invalid_object(data, all_arithmetic_operators):
def test_error_len_mismatch(data, all_arithmetic_operators):
def test_unary_op_does_not_propagate_mask(data, op):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\masked\test_arrow_compat.py
-----------------------------
>     """
      Fixture returning parametrized array from given dtype, including integer,
      float and boolean
def data(request):
def test_arrow_array(data):
def test_arrow_roundtrip(data):
def test_dataframe_from_arrow_types_mapper():
def test_arrow_load_from_zero_chunks(data):
def test_arrow_from_arrow_uint():
def test_arrow_sliced(data):
def np_dtype_to_arrays(any_real_numpy_dtype):
def test_pyarrow_array_to_numpy_and_mask(np_dtype_to_arrays):
def test_from_arrow_null(data, arr):
def test_from_arrow_type_error(data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\masked\test_function.py
-----------------------------
>     """
      Fixture returning parametrized 'data' array with different integer and
      floating point types
def data(request):
def numpy_dtype(data):
def test_round(data, numpy_dtype):
def test_tolist(data):
def test_to_numpy():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\masked\test_indexing.py
-----------------------------
class TestSetitemValidation:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\masked\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\numpy_\test_indexing.py
-----------------------------
class TestSearchsorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\numpy_\test_numpy.py
-----------------------------
> """
  Additional tests for NumpyExtensionArray that aren't covered by
  the interface tests.
def any_numpy_array(request):
def test_is_numeric(dtype, expected):
def test_is_boolean(dtype, expected):
def test_repr():
def test_constructor_from_string():
def test_dtype_idempotent(any_numpy_dtype):
def test_constructor_no_coercion():
def test_series_constructor_with_copy():
def test_series_constructor_with_astype():
def test_from_sequence_dtype():
def test_constructor_copy():
def test_constructor_with_data(any_numpy_array):
def test_to_numpy():
def test_setitem_series():
def test_setitem(any_numpy_array):
def test_bad_reduce_raises():
def test_validate_reduction_keyword_args():
def test_np_max_nested_tuples():
def test_np_reduce_2d():
def test_ufunc_unary(ufunc):
def test_ufunc():
def test_basic_binop():
def test_setitem_object_typecode(dtype):
def test_setitem_no_coercion():
def test_setitem_preserves_views():
def test_quantile_empty(dtype):
def test_factorize_unsigned():
def test_array_repr(any_numpy_array):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\numpy_\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\period\test_arrow_compat.py
-----------------------------
def test_arrow_extension_type():
def test_arrow_array(data, freq):
def test_arrow_array_missing():
def test_arrow_table_roundtrip():
def test_arrow_load_from_zero_chunks():
def test_arrow_table_roundtrip_without_metadata():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\period\test_astype.py
-----------------------------
def test_astype_int(dtype):
def test_astype_copies():
def test_astype_categorical():
def test_astype_period():
def test_astype_datetime(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\period\test_constructors.py
-----------------------------
def test_period_array_ok(data, freq, expected):
def test_period_array_readonly_object():
def test_from_datetime64_freq_changes():
def test_from_datetime64_freq_2M(freq):
def test_period_array_raises(data, freq, msg):
def test_period_array_non_period_series_raies():
def test_period_array_freq_mismatch():
def test_from_sequence_disallows_i8():
def test_from_td64nat_sequence_raises():
def test_freq_deprecated():
def test_period_array_from_datetime64():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\period\test_reductions.py
-----------------------------
class TestReductions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\period\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_accessor.py
-----------------------------
class TestSeriesAccessor:
class TestFrameAccessor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_arithmetics.py
-----------------------------
>     """kind kwarg to pass to SparseArray"""
      return request.param
  
  
def kind(request):
def mix(request):
class TestSparseArrayArithmetics:
def test_with_list(op):
def test_with_dataframe():
def test_with_zerodim_ndarray():
def test_ufuncs(ufunc, arr):
def test_binary_ufuncs(ufunc, a, b):
def test_ndarray_inplace():
def test_sparray_inplace():
def test_mismatched_length_cmp_op(cons):
def test_binary_operators(op, fill_value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_array.py
-----------------------------
>     """Fixture returning numpy array with valid and missing entries"""
      return np.array([np.nan, np.nan, 1, 2, 3, np.nan, 4, 5, np.nan, 6])
  
  
def arr_data():
def arr(arr_data):
def zarr():
class TestSparseArray:
class TestSparseArrayAnalytics:
def test_setting_fill_value_fillna_still_works():
def test_setting_fill_value_updates():
def test_first_fill_value_loc(arr, fill_value, loc):
def test_unique_na_fill(arr, fill_value):
def test_unique_all_sparse():
def test_map():
def test_map_missing():
def test_dropna(fill_value):
def test_drop_duplicates_fill_value():
def test_zero_sparse_column():
def test_array_interface(arr_data, arr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_astype.py
-----------------------------
class TestAstype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_combine_concat.py
-----------------------------
class TestSparseArrayConcat:
def test_concat_with_non_sparse(other, expected_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_constructors.py
-----------------------------
class TestConstructors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_dtype.py
-----------------------------
def test_inferred_dtype(dtype, fill_value):
def test_from_sparse_dtype():
def test_from_sparse_dtype_fill_value():
def test_equal(dtype, fill_value):
def test_nans_equal():
def test_not_equal(a, b):
def test_construct_from_string_raises():
def test_is_numeric(dtype, expected):
def test_str_uses_object():
def test_construct_from_string(string, expected):
def test_hash_equal(a, b, expected):
def test_parse_subtype(string, expected):
def test_construct_from_string_fill_value_raises(string):
def test_update_dtype(original, dtype, expected):
def test_update_dtype_raises(original, dtype, expected_error_msg):
def test_repr():
def test_sparse_dtype_subtype_must_be_numpy_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_indexing.py
-----------------------------
def arr_data():
def arr(arr_data):
class TestGetitem:
class TestSetitem:
class TestTake:
class TestWhere:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_libsparse.py
-----------------------------
def test_length():
def cases(request):
class TestSparseIndexUnion:
class TestSparseIndexIntersect:
class TestSparseIndexCommon:
class TestBlockIndex:
class TestIntIndex:
class TestSparseOperators:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_reductions.py
-----------------------------
class TestReductions:
class TestMinMax:
class TestArgmaxArgmin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\test_unary.py
-----------------------------
def test_unary_op(op, fill_value):
def test_invert(fill_value):
class TestUnaryMethods:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\sparse\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\string_\test_concat.py
-----------------------------
def test_concat_series(request, to_concat_dtypes, result_dtype):
def test_concat_with_object(string_dtype_arguments):
def test_concat_with_numpy(string_dtype_arguments):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\string_\test_string.py
-----------------------------
> """
  This module tests the functionality of StringArray and ArrowStringArray.
  Tests for the str accessors are in pandas/tests/strings/test_string_array.py
def dtype(string_dtype_arguments):
def dtype2(string_dtype_arguments2):
def cls(dtype):
def string_dtype_highest_priority(dtype1, dtype2):
def test_dtype_constructor():
def test_dtype_equality():
def test_repr(dtype):
def test_none_to_nan(cls, dtype):
def test_setitem_validates(cls, dtype):
def test_setitem_with_scalar_string(dtype):
def test_setitem_with_array_with_missing(dtype):
def test_astype_roundtrip(dtype):
def test_add(dtype):
def test_add_2d(dtype, request):
def test_add_sequence(dtype):
def test_mul(dtype):
def test_add_strings(dtype):
def test_add_frame(dtype):
def test_comparison_methods_scalar(comparison_op, dtype):
def test_comparison_methods_scalar_pd_na(comparison_op, dtype):
def test_comparison_methods_scalar_not_string(comparison_op, dtype):
def test_comparison_methods_array(comparison_op, dtype, dtype2):
def test_comparison_methods_array_arrow_extension(comparison_op, dtype2):
def test_comparison_methods_list(comparison_op, dtype):
def test_constructor_raises(cls):
def test_constructor_nan_like(na):
def test_from_sequence_no_mutate(copy, cls, dtype):
def test_astype_int(dtype):
def test_astype_nullable_int(dtype):
def test_astype_float(dtype, any_float_dtype):
def test_reduce(skipna, dtype):
def test_reduce_missing(skipna, dtype):
def test_min_max(method, skipna, dtype):
def test_min_max_numpy(method, box, dtype, request):
def test_fillna_args(dtype):
def test_arrow_array(dtype):
def test_arrow_roundtrip(dtype, string_storage, using_infer_string):
def test_arrow_from_string(using_infer_string):
def test_arrow_load_from_zero_chunks(dtype, string_storage, using_infer_string):
def test_value_counts_na(dtype):
def test_value_counts_with_normalize(dtype):
def test_use_inf_as_na(values, expected, dtype):
def test_value_counts_sort_false(dtype):
def test_memory_usage(dtype):
def test_astype_from_float_dtype(float_dtype, dtype):
def test_to_numpy_returns_pdna_default(dtype):
def test_to_numpy_na_value(dtype, nulls_fixture):
def test_isin(dtype, fixed_now_ts):
def test_isin_string_array(dtype, dtype2):
def test_isin_arrow_string_array(dtype):
def test_setitem_scalar_with_mask_validation(dtype):
def test_from_numpy_str(dtype):
def test_tolist(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\string_\test_string_arrow.py
-----------------------------
def test_eq_all_na():
def test_config(string_storage, using_infer_string):
def test_config_bad_storage_raises():
def test_constructor_not_string_type_raises(array_lib, chunked):
def test_constructor_not_string_type_value_dictionary_raises(chunked):
def test_constructor_valid_string_type_value_dictionary(string_type, chunked):
def test_constructor_valid_string_view(chunked):
def test_constructor_from_list():
def test_from_sequence_wrong_dtype_raises(using_infer_string):
def test_pyarrow_not_installed_raises():
def test_setitem(multiple_chunks, key, value, expected):
def test_setitem_invalid_indexer_raises():
def test_pickle_roundtrip(na_value):
def test_string_dtype_error_message():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\string_\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\timedeltas\test_constructors.py
-----------------------------
class TestTimedeltaArrayConstructor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\timedeltas\test_cumulative.py
-----------------------------
class TestAccumulator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\timedeltas\test_reductions.py
-----------------------------
class TestReductions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\timedeltas\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\masked_shared.py
-----------------------------
> """
  Tests shared by MaskedArray subclasses.
class ComparisonOps(BaseOpsUtil):
class NumericOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\test_array.py
-----------------------------
>         """
          Return the array type associated with this dtype.
  
          Returns
def test_dt64_array(dtype_unit):
def test_array(data, dtype, expected):
def test_array_copy():
def test_array_inference(data, expected):
def test_array_inference_fails(data):
def test_nd_raises(data):
def test_scalar_raises():
def test_dataframe_raises():
def test_bounds_check():
class DecimalDtype2(DecimalDtype):
class DecimalArray2(DecimalArray):
def test_array_unboxes(index_or_series):
def test_array_to_numpy_na():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\test_datetimelike.py
-----------------------------
>     """Fixture returning parametrized frequency in string format."""
      return request.param
  
  
def freqstr(request):
def period_index(freqstr):
def datetime_index(freqstr):
def timedelta_index():
class SharedTests:
class TestDatetimeArray(SharedTests):
class TestTimedeltaArray(SharedTests):
class TestPeriodArray(SharedTests):
def test_casting_nat_setitem_array(arr, casting_nats):
def test_invalid_nat_setitem_array(arr, non_casting_nats):
def test_to_numpy_extra(arr):
def test_searchsorted_datetimelike_with_listlike(values, klass, as_index):
def test_searchsorted_datetimelike_with_listlike_invalid_dtype(values, arg):
def test_period_index_construction_from_strings(klass):
def test_from_pandas_array(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\test_datetimes.py
-----------------------------
> """
  Tests for DatetimeArray
class TestNonNano:
class TestDatetimeArrayComparisons:
class TestDatetimeArray:
def test_factorize_sort_without_freq():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\test_ndarray_backed.py
-----------------------------
> """
  Tests for subclasses of NDArrayBackedExtensionArray
class TestEmpty:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\test_period.py
-----------------------------
def test_registered():
def test_asi8():
def test_take_raises():
def test_fillna_raises():
def test_fillna_copies():
def test_setitem(key, value, expected):
def test_setitem_raises_incompatible_freq():
def test_setitem_raises_length():
def test_setitem_raises_type():
def test_sub_period():
def test_sub_period_overflow():
def test_where_different_freq_raises(other):
def test_repr_small():
def test_repr_large():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\test_timedeltas.py
-----------------------------
class TestNonNano:
class TestTimedeltaArray:
class TestUnaryOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\arrays\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\common.py
-----------------------------
>     """Whether to skip test cases including NaN"""
      is_bool_index = isinstance(obj, Index) and obj.inferred_type == "boolean"
      return not is_bool_index and obj._can_hold_na
def allow_na_ops(obj: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_constructors.py
-----------------------------
>             """a test method"""
  
      class Delegate(PandasDelegate, PandasObject):
          def __init__(self, obj) -> None:
def series_via_frame_from_dict(x, **kwargs):
def series_via_frame_from_scalar(x, **kwargs):
def constructor(request):
class TestPandasDelegate:
class TestNoNewAttributesMixin:
class TestConstruction:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_conversion.py
-----------------------------
class TestToIterable:
def test_values_consistent(arr, expected_type, dtype, using_infer_string):
def test_numpy_array(arr):
def test_numpy_array_all_dtypes(any_numpy_dtype):
def test_array(arr, attr, index_or_series, request):
def test_array_multiindex_raises():
def test_to_numpy(arr, expected, zero_copy, index_or_series_or_array):
def test_to_numpy_copy(arr, as_series, using_infer_string):
def test_to_numpy_dtype(as_series, unit):
def test_to_numpy_na_value_numpy_dtype(
def test_to_numpy_multiindex_series_na_value(
def test_to_numpy_kwargs_raises():
def test_to_numpy_dataframe_na_value(data, dtype, na_value):
def test_to_numpy_dataframe_single_block(data, expected):
def test_to_numpy_dataframe_single_block_no_mutate():
class TestAsArray:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_fillna.py
-----------------------------
> """
  Though Index.fillna and Series.fillna has separate impl,
  test here to confirm these works as the same
def test_fillna(index_or_series_obj):
def test_fillna_null(null_obj, index_or_series_obj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_misc.py
-----------------------------
def test_isnull_notnull_docstrings():
def test_binary_ops_docstring(frame_or_series, op_name, op):
def test_ndarray_compat_properties(index_or_series_obj):
def test_memory_usage(index_or_series_memory_obj):
def test_memory_usage_components_series(series_with_simple_index):
def test_memory_usage_components_narrow_series(dtype):
def test_searchsorted(request, index_or_series_obj):
def test_access_by_position(index_flat):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_transpose.py
-----------------------------
def test_transpose(index_or_series_obj):
def test_transpose_non_default_axes(index_or_series_obj):
def test_numpy_transpose(index_or_series_obj):
def test_duplicate_labels(data, transposed_data, index, columns, dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_unique.py
-----------------------------
def test_unique(index_or_series_obj):
def test_unique_null(null_obj, index_or_series_obj):
def test_nunique(index_or_series_obj):
def test_nunique_null(null_obj, index_or_series_obj):
def test_unique_bad_unicode(index_or_series):
def test_nunique_dropna(dropna):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\test_value_counts.py
-----------------------------
def test_value_counts(index_or_series_obj):
def test_value_counts_null(null_obj, index_or_series_obj):
def test_value_counts_inferred(index_or_series, using_infer_string):
def test_value_counts_bins(index_or_series, using_infer_string):
def test_value_counts_datetime64(index_or_series, unit):
def test_value_counts_timedelta64(index_or_series, unit):
def test_value_counts_with_nan(dropna, index_or_series):
def test_value_counts_object_inference_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\base\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\computation\test_compat.py
-----------------------------
def test_compat():
def test_invalid_numexpr_version(engine, parser):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\computation\test_eval.py
-----------------------------
>         exp = """1 + 2 * \
def engine(request):
def parser(request):
def _eval_single_bin(lhs, cmp1, rhs, engine):
def lhs(request):
def idx_func_dict():
class TestEval:
class TestTypeCasting:
def should_warn(*args):
class TestAlignment:
class TestOperations:
class TestMath:
class TestScope:
def test_invalid_engine():
def test_numexpr_option_respected(use_numexpr, expected):
def test_numexpr_option_incompatible_op():
def test_invalid_parser():
def test_disallowed_nodes(engine, parser):
def test_syntax_error_exprs(engine, parser):
def test_name_error_exprs(engine, parser):
def test_invalid_local_variable_reference(engine, parser, express):
def test_numexpr_builtin_raises(engine, parser):
def test_bad_resolver_raises(engine, parser):
def test_empty_string_raises(engine, parser):
def test_more_than_one_expression_raises(engine, parser):
def test_bool_ops_fails_on_scalars(lhs, cmp, rhs, engine, parser):
def test_equals_various(other):
def test_inf(engine, parser):
def test_query_token(engine, column):
def test_negate_lt_eq_le(engine, parser):
def test_eval_no_support_column_name(request, column):
def test_set_inplace(using_copy_on_write, warn_copy_on_write):
class TestValidate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\computation\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\config\test_config.py
-----------------------------
class TestConfig:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\config\test_localization.py
-----------------------------
def _get_current_locale(lc_var: int = locale.LC_ALL) -> str:
def test_can_set_current_locale(lc_var):
def test_can_set_locale_valid_set(lc_var):
def test_can_set_locale_invalid_set(lc_var):
def test_can_set_locale_no_leak(lang, enc, lc_var):
def test_can_set_locale_invalid_get(monkeypatch):
def test_get_locales_at_least_one():
def test_get_locales_prefix():
def test_set_locale(lang, enc):
def test_encoding_detected():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\config\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\construction\test_extract_array.py
-----------------------------
def test_extract_array_rangeindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\construction\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\index\test_datetimeindex.py
-----------------------------
def test_datetimeindex(using_copy_on_write, cons):
def test_datetimeindex_tz_convert(using_copy_on_write):
def test_datetimeindex_tz_localize(using_copy_on_write):
def test_datetimeindex_isocalendar(using_copy_on_write):
def test_index_values(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\index\test_index.py
-----------------------------
def index_view(index_data=[1, 2]):
def test_set_index_update_column(using_copy_on_write, warn_copy_on_write):
def test_set_index_drop_update_column(using_copy_on_write):
def test_set_index_series(using_copy_on_write, warn_copy_on_write):
def test_assign_index_as_series(using_copy_on_write, warn_copy_on_write):
def test_assign_index_as_index(using_copy_on_write, warn_copy_on_write):
def test_index_from_series(using_copy_on_write, warn_copy_on_write):
def test_index_from_series_copy(using_copy_on_write):
def test_index_from_index(using_copy_on_write, warn_copy_on_write):
def test_index_ops(using_copy_on_write, func, request):
def test_infer_objects(using_copy_on_write):
def test_index_to_frame(using_copy_on_write):
def test_index_values(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\index\test_periodindex.py
-----------------------------
def test_periodindex(using_copy_on_write, cons):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\index\test_timedeltaindex.py
-----------------------------
def test_timedeltaindex(using_copy_on_write, cons):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\index\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_array.py
-----------------------------
def test_series_values(using_copy_on_write, method):
def test_dataframe_values(using_copy_on_write, using_array_manager, method):
def test_series_to_numpy(using_copy_on_write):
def test_ravel_read_only(using_copy_on_write, order):
def test_series_array_ea_dtypes(using_copy_on_write):
def test_dataframe_array_ea_dtypes(using_copy_on_write):
def test_dataframe_array_string_dtype(using_copy_on_write, using_array_manager):
def test_dataframe_multiple_numpy_dtypes():
def test_dataframe_single_block_copy_true():
def test_values_is_ea(using_copy_on_write):
def test_empty_dataframe():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_astype.py
-----------------------------
def test_astype_single_dtype(using_copy_on_write):
def test_astype_avoids_copy(using_copy_on_write, dtype, new_dtype):
def test_astype_different_target_dtype(using_copy_on_write, dtype):
def test_astype_numpy_to_ea():
def test_astype_string_and_object(using_copy_on_write, dtype, new_dtype):
def test_astype_string_and_object_update_original(
def test_astype_str_copy_on_pickle_roundrip():
def test_astype_string_copy_on_pickle_roundrip(any_string_dtype):
def test_astype_string_read_only_on_pickle_roundrip(any_string_dtype):
def test_astype_dict_dtypes(using_copy_on_write):
def test_astype_different_datetime_resos(using_copy_on_write):
def test_astype_different_timezones(using_copy_on_write):
def test_astype_different_timezones_different_reso(using_copy_on_write):
def test_astype_arrow_timestamp(using_copy_on_write):
def test_convert_dtypes_infer_objects(using_copy_on_write):
def test_convert_dtypes(using_copy_on_write, using_infer_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_chained_assignment_deprecation.py
-----------------------------
def test_methods_iloc_warn(using_copy_on_write):
def test_methods_iloc_getitem_item_cache(
def test_methods_iloc_getitem_item_cache_fillna(
def test_series_setitem(indexer, using_copy_on_write, warn_copy_on_write):
def test_frame_setitem(indexer, using_copy_on_write):
def test_series_iloc_setitem(indexer):
def test_frame_iloc_setitem(indexer, using_copy_on_write):
def test_series_loc_setitem(indexer):
def test_frame_loc_setitem(indexer, using_copy_on_write):
def test_series_at_setitem():
def test_frame_at_setitem():
def test_series_iat_setitem():
def test_frame_iat_setitem():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_clip.py
-----------------------------
def test_clip_inplace_reference(using_copy_on_write, warn_copy_on_write):
def test_clip_inplace_reference_no_op(using_copy_on_write):
def test_clip_inplace(using_copy_on_write):
def test_clip(using_copy_on_write):
def test_clip_no_op(using_copy_on_write):
def test_clip_chained_inplace(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_constructors.py
-----------------------------
def test_series_from_series(dtype, using_copy_on_write, warn_copy_on_write):
def test_series_from_series_with_reindex(using_copy_on_write, warn_copy_on_write):
def test_series_from_array(using_copy_on_write, idx, dtype, fastpath, arr):
def test_series_from_array_different_dtype(using_copy_on_write, copy):
def test_series_from_index(using_copy_on_write, idx):
def test_series_from_index_different_dtypes(using_copy_on_write):
def test_series_from_block_manager(using_copy_on_write, idx, dtype, fastpath):
def test_series_from_block_manager_different_dtype(using_copy_on_write):
def test_dataframe_constructor_mgr_or_df(
def test_dataframe_from_dict_of_series(
def test_dataframe_from_dict_of_series_with_reindex(dtype):
def test_dataframe_from_series_or_index(
def test_dataframe_from_series_or_index_different_dtype(using_copy_on_write, cons):
def test_dataframe_from_series_infer_datetime(using_copy_on_write):
def test_dataframe_from_dict_of_series_with_dtype(index):
def test_frame_from_numpy_array(using_copy_on_write, copy, using_array_manager):
def test_dataframe_from_records_with_dataframe(using_copy_on_write, warn_copy_on_write):
def test_frame_from_dict_of_index(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_core_functionalities.py
-----------------------------
def test_assigning_to_same_variable_removes_references(using_copy_on_write):
def test_setitem_dont_track_unnecessary_references(using_copy_on_write):
def test_setitem_with_view_copies(using_copy_on_write, warn_copy_on_write):
def test_setitem_with_view_invalidated_does_not_copy(
def test_out_of_scope(using_copy_on_write):
def test_delete(using_copy_on_write):
def test_delete_reference(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_functions.py
-----------------------------
def test_concat_frames(using_copy_on_write):
def test_concat_frames_updating_input(using_copy_on_write):
def test_concat_series(using_copy_on_write):
def test_concat_frames_chained(using_copy_on_write):
def test_concat_series_chained(using_copy_on_write):
def test_concat_series_updating_input(using_copy_on_write):
def test_concat_mixed_series_frame(using_copy_on_write):
def test_concat_copy_keyword(using_copy_on_write, copy):
def test_merge_on_key(using_copy_on_write, func):
def test_merge_on_index(using_copy_on_write):
def test_merge_on_key_enlarging_one(using_copy_on_write, func, how):
def test_merge_copy_keyword(using_copy_on_write, copy):
def test_join_on_key(dtype, using_copy_on_write):
def test_join_multiple_dataframes_on_key(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_indexing.py
-----------------------------
def backend(request):
def test_subset_column_selection(backend, using_copy_on_write):
def test_subset_column_selection_modify_parent(backend, using_copy_on_write):
def test_subset_row_slice(backend, using_copy_on_write, warn_copy_on_write):
def test_subset_column_slice(
def test_subset_loc_rows_columns(
def test_subset_iloc_rows_columns(
def test_subset_set_with_row_indexer(
def test_subset_set_with_mask(backend, using_copy_on_write, warn_copy_on_write):
def test_subset_set_column(backend, using_copy_on_write, warn_copy_on_write):
def test_subset_set_column_with_loc(
def test_subset_set_column_with_loc2(
def test_subset_set_columns(backend, using_copy_on_write, warn_copy_on_write, dtype):
def test_subset_set_with_column_indexer(
def test_subset_chained_getitem(
def test_subset_chained_getitem_column(
def test_subset_chained_getitem_series(
def test_subset_chained_single_block_row(
def test_null_slice(backend, method, using_copy_on_write, warn_copy_on_write):
def test_null_slice_series(backend, method, using_copy_on_write, warn_copy_on_write):
def test_series_getitem_slice(backend, using_copy_on_write, warn_copy_on_write):
def test_series_getitem_ellipsis(using_copy_on_write, warn_copy_on_write):
def test_series_subset_set_with_indexer(
def test_del_frame(backend, using_copy_on_write, warn_copy_on_write):
def test_del_series(backend):
def test_column_as_series(
def test_column_as_series_set_with_upcast(
def test_column_as_series_no_item_cache(
def test_dataframe_add_column_from_series(backend, using_copy_on_write):
def test_set_value_copy_only_necessary_column(
def test_series_midx_slice(using_copy_on_write, warn_copy_on_write):
def test_getitem_midx_slice(
def test_series_midx_tuples_slice(using_copy_on_write, warn_copy_on_write):
def test_midx_read_only_bool_indexer():
def test_loc_enlarging_with_dataframe(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_internals.py
-----------------------------
def test_consolidate(using_copy_on_write):
def test_switch_options():
def test_iset_splits_blocks_inplace(using_copy_on_write, locs, arr, dtype):
def test_exponential_backoff():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_interp_fillna.py
-----------------------------
def test_interpolate_no_op(using_copy_on_write, method):
def test_interp_fill_functions(using_copy_on_write, func):
def test_interpolate_triggers_copy(using_copy_on_write, vals, func):
def test_interpolate_inplace_no_reference_no_copy(using_copy_on_write, vals):
def test_interpolate_inplace_with_refs(using_copy_on_write, vals, warn_copy_on_write):
def test_interp_fill_functions_inplace(
def test_interpolate_cannot_with_object_dtype(using_copy_on_write):
def test_interpolate_object_convert_no_op(using_copy_on_write, using_infer_string):
def test_interpolate_object_convert_copies(using_copy_on_write):
def test_interpolate_downcast(using_copy_on_write):
def test_interpolate_downcast_reference_triggers_copy(using_copy_on_write):
def test_fillna(using_copy_on_write):
def test_fillna_dict(using_copy_on_write):
def test_fillna_inplace(using_copy_on_write, downcast):
def test_fillna_inplace_reference(using_copy_on_write, warn_copy_on_write):
def test_fillna_interval_inplace_reference(using_copy_on_write, warn_copy_on_write):
def test_fillna_series_empty_arg(using_copy_on_write):
def test_fillna_series_empty_arg_inplace(using_copy_on_write):
def test_fillna_ea_noop_shares_memory(
def test_fillna_inplace_ea_noop_shares_memory(
def test_fillna_chained_assignment(using_copy_on_write):
def test_interpolate_chained_assignment(using_copy_on_write, func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_methods.py
-----------------------------
def test_copy(using_copy_on_write):
def test_copy_shallow(using_copy_on_write, warn_copy_on_write):
def test_methods_copy_keyword(
def test_methods_series_copy_keyword(request, method, copy, using_copy_on_write):
def test_transpose_copy_keyword(using_copy_on_write, copy, using_array_manager):
def test_reset_index(using_copy_on_write):
def test_reset_index_series_drop(using_copy_on_write, index):
def test_groupby_column_index_in_references():
def test_rename_columns(using_copy_on_write):
def test_rename_columns_modify_parent(using_copy_on_write):
def test_pipe(using_copy_on_write):
def test_pipe_modify_df(using_copy_on_write):
def test_reindex_columns(using_copy_on_write):
def test_reindex_rows(index, using_copy_on_write):
def test_drop_on_column(using_copy_on_write):
def test_select_dtypes(using_copy_on_write):
def test_filter(using_copy_on_write, filter_kwargs):
def test_shift_no_op(using_copy_on_write):
def test_shift_index(using_copy_on_write):
def test_shift_rows_freq(using_copy_on_write):
def test_shift_columns(using_copy_on_write, warn_copy_on_write):
def test_pop(using_copy_on_write, warn_copy_on_write):
def test_align_frame(using_copy_on_write, func):
def test_align_series(using_copy_on_write):
def test_align_copy_false(using_copy_on_write):
def test_align_with_series_copy_false(using_copy_on_write):
def test_to_frame(using_copy_on_write, warn_copy_on_write):
def test_swapaxes_noop(using_copy_on_write, ax):
def test_swapaxes_single_block(using_copy_on_write):
def test_swapaxes_read_only_array():
def test_chained_methods(request, method, idx, using_copy_on_write, warn_copy_on_write):
def test_to_timestamp(using_copy_on_write, obj):
def test_to_period(using_copy_on_write, obj):
def test_set_index(using_copy_on_write):
def test_set_index_mutating_parent_does_not_mutate_index():
def test_add_prefix(using_copy_on_write):
def test_add_suffix(using_copy_on_write):
def test_dropna(using_copy_on_write, axis, val):
def test_dropna_series(using_copy_on_write, val):
def test_head_tail(method, using_copy_on_write, warn_copy_on_write):
def test_infer_objects(using_copy_on_write, using_infer_string):
def test_infer_objects_no_reference(using_copy_on_write, using_infer_string):
def test_infer_objects_reference(using_copy_on_write, using_infer_string):
def test_truncate(using_copy_on_write, kwargs):
def test_assign_drop_duplicates(using_copy_on_write, method):
def test_take(using_copy_on_write, obj):
def test_between_time(using_copy_on_write, obj):
def test_reindex_like(using_copy_on_write):
def test_sort_index(using_copy_on_write):
def test_sort_values(using_copy_on_write, obj, kwargs):
def test_sort_values_inplace(using_copy_on_write, obj, kwargs, warn_copy_on_write):
def test_round(using_copy_on_write, warn_copy_on_write, decimals):
def test_reorder_levels(using_copy_on_write):
def test_series_reorder_levels(using_copy_on_write):
def test_swaplevel(using_copy_on_write, obj):
def test_frame_set_axis(using_copy_on_write):
def test_series_set_axis(using_copy_on_write):
def test_set_flags(using_copy_on_write, warn_copy_on_write):
def test_rename_axis(using_copy_on_write, kwargs):
def test_tz_convert_localize(using_copy_on_write, func, tz):
def test_droplevel(using_copy_on_write):
def test_squeeze(using_copy_on_write, warn_copy_on_write):
def test_items(using_copy_on_write, warn_copy_on_write):
def test_putmask(using_copy_on_write, dtype, warn_copy_on_write):
def test_putmask_no_reference(using_copy_on_write, dtype):
def test_putmask_aligns_rhs_no_reference(using_copy_on_write, dtype):
def test_putmask_dont_copy_some_blocks(
def test_where_mask_noop(using_copy_on_write, dtype, func):
def test_where_mask(using_copy_on_write, dtype, func):
def test_where_mask_noop_on_single_column(using_copy_on_write, dtype, val, func):
def test_chained_where_mask(using_copy_on_write, func):
def test_asfreq_noop(using_copy_on_write):
def test_iterrows(using_copy_on_write):
def test_interpolate_creates_copy(using_copy_on_write, warn_copy_on_write):
def test_isetitem(using_copy_on_write):
def test_isetitem_series(using_copy_on_write, dtype):
def test_isetitem_frame(using_copy_on_write):
def test_get(using_copy_on_write, warn_copy_on_write, key):
def test_xs(
def test_xs_multiindex(
def test_update_frame(using_copy_on_write, warn_copy_on_write):
def test_update_series(using_copy_on_write, warn_copy_on_write):
def test_update_chained_assignment(using_copy_on_write):
def test_inplace_arithmetic_series(using_copy_on_write):
def test_inplace_arithmetic_series_with_reference(
def test_transpose(using_copy_on_write, copy, using_array_manager):
def test_transpose_different_dtypes(using_copy_on_write):
def test_transpose_ea_single_column(using_copy_on_write):
def test_transform_frame(using_copy_on_write, warn_copy_on_write):
def test_transform_series(using_copy_on_write, warn_copy_on_write):
def test_count_read_only_array():
def test_series_view(using_copy_on_write, warn_copy_on_write):
def test_insert_series(using_copy_on_write):
def test_eval(using_copy_on_write):
def test_eval_inplace(using_copy_on_write, warn_copy_on_write):
def test_apply_modify_row(using_copy_on_write, warn_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_replace.py
-----------------------------
def test_replace(using_copy_on_write, replace_kwargs):
def test_replace_regex_inplace_refs(using_copy_on_write, warn_copy_on_write):
def test_replace_regex_inplace(using_copy_on_write):
def test_replace_regex_inplace_no_op(using_copy_on_write):
def test_replace_mask_all_false_second_block(using_copy_on_write):
def test_replace_coerce_single_column(using_copy_on_write, using_array_manager):
def test_replace_to_replace_wrong_dtype(using_copy_on_write):
def test_replace_list_categorical(using_copy_on_write):
def test_replace_list_inplace_refs_categorical(using_copy_on_write):
def test_replace_inplace(using_copy_on_write, to_replace):
def test_replace_inplace_reference(using_copy_on_write, to_replace, warn_copy_on_write):
def test_replace_inplace_reference_no_op(using_copy_on_write, to_replace):
def test_replace_categorical_inplace_reference(using_copy_on_write, val, to_replace):
def test_replace_categorical_inplace(using_copy_on_write, val):
def test_replace_categorical(using_copy_on_write, val):
def test_masking_inplace(using_copy_on_write, method, warn_copy_on_write):
def test_replace_empty_list(using_copy_on_write):
def test_replace_object_list_inplace(using_copy_on_write, value):
def test_replace_list_multiple_elements_inplace(using_copy_on_write):
def test_replace_list_none(using_copy_on_write):
def test_replace_list_none_inplace_refs(using_copy_on_write, warn_copy_on_write):
def test_replace_columnwise_no_op_inplace(using_copy_on_write):
def test_replace_columnwise_no_op(using_copy_on_write):
def test_replace_chained_assignment(using_copy_on_write):
def test_replace_listlike(using_copy_on_write):
def test_replace_listlike_inplace(using_copy_on_write, warn_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_setitem.py
-----------------------------
def test_set_column_with_array():
def test_set_column_with_series(using_copy_on_write):
def test_set_column_with_index(using_copy_on_write):
def test_set_columns_with_dataframe(using_copy_on_write):
def test_setitem_series_no_copy(using_copy_on_write):
def test_setitem_series_no_copy_single_block(using_copy_on_write):
def test_setitem_series_no_copy_split_block(using_copy_on_write):
def test_setitem_series_column_midx_broadcasting(using_copy_on_write):
def test_set_column_with_inplace_operator(using_copy_on_write, warn_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\test_util.py
-----------------------------
def test_get_array_numpy():
def test_get_array_masked():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\util.py
-----------------------------
>     """
      Helper method to get array for a DataFrame column or a Series.
  
      Equivalent of df[col].values, but without going through normal getitem,
def get_array(obj, col=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\copy_view\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_can_hold_element.py
-----------------------------
def test_can_hold_element_range(any_int_numpy_dtype):
def test_can_hold_element_int_values_float_ndarray():
def test_can_hold_element_int8_int():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_construct_from_scalar.py
-----------------------------
def test_cast_1d_array_like_from_scalar_categorical():
def test_cast_1d_array_like_from_timestamp(fixed_now_ts):
def test_cast_1d_array_like_from_timedelta():
def test_cast_1d_array_like_mismatched_datetimelike():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_construct_ndarray.py
-----------------------------
def test_construct_1d_ndarray_preserving_na(
def test_construct_1d_ndarray_preserving_na_datetimelike(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_construct_object_arr.py
-----------------------------
def test_cast_1d_array(datum1, datum2):
def test_cast_1d_array_invalid_scalar(val):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_dict_compat.py
-----------------------------
def test_dict_compat():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_downcast.py
-----------------------------
def test_downcast(arr, expected, dtype):
def test_downcast_booleans():
def test_downcast_conversion_no_nan(any_real_numpy_dtype):
def test_downcast_conversion_nan(float_numpy_dtype):
def test_downcast_conversion_empty(any_real_numpy_dtype):
def test_datetime_likes_nan(klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_find_common_type.py
-----------------------------
def test_numpy_dtypes(source_dtypes, expected_common_dtype):
def test_raises_empty_input():
def test_categorical_dtype(dtypes, exp_type):
def test_datetimetz_dtype_match():
def test_datetimetz_dtype_mismatch(dtype2):
def test_period_dtype_match():
def test_period_dtype_mismatch(dtype2):
def test_interval_dtype(left, right):
def test_interval_dtype_with_categorical(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_infer_datetimelike.py
-----------------------------
def test_maybe_infer_to_datetimelike_df_construct(data, exp_size):
def test_maybe_infer_to_datetimelike_ser_construct():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_infer_dtype.py
-----------------------------
def test_infer_dtype_from_int_scalar(any_int_numpy_dtype):
def test_infer_dtype_from_float_scalar(float_numpy_dtype):
def test_infer_dtype_from_python_scalar(data, exp_dtype):
def test_infer_dtype_from_boolean(bool_val):
def test_infer_dtype_from_complex(complex_dtype):
def test_infer_dtype_from_datetime():
def test_infer_dtype_from_timedelta():
def test_infer_dtype_from_period(freq):
def test_infer_dtype_misc():
def test_infer_from_scalar_tz(tz):
def test_infer_from_interval(left, right, subtype, closed):
def test_infer_dtype_from_scalar_errors():
def test_infer_dtype_from_scalar(value, expected, using_infer_string):
def test_infer_dtype_from_array(arr, expected, using_infer_string):
def test_infer_dtype_from_scalar_zerodim_datetimelike(cls):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_maybe_box_native.py
-----------------------------
def test_maybe_box_native(obj, expected_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\test_promote.py
-----------------------------
> """
  These test the method maybe_promote from core/dtypes/cast.py
def _check_promote(dtype, fill_value, expected_dtype, exp_val_for_scalar=None):
def _assert_match(result_fill_value, expected_fill_value):
def test_maybe_promote_int_with_int(dtype, fill_value, expected_dtype):
def test_maybe_promote_int_with_float(any_int_numpy_dtype, float_numpy_dtype):
def test_maybe_promote_float_with_int(float_numpy_dtype, any_int_numpy_dtype):
def test_maybe_promote_float_with_float(dtype, fill_value, expected_dtype):
def test_maybe_promote_bool_with_any(any_numpy_dtype):
def test_maybe_promote_any_with_bool(any_numpy_dtype):
def test_maybe_promote_bytes_with_any(bytes_dtype, any_numpy_dtype):
def test_maybe_promote_any_with_bytes(any_numpy_dtype):
def test_maybe_promote_datetime64_with_any(datetime64_dtype, any_numpy_dtype):
def test_maybe_promote_any_with_datetime64(any_numpy_dtype, fill_value):
def test_maybe_promote_any_numpy_dtype_with_datetimetz(
def test_maybe_promote_timedelta64_with_any(timedelta64_dtype, any_numpy_dtype):
def test_maybe_promote_any_with_timedelta64(any_numpy_dtype, fill_value):
def test_maybe_promote_string_with_any(string_dtype, any_numpy_dtype):
def test_maybe_promote_any_with_string(any_numpy_dtype):
def test_maybe_promote_object_with_any(object_dtype, any_numpy_dtype):
def test_maybe_promote_any_with_object(any_numpy_dtype):
def test_maybe_promote_any_numpy_dtype_with_na(any_numpy_dtype, nulls_fixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\cast\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\test_common.py
-----------------------------
>     """convert list of string dtypes to EA dtype"""
      return [getattr(pd, dt + "Dtype") for dt in dtypes]
  
  
def to_ea_dtypes(dtypes):
def to_numpy_dtypes(dtypes):
class TestNumpyEADtype:
def test_dtype_equal(name1, dtype1, name2, dtype2):
def test_pyarrow_string_import_error(name, dtype):
def test_dtype_equal_strict(dtype1, dtype2):
def get_is_dtype_funcs():
def test_get_dtype_error_catch(func):
def test_is_object():
def test_is_sparse(check_scipy):
def test_is_scipy_sparse():
def test_is_datetime64_dtype():
def test_is_datetime64tz_dtype():
def test_custom_ea_kind_M_not_datetime64tz():
def test_is_timedelta64_dtype():
def test_is_period_dtype():
def test_is_interval_dtype():
def test_is_categorical_dtype():
def test_is_string_dtype(dtype, expected):
def test_is_string_dtype_arraylike_with_object_elements_not_strings(data):
def test_is_string_dtype_nullable(nullable_string_dtype):
def test_is_integer_dtype(dtype):
def test_is_not_integer_dtype(dtype):
def test_is_signed_integer_dtype(dtype):
def test_is_not_signed_integer_dtype(dtype):
def test_is_unsigned_integer_dtype(dtype):
def test_is_not_unsigned_integer_dtype(dtype):
def test_is_int64_dtype(dtype):
def test_type_comparison_with_numeric_ea_dtype(any_numeric_ea_dtype):
def test_type_comparison_with_real_numpy_dtype(any_real_numpy_dtype):
def test_type_comparison_with_signed_int_ea_dtype_and_signed_int_numpy_dtype(
def test_is_not_int64_dtype(dtype):
def test_is_datetime64_any_dtype():
def test_is_datetime64_ns_dtype():
def test_is_timedelta64_ns_dtype():
def test_is_numeric_v_string_like():
def test_needs_i8_conversion():
def test_is_numeric_dtype():
def test_is_any_real_numeric_dtype():
def test_is_float_dtype():
def test_is_bool_dtype():
def test_is_bool_dtype_numpy_error():
def test_is_extension_array_dtype(check_scipy):
def test_is_complex_dtype():
def test_get_dtype(input_param, result):
def test_get_dtype_fails(input_param, expected_error_message):
def test__is_dtype_type(input_param, result):
def test_astype_nansafe_copy_false(any_int_numpy_dtype):
def test_astype_object_preserves_datetime_na(from_type):
def test_validate_allhashable():
def test_pandas_dtype_numpy_warning():
def test_pandas_dtype_ea_not_instance():
def test_pandas_dtype_string_dtypes(string_storage):
def test_pandas_dtype_string_dtype_alias_with_storage():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\test_concat.py
-----------------------------
def test_concat_mismatched_categoricals_with_empty():
def test_concat_single_dataframe_tz_aware(copy):
def test_concat_periodarray_2d():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\test_dtypes.py
-----------------------------
>         """
          Class level fixture of dtype for TestCategoricalDtype
class Base:
class TestCategoricalDtype(Base):
class TestDatetimeTZDtype(Base):
class TestPeriodDtype(Base):
class TestIntervalDtype(Base):
class TestCategoricalDtypeParametrized:
def test_registry(dtype):
def test_registry_find(dtype, expected):
def test_is_bool_dtype(dtype, expected):
def test_is_bool_dtype_sparse():
def test_is_dtype_no_warning(check):
def test_period_dtype_compare_to_string():
def test_compare_complex_dtypes():
def test_cast_string_to_complex():
def test_categorical_complex():
def test_multi_column_dtype_assignment():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\test_generic.py
-----------------------------
class TestABCClasses:
def test_setattr_warnings():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\test_inference.py
-----------------------------
> """
  These the test the public routines exposed in types/common.py
  related to inference and not otherwise tested in types/test_common.py
  
def coerce(request):
class MockNumpyLikeArray:
def maybe_list_like(request):
def test_is_list_like(maybe_list_like):
def test_is_list_like_disallow_sets(maybe_list_like):
def test_is_list_like_recursion():
def test_is_list_like_iter_is_none():
def test_is_list_like_generic():
def test_is_sequence():
def test_is_array_like():
def test_is_nested_list_like_passes(inner, outer):
def test_is_nested_list_like_fails(obj):
def test_is_dict_like_passes(ll):
def test_is_dict_like_fails(ll):
def test_is_dict_like_duck_type(has_keys, has_getitem, has_contains):
def test_is_file_like():
def test_is_names_tuple_passes(ll):
def test_is_names_tuple_fails(ll):
def test_is_hashable():
def test_is_re_passes(ll):
def test_is_re_fails(ll):
def test_is_recompilable_passes(ll):
def test_is_recompilable_fails(ll):
class TestInference:
class TestTypeInference:
class TestNumberScalar:
class TestIsScalar:
def test_datetimeindex_from_empty_datetime64_array(unit):
def test_nan_to_nat_conversions():
def test_is_scipy_sparse(spmatrix):
def test_ensure_int32():
def test_find_result_type_uint_int(right, result):
def test_find_result_type_int_int(right, result):
def test_find_result_type_floats(right, result):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\test_missing.py
-----------------------------
def test_notna_notnull(notna_f):
def test_null_check_is_series(null_func, ser):
class TestIsNA:
def test_array_equivalent(dtype_equal):
def test_array_equivalent_tdi(dtype_equal):
def test_array_equivalent_dti(dtype_equal):
def test_array_equivalent_series(val):
def test_array_equivalent_array_mismatched_shape():
def test_array_equivalent_array_mismatched_dtype():
def test_array_equivalent_different_dtype_but_equal():
def test_array_equivalent_tzawareness(lvalue, rvalue):
def test_array_equivalent_compat():
def test_array_equivalent_str(dtype):
def test_array_equivalent_nested(strict_nan):
def test_array_equivalent_nested2(strict_nan):
def test_array_equivalent_nested_list(strict_nan):
def test_array_equivalent_nested_mixed_list(strict_nan):
def test_array_equivalent_nested_dicts(strict_nan):
def test_array_equivalent_index_with_tuples():
def test_na_value_for_dtype(dtype, na_value):
class TestNAObj:
class TestLibMissing:
class TestIsValidNAForDtype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\dtypes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\array_with_attr\array.py
-----------------------------
> """
  Test extension array that has custom attribute information (not stored on the dtype).
  
class FloatAttrDtype(ExtensionDtype):
class FloatAttrArray(ExtensionArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\array_with_attr\test_array_with_attr.py
-----------------------------
def test_concat_with_all_na():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\array_with_attr\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\accumulate.py
-----------------------------
>     """
      Accumulation specific tests. Generally these only
      make sense for numeric/boolean operations.
class BaseAccumulateTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\base.py
-----------------------------
class BaseExtensionTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\casting.py
-----------------------------
>     """Casting to and from ExtensionDtypes"""
  
      def test_astype_object_series(self, all_data):
          ser = pd.Series(all_data, name="A")
class BaseCastingTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\constructors.py
-----------------------------
class BaseConstructorsTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\dim2.py
-----------------------------
> """
  Tests for 2D compatibility.
class Dim2CompatTests:
class NDArrayBacked2DTests(Dim2CompatTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\dtype.py
-----------------------------
>     """Base class for ExtensionDtype classes"""
  
      def test_name(self, dtype):
          assert isinstance(dtype.name, str)
class BaseDtypeTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\getitem.py
-----------------------------
>     """Tests for ExtensionArray.__getitem__."""
  
      def test_iloc_series(self, data):
          ser = pd.Series(data)
class BaseGetitemTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\groupby.py
-----------------------------
>     """Groupby-specific tests."""
  
      def test_grouping_grouper(self, data_for_grouping):
          df = pd.DataFrame(
class BaseGroupbyTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\index.py
-----------------------------
> """
  Tests for Indexes backed by arbitrary ExtensionArrays.
class BaseIndexTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\interface.py
-----------------------------
>     """Tests that the basic interface is satisfied."""
  
      # ------------------------------------------------------------------------
      # Interface
class BaseInterfaceTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\io.py
-----------------------------
class BaseParsingTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\methods.py
-----------------------------
>     """Various Series and DataFrame methods."""
  
      def test_hash_pandas_object(self, data):
          # _hash_pandas_object should return a uint64 ndarray of the same length
class BaseMethodsTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\missing.py
-----------------------------
class BaseMissingTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\ops.py
-----------------------------
>     """
      Various Series and DataFrame arithmetic ops methods.
  
      Subclasses supporting various ops should set the class variables
class BaseOpsUtil:
class BaseArithmeticOpsTests(BaseOpsUtil):
class BaseComparisonOpsTests(BaseOpsUtil):
class BaseUnaryOpsTests(BaseOpsUtil):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\printing.py
-----------------------------
>     """Tests checking the formatting of your EA when printed."""
  
      @pytest.mark.parametrize("size", ["big", "small"])
      def test_array_repr(self, data, size):
class BasePrintingTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\reduce.py
-----------------------------
>     """
      Reduction specific tests. Generally these only
      make sense for numeric/boolean operations.
class BaseReduceTests:
class BaseNoReduceTests(BaseReduceTests):
class BaseNumericReduceTests(BaseReduceTests):
class BaseBooleanReduceTests(BaseReduceTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\reshaping.py
-----------------------------
>     """Tests for reshaping and concatenation."""
  
      @pytest.mark.parametrize("in_frame", [True, False])
      def test_concat(self, data, in_frame):
class BaseReshapingTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\setitem.py
-----------------------------
>         """
          Fixture for an indexer to pass to obj.loc to get/set the full length of the
          object.
  
class BaseSetitemTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\base\__init__.py
-----------------------------
> """
  Base test suite for extension arrays.
  
  These tests are intended for third-party libraries to subclass to validate
class ExtensionTests(
def __getattr__(name: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\date\array.py
-----------------------------
class DateDtype(ExtensionDtype):
class DateArray(ExtensionArray):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\date\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\decimal\array.py
-----------------------------
>         """
          Return the array type associated with this dtype.
  
          Returns
class DecimalDtype(ExtensionDtype):
class DecimalArray(OpsMixin, ExtensionScalarOpsMixin, ExtensionArray):
def to_decimal(values, context=None):
def make_data():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\decimal\test_decimal.py
-----------------------------
>     """Helper class for testing error handling in _from_sequence."""
  
      @classmethod
      def _from_sequence(cls, scalars, *, dtype=None, copy=False):
def dtype():
def data():
def data_for_twos():
def data_missing():
def data_for_sorting():
def data_missing_for_sorting():
def na_cmp():
def data_for_grouping():
class TestDecimalArray(base.ExtensionTests):
def test_take_na_value_other_decimal():
def test_series_constructor_coerce_data_to_extension_dtype():
def test_series_constructor_with_dtype():
def test_dataframe_constructor_with_dtype():
def test_astype_dispatches(frame):
class DecimalArrayWithoutFromSequence(DecimalArray):
class DecimalArrayWithoutCoercion(DecimalArrayWithoutFromSequence):
def test_combine_from_sequence_raises(monkeypatch):
def test_scalar_ops_from_sequence_raises(class_):
def test_divmod_array(reverse, expected_div, expected_mod):
def test_ufunc_fallback(data):
def test_array_ufunc():
def test_array_ufunc_series():
def test_array_ufunc_series_scalar_other():
def test_array_ufunc_series_defer():
def test_groupby_agg():
def test_groupby_agg_ea_method(monkeypatch):
def test_indexing_no_materialize(monkeypatch):
def test_to_numpy_keyword():
def test_array_copy_on_write(using_copy_on_write):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\decimal\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\json\array.py
-----------------------------
> """
  Test extension array for storing nested data in a pandas container.
  
  The JSONArray stores lists of dictionaries. The storage mechanism is a list,
class JSONDtype(ExtensionDtype):
class JSONArray(ExtensionArray):
def make_data():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\json\test_json.py
-----------------------------
>     """Length-100 PeriodArray for semantics test."""
      data = make_data()
  
      # Why the while loop? NumPy is unable to construct an ndarray from
def dtype():
def data():
def data_missing():
def data_for_sorting():
def data_missing_for_sorting():
def na_cmp():
def data_for_grouping():
class TestJSONArray(base.ExtensionTests):
def custom_assert_series_equal(left, right, *args, **kwargs):
def custom_assert_frame_equal(left, right, *args, **kwargs):
def test_custom_asserts():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\json\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\list\array.py
-----------------------------
> """
  Test extension array for storing nested data in a pandas container.
  
  The ListArray stores an ndarray of lists.
class ListDtype(ExtensionDtype):
class ListArray(ExtensionArray):
def make_data():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\list\test_list.py
-----------------------------
>     """Length-100 ListArray for semantics test."""
      data = make_data()
  
      while len(data[0]) == len(data[1]):
def dtype():
def data():
def test_to_csv(data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\list\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\conftest.py
-----------------------------
>     """A fixture providing the ExtensionDtype to validate."""
      raise NotImplementedError
  
  
def dtype():
def data():
def data_for_twos(dtype):
def data_missing():
def all_data(request, data, data_missing):
def data_repeated(data):
def data_for_sorting():
def data_missing_for_sorting():
def na_cmp():
def na_value(dtype):
def data_for_grouping():
def box_in_series(request):
def groupby_apply_op(request):
def as_frame(request):
def as_series(request):
def use_numpy(request):
def fillna_method(request):
def as_array(request):
def invalid_scalar(data):
def using_copy_on_write() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_arrow.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def _require_timezone_database(request):
def dtype(request):
def data(dtype):
def data_missing(data):
def all_data(request, data, data_missing):
def data_for_grouping(dtype):
def data_for_sorting(data_for_grouping):
def data_missing_for_sorting(data_for_grouping):
def data_for_twos(data):
class TestArrowArray(base.ExtensionTests):
class TestLogicalOps:
def test_bitwise(pa_type):
def test_arrowdtype_construct_from_string_type_with_unsupported_parameters():
def test_arrowdtype_construct_from_string_supports_dt64tz():
def test_arrowdtype_construct_from_string_type_only_one_pyarrow():
def test_arrow_string_multiplication():
def test_arrow_string_multiplication_scalar_repeat():
def test_quantile(data, interpolation, quantile, request):
def test_mode_dropna_true(data_for_grouping, take_idx, exp_idx):
def test_mode_dropna_false_mode_na(data):
def test_arrow_dtype_type(arrow_dtype, expected_type):
def test_is_bool_dtype():
def test_is_numeric_dtype(data):
def test_is_integer_dtype(data):
def test_is_signed_integer_dtype(data):
def test_is_unsigned_integer_dtype(data):
def test_is_float_dtype(data):
def test_pickle_roundtrip(data):
def test_astype_from_non_pyarrow(data):
def test_astype_float_from_non_pyarrow_str():
def test_astype_errors_ignore():
def test_to_numpy_with_defaults(data):
def test_to_numpy_int_with_na():
def test_to_numpy_null_array(na_val, exp):
def test_to_numpy_null_array_no_dtype():
def test_to_numpy_without_dtype():
def test_setitem_null_slice(data):
def test_setitem_invalid_dtype(data):
def test_from_arrow_respecting_given_dtype():
def test_from_arrow_respecting_given_dtype_unsafe():
def test_round():
def test_searchsorted_with_na_raises(data_for_sorting, as_series):
def test_sort_values_dictionary():
def test_str_count(pat):
def test_str_count_flags_unsupported():
def test_str_pad(side, str_func):
def test_str_pad_invalid_side():
def test_str_contains(pat, case, na, regex, exp):
def test_str_contains_flags_unsupported():
def test_str_start_ends_with(side, pat, na, exp):
def test_str_starts_ends_with_all_nulls_empty_tuple(side):
def test_str_replace_unsupported(arg_name, arg):
def test_str_replace(pat, repl, n, regex, exp):
def test_str_replace_negative_n():
def test_str_repeat_unsupported():
def test_str_repeat():
def test_str_match(pat, case, na, exp):
def test_str_fullmatch(pat, case, na, exp):
def test_str_find(sub, start, end, exp, exp_typ):
def test_str_find_negative_start():
def test_str_find_no_end():
def test_str_find_negative_start_negative_end():
def test_str_find_large_start():
def test_str_find_e2e(start, end, sub):
def test_str_find_negative_start_negative_end_no_match():
def test_str_get(i, exp):
def test_str_join():
def test_str_join_string_type():
def test_str_slice(start, stop, step, exp):
def test_str_slice_replace(start, stop, repl, exp):
def test_str_is_functions(value, method, exp):
def test_str_transform_functions(method, exp):
def test_str_len():
def test_str_strip(method, to_strip, val):
def test_str_removesuffix(val):
def test_str_removeprefix(val):
def test_str_encode(errors, encoding, exp):
def test_str_findall(flags):
def test_str_r_index(method, start, end):
def test_str_normalize(form):
def test_str_rfind(start, end):
def test_str_translate():
def test_str_wrap():
def test_get_dummies():
def test_str_partition():
def test_str_split_pat_none(method):
def test_str_split():
def test_str_rsplit():
def test_str_extract_non_symbolic():
def test_str_extract(expand):
def test_str_extract_expand():
def test_duration_from_strings_with_nat(unit):
def test_unsupported_dt(data):
def test_dt_properties(prop, expected):
def test_dt_is_month_start_end():
def test_dt_is_year_start_end():
def test_dt_is_quarter_start_end():
def test_dt_days_in_month(method):
def test_dt_normalize():
def test_dt_time_preserve_unit(unit):
def test_dt_tz(tz):
def test_dt_isocalendar():
def test_dt_day_month_name(method, exp, request):
def test_dt_strftime(request):
def test_dt_roundlike_tz_options_not_supported(method):
def test_dt_roundlike_unsupported_freq(method):
def test_dt_ceil_year_floor(freq, method):
def test_dt_to_pydatetime():
def test_dt_to_pydatetime_date_error(date_type):
def test_dt_tz_localize_unsupported_tz_options():
def test_dt_tz_localize_none():
def test_dt_tz_localize(unit, request):
def test_dt_tz_localize_nonexistent(nonexistent, exp_date, request):
def test_dt_tz_convert_not_tz_raises():
def test_dt_tz_convert_none():
def test_dt_tz_convert(unit):
def test_as_unit(dtype):
def test_dt_timedelta_properties(prop, expected):
def test_dt_timedelta_total_seconds():
def test_dt_to_pytimedelta():
def test_dt_components():
def test_boolean_reduce_series_all_null(all_boolean_reductions, skipna):
def test_from_sequence_of_strings_boolean():
def test_concat_empty_arrow_backed_series(dtype):
def test_series_from_string_array(dtype):
class OldArrowExtensionArray(ArrowExtensionArray):
def test_pickle_old_arrowextensionarray():
def test_setitem_boolean_replace_with_mask_segfault():
def test_conversion_large_dtypes_from_numpy_array(data, arrow_dtype):
def test_concat_null_array():
def test_describe_numeric_data(pa_type):
def test_describe_timedelta_data(pa_type):
def test_describe_datetime_data(pa_type):
def test_quantile_temporal(pa_type):
def test_date32_repr():
def test_duration_overflow_from_ndarray_containing_nat():
def test_infer_dtype_pyarrow_dtype(data, request):
def test_from_sequence_temporal(pa_type):
def test_setitem_temporal(pa_type):
def test_arithmetic_temporal(pa_type, request):
def test_comparison_temporal(pa_type):
def test_getitem_temporal(pa_type):
def test_iter_temporal(pa_type):
def test_groupby_series_size_returns_pa_int(data):
def test_to_numpy_temporal(pa_type, dtype):
def test_groupby_count_return_arrow_dtype(data_missing):
def test_fixed_size_list():
def test_arrowextensiondtype_dataframe_repr():
def test_pow_missing_operand():
def test_duration_fillna_numpy(pa_type):
def test_comparison_not_propagating_arrow_error():
def test_factorize_chunked_dictionary():
def test_dictionary_astype_categorical():
def test_arrow_floordiv():
def test_arrow_floordiv_large_values():
def test_arrow_floordiv_large_integral_result(dtype):
def test_arrow_floordiv_larger_divisor(pa_type):
def test_arrow_floordiv_integral_invalid(pa_type):
def test_arrow_floordiv_floating_0_divisor(dtype):
def test_astype_int_with_null_to_numpy_dtype(dtype):
def test_arrow_integral_floordiv_large_values(pa_type):
def test_arrow_true_division_large_divisor(dtype):
def test_arrow_floor_division_large_divisor(dtype):
def test_string_to_datetime_parsing_cast():
def test_interpolate_not_numeric(data):
def test_string_to_time_parsing_cast():
def test_to_numpy_float():
def test_to_numpy_timestamp_to_int():
def test_map_numeric_na_action():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_categorical.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def make_data():
def dtype():
def data():
def data_missing():
def data_for_sorting():
def data_missing_for_sorting():
def data_for_grouping():
class TestCategorical(base.ExtensionTests):
class Test2DCompat(base.NDArrayBacked2DTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_common.py
-----------------------------
>     """Extend StringArray to capture arguments to __getitem__"""
  
      def __getitem__(self, item):
          self.last_item_arg = item
class DummyDtype(dtypes.ExtensionDtype):
class DummyArray(ExtensionArray):
class TestExtensionArrayDtype:
def test_astype():
def test_astype_no_copy():
def test_is_extension_array_dtype(dtype):
class CapturingStringArray(pd.arrays.StringArray):
def test_ellipsis_index():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_datetime.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def dtype(request):
def data(dtype):
def data_missing(dtype):
def data_for_sorting(dtype):
def data_missing_for_sorting(dtype):
def data_for_grouping(dtype):
def na_cmp():
class TestDatetimeArray(base.ExtensionTests):
class Test2DCompat(base.NDArrayBacked2DTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_extension.py
-----------------------------
> """
  Tests for behavior if an author does *not* implement EA methods.
class MyEA(ExtensionArray):
def data():
class TestExtensionArray:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_interval.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def make_data():
def dtype():
def data():
def data_missing():
def data_for_twos():
def data_for_sorting():
def data_missing_for_sorting():
def data_for_grouping():
class TestIntervalArray(base.ExtensionTests):
def test_fillna_non_scalar_raises(data_missing):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_masked.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def make_data():
def make_float_data():
def make_bool_data():
def dtype(request):
def data(dtype):
def data_for_twos(dtype):
def data_missing(dtype):
def data_for_sorting(dtype):
def data_missing_for_sorting(dtype):
def na_cmp():
def data_for_grouping(dtype):
class TestMaskedArrays(base.ExtensionTests):
class Test2DCompat(base.Dim2CompatTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_numpy.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def _assert_attr_equal(attr: str, left, right, obj: str = "Attributes"):
def dtype(request):
def allow_in_pandas(monkeypatch):
def data(allow_in_pandas, dtype):
def data_missing(allow_in_pandas, dtype):
def na_cmp():
def data_for_sorting(allow_in_pandas, dtype):
def data_missing_for_sorting(allow_in_pandas, dtype):
def data_for_grouping(allow_in_pandas, dtype):
def data_for_twos(dtype):
def skip_numpy_object(dtype, request):
class TestNumpyExtensionArray(base.ExtensionTests):
class Test2DCompat(base.NDArrayBacked2DTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_period.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def dtype(request):
def data(dtype):
def data_for_sorting(dtype):
def data_missing(dtype):
def data_missing_for_sorting(dtype):
def data_for_grouping(dtype):
class TestPeriodArray(base.ExtensionTests):
class Test2DCompat(base.NDArrayBacked2DTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_sparse.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def make_data(fill_value):
def dtype():
def data(request):
def data_for_twos():
def data_missing(request):
def data_repeated(request):
def data_for_sorting(request):
def data_missing_for_sorting(request):
def na_cmp():
def data_for_grouping(request):
def data_for_compare(request):
class TestSparseArray(base.ExtensionTests):
def test_array_type_with_arg(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\test_string.py
-----------------------------
> """
  This file contains a minimal set of tests for compliance with the extension
  array interface test suite, and should contain no other tests.
  The test suite for the full functionality of the array is located in
def maybe_split_array(arr, chunked):
def chunked(request):
def dtype(string_dtype_arguments):
def data(dtype, chunked):
def data_missing(dtype, chunked):
def data_for_sorting(dtype, chunked):
def data_missing_for_sorting(dtype, chunked):
def data_for_grouping(dtype, chunked):
class TestStringArray(base.ExtensionTests):
class Test2DCompat(base.Dim2CompatTests):
def test_searchsorted_with_na_raises(data_for_sorting, as_series):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\extension\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\constructors\test_from_dict.py
-----------------------------
class TestFromDict:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\constructors\test_from_records.py
-----------------------------
class TestFromRecords:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\constructors\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_coercion.py
-----------------------------
> """
  Tests for values coercion in setitem-like operations on DataFrame.
  
  For the most part, these should be multi-column DataFrames, otherwise
class TestDataFrameSetitemCoercion:
def test_37477():
def test_6942(indexer_al):
def test_26395(indexer_al):
def test_15231():
def test_iloc_setitem_unnecesssary_float_upcasting():
def test_12499():
def test_20476():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_delitem.py
-----------------------------
class TestDataFrameDelItem:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_get.py
-----------------------------
class TestGet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_getitem.py
-----------------------------
class TestGetitem:
class TestGetitemListLike:
class TestGetitemCallable:
class TestGetitemBooleanMask:
class TestGetitemSlice:
class TestGetitemDeprecatedIndexers:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_get_value.py
-----------------------------
class TestGetValue:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_indexing.py
-----------------------------
class TestDataFrameIndexing:
class TestDataFrameIndexingUInt64:
def test_object_casting_indexing_wraps_datetimelike(using_array_manager):
class TestLocILocDataFrameCategorical:
class TestDeprecatedIndexers:
def test_adding_new_conditional_column() -> None:
def test_adding_new_conditional_column_with_string(dtype, infer_string) -> None:
def test_add_new_column_infer_string():
class TestSetitemValidation:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_insert.py
-----------------------------
> """
  test_insert is specifically for the DataFrame.insert method; not to be
  confused with tests with "insert" in their names that are really testing
  __setitem__.
class TestDataFrameInsert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_mask.py
-----------------------------
> """
  Tests for DataFrame.mask; tests DataFrame.where as a side-effect.
class TestDataFrameMask:
def test_mask_stringdtype(frame_or_series):
def test_mask_where_dtype_timedelta():
def test_mask_return_dtype():
def test_mask_inplace_no_other():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_setitem.py
-----------------------------
class TestDataFrameSetItem:
class TestSetitemTZAwareValues:
class TestDataFrameSetItemWithExpansion:
class TestDataFrameSetItemSlicing:
class TestDataFrameSetItemCallable:
class TestDataFrameSetItemBooleanMask:
class TestDataFrameSetitemCopyViewSemantics:
def test_full_setter_loc_incompatible_dtype():
def test_setitem_partial_row_multiple_columns():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_set_value.py
-----------------------------
class TestSetValue:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_take.py
-----------------------------
class TestDataFrameTake:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_where.py
-----------------------------
def where_frame(request, float_string_frame, mixed_float_frame, mixed_int_frame):
def _safe_add(df):
class TestDataFrameIndexingWhere:
def test_where_int_downcasting_deprecated():
def test_where_copies_with_noop(frame_or_series):
def test_where_string_dtype(frame_or_series):
def test_where_bool_comparison():
def test_where_none_nan_coerce():
def test_where_duplicate_axes_mixed_dtypes():
def test_where_columns_casting():
def test_where_period_invalid_na(frame_or_series, as_cat, request):
def test_where_nullable_invalid_na(frame_or_series, any_numeric_ea_dtype):
def test_where_inplace_casting(data):
def test_where_downcast_to_td64():
def _check_where_equivalences(df, mask, other, expected):
def test_where_dt64_2d():
def test_where_producing_ea_cond_for_np_dtype():
def test_where_int_overflow(replacement):
def test_where_inplace_no_other():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\test_xs.py
-----------------------------
def four_level_index_dataframe():
class TestXS:
class TestXSWithMultiIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\indexing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_add_prefix_suffix.py
-----------------------------
def test_add_prefix_suffix(float_frame):
def test_add_prefix_suffix_axis(float_frame):
def test_add_prefix_suffix_invalid_axis(float_frame):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_align.py
-----------------------------
class TestDataFrameAlign:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_asfreq.py
-----------------------------
class TestAsFreq:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_asof.py
-----------------------------
>     """
      Fixture for DataFrame of ints with date_range index
  
      Columns are ['A', 'B'].
def date_range_frame():
class TestFrameAsof:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_assign.py
-----------------------------
class TestAssign:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_astype.py
-----------------------------
>     """
      Check if all dtypes of df are equal to v
def _check_cast(df, v):
class TestAstype:
class TestAstypeCategorical:
class IntegerArrayNoCopy(pd.core.arrays.IntegerArray):
class Int16DtypeNoCopy(pd.Int16Dtype):
def test_frame_astype_no_copy():
def test_astype_copies(dtype):
def test_astype_to_string_not_modifying_input(string_storage, val):
def test_astype_to_string_dtype_not_modifying_input(any_string_dtype, val):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_at_time.py
-----------------------------
class TestAtTime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_between_time.py
-----------------------------
class TestBetweenTime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_clip.py
-----------------------------
>         """Should process np.nan argument as None"""
          # GH#17276
          tm.assert_frame_equal(float_frame.clip(np.nan), float_frame)
          tm.assert_frame_equal(float_frame.clip(upper=np.nan, lower=np.nan), float_frame)
class TestDataFrameClip:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_combine.py
-----------------------------
class TestCombine:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_combine_first.py
-----------------------------
class TestDataFrameCombineFirst:
def test_combine_first_timestamp_bug(scalar1, scalar2, nulls_fixture):
def test_combine_first_timestamp_bug_NaT():
def test_combine_first_with_nan_multiindex():
def test_combine_preserve_dtypes():
def test_combine_first_duplicates_rows_for_nan_index_values():
def test_combine_first_int64_not_cast_to_float64():
def test_midx_losing_dtype():
def test_combine_first_empty_columns():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_compare.py
-----------------------------
def test_compare_axis(align_axis):
def test_compare_various_formats(keep_shape, keep_equal):
def test_compare_with_equal_nulls():
def test_compare_with_non_equal_nulls():
def test_compare_multi_index(align_axis):
def test_compare_unaligned_objects():
def test_compare_result_names():
def test_invalid_input_result_names(result_names):
def test_compare_ea_and_np_dtype(val1, val2):
def test_compare_nullable_int64_dtype(df1_val, df2_val, diff_self, diff_other):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_convert_dtypes.py
-----------------------------
class TestConvertDtypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_copy.py
-----------------------------
class TestCopy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_count.py
-----------------------------
class TestDataFrameCount:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_cov_corr.py
-----------------------------
class TestDataFrameCov:
class TestDataFrameCorr:
class TestDataFrameCorrWith:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_describe.py
-----------------------------
>         """
          When include is 'all', then setting exclude != None is not allowed.
class TestDataFrameDescribe:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_diff.py
-----------------------------
class TestDataFrameDiff:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_dot.py
-----------------------------
>         """
          other is a DataFrame that is indexed so that obj.dot(other) is valid
class DotSharedTests:
class TestSeriesDot(DotSharedTests):
class TestDataFrameDot(DotSharedTests):
def test_arrow_dtype(dtype, exp_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_drop.py
-----------------------------
def test_drop_raise_exception_if_labels_not_in_level(msg, labels, level):
def test_drop_errors_ignore(labels, level):
def test_drop_with_non_unique_datetime_index_and_invalid_keys():
class TestDataFrameDrop:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_droplevel.py
-----------------------------
class TestDropLevel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_dropna.py
-----------------------------
class TestDataFrameMissingData:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_drop_duplicates.py
-----------------------------
def test_drop_duplicates_with_misspelled_column_name(subset):
def test_drop_duplicates():
def test_drop_duplicates_with_duplicate_column_names():
def test_drop_duplicates_for_take_all():
def test_drop_duplicates_tuple():
def test_drop_duplicates_empty(df):
def test_drop_duplicates_NA():
def test_drop_duplicates_NA_for_take_all():
def test_drop_duplicates_inplace():
def test_drop_duplicates_ignore_index(
def test_drop_duplicates_null_in_object_column(nulls_fixture):
def test_drop_duplicates_series_vs_dataframe(keep):
def test_drop_duplicates_non_boolean_ignore_index(arg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_dtypes.py
-----------------------------
class TestDataFrameDataTypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_duplicated.py
-----------------------------
def test_duplicated_with_misspelled_column_name(subset):
def test_duplicated_implemented_no_recursion():
def test_duplicated_keep(keep, expected):
def test_duplicated_nan_none(keep, expected):
def test_duplicated_subset(subset, keep):
def test_duplicated_on_empty_frame():
def test_frame_datetime64_duplicated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_equals.py
-----------------------------
class TestEquals:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_explode.py
-----------------------------
def test_error():
def test_error_multi_columns(input_subset, error_message):
def test_basic(scalar):
def test_multi_index_rows():
def test_multi_index_columns():
def test_usecase():
def test_duplicate_index(input_dict, input_index, expected_dict, expected_index):
def test_ignore_index():
def test_explode_sets():
def test_multi_columns(input_subset, expected_dict, expected_index):
def test_multi_columns_nan_empty():
def test_str_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_fillna.py
-----------------------------
class TestFillNA:
def test_fillna_nonconsolidated_frame():
def test_fillna_nones_inplace():
def test_pad_backfill_deprecated(func):
def test_ffill_bfill_limit_area(data, expected_data, method, kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_filter.py
-----------------------------
class TestDataFrameFilter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_first_and_last.py
-----------------------------
> """
  Note: includes tests for `last`
class TestFirst:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_first_valid_index.py
-----------------------------
> """
  Includes test for last_valid_index.
class TestFirstValidIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_get_numeric_data.py
-----------------------------
class TestGetNumericData:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_head_tail.py
-----------------------------
def test_head_tail_generic(index, frame_or_series):
def test_head_tail(float_frame):
def test_head_tail_empty():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_infer_objects.py
-----------------------------
class TestInferObjects:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_info.py
-----------------------------
>     """Dataframe with duplicate column names."""
      return DataFrame(
          np.random.default_rng(2).standard_normal((1500, 4)),
          columns=["a", "a", "b", "b"],
def duplicate_columns_frame():
def test_info_empty():
def test_info_categorical_column_smoke_test():
def test_info_smoke_test(fixture_func_name, request):
def test_info_smoke_test2(float_frame):
def test_info_default_verbose_selection(num_columns, max_info_columns, verbose):
def test_info_verbose_check_header_separator_body():
def test_info_verbose_with_counts_spacing(
def test_info_memory():
def test_info_wide():
def test_info_duplicate_columns_shows_correct_dtypes():
def test_info_shows_column_dtypes():
def test_info_max_cols():
def test_info_memory_usage():
def test_info_memory_usage_deep_not_pypy():
def test_info_memory_usage_deep_pypy():
def test_usage_via_getsizeof():
def test_info_memory_usage_qualified(using_infer_string):
def test_info_memory_usage_bug_on_multiindex():
def test_info_categorical():
def test_info_int_columns(using_infer_string):
def test_memory_usage_empty_no_warning(using_infer_string):
def test_info_compute_numba():
def test_info_show_counts(row, columns, show_counts, result):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_interpolate.py
-----------------------------
class TestDataFrameInterpolate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_isetitem.py
-----------------------------
class TestDataFrameSetItem:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_isin.py
-----------------------------
class TestDataFrameIsIn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_is_homogeneous_dtype.py
-----------------------------
def test_is_homogeneous_type(data, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_iterrows.py
-----------------------------
def test_no_overflow_of_freq_and_time_in_dataframe():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_join.py
-----------------------------
def frame_with_period_index():
def left():
def right():
def left_no_dup():
def right_no_dup():
def left_w_dups(left_no_dup):
def right_w_dups(right_no_dup):
def test_join(left, right, how, sort, expected):
def test_suffix_on_list_join():
def test_join_invalid_validate(left_no_dup, right_no_dup):
def test_join_on_single_col_dup_on_right(left_no_dup, right_w_dups, dtype):
def test_join_on_single_col_dup_on_left(left_w_dups, right_no_dup):
def test_join_on_single_col_dup_on_both(left_w_dups, right_w_dups):
def test_join_on_multi_col_check_dup():
def test_join_index(float_frame):
def test_join_index_more(float_frame):
def test_join_index_series(float_frame):
def test_join_overlap(float_frame):
def test_join_period_index(frame_with_period_index):
def test_join_left_sequence_non_unique_index():
def test_join_list_series(float_frame):
def test_suppress_future_warning_with_sort_kw(sort_kw):
class TestDataFrameJoin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_map.py
-----------------------------
def test_map(float_frame):
def test_map_float_object_conversion(val):
def test_map_keeps_dtype(na_action):
def test_map_str():
def test_map_datetimelike(col, val):
def test_map_empty(expected, func):
def test_map_kwargs():
def test_map_na_ignore(float_frame):
def test_map_box_timestamps():
def test_map_box():
def test_frame_map_dont_convert_datetime64():
def test_map_function_runs_once():
def test_map_type():
def test_map_invalid_na_action(float_frame):
def test_applymap_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_matmul.py
-----------------------------
class TestMatMul:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_nlargest.py
-----------------------------
> """
  Note: for naming purposes, most tests are title with as e.g. "test_nlargest_foo"
  but are implicitly also testing nsmallest_foo.
def df_duplicates():
def df_strings():
def df_main_dtypes():
class TestNLargestNSmallest:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_pct_change.py
-----------------------------
class TestDataFramePctChange:
def test_pct_change_with_duplicated_indices(fill_method):
def test_pct_change_none_beginning_no_warning():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_pipe.py
-----------------------------
class TestPipe:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_pop.py
-----------------------------
class TestDataFramePop:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_quantile.py
-----------------------------
>     """(interpolation, method) arguments for quantile"""
      return request.param
  
  
def interp_method(request):
class TestDataFrameQuantile:
class TestQuantileExtensionDtype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_rank.py
-----------------------------
>         """
          Fixture for trying all rank methods
class TestRank:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_reindex.py
-----------------------------
class TestReindexSetIndex:
class TestDataFrameSelectReindex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_reindex_like.py
-----------------------------
class TestDataFrameReindexLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_rename.py
-----------------------------
class TestRename:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_rename_axis.py
-----------------------------
class TestDataFrameRenameAxis:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_reorder_levels.py
-----------------------------
class TestReorderLevels:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_replace.py
-----------------------------
>         """
          Test for #23305: to ensure category dtypes are maintained
          after replace with direct values
def mix_ab() -> dict[str, list[int | str]]:
def mix_abc() -> dict[str, list[float | str]]:
class TestDataFrameReplace:
class TestDataFrameReplaceRegex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_reset_index.py
-----------------------------
def multiindex_df():
class TestResetIndex:
def test_reset_index_dtypes_on_empty_frame_with_multiindex(
def test_reset_index_empty_frame_with_datetime64_multiindex():
def test_reset_index_empty_frame_with_datetime64_multiindex_from_groupby(
def test_reset_index_multiindex_nat():
def test_reset_index_interval_columns_object_cast():
def test_reset_index_rename(float_frame):
def test_reset_index_rename_multiindex(float_frame):
def test_errorreset_index_rename(float_frame):
def test_reset_index_false_index_name():
def test_reset_index_with_empty_frame(columns):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_round.py
-----------------------------
class TestDataFrameRound:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_sample.py
-----------------------------
class TestSample:
class TestSampleDataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_select_dtypes.py
-----------------------------
class DummyDtype(ExtensionDtype):
class DummyArray(ExtensionArray):
class TestSelectDtypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_set_axis.py
-----------------------------
class SharedSetAxisTests:
class TestDataFrameSetAxis(SharedSetAxisTests):
class TestSeriesSetAxis(SharedSetAxisTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_set_index.py
-----------------------------
> """
  See also: test_reindex.py:TestReindexSetIndex
def frame_of_index_cols():
class TestSetIndex:
class TestSetIndexInvalid:
class TestSetIndexCustomLabelType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_shift.py
-----------------------------
class TestDataFrameShift:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_size.py
-----------------------------
def test_size(data, index, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_sort_index.py
-----------------------------
class TestDataFrameSortIndex:
class TestDataFrameSortIndexKey:
def test_sort_index_with_sliced_multiindex():
def test_axis_columns_ignore_index():
def test_sort_index_stable_sort():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_sort_values.py
-----------------------------
class TestDataFrameSortValues:
class TestDataFrameSortKey:  # test key sorting (issue 27237)
def df_none():
def df_idx(request, df_none):
def sort_names(request):
def ascending(request):
class TestSortValuesLevelAsStr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_swapaxes.py
-----------------------------
class TestSwapAxes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_swaplevel.py
-----------------------------
class TestSwaplevel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_csv.py
-----------------------------
class TestDataFrameToCSV:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_dict.py
-----------------------------
class TestDataFrameToDict:
def test_to_dict_list_pd_scalars(val):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_dict_of_blocks.py
-----------------------------
class TestToDictOfBlocks:
def test_to_dict_of_blocks_item_cache(using_copy_on_write, warn_copy_on_write):
def test_set_change_dtype_slice():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_numpy.py
-----------------------------
class TestToNumpy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_period.py
-----------------------------
class TestToPeriod:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_records.py
-----------------------------
class TestDataFrameToRecords:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_to_timestamp.py
-----------------------------
def _get_with_delta(delta, freq="YE-DEC"):
class TestToTimestamp:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_transpose.py
-----------------------------
class TestTranspose:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_truncate.py
-----------------------------
class TestDataFrameTruncate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_tz_convert.py
-----------------------------
class TestTZConvert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_tz_localize.py
-----------------------------
class TestTZLocalize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_update.py
-----------------------------
class TestDataFrameUpdate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_values.py
-----------------------------
class TestDataFrameValues:
class TestPrivateValues:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\test_value_counts.py
-----------------------------
def test_data_frame_value_counts_unsorted():
def test_data_frame_value_counts_ascending():
def test_data_frame_value_counts_default():
def test_data_frame_value_counts_normalize():
def test_data_frame_value_counts_single_col_default():
def test_data_frame_value_counts_empty():
def test_data_frame_value_counts_empty_normalize():
def test_data_frame_value_counts_dropna_true(nulls_fixture):
def test_data_frame_value_counts_dropna_false(nulls_fixture):
def test_data_frame_value_counts_subset(nulls_fixture, columns):
def test_value_counts_categorical_future_warning():
def test_value_counts_with_missing_category():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\methods\__init__.py
-----------------------------
> """
  Test files dedicated to individual (stand-alone) DataFrame methods
  
  Ideally these files/tests should correspond 1-to-1 with tests.series.methods

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\common.py
-----------------------------
>     """
      take a list of frames, zip them together under the
      assumption that these all have the first frames' index/columns.
  
def _check_mixed_float(df, dtype=None):
def _check_mixed_int(df, dtype=None):
def zip_frames(frames: list[DataFrame], axis: AxisInt = 1) -> DataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\conftest.py
-----------------------------
>     """
      Fixture for DataFrame of floats with DatetimeIndex
  
      Columns are ['A', 'B', 'C', 'D']
def datetime_frame() -> DataFrame:
def float_string_frame():
def mixed_float_frame():
def mixed_int_frame():
def timezone_frame():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_alter_axes.py
-----------------------------
class TestDataFrameAlterAxes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_api.py
-----------------------------
class TestDataFrameMisc:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_arithmetic.py
-----------------------------
>     """
      Fixture for simple 3x3 DataFrame
  
      Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].
def simple_frame():
def switch_numexpr_min_elements(request, monkeypatch):
class DummyElement:
class TestFrameComparisons:
class TestFrameFlexComparisons:
class TestFrameFlexArithmetic:
class TestFrameArithmetic:
def test_frame_with_zero_len_series_corner_cases():
def test_zero_len_frame_with_series_corner_cases():
def test_frame_single_columns_object_sum_axis_1():
class TestFrameArithmeticUnsorted:
def test_pow_with_realignment():
def test_dataframe_series_extension_dtypes():
def test_dataframe_blockwise_slicelike():
def test_dataframe_operation_with_non_numeric_types(df, col_dtype):
def test_arith_reindex_with_duplicates():
def test_arith_list_of_arraylike_raise(to_add):
def test_inplace_arithmetic_series_update(using_copy_on_write, warn_copy_on_write):
def test_arithmetic_multiindex_align():
def test_bool_frame_mult_float():
def test_frame_sub_nullable_int(any_int_ea_dtype):
def test_frame_op_subclass_nonclass_constructor():
def test_enum_column_equality():
def test_mixed_col_index_dtype(using_infer_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_arrow_interface.py
-----------------------------
def test_dataframe_arrow_interface(using_infer_string):
def test_dataframe_to_arrow(using_infer_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_block_internals.py
-----------------------------
class TestDataFrameBlockInternals:
def test_update_inplace_sets_valid_block_values(using_copy_on_write):
def test_nonconsolidated_item_cache_take():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_constructors.py
-----------------------------
class TestDataFrameConstructors:
class TestDataFrameConstructorIndexInference:
class TestDataFrameConstructorWithDtypeCoercion:
class TestDataFrameConstructorWithDatetimeTZ:
def get1(obj):  # TODO: make a helper in tm?
class TestFromScalar:
class TestAllowNonNano:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_cumulative.py
-----------------------------
> """
  Tests for DataFrame cumulative operations
  
  See also
class TestDataFrameCumulativeOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_iteration.py
-----------------------------
class TestIteration:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_logical_ops.py
-----------------------------
class TestDataFrameLogicalOperators:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_nonunique_indexes.py
-----------------------------
class TestDataFrameNonuniqueIndexes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_npfuncs.py
-----------------------------
> """
  Tests for np.foo applied to DataFrame, not necessarily ufuncs.
class TestAsArray:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_query_eval.py
-----------------------------
>         res = df.query("""'"page 1 load"' in event""", parser=parser, engine=engine)
          tm.assert_frame_equal(expected, res)
  
      def test_query_with_nested_special_character(self, parser, engine):
def parser(request):
def engine(request):
def skip_if_no_pandas_parser(parser):
class TestCompat:
class TestDataFrameEval:
class TestDataFrameQueryWithMultiIndex:
class TestDataFrameQueryNumExprPandas:
class TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas):
class TestDataFrameQueryPythonPandas(TestDataFrameQueryNumExprPandas):
class TestDataFrameQueryPythonPython(TestDataFrameQueryNumExprPython):
class TestDataFrameQueryStrings:
class TestDataFrameEvalWithFrame:
class TestDataFrameQueryBacktickQuoting:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_reductions.py
-----------------------------
>     """
      Create a function for calling on an array.
  
      Parameters
def make_skipna_wrapper(alternative, skipna_alternative=None):
def assert_stat_op_calc(
def bool_frame_with_na():
def float_frame_with_na():
class TestDataFrameAnalytics:
class TestDataFrameReductions:
class TestNuisanceColumns:
class TestEmptyDataFrameReductions:
def test_sum_timedelta64_skipna_false(using_array_manager, request):
def test_mixed_frame_with_integer_sum():
def test_minmax_extensionarray(method, numeric_only):
def test_frame_mixed_numeric_object_with_timestamp(ts_value):
def test_prod_sum_min_count_mixed_object():
def test_reduction_axis_none_returns_scalar(method, numeric_only, dtype):
def test_fails_on_non_numeric(kernel):
def test_numeric_ea_axis_1(method, skipna, min_count, any_numeric_ea_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_repr.py
-----------------------------
>         expected = """      0
  True  1
  None  2
  NaN   3
class TestDataFrameRepr:
def test_repr_with_complex_nans(data, output, as_frame):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_stack_unstack.py
-----------------------------
def future_stack(request):
class TestDataFrameReshape:
def test_unstack_sort_false(frame_or_series, dtype):
def test_unstack_fill_frame_object():
def test_unstack_timezone_aware_values():
def test_stack_timezone_aware_values(future_stack):
def test_stack_empty_frame(dropna, future_stack):
def test_stack_unstack_empty_frame(dropna, fill_value, future_stack):
def test_unstack_single_index_series():
def test_unstacking_multi_index_df():
def test_stack_positional_level_duplicate_column_names(future_stack):
def test_unstack_non_slice_like_blocks(using_array_manager):
def test_stack_sort_false(future_stack):
def test_stack_sort_false_multi_level(future_stack):
class TestStackUnstackMultiLevel:
def test_stack_tuple_columns(future_stack):
def test_stack_preserves_na(dtype, na_value, test_multiindex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_subclass.py
-----------------------------
>             """
              Subclasses pandas DF, fills DF with simulation results, adds some
              custom plotting functions.
def gpd_style_subclass_df():
class TestDataFrameSubclassing:
class MySubclassWithMetadata(DataFrame):
def test_constructor_with_metadata():
class SimpleDataFrameSubClass(DataFrame):
class SimpleSeriesSubClass(Series):
class TestSubclassWithoutConstructor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_ufunc.py
-----------------------------
def test_unary_unary(dtype):
def test_unary_binary(request, dtype):
def test_binary_input_dispatch_binop(dtype):
def test_ufunc_passes_args(func, arg, expected):
def test_binary_input_aligns_columns(request, dtype_a, dtype_b):
def test_binary_input_aligns_index(request, dtype):
def test_binary_frame_series_raises():
def test_unary_accumulate_axis():
def test_frame_outer_disallowed():
def test_alignment_deprecation_enforced():
def test_alignment_deprecation_many_inputs_enforced():
def test_array_ufuncs_for_many_arguments():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_unary.py
-----------------------------
class TestDataFrameUnaryOperators:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\test_validate.py
-----------------------------
>     """Tests for error handling related to data types of method arguments."""
  
      @pytest.mark.parametrize(
          "func",
def dataframe():
class TestDataFrameValidate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\frame\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_duplicate_labels.py
-----------------------------
> """Tests dealing with the NDFrame.allows_duplicates."""
  import operator
  
  import numpy as np
class TestPreserves:
class TestRaises:
def test_raises_basic(idx):
def test_format_duplicate_labels_message():
def test_format_duplicate_labels_message_multi():
def test_dataframe_insert_raises():
def test_inplace_raises(method, frame_only):
def test_pickle():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_finalize.py
-----------------------------
> """
  An exhaustive list of pandas methods exercising NDFrame.__finalize__.
def idfn(x):
def ndframe_method(request):
def test_finalize_called(ndframe_method):
def test_finalize_first(data):
def test_finalize_last(data):
def test_finalize_called_eval_numexpr():
def test_binops(request, args, annotate, all_binary_operators):
def test_string_method(method):
def test_datetime_method(method):
def test_datetime_property(attr):
def test_timedelta_property(attr):
def test_timedelta_methods(method):
def test_categorical_accessor(method):
def test_groupby_finalize(obj, method):
def test_groupby_finalize_not_implemented(obj, method):
def test_finalize_frame_series_name():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_frame.py
-----------------------------
class TestDataFrame:
class TestDataFrame2:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_generic.py
-----------------------------
>     """
      construct an object for the given shape
      if value is specified use that if its a scalar
      if value is an array, repeat it as needed
def construct(box, shape, value=None, dtype=None, **kwargs):
class TestGeneric:
class TestNDFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_label_or_level_utils.py
-----------------------------
>     """DataFrame with columns 'L1', 'L2', and 'L3'"""
      return pd.DataFrame({"L1": [1, 2, 3], "L2": [11, 12, 13], "L3": ["A", "B", "C"]})
  
  
def df():
def df_levels(request, df):
def df_ambig(df):
def df_duplabels(df):
def get_labels_levels(df_levels):
def assert_label_reference(frame, labels, axis):
def assert_level_reference(frame, levels, axis):
def test_is_level_or_label_reference_df_simple(df_levels, axis):
def test_is_level_reference_df_ambig(df_ambig, axis):
def test_is_level_reference_series_simple_axis0(df):
def test_is_level_reference_series_axis1_error(df):
def test_check_label_or_level_ambiguity_df(df_ambig, axis):
def test_check_label_or_level_ambiguity_series(df):
def test_check_label_or_level_ambiguity_series_axis1_error(df):
def assert_label_values(frame, labels, axis):
def assert_level_values(frame, levels, axis):
def test_get_label_or_level_values_df_simple(df_levels, axis):
def test_get_label_or_level_values_df_ambig(df_ambig, axis):
def test_get_label_or_level_values_df_duplabels(df_duplabels, axis):
def test_get_label_or_level_values_series_axis0(df):
def test_get_label_or_level_values_series_axis1_error(df):
def assert_labels_dropped(frame, labels, axis):
def assert_levels_dropped(frame, levels, axis):
def test_drop_labels_or_levels_df(df_levels, axis):
def test_drop_labels_or_levels_series(df):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_series.py
-----------------------------
class TestSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\test_to_xarray.py
-----------------------------
class TestDataFrameToXArray:
class TestSeriesToXArray:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\generic\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\aggregate\test_aggregate.py
-----------------------------
> """
  test .agg behavior / note that .apply is tested generally in test_groupby.py
def test_groupby_agg_no_extra_calls():
def test_agg_regression1(tsframe):
def test_agg_must_agg(df):
def test_agg_ser_multi_key(df):
def test_groupby_aggregation_mixed_dtype():
def test_groupby_aggregation_multi_level_column():
def test_agg_apply_corner(ts, tsframe):
def test_agg_grouping_is_list_tuple(ts):
def test_agg_python_multiindex(multiindex_dataframe_random_data):
def test_aggregate_str_func(tsframe, groupbyfunc):
def test_std_masked_dtype(any_numeric_ea_dtype):
def test_agg_str_with_kwarg_axis_1_raises(df, reduction_func):
def test_multiindex_groupby_mixed_cols_axis1(func, expected, dtype, result_dtype_dict):
def test_groupby_mixed_cols_axis1(func, expected_data, result_dtype_dict):
def test_aggregate_item_by_item(df):
def test_wrap_agg_out(three_group):
def test_agg_multiple_functions_maintain_order(df):
def test_series_index_name(df):
def test_agg_multiple_functions_same_name():
def test_agg_multiple_functions_same_name_with_ohlc_present():
def test_multiple_functions_tuples_and_non_tuples(df):
def test_more_flexible_frame_multi_function(df):
def test_multi_function_flexible_mix(df):
def test_groupby_agg_coercing_bools():
def test_groupby_agg_dict_with_getitem():
def test_groupby_agg_dict_dup_columns():
def test_bool_agg_dtype(op):
def test_callable_result_dtype_frame(
def test_callable_result_dtype_series(keys, agg_index, input, dtype, method):
def test_order_aggregate_multiple_funcs():
def test_ohlc_ea_dtypes(any_numeric_ea_dtype):
def test_uint64_type_handling(dtype, how):
def test_func_duplicates_raises():
def test_agg_index_has_complex_internals(index):
def test_agg_split_block():
def test_agg_split_object_part_datetime():
class TestNamedAggregationSeries:
class TestNamedAggregationDataFrame:
def test_agg_relabel_multiindex_column(
def test_agg_relabel_multiindex_raises_not_exist():
def test_agg_relabel_multiindex_duplicates():
def test_groupby_aggregate_empty_key(kwargs):
def test_groupby_aggregate_empty_key_empty_return():
def test_groupby_aggregate_empty_with_multiindex_frame():
def test_grouby_agg_loses_results_with_as_index_false_relabel():
def test_grouby_agg_loses_results_with_as_index_false_relabel_multiindex():
def test_multiindex_custom_func(func):
def myfunc(s):
def test_lambda_named_agg(func):
def test_aggregate_mixed_types():
def test_aggregate_udf_na_extension_type():
class TestLambdaMangling:
def test_groupby_get_by_index():
def test_groupby_single_agg_cat_cols(grp_col_dict, exp_data):
def test_groupby_combined_aggs_cat_cols(grp_col_dict, exp_data):
def test_nonagg_agg():
def test_aggregate_datetime_objects():
def test_groupby_index_object_dtype():
def test_timeseries_groupby_agg():
def test_groupby_agg_precision(any_real_numeric_dtype):
def test_groupby_aggregate_directory(reduction_func):
def test_group_mean_timedelta_nat():
def test_group_mean_datetime64_nat(input_data, expected_output):
def test_groupby_complex(func, output):
def test_groupby_complex_raises(func):
def test_multi_axis_1_raises(func):
def test_agg_of_mode_list(test, constant):
def test_dataframe_groupy_agg_list_like_func_with_args():
def test_series_groupy_agg_list_like_func_with_args():
def test_agg_groupings_selection():
def test_agg_multiple_with_as_index_false_subset_to_a_single_column():
def test_agg_with_as_index_false_with_list():
def test_groupby_agg_extension_timedelta_cumsum_with_named_aggregation():
def test_groupby_aggregation_empty_group():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\aggregate\test_cython.py
-----------------------------
> """
  test cython .agg behavior
def test_cythonized_aggers(op_name):
def test_cython_agg_boolean():
def test_cython_agg_nothing_to_agg():
def test_cython_agg_nothing_to_agg_with_dates():
def test_cython_agg_frame_columns():
def test_cython_agg_return_dict():
def test_cython_fail_agg():
def test__cython_agg_general(op, targop):
def test_cython_agg_empty_buckets(op, targop, observed):
def test_cython_agg_empty_buckets_nanops(observed):
def test_cython_with_timestamp_and_nat(op, data):
def test_read_only_buffer_source_agg(agg):
def test_cython_agg_nullable_int(op_name):
def test_count_masked_returns_masked_dtype(dtype):
def test_cython_agg_EA_known_dtypes(data, op_name, action, with_na):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\aggregate\test_numba.py
-----------------------------
def test_correct_function_signature():
def test_check_nopython_kwargs():
def test_numba_vs_cython(jit, pandas_obj, nogil, parallel, nopython, as_index):
def test_cache(jit, pandas_obj, nogil, parallel, nopython):
def test_use_global_config():
def test_multifunc_numba_vs_cython_frame(agg_kwargs):
def test_multifunc_numba_udf_frame(agg_kwargs, expected_func):
def test_multifunc_numba_vs_cython_series(agg_kwargs):
def test_multifunc_numba_kwarg_propagation(data, agg_kwargs):
def test_args_not_cached():
def test_index_data_correctly_passed():
def test_engine_kwargs_not_cached():
def test_multiindex_one_key(nogil, parallel, nopython):
def test_multiindex_multi_key_not_supported(nogil, parallel, nopython):
def test_multilabel_numba_vs_cython(numba_supported_reductions):
def test_multilabel_udf_numba_vs_cython():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\aggregate\test_other.py
-----------------------------
> """
  test all other .agg behavior
def test_agg_partial_failure_raises():
def test_agg_datetimes_mixed():
def test_agg_period_index():
def test_agg_dict_parameter_cast_result_dtypes():
def test_agg_cast_results_dtypes():
def test_aggregate_float64_no_int64():
def test_aggregate_api_consistency():
def test_agg_dict_renaming_deprecation():
def test_agg_compat():
def test_agg_nested_dicts():
def test_agg_item_by_item_raise_typeerror():
def test_series_agg_multikey():
def test_series_agg_multi_pure_python():
def test_agg_consistency():
def test_agg_callables():
def test_agg_over_numpy_arrays():
def test_agg_tzaware_non_datetime_result(as_period):
def test_agg_timezone_round_trip():
def test_sum_uint64_overflow():
def test_agg_structs_dataframe(structure, expected):
def test_agg_structs_series(structure, expected):
def test_agg_category_nansum(observed):
def test_agg_list_like_func():
def test_agg_lambda_with_timezone():
def test_groupby_agg_err_catching(err_cls):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\aggregate\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_corrwith.py
-----------------------------
def test_corrwith_with_1_axis():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_describe.py
-----------------------------
def test_apply_describe_bug(multiindex_dataframe_random_data):
def test_series_describe_multikey():
def test_series_describe_single():
def test_series_describe_as_index(as_index, keys):
def test_frame_describe_multikey(tsframe, using_infer_string):
def test_frame_describe_tupleindex():
def test_frame_describe_unstacked_format():
def test_describe_with_duplicate_output_column_names(as_index, keys):
def test_describe_duplicate_columns():
class TestGroupByNonCythonPaths:
def test_groupby_empty_dataset(dtype, kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_groupby_shift_diff.py
-----------------------------
def test_group_shift_with_null_key():
def test_group_shift_with_fill_value():
def test_group_shift_lose_timezone():
def test_group_diff_real_series(any_real_numpy_dtype):
def test_group_diff_real_frame(any_real_numpy_dtype):
def test_group_diff_datetimelike(data, unit):
def test_group_diff_bool():
def test_group_diff_object_raises(object_dtype):
def test_empty_shift_with_fill():
def test_multindex_empty_shift_with_fill():
def test_shift_periods_freq():
def test_shift_deprecate_freq_and_fill_value():
def test_shift_disallow_suffix_if_periods_is_int():
def test_group_shift_with_multiple_periods():
def test_group_shift_with_multiple_periods_and_freq():
def test_group_shift_with_multiple_periods_and_fill_value():
def test_group_shift_with_multiple_periods_and_both_fill_and_freq_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_is_monotonic.py
-----------------------------
def test_is_monotonic_increasing(in_vals, out_vals):
def test_is_monotonic_decreasing(in_vals, out_vals):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_nlargest_nsmallest.py
-----------------------------
def test_nlargest():
def test_nlargest_mi_grouper():
def test_nsmallest():
def test_nlargest_and_smallest_noop(data, groups, dtype, method):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_nth.py
-----------------------------
def test_first_last_nth(df):
def test_first_last_with_na_object(method, nulls_fixture):
def test_nth_with_na_object(index, nulls_fixture):
def test_first_last_with_None(method):
def test_first_last_with_None_expanded(method, df, expected):
def test_first_last_nth_dtypes():
def test_first_last_nth_dtypes2():
def test_first_last_nth_nan_dtype():
def test_first_strings_timestamps():
def test_nth():
def test_nth2():
def test_nth3():
def test_nth4():
def test_nth5():
def test_nth_bdays(unit):
def test_nth_multi_grouper(three_group):
def test_first_last_tz(data, expected_first, expected_last):
def test_first_last_tz_multi_column(method, ts, alpha, unit):
def test_first_last_extension_array_keeps_dtype(values, function):
def test_nth_multi_index_as_expected():
def test_groupby_head_tail(op, n, expected_rows, columns, as_index):
def test_groupby_head_tail_axis_1(op, n, expected_cols):
def test_group_selection_cache():
def test_nth_empty():
def test_nth_column_order():
def test_nth_nan_in_grouper(dropna):
def test_nth_nan_in_grouper_series(dropna):
def test_first_categorical_and_datetime_data_nat():
def test_first_multi_key_groupby_categorical():
def test_groupby_last_first_nth_with_none(method, nulls_fixture):
def test_slice(slice_test_df, slice_test_grouped, arg, expected_rows):
def test_nth_indexed(slice_test_df, slice_test_grouped):
def test_invalid_argument(slice_test_grouped):
def test_negative_step(slice_test_grouped):
def test_np_ints(slice_test_df, slice_test_grouped):
def test_groupby_nth_with_column_axis():
def test_groupby_nth_interval():
def test_nth_slices_with_column_axis(
def test_head_tail_dropna_true():
def test_head_tail_dropna_false():
def test_nth_after_selection(selection, dropna):
def test_groupby_nth_int_like_precision(data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_quantile.py
-----------------------------
def test_quantile(interpolation, a_vals, b_vals, q, request):
def test_quantile_array():
def test_quantile_array2():
def test_quantile_array_no_sort():
def test_quantile_array_multiple_levels():
def test_groupby_quantile_with_arraylike_q_and_int_columns(frame_size, groupby, q):
def test_quantile_raises():
def test_quantile_out_of_bounds_q_raises():
def test_quantile_missing_group_values_no_segfaults():
def test_quantile_missing_group_values_correct_results(
def test_groupby_quantile_nullable_array(values, q):
def test_groupby_quantile_raises_on_invalid_dtype(q, numeric_only):
def test_groupby_quantile_NA_float(any_float_dtype):
def test_groupby_quantile_NA_int(any_int_ea_dtype):
def test_groupby_quantile_all_na_group_masked(
def test_groupby_quantile_all_na_group_masked_interp(
def test_groupby_quantile_allNA_column(dtype):
def test_groupby_timedelta_quantile():
def test_columns_groupby_quantile():
def test_timestamp_groupby_quantile(unit):
def test_groupby_quantile_dt64tz_period():
def test_groupby_quantile_nonmulti_levels_order():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_rank.py
-----------------------------
def test_rank_unordered_categorical_typeerror():
def test_rank_apply():
def test_rank_args(grps, vals, ties_method, ascending, pct, exp):
def test_infs_n_nans(grps, vals, ties_method, ascending, na_option, exp):
def test_rank_args_missing(grps, vals, ties_method, ascending, na_option, pct, exp):
def test_rank_resets_each_group(pct, exp):
def test_rank_avg_even_vals(dtype, upper):
def test_rank_object_dtype(ties_method, ascending, na_option, pct, vals):
def test_rank_naoption_raises(ties_method, ascending, na_option, pct, vals):
def test_rank_empty_group():
def test_rank_zero_div(input_key, input_value, output_value):
def test_rank_min_int():
def test_rank_pct_equal_values_on_group_transition(use_nan):
def test_rank_multiindex():
def test_groupby_axis0_rank_axis1():
def test_groupby_axis0_cummax_axis1():
def test_non_unique_index():
def test_rank_categorical():
def test_groupby_op_with_nullables(na_option):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_sample.py
-----------------------------
def test_groupby_sample_balanced_groups_shape(n, frac):
def test_groupby_sample_unbalanced_groups_shape():
def test_groupby_sample_index_value_spans_groups():
def test_groupby_sample_n_and_frac_raises():
def test_groupby_sample_frac_gt_one_without_replacement_raises():
def test_groupby_sample_invalid_n_raises(n):
def test_groupby_sample_oversample():
def test_groupby_sample_without_n_or_frac():
def test_groupby_sample_with_weights(index, expected_index):
def test_groupby_sample_with_selections():
def test_groupby_sample_with_empty_inputs():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_size.py
-----------------------------
def test_size(df, by):
def test_size_axis_1(df, axis_1, by, sort, dropna):
def test_size_sort(sort, by):
def test_size_series_dataframe():
def test_size_groupby_all_null():
def test_size_period_index():
def test_size_on_categorical(as_index):
def test_size_series_masked_type_returns_Int64(dtype):
def test_size_strings(any_string_dtype, using_infer_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_skew.py
-----------------------------
def test_groupby_skew_equivalence():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\test_value_counts.py
-----------------------------
> """
  these are systematically testing all of the args to value_counts
  with different size combinations. This is to ensure stability of the sorting
  and proper parameter handling
def tests_value_counts_index_names_category_column():
def seed_df(seed_nans, n, m):
def test_series_groupby_value_counts(
def test_series_groupby_value_counts_with_grouper(utc):
def test_series_groupby_value_counts_empty(columns):
def test_series_groupby_value_counts_one_row(columns):
def test_series_groupby_value_counts_on_categorical():
def test_series_groupby_value_counts_no_sort():
def education_df():
def test_axis(education_df):
def test_bad_subset(education_df):
def test_basic(education_df, request):
def _frame_value_counts(df, keys, normalize, sort, ascending):
def test_against_frame_and_seriesgroupby(
def test_compound(
def animals_df():
def test_data_frame_value_counts(
def nulls_df():
def test_dropna_combinations(
def names_with_nulls_df(nulls_fixture):
def test_data_frame_value_counts_dropna(
def test_categorical_single_grouper_with_only_observed_categories(
def assert_categorical_single_grouper(
def test_categorical_single_grouper_observed_true(
def test_categorical_single_grouper_observed_false(
def test_categorical_multiple_groupers(
def test_categorical_non_groupers(
def test_mixed_groupings(normalize, expected_label, expected_values):
def test_column_label_duplicates(test, columns, expected_names, as_index):
def test_result_label_duplicates(normalize, expected_label):
def test_ambiguous_grouping():
def test_subset_overlaps_gb_key_raises():
def test_subset_doesnt_exist_in_frame():
def test_subset():
def test_subset_duplicate_columns():
def test_value_counts_time_grouper(utc, unit):
def test_value_counts_integer_columns():
def test_value_counts_sort(sort, vc_sort, normalize):
def test_value_counts_sort_categorical(sort, vc_sort, normalize):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\transform\test_numba.py
-----------------------------
def test_correct_function_signature():
def test_check_nopython_kwargs():
def test_numba_vs_cython(jit, pandas_obj, nogil, parallel, nopython, as_index):
def test_cache(jit, pandas_obj, nogil, parallel, nopython):
def test_use_global_config():
def test_string_cython_vs_numba(agg_func, numba_supported_reductions):
def test_args_not_cached():
def test_index_data_correctly_passed():
def test_engine_kwargs_not_cached():
def test_multiindex_one_key(nogil, parallel, nopython):
def test_multiindex_multi_key_not_supported(nogil, parallel, nopython):
def test_multilabel_numba_vs_cython(numba_supported_reductions):
def test_multilabel_udf_numba_vs_cython():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\transform\test_transform.py
-----------------------------
> """ test with the .transform """
  import numpy as np
  import pytest
  
def assert_fp_equal(a, b):
def test_transform():
def test_transform_fast():
def test_transform_fast2():
def test_transform_fast3():
def test_transform_broadcast(tsframe, ts):
def test_transform_axis_1(request, transformation_func):
def test_transform_axis_1_reducer(request, reduction_func):
def test_transform_axis_ts(tsframe):
def test_transform_dtype():
def test_transform_bug():
def test_transform_numeric_to_boolean():
def test_transform_datetime_to_timedelta():
def test_transform_datetime_to_numeric():
def test_transform_casting():
def test_transform_multiple(ts):
def test_dispatch_transform(tsframe):
def test_transform_fillna_null():
def test_transform_transformation_func(transformation_func):
def test_transform_select_columns(df):
def test_transform_nuisance_raises(df, using_infer_string):
def test_transform_function_aliases(df):
def test_series_fast_transform_date():
def test_transform_length():
def test_transform_coercion():
def test_groupby_transform_with_int(using_infer_string):
def test_groupby_transform_with_nan_group():
def test_transform_mixed_type():
def test_cython_transform_series(op, args, targop):
def test_groupby_cum_skipna(op, skipna, input, exp):
def frame():
def frame_mi(frame):
def test_cython_transform_frame(request, op, args, targop, df_fix, gb_target):
def test_cython_transform_frame_column(
def test_transform_with_non_scalar_group():
def test_transform_numeric_ret(cols, expected, agg_func):
def test_transform_ffill():
def test_group_fill_methods(
def test_pad_stable_sorting(fill_method):
def test_pct_change(frame_or_series, freq, periods, fill_method, limit):
def test_ffill_bfill_non_unique_multilevel(func, expected_status):
def test_any_all_np_func(func):
def test_groupby_transform_rename():
def test_groupby_transform_timezone_column(func):
def test_groupby_transform_with_datetimes(func, values):
def test_groupby_transform_dtype():
def test_transform_absent_categories(func):
def test_ffill_not_in_axis(func, key, val):
def test_transform_invalid_name_raises():
def test_transform_agg_by_name(request, reduction_func, frame_or_series):
def test_transform_lambda_with_datetimetz():
def test_transform_fastpath_raises():
def test_transform_lambda_indexing():
def test_categorical_and_not_categorical_key(observed):
def test_string_rank_grouping():
def test_transform_cumcount():
def test_null_group_lambda_self(sort, dropna, keys):
def test_null_group_str_reducer(request, dropna, reduction_func):
def test_null_group_str_transformer(request, dropna, transformation_func):
def test_null_group_str_reducer_series(request, dropna, reduction_func):
def test_null_group_str_transformer_series(dropna, transformation_func):
def test_transform_aligns(func, frame_or_series, expected_values, keys, keys_in_index):
def test_as_index_no_change(keys, df, groupby_func):
def test_idxmin_idxmax_transform_args(how, skipna, numeric_only):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\transform\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\conftest.py
-----------------------------
>     """
      yields the string names of all groupby reduction functions, one at a time.
def sort(request):
def as_index(request):
def dropna(request):
def observed(request):
def df():
def ts():
def tsframe():
def three_group():
def slice_test_df():
def slice_test_grouped(slice_test_df):
def reduction_func(request):
def transformation_func(request):
def groupby_func(request):
def parallel(request):
def nogil(request):
def nopython(request):
def numba_supported_reductions(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_all_methods.py
-----------------------------
> """
  Tests that apply to all groupby operation methods.
  
  The only tests that should appear here are those that use the `groupby_func` fixture.
def test_multiindex_group_all_columns_when_empty(groupby_func):
def test_duplicate_columns(request, groupby_func, as_index):
def test_dup_labels_output_shape(groupby_func, idx):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_api.py
-----------------------------
> """
  Tests of the groupby API, including internal consistency and with other pandas objects.
  
  Tests in this file should only check the existence, names, and arguments of groupby
def test_tab_completion(multiindex_dataframe_random_data):
def test_all_methods_categorized(multiindex_dataframe_random_data):
def test_frame_consistency(groupby_func):
def test_series_consistency(request, groupby_func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_apply.py
-----------------------------
def test_apply_func_that_appends_group_to_list_without_copy():
def test_apply_index_date(using_infer_string):
def test_apply_index_date_object():
def test_apply_trivial(using_infer_string):
def test_apply_trivial_fail(using_infer_string):
def test_group_apply_once_per_group(df, group_names):
def test_group_apply_once_per_group2(capsys):
def test_apply_fast_slow_identical():
def test_groupby_apply_identity_maybecopy_index_identical(func):
def test_apply_with_mixed_dtype():
def test_groupby_as_index_apply():
def test_apply_concat_preserve_names(three_group):
def test_apply_series_to_frame():
def test_apply_series_yield_constant(df):
def test_apply_frame_yield_constant(df):
def test_apply_frame_to_series(df):
def test_apply_frame_not_as_index_column_name(df):
def test_apply_frame_concat_series():
def test_apply_transform(ts):
def test_apply_multikey_corner(tsframe):
def test_apply_chunk_view(group_keys):
def test_apply_no_name_column_conflict():
def test_apply_typecast_fail():
def test_apply_multiindex_fail():
def test_apply_corner(tsframe):
def test_apply_without_copy():
def test_apply_with_duplicated_non_sorted_axis(test_series):
def test_apply_reindex_values():
def test_apply_corner_cases():
def test_apply_numeric_coercion_when_datetime():
def test_apply_aggregating_timedelta_and_datetime():
def test_apply_groupby_datetimeindex():
def test_time_field_bug():
def test_gb_apply_list_of_unequal_len_arrays():
def test_groupby_apply_all_none():
def test_groupby_apply_none_first():
def test_groupby_apply_return_empty_chunk():
def test_apply_with_mixed_types():
def test_func_returns_object():
def test_apply_datetime_issue(group_column_dtlike):
def test_apply_series_return_dataframe_groups():
def test_apply_multi_level_name(category):
def test_groupby_apply_datetime_result_dtypes(using_infer_string):
def test_apply_index_has_complex_internals(index):
def test_apply_function_returns_non_pandas_non_scalar(function, expected_values):
def test_apply_function_returns_numpy_array():
def test_apply_function_index_return(function):
def test_apply_function_with_indexing_return_column():
def test_apply_result_type(group_keys, udf):
def test_result_order_group_keys_false():
def test_apply_with_timezones_aware():
def test_apply_is_unchanged_when_other_methods_are_called_first(reduction_func):
def test_apply_with_date_in_multiindex_does_not_convert_to_timestamp():
def test_apply_by_cols_equals_apply_by_rows_transposed():
def test_apply_dropna_with_indexed_same(dropna):
def test_apply_as_index_constant_lambda(as_index, expected):
def test_sort_index_groups():
def test_positional_slice_groups_datetimelike():
def test_groupby_apply_shape_cache_safety():
def test_groupby_apply_to_series_name():
def test_apply_na(dropna):
def test_apply_empty_string_nan_coerce_bug():
def test_apply_index_key_error_bug(index_values):
def test_apply_nonmonotonic_float_index(arg, idx):
def test_apply_str_with_args(df, args, kwargs):
def test_result_name_when_one_group(name):
def test_empty_df(method, op):
def test_include_groups(include_groups):
def test_builtins_apply(keys, f):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_apply_mutate.py
-----------------------------
def test_group_by_copy():
def test_mutate_groups():
def test_no_mutate_but_looks_like():
def test_apply_function_with_indexing(warn_copy_on_write):
def test_apply_mutate_columns_multiindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_bin_groupby.py
-----------------------------
def assert_block_lengths(x):
def cumsum_max(x):
def test_mgr_locs_updated(func):
def test_generate_bins(binner, closed, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_categorical.py
-----------------------------
>     """Reindex to a cartesian production for the groupers,
      preserving the nature (Categorical) of each grouper
def cartesian_product_for_groupers(result, args, names, fill_value=np.nan):
def test_apply_use_categorical_name(df):
def test_basic(using_infer_string):  # TODO: split this test
def test_level_get_group(observed):
def test_sorting_with_different_categoricals():
def test_apply(ordered):
def test_observed(request, using_infer_string, observed):
def test_observed_codes_remap(observed):
def test_observed_perf():
def test_observed_groups(observed):
def test_unobserved_in_index(keys, expected_values, expected_index_levels, test_series):
def test_observed_groups_with_nan(observed):
def test_observed_nth():
def test_dataframe_categorical_with_nan(observed):
def test_dataframe_categorical_ordered_observed_sort(ordered, observed, sort):
def test_datetime():
def test_categorical_index():
def test_describe_categorical_columns():
def test_unstack_categorical():
def test_bins_unequal_len():
def test_categorical_series(series, data):
def test_as_index():
def test_preserve_categories():
def test_preserve_categorical_dtype():
def test_preserve_on_ordered_ops(func, values):
def test_categorical_no_compress():
def test_groupby_empty_with_category():
def test_sort():
def test_sort2(sort, ordered):
def test_sort_datetimelike(sort, ordered):
def test_empty_sum():
def test_empty_prod():
def test_groupby_multiindex_categorical_datetime():
def test_groupby_agg_observed_true_single_column(as_index, expected):
def test_shift(fill_value):
def df_cat(df):
def test_seriesgroupby_observed_true(df_cat, operation):
def test_seriesgroupby_observed_false_or_none(df_cat, observed, operation):
def test_seriesgroupby_observed_apply_dict(df_cat, observed, index, data):
def test_groupby_categorical_series_dataframe_consistent(df_cat):
def test_groupby_categorical_axis_1(code):
def test_groupby_cat_preserves_structure(observed, ordered):
def test_get_nonexistent_category():
def test_series_groupby_on_2_categoricals_unobserved(reduction_func, observed):
def test_series_groupby_on_2_categoricals_unobserved_zeroes_or_nans(
def test_dataframe_groupby_on_2_categoricals_when_observed_is_true(reduction_func):
def test_dataframe_groupby_on_2_categoricals_when_observed_is_false(
def test_series_groupby_categorical_aggregation_getitem():
def test_groupby_agg_categorical_columns(func, expected_values):
def test_groupby_agg_non_numeric():
def test_groupby_first_returned_categorical_instead_of_dataframe(func):
def test_read_only_category_no_sort():
def test_sorted_missing_category_values():
def test_agg_cython_category_not_implemented_fallback():
def test_aggregate_categorical_with_isnan():
def test_categorical_transform():
def test_series_groupby_first_on_categorical_col_grouped_on_2_categoricals(
def test_df_groupby_first_on_categorical_col_grouped_on_2_categoricals(
def test_groupby_categorical_indices_unused_categories():
def test_groupby_last_first_preserve_categoricaldtype(func):
def test_groupby_categorical_observed_nunique():
def test_groupby_categorical_aggregate_functions():
def test_groupby_categorical_dropna(observed, dropna):
def test_category_order_reducer(
def test_category_order_transformer(
def test_category_order_head_tail(
def test_category_order_apply(as_index, sort, observed, method, index_kind, ordered):
def test_many_categories(as_index, sort, index_kind, ordered):
def test_groupby_default_depr(cat_columns, keys):
def test_agg_list(request, as_index, observed, reduction_func, test_series, keys):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_counting.py
-----------------------------
class TestCounting:
def test_groupby_timedelta_cython_count():
def test_count():
def test_count_non_nulls():
def test_count_object():
def test_count_cross_type():
def test_lower_int_prec_count():
def test_count_uses_size_on_exception():
def test_count_arrow_string_array(any_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_cumulative.py
-----------------------------
>     """
      Fixture of dtypes with min and max values used for testing
      cummin and cummax
def dtypes_for_minmax(request):
def test_groupby_cumprod():
def test_groupby_cumprod_overflow():
def test_groupby_cumprod_nan_influences_other_columns():
def test_cummin(dtypes_for_minmax):
def test_cummin_max_all_nan_column(method, dtype):
def test_cummax(dtypes_for_minmax):
def test_cummax_i8_at_implementation_bound():
def test_cummin_max_skipna(method, dtype, groups, expected_data):
def test_cummin_max_skipna_multiple_cols(method):
def test_numpy_compat(func):
def test_nullable_int_not_cast_as_float(method, dtype, val):
def test_cython_api2():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_filters.py
-----------------------------
def test_filter_series():
def test_filter_single_column_df():
def test_filter_multi_column_df():
def test_filter_mixed_df():
def test_filter_out_all_groups():
def test_filter_out_no_groups():
def test_filter_out_all_groups_in_df():
def test_filter_condition_raises():
def test_filter_with_axis_in_groupby():
def test_filter_bad_shapes():
def test_filter_nan_is_false():
def test_filter_pdna_is_false():
def test_filter_against_workaround_ints():
def test_filter_against_workaround_floats():
def test_filter_against_workaround_dataframe():
def test_filter_using_len():
def test_filter_maintains_ordering():
def test_filter_multiple_timestamp():
def test_filter_and_transform_with_non_unique_int_index():
def test_filter_and_transform_with_multiple_non_unique_int_index():
def test_filter_and_transform_with_non_unique_float_index():
def test_filter_and_transform_with_non_unique_timestamp_index():
def test_filter_and_transform_with_non_unique_string_index():
def test_filter_has_access_to_grouped_cols():
def test_filter_enforces_scalarness():
def test_filter_non_bool_raises():
def test_filter_dropna_with_empty_groups():
def test_filter_consistent_result_before_after_agg_func():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_groupby.py
-----------------------------
>         """
          Run an aggregate func on the subset of data.
def test_repr():
def test_groupby_std_datetimelike(warn_copy_on_write):
def test_basic_aggregations(dtype):
def test_groupby_nonobject_dtype(multiindex_dataframe_random_data):
def test_groupby_nonobject_dtype_mixed():
def test_inconsistent_return_type():
def test_pass_args_kwargs(ts, tsframe):
def test_pass_args_kwargs_duplicate_columns(tsframe, as_index):
def test_len():
def test_len_nan_group():
def test_basic_regression():
def test_with_na_groups(dtype):
def test_indices_concatenation_order():
def test_attr_wrapper(ts):
def test_frame_groupby(tsframe):
def test_frame_groupby_columns(tsframe):
def test_frame_set_name_single(df):
def test_multi_func(df):
def test_multi_key_multiple_functions(df):
def test_frame_multi_key_function_list():
def test_frame_multi_key_function_list_partial_failure(using_infer_string):
def test_groupby_multiple_columns(df, op):
def test_as_index_select_column():
def test_obj_arg_get_group_deprecated():
def test_groupby_as_index_select_column_sum_empty_df():
def test_groupby_as_index_agg(df):
def test_ops_not_as_index(reduction_func):
def test_as_index_series_return_frame(df):
def test_as_index_series_column_slice_raises(df):
def test_groupby_as_index_cython(df):
def test_groupby_as_index_series_scalar(df):
def test_groupby_as_index_corner(df, ts):
def test_groupby_multiple_key():
def test_groupby_multi_corner(df):
def test_raises_on_nuisance(df, using_infer_string):
def test_keep_nuisance_agg(df, agg_function):
def test_omit_nuisance_agg(df, agg_function, numeric_only, using_infer_string):
def test_raise_on_nuisance_python_single(df, using_infer_string):
def test_raise_on_nuisance_python_multiple(three_group, using_infer_string):
def test_empty_groups_corner(multiindex_dataframe_random_data):
def test_nonsense_func():
def test_wrap_aggregated_output_multindex(
def test_groupby_level_apply(multiindex_dataframe_random_data):
def test_groupby_level_mapper(multiindex_dataframe_random_data):
def test_groupby_level_nonmulti():
def test_groupby_complex():
def test_groupby_complex_mean():
def test_groupby_complex_numbers():
def test_groupby_series_indexed_differently():
def test_groupby_with_hier_columns():
def test_grouping_ndarray(df):
def test_groupby_wrong_multi_labels():
def test_groupby_series_with_name(df):
def test_seriesgroupby_name_attr(df):
def test_consistency_name():
def test_groupby_name_propagation(df):
def test_groupby_nonstring_columns():
def test_groupby_mixed_type_columns():
def test_cython_grouper_series_bug_noncontig():
def test_series_grouper_noncontig_index():
def test_convert_objects_leave_decimal_alone():
def test_groupby_dtype_inference_empty():
def test_groupby_unit64_float_conversion():
def test_groupby_list_infer_array_like(df):
def test_groupby_keys_same_size_as_index():
def test_groupby_one_row():
def test_groupby_nat_exclude():
def test_groupby_two_group_keys_all_nan():
def test_groupby_2d_malformed():
def test_int32_overflow():
def test_groupby_sort_multi():
def test_dont_clobber_name_column():
def test_skip_group_keys():
def test_no_nonsense_name(float_frame):
def test_multifunc_sum_bug():
def test_handle_dict_return_value(df):
def test_set_group_name(df, grouper):
def test_group_name_available_in_inference_pass():
def test_no_dummy_key_names(df):
def test_groupby_sort_multiindex_series():
def test_groupby_reindex_inside_function():
def test_groupby_multiindex_missing_pair():
def test_groupby_multiindex_not_lexsorted():
def test_index_label_overlaps_location():
def test_transform_doesnt_clobber_ints():
def test_groupby_preserves_sort(sort_column, group_column):
def test_pivot_table_values_key_error():
def test_empty_groupby(
def test_empty_groupby_apply_nonunique_columns():
def test_tuple_as_grouping():
def test_tuple_correct_keyerror():
def test_groupby_agg_ohlc_non_first():
def test_groupby_multiindex_nat():
def test_groupby_empty_list_raises():
def test_groupby_multiindex_series_keys_len_equal_group_axis():
def test_groupby_groups_in_BaseGrouper():
def test_groupby_axis_1(group_name):
def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):
def test_groupby_only_none_group():
def test_groupby_duplicate_index():
def test_group_on_empty_multiindex(transformation_func, request):
def test_groupby_crash_on_nunique(axis):
def test_groupby_list_level():
def test_groups_repr_truncates(max_seq_items, expected):
def test_group_on_two_row_multiindex_returns_one_tuple_key():
def test_subsetting_columns_keeps_attrs(klass, attr, value):
def test_subsetting_columns_axis_1():
def test_groupby_column_index_name_lost(func):
def test_groupby_duplicate_columns(infer_string):
def test_groupby_series_with_tuple_name():
def test_groupby_numerical_stability_sum_mean(func, values):
def test_groupby_numerical_stability_cumsum():
def test_groupby_cumsum_skipna_false():
def test_groupby_cumsum_timedelta64():
def test_groupby_mean_duplicate_index(rand_series_with_duplicate_datetimeindex):
def test_groupby_all_nan_groups_drop():
def test_groupby_empty_multi_column(as_index, numeric_only):
def test_groupby_aggregation_non_numeric_dtype():
def test_groupby_aggregation_multi_non_numeric_dtype():
def test_groupby_aggregation_numeric_with_non_numeric_dtype():
def test_groupby_filtered_df_std():
def test_datetime_categorical_multikey_groupby_indices():
def test_rolling_wrong_param_min_period():
def test_by_column_values_with_same_starting_value(any_string_dtype):
def test_groupby_none_in_first_mi_level():
def test_groupby_none_column_name(using_infer_string):
def test_single_element_list_grouping(selection):
def test_groupby_string_dtype():
def test_single_element_listlike_level_grouping_deprecation(level_arg, multiindex):
def test_groupby_avoid_casting_to_float(func):
def test_groupby_sum_support_mask(any_numeric_ea_dtype, func, val):
def test_groupby_overflow(val, dtype):
def test_groupby_cumsum_mask(any_numeric_ea_dtype, skipna, val):
def test_groupby_index_name_in_index_content(val_in, index, val_out):
def test_sum_of_booleans(n):
def test_groupby_method_drop_na(method):
def test_groupby_reduce_period():
def test_obj_with_exclusions_duplicate_columns():
def test_groupby_numeric_only_std_no_result(numeric_only):
def test_grouping_with_categorical_interval_columns():
def test_groupby_sum_on_nan_should_return_nan(bug_var):
def test_groupby_selection_with_methods(df, method):
def test_groupby_selection_other_methods(df):
def test_groupby_with_Time_Grouper(unit):
def test_groupby_series_with_datetimeindex_month_name():
def test_depr_get_group_len_1_list_likes(test_series, kwarg, value, name, warn):
def test_groupby_ngroup_with_nan():
def test_get_group_axis_1():
def test_groupby_ffill_with_duplicated_index():
def test_decimal_na_sort(test_series):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_groupby_dropna.py
-----------------------------
def test_groupby_dropna_multi_index_dataframe_nan_in_one_group(
def test_groupby_dropna_multi_index_dataframe_nan_in_two_groups(
def test_groupby_dropna_normal_index_dataframe(dropna, idx, outputs):
def test_groupby_dropna_series_level(dropna, idx, expected):
def test_groupby_dropna_series_by(dropna, expected):
def test_grouper_dropna_propagation(dropna):
def test_groupby_dataframe_slice_then_transform(dropna, index):
def test_groupby_dropna_multi_index_dataframe_agg(dropna, tuples, outputs):
def test_groupby_dropna_datetime_like_data(
def test_groupby_apply_with_dropna_for_multi_index(dropna, data, selected_data, levels):
def test_groupby_dropna_with_multiindex_input(input_index, keys, series):
def test_groupby_nan_included():
def test_groupby_drop_nan_with_multi_index():
def test_no_sort_keep_na(sequence_index, dtype, test_series, as_index):
def test_null_is_null_for_dtype(
def test_categorical_reducers(reduction_func, observed, sort, as_index, index_kind):
def test_categorical_transformers(
def test_categorical_head_tail(method, observed, sort, as_index):
def test_categorical_agg():
def test_categorical_transform():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_groupby_subclass.py
-----------------------------
def test_groupby_preserves_subclass(obj, groupby_func):
def test_groupby_preserves_metadata():
def test_groupby_resample_preserves_subclass(obj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_grouping.py
-----------------------------
> """
  test where we are determining what we are grouping, or getting groups
class TestSelection:
class TestGrouping:
class TestGetGroup:
class TestIteration:
def test_grouping_by_key_is_in_axis():
def test_grouper_groups():
def test_depr_grouping_attrs(attr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_indexing.py
-----------------------------
def test_int(slice_test_df, slice_test_grouped, arg, expected_rows):
def test_slice(slice_test_df, slice_test_grouped):
def test_list(slice_test_df, slice_test_grouped, arg, expected_rows):
def test_ints(slice_test_df, slice_test_grouped):
def test_slices(slice_test_df, slice_test_grouped):
def test_mix(slice_test_df, slice_test_grouped):
def test_as_index(slice_test_df, arg, expected_rows):
def test_doc_examples():
def multiindex_data():
def _make_df_from_data(data):
def test_multiindex(multiindex_data):
def test_against_head_and_tail(arg, method, simulated):
def test_against_df_iloc(start, stop, step):
def test_series():
def test_step(step):
def column_group_df():
def test_column_axis(column_group_df):
def test_columns_on_iter():
def test_groupby_duplicated_columns(func):
def test_groupby_get_nonexisting_groups():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_index_as_string.py
-----------------------------
def frame(request):
def series():
def test_grouper_index_level_as_string(frame, key_strs, groupers):
def test_grouper_index_level_as_string_series(series, levels):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_libgroupby.py
-----------------------------
>     """
      Check a group transform that executes a cumulative function.
  
      Parameters
class GroupVarTestMixin:
class TestGroupVarFloat64(GroupVarTestMixin):
class TestGroupVarFloat32(GroupVarTestMixin):
def test_group_ohlc(dtype):
def _check_cython_group_transform_cumulative(pd_op, np_op, dtype):
def test_cython_group_transform_cumsum(np_dtype):
def test_cython_group_transform_cumprod():
def test_cython_group_transform_algos():
def test_cython_group_mean_datetimelike():
def test_cython_group_mean_wrong_min_count():
def test_cython_group_mean_not_datetimelike_but_has_NaT_values():
def test_cython_group_mean_Inf_at_begining_and_end():
def test_cython_group_sum_Inf_at_begining_and_end(values, out):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_missing.py
-----------------------------
def test_groupby_column_index_name_lost_fill_funcs(func):
def test_groupby_fill_duplicate_column_names(func):
def test_ffill_missing_arguments():
def test_fillna_with_string_dtype(method, expected):
def test_fill_consistency():
def test_ffill_handles_nan_groups(dropna, method, has_nan_group):
def test_min_count(func, min_count, value):
def test_indices_with_missing():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_numba.py
-----------------------------
class TestEngine:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_numeric_only.py
-----------------------------
class TestNumericOnly:
def test_axis1_numeric_only(request, groupby_func, numeric_only, using_infer_string):
def test_numeric_only(kernel, has_arg, numeric_only, keys):
def test_deprecate_numeric_only_series(dtype, groupby_func, request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_pipe.py
-----------------------------
def test_pipe():
def test_pipe_args():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_raises.py
-----------------------------
def by(request):
def groupby_series(request):
def df_with_string_col():
def df_with_datetime_col():
def df_with_timedelta_col():
def df_with_cat_col():
def _call_and_check(klass, msg, how, gb, groupby_func, args, warn_msg=""):
def test_groupby_raises_string(
def test_groupby_raises_string_udf(how, by, groupby_series, df_with_string_col):
def test_groupby_raises_string_np(
def test_groupby_raises_datetime(
def test_groupby_raises_datetime_udf(how, by, groupby_series, df_with_datetime_col):
def test_groupby_raises_datetime_np(
def test_groupby_raises_timedelta(func, df_with_timedelta_col):
def test_groupby_raises_category(
def test_groupby_raises_category_udf(how, by, groupby_series, df_with_cat_col):
def test_groupby_raises_category_np(
def test_groupby_raises_category_on_category(
def test_subsetting_columns_axis_1_raises():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_reductions.py
-----------------------------
def test_groupby_bool_aggs(skipna, agg_func, vals):
def test_any():
def test_bool_aggs_dup_column_labels(bool_agg_func):
def test_masked_kleene_logic(bool_agg_func, skipna, data):
def test_masked_mixed_types(dtype1, dtype2, exp_col1, exp_col2):
def test_masked_bool_aggs_skipna(bool_agg_func, dtype, skipna, frame_or_series):
def test_object_type_missing_vals(bool_agg_func, data, expected_res, frame_or_series):
def test_object_NA_raises_with_skipna_false(bool_agg_func):
def test_empty(frame_or_series, bool_agg_func):
def test_idxmin_idxmax_extremes(how, any_real_numpy_dtype):
def test_idxmin_idxmax_extremes_skipna(skipna, how, float_numpy_dtype):
def test_idxmin_idxmax_returns_int_types(func, values, numeric_only):
def test_groupby_non_arithmetic_agg_int_like_precision(method, data):
def test_first_last_skipna(any_real_nullable_dtype, sort, skipna, how):
def test_idxmin_idxmax_axis1():
def test_groupby_mean_no_overflow():
def test_mean_on_timedelta():
def test_cython_median():
def test_median_empty_bins(observed):
def test_max_min_non_numeric():
def test_max_min_object_multiple_columns(using_array_manager, using_infer_string):
def test_min_date_with_nans():
def test_max_inat():
def test_max_inat_not_all_na():
def test_groupby_aggregate_period_column(func):
def test_groupby_aggregate_period_frame(func):
def test_aggregate_numeric_object_dtype():
def test_aggregate_categorical_lost_index(func: str):
def test_groupby_min_max_nullable(dtype):
def test_min_max_nullable_uint64_empty_group():
def test_groupby_min_max_categorical(func):
def test_min_empty_string_dtype(func, string_dtype_no_object):
def test_string_dtype_all_na(
def test_string_dtype_empty_sum(string_dtype_no_object, min_count):
def test_max_nan_bug():
def test_series_groupby_nunique(sort, dropna, as_index, with_nan, keys):
def test_nunique():
def test_nunique_with_object():
def test_nunique_with_empty_series():
def test_nunique_with_timegrouper():
def test_nunique_with_NaT(key, data, dropna, expected):
def test_nunique_preserves_column_level_names():
def test_nunique_transform_with_datetime():
def test_empty_categorical(observed):
def test_intercept_builtin_sum():
def test_groupby_sum_mincount_boolean(min_count):
def test_groupby_sum_below_mincount_nullable_integer():
def test_groupby_sum_timedelta_with_nat():
def test_groupby_non_arithmetic_agg_types(dtype, method, data):
def scipy_sem(*args, **kwargs):
def test_ops_general(op, targop):
def test_apply_to_nullable_integer_returns_float(values, function):
def test_regression_allowlist_methods(op, axis, skipna, sort):
def test_groupby_prod_with_int64_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\test_timegrouper.py
-----------------------------
> """
  test with the TimeGrouper / grouping with datetimes
def frame_for_truncated_bingrouper():
def groupby_with_truncated_bingrouper(frame_for_truncated_bingrouper):
class TestGroupBy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\groupby\__init__.py
-----------------------------
>     """
      Get required arguments for a groupby method.
  
      When parametrizing a test over groupby methods (e.g. "sum", "mean", "fillna"),
def get_groupby_method_args(name, obj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_constructors.py
-----------------------------
class TestIndexConstructor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_formats.py
-----------------------------
>                 """Index(['a', 'bb', 'ccc'], dtype='object')""",
              ),
              # multiple lines
              (
class TestIndexRendering:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_indexing.py
-----------------------------
class TestGetSliceBounds:
class TestGetIndexerNonUnique:
class TestGetLoc:
def test_getitem_boolean_ea_indexer():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_pickle.py
-----------------------------
def test_pickle_preserves_object_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_reshape.py
-----------------------------
> """
  Tests for ndarray-like method on the base Index class
class TestReshape:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_setops.py
-----------------------------
>     """
      Checks if the set of unique elements of arr1 and arr2 are equivalent.
def equal_contents(arr1, arr2) -> bool:
class TestIndexSetOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\test_where.py
-----------------------------
class TestWhere:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\base_class\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_append.py
-----------------------------
class TestAppend:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_astype.py
-----------------------------
class TestAstype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_category.py
-----------------------------
class TestCategoricalIndex:
class TestCategoricalIndex2:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_constructors.py
-----------------------------
class TestCategoricalIndexConstructors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_equals.py
-----------------------------
class TestEquals:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_fillna.py
-----------------------------
class TestFillNA:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_formats.py
-----------------------------
> """
  Tests for CategoricalIndex.__repr__ and related methods.
class TestCategoricalIndexRepr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_indexing.py
-----------------------------
class TestTake:
class TestGetLoc:
class TestGetIndexer:
class TestWhere:
class TestContains:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_map.py
-----------------------------
def test_map_str(data, categories, ordered):
def test_map():
def test_map_with_categorical_series():
def test_map_with_nan_ignore(data, f, expected):  # GH 24241
def test_map_with_nan_none(data, f, expected):  # GH 24241
def test_map_with_dict_or_series():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_reindex.py
-----------------------------
class TestReindex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\test_setops.py
-----------------------------
def test_difference_with_na(na_value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\categorical\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_drop_duplicates.py
-----------------------------
class DropDuplicates:
class TestDropDuplicatesPeriodIndex(DropDuplicates):
class TestDropDuplicatesDatetimeIndex(DropDuplicates):
class TestDropDuplicatesTimedeltaIndex(DropDuplicates):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_equals.py
-----------------------------
> """
  Tests shared for DatetimeIndex/TimedeltaIndex/PeriodIndex
class EqualsTests:
class TestPeriodIndexEquals(EqualsTests):
class TestDatetimeIndexEquals(EqualsTests):
class TestTimedeltaIndexEquals(EqualsTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_indexing.py
-----------------------------
def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_is_monotonic.py
-----------------------------
def test_is_monotonic_with_nat():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_nat.py
-----------------------------
class NATests:
class TestDatetimeIndexNA(NATests):
class TestTimedeltaIndexNA(NATests):
class TestPeriodIndexNA(NATests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_sort_values.py
-----------------------------
>     """
      Check the expected freq on a PeriodIndex/DatetimeIndex/TimedeltaIndex
      when the original index is generated (or generate-able) with
      period_range/date_range/timedelta_range.
def check_freq_ascending(ordered, orig, ascending):
def check_freq_nonmonotonic(ordered, orig):
class TestSortValues:
def test_order_stability_compat():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\test_value_counts.py
-----------------------------
class TestValueCounts:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimelike_\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_asof.py
-----------------------------
class TestAsOf:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_astype.py
-----------------------------
class TestDatetimeIndex:
class TestAstype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_delete.py
-----------------------------
class TestDelete:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_factorize.py
-----------------------------
class TestDatetimeIndexFactorize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_fillna.py
-----------------------------
class TestDatetimeIndexFillNA:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_insert.py
-----------------------------
class TestInsert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_isocalendar.py
-----------------------------
def test_isocalendar_returns_correct_values_close_to_new_year_with_tz():
def test_dti_timestamp_isocalendar_fields():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_map.py
-----------------------------
class TestMap:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_normalize.py
-----------------------------
class TestNormalize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_repeat.py
-----------------------------
class TestRepeat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_resolution.py
-----------------------------
def test_dti_resolution(request, tz_naive_fixture, freq, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_round.py
-----------------------------
class TestDatetimeIndexRound:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_shift.py
-----------------------------
class TestDatetimeIndexShift:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_snap.py
-----------------------------
def test_dti_snap(name, tz, unit):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_to_frame.py
-----------------------------
class TestToFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_to_julian_date.py
-----------------------------
class TestDateTimeIndexToJulianDate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_to_period.py
-----------------------------
class TestToPeriod:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_to_pydatetime.py
-----------------------------
class TestToPyDatetime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_to_series.py
-----------------------------
class TestToSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_tz_convert.py
-----------------------------
class TestTZConvert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_tz_localize.py
-----------------------------
class TestTZLocalize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\test_unique.py
-----------------------------
def test_unique(tz_naive_fixture):
def test_index_unique(rand_series_with_duplicate_datetimeindex):
def test_index_unique2():
def test_index_unique3():
def test_is_unique_monotonic(rand_series_with_duplicate_datetimeindex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_arithmetic.py
-----------------------------
class TestDatetimeIndexArithmetic:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_constructors.py
-----------------------------
>         """Test different DatetimeIndex constructions with timezone
          Follow-up of GH#4229
class TestDatetimeIndex:
class TestTimeSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_datetime.py
-----------------------------
class TestDatetimeIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_date_range.py
-----------------------------
> """
  test date_range, bdate_range construction from the convenience range functions
def _get_expected_range(
class TestTimestampEquivDateRange:
class TestDateRanges:
class TestDateRangeTZ:
class TestGenRangeGeneration:
class TestBusinessDateRange:
class TestCustomDateRange:
class TestDateRangeNonNano:
class TestDateRangeNonTickFreq:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_formats.py
-----------------------------
>         exp1 = """Series([], dtype: datetime64[ns])"""
  
          exp2 = "0   2011-01-01\ndtype: datetime64[ns]"
  
def unit(request):
def test_get_values_for_csv():
class TestDatetimeIndexRendering:
class TestFormat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_freq_attr.py
-----------------------------
class TestFreq:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_indexing.py
-----------------------------
class TestGetItem:
class TestWhere:
class TestTake:
class TestGetLoc:
class TestContains:
class TestGetIndexer:
class TestMaybeCastSliceBound:
class TestGetSliceBounds:
class TestIndexerBetweenTime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_iter.py
-----------------------------
class TestDatetimeIndexIteration:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_join.py
-----------------------------
class TestJoin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_npfuncs.py
-----------------------------
class TestSplit:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_ops.py
-----------------------------
class TestDatetimeIndexOps:
class TestBusinessDatetimeIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_partial_slicing.py
-----------------------------
> """ test partial slicing on Series/Frame """
  
  from datetime import datetime
  
class TestSlicing:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_pickle.py
-----------------------------
class TestPickle:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_reindex.py
-----------------------------
class TestDatetimeIndexReindex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_scalar_compat.py
-----------------------------
> """
  Tests for DatetimeIndex methods behaving like their Timestamp counterparts
class TestDatetimeIndexOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_setops.py
-----------------------------
class TestDatetimeIndexSetOps:
class TestBusinessDatetimeIndex:
class TestCustomDatetimeIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\test_timezones.py
-----------------------------
> """
  Tests for DatetimeIndex timezone-related methods
class FixedOffset(tzinfo):
class TestDatetimeIndexTimezones:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\datetimes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_astype.py
-----------------------------
>     """Tests common to IntervalIndex with any subtype"""
  
      def test_astype_idempotent(self, index):
          result = index.astype("interval")
class AstypeTests:
class TestIntSubtype(AstypeTests):
class TestFloatSubtype(AstypeTests):
class TestDatetimelikeSubtype(AstypeTests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_constructors.py
-----------------------------
>     """
      Common tests for all variations of IntervalIndex construction. Input data
      to be supplied in breaks format, then converted by the subclass method
      get_kwargs_from_breaks to the expected format.
def name(request):
class ConstructorTests:
class TestFromArrays(ConstructorTests):
class TestFromBreaks(ConstructorTests):
class TestFromTuples(ConstructorTests):
class TestClassConstructors(ConstructorTests):
def test_interval_index_subtype(timezone, inclusive_endpoints_fixture):
def test_dtype_closed_mismatch():
def test_ea_dtype(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_equals.py
-----------------------------
class TestEquals:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_formats.py
-----------------------------
class TestIntervalIndexRendering:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_indexing.py
-----------------------------
class TestGetItem:
class TestWhere:
class TestTake:
class TestGetLoc:
class TestGetIndexer:
class TestSliceLocs:
class TestPutmask:
class TestContains:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_interval.py
-----------------------------
>         """
          Interval specific tests for is_unique in addition to base class tests
def name(request):
class TestIntervalIndex:
def test_dir():
def test_searchsorted_different_argument_classes(listlike_box):
def test_searchsorted_invalid_argument(arg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_interval_range.py
-----------------------------
def name(request):
class TestIntervalRange:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_interval_tree.py
-----------------------------
>     """
      Skip parameters in a parametrize on 32bit systems. Specifically used
      here to skip leaf_size parameters related to GH 23440.
def skipif_32bit(param):
def dtype(request):
def leaf_size(request):
def tree(request, leaf_size):
class TestIntervalTree:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_join.py
-----------------------------
def range_index():
def interval_index():
def test_join_overlapping_in_mi_to_same_intervalindex(range_index, interval_index):
def test_join_overlapping_to_multiindex_with_same_interval(range_index, interval_index):
def test_join_overlapping_interval_to_another_intervalindex(interval_index):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_pickle.py
-----------------------------
class TestPickle:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\test_setops.py
-----------------------------
def monotonic_index(start, end, dtype="int64", closed="right"):
def empty_index(dtype="int64", closed="right"):
class TestIntervalIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\interval\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\conftest.py
-----------------------------
def idx():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_analytics.py
-----------------------------
def test_infer_objects(idx):
def test_shift(idx):
def test_groupby(idx):
def test_truncate_multiindex():
def test_reorder_levels(idx):
def test_numpy_repeat():
def test_append_mixed_dtypes():
def test_iter(idx):
def test_sub(idx):
def test_map(idx):
def test_map_dictlike(idx, mapper):
def test_numpy_ufuncs(idx, func):
def test_numpy_type_funcs(idx, func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_astype.py
-----------------------------
def test_astype(idx):
def test_astype_category(idx, ordered):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_compat.py
-----------------------------
def test_numeric_compat(idx):
def test_logical_compat(idx, method):
def test_inplace_mutation_resets_values():
def test_boxable_categorical_values():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_constructors.py
-----------------------------
def test_constructor_single_level():
def test_constructor_no_levels():
def test_constructor_nonhashable_names():
def test_constructor_mismatched_codes_levels(idx):
def test_na_levels():
def test_copy_in_constructor():
def test_from_arrays(idx):
def test_from_arrays_iterator(idx):
def test_from_arrays_tuples(idx):
def test_from_arrays_index_series_period_datetimetz_and_timedelta(idx1, idx2):
def test_from_arrays_index_datetimelike_mixed():
def test_from_arrays_index_series_categorical():
def test_from_arrays_empty():
def test_from_arrays_invalid_input(invalid_sequence_of_arrays):
def test_from_arrays_different_lengths(idx1, idx2):
def test_from_arrays_respects_none_names():
def test_from_tuples():
def test_from_tuples_iterator():
def test_from_tuples_empty():
def test_from_tuples_index_values(idx):
def test_tuples_with_name_string():
def test_from_tuples_with_tuple_label():
def test_from_product_empty_zero_levels():
def test_from_product_empty_one_level():
def test_from_product_empty_two_levels(first, second):
def test_from_product_empty_three_levels(N):
def test_from_product_invalid_input(invalid_input):
def test_from_product_datetimeindex():
def test_from_product_rangeindex():
def test_from_product_index_series_categorical(ordered, f):
def test_from_product():
def test_from_product_iterator():
def test_from_product_infer_names(a, b, expected_names):
def test_from_product_respects_none_names():
def test_from_product_readonly():
def test_create_index_existing_name(idx):
def test_from_frame():
def test_from_frame_missing_values_multiIndex():
def test_from_frame_error(non_frame):
def test_from_frame_dtype_fidelity():
def test_from_frame_valid_names(names_in, names_out):
def test_from_frame_invalid_names(names, expected_error_msg):
def test_index_equal_empty_iterable():
def test_raise_invalid_sortorder():
def test_datetimeindex():
def test_constructor_with_tz():
def test_multiindex_inference_consistency():
def test_dtype_representation(using_infer_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_conversion.py
-----------------------------
def test_to_numpy(idx):
def test_array_interface(idx):
def test_to_frame():
def test_to_frame_dtype_fidelity():
def test_to_frame_resulting_column_order():
def test_to_frame_duplicate_labels():
def test_to_flat_index(idx):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_copy.py
-----------------------------
def assert_multiindex_copied(copy, original):
def test_copy(idx):
def test_shallow_copy(idx):
def test_view(idx):
def test_copy_and_deepcopy(func):
def test_copy_method(deep):
def test_copy_method_kwargs(deep, kwarg, value):
def test_copy_deep_false_retains_id():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_drop.py
-----------------------------
def test_drop(idx):
def test_droplevel_with_names(idx):
def test_droplevel_list():
def test_drop_not_lexsorted():
def test_drop_with_nan_in_index(nulls_fixture):
def test_drop_with_non_monotonic_duplicates():
def test_single_level_drop_partially_missing_elements():
def test_droplevel_multiindex_one_level():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_duplicates.py
-----------------------------
def idx_dup():
def test_unique(names):
def test_unique_datetimelike():
def test_unique_level(idx, level):
def test_duplicate_multiindex_codes():
def test_duplicate_level_names(names):
def test_duplicate_meta_data():
def test_has_duplicates(idx, idx_dup):
def test_has_duplicates_from_tuples():
def test_has_duplicates_overflow(nlevels, with_nulls):
def test_duplicated(idx_dup, keep, expected):
def test_duplicated_hashtable_impl(keep, monkeypatch):
def test_duplicated_with_nan(val):
def test_duplicated_with_nan_multi_shape(n, m):
def test_duplicated_drop_duplicates():
def test_duplicated_series_complex_numbers(dtype):
def test_midx_unique_ea_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_equivalence.py
-----------------------------
def test_equals(idx):
def test_equals_op(idx):
def test_compare_tuple():
def test_compare_tuple_strs():
def test_equals_multi(idx):
def test_identical(idx):
def test_equals_operator(idx):
def test_equals_missing_values():
def test_equals_missing_values_differently_sorted():
def test_is_():
def test_is_all_dates(idx):
def test_is_numeric(idx):
def test_multiindex_compare():
def test_equals_ea_int_regular_int():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_formats.py
-----------------------------
>             expected = """\
  MultiIndex([('foo', 'one'),
              ('foo', 'two'),
              ('bar', 'one'),
def test_format(idx):
def test_format_integer_names():
def test_format_sparse_config(idx):
def test_format_sparse_display():
def test_repr_with_unicode_data():
def test_repr_roundtrip_raises():
def test_unicode_string_with_unicode():
def test_repr_max_seq_item_setting(idx):
class TestRepr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_get_level_values.py
-----------------------------
class TestGetLevelValues:
def test_get_level_values(idx):
def test_get_level_values_all_na():
def test_get_level_values_int_with_na():
def test_get_level_values_na():
def test_get_level_values_when_periods():
def test_values_loses_freq_of_underlying_index():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_get_set.py
-----------------------------
def assert_matching(actual, expected, check_dtype=False):
def test_get_level_number_integer(idx):
def test_get_dtypes(using_infer_string):
def test_get_dtypes_no_level_name(using_infer_string):
def test_get_dtypes_duplicate_level_names(using_infer_string):
def test_get_level_number_out_of_bounds(multiindex_dataframe_random_data):
def test_set_name_methods(idx):
def test_set_levels_codes_directly(idx):
def test_set_levels(idx):
def test_set_codes(idx):
def test_set_levels_codes_names_bad_input(idx):
def test_set_names_with_nlevel_1(inplace):
def test_set_levels_categorical(ordered):
def test_set_value_keeps_names():
def test_set_levels_with_iterable():
def test_set_empty_level():
def test_set_levels_pos_args_removal():
def test_set_levels_categorical_keep_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_indexing.py
-----------------------------
class TestSliceLocs:
class TestPutmask:
class TestGetIndexer:
def test_getitem(idx):
def test_getitem_group_select(idx):
def test_getitem_bool_index_all(ind1, ind2):
def test_getitem_bool_index_single(ind1, ind2):
class TestGetLoc:
class TestWhere:
class TestContains:
def test_timestamp_multiindex_indexer():
def test_get_slice_bound_with_missing_value(index_arr, expected, target, algo):
def test_slice_indexer_with_missing_value(index_arr, expected, start_idx, end_idx):
def test_pyint_engine():
def test_get_locs_reordering(keys, expected):
def test_get_indexer_for_multiindex_with_nans(nulls_fixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_integrity.py
-----------------------------
def test_labels_dtypes():
def test_values_boxed():
def test_values_multiindex_datetimeindex():
def test_values_multiindex_periodindex():
def test_consistency():
def test_hash_collisions(monkeypatch):
def test_dims():
def test_take_invalid_kwargs():
def test_isna_behavior(idx):
def test_large_multiindex_error(monkeypatch):
def test_mi_hashtable_populated_attribute_error(monkeypatch):
def test_can_hold_identifiers(idx):
def test_metadata_immutable(idx):
def test_level_setting_resets_attributes():
def test_rangeindex_fallback_coercion_bug():
def test_memory_usage(idx):
def test_nlevels(idx):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_isin.py
-----------------------------
def test_isin_nan():
def test_isin_missing(nulls_fixture):
def test_isin():
def test_isin_level_kwarg():
def test_isin_multi_index_with_missing_value(labels, expected, level):
def test_isin_empty():
def test_isin_generator():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_join.py
-----------------------------
def test_join_level(idx, other, join_type):
def test_join_level_corner_case(idx):
def test_join_self(idx, join_type):
def test_join_multi():
def test_join_multi_wrong_order():
def test_join_multi_return_indexers():
def test_join_overlapping_interval_level():
def test_join_midx_ea():
def test_join_midx_string():
def test_join_multi_with_nan():
def test_join_dtypes(any_numeric_ea_dtype, val):
def test_join_dtypes_all_nan(any_numeric_ea_dtype):
def test_join_index_levels():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_lexsort.py
-----------------------------
class TestIsLexsorted:
class TestLexsortDepth:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_missing.py
-----------------------------
def test_fillna(idx):
def test_dropna():
def test_nulls(idx):
def test_hasnans_isnans(idx):
def test_nan_stays_float():
def test_tuples_have_na():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_monotonic.py
-----------------------------
def test_is_monotonic_increasing_lexsorted(lexsorted_two_level_string_multiindex):
def test_is_monotonic_increasing():
def test_is_monotonic_decreasing():
def test_is_strictly_monotonic_increasing():
def test_is_strictly_monotonic_decreasing():
def test_is_monotonic_with_nans(values, attr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_names.py
-----------------------------
def check_level_names(index, names):
def test_slice_keep_name():
def test_index_name_retained():
def test_changing_names(idx):
def test_take_preserve_name(idx):
def test_copy_names():
def test_names(idx):
def test_duplicate_level_names_access_raises(idx):
def test_get_names_from_levels():
def test_setting_names_from_levels_raises():
def test_name_mi_with_dict_like_duplicate_names(func, rename_dict, exp_names):
def test_name_mi_with_dict_like(func, rename_dict, exp_names):
def test_index_name_with_dict_like_raising():
def test_multiindex_name_and_level_raising():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_partial_indexing.py
-----------------------------
def df():
def test_partial_string_matching_single_index(df):
def test_get_loc_partial_timestamp_multiindex(df):
def test_partial_string_timestamp_multiindex(df):
def test_partial_string_timestamp_multiindex_str_key_raises(df):
def test_partial_string_timestamp_multiindex_daily_resolution(df):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_pickle.py
-----------------------------
def test_pickle_compat_construction():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_reindex.py
-----------------------------
def test_reindex(idx):
def test_reindex_level(idx):
def test_reindex_preserves_names_when_target_is_list_or_ndarray(idx):
def test_reindex_lvl_preserves_names_when_target_is_list_or_array():
def test_reindex_lvl_preserves_type_if_target_is_empty_list_or_array(
def test_reindex_base(idx):
def test_reindex_non_unique():
def test_reindex_empty_with_level(values):
def test_reindex_not_all_tuples():
def test_reindex_limit_arg_with_multiindex():
def test_reindex_with_none_in_nested_multiindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_reshape.py
-----------------------------
def test_insert(idx):
def test_insert2():
def test_append(idx):
def test_append_index():
def test_append_names_match(name, exp):
def test_append_names_dont_match():
def test_append_overlapping_interval_levels():
def test_repeat():
def test_insert_base(idx):
def test_delete_base(idx):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_setops.py
-----------------------------
def test_set_ops_error_cases(idx, case, sort, method):
def test_intersection_base(idx, sort, klass):
def test_union_base(idx, sort, klass):
def test_difference_base(idx, sort):
def test_symmetric_difference(idx, sort):
def test_multiindex_symmetric_difference():
def test_empty(idx):
def test_difference(idx, sort):
def test_difference_sort_special():
def test_difference_sort_special_true():
def test_difference_sort_incomparable():
def test_difference_sort_incomparable_true():
def test_union(idx, sort):
def test_union_with_regular_index(idx, using_infer_string):
def test_intersection(idx, sort):
def test_setop_with_categorical(idx, sort, method):
def test_intersection_non_object(idx, sort):
def test_intersect_equal_sort():
def test_intersect_equal_sort_true():
def test_union_sort_other_empty(slice_):
def test_union_sort_other_empty_sort():
def test_union_sort_other_incomparable():
def test_union_sort_other_incomparable_sort():
def test_union_non_object_dtype_raises():
def test_union_empty_self_different_names():
def test_union_multiindex_empty_rangeindex():
def test_setops_sort_validation(method):
def test_difference_keep_ea_dtypes(any_numeric_ea_dtype, val):
def test_symmetric_difference_keeping_ea_dtype(any_numeric_ea_dtype, val):
def test_intersect_with_duplicates(tuples, exp_tuples):
def test_maybe_match_names(data, names, expected):
def test_intersection_equal_different_names():
def test_intersection_different_names():
def test_intersection_with_missing_values_on_both_sides(nulls_fixture):
def test_union_with_missing_values_on_both_sides(nulls_fixture):
def test_union_nan_got_duplicated(dtype, sort):
def test_union_keep_ea_dtype(any_numeric_ea_dtype, val):
def test_union_with_duplicates_keep_ea_dtype(dupe_val, any_numeric_ea_dtype):
def test_union_duplicates(index, request):
def test_union_keep_dtype_precision(any_real_numeric_dtype):
def test_union_keep_ea_dtype_with_na(any_numeric_ea_dtype):
def test_intersection_lexsort_depth(levels1, levels2, codes1, codes2, names):
def test_intersection_with_non_lex_sorted_categories(a, b):
def test_intersection_keep_ea_dtypes(val, any_numeric_ea_dtype):
def test_union_with_na_when_constructing_dataframe():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_sorting.py
-----------------------------
def test_sortlevel(idx):
def test_sortlevel_not_sort_remaining():
def test_sortlevel_deterministic():
def test_sortlevel_na_position():
def test_numpy_argsort(idx):
def test_unsortedindex():
def test_unsortedindex_doc_examples():
def test_reconstruct_sort():
def test_reconstruct_remove_unused():
def test_remove_unused_levels_large(first_type, second_type):
def test_remove_unused_nan(level0, level1):
def test_argsort(idx):
def test_remove_unused_levels_with_nan():
def test_sort_values_nan():
def test_sort_values_incomparable():
def test_sort_values_with_na_na_position(dtype, na_position):
def test_sort_unnecessary_warning():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\test_take.py
-----------------------------
def test_take(idx):
def test_take_invalid_kwargs(idx):
def test_take_fill_value():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\multi\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\numeric\test_astype.py
-----------------------------
class TestAstype:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\numeric\test_indexing.py
-----------------------------
def index_large():
class TestGetLoc:
class TestGetIndexer:
class TestWhere:
class TestTake:
class TestContains:
class TestSliceLocs:
class TestGetSliceBounds:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\numeric\test_join.py
-----------------------------
class TestJoinInt64Index:
class TestJoinUInt64Index:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\numeric\test_numeric.py
-----------------------------
class TestFloatNumericIndex:
class TestNumericInt:
class TestIntNumericIndex:
class TestFloat16Index:
def test_uint_index_does_not_convert_to_float64(box):
def test_float64_index_equals():
def test_map_dtype_inference_unsigned_to_signed():
def test_map_dtype_inference_overflows():
def test_view_to_datetimelike():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\numeric\test_setops.py
-----------------------------
def index_large():
class TestSetOps:
class TestSetOpsSort:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\numeric\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\object\test_astype.py
-----------------------------
def test_astype_invalid_nas_to_tdt64_raises():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\object\test_indexing.py
-----------------------------
class TestGetIndexer:
class TestGetIndexerNonUnique:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\object\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_asfreq.py
-----------------------------
class TestPeriodIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_astype.py
-----------------------------
class TestPeriodIndexAsType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_factorize.py
-----------------------------
class TestFactorize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_fillna.py
-----------------------------
class TestFillNA:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_insert.py
-----------------------------
class TestInsert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_is_full.py
-----------------------------
def test_is_full():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_repeat.py
-----------------------------
class TestRepeat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_shift.py
-----------------------------
class TestPeriodIndexShift:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\test_to_timestamp.py
-----------------------------
class TestToTimestamp:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_constructors.py
-----------------------------
class TestPeriodIndexDisallowedFreqs:
class TestPeriodIndex:
class TestSimpleNew:
class TestShallowCopy:
class TestSeriesPeriod:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_formats.py
-----------------------------
>     """Return the AM and PM strings returned by strftime in current locale."""
      am_local = time(1).strftime("%p")
      pm_local = time(13).strftime("%p")
      return am_local, pm_local
def get_local_am_pm():
def test_get_values_for_csv():
class TestPeriodIndexRendering:
class TestPeriodIndexFormat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_freq_attr.py
-----------------------------
class TestFreq:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_indexing.py
-----------------------------
def non_comparable_idx(request):
class TestGetItem:
class TestGetLoc:
class TestGetIndexer:
class TestWhere:
class TestTake:
class TestGetValue:
class TestContains:
class TestAsOfLocs:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_join.py
-----------------------------
class TestJoin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_monotonic.py
-----------------------------
def test_is_monotonic_increasing():
def test_is_monotonic_decreasing():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_partial_slicing.py
-----------------------------
class TestPeriodIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_period.py
-----------------------------
class TestPeriodIndex:
def test_maybe_convert_timedelta():
def test_dunder_array(array):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_period_range.py
-----------------------------
class TestPeriodRangeKeywords:
class TestPeriodRange:
class TestPeriodRangeDisallowedFreqs:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_pickle.py
-----------------------------
class TestPickle:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_resolution.py
-----------------------------
class TestResolution:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_scalar_compat.py
-----------------------------
> """Tests for PeriodIndex behaving like a vectorized Period scalar"""
  
  import pytest
  
class TestPeriodIndexOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_searchsorted.py
-----------------------------
class TestSearchsorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_setops.py
-----------------------------
def _permute(obj):
class TestPeriodIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\test_tools.py
-----------------------------
>     """
      Wish to match NumPy units
class TestPeriodRepresentation:
class TestPeriodIndexConversion:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\period\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\ranges\test_constructors.py
-----------------------------
class TestRangeIndexConstructors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\ranges\test_indexing.py
-----------------------------
class TestGetIndexer:
class TestTake:
class TestWhere:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\ranges\test_join.py
-----------------------------
class TestJoin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\ranges\test_range.py
-----------------------------
class TestRangeIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\ranges\test_setops.py
-----------------------------
>     """
      Check that we either have a RangeIndex or that this index *cannot*
      be represented as a RangeIndex.
class TestRangeIndexSetOps:
def assert_range_or_not_is_rangelike(index):
def test_range_difference(start1, stop1, step1, start2, stop2, step2):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\ranges\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\string\test_astype.py
-----------------------------
def test_astype_str_from_bytes():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\string\test_indexing.py
-----------------------------
def _isnan(val):
def _equivalent_na(dtype, null):
class TestGetLoc:
class TestGetIndexer:
class TestGetIndexerNonUnique:
class TestSliceLocs:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\string\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\test_astype.py
-----------------------------
class TestTimedeltaIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\test_factorize.py
-----------------------------
class TestTimedeltaIndexFactorize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\test_fillna.py
-----------------------------
class TestFillNA:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\test_insert.py
-----------------------------
class TestTimedeltaIndexInsert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\test_repeat.py
-----------------------------
class TestRepeat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\test_shift.py
-----------------------------
class TestTimedeltaIndexShift:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_arithmetic.py
-----------------------------
class TestTimedeltaIndexArithmetic:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_constructors.py
-----------------------------
class TestTimedeltaIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_delete.py
-----------------------------
class TestTimedeltaIndexDelete:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_formats.py
-----------------------------
>         exp1 = """Series([], dtype: timedelta64[ns])"""
  
          exp2 = "0   1 days\ndtype: timedelta64[ns]"
  
class TestTimedeltaIndexRendering:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_freq_attr.py
-----------------------------
class TestFreq:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_indexing.py
-----------------------------
class TestGetItem:
class TestGetLoc:
class TestGetIndexer:
class TestWhere:
class TestTake:
class TestMaybeCastSliceBound:
class TestContains:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_join.py
-----------------------------
class TestJoin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_ops.py
-----------------------------
class TestTimedeltaIndexOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_pickle.py
-----------------------------
class TestPickle:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_scalar_compat.py
-----------------------------
> """
  Tests for TimedeltaIndex methods behaving like their Timedelta counterparts
class TestVectorizedTimedelta:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_searchsorted.py
-----------------------------
class TestSearchSorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_setops.py
-----------------------------
class TestTimedeltaIndex:
class TestTimedeltaIndexDifference:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_timedelta.py
-----------------------------
class TestTimedeltaIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\test_timedelta_range.py
-----------------------------
class TestTimedeltas:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\timedeltas\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\conftest.py
-----------------------------
>     """
      Valid values for the 'sort' parameter used in the Index
      setops methods (intersection, union, etc.)
  
def sort(request):
def freq_sample(request):
def listlike_box(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_any_index.py
-----------------------------
> """
  Tests that can be parametrized over _any_ Index object.
def test_boolean_context_compat(index):
def test_sort(index):
def test_hash_error(index):
def test_mutability(index):
def test_map_identity_mapping(index, request):
def test_wrong_number_names(index):
def test_view_preserves_name(index):
def test_ravel(index):
class TestConversion:
class TestRoundTrips:
class TestIndexing:
class TestRendering:
class TestReductions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_base.py
-----------------------------
class TestIndex:
class TestMixedIntIndex:
class TestIndexUtils:
def test_generated_op_names(opname, index):
def test_index_subclass_constructor_wrong_kwargs(klass):
def test_deprecated_fastpath():
def test_shape_of_invalid_index():
def test_validate_1d_input(dtype):
def test_construct_from_memoryview(klass, extra_kwargs):
def test_nan_comparison_same_object(op):
def test_is_monotonic_pyarrow_list_type():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_common.py
-----------------------------
> """
  Collection of tests asserting things that should be true for
  any index subclass except for MultiIndex. Makes use of the `index_flat`
  fixture defined in pandas/conftest.py.
class TestCommon:
def test_sort_values_invalid_na_position(index_with_missing, na_position):
def test_sort_values_with_missing(index_with_missing, na_position, request):
def test_ndarray_compat_properties(index):
def test_compare_read_only_array():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_datetimelike.py
-----------------------------
> """ generic datetimelike tests """
  
  import numpy as np
  import pytest
class TestDatetimeLike:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_engines.py
-----------------------------
def numeric_indexing_engine_type_and_dtype(request):
class TestDatetimeEngine:
class TestTimedeltaEngine:
class TestNumericEngine:
class TestObjectEngine:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_frozen.py
-----------------------------
def lst():
def container(lst):
def unicode_container():
class TestFrozenList:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_indexing.py
-----------------------------
> """
  test_indexing tests the following Index methods:
      __getitem__
      get_loc
class TestTake:
class TestContains:
class TestGetLoc:
class TestGetIndexer:
class TestConvertSliceIndexer:
class TestPutmask:
def test_getitem_deprecated_float(idx):
def test_get_indexer_non_unique_multiple_nans(idx, target, expected):
def test_get_indexer_non_unique_nans_in_object_dtype_target(nulls_fixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_index_new.py
-----------------------------
> """
  Tests for the Index constructor conducting inference.
class TestIndexConstructorInference:
class TestDtypeEnforced:
class TestIndexConstructorUnwrapping:
class TestIndexConstructionErrors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_numpy_compat.py
-----------------------------
def test_numpy_ufuncs_out(index):
def test_numpy_ufuncs_basic(index, func):
def test_numpy_ufuncs_other(index, func):
def test_numpy_ufuncs_reductions(index, func, request):
def test_numpy_ufuncs_bitwise(func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_old_base.py
-----------------------------
class TestBase:
class TestNumericBase:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_setops.py
-----------------------------
> """
  The tests in this package are to ensure the proper resultant dtypes of
  set operations.
def equal_contents(arr1, arr2) -> bool:
def any_dtype_for_small_pos_integer_indexes(request):
def test_union_same_types(index):
def test_union_different_types(index_flat, index_flat2, request, using_infer_string):
def test_compatible_inconsistent_pairs(idx1, idx2):
def test_union_dtypes(left, right, expected, names):
def test_intersection_duplicates(values):
class TestSetOps:
def test_setop_with_categorical(index_flat, sort, method, using_infer_string):
def test_intersection_duplicates_all_indexes(index):
def test_union_duplicate_index_subsets_of_each_other(
def test_union_with_duplicate_index_and_non_monotonic(
def test_union_duplicate_index_different_dtypes():
def test_union_same_value_duplicated_in_both():
def test_union_nan_in_both(dup):
def test_union_rangeindex_sort_true():
def test_union_with_duplicate_index_not_subset_and_non_monotonic(
def test_union_int_categorical_with_nan():
class TestSetOpsUnsorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\test_subclass.py
-----------------------------
> """
  Tests involving custom Index subclasses
class CustomIndex(Index):
def test_insert_fallback_to_base_index():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\interval\test_interval.py
-----------------------------
class TestIntervalIndex:
class TestIntervalIndexInsideMultiIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\interval\test_interval_new.py
-----------------------------
class TestIntervalIndex:
def test_repeating_interval_index_with_infs(intervals):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\interval\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_chaining_and_caching.py
-----------------------------
def test_detect_chained_assignment(using_copy_on_write, warn_copy_on_write):
def test_cache_updating(using_copy_on_write, warn_copy_on_write):
def test_indexer_caching(monkeypatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_datetime.py
-----------------------------
def test_multiindex_period_datetime():
def test_multiindex_datetime_columns():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_getitem.py
-----------------------------
>     """Fixture for DataFrame used in tests for gh-4145 and gh-4146"""
      data = [["a", "d", "e", "c", "f", "b"], [1, 4, 5, 3, 6, 2], [1, 4, 5, 3, 6, 2]]
      index = ["h1", "h3", "h5"]
      columns = MultiIndex(
def test_series_getitem_multiindex(access_method, level1_value, expected):
def test_series_getitem_duplicates_multiindex(level0_value):
def test_series_getitem(multiindex_year_month_day_dataframe_random_data, indexer_sl):
def test_series_getitem_returns_scalar(
def test_series_getitem_indexing_errors(
def test_series_getitem_corner_generator(
def test_getitem_simple(multiindex_dataframe_random_data):
def test_frame_getitem_simple_key_error(
def test_tuple_string_column_names():
def test_frame_getitem_multicolumn_empty_level():
def test_frame_getitem_toplevel(
def test_frame_mixed_depth_get():
def test_frame_getitem_nan_multiindex(nulls_fixture):
def test_frame_getitem_nan_cols_multiindex(
def dataframe_with_duplicate_index():
def test_frame_mi_access(dataframe_with_duplicate_index, indexer):
def test_frame_mi_access_returns_series(dataframe_with_duplicate_index):
def test_frame_mi_access_returns_frame(dataframe_with_duplicate_index):
def test_frame_mi_empty_slice():
def test_loc_empty_multiindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_iloc.py
-----------------------------
>     """
      Factory function to create simple 3 x 3 dataframe with
      both columns and row MultiIndex using supplied data or
      random data by default.
def simple_multiindex_dataframe():
def test_iloc_returns_series(indexer, expected, simple_multiindex_dataframe):
def test_iloc_returns_dataframe(simple_multiindex_dataframe):
def test_iloc_returns_scalar(simple_multiindex_dataframe):
def test_iloc_getitem_multiple_items():
def test_iloc_getitem_labels():
def test_frame_getitem_slice(multiindex_dataframe_random_data):
def test_frame_setitem_slice(multiindex_dataframe_random_data):
def test_indexing_ambiguity_bug_1678():
def test_iloc_integer_locations():
def test_iloc_setitem_int_multiindex_series(data, indexes, values, expected_k):
def test_getitem_iloc(multiindex_dataframe_random_data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_indexing_slow.py
-----------------------------
def m():
def n():
def cols():
def vals(n):
def keys(n, m, vals):
def df(vals, cols):
def a(df):
def b(df, cols):
def test_multiindex_get_loc(request, lexsort_depth, keys, frame_fixture, cols):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_loc.py
-----------------------------
>     """single level MultiIndex"""
      return MultiIndex(
          levels=[["foo", "bar", "baz", "qux"]], codes=[[0, 1, 2, 3]], names=["first"]
      )
def single_level_multiindex():
def frame_random_data_integer_multi_index():
class TestMultiIndexLoc:
def test_loc_getitem_duplicates_multiindex_missing_indexers(indexer, pos):
def test_loc_getitem_duplicates_multiindex_empty_indexer(columns_indexer):
def test_loc_getitem_duplicates_multiindex_non_scalar_type_object():
def test_loc_getitem_tuple_plus_slice():
def test_loc_getitem_int(frame_random_data_integer_multi_index):
def test_loc_getitem_int_raises_exception(frame_random_data_integer_multi_index):
def test_loc_getitem_lowerdim_corner(multiindex_dataframe_random_data):
def test_loc_setitem_single_column_slice():
def test_loc_nan_multiindex(using_infer_string):
def test_loc_period_string_indexing():
def test_loc_datetime_mask_slicing():
def test_loc_datetime_series_tuple_slicing():
def test_loc_with_mi_indexer():
def test_loc_mi_with_level1_named_0():
def test_getitem_str_slice():
def test_3levels_leading_period_index():
class TestKeyErrorsWithMultiIndex:
def test_getitem_loc_commutability(multiindex_year_month_day_dataframe_random_data):
def test_loc_with_nan():
def test_getitem_non_found_tuple():
def test_get_loc_datetime_index():
def test_loc_setitem_indexer_differently_ordered():
def test_loc_getitem_index_differently_ordered_slice_none():
def test_loc_getitem_index_differently_ordered_slice_none_duplicates(indexer):
def test_loc_getitem_drops_levels_for_one_row_dataframe():
def test_mi_columns_loc_list_label_order():
def test_mi_partial_indexing_list_raises():
def test_mi_indexing_list_nonexistent_raises():
def test_mi_add_cell_missing_row_non_unique():
def test_loc_get_scalar_casting_to_float():
def test_loc_empty_single_selector_with_names():
def test_loc_keyerror_rightmost_key_missing():
def test_multindex_series_loc_with_tuple_label():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_multiindex.py
-----------------------------
class TestMultiIndexBasic:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_partial.py
-----------------------------
class TestMultiIndexPartial:
def test_loc_getitem_partial_both_axis():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_setitem.py
-----------------------------
def assert_equal(a, b):
class TestMultiIndexSetItem:
class TestSetitemWithExpansionMultiIndex:
def test_frame_setitem_view_direct(
def test_frame_setitem_copy_raises(
def test_frame_setitem_copy_no_write(
def test_frame_setitem_partial_multiindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_slice.py
-----------------------------
class TestMultiIndexSlicers:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\test_sorted.py
-----------------------------
class TestMultiIndexSorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\multiindex\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\common.py
-----------------------------
> """ common utilities """
  from __future__ import annotations
  
  from typing import (
def _mklbl(prefix: str, n: int):
def check_indexing_smoketest_or_raises(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\conftest.py
-----------------------------
def series_ints():
def frame_ints():
def series_uints():
def frame_uints():
def series_labels():
def frame_labels():
def series_ts():
def frame_ts():
def series_floats():
def frame_floats():
def series_mixed():
def frame_mixed():
def frame_empty():
def series_empty():
def frame_multi():
def series_multi():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_at.py
-----------------------------
def test_at_timezone():
def test_selection_methods_of_assigned_col():
class TestAtSetItem:
class TestAtSetItemWithExpansion:
class TestAtWithDuplicates:
class TestAtErrors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_categorical.py
-----------------------------
def df():
def df2():
class TestCategoricalIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_chaining_and_caching.py
-----------------------------
def random_text(nobs=100):
class TestCaching:
class TestChaining:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_check_indexer.py
-----------------------------
def test_valid_input(indexer, expected):
def test_boolean_na_returns_indexer(indexer):
def test_bool_raise_length(indexer):
def test_int_raise_missing_values(indexer):
def test_raise_invalid_array_dtypes(indexer):
def test_raise_nullable_string_dtype(nullable_string_dtype):
def test_pass_through_non_array_likes(indexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_coercion.py
-----------------------------
>         """test index's coercion triggered by assign key"""
          temp = original_series.copy()
          # GH#33469 pre-2.0 with int loc_key and temp.index.dtype == np.float64
          #  `temp[loc_key] = 5` treated loc_key as positional
def check_comprehensiveness(request):
class CoercionBase:
class TestSetitemCoercion(CoercionBase):
class TestInsertIndexCoercion(CoercionBase):
class TestWhereCoercion(CoercionBase):
class TestFillnaSeriesCoercion(CoercionBase):
class TestReplaceSeriesCoercion(CoercionBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_datetime.py
-----------------------------
class TestDatetimeIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_floats.py
-----------------------------
>         """
          comparator for results
          we need to take care if we are indexing on a
          Series or a frame
def gen_obj(klass, index):
class TestFloatIndexers:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_iat.py
-----------------------------
def test_iat(float_frame):
def test_iat_duplicate_columns():
def test_iat_getitem_series_with_period_index():
def test_iat_setitem_item_cache_cleared(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_iloc.py
-----------------------------
> """ test positional based indexing with iloc """
  
  from datetime import datetime
  import re
class TestiLoc:
class TestiLocBaseIndependent:
class TestILocErrors:
class TestILocSetItemDuplicateColumns:
class TestILocCallable:
class TestILocSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_indexers.py
-----------------------------
def test_length_of_indexer():
def test_is_scalar_indexer():
class TestValidateIndices:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_indexing.py
-----------------------------
> """ test fancy indexing & misc """
  
  import array
  from datetime import datetime
class TestFancy:
class TestMisc:
class TestDataframeNoneCoercion:
class TestDatetimelikeCoercion:
def test_extension_array_cross_section():
def test_extension_array_cross_section_converts():
def test_ser_tup_indexer_exceeds_dimensions(ser, keys, indexer_li):
def test_ser_list_indexer_exceeds_dimensions(indexer_li):
def test_scalar_setitem_with_nested_value(value):
def test_scalar_setitem_series_with_nested_value(value, indexer_sli):
def test_scalar_setitem_with_nested_value_length1(value):
def test_scalar_setitem_series_with_nested_value_length1(value, indexer_sli):
def test_object_dtype_series_set_series_element():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_loc.py
-----------------------------
> """ test label based indexing with loc """
  from collections import namedtuple
  import contextlib
  from datetime import (
def test_not_change_nan_loc(series, new_series, expected_ser):
class TestLoc:
class TestLocBaseIndependent:
class TestLocWithEllipsis:
class TestLocWithMultiIndex:
class TestLocSetitemWithExpansion:
class TestLocCallable:
class TestPartialStringSlicing:
class TestLabelSlicing:
class TestLocBooleanLabelsAndSlices:
class TestLocBooleanMask:
class TestLocListlike:
def test_loc_getitem_label_list_integer_labels(columns, column_key, expected_columns):
def test_loc_setitem_float_intindex():
def test_loc_axis_1_slice():
def test_loc_set_dataframe_multiindex():
def test_loc_mixed_int_float():
def test_loc_with_positional_slice_raises():
def test_loc_slice_disallows_positional():
def test_loc_datetimelike_mismatched_dtypes():
def test_loc_with_period_index_indexer():
def test_loc_setitem_multiindex_timestamp():
def test_loc_getitem_multiindex_tuple_level():
def test_loc_getitem_nullable_index_with_duplicates():
def test_loc_setitem_uint8_upcast(value):
def test_loc_setitem_using_datetimelike_str_as_index(fill_val, exp_dtype):
def test_loc_set_int_dtype():
def test_loc_periodindex_3_levels():
def test_loc_setitem_pyarrow_strings():
class TestLocSeries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_na_indexing.py
-----------------------------
def test_series_mask_boolean(values, dtype, mask, indexer_class, frame):
def test_na_treated_as_false(frame_or_series, indexer_sli):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_partial.py
-----------------------------
> """
  test setting *parts* of objects both positionally and label based
  
  TODO: these should be split among the indexer tests
class TestEmptyFrameSetitemExpansion:
class TestPartialSetting:
class TestStringSlicing:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\test_scalar.py
-----------------------------
> """ test scalar indexing, including at and iat """
  from datetime import (
      datetime,
      timedelta,
def generate_indices(f, values=False):
class TestScalar:
class TestAtAndiAT:
def test_iat_dont_wrap_object_datetimelike():
def test_at_with_tuple_index_get():
def test_at_with_tuple_index_set():
class TestMultiIndexScalar:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\indexing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\interchange\test_impl.py
-----------------------------
def data_categorical():
def string_data():
def test_categorical_dtype(data, data_categorical):
def test_categorical_pyarrow():
def test_empty_categorical_pyarrow():
def test_large_string_pyarrow():
def test_bitmasks_pyarrow(offset, length, expected_values):
def test_dataframe(data):
def test_missing_from_masked():
def test_mixed_data(data):
def test_mixed_missing():
def test_string(string_data):
def test_nonstring_object():
def test_datetime():
def test_categorical_to_numpy_dlpack():
def test_empty_pyarrow(data):
def test_multi_chunk_pyarrow() -> None:
def test_multi_chunk_column() -> None:
def test_timestamp_ns_pyarrow():
def test_datetimetzdtype(tz, unit):
def test_interchange_from_non_pandas_tz_aware(request):
def test_interchange_from_corrected_buffer_dtypes(monkeypatch) -> None:
def test_empty_string_column():
def test_large_string():
def test_non_str_names():
def test_non_str_names_w_duplicates():
def test_pandas_nullable_with_missing_values(
def test_pandas_nullable_without_missing_values(
def test_string_validity_buffer() -> None:
def test_string_validity_buffer_no_missing() -> None:
def test_empty_dataframe():
def test_from_dataframe_list_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\interchange\test_spec_conformance.py
-----------------------------
> """
  A verbatim copy (vendored) of the spec tests.
  Taken from https://github.com/data-apis/dataframe-api
def df_from_dict():
def test_only_one_dtype(test_data, df_from_dict):
def test_mixed_dtypes(df_from_dict):
def test_na_float(df_from_dict):
def test_noncategorical(df_from_dict):
def test_categorical(df_from_dict):
def test_dataframe(df_from_dict):
def test_df_get_chunks(size, n_chunks, df_from_dict):
def test_column_get_chunks(size, n_chunks, df_from_dict):
def test_get_columns(df_from_dict):
def test_buffer(df_from_dict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\interchange\test_utils.py
-----------------------------
>     """Test ``dtype_to_arrow_c_fmt`` utility function."""
      assert dtype_to_arrow_c_fmt(pandas_dtype) == c_string
  
  
def test_dtype_to_arrow_c_fmt(pandas_dtype, c_string):  # PR01
def test_dtype_to_arrow_c_fmt_arrowdtype(pa_dtype, args_kwargs, c_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\interchange\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\internals\test_api.py
-----------------------------
> """
  Tests for the pseudo-public API implemented in internals/api.py and exposed
  in core.internals
def test_internals_api():
def test_namespace():
def test_deprecations(name):
def test_make_block_2d_with_dti():
def test_create_block_manager_from_blocks_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\internals\test_internals.py
-----------------------------
>     """
      Fixture to test both the internal new_block and pseudo-public make_block.
def block_maker(request):
def mgr():
def assert_block_equal(left, right):
def get_numeric_mat(shape):
def create_block(typestr, placement, item_shape=None, num_offset=0, maker=new_block):
def create_single_mgr(typestr, num_rows=None):
def create_mgr(descr, item_shape=None):
def fblock():
class TestBlock:
class TestBlockManager:
def _as_array(mgr):
class TestIndexing:
class TestBlockPlacement:
class TestCanHoldElement:
class TestShouldStore:
def test_validate_ndim():
def test_block_shape():
def test_make_block_no_pandas_array(block_maker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\internals\test_managers.py
-----------------------------
> """
  Testing interaction between the different managers (BlockManager, ArrayManager)
def test_dataframe_creation():
def test_series_creation():
def test_array_manager_depr_env_var(manager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\internals\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_odf.py
-----------------------------
def cd_and_set_engine(monkeypatch, datapath):
def test_read_invalid_types_raises():
def test_read_writer_table():
def test_read_newlines_between_xml_elements_table():
def test_read_unempty_cells():
def test_read_cell_annotation():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_odswriter.py
-----------------------------
def ext():
def test_write_append_mode_raises(ext):
def test_engine_kwargs(ext, engine_kwargs):
def test_book_and_sheets_consistent(ext):
def test_cell_value_type(ext, value, cell_value_type, cell_value_attribute, cell_value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_openpyxl.py
-----------------------------
def ext():
def test_to_excel_styleconverter():
def test_write_cells_merge_styled(ext):
def test_engine_kwargs_write(ext, iso_dates):
def test_engine_kwargs_append_invalid(ext):
def test_engine_kwargs_append_data_only(ext, data_only, expected):
def test_engine_kwargs_append_reader(datapath, ext, kwarg_name, kwarg_value):
def test_write_append_mode(ext, mode, expected):
def test_if_sheet_exists_append_modes(ext, if_sheet_exists, num_sheets, expected):
def test_append_overlay_startrow_startcol(ext, startrow, startcol, greeting, goodbye):
def test_if_sheet_exists_raises(ext, if_sheet_exists, msg):
def test_to_excel_with_openpyxl_engine(ext):
def test_read_workbook(datapath, ext, read_only):
def test_read_with_bad_dimension(
def test_append_mode_file(ext):
def test_read_with_empty_trailing_rows(datapath, ext, read_only):
def test_read_empty_with_blank_row(datapath, ext, read_only):
def test_book_and_sheets_consistent(ext):
def test_ints_spelled_with_decimals(datapath, ext):
def test_read_multiindex_header_no_index_names(datapath, ext):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_readers.py
-----------------------------
>     """
      Filter out invalid (engine, ext) pairs instead of skipping, as that
      produces 500+ pytest.skips.
def _is_valid_engine_ext_pair(engine, read_ext: str) -> bool:
def _transfer_marks(engine, read_ext):
def engine_and_read_ext(request):
def engine(engine_and_read_ext):
def read_ext(engine_and_read_ext):
def df_ref(datapath):
def get_exp_unit(read_ext: str, engine: str | None) -> str:
def adjust_expected(expected: DataFrame, read_ext: str, engine: str) -> None:
def xfail_datetimes_with_pyxlsb(engine, request):
class TestReaders:
class TestExcelFileRead:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_style.py
-----------------------------
def assert_equal_cell_styles(cell1, cell2):
def test_styler_to_excel_unstyled(engine):
def test_styler_to_excel_basic(engine, css, attrs, expected):
def test_styler_to_excel_basic_indexes(engine, css, attrs, expected):
def test_styler_to_excel_border_style(engine, border_style):
def test_styler_custom_converter():
def test_styler_to_s3(s3_public_bucket, s3so):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_writers.py
-----------------------------
>     """
      Returns the first ten items in fixture "float_frame".
def get_exp_unit(path: str) -> str:
def frame(float_frame):
def merge_cells(request):
def path(ext):
def set_engine(engine, ext):
class TestRoundTrip:
class TestExcelWriter:
class TestExcelWriterEngineTests:
class TestFSPath:
def test_subclass_attr(klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_xlrd.py
-----------------------------
>     """
      Valid extensions for reading Excel files with xlrd.
  
      Similar to read_ext, but excludes .ods, .xlsb, and for xlrd>2 .xlsx, .xlsm
def read_ext_xlrd(request):
def test_read_xlrd_book(read_ext_xlrd, datapath):
def test_read_xlsx_fails(datapath):
def test_nan_in_xls(datapath):
def test_read_old_xls_files(file_header):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\test_xlsxwriter.py
-----------------------------
def ext():
def test_column_format(ext):
def test_write_append_mode_raises(ext):
def test_engine_kwargs(ext, nan_inf_to_errors):
def test_book_and_sheets_consistent(ext):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\excel\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_bar.py
-----------------------------
>     """Used in multiple tests to simplify formatting of expected result"""
      ret = [("width", "10em")]
      if all(x is None for x in [a, b, c, d]):
          return ret
def bar_grad(a=None, b=None, c=None, d=None):
def no_bar():
def bar_to(x, color="#d65f5f"):
def bar_from_to(x, y, color="#d65f5f"):
def df_pos():
def df_neg():
def df_mix():
def test_align_positive_cases(df_pos, align, exp):
def test_align_negative_cases(df_neg, align, exp):
def test_align_mixed_cases(df_mix, align, exp, nans):
def test_align_axis(align, exp, axis):
def test_vmin_vmax_clipping(df_pos, df_neg, df_mix, values, vmin, vmax, nullify, align):
def test_vmin_vmax_widening(df_pos, df_neg, df_mix, values, vmin, vmax, nullify, align):
def test_numerics():
def test_colors_mixed(align, exp):
def test_bar_align_height():
def test_bar_value_error_raises():
def test_bar_color_and_cmap_error_raises():
def test_bar_invalid_color_type_error_raises():
def test_styler_bar_with_NA_values():
def test_style_bar_with_pyarrow_NA_values():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_exceptions.py
-----------------------------
def df():
def styler(df):
def test_concat_bad_columns(styler):
def test_concat_bad_type(styler):
def test_concat_bad_index_levels(styler, df):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_format.py
-----------------------------
def df():
def styler(df):
def df_multi():
def styler_multi(df_multi):
def test_display_format(styler):
def test_display_format_index(styler, index, columns):
def test_format_dict(styler):
def test_format_index_dict(styler):
def test_format_string(styler):
def test_format_callable(styler):
def test_format_with_na_rep():
def test_format_index_with_na_rep():
def test_format_non_numeric_na():
def test_format_clear(styler, func, attr, kwargs):
def test_format_escape_html(escape, exp):
def test_format_escape_latex_math(chars, expected):
def test_format_escape_na_rep():
def test_format_escape_floats(styler):
def test_format_raises(styler, formatter, func):
def test_format_with_precision(precision, expected):
def test_format_index_level(axis, level, expected):
def test_format_subset():
def test_format_thousands(formatter, decimal, precision, func, col):
def test_format_decimal(formatter, thousands, precision, func, col):
def test_str_escape_error():
def test_long_int_formatting():
def test_format_options():
def test_precision_zero(df):
def test_formatter_options_validator(formatter, exp):
def test_formatter_options_raises():
def test_1level_multiindex():
def test_boolean_format():
def test_relabel_raise_length(styler_multi, hide, labels):
def test_relabel_index(styler_multi):
def test_relabel_columns(styler_multi):
def test_relabel_roundtrip(styler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_highlight.py
-----------------------------
def df(request):
def styler(df):
def test_highlight_null(styler):
def test_highlight_null_subset(styler):
def test_highlight_minmax_basic(df, f):
def test_highlight_minmax_ext(df, f, kwargs):
def test_highlight_minmax_nulls(f, axis):
def test_highlight_between(styler, kwargs):
def test_highlight_between_raises(arg, styler, map, axis):
def test_highlight_between_raises2(styler):
def test_highlight_between_inclusive(styler, inclusive, expected):
def test_highlight_quantile(styler, kwargs):
def test_all_highlight_dtypes(f, kwargs, df):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_html.py
-----------------------------
>         """\
          <!DOCTYPE html>
          <html>
          <head>
def env():
def styler():
def styler_mi():
def tpl_style(env):
def tpl_table(env):
def test_html_template_extends_options():
def test_exclude_styles(styler):
def test_w3_html_format(styler):
def test_colspan_w3():
def test_rowspan_w3():
def test_styles(styler):
def test_doctype(styler):
def test_doctype_encoding(styler):
def test_bold_headers_arg(styler):
def test_caption_arg(styler):
def test_block_names(tpl_style, tpl_table):
def test_from_custom_template_table(tmpdir):
def test_from_custom_template_style(tmpdir):
def test_caption_as_sequence(styler):
def test_sticky_basic(styler, index, columns, index_name):
def test_sticky_mi(styler_mi, index, columns):
def test_sticky_levels(styler_mi, index, columns, levels):
def test_sticky_raises(styler):
def test_sparse_options(sparse_index, sparse_columns):
def test_map_header_cell_ids(styler, index, columns):
def test_maximums(styler_mi, rows, cols):
def test_replaced_css_class_names():
def test_include_css_style_rules_only_for_visible_cells(styler_mi):
def test_include_css_style_rules_only_for_visible_index_labels(styler_mi):
def test_include_css_style_rules_only_for_visible_column_labels(styler_mi):
def test_hiding_index_columns_multiindex_alignment():
def test_hiding_index_columns_multiindex_trimming():
def test_rendered_links(type, text, exp, found):
def test_multiple_rendered_links():
def test_concat(styler):
def test_concat_recursion(styler):
def test_concat_chain(styler):
def test_concat_combined():
def test_to_html_na_rep_non_scalar_data(datapath):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_matplotlib.py
-----------------------------
def mpl_cleanup():
def df():
def styler(df):
def df_blank():
def styler_blank(df_blank):
def test_function_gradient(styler, f):
def test_background_gradient_color(styler, f):
def test_background_gradient_axis(styler, axis, expected, f):
def test_text_color_threshold(cmap, expected):
def test_background_gradient_vmin_vmax():
def test_background_gradient_int64():
def test_background_gradient_gmap_array(styler_blank, axis, gmap, expected):
def test_background_gradient_gmap_array_raises(gmap, axis):
def test_background_gradient_gmap_dataframe_align(styler_blank, gmap, subset, exp_gmap):
def test_background_gradient_gmap_series_align(styler_blank, gmap, axis, exp_gmap):
def test_background_gradient_gmap_wrong_dataframe(styler_blank, gmap, axis):
def test_background_gradient_gmap_wrong_series(styler_blank):
def test_background_gradient_nullable_dtypes():
def test_bar_colormap(cmap):
def test_bar_color_raises(df):
def test_pass_colormap_instance(df, plot_method):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_non_unique.py
-----------------------------
>         """\
          \\begin{tabular}{lrrr}
           & c & d & d \\\\
          i & 1.000000 & 2.000000 & 3.000000 \\\\
def df():
def styler(df):
def test_format_non_unique(df):
def test_apply_map_non_unique_raises(df, func):
def test_table_styles_dict_non_unique_index(styler):
def test_table_styles_dict_non_unique_columns(styler):
def test_tooltips_non_unique_raises(styler):
def test_set_td_classes_non_unique_raises(styler):
def test_hide_columns_non_unique(styler):
def test_latex_non_unique(styler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_style.py
-----------------------------
>         """\
      >
        <thead>
          <tr>
def mi_df():
def mi_styler(mi_df):
def mi_styler_comp(mi_styler):
def blank_value():
def df():
def styler(df):
def test_mi_styler_sparsify_columns(mi_styler, sparse_columns, exp_cols):
def test_mi_styler_sparsify_index(mi_styler, sparse_index, exp_rows):
def test_mi_styler_sparsify_options(mi_styler):
def test_trimming_maximum(rn, cn, max_els, max_rows, max_cols, exp_rn, exp_cn):
def test_render_trimming_rows(option, val):
def test_render_trimming_cols(option, val):
def test_render_trimming_mi():
def test_render_empty_mi():
def test_copy(comprehensive, render, deepcopy, mi_styler, mi_styler_comp):
def test_inherited_copy(mi_styler, deepcopy):
def test_clear(mi_styler_comp):
def test_export(mi_styler_comp, mi_styler):
def test_hide_raises(mi_styler):
def test_hide_index_level(mi_styler, level):
def test_hide_columns_level(mi_styler, level, names):
def test_apply_map_header(method, axis):
def test_apply_map_header_mi(mi_styler, method, axis):
def test_apply_map_header_raises(mi_styler):
class TestStyler:
def test_hidden_index_names(mi_df):
def test_hidden_column_names(mi_df):
def test_caption_raises(mi_styler, caption):
def test_hiding_headers_over_index_no_sparsify():
def test_hiding_headers_over_columns_no_sparsify():
def test_get_level_lengths_mi_hidden():
def test_row_trimming_hide_index():
def test_row_trimming_hide_index_mi():
def test_col_trimming_hide_columns():
def test_no_empty_apply(mi_styler):
def test_output_buffer(mi_styler, format):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_tooltip.py
-----------------------------
def df():
def styler(df):
def test_tooltip_render(ttips, styler):
def test_tooltip_ignored(styler):
def test_tooltip_css_class(styler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_to_latex.py
-----------------------------
>         """\
          \\begin{tabular}{lrrl}
           & A & B & C \\\\
          0 & 0 & -0.61 & ab \\\\
def df():
def df_ext():
def styler(df):
def test_minimal_latex_tabular(styler):
def test_tabular_hrules(styler):
def test_tabular_custom_hrules(styler):
def test_column_format(styler):
def test_siunitx_cols(styler):
def test_position(styler):
def test_label(styler, env):
def test_position_float_raises(styler):
def test_kwargs_combinations(
def test_custom_table_styles(styler):
def test_cell_styling(styler):
def test_multiindex_columns(df):
def test_multiindex_row(df_ext):
def test_multirow_naive(df_ext):
def test_multiindex_row_and_col(df_ext):
def test_multicol_naive(df, multicol_align, siunitx, header):
def test_multi_options(df_ext):
def test_multiindex_columns_hidden():
def test_sparse_options(df_ext, option, value):
def test_hidden_index(styler):
def test_comprehensive(df_ext, environment):
def test_environment_option(styler):
def test_parse_latex_table_styles(styler):
def test_parse_latex_cell_styles_basic():  # test nesting
def test_parse_latex_cell_styles_braces(wrap_arg, expected):
def test_parse_latex_header_span():
def test_parse_latex_table_wrapping(styler):
def test_short_caption(styler):
def test_parse_latex_css_conversion(css, expected):
def test_parse_latex_css_convert_minimal(styler, env, inner_env, convert, exp):
def test_parse_latex_css_conversion_option():
def test_styler_object_after_render(styler):
def test_longtable_comprehensive(styler):
def test_longtable_minimal(styler):
def test_longtable_multiindex_columns(df, sparse, exp, siunitx):
def test_longtable_caption_label(styler, caption, cap_exp, label, lab_exp):
def test_apply_map_header_render_mi(df_ext, index, columns, siunitx):
def test_repr_option(styler):
def test_bool_options(styler, option):
def test_siunitx_basic_headers(styler):
def test_css_convert_apply_index(styler, axis):
def test_hide_index_latex(styler):
def test_latex_hiding_index_columns_multiindex_alignment():
def test_rendered_links():
def test_apply_index_hidden_levels():
def test_clines_validation(clines, styler):
def test_clines_index(clines, exp, env):
def test_clines_multiindex(clines, expected, env):
def test_col_format_len(styler):
def test_concat(styler):
def test_concat_recursion():
def test_concat_chain():
def test_empty_clines(df: DataFrame, expected: str, clines: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\test_to_string.py
-----------------------------
>         """\
       A B C
      0 0 -0.61 ab
      1 1 -1.22 cd
def df():
def styler(df):
def test_basic_string(styler):
def test_string_delimiter(styler):
def test_concat(styler):
def test_concat_recursion(styler):
def test_concat_chain(styler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\style\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_console.py
-----------------------------
>     """
      Used to add a side effect when accessing the 'encoding' property. If the
      side effect is a str in nature, the value will be returned. Otherwise, the
      side effect should be an exception that will be raised.
class MockEncoding:
def test_detect_console_encoding_from_stdout_stdin(monkeypatch, empty, filled):
def test_detect_console_encoding_fallback_to_locale(monkeypatch, encoding):
def test_detect_console_encoding_fallback_to_default(monkeypatch, std, locale):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_css.py
-----------------------------
def assert_resolves(css, props, inherited=None):
def assert_same_resolution(css1, css2, inherited=None):
def test_css_parse_normalisation(name, norm, abnorm):
def test_css_parse_invalid(invalid_css, remainder):
def test_css_side_shorthands(shorthand, expansions):
def test_css_border_shorthand_sides(shorthand, sides):
def test_css_border_shorthands(prop, expected):
def test_css_precedence(style, inherited, equiv):
def test_css_none_absent(style, equiv):
def test_css_absolute_font_size(size, relative_to, resolved):
def test_css_relative_font_size(size, relative_to, resolved):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_eng_formatting.py
-----------------------------
>         """
          Parameters:
          -----------
          formatter: EngFormatter under test
def reset_float_format():
class TestEngFormatter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_format.py
-----------------------------
> """
  Tests for the file pandas.io.formats.format, *not* tests for general formatting
  of pandas objects.
def filepath_or_buffer_id(request):
def filepath_or_buffer(filepath_or_buffer_id, tmp_path):
def assert_filepath_or_buffer_equals(
def has_info_repr(df):
def has_non_verbose_info_repr(df):
def has_horizontally_truncated_repr(df):
def has_vertically_truncated_repr(df):
def has_truncated_repr(df):
def has_doubly_truncated_repr(df):
def has_expanded_repr(df):
class TestDataFrameFormatting:
def gen_series_formatting():
class TestSeriesFormatting:
class TestGenericArrayFormatter:
def _three_digit_exp():
class TestFloatArrayFormatter:
class TestTimedelta64Formatter:
class TestDatetime64Formatter:
class TestFormatPercentiles:
def test_filepath_or_buffer_arg(
def test_filepath_or_buffer_bad_arg_raises(float_frame, method):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_ipython_compat.py
-----------------------------
class TestTableSchemaRepr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_printing.py
-----------------------------
>         expected = """ã‚  dd    ggg
  b   ãˆãˆ  hhh
def test_adjoin():
class TestPPrintThing:
class TestFormatBase:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_to_csv.py
-----------------------------
>         expected1 = """\
  ""
  1.0
class TestToCSV:
def test_to_csv_iterative_compression_name(compression):
def test_to_csv_iterative_compression_buffer(compression):
def test_to_csv_pos_args_deprecation():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_to_excel.py
-----------------------------
> """Tests formatting as writer-agnostic ExcelCells
  
  ExcelFormatter is tested implicitly in pandas/tests/io/excel
def test_css_to_excel(css, expected):
def test_css_to_excel_multiple():
def test_css_to_excel_inherited(css, inherited, expected):
def test_css_to_excel_good_colors(input_color, output_color):
def test_css_to_excel_bad_colors(input_color):
def tests_css_named_colors_valid():
def test_css_named_colors_from_mpl_present():
def test_css_excel_cell_precedence(styles, expected):
def test_css_excel_cell_cache(styles, cache_hits, cache_misses):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_to_html.py
-----------------------------
>     """
      Read HTML file from formats data directory.
  
      Parameters
def expected_html(datapath, name):
def biggie_df_fixture(request):
def justify(request):
def test_to_html_with_col_space(col_space):
def test_to_html_with_column_specific_col_space_raises():
def test_to_html_with_column_specific_col_space():
def test_to_html_with_empty_string_label():
def test_to_html_unicode(df, expected, datapath):
def test_to_html_encoding(float_frame, tmp_path):
def test_to_html_decimal(datapath):
def test_to_html_escaped(kwargs, string, expected, datapath):
def test_to_html_multiindex_index_false(index_is_named, datapath):
def test_to_html_multiindex_sparsify(multi_sparse, expected, datapath):
def test_to_html_multiindex_odd_even_truncate(max_rows, expected, datapath):
def test_to_html_formatters(df, formatters, expected, datapath):
def test_to_html_regression_GH6098():
def test_to_html_truncate(datapath):
def test_html_invalid_formatters_arg_raises(size):
def test_to_html_truncate_formatter(datapath):
def test_to_html_truncate_multi_index(sparsify, expected, datapath):
def test_to_html_border(option, result, expected):
def test_to_html(biggie_df_fixture):
def test_to_html_empty_dataframe(biggie_df_fixture):
def test_to_html_filename(biggie_df_fixture, tmpdir):
def test_to_html_with_no_bold():
def test_to_html_columns_arg(float_frame):
def test_to_html_multiindex(columns, justify, expected, datapath):
def test_to_html_justify(justify, datapath):
def test_to_html_invalid_justify(justify):
class TestHTMLIndex:
def test_to_html_with_classes(classes, datapath):
def test_to_html_no_index_max_rows(datapath):
def test_to_html_multiindex_max_cols(datapath):
def test_to_html_multi_indexes_index_false(datapath):
def test_to_html_basic_alignment(
def test_to_html_alignment_with_truncation(
def test_to_html_truncation_index_false_max_rows(datapath, index):
def test_to_html_truncation_index_false_max_cols(
def test_to_html_notebook_has_style(notebook):
def test_to_html_with_index_names_false():
def test_to_html_with_id():
def test_to_html_float_format_no_fixed_width(value, float_format, expected, datapath):
def test_to_html_render_links(render_links, expected, datapath):
def test_ignore_display_max_colwidth(method, expected, max_colwidth):
def test_to_html_invalid_classes_type(classes):
def test_to_html_round_column_headers():
def test_to_html_with_col_space_units(unit):
class TestReprHTML:
def test_to_html_multilevel(multiindex_year_month_day_dataframe_random_data):
def test_to_html_na_rep_and_float_format(na_rep, datapath):
def test_to_html_na_rep_non_scalar_data(datapath):
def test_to_html_float_format_object_col(datapath):
def test_to_html_multiindex_col_with_colspace():
def test_to_html_tuple_col_with_colspace():
def test_to_html_empty_complex_array():
def test_to_html_pos_args_deprecation():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_to_latex.py
-----------------------------
>     """Dedent without new line in the beginning.
  
      Built-in textwrap.dedent would keep new line character in the beginning
      of multi-line string starting from the new line.
def _dedent(string):
def df_short():
class TestToLatex:
class TestToLatexLongtable:
class TestToLatexHeader:
class TestToLatexBold:
class TestToLatexCaptionLabel:
class TestToLatexEscape:
class TestToLatexPosition:
class TestToLatexFormatters:
class TestToLatexMultiindex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_to_markdown.py
-----------------------------
def test_simple():
def test_empty_frame():
def test_other_tablefmt():
def test_other_headers():
def test_series():
def test_no_buf():
def test_index(index):
def test_showindex_disallowed_in_kwargs():
def test_markdown_pos_args_deprecatation():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\test_to_string.py
-----------------------------
>             """\
                    a     b
              0  0.12  1.00
def _three_digit_exp():
class TestDataFrameToStringFormatters:
class TestDataFrameToStringColSpace:
class TestDataFrameToStringHeader:
class TestDataFrameToStringLineWidth:
class TestToStringNumericFormatting:
class TestDataFrameToString:
class TestSeriesToString:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\formats\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\conftest.py
-----------------------------
>     """
      Fixture for orients excluding the table format.
def orient(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_compression.py
-----------------------------
def test_compression_roundtrip(compression):
def test_read_zipped_json(datapath):
def test_with_s3_url(compression, s3_public_bucket, s3so):
def test_lines_with_compression(compression):
def test_chunksize_with_compression(compression):
def test_write_unsupported_compression_type():
def test_read_unsupported_compression_type():
def test_to_json_compression(
def test_to_json_compression_mode(compression):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_deprecated_kwargs.py
-----------------------------
> """
  Tests for the deprecated keyword arguments for `read_json`.
def test_good_kwargs():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_json_table_schema.py
-----------------------------
> """Tests for Table Schema integration."""
  from collections import OrderedDict
  from io import StringIO
  import json
def df_schema():
def df_table():
class TestBuildSchema:
class TestTableSchemaType:
class TestTableOrient:
class TestTableOrientReader:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_json_table_schema_ext_dtype.py
-----------------------------
> """Tests for ExtensionDtype Table Schema integration."""
  
  from collections import OrderedDict
  import datetime as dt
class TestBuildSchema:
class TestTableSchemaType:
class TestTableOrient:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_normalize.py
-----------------------------
>     """
      input data to test json_normalize with max_level param
def deep_nested():
def state_data():
def author_missing_data():
def missing_metadata():
def max_level_test_input_data():
class TestJSONNormalize:
class TestNestedToRecord:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_pandas.py
-----------------------------
>     jsonl = """{"a": 1, "b": 2}
          {"a": 3, "b": 4}
          {"a": 5, "b": 6}
def test_literal_json_deprecation():
def assert_json_roundtrip_equal(result, expected, orient):
class TestPandasContainer:
def test_invalid_engine():
def test_pyarrow_engine_lines_false():
def test_json_roundtrip_string_inference(orient):
def test_json_pos_args_deprecation():
def test_to_json_ea_null():
def test_read_json_lines_rangeindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_readlines.py
-----------------------------
>     j = """
  
      {"A":1,"B":4}
  
def lines_json_df():
def engine(request):
def test_read_jsonl():
def test_read_jsonl_engine_pyarrow(datapath, engine):
def test_read_datetime(request, engine):
def test_read_jsonl_unicode_chars():
def test_to_jsonl():
def test_to_jsonl_count_new_lines():
def test_readjson_chunks(request, lines_json_df, chunksize, engine):
def test_readjson_chunksize_requires_lines(lines_json_df, engine):
def test_readjson_chunks_series(request, engine):
def test_readjson_each_chunk(request, lines_json_df, engine):
def test_readjson_chunks_from_file(request, engine):
def test_readjson_chunks_closes(chunksize):
def test_readjson_invalid_chunksize(lines_json_df, chunksize, engine):
def test_readjson_chunks_multiple_empty_lines(chunksize):
def test_readjson_unicode(request, monkeypatch, engine):
def test_readjson_nrows(nrows, engine):
def test_readjson_nrows_chunks(request, nrows, chunksize, engine):
def test_readjson_nrows_requires_lines(engine):
def test_readjson_lines_chunks_fileurl(request, datapath, engine):
def test_chunksize_is_incremental():
def test_to_json_append_orient(orient_):
def test_to_json_append_lines():
def test_to_json_append_mode(mode_):
def test_to_json_append_output_consistent_columns():
def test_to_json_append_output_inconsistent_columns():
def test_to_json_append_output_different_columns():
def test_to_json_append_output_different_columns_reordered():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\test_ujson.py
-----------------------------
>     """
      Sanitize dictionary for JSON by converting all keys to strings.
  
      Parameters
def _clean_dict(d):
def orient(request):
class TestUltraJSONTests:
class TestNumpyJSONTests:
class TestPandasJSONTests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\json\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_chunksize.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_read_chunksize_with_index(all_parsers, index_col):
def test_read_chunksize_bad(all_parsers, chunksize):
def test_read_chunksize_and_nrows(all_parsers, chunksize):
def test_read_chunksize_and_nrows_changing_size(all_parsers):
def test_get_chunk_passed_chunksize(all_parsers):
def test_read_chunksize_compat(all_parsers, kwargs):
def test_read_chunksize_jagged_names(all_parsers):
def test_chunk_begins_with_newline_whitespace(all_parsers):
def test_chunks_have_consistent_numerical_type(all_parsers, monkeypatch):
def test_warn_if_chunks_have_mismatched_type(all_parsers, using_infer_string):
def test_empty_with_nrows_chunksize(all_parsers, iterator):
def test_read_csv_memory_growth_chunksize(all_parsers):
def test_chunksize_with_usecols_second_block_shorter(all_parsers):
def test_chunksize_second_block_shorter(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_common_basic.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_override_set_noconvert_columns():
def test_read_csv_local(all_parsers, csv1):
def test_1000_sep(all_parsers):
def test_unnamed_columns(all_parsers):
def test_csv_mixed_type(all_parsers):
def test_read_csv_low_memory_no_rows_with_index(all_parsers):
def test_read_csv_dataframe(all_parsers, csv1):
def test_read_nrows(all_parsers, nrows):
def test_read_nrows_bad(all_parsers, nrows):
def test_nrows_skipfooter_errors(all_parsers):
def test_missing_trailing_delimiters(all_parsers):
def test_skip_initial_space(all_parsers):
def test_trailing_delimiters(all_parsers):
def test_escapechar(all_parsers):
def test_ignore_leading_whitespace(all_parsers):
def test_uneven_lines_with_usecols(all_parsers, usecols):
def test_read_empty_with_usecols(all_parsers, data, kwargs, expected):
def test_trailing_spaces(all_parsers, kwargs, expected):
def test_raise_on_sep_with_delim_whitespace(all_parsers):
def test_read_filepath_or_buffer(all_parsers):
def test_single_char_leading_whitespace(all_parsers, delim_whitespace):
def test_empty_lines(all_parsers, sep, skip_blank_lines, exp_data, request):
def test_whitespace_lines(all_parsers):
def test_whitespace_regex_separator(all_parsers, data, expected):
def test_sub_character(all_parsers, csv_dir_path):
def test_filename_with_special_chars(all_parsers, filename):
def test_read_table_same_signature_as_read_csv(all_parsers):
def test_read_table_equivalency_to_read_csv(all_parsers):
def test_read_csv_and_table_sys_setprofile(all_parsers, read_func):
def test_first_row_bom(all_parsers):
def test_first_row_bom_unquoted(all_parsers):
def test_blank_lines_between_header_and_data_rows(all_parsers, nrows):
def test_no_header_two_extra_columns(all_parsers):
def test_read_csv_names_not_accepting_sets(all_parsers):
def test_read_table_delim_whitespace_default_sep(all_parsers):
def test_read_csv_delim_whitespace_non_default_sep(all_parsers, delimiter):
def test_read_csv_delimiter_and_sep_no_default(all_parsers):
def test_read_csv_line_break_as_separator(kwargs, all_parsers):
def test_read_table_delim_whitespace_non_default_sep(all_parsers, delimiter):
def test_dict_keys_as_names(all_parsers):
def test_encoding_surrogatepass(all_parsers):
def test_malformed_second_line(all_parsers):
def test_short_single_line(all_parsers):
def test_short_multi_line(all_parsers):
def test_read_seek(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_data_list.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_read_data_list(all_parsers):
def test_reader_list(all_parsers):
def test_reader_list_skiprows(all_parsers):
def test_read_csv_parse_simple_list(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_decimal.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_1000_sep_with_decimal(all_parsers, data, thousands, decimal):
def test_euro_decimal_format(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_file_buffer_url.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_url(all_parsers, csv_dir_path, httpserver):
def test_local_file(all_parsers, csv_dir_path):
def test_path_path_lib(all_parsers):
def test_path_local_path(all_parsers):
def test_nonexistent_path(all_parsers):
def test_no_permission(all_parsers):
def test_eof_states(all_parsers, data, kwargs, expected, msg, request):
def test_temporary_file(all_parsers):
def test_internal_eof_byte(all_parsers):
def test_internal_eof_byte_to_file(all_parsers):
def test_file_handle_string_io(all_parsers):
def test_file_handles_with_open(all_parsers, csv1):
def test_invalid_file_buffer_class(all_parsers):
def test_invalid_file_buffer_mock(all_parsers):
def test_valid_file_buffer_seems_invalid(all_parsers):
def test_read_csv_file_handle(all_parsers, io_class, encoding):
def test_memory_map_compression(all_parsers, compression):
def test_context_manager(all_parsers, datapath):
def test_context_manageri_user_provided(all_parsers, datapath):
def test_file_descriptor_leak(all_parsers, using_copy_on_write):
def test_memory_map(all_parsers, csv_dir_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_float.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_float_parser(all_parsers):
def test_scientific_no_exponent(all_parsers_all_precisions):
def test_very_negative_exponent(all_parsers_all_precisions, neg_exp):
def test_too_many_exponent_digits(all_parsers_all_precisions, exp, request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_index.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_pass_names_with_index(all_parsers, data, kwargs, expected):
def test_multi_index_no_level_names(
def test_multi_index_no_level_names_implicit(all_parsers):
def test_multi_index_blank_df(all_parsers, data, expected, header, round_trip):
def test_no_unnamed_index(all_parsers):
def test_read_duplicate_index_explicit(all_parsers):
def test_read_duplicate_index_implicit(all_parsers):
def test_read_csv_no_index_name(all_parsers, csv_dir_path):
def test_empty_with_index(all_parsers):
def test_empty_with_multi_index(all_parsers):
def test_empty_with_reversed_multi_index(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_inf.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_inf_parsing(all_parsers, na_filter):
def test_infinity_parsing(all_parsers, na_filter):
def test_read_csv_with_use_inf_as_na(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_ints.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_int_conversion(all_parsers):
def test_parse_bool(all_parsers, data, kwargs, expected):
def test_parse_integers_above_fp_precision(all_parsers):
def test_integer_overflow_bug(all_parsers, sep):
def test_int64_min_issues(all_parsers):
def test_int64_overflow(all_parsers, conv, request):
def test_int64_uint64_range(all_parsers, val):
def test_outside_int64_uint64_range(all_parsers, val):
def test_numeric_range_too_wide(all_parsers, exp_data):
def test_integer_precision(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_iterator.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_iterator(all_parsers):
def test_iterator2(all_parsers):
def test_iterator_stop_on_chunksize(all_parsers):
def test_iterator_skipfooter_errors(all_parsers, kwargs):
def test_iteration_open_handle(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_read_errors.py
-----------------------------
> """
  Tests that work on the Python, C and PyArrow engines but do not have a
  specific classification into the other test modules.
def test_empty_decimal_marker(all_parsers):
def test_bad_stream_exception(all_parsers, csv_dir_path):
def test_malformed(all_parsers):
def test_malformed_chunks(all_parsers, nrows):
def test_catch_too_many_names(all_parsers):
def test_raise_on_no_columns(all_parsers, nrows):
def test_unexpected_keyword_parameter_exception(all_parsers):
def test_suppress_error_output(all_parsers):
def test_error_bad_lines(all_parsers):
def test_warn_bad_lines(all_parsers):
def test_read_csv_wrong_num_columns(all_parsers):
def test_null_byte_char(request, all_parsers):
def test_open_file(request, all_parsers):
def test_invalid_on_bad_line(all_parsers):
def test_bad_header_uniform_error(all_parsers):
def test_on_bad_lines_warn_correct_formatting(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\test_verbose.py
-----------------------------
> """
  Tests that work on both the Python and C engines but do not have a
  specific classification into the other test modules.
def test_verbose_read(all_parsers, capsys):
def test_verbose_read2(all_parsers, capsys):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\common\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\dtypes\test_categorical.py
-----------------------------
> """
  Tests dtype specification during parsing
  for all of the parsers defined in parsers.py
def test_categorical_dtype(all_parsers, dtype):
def test_categorical_dtype_single(all_parsers, dtype, request):
def test_categorical_dtype_unsorted(all_parsers):
def test_categorical_dtype_missing(all_parsers):
def test_categorical_dtype_high_cardinality_numeric(all_parsers, monkeypatch):
def test_categorical_dtype_utf16(all_parsers, csv_dir_path):
def test_categorical_dtype_chunksize_infer_categories(all_parsers):
def test_categorical_dtype_chunksize_explicit_categories(all_parsers):
def test_categorical_dtype_latin1(all_parsers, csv_dir_path):
def test_categorical_category_dtype(all_parsers, categories, ordered):
def test_categorical_category_dtype_unsorted(all_parsers):
def test_categorical_coerces_numeric(all_parsers):
def test_categorical_coerces_datetime(all_parsers):
def test_categorical_coerces_timestamp(all_parsers):
def test_categorical_coerces_timedelta(all_parsers):
def test_categorical_dtype_coerces_boolean(all_parsers, data):
def test_categorical_unexpected_categories(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\dtypes\test_dtypes_basic.py
-----------------------------
> """
  Tests dtype specification during parsing
  for all of the parsers defined in parsers.py
def test_dtype_all_columns(all_parsers, dtype, check_orig, using_infer_string):
def test_dtype_per_column(all_parsers):
def test_invalid_dtype_per_column(all_parsers):
def test_raise_on_passed_int_dtype_with_nas(all_parsers):
def test_dtype_with_converters(all_parsers):
def test_numeric_dtype(all_parsers, dtype):
def test_boolean_dtype(all_parsers):
def test_delimiter_with_usecols_and_parse_dates(all_parsers):
def test_decimal_and_exponential(
def test_1000_sep_decimal_float_precision(
def decimal_number_check(request, parser, numeric_decimal, thousands, float_precision):
def test_skip_whitespace(c_parser_only, float_precision):
def test_true_values_cast_to_bool(all_parsers):
def test_dtype_mangle_dup_cols(all_parsers, dtypes, exp_value):
def test_dtype_mangle_dup_cols_single_dtype(all_parsers):
def test_dtype_multi_index(all_parsers):
def test_nullable_int_dtype(all_parsers, any_int_ea_dtype):
def test_dtypes_defaultdict(all_parsers, default):
def test_dtypes_defaultdict_mangle_dup_cols(all_parsers):
def test_dtypes_defaultdict_invalid(all_parsers):
def test_dtype_backend(all_parsers):
def test_dtype_backend_and_dtype(all_parsers):
def test_dtype_backend_string(all_parsers, string_storage):
def test_dtype_backend_ea_dtype_specified(all_parsers):
def test_dtype_backend_pyarrow(all_parsers, request):
def test_ea_int_avoid_overflow(all_parsers):
def test_string_inference(all_parsers):
def test_string_inference_object_dtype(all_parsers, dtype, using_infer_string):
def test_accurate_parsing_of_large_integers(all_parsers):
def test_dtypes_with_usecols(all_parsers):
def test_index_col_with_dtype_no_rangeindex(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\dtypes\test_empty.py
-----------------------------
> """
  Tests dtype specification during parsing
  for all of the parsers defined in parsers.py
def test_dtype_all_columns_empty(all_parsers):
def test_empty_pass_dtype(all_parsers):
def test_empty_with_index_pass_dtype(all_parsers):
def test_empty_with_multi_index_pass_dtype(all_parsers):
def test_empty_with_mangled_column_pass_dtype_by_names(all_parsers):
def test_empty_with_mangled_column_pass_dtype_by_indexes(all_parsers):
def test_empty_with_dup_column_pass_dtype_by_indexes(all_parsers):
def test_empty_with_dup_column_pass_dtype_by_indexes_raises(all_parsers):
def test_empty_dtype(all_parsers, dtype, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\dtypes\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\usecols\test_parse_dates.py
-----------------------------
> """
  Tests the usecols functionality during parsing
  for all of the parsers defined in parsers.py
def test_usecols_with_parse_dates(all_parsers, usecols):
def test_usecols_with_parse_dates2(all_parsers):
def test_usecols_with_parse_dates3(all_parsers):
def test_usecols_with_parse_dates4(all_parsers):
def test_usecols_with_parse_dates_and_names(all_parsers, usecols, names, request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\usecols\test_strings.py
-----------------------------
> """
  Tests the usecols functionality during parsing
  for all of the parsers defined in parsers.py
def test_usecols_with_unicode_strings(all_parsers):
def test_usecols_with_single_byte_unicode_strings(all_parsers):
def test_usecols_with_mixed_encoding_strings(all_parsers, usecols):
def test_usecols_with_multi_byte_characters(all_parsers, usecols):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\usecols\test_usecols_basic.py
-----------------------------
> """
  Tests the usecols functionality during parsing
  for all of the parsers defined in parsers.py
def test_raise_on_mixed_dtype_usecols(all_parsers):
def test_usecols(all_parsers, usecols, request):
def test_usecols_with_names(all_parsers):
def test_usecols_relative_to_names(all_parsers, names, usecols):
def test_usecols_relative_to_names2(all_parsers):
def test_usecols_name_length_conflict(all_parsers):
def test_usecols_single_string(all_parsers):
def test_usecols_index_col_false(all_parsers, data):
def test_usecols_index_col_conflict(all_parsers, usecols, index_col, request):
def test_usecols_index_col_conflict2(all_parsers):
def test_usecols_implicit_index_col(all_parsers):
def test_usecols_index_col_middle(all_parsers):
def test_usecols_index_col_end(all_parsers):
def test_usecols_regex_sep(all_parsers):
def test_usecols_with_whitespace(all_parsers):
def test_usecols_with_integer_like_header(all_parsers, usecols, expected, request):
def test_empty_usecols(all_parsers):
def test_np_array_usecols(all_parsers):
def test_callable_usecols(all_parsers, usecols, expected):
def test_incomplete_first_row(all_parsers, usecols):
def test_uneven_length_cols(all_parsers, data, usecols, kwargs, expected):
def test_raises_on_usecols_names_mismatch(
def test_usecols_subset_names_mismatch_orig_columns(all_parsers, usecols, request):
def test_usecols_indices_out_of_bounds(all_parsers, names):
def test_usecols_additional_columns(all_parsers):
def test_usecols_additional_columns_integer_columns(all_parsers):
def test_usecols_dtype(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\usecols\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\conftest.py
-----------------------------
>     """
      The directory path to the data files needed for parser tests.
class BaseParser:
class CParser(BaseParser):
class CParserHighMemory(CParser):
class CParserLowMemory(CParser):
class PythonParser(BaseParser):
class PyArrowParser(BaseParser):
def csv_dir_path(datapath):
def csv1(datapath):
def all_parsers(request):
def c_parser_only(request):
def python_parser_only(request):
def pyarrow_parser_only(request):
def _get_all_parser_float_precision_combinations():
def all_parsers_all_precisions(request):
def utf_value(request):
def encoding_fmt(request):
def numeric_decimal(request):
def pyarrow_xfail(request):
def pyarrow_skip(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_comment.py
-----------------------------
> """
  Tests that comments are properly handled during parsing
  for all of the parsers defined in parsers.py
def test_comment(all_parsers, na_values):
def test_line_comment(all_parsers, read_kwargs, request):
def test_comment_skiprows(all_parsers):
def test_comment_header(all_parsers):
def test_comment_skiprows_header(all_parsers):
def test_custom_comment_char(all_parsers, comment_char):
def test_comment_first_line(all_parsers, header):
def test_comment_char_in_default_value(all_parsers, request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_compression.py
-----------------------------
> """
  Tests compressed data parsing functionality for all
  of the parsers defined in parsers.py
def buffer(request):
def parser_and_data(all_parsers, csv1):
def test_zip(parser_and_data, compression):
def test_zip_error_multiple_files(parser_and_data, compression):
def test_zip_error_no_files(parser_and_data):
def test_zip_error_invalid_zip(parser_and_data):
def test_compression(
def test_infer_compression(all_parsers, csv1, buffer, ext):
def test_compression_utf_encoding(all_parsers, csv_dir_path, utf_value, encoding_fmt):
def test_invalid_compression(all_parsers, invalid_compression):
def test_compression_tar_archive(all_parsers, csv_dir_path):
def test_ignore_compression_extension(all_parsers):
def test_writes_tar_gz(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_concatenate_chunks.py
-----------------------------
def test_concatenate_chunks_pyarrow():
def test_concatenate_chunks_pyarrow_strings():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_converters.py
-----------------------------
> """
  Tests column conversion functionality during parsing
  for all of the parsers defined in parsers.py
def test_converters_type_must_be_dict(all_parsers):
def test_converters(all_parsers, column, converter):
def test_converters_no_implicit_conv(all_parsers):
def test_converters_euro_decimal_format(all_parsers):
def test_converters_corner_with_nans(all_parsers):
def test_converter_index_col_bug(all_parsers, conv_f):
def test_converter_identity_object(all_parsers):
def test_converter_multi_index(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_c_parser_only.py
-----------------------------
> """
  Tests that apply specifically to the CParser. Unless specifically stated
  as a CParser-specific issue, the goal is to eventually move as many of
  these tests out of this module as soon as the Python parser can accept
def test_buffer_overflow(c_parser_only, malformed):
def test_delim_whitespace_custom_terminator(c_parser_only):
def test_dtype_and_names_error(c_parser_only):
def test_unsupported_dtype(c_parser_only, match, kwargs):
def test_precise_conversion(c_parser_only, num):
def test_usecols_dtypes(c_parser_only, using_infer_string):
def test_disable_bool_parsing(c_parser_only):
def test_custom_lineterminator(c_parser_only):
def test_parse_ragged_csv(c_parser_only):
def test_tokenize_CR_with_quoting(c_parser_only):
def test_grow_boundary_at_cap(c_parser_only, count):
def test_parse_trim_buffers(c_parser_only, encoding):
def test_internal_null_byte(c_parser_only):
def test_read_nrows_large(c_parser_only):
def test_float_precision_round_trip_with_text(c_parser_only):
def test_large_difference_in_columns(c_parser_only):
def test_data_after_quote(c_parser_only):
def test_comment_whitespace_delimited(c_parser_only):
def test_file_like_no_next(c_parser_only):
def test_buffer_rd_bytes_bad_unicode(c_parser_only):
def test_read_tarfile(c_parser_only, csv_dir_path, tar_suffix):
def test_chunk_whitespace_on_boundary(c_parser_only):
def test_file_handles_mmap(c_parser_only, csv1):
def test_file_binary_mode(c_parser_only):
def test_unix_style_breaks(c_parser_only):
def test_1000_sep_with_decimal(
def test_float_precision_options(c_parser_only):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_dialect.py
-----------------------------
> """
  Tests that dialects are properly handled during parsing
  for all of the parsers defined in parsers.py
def custom_dialect():
def test_dialect(all_parsers):
def test_dialect_str(all_parsers):
def test_invalid_dialect(all_parsers):
def test_dialect_conflict_except_delimiter(all_parsers, custom_dialect, arg, value):
def test_dialect_conflict_delimiter(all_parsers, custom_dialect, kwargs, warning_klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_encoding.py
-----------------------------
> """
  Tests encoding functionality during parsing
  for all of the parsers defined in parsers.py
def test_bytes_io_input(all_parsers):
def test_read_csv_unicode(all_parsers):
def test_utf16_bom_skiprows(all_parsers, sep, encoding):
def test_utf16_example(all_parsers, csv_dir_path):
def test_unicode_encoding(all_parsers, csv_dir_path):
def test_utf8_bom(all_parsers, data, kwargs, expected, request):
def test_read_csv_utf_aliases(all_parsers, utf_value, encoding_fmt):
def test_binary_mode_file_buffers(all_parsers, file_path, encoding, datapath):
def test_encoding_temp_file(all_parsers, utf_value, encoding_fmt, pass_encoding):
def test_encoding_named_temp_file(all_parsers):
def test_parse_encoded_special_characters(encoding):
def test_encoding_memory_map(all_parsers, encoding):
def test_chunk_splits_multibyte_char(all_parsers):
def test_readcsv_memmap_utf8(all_parsers):
def test_not_readable(all_parsers, mode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_header.py
-----------------------------
> """
  Tests that the file header is properly handled or inferred
  during parsing for all of the parsers defined in parsers.py
def test_read_with_bad_header(all_parsers):
def test_negative_header(all_parsers):
def test_negative_multi_index_header(all_parsers, header):
def test_bool_header_arg(all_parsers, header):
def test_header_with_index_col(all_parsers):
def test_header_not_first_line(all_parsers):
def test_header_multi_index(all_parsers):
def test_header_multi_index_invalid(all_parsers, kwargs, msg):
def test_header_multi_index_common_format1(all_parsers, kwargs):
def test_header_multi_index_common_format2(all_parsers, kwargs):
def test_header_multi_index_common_format3(all_parsers, kwargs):
def test_header_multi_index_common_format_malformed1(all_parsers):
def test_header_multi_index_common_format_malformed2(all_parsers):
def test_header_multi_index_common_format_malformed3(all_parsers):
def test_header_multi_index_blank_line(all_parsers):
def test_header_names_backward_compat(all_parsers, data, header, request):
def test_read_only_header_no_rows(all_parsers, kwargs):
def test_no_header(all_parsers, kwargs, names):
def test_non_int_header(all_parsers, header):
def test_singleton_header(all_parsers):
def test_mangles_multi_index(all_parsers, data, expected):
def test_multi_index_unnamed(all_parsers, index_col, columns):
def test_names_longer_than_header_but_equal_with_data_rows(all_parsers):
def test_read_csv_multiindex_columns(all_parsers):
def test_read_csv_multi_header_length_check(all_parsers):
def test_header_none_and_implicit_index(all_parsers):
def test_header_none_and_implicit_index_in_second_row(all_parsers):
def test_header_none_and_on_bad_lines_skip(all_parsers):
def test_header_missing_rows(all_parsers):
def test_header_multiple_whitespaces(all_parsers):
def test_header_delim_whitespace(all_parsers):
def test_usecols_no_header_pyarrow(pyarrow_parser_only):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_index_col.py
-----------------------------
> """
  Tests that the specified index column (a.k.a "index_col")
  is properly handled or inferred during parsing for all of
  the parsers defined in parsers.py
def test_index_col_named(all_parsers, with_header):
def test_index_col_named2(all_parsers):
def test_index_col_is_true(all_parsers):
def test_infer_index_col(all_parsers):
def test_index_col_empty_data(all_parsers, index_col, kwargs):
def test_empty_with_index_col_false(all_parsers):
def test_multi_index_naming(all_parsers, index_names, request):
def test_multi_index_naming_not_all_at_beginning(all_parsers):
def test_no_multi_index_level_names_empty(all_parsers):
def test_header_with_index_col(all_parsers):
def test_index_col_large_csv(all_parsers, monkeypatch):
def test_index_col_multiindex_columns_no_data(all_parsers):
def test_index_col_header_no_data(all_parsers):
def test_multiindex_columns_no_data(all_parsers):
def test_multiindex_columns_index_col_with_data(all_parsers):
def test_infer_types_boolean_sum(all_parsers):
def test_specify_dtype_for_index_col(all_parsers, dtype, val, request):
def test_multiindex_columns_not_leading_index_col(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_mangle_dupes.py
-----------------------------
> """
  Tests that duplicate columns are handled appropriately when parsed by the
  CSV engine. In general, the expected result is that they are either thoroughly
  de-duplicated (if mangling requested) or ignored otherwise.
def test_basic(all_parsers):
def test_basic_names(all_parsers):
def test_basic_names_raise(all_parsers):
def test_thorough_mangle_columns(all_parsers, data, expected):
def test_thorough_mangle_names(all_parsers, data, names, expected):
def test_mangled_unnamed_placeholders(all_parsers):
def test_mangle_dupe_cols_already_exists(all_parsers):
def test_mangle_dupe_cols_already_exists_unnamed_col(all_parsers):
def test_mangle_cols_names(all_parsers, usecol, engine):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_multi_thread.py
-----------------------------
> """
  Tests multithreading behaviour for reading and
  parsing files for each parser defined in parsers.py
def test_multi_thread_string_io_read_csv(all_parsers, request):
def _generate_multi_thread_dataframe(parser, path, num_rows, num_tasks):
def test_multi_thread_path_multipart_read_csv(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_na_values.py
-----------------------------
> """
  Tests that NA values are properly handled during
  parsing for all of the parsers defined in parsers.py
def test_string_nas(all_parsers):
def test_detect_string_na(all_parsers):
def test_non_string_na_values(all_parsers, data, na_values, request):
def test_default_na_values(all_parsers):
def test_custom_na_values(all_parsers, na_values):
def test_bool_na_values(all_parsers):
def test_na_value_dict(all_parsers):
def test_na_value_dict_multi_index(all_parsers, index_col, expected):
def test_na_values_keep_default(
def test_no_na_values_no_keep_default(all_parsers):
def test_no_keep_default_na_dict_na_values(all_parsers):
def test_no_keep_default_na_dict_na_scalar_values(all_parsers):
def test_no_keep_default_na_dict_na_values_diff_reprs(all_parsers, col_zero_na_values):
def test_na_values_na_filter_override(
def test_na_trailing_columns(all_parsers):
def test_na_values_scalar(all_parsers, na_values, row_data):
def test_na_values_dict_aliasing(all_parsers):
def test_na_values_dict_col_index(all_parsers):
def test_na_values_uint64(all_parsers, data, kwargs, expected, request):
def test_empty_na_values_no_default_with_index(all_parsers):
def test_no_na_filter_on_index(all_parsers, na_filter, index_data, request):
def test_inf_na_values_with_int_index(all_parsers):
def test_na_values_with_dtype_str_and_na_filter(all_parsers, na_filter):
def test_cast_NA_to_bool_raises_error(all_parsers, data, na_values):
def test_str_nan_dropped(all_parsers):
def test_nan_multi_index(all_parsers):
def test_bool_and_nan_to_bool(all_parsers):
def test_bool_and_nan_to_int(all_parsers):
def test_bool_and_nan_to_float(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_network.py
-----------------------------
> """
  Tests parsers ability to read and parse non-local files
  and hence require a network connection to be read.
def test_compressed_urls(
def test_url_encoding_csv(httpserver, datapath):
def tips_df(datapath):
class TestS3:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_parse_dates.py
-----------------------------
> """
  Tests date parsing functionality for all of the
  parsers defined in parsers.py
def test_read_csv_with_custom_date_parser(all_parsers):
def test_read_csv_with_custom_date_parser_parse_dates_false(all_parsers):
def test_separator_date_conflict(all_parsers):
def test_multiple_date_col_custom(all_parsers, keep_date_col, request):
def test_concat_date_col_fail(container, dim):
def test_multiple_date_col(all_parsers, keep_date_col, request):
def test_date_col_as_index_col(all_parsers):
def test_multiple_date_cols_int_cast(all_parsers):
def test_multiple_date_col_timestamp_parse(all_parsers):
def test_multiple_date_cols_with_header(all_parsers):
def test_multiple_date_col_name_collision(all_parsers, data, parse_dates, msg):
def test_date_parser_int_bug(all_parsers):
def test_nat_parse(all_parsers):
def test_csv_custom_parser(all_parsers):
def test_parse_dates_implicit_first_col(all_parsers):
def test_parse_dates_string(all_parsers):
def test_yy_format_with_year_first(all_parsers, parse_dates):
def test_parse_dates_column_list(all_parsers, parse_dates):
def test_multi_index_parse_dates(all_parsers, index_col):
def test_parse_dates_custom_euro_format(all_parsers, kwargs):
def test_parse_tz_aware(all_parsers):
def test_multiple_date_cols_index(all_parsers, parse_dates, index_col):
def test_multiple_date_cols_chunked(all_parsers):
def test_multiple_date_col_named_index_compat(all_parsers):
def test_multiple_date_col_multiple_index_compat(all_parsers):
def test_read_with_parse_dates_scalar_non_bool(all_parsers, kwargs):
def test_read_with_parse_dates_invalid_type(all_parsers, parse_dates):
def test_bad_date_parse(all_parsers, cache_dates, value):
def test_bad_date_parse_with_warning(all_parsers, cache_dates, value):
def test_parse_dates_empty_string(all_parsers):
def test_parse_dates_infer_datetime_format_warning(all_parsers, reader):
def test_parse_dates_date_parser_and_date_format(all_parsers, reader):
def test_parse_dates_no_convert_thousands(all_parsers, data, kwargs, expected):
def test_parse_date_time_multi_level_column_name(all_parsers):
def test_parse_date_time(all_parsers, data, kwargs, expected):
def test_parse_date_fields(all_parsers):
def test_parse_date_all_fields(all_parsers, key, value, warn):
def test_datetime_fractional_seconds(all_parsers, key, value, warn):
def test_generic(all_parsers):
def test_date_parser_resolution_if_not_ns(all_parsers):
def test_parse_date_column_with_empty_string(all_parsers):
def test_parse_date_float(all_parsers, data, expected, parse_dates):
def test_parse_timezone(all_parsers):
def test_invalid_parse_delimited_date(all_parsers, date_string):
def test_parse_delimited_date_swap_no_warning(
def test_parse_delimited_date_swap_with_warning(
def test_parse_multiple_delimited_dates_with_swap_warnings():
def test_missing_parse_dates_column_raises(
def test_date_parser_and_names(all_parsers):
def test_date_parser_multiindex_columns(all_parsers):
def test_date_parser_multiindex_columns_combine_cols(all_parsers, parse_spec, col_name):
def test_date_parser_usecols_thousands(all_parsers):
def test_parse_dates_and_keep_original_column(all_parsers):
def test_dayfirst_warnings():
def test_dayfirst_warnings_no_leading_zero(date_string, dayfirst):
def test_infer_first_column_as_index(all_parsers):
def test_replace_nans_before_parsing_dates(all_parsers, key, value, warn):
def test_parse_dates_and_string_dtype(all_parsers):
def test_parse_dot_separated_dates(all_parsers):
def test_parse_dates_dict_format(all_parsers):
def test_parse_dates_dict_format_two_columns(all_parsers, key, parse_dates):
def test_parse_dates_dict_format_index(all_parsers):
def test_parse_dates_arrow_engine(all_parsers):
def test_from_csv_with_mixed_offsets(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_python_parser_only.py
-----------------------------
> """
  Tests that apply specifically to the Python parser. Unless specifically
  stated as a Python-specific issue, the goal is to eventually move as many of
  these tests out of this module as soon as the C parser can accept further
def test_default_separator(python_parser_only):
def test_invalid_skipfooter_non_int(python_parser_only, skipfooter):
def test_invalid_skipfooter_negative(python_parser_only):
def test_sniff_delimiter(python_parser_only, kwargs):
def test_sniff_delimiter_comment(python_parser_only):
def test_sniff_delimiter_encoding(python_parser_only, encoding):
def test_single_line(python_parser_only):
def test_skipfooter(python_parser_only, kwargs):
def test_decompression_regex_sep(python_parser_only, csv1, compression, klass):
def test_read_csv_buglet_4x_multi_index(python_parser_only):
def test_read_csv_buglet_4x_multi_index2(python_parser_only):
def test_skipfooter_with_decimal(python_parser_only, add_footer):
def test_encoding_non_utf8_multichar_sep(python_parser_only, sep, encoding):
def test_multi_char_sep_quotes(python_parser_only, quoting):
def test_none_delimiter(python_parser_only):
def test_skipfooter_bad_row(python_parser_only, data, skipfooter):
def test_malformed_skipfooter(python_parser_only):
def test_python_engine_file_no_next(python_parser_only):
def test_on_bad_lines_callable(python_parser_only, bad_line_func):
def test_on_bad_lines_callable_write_to_external_list(python_parser_only):
def test_on_bad_lines_callable_iterator_true(python_parser_only, bad_line_func, sep):
def test_on_bad_lines_callable_dont_swallow_errors(python_parser_only):
def test_on_bad_lines_callable_not_expected_length(python_parser_only):
def test_on_bad_lines_callable_returns_none(python_parser_only):
def test_on_bad_lines_index_col_inferred(python_parser_only):
def test_index_col_false_and_header_none(python_parser_only):
def test_header_int_do_not_infer_multiindex_names_on_different_line(python_parser_only):
def test_no_thousand_convert_with_dot_for_non_numeric_cols(python_parser_only, dtype):
def test_no_thousand_convert_for_non_numeric_cols(python_parser_only, dtype, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_quoting.py
-----------------------------
> """
  Tests that quoting specifications are properly handled
  during parsing for all of the parsers defined in parsers.py
def test_bad_quote_char(all_parsers, kwargs, msg):
def test_bad_quoting(all_parsers, quoting, msg):
def test_quote_char_basic(all_parsers):
def test_quote_char_various(all_parsers, quote_char):
def test_null_quote_char(all_parsers, quoting, quote_char):
def test_quoting_various(all_parsers, kwargs, exp_data):
def test_double_quote(all_parsers, doublequote, exp_data, request):
def test_quotechar_unicode(all_parsers, quotechar):
def test_unbalanced_quoting(all_parsers, balanced, request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_read_fwf.py
-----------------------------
> """
  Tests the 'read_fwf' function in parsers.py. This
  test suite is independent of the others because the
  engine is set to 'python-fwf' internally.
def test_basic():
def test_colspecs():
def test_widths():
def test_non_space_filler():
def test_over_specified():
def test_under_specified():
def test_read_csv_compat():
def test_bytes_io_input():
def test_fwf_colspecs_is_list_or_tuple():
def test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples():
def test_fwf_colspecs_none(colspecs, exp_data):
def test_fwf_colspecs_infer_nrows(infer_nrows, exp_data):
def test_fwf_regression():
def test_fwf_for_uint8():
def test_fwf_comment(comment):
def test_fwf_skip_blank_lines():
def test_fwf_thousands(thousands):
def test_bool_header_arg(header):
def test_full_file():
def test_full_file_with_missing():
def test_full_file_with_spaces():
def test_full_file_with_spaces_and_missing():
def test_messed_up_data():
def test_multiple_delimiters():
def test_variable_width_unicode():
def test_dtype(dtype):
def test_skiprows_inference():
def test_skiprows_by_index_inference():
def test_skiprows_inference_empty():
def test_whitespace_preservation():
def test_default_delimiter():
def test_fwf_compression(compression_only, infer, compression_to_extension):
def test_binary_mode():
def test_encoding_mmap(memory_map):
def test_len_colspecs_len_names(colspecs, names, widths, index_col):
def test_len_colspecs_len_names_with_index_col(
def test_colspecs_with_comment():
def test_skip_rows_and_n_rows():
def test_skiprows_with_iterator():
def test_names_and_infer_colspecs():
def test_widths_and_usecols():
def test_dtype_backend(string_storage, dtype_backend):
def test_invalid_dtype_backend():
def test_url_urlopen(httpserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_skiprows.py
-----------------------------
> """
  Tests that skipped rows are properly handled during
  parsing for all of the parsers defined in parsers.py
def test_skip_rows_bug(all_parsers, skiprows):
def test_deep_skip_rows(all_parsers):
def test_skip_rows_blank(all_parsers):
def test_skip_row_with_newline(all_parsers, data, kwargs, expected):
def test_skip_row_with_quote(all_parsers):
def test_skip_row_with_newline_and_quote(all_parsers, data, exp_data):
def test_skiprows_lineterminator(all_parsers, lineterminator, request):
def test_skiprows_infield_quote(all_parsers):
def test_skip_rows_callable(all_parsers, kwargs, expected):
def test_skip_rows_callable_not_in(all_parsers):
def test_skip_rows_skip_all(all_parsers):
def test_skip_rows_bad_callable(all_parsers):
def test_skip_rows_and_n_rows(all_parsers):
def test_skip_rows_with_chunks(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_textreader.py
-----------------------------
> """
  Tests the TextReader class in parsers.pyx, which
  is integral to the C engine in parsers.py
class TestTextReader:
def assert_array_dicts_equal(left, right):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_unsupported.py
-----------------------------
> """
  Tests that features that are currently unsupported in
  either the Python or C parser are actually enforced
  and are clearly communicated to the user.
def python_engine(request):
class TestUnsupportedFeatures:
def test_close_file_handle_on_invalid_usecols(all_parsers):
def test_invalid_file_inputs(request, all_parsers):
def test_invalid_dtype_backend(all_parsers):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\test_upcast.py
-----------------------------
def test_maybe_upcast(any_real_numpy_dtype):
def test_maybe_upcast_no_na(any_real_numpy_dtype):
def test_maybe_upcaste_bool():
def test_maybe_upcaste_bool_no_nan():
def test_maybe_upcaste_all_nan():
def test_maybe_upcast_object(val, string_storage):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\parser\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\common.py
-----------------------------
>     """
      For tests using tables, try removing the table to be sure there is
      no content from previous tests using the same table name.
def safe_close(store):
def ensure_clean_store(
def _maybe_remove(store, key):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\conftest.py
-----------------------------
>     """Fixture for setup path"""
      return f"tmp.__{uuid.uuid4()}__.h5"
def setup_path():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_append.py
-----------------------------
>             """Cannot serialize the column [invalid]
def test_append(setup_path):
def test_append_series(setup_path):
def test_append_some_nans(setup_path):
def test_append_all_nans(setup_path, using_infer_string):
def test_append_frame_column_oriented(setup_path):
def test_append_with_different_block_ordering(setup_path):
def test_append_with_strings(setup_path):
def test_append_with_empty_string(setup_path):
def test_append_with_data_columns(setup_path):
def test_append_hierarchical(tmp_path, setup_path, multiindex_dataframe_random_data):
def test_append_misc(setup_path):
def test_append_misc_chunksize(setup_path, chunksize):
def test_append_misc_empty_frame(setup_path):
def test_append_raise(setup_path, using_infer_string):
def test_append_with_timedelta(setup_path):
def test_append_to_multiple(setup_path):
def test_append_to_multiple_dropna(setup_path):
def test_append_to_multiple_dropna_false(setup_path):
def test_append_to_multiple_min_itemsize(setup_path):
def test_append_string_nan_rep(setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_categorical.py
-----------------------------
def test_categorical(setup_path):
def test_categorical_conversion(tmp_path, setup_path):
def test_categorical_nan_only_columns(tmp_path, setup_path):
def test_convert_value(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_compat.py
-----------------------------
>     """
      Use PyTables to create a simple HDF5 file.
def pytables_hdf5_file(tmp_path):
class TestReadPyTablesHDF5:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_complex.py
-----------------------------
def test_complex_fixed(tmp_path, setup_path):
def test_complex_table(tmp_path, setup_path):
def test_complex_mixed_fixed(tmp_path, setup_path):
def test_complex_mixed_table(tmp_path, setup_path):
def test_complex_across_dimensions_fixed(tmp_path, setup_path):
def test_complex_across_dimensions(tmp_path, setup_path):
def test_complex_indexing_error(setup_path):
def test_complex_series_error(tmp_path, setup_path):
def test_complex_append(setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_errors.py
-----------------------------
def test_pass_spec_to_storer(setup_path):
def test_table_index_incompatible_dtypes(setup_path):
def test_unimplemented_dtypes_table_columns(setup_path):
def test_invalid_terms(tmp_path, setup_path):
def test_append_with_diff_col_name_types_raises_value_error(setup_path):
def test_invalid_complib(setup_path):
def test_to_hdf_multiindex_extension_dtype(idx, tmp_path, setup_path):
def test_unsuppored_hdf_file_error(datapath):
def test_read_hdf_errors(setup_path, tmp_path):
def test_read_hdf_generic_buffer_errors():
def test_maybe_adjust_name_bad_version_raises(bad_version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_file_handling.py
-----------------------------
def test_mode(setup_path, tmp_path, mode, using_infer_string):
def test_default_mode(tmp_path, setup_path, using_infer_string):
def test_reopen_handle(tmp_path, setup_path):
def test_open_args(setup_path, using_infer_string):
def test_flush(setup_path):
def test_complibs_default_settings(tmp_path, setup_path, using_infer_string):
def test_complibs_default_settings_override(tmp_path, setup_path):
def test_complibs(tmp_path, lvl, lib, request):
def test_encoding(setup_path):
def test_latin_encoding(tmp_path, setup_path, dtype, val):
def test_multiple_open_close(tmp_path, setup_path):
def test_fspath():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_keys.py
-----------------------------
def test_keys(setup_path):
def test_non_pandas_keys(tmp_path, setup_path):
def test_keys_illegal_include_keyword_value(setup_path):
def test_keys_ignore_hdf_softlink(setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_put.py
-----------------------------
def test_format_type(tmp_path, setup_path):
def test_format_kwarg_in_constructor(tmp_path, setup_path):
def test_api_default_format(tmp_path, setup_path):
def test_put(setup_path):
def test_put_string_index(setup_path):
def test_put_compression(setup_path):
def test_put_compression_blosc(setup_path):
def test_put_datetime_ser(setup_path):
def test_put_mixed_type(setup_path, using_infer_string):
def test_put_str_frame(setup_path, string_dtype_arguments):
def test_put_str_series(setup_path, string_dtype_arguments):
def test_store_index_types(setup_path, format, index):
def test_column_multiindex(setup_path, using_infer_string):
def test_store_multiindex(setup_path):
def test_store_periodindex(tmp_path, setup_path, format):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_pytables_missing.py
-----------------------------
def test_pytables_raises():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_read.py
-----------------------------
def test_read_missing_key_close_store(tmp_path, setup_path):
def test_read_index_error_close_store(tmp_path, setup_path):
def test_read_missing_key_opened_store(tmp_path, setup_path):
def test_read_column(setup_path):
def test_pytables_native_read(datapath):
def test_pytables_native2_read(datapath):
def test_legacy_table_fixed_format_read_py2(datapath):
def test_legacy_table_fixed_format_read_datetime_py2(datapath):
def test_legacy_table_read_py2(datapath):
def test_read_hdf_open_store(tmp_path, setup_path, using_infer_string):
def test_read_hdf_index_not_view(tmp_path, setup_path):
def test_read_hdf_iterator(tmp_path, setup_path):
def test_read_nokey(tmp_path, setup_path):
def test_read_nokey_table(tmp_path, setup_path):
def test_read_nokey_empty(tmp_path, setup_path):
def test_read_from_pathlib_path(tmp_path, setup_path):
def test_read_from_py_localpath(tmp_path, setup_path):
def test_read_hdf_series_mode_r(tmp_path, format, setup_path):
def test_read_py2_hdf_file_in_py3(datapath):
def test_read_infer_string(tmp_path, setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_retain_attributes.py
-----------------------------
def test_retain_index_attributes(setup_path, unit):
def test_retain_index_attributes2(tmp_path, setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_round_trip.py
-----------------------------
def test_conv_read_write():
def test_long_strings(setup_path):
def test_api(tmp_path, setup_path):
def test_api_append(tmp_path, setup_path):
def test_api_2(tmp_path, setup_path):
def test_api_invalid(tmp_path, setup_path):
def test_get(setup_path):
def test_put_integer(setup_path):
def test_table_values_dtypes_roundtrip(setup_path, using_infer_string):
def test_series(setup_path):
def test_float_index(setup_path):
def test_tuple_index(setup_path):
def test_index_types(setup_path):
def test_timeseries_preepoch(setup_path, request):
def test_frame(compression, setup_path):
def test_empty_series_frame(setup_path):
def test_empty_series(dtype, setup_path):
def test_can_serialize_dates(setup_path):
def test_store_hierarchical(
def test_store_mixed(compression, setup_path):
def _check_roundtrip(obj, comparator, path, compression=False, **kwargs):
def _check_roundtrip_table(obj, comparator, path, compression=False):
def test_unicode_index(setup_path):
def test_unicode_longer_encoded(setup_path):
def test_store_datetime_mixed(setup_path):
def test_round_trip_equals(tmp_path, setup_path):
def test_infer_string_columns(tmp_path, setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_select.py
-----------------------------
def test_select_columns_in_where(setup_path):
def test_select_with_dups(setup_path):
def test_select(setup_path):
def test_select_dtypes(setup_path):
def test_select_with_many_inputs(setup_path):
def test_select_iterator(tmp_path, setup_path):
def test_select_iterator_complete_8014(setup_path):
def test_select_iterator_non_complete_8014(setup_path):
def test_select_iterator_many_empty_frames(setup_path):
def test_frame_select(setup_path):
def test_frame_select_complex(setup_path):
def test_frame_select_complex2(tmp_path):
def test_invalid_filtering(setup_path):
def test_string_select(setup_path):
def test_select_as_multiple(setup_path):
def test_nan_selection_bug_4858(setup_path):
def test_query_with_nested_special_character(setup_path):
def test_query_long_float_literal(setup_path):
def test_query_compare_column_type(setup_path):
def test_select_empty_where(tmp_path, where):
def test_select_large_integer(tmp_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_store.py
-----------------------------
def test_context(setup_path):
def test_no_track_times(tmp_path, setup_path):
def test_iter_empty(setup_path):
def test_repr(setup_path, using_infer_string):
def test_contains(setup_path):
def test_versioning(setup_path):
def test_walk(where, expected):
def test_getattr(setup_path):
def test_store_dropna(tmp_path, setup_path):
def test_keyword_deprecation(tmp_path, setup_path):
def test_to_hdf_with_min_itemsize(tmp_path, setup_path):
def test_to_hdf_errors(tmp_path, format, setup_path, using_infer_string):
def test_create_table_index(setup_path):
def test_create_table_index_data_columns_argument(setup_path):
def test_mi_data_columns(setup_path):
def test_table_mixed_dtypes(setup_path):
def test_calendar_roundtrip_issue(setup_path):
def test_remove(setup_path):
def test_same_name_scoping(setup_path):
def test_store_index_name(setup_path):
def test_store_index_name_numpy_str(tmp_path, table_format, setup_path, unit, tz):
def test_store_series_name(setup_path):
def test_overwrite_node(setup_path):
def test_coordinates(setup_path):
def test_start_stop_table(setup_path):
def test_start_stop_multiple(setup_path):
def test_start_stop_fixed(setup_path):
def test_select_filter_corner(setup_path):
def test_path_pathlib():
def test_contiguous_mixed_data_table(start, stop, setup_path):
def test_path_pathlib_hdfstore():
def test_pickle_path_localpath():
def test_path_localpath_hdfstore():
def test_copy(propindexes):
def test_duplicate_column_name(tmp_path, setup_path):
def test_preserve_timedeltaindex_type(setup_path):
def test_columns_multiindex_modified(tmp_path, setup_path):
def test_to_hdf_with_object_column_names_should_fail(tmp_path, setup_path, columns):
def test_to_hdf_with_object_column_names_should_run(tmp_path, setup_path, dtype):
def test_hdfstore_strides(setup_path):
def test_store_bool_index(tmp_path, setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_subclass.py
-----------------------------
class TestHDFStoreSubclass:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_timezones.py
-----------------------------
def _compare_with_tz(a, b):
def test_append_with_timezones(setup_path, gettz):
def test_append_with_timezones_as_index(setup_path, gettz):
def test_roundtrip_tz_aware_index(setup_path, unit):
def test_store_index_name_with_tz(setup_path):
def test_tseries_select_index_column(setup_path):
def test_timezones_fixed_format_frame_non_empty(setup_path):
def test_timezones_fixed_format_empty(setup_path, tz_aware_fixture, frame_or_series):
def test_timezones_fixed_format_series_nonempty(setup_path, tz_aware_fixture):
def test_fixed_offset_tz(setup_path):
def test_store_timezone(setup_path):
def test_legacy_datetimetz_object(datapath):
def test_dst_transitions(setup_path):
def test_read_with_where_tz_aware_index(tmp_path, setup_path):
def test_py2_created_with_datetimez(datapath):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\test_time_series.py
-----------------------------
def test_store_datetime_fractional_secs(setup_path, unit):
def test_tseries_indices_series(setup_path):
def test_tseries_indices_frame(setup_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\pytables\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\sas\test_byteswap.py
-----------------------------
def test_int_byteswap(read_offset, number, int_type, should_byteswap):
def test_float_byteswap(read_offset, number, float_type, should_byteswap):
def _test(number, number_type, read_offset, should_byteswap):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\sas\test_sas.py
-----------------------------
class TestSas:
def test_sas_archive(datapath):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\sas\test_sas7bdat.py
-----------------------------
>     """Errors in RLE/RDC decompression should propagate."""
      with open(datapath("io", "sas", "data", test_file), "rb") as fd:
          data = bytearray(fd.read())
      data[override_offset] = override_value
def dirpath(datapath):
def data_test_ix(request, dirpath):
class TestSAS7BDAT:
def test_encoding_options(datapath):
def test_encoding_infer(datapath):
def test_productsales(datapath):
def test_12659(datapath):
def test_airline(datapath):
def test_date_time(datapath):
def test_compact_numerical_values(datapath, column):
def test_many_columns(datapath):
def test_inconsistent_number_of_rows(datapath):
def test_zero_variables(datapath):
def test_zero_rows(datapath, encoding):
def test_corrupt_read(datapath):
def test_max_sas_date(datapath):
def test_max_sas_date_iterator(datapath):
def test_null_date(datapath):
def test_meta2_page(datapath):
def test_rle_rdc_exceptions(
def test_0x40_control_byte(datapath):
def test_0x00_control_byte(datapath):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\sas\test_xport.py
-----------------------------
def numeric_as_float(data):
class TestXport:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\sas\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\xml\conftest.py
-----------------------------
def xml_data_path():
def xml_books(xml_data_path, datapath):
def xml_doc_ch_utf(xml_data_path, datapath):
def xml_baby_names(xml_data_path, datapath):
def kml_cta_rail_lines(xml_data_path, datapath):
def xsl_flatten_doc(xml_data_path, datapath):
def xsl_row_field_output(xml_data_path, datapath):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\xml\test_to_xml.py
-----------------------------
>     return """\
  <?xml version='1.0' encoding='utf-8'?>
  <data>
    <row>
def geom_df():
def planet_df():
def from_file_expected():
def equalize_decl(doc):
def mode(request):
def parser(request):
def test_file_output_str_read(xml_books, parser, from_file_expected):
def test_file_output_bytes_read(xml_books, parser, from_file_expected):
def test_str_output(xml_books, parser, from_file_expected):
def test_wrong_file_path(parser, geom_df):
def test_index_false(xml_books, parser):
def test_index_false_rename_row_root(xml_books, parser):
def test_index_false_with_offset_input_index(parser, offset_index, geom_df):
def test_na_elem_output(parser, geom_df):
def test_na_empty_str_elem_option(parser, geom_df):
def test_na_empty_elem_option(parser, geom_df):
def test_attrs_cols_nan_output(parser, geom_df):
def test_attrs_cols_prefix(parser, geom_df):
def test_attrs_unknown_column(parser, geom_df):
def test_attrs_wrong_type(parser, geom_df):
def test_elems_cols_nan_output(parser, geom_df):
def test_elems_unknown_column(parser, geom_df):
def test_elems_wrong_type(parser, geom_df):
def test_elems_and_attrs_cols(parser, geom_df):
def test_hierarchical_columns(parser, planet_df):
def test_hierarchical_attrs_columns(parser, planet_df):
def test_multi_index(parser, planet_df):
def test_multi_index_attrs_cols(parser, planet_df):
def test_default_namespace(parser, geom_df):
def test_unused_namespaces(parser, geom_df):
def test_namespace_prefix(parser, geom_df):
def test_missing_prefix_in_nmsp(parser, geom_df):
def test_namespace_prefix_and_default(parser, geom_df):
def test_encoding_option_str(xml_baby_names, parser):
def test_correct_encoding_file(xml_baby_names):
def test_wrong_encoding_option_lxml(xml_baby_names, parser, encoding):
def test_misspelled_encoding(parser, geom_df):
def test_xml_declaration_pretty_print(geom_df):
def test_no_pretty_print_with_decl(parser, geom_df):
def test_no_pretty_print_no_decl(parser, geom_df):
def test_default_parser_no_lxml(geom_df):
def test_unknown_parser(geom_df):
def test_stylesheet_file_like(xsl_row_field_output, mode, geom_df):
def test_stylesheet_io(xsl_row_field_output, mode, geom_df):
def test_stylesheet_buffered_reader(xsl_row_field_output, mode, geom_df):
def test_stylesheet_wrong_path(geom_df):
def test_empty_string_stylesheet(val, geom_df):
def test_incorrect_xsl_syntax(geom_df):
def test_incorrect_xsl_eval(geom_df):
def test_incorrect_xsl_apply(geom_df):
def test_stylesheet_with_etree(geom_df):
def test_style_to_csv(geom_df):
def test_style_to_string(geom_df):
def test_style_to_json(geom_df):
def test_compression_output(parser, compression_only, geom_df):
def test_filename_and_suffix_comp(
def test_ea_dtypes(any_numeric_ea_dtype, parser):
def test_unsuported_compression(parser, geom_df):
def test_s3_permission_output(parser, s3_public_bucket, geom_df):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\xml\test_xml.py
-----------------------------
> xml_default_nmsp = """\
  <?xml version='1.0' encoding='utf-8'?>
  <data xmlns="http://example.com">
    <row>
def test_literal_xml_deprecation():
def mode(request):
def parser(request):
def read_xml_iterparse(data, **kwargs):
def read_xml_iterparse_comp(comp_path, compression_only, **kwargs):
def test_parser_consistency_file(xml_books):
def test_parser_consistency_url(parser, httpserver):
def test_file_like(xml_books, parser, mode):
def test_file_io(xml_books, parser, mode):
def test_file_buffered_reader_string(xml_books, parser, mode):
def test_file_buffered_reader_no_xml_declaration(xml_books, parser, mode):
def test_string_charset(parser):
def test_file_charset(xml_doc_ch_utf, parser):
def test_file_handle_close(xml_books, parser):
def test_empty_string_lxml(val):
def test_empty_string_etree(val):
def test_wrong_file_path(parser):
def test_url(httpserver, xml_file):
def test_wrong_url(parser, httpserver):
def test_whitespace(parser):
def test_empty_xpath_lxml(xml_books):
def test_bad_xpath_etree(xml_books):
def test_bad_xpath_lxml(xml_books):
def test_default_namespace(parser):
def test_prefix_namespace(parser):
def test_consistency_default_namespace():
def test_consistency_prefix_namespace():
def test_missing_prefix_with_default_namespace(xml_books, parser):
def test_missing_prefix_definition_etree(kml_cta_rail_lines):
def test_missing_prefix_definition_lxml(kml_cta_rail_lines):
def test_none_namespace_prefix(key):
def test_file_elems_and_attrs(xml_books, parser):
def test_file_only_attrs(xml_books, parser):
def test_file_only_elems(xml_books, parser):
def test_elem_and_attrs_only(kml_cta_rail_lines, parser):
def test_empty_attrs_only(parser):
def test_empty_elems_only(parser):
def test_attribute_centric_xml():
def test_names_option_output(xml_books, parser):
def test_repeat_names(parser):
def test_repeat_values_new_names(parser):
def test_repeat_elements(parser):
def test_names_option_wrong_length(xml_books, parser):
def test_names_option_wrong_type(xml_books, parser):
def test_wrong_encoding(xml_baby_names, parser):
def test_utf16_encoding(xml_baby_names, parser):
def test_unknown_encoding(xml_baby_names, parser):
def test_ascii_encoding(xml_baby_names, parser):
def test_parser_consistency_with_encoding(xml_baby_names):
def test_wrong_encoding_for_lxml():
def test_none_encoding_etree():
def test_default_parser_no_lxml(xml_books):
def test_wrong_parser(xml_books):
def test_stylesheet_file(kml_cta_rail_lines, xsl_flatten_doc):
def test_stylesheet_file_like(kml_cta_rail_lines, xsl_flatten_doc, mode):
def test_stylesheet_io(kml_cta_rail_lines, xsl_flatten_doc, mode):
def test_stylesheet_buffered_reader(kml_cta_rail_lines, xsl_flatten_doc, mode):
def test_style_charset():
def test_not_stylesheet(kml_cta_rail_lines, xml_books):
def test_incorrect_xsl_syntax(kml_cta_rail_lines):
def test_incorrect_xsl_eval(kml_cta_rail_lines):
def test_incorrect_xsl_apply(kml_cta_rail_lines):
def test_wrong_stylesheet(kml_cta_rail_lines, xml_data_path):
def test_stylesheet_file_close(kml_cta_rail_lines, xsl_flatten_doc, mode):
def test_stylesheet_with_etree(kml_cta_rail_lines, xsl_flatten_doc):
def test_empty_stylesheet(val):
def test_file_like_iterparse(xml_books, parser, mode):
def test_file_io_iterparse(xml_books, parser, mode):
def test_url_path_error(parser, httpserver, xml_file):
def test_compression_error(parser, compression_only):
def test_wrong_dict_type(xml_books, parser):
def test_wrong_dict_value(xml_books, parser):
def test_bad_xml(parser):
def test_comment(parser):
def test_dtd(parser):
def test_processing_instruction(parser):
def test_no_result(xml_books, parser):
def test_empty_data(xml_books, parser):
def test_online_stylesheet():
def test_compression_read(parser, compression_only):
def test_wrong_compression(parser, compression, compression_only):
def test_unsuported_compression(parser):
def test_s3_parser_consistency(s3_public_bucket_with_data, s3so):
def test_read_xml_nullable_dtypes(
def test_invalid_dtype_backend():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\xml\test_xml_dtypes.py
-----------------------------
> xml_types = """\
  <?xml version='1.0' encoding='utf-8'?>
  <data>
    <row>
def parser(request):
def iterparse(request):
def read_xml_iterparse(data, **kwargs):
def test_dtype_single_str(parser):
def test_dtypes_all_str(parser):
def test_dtypes_with_names(parser):
def test_dtype_nullable_int(parser):
def test_dtype_float(parser):
def test_wrong_dtype(xml_books, parser, iterparse):
def test_both_dtype_converters(parser):
def test_converters_str(parser):
def test_converters_date(parser):
def test_wrong_converters_type(xml_books, parser, iterparse):
def test_callable_func_converters(xml_books, parser, iterparse):
def test_callable_str_converters(xml_books, parser, iterparse):
def test_parse_dates_column_name(parser):
def test_parse_dates_column_index(parser):
def test_parse_dates_true(parser):
def test_parse_dates_dictionary(parser):
def test_day_first_parse_dates(parser):
def test_wrong_parse_dates_type(xml_books, parser, iterparse):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\xml\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\conftest.py
-----------------------------
>     """Path to the tips dataset"""
      return datapath("io", "data", "csv", "tips.csv")
  
  
def compression_to_extension():
def tips_file(datapath):
def jsonl_file(datapath):
def salaries_table(datapath):
def feather_file(datapath):
def xml_file(datapath):
def s3_base(worker_id, monkeypatch):
def s3so(s3_base):
def s3_resource(s3_base):
def s3_public_bucket(s3_resource):
def s3_public_bucket_with_data(
def s3_private_bucket(s3_resource):
def s3_private_bucket_with_data(
def compression_format(request):
def compression_ext(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\generate_legacy_storage_files.py
-----------------------------
> """
  self-contained to write legacy storage pickle files
  
  To use this script. Create an environment where you want
def _create_sp_series():
def _create_sp_tsseries():
def _create_sp_frame():
def create_pickle_data():
def platform_name():
def write_legacy_pickles(output_dir):
def write_legacy_file():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_clipboard.py
-----------------------------
>     """
      Mocks WinError to help with testing the clipboard.
def build_kwargs(sep, excel):
def df(request):
def mock_ctypes(monkeypatch):
def test_checked_call_with_bad_call(monkeypatch):
def test_checked_call_with_valid_call(monkeypatch):
def test_stringify_text(text):
def set_pyqt_clipboard(monkeypatch):
def clipboard(qapp):
class TestClipboard:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_common.py
-----------------------------
> """
  Tests for the pandas.io.common functionalities
class CustomFSPath:
class TestCommonIOCapabilities:
def mmap_file(datapath):
class TestMMapWrapper:
def test_is_fsspec_url():
def test_codecs_encoding(encoding, format):
def test_codecs_get_writer_reader():
def test_explicit_encoding(io_class, mode, msg):
def test_encoding_errors(encoding_errors, format):
def test_bad_encdoing_errors():
def test_errno_attribute():
def test_fail_mmap():
def test_close_on_error():
def test_pickle_reader(reader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_compression.py
-----------------------------
>     """
      Binary file handles support compression.
  
      GH22555
def test_compression_size(obj, method, compression_only):
def test_compression_size_fh(obj, method, compression_only):
def test_dataframe_compression_defaults_to_infer(
def test_series_compression_defaults_to_infer(
def test_compression_warning(compression_only):
def test_compression_binary(compression_only):
def test_gzip_reproducibility_file_name():
def test_gzip_reproducibility_file_object():
def test_with_missing_lzma():
def test_with_missing_lzma_runtime():
def test_gzip_compression_level(obj, method):
def test_xz_compression_level_read(obj, method):
def test_bzip_compression_level(obj, method):
def test_empty_archive_zip(suffix, archive):
def test_ambiguous_archive_zip():
def test_ambiguous_archive_tar(tmp_path):
def test_tar_gz_to_different_filename():
def test_tar_no_error_on_close():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_feather.py
-----------------------------
> """ test feather-format compat """
  import numpy as np
  import pytest
  
class TestFeather:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_fsspec.py
-----------------------------
>     """Regression test for writing to a not-yet-existent GCS Parquet file."""
      pytest.importorskip("fastparquet")
  
      df1.to_parquet(
def fsspectest():
def df1():
def cleared_fs():
def test_read_csv(cleared_fs, df1):
def test_reasonable_error(monkeypatch, cleared_fs):
def test_to_csv(cleared_fs, df1):
def test_to_excel(cleared_fs, df1):
def test_to_csv_fsspec_object(cleared_fs, binary_mode, df1):
def test_csv_options(fsspectest):
def test_read_table_options(fsspectest):
def test_excel_options(fsspectest):
def test_to_parquet_new_file(cleared_fs, df1):
def test_arrowparquet_options(fsspectest):
def test_fastparquet_options(fsspectest):
def test_from_s3_csv(s3_public_bucket_with_data, tips_file, s3so):
def test_s3_protocols(s3_public_bucket_with_data, tips_file, protocol, s3so):
def test_s3_parquet(s3_public_bucket, s3so, df1):
def test_not_present_exception():
def test_feather_options(fsspectest):
def test_pickle_options(fsspectest):
def test_json_options(fsspectest, compression):
def test_stata_options(fsspectest):
def test_markdown_options(fsspectest):
def test_non_fsspec_options():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_gbq.py
-----------------------------
def test_read_gbq_deprecated():
def test_to_gbq_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_gcs.py
-----------------------------
>     """Emulate GCS using a binary buffer."""
      pytest.importorskip("gcsfs")
      fsspec = pytest.importorskip("fsspec")
  
def gcs_buffer():
def test_to_read_gcs(gcs_buffer, format, monkeypatch, capsys, request):
def assert_equal_zip_safe(result: bytes, expected: bytes, compression: str):
def test_to_csv_compression_encoding_gcs(
def test_to_parquet_gcs_new_file(monkeypatch, tmpdir):
def test_gcs_not_present_exception():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_html.py
-----------------------------
>     """Parametrized fixture for HTML encoding test filenames."""
      return datapath("io", "data", "html_encoding", request.param)
  
  
def html_encoding_file(request, datapath):
def assert_framelist_equal(list1, list2, *args, **kwargs):
def test_bs4_version_fails(monkeypatch, datapath):
def test_invalid_flavor():
def test_same_ordering(datapath):
def flavor_read_html(request):
class TestReadHtml:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_http_headers.py
-----------------------------
> """
  Tests for the pandas custom headers in http(s) requests
def gzip_bytes(response_bytes):
def csv_responder(df):
def gz_csv_responder(df):
def json_responder(df):
def gz_json_responder(df):
def html_responder(df):
def parquetpyarrow_reponder(df):
def parquetfastparquet_responder(df):
def pickle_respnder(df):
def stata_responder(df):
def test_request_headers(responder, read_method, httpserver, storage_options):
def test_to_parquet_to_disk_with_storage_options(engine):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_orc.py
-----------------------------
> """ test orc compat """
  import datetime
  from decimal import Decimal
  from io import BytesIO
def dirpath(datapath):
def orc_writer_dtypes_not_supported(request):
def test_orc_reader_empty(dirpath, using_infer_string):
def test_orc_reader_basic(dirpath):
def test_orc_reader_decimal(dirpath):
def test_orc_reader_date_low(dirpath):
def test_orc_reader_date_high(dirpath):
def test_orc_reader_snappy_compressed(dirpath):
def test_orc_roundtrip_file(dirpath):
def test_orc_roundtrip_bytesio():
def test_orc_writer_dtypes_not_supported(orc_writer_dtypes_not_supported):
def test_orc_dtype_backend_pyarrow(using_infer_string):
def test_orc_dtype_backend_numpy_nullable():
def test_orc_uri_path():
def test_to_orc_non_default_index(index):
def test_invalid_dtype_backend():
def test_string_inference(tmp_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_parquet.py
-----------------------------
> """ test parquet compat """
  import datetime
  from decimal import Decimal
  from io import BytesIO
def engine(request):
def pa():
def fp(request):
def df_compat():
def df_cross_compat():
def df_full():
def timezone_aware_date_list(request):
def check_round_trip(
def check_partition_names(path, expected):
def test_invalid_engine(df_compat):
def test_options_py(df_compat, pa, using_infer_string):
def test_options_fp(df_compat, fp):
def test_options_auto(df_compat, fp, pa):
def test_options_get_engine(fp, pa):
def test_get_engine_auto_error_message():
def test_cross_engine_pa_fp(df_cross_compat, pa, fp):
def test_cross_engine_fp_pa(df_cross_compat, pa, fp):
def test_parquet_pos_args_deprecation(engine):
class Base:
class TestBasic(Base):
class TestParquetPyArrow(Base):
class TestParquetFastParquet(Base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_pickle.py
-----------------------------
> """
  manage legacy pickle tests
  
  How to add pickle tests:
def compare_element(result, expected, typ):
def test_flatten_buffer(data):
def test_pickles(datapath):
def python_pickler(obj, path):
def python_unpickler(path):
def flatten(data: dict) -> list[tuple[str, Any]]:
def test_round_trip_current(typ, expected, pickle_writer, writer):
def test_pickle_path_pathlib():
def test_pickle_path_localpath():
def get_random_path():
class TestCompression:
class TestProtocol:
def test_unicode_decode_error(datapath, pickle_file, excols):
def test_pickle_buffer_roundtrip():
def test_pickle_generalurl_read(monkeypatch, mockurl):
def test_pickle_fsspec_roundtrip():
class MyTz(datetime.tzinfo):
def test_read_pickle_with_subclass():
def test_pickle_binary_object_compression(compression):
def test_pickle_dataframe_with_multilevel_index(
def test_pickle_timeseries_periodindex():
def test_pickle_preserve_name(name):
def test_pickle_datetimes(datetime_series):
def test_pickle_strings(string_series):
def test_pickle_preserves_block_ndim():
def test_pickle_big_dataframe_compression(protocol, compression):
def test_pickle_frame_v124_unpickle_130(datapath):
def test_pickle_pos_args_deprecation():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_s3.py
-----------------------------
def test_streaming_s3_objects():
def test_read_without_creds_from_pub_bucket(s3_public_bucket_with_data, s3so):
def test_read_with_creds_from_pub_bucket(s3_public_bucket_with_data, s3so):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_spss.py
-----------------------------
def test_spss_labelled_num(path_klass, datapath):
def test_spss_labelled_num_na(datapath):
def test_spss_labelled_str(datapath):
def test_spss_umlauts(datapath):
def test_spss_usecols(datapath):
def test_spss_umlauts_dtype_backend(datapath, dtype_backend):
def test_invalid_dtype_backend():
def test_spss_metadata(datapath):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_sql.py
-----------------------------
>             "sqlite": """
                  SELECT * FROM iris WHERE Name=:name AND SepalLength=:length
def sql_strings():
def iris_table_metadata():
def create_and_load_iris_sqlite3(conn, iris_file: Path):
def create_and_load_iris_postgresql(conn, iris_file: Path):
def create_and_load_iris(conn, iris_file: Path):
def create_and_load_iris_view(conn):
def types_table_metadata(dialect: str):
def create_and_load_types_sqlite3(conn, types_data: list[dict]):
def create_and_load_types_postgresql(conn, types_data: list[dict]):
def create_and_load_types(conn, types_data: list[dict], dialect: str):
def create_and_load_postgres_datetz(conn):
def check_iris_frame(frame: DataFrame):
def count_rows(conn, table_name: str):
def iris_path(datapath):
def types_data():
def types_data_frame(types_data):
def test_frame1():
def test_frame3():
def get_all_views(conn):
def get_all_tables(conn):
def drop_table(
def drop_view(
def mysql_pymysql_engine():
def mysql_pymysql_engine_iris(mysql_pymysql_engine, iris_path):
def mysql_pymysql_engine_types(mysql_pymysql_engine, types_data):
def mysql_pymysql_conn(mysql_pymysql_engine):
def mysql_pymysql_conn_iris(mysql_pymysql_engine_iris):
def mysql_pymysql_conn_types(mysql_pymysql_engine_types):
def postgresql_psycopg2_engine():
def postgresql_psycopg2_engine_iris(postgresql_psycopg2_engine, iris_path):
def postgresql_psycopg2_engine_types(postgresql_psycopg2_engine, types_data):
def postgresql_psycopg2_conn(postgresql_psycopg2_engine):
def postgresql_adbc_conn():
def postgresql_adbc_iris(postgresql_adbc_conn, iris_path):
def postgresql_adbc_types(postgresql_adbc_conn, types_data):
def postgresql_psycopg2_conn_iris(postgresql_psycopg2_engine_iris):
def postgresql_psycopg2_conn_types(postgresql_psycopg2_engine_types):
def sqlite_str():
def sqlite_engine(sqlite_str):
def sqlite_conn(sqlite_engine):
def sqlite_str_iris(sqlite_str, iris_path):
def sqlite_engine_iris(sqlite_engine, iris_path):
def sqlite_conn_iris(sqlite_engine_iris):
def sqlite_str_types(sqlite_str, types_data):
def sqlite_engine_types(sqlite_engine, types_data):
def sqlite_conn_types(sqlite_engine_types):
def sqlite_adbc_conn():
def sqlite_adbc_iris(sqlite_adbc_conn, iris_path):
def sqlite_adbc_types(sqlite_adbc_conn, types_data):
def sqlite_buildin():
def sqlite_buildin_iris(sqlite_buildin, iris_path):
def sqlite_buildin_types(sqlite_buildin, types_data):
def test_dataframe_to_sql(conn, test_frame1, request):
def test_dataframe_to_sql_empty(conn, test_frame1, request):
def test_dataframe_to_sql_arrow_dtypes(conn, request):
def test_dataframe_to_sql_arrow_dtypes_missing(conn, request, nulls_fixture):
def test_to_sql(conn, method, test_frame1, request):
def test_to_sql_exist(conn, mode, num_row_coef, test_frame1, request):
def test_to_sql_exist_fail(conn, test_frame1, request):
def test_read_iris_query(conn, request):
def test_read_iris_query_chunksize(conn, request):
def test_read_iris_query_expression_with_parameter(conn, request):
def test_read_iris_query_string_with_parameter(conn, request, sql_strings):
def test_read_iris_table(conn, request):
def test_read_iris_table_chunksize(conn, request):
def test_to_sql_callable(conn, test_frame1, request):
def test_default_type_conversion(conn, request):
def test_read_procedure(conn, request):
def test_copy_from_callable_insertion_method(conn, expected_count, request):
def test_insertion_method_on_conflict_do_nothing(conn, request):
def test_to_sql_on_public_schema(conn, request):
def test_insertion_method_on_conflict_update(conn, request):
def test_read_view_postgres(conn, request):
def test_read_view_sqlite(sqlite_buildin):
def test_execute_typeerror(sqlite_engine_iris):
def test_execute_deprecated(sqlite_conn_iris):
def flavor(conn_name):
def test_read_sql_iris_parameter(conn, request, sql_strings):
def test_read_sql_iris_named_parameter(conn, request, sql_strings):
def test_read_sql_iris_no_parameter_with_percent(conn, request, sql_strings):
def test_api_read_sql_view(conn, request):
def test_api_read_sql_with_chunksize_no_result(conn, request):
def test_api_to_sql(conn, request, test_frame1):
def test_api_to_sql_fail(conn, request, test_frame1):
def test_api_to_sql_replace(conn, request, test_frame1):
def test_api_to_sql_append(conn, request, test_frame1):
def test_api_to_sql_type_mapping(conn, request, test_frame3):
def test_api_to_sql_series(conn, request):
def test_api_roundtrip(conn, request, test_frame1):
def test_api_roundtrip_chunksize(conn, request, test_frame1):
def test_api_execute_sql(conn, request):
def test_api_date_parsing(conn, request):
def test_api_custom_dateparsing_error(
def test_api_date_and_index(conn, request):
def test_api_timedelta(conn, request):
def test_api_complex_raises(conn, request):
def test_api_to_sql_index_label(conn, request, index_name, index_label, expected):
def test_api_to_sql_index_label_multiindex(conn, request):
def test_api_multiindex_roundtrip(conn, request):
def test_api_dtype_argument(conn, request, dtype):
def test_api_integer_col_names(conn, request):
def test_api_get_schema(conn, request, test_frame1):
def test_api_get_schema_with_schema(conn, request, test_frame1):
def test_api_get_schema_dtypes(conn, request):
def test_api_get_schema_keys(conn, request, test_frame1):
def test_api_chunksize_read(conn, request):
def test_api_categorical(conn, request):
def test_api_unicode_column_name(conn, request):
def test_api_escaped_table_name(conn, request):
def test_api_read_sql_duplicate_columns(conn, request):
def test_read_table_columns(conn, request, test_frame1):
def test_read_table_index_col(conn, request, test_frame1):
def test_read_sql_delegate(conn, request):
def test_not_reflect_all_tables(sqlite_conn):
def test_warning_case_insensitive_table_name(conn, request, test_frame1):
def test_sqlalchemy_type_mapping(conn, request):
def test_sqlalchemy_integer_mapping(conn, request, integer, expected):
def test_sqlalchemy_integer_overload_mapping(conn, request, integer):
def test_database_uri_string(conn, request, test_frame1):
def test_pg8000_sqlalchemy_passthrough_error(conn, request):
def test_query_by_text_obj(conn, request):
def test_query_by_select_obj(conn, request):
def test_column_with_percentage(conn, request):
def test_sql_open_close(test_frame3):
def test_con_string_import_error():
def test_con_unknown_dbapi2_class_does_not_error_without_sql_alchemy_installed():
def test_sqlite_read_sql_delegate(sqlite_buildin_iris):
def test_get_schema2(test_frame1):
def test_sqlite_type_mapping(sqlite_buildin):
def test_create_table(conn, request):
def test_drop_table(conn, request):
def test_roundtrip(conn, request, test_frame1):
def test_execute_sql(conn, request):
def test_sqlalchemy_read_table(conn, request):
def test_sqlalchemy_read_table_columns(conn, request):
def test_read_table_absent_raises(conn, request):
def test_sqlalchemy_default_type_conversion(conn, request):
def test_bigint(conn, request):
def test_default_date_load(conn, request):
def test_datetime_with_timezone_query(conn, request, parse_dates):
def test_datetime_with_timezone_query_chunksize(conn, request):
def test_datetime_with_timezone_table(conn, request):
def test_datetime_with_timezone_roundtrip(conn, request):
def test_out_of_bounds_datetime(conn, request):
def test_naive_datetimeindex_roundtrip(conn, request):
def test_date_parsing(conn, request):
def test_datetime(conn, request):
def test_datetime_NaT(conn, request):
def test_datetime_date(conn, request):
def test_datetime_time(conn, request, sqlite_buildin):
def test_mixed_dtype_insert(conn, request):
def test_nan_numeric(conn, request):
def test_nan_fullcolumn(conn, request):
def test_nan_string(conn, request):
def test_to_sql_save_index(conn, request):
def test_transactions(conn, request):
def test_transaction_rollback(conn, request):
def test_get_schema_create_table(conn, request, test_frame3):
def test_dtype(conn, request):
def test_notna_dtype(conn, request):
def test_double_precision(conn, request):
def test_connectable_issue_example(conn, request):
def test_to_sql_with_negative_npinf(conn, request, input):
def test_temporary_table(conn, request):
def test_invalid_engine(conn, request, test_frame1):
def test_to_sql_with_sql_engine(conn, request, test_frame1):
def test_options_sqlalchemy(conn, request, test_frame1):
def test_options_auto(conn, request, test_frame1):
def test_options_get_engine():
def test_get_engine_auto_error_message():
def test_read_sql_dtype_backend(
def test_read_sql_dtype_backend_table(
def test_read_sql_invalid_dtype_backend_table(conn, request, func, dtype_backend_data):
def dtype_backend_data() -> DataFrame:
def dtype_backend_expected():
def test_chunksize_empty_dtypes(conn, request):
def test_read_sql_dtype(conn, request, func, dtype_backend):
def test_keyword_deprecation(sqlite_engine):
def test_bigint_warning(sqlite_engine):
def test_valueerror_exception(sqlite_engine):
def test_row_object_is_named_tuple(sqlite_engine):
def test_read_sql_string_inference(sqlite_engine):
def test_roundtripping_datetimes(sqlite_engine):
def sqlite_builtin_detect_types():
def test_roundtripping_datetimes_detect_types(sqlite_builtin_detect_types):
def test_psycopg2_schema_support(postgresql_psycopg2_engine):
def test_self_join_date_columns(postgresql_psycopg2_engine):
def test_create_and_drop_table(sqlite_engine):
def test_sqlite_datetime_date(sqlite_buildin):
def test_sqlite_datetime_time(tz_aware, sqlite_buildin):
def get_sqlite_column_type(conn, table, column):
def test_sqlite_test_dtype(sqlite_buildin):
def test_sqlite_notna_dtype(sqlite_buildin):
def test_sqlite_illegal_names(sqlite_buildin):
def format_query(sql, *args):
def tquery(query, con=None):
def test_xsqlite_basic(sqlite_buildin):
def test_xsqlite_write_row_by_row(sqlite_buildin):
def test_xsqlite_execute(sqlite_buildin):
def test_xsqlite_schema(sqlite_buildin):
def test_xsqlite_execute_fail(sqlite_buildin):
def test_xsqlite_execute_closed_connection():
def test_xsqlite_keyword_as_column_names(sqlite_buildin):
def test_xsqlite_onecolumn_of_integer(sqlite_buildin):
def test_xsqlite_if_exists(sqlite_buildin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\test_stata.py
-----------------------------
>         """
          Emulate the categorical casting behavior we expect from roundtripping.
def mixed_frame():
def parsed_114(datapath):
class TestStata:
def test_backward_compat(version, datapath):
def test_direct_read(datapath, monkeypatch):
def test_statareader_warns_when_used_without_context(datapath):
def test_compression(compression, version, use_dict, infer, compression_to_extension):
def test_compression_dict(method, file_ext):
def test_chunked_categorical(version):
def test_chunked_categorical_partial(datapath):
def test_iterator_errors(datapath, chunksize):
def test_iterator_value_labels():
def test_precision_loss():
def test_compression_roundtrip(compression):
def test_stata_compression(
def test_non_categorical_value_labels():
def test_non_categorical_value_label_name_conversion():
def test_non_categorical_value_label_convert_categoricals_error():
def test_nullable_support(dtype, version):
def test_empty_frame():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\io\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\libs\test_hashtable.py
-----------------------------
def activated_tracemalloc() -> Generator[None, None, None]:
def get_allocated_khash_memory():
class TestHashTable:
class TestHashTableUnsorted:
class TestPyObjectHashTableWithNans:
def test_hash_equal_tuple_with_nans():
def test_get_labels_groupby_for_Int64(writable):
def test_tracemalloc_works_for_StringHashTable():
def test_tracemalloc_for_empty_StringHashTable():
def test_no_reallocation_StringHashTable(N):
class TestHashTableWithNans:
def test_unique_for_nan_objects_floats():
def test_unique_for_nan_objects_complex():
def test_unique_for_nan_objects_tuple():
class TestHelpFunctions:
def test_modes_with_nans():
def test_unique_label_indices_intp(writable):
def test_unique_label_indices():
class TestHelpFunctionsWithNans:
def test_ismember_tuple_with_nans():
def test_float_complex_int_are_equal_as_objects():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\libs\test_join.py
-----------------------------
class TestIndexer:
def test_left_join_indexer_unique(readonly):
def test_left_outer_join_bug():
def test_inner_join_indexer():
def test_outer_join_indexer():
def test_left_join_indexer():
def test_left_join_indexer2():
def test_outer_join_indexer2():
def test_inner_join_indexer2():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\libs\test_lib.py
-----------------------------
class TestMisc:
class TestIndexing:
def test_cache_readonly_preserve_docstrings():
def test_no_default_pickle():
def test_ensure_string_array_copy():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\libs\test_libalgos.py
-----------------------------
def test_ensure_platform_int():
def test_is_lexsorted():
def test_groupsort_indexer():
class TestPadBackfill:
class TestInfinity:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\libs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame.py
-----------------------------
> """ Test cases for DataFrame.plot """
  from datetime import (
      date,
      datetime,
class TestDataFramePlots:
def _generate_4_axes_via_gridspec():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame_color.py
-----------------------------
> """ Test cases for DataFrame.plot """
  import re
  
  import numpy as np
def _check_colors_box(bp, box_c, whiskers_c, medians_c, caps_c="k", fliers_c=None):
class TestDataFrameColor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame_groupby.py
-----------------------------
> """ Test cases for DataFrame.plot """
  
  import pytest
  
class TestDataFramePlotsGroupby:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame_legend.py
-----------------------------
class TestFrameLegend:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_frame_subplots.py
-----------------------------
> """ Test cases for DataFrame.plot """
  
  import string
  
class TestDataFramePlotsSubplots:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\test_hist_box_by.py
-----------------------------
def hist_df():
class TestHistWithBy:
class TestBoxWithBy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\frame\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\common.py
-----------------------------
> """
  Module consolidating common testing functions for checking plotting.
def _check_legend_labels(axes, labels=None, visible=True):
def _check_legend_marker(ax, expected_markers=None, visible=True):
def _check_data(xp, rs):
def _check_visible(collections, visible=True):
def _check_patches_all_filled(axes: Axes | Sequence[Axes], filled: bool = True) -> None:
def _get_colors_mapped(series, colors):
def _check_colors(collections, linecolors=None, facecolors=None, mapping=None):
def _check_text_labels(texts, expected):
def _check_ticks_props(axes, xlabelsize=None, xrot=None, ylabelsize=None, yrot=None):
def _check_ax_scales(axes, xaxis="linear", yaxis="linear"):
def _check_axes_shape(axes, axes_num=None, layout=None, figsize=None):
def _flatten_visible(axes: Axes | Sequence[Axes]) -> Sequence[Axes]:
def _check_has_errorbars(axes, xerr=0, yerr=0):
def _check_box_return_type(
def _check_grid_settings(obj, kinds, kws={}):
def _unpack_cycler(rcParams, field="color"):
def get_x_axis(ax):
def get_y_axis(ax):
def _check_plot_works(f, default_axes=False, **kwargs):
def _gen_default_plot(f, fig, **kwargs):
def _gen_two_subplots(f, fig, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\conftest.py
-----------------------------
def mpl_cleanup():
def hist_df():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_backend.py
-----------------------------
>     """Restore the plotting backend to matplotlib"""
      with pandas.option_context("plotting.backend", "matplotlib"):
          yield
  
def dummy_backend():
def restore_backend():
def test_backend_is_not_module():
def test_backend_is_correct(monkeypatch, restore_backend, dummy_backend):
def test_backend_can_be_set_in_plot_call(monkeypatch, restore_backend, dummy_backend):
def test_register_entrypoint(restore_backend, tmp_path, monkeypatch, dummy_backend):
def test_setting_backend_without_plot_raises(monkeypatch):
def test_no_matplotlib_ok():
def test_extra_kinds_ok(monkeypatch, restore_backend, dummy_backend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_boxplot_method.py
-----------------------------
> """ Test cases for .boxplot method """
  
  from __future__ import annotations
  
def _check_ax_limits(col, ax):
def vert(request):
class TestDataFramePlots:
class TestDataFrameGroupByPlots:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_common.py
-----------------------------
>             """
              AB
              CC
class TestCommon:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_converter.py
-----------------------------
>     """Test timedelta converter"""
  
      @pytest.mark.parametrize(
          "x, decimal, format_expected",
def test_registry_mpl_resets():
def test_timtetonum_accepts_unicode():
class TestRegistration:
class TestDateTimeConverter:
class TestPeriodConverter:
class TestTimeDeltaConverter:
def test_quarterly_finder(year_span):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_datetimelike.py
-----------------------------
> """ Test cases for time series specific (freq conversion, etc) """
  from datetime import (
      date,
      datetime,
class TestTSPlot:
def _check_plot_works(f, freq=None, series=None, *args, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_groupby.py
-----------------------------
> """ Test cases for GroupBy.plot """
  
  
  import numpy as np
class TestDataFrameGroupByPlots:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_hist_method.py
-----------------------------
> """ Test cases for .hist method """
  import re
  
  import numpy as np
def ts():
class TestSeriesPlots:
class TestDataFramePlots:
class TestDataFrameGroupByPlots:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_misc.py
-----------------------------
> """ Test cases for misc plot functions """
  import os
  
  import numpy as np
def iris(datapath) -> DataFrame:
def test_import_error_message():
def test_get_accessor_args():
def test_savefig(kind, data, index):
class TestSeriesPlots:
class TestDataFramePlots:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_series.py
-----------------------------
> """ Test cases for Series.plot """
  from datetime import datetime
  from itertools import chain
  
def ts():
def series():
class TestSeriesPlots:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\test_style.py
-----------------------------
class TestGetStandardColors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\plotting\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reductions\test_reductions.py
-----------------------------
>         """
          Cases where ``Series.argmax`` and related should raise an exception
def get_objs():
class TestReductions:
class TestIndexReductions:
class TestSeriesReductions:
class TestDatetime64SeriesReductions:
class TestCategoricalSeriesReductions:
class TestSeriesMode:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reductions\test_stat_reductions.py
-----------------------------
> """
  Tests for statistical reductions of 2nd moment or higher: var, skew, kurt, ...
class TestDatetimeLikeStatReductions:
class TestSeriesStatReductions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reductions\__init__.py
-----------------------------
> """
  Tests for reductions where we want to test for matching behavior across
  Array, Index, Series, and DataFrame methods.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\conftest.py
-----------------------------
>     """Fixture for parametrization of Grouper downsample methods."""
      return request.param
  
  
def downsample_method(request):
def resample_method(request):
def _index_start():
def _index_end():
def _index_freq():
def _index_name():
def index(_index_factory, _index_start, _index_end, _index_freq, _index_name):
def _static_values(index):
def _series_name():
def series(index, _series_name, _static_values):
def empty_series_dti(series):
def frame(index, _series_name, _static_values):
def empty_frame_dti(series):
def series_and_frame(frame_or_series, series, frame):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_base.py
-----------------------------
>         """return the _index_factory created using the args, kwargs"""
          return _index_factory(*args, **kwargs)
  
      return _create_index
def create_index(_index_factory):
def test_asfreq(series_and_frame, freq, create_index):
def test_asfreq_fill_value(series, create_index):
def test_resample_interpolate(frame):
def test_raises_on_non_datetimelike_index():
def test_resample_empty_series(freq, empty_series_dti, resample_method):
def test_resample_empty_sum_string(string_dtype_no_object, min_count):
def test_resample_nat_index_series(freq, series, resample_method):
def test_resample_count_empty_series(freq, empty_series_dti, resample_method):
def test_resample_empty_dataframe(empty_frame_dti, freq, resample_method):
def test_resample_count_empty_dataframe(freq, empty_frame_dti):
def test_resample_size_empty_dataframe(freq, empty_frame_dti):
def test_resample_empty_dtypes(index, dtype, resample_method):
def test_apply_to_empty_series(empty_series_dti, freq):
def test_resampler_is_iterable(series):
def test_resample_quantile(series):
def test_first_last_skipna(any_real_nullable_dtype, skipna, how):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_datetime_index.py
-----------------------------
>     """
      Series with date range index and random data for test purposes.
def _index_factory():
def _index_freq():
def _static_values(index):
def unit(request):
def simple_date_range_series():
def test_custom_grouper(index, unit):
def test_custom_grouper_df(index, unit):
def test_resample_basic(series, closed, expected, unit):
def test_resample_integerarray(unit):
def test_resample_basic_grouper(series, unit):
def test_resample_string_kwargs(series, keyword, value, unit):
def test_resample_how(series, downsample_method, unit):
def test_resample_how_ohlc(series, unit):
def test_resample_how_callables(unit):
def test_resample_rounding(unit):
def test_resample_basic_from_daily(unit):
def test_resample_upsampling_picked_but_not_correct(unit):
def test_resample_frame_basic_cy_funcs(f, unit):
def test_resample_frame_basic_M_A(freq, unit):
def test_resample_frame_basic_kind(freq, unit):
def test_resample_upsample(unit):
def test_resample_how_method(unit):
def test_resample_extra_index_point(unit):
def test_upsample_with_limit(unit):
def test_nearest_upsample_with_limit(tz_aware_fixture, freq, rule, unit):
def test_resample_ohlc(series, unit):
def test_resample_ohlc_result(unit):
def test_resample_ohlc_result_odd_period(unit):
def test_resample_ohlc_dataframe(unit):
def test_resample_dup_index():
def test_resample_reresample(unit):
def test_resample_timestamp_to_period(
def test_ohlc_5min(unit):
def test_downsample_non_unique(unit):
def test_asfreq_non_unique(unit):
def test_resample_axis1(unit):
def test_resample_anchored_ticks(freq, unit):
def test_resample_single_group(end, unit):
def test_resample_single_group_std(unit):
def test_resample_offset(unit):
def test_resample_origin(kwargs, unit):
def test_resample_bad_origin(origin, unit):
def test_resample_bad_offset(offset, unit):
def test_resample_origin_prime_freq(unit):
def test_resample_origin_with_tz(unit):
def test_resample_origin_epoch_with_tz_day_vs_24h(unit):
def test_resample_origin_with_day_freq_on_dst(unit):
def test_resample_daily_anchored(unit):
def test_resample_to_period_monthly_buglet(unit):
def test_period_with_agg():
def test_resample_segfault(unit):
def test_resample_dtype_preservation(unit):
def test_resample_dtype_coercion(unit):
def test_weekly_resample_buglet(unit):
def test_monthly_resample_error(unit):
def test_nanosecond_resample_error():
def test_resample_anchored_intraday(unit):
def test_resample_anchored_intraday2(unit):
def test_resample_anchored_intraday3(simple_date_range_series, unit):
def test_resample_anchored_monthstart(simple_date_range_series, freq, unit):
def test_resample_anchored_multiday(label, sec):
def test_corner_cases(unit):
def test_corner_cases_date(simple_date_range_series, unit):
def test_anchored_lowercase_buglet(unit):
def test_upsample_apply_functions(unit):
def test_resample_not_monotonic(unit):
def test_resample_median_bug_1688(dtype, unit):
def test_how_lambda_functions(simple_date_range_series, unit):
def test_resample_unequal_times(unit):
def test_resample_consistency(unit):
def test_resample_timegrouper(dates, unit):
def test_resample_timegrouper2(dates, unit):
def test_resample_nunique(unit):
def test_resample_nunique_preserves_column_level_names(unit):
def test_resample_nunique_with_date_gap(func, unit):
def test_resample_group_info(n, k, unit):
def test_resample_size(unit):
def test_resample_across_dst():
def test_groupby_with_dst_time_change(unit):
def test_resample_dst_anchor(unit):
def test_resample_dst_anchor2(unit):
def test_downsample_across_dst(unit):
def test_downsample_across_dst_weekly(unit):
def test_downsample_across_dst_weekly_2(unit):
def test_downsample_dst_at_midnight(unit):
def test_resample_with_nat(unit):
def test_resample_datetime_values(unit):
def test_resample_apply_with_additional_args(series, unit):
def test_resample_apply_with_additional_args2():
def test_resample_equivalent_offsets(n1, freq1, n2, freq2, k, unit):
def test_get_timestamp_range_edges(first, last, freq, exp_first, exp_last, unit):
def test_resample_apply_product(duplicates, unit):
def test_resample_calendar_day_with_dst(
def test_resample_aggregate_functions_min_count(func, unit):
def test_resample_unsigned_int(any_unsigned_int_numpy_dtype, unit):
def test_long_rule_non_nano():
def test_resample_empty_series_with_tz():
def test_resample_M_Q_Y_A_deprecated(freq, freq_depr):
def test_resample_BM_BQ_deprecated(freq, freq_depr):
def test_resample_ms_closed_right(unit):
def test_resample_c_b_closed_right(freq: str, unit):
def test_resample_b_55282(unit):
def test_arrow_timestamp_resample(tz):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_period_index.py
-----------------------------
>     """
      Series with period range index and random data for test purposes.
def _index_factory():
def _series_name():
def simple_period_range_series():
class TestPeriodIndex:
def test_resample_frequency_ME_QE_YE_error_message(series_and_frame, freq, freq_depr):
def test_corner_cases_period(simple_period_range_series):
def test_resample_frequency_invalid_freq(series_and_frame, freq_depr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_resampler_grouper.py
-----------------------------
>         """\
      import numpy as np
      from pandas import Series, date_range
      data = np.arange(10, dtype=np.float64)
def test_frame():
def test_tab_complete_ipython6_warning(ip):
def test_deferred_with_groupby():
def test_getitem(test_frame):
def test_getitem_multiple():
def test_groupby_resample_on_api_with_getitem():
def test_groupby_with_origin():
def test_nearest():
def test_methods(f, test_frame):
def test_methods_nunique(test_frame):
def test_methods_std_var(f, test_frame):
def test_apply(test_frame):
def test_apply_with_mutated_index():
def test_apply_columns_multilevel():
def test_apply_non_naive_index():
def test_resample_groupby_with_label(unit):
def test_consistency_with_window(test_frame):
def test_median_duplicate_columns():
def test_apply_to_one_column_of_df():
def test_resample_groupby_agg():
def test_resample_groupby_agg_listlike():
def test_empty(keys):
def test_resample_groupby_agg_object_dtype_all_nan(consolidate):
def test_groupby_resample_empty_sum_string(
def test_groupby_resample_with_list_of_keys():
def test_resample_no_index(keys):
def test_resample_no_columns():
def test_groupby_resample_size_all_index_same():
def test_groupby_resample_on_index_with_list_of_keys():
def test_groupby_resample_on_index_with_list_of_keys_multi_columns():
def test_groupby_resample_on_index_with_list_of_keys_missing_column():
def test_groupby_resample_kind(kind):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_resample_api.py
-----------------------------
def dti():
def _test_series(dti):
def test_frame(dti, _test_series):
def test_str(_test_series):
def test_api(_test_series):
def test_groupby_resample_api():
def test_groupby_resample_on_api():
def test_resample_group_keys():
def test_pipe(test_frame, _test_series):
def test_getitem(test_frame):
def test_select_bad_cols(key, test_frame):
def test_attribute_access(test_frame):
def test_api_compat_before_use(attr):
def tests_raises_on_nuisance(test_frame, using_infer_string):
def test_downsample_but_actually_upsampling():
def test_combined_up_downsampling_of_irregular():
def test_transform_series(_test_series):
def test_transform_frame(on):
def test_fillna():
def test_apply_without_aggregation(func, _test_series):
def test_apply_without_aggregation2(_test_series):
def test_agg_consistency():
def test_agg_consistency_int_str_column_mix():
def index():
def df(index):
def df_col(df):
def df_mult(df_col, index):
def a_mean(df):
def a_std(df):
def a_sum(df):
def b_mean(df):
def b_std(df):
def b_sum(df):
def df_resample(df):
def df_col_resample(df_col):
def df_mult_resample(df_mult):
def df_grouper_resample(df):
def cases(request):
def test_agg_mixed_column_aggregation(cases, a_mean, a_std, b_mean, b_std, request):
def test_agg_both_mean_std_named_result(cases, a_mean, b_std, agg):
def test_agg_both_mean_std_dict_of_list(cases, a_mean, a_std):
def test_agg_both_mean_sum(cases, a_mean, a_sum, agg):
def test_agg_dict_of_dict_specificationerror(cases, agg):
def test_agg_dict_of_lists(cases, a_mean, a_std, b_mean, b_std):
def test_agg_with_lambda(cases, agg):
def test_agg_no_column(cases, agg):
def test_agg_specificationerror_nested(cases, cols, agg, a_sum, a_std, b_mean, b_std):
def test_agg_specificationerror_series(cases, agg):
def test_agg_specificationerror_invalid_names(cases):
def test_multi_agg_axis_1_raises(func):
def test_agg_nested_dicts():
def test_try_aggregate_non_existing_column():
def test_agg_list_like_func_with_args():
def test_selection_api_validation():
def test_agg_with_datetime_index_list_agg_func(col_name):
def test_resample_agg_readonly():
def test_end_and_end_day_origin(
def test_frame_downsample_method(
def test_series_downsample_method(
def test_args_kwargs_depr(method, raises):
def test_df_axis_param_depr():
def test_series_axis_param_depr(_test_series):
def test_resample_empty():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_timedelta.py
-----------------------------
def test_asfreq_bug():
def test_resample_with_nat():
def test_resample_as_freq_with_subperiod():
def test_resample_with_timedeltas():
def test_resample_single_period_timedelta():
def test_resample_timedelta_idempotency():
def test_resample_offset_with_timedeltaindex():
def test_resample_categorical_data_with_timedeltaindex():
def test_resample_timedelta_values():
def test_resample_timedelta_edge_case(start, end, freq, resample_freq):
def test_resample_with_timedelta_yields_no_empty_groups(duplicates):
def test_resample_quantile_timedelta(unit):
def test_resample_closed_right():
def test_arrow_duration_resample():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\test_time_grouper.py
-----------------------------
>     """Check TimeGrouper's aggregation is identical as normal groupby."""
  
      data = np.random.default_rng(2).standard_normal((20, 4))
      normal_df = DataFrame(data, columns=["A", "B", "C", "D"])
def test_series():
def test_apply(test_series):
def test_count(test_series):
def test_numpy_reduction(test_series):
def test_apply_iteration():
def test_fails_on_no_datetime_index(index):
def test_aaa_group_order():
def test_aggregate_normal(resample_method):
def test_aggregate_nth():
def test_resample_entirely_nat_window(method, method_args, unit):
def test_aggregate_with_nat(func, fill_value):
def test_aggregate_with_nat_size():
def test_repr():
def test_upsample_sum(method, method_args, expected_values):
def test_groupby_resample_interpolate():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\resample\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\conftest.py
-----------------------------
>     """Boolean sort keyword for concat and DataFrame.append."""
      return request.param
def sort(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_append.py
-----------------------------
class TestAppend:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_append_common.py
-----------------------------
>     """
      Test common dtype coercion rules between concat and append.
def item(request):
def item2(item):
class TestConcatAppendCommon:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_categorical.py
-----------------------------
class TestCategoricalConcat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_concat.py
-----------------------------
class TestConcatenate:
def test_concat_no_unnecessary_upcast(float_numpy_dtype, frame_or_series):
def test_concat_will_upcast(pdt, any_signed_int_numpy_dtype):
def test_concat_empty_and_non_empty_frame_regression():
def test_concat_sparse():
def test_concat_dense_sparse():
def test_duplicate_keys(keys):
def test_duplicate_keys_same_frame():
def test_concat_preserves_subclass(obj):
def test_concat_frame_axis0_extension_dtypes():
def test_concat_preserves_extension_int64_dtype():
def test_concat_bool_types(dtype1, dtype2, expected_dtype):
def test_concat_repeated_keys(keys, integrity):
def test_concat_null_object_with_dti():
def test_concat_multiindex_with_empty_rangeindex():
def test_concat_drop_attrs(data):
def test_concat_retain_attrs(data):
def test_concat_ignore_empty_object_float(empty_dtype, df_dtype):
def test_concat_ignore_all_na_object_float(empty_dtype, df_dtype):
def test_concat_ignore_empty_from_reindex():
def test_concat_mismatched_keys_length():
def test_concat_multiindex_with_category():
def test_concat_ea_upcast():
def test_concat_none_with_timezone_timestamp():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_dataframe.py
-----------------------------
class TestDataFrameConcat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_datetimes.py
-----------------------------
class TestDatetimeConcat:
class TestTimezoneConcat:
class TestPeriodConcat:
def test_concat_timedelta64_block():
def test_concat_multiindex_datetime_nat():
def test_concat_float_datetime64(using_array_manager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_empty.py
-----------------------------
>         """48510 `concat` to an empty EA should maintain type EA dtype."""
          df_empty = DataFrame({"a": pd.array([], dtype=pd.Int64Dtype())})
          df_new = DataFrame({"a": pd.array([1, 2, 3], dtype=pd.Int64Dtype())})
          expected = df_new.copy()
class TestEmptyConcat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_index.py
-----------------------------
class TestIndexConcat:
class TestMultiIndexConcat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_invalid.py
-----------------------------
>         data = """index,A,B,C,D
                    foo,2,3,4,5
                    bar,7,8,9,10
                    baz,12,13,14,15
class TestInvalidConcat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_series.py
-----------------------------
class TestSeriesConcat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\test_sort.py
-----------------------------
class TestConcatSort:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\concat\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_join.py
-----------------------------
def get_test_data(ngroups=8, n=50):
class TestJoin:
def _check_join(left, right, result, join_col, how="left", lsuffix="_x", rsuffix="_y"):
def _restrict_to_columns(group, columns, suffix):
def _assert_same_contents(join_chunk, source):
def _assert_all_na(join_chunk, source_columns, join_col):
def _join_by_hand(a, b, how="left"):
def test_join_inner_multiindex_deterministic_order():
def test_join_cross(input_col, output_cols):
def test_join_multiindex_one_level(join_type):
def test_join_multiindex_not_alphabetical_categorical(categories, values):
def test_join_empty(left_empty, how, exp):
def test_join_empty_uncomparable_columns():
def test_join_multiindex_categorical_output_index_dtype(how, values):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_merge.py
-----------------------------
>     """
      A parametrized fixture returning a variety of Series of different
      dtypes
def get_test_data(ngroups=8, n=50):
def get_series():
def get_series_na():
def series_of_dtype(request):
def series_of_dtype2(request):
def series_of_dtype_all_na(request):
def dfs_for_indicator():
class TestMerge:
def _check_merge(x, y):
class TestMergeDtypes:
def left():
def right():
class TestMergeCategorical:
def left_df():
def right_df():
class TestMergeOnIndexes:
def test_merge_index_types(index):
def test_merge_series(on, left_on, right_on, left_index, right_index, nm):
def test_merge_series_multilevel():
def test_merge_suffix(col1, col2, kwargs, expected_cols):
def test_merge_duplicate_suffix(how, expected):
def test_merge_suffix_error(col1, col2, suffixes):
def test_merge_suffix_raises(suffixes):
def test_merge_suffix_length_error(col1, col2, suffixes, msg):
def test_merge_equal_cat_dtypes(cat_dtype, reverse):
def test_merge_equal_cat_dtypes2():
def test_merge_on_cat_and_ext_array():
def test_merge_multiindex_columns():
def test_merge_datetime_upcast_dtype():
def test_categorical_non_unique_monotonic(n_categories):
def test_merge_join_categorical_multiindex():
def test_merge_join_cols_error_reporting_duplicates(func, kwargs, err_msg):
def test_merge_join_cols_error_reporting_missing(func, kwargs, err_msg):
def test_merge_join_cols_error_reporting_on_and_index(func, kwargs):
def test_merge_right_left_index():
def test_merge_result_empty_index_and_on():
def test_merge_suffixes_produce_dup_columns_raises():
def test_merge_duplicate_columns_with_suffix_no_warning():
def test_merge_duplicate_columns_with_suffix_causing_another_duplicate_raises():
def test_merge_string_float_column_result():
def test_mergeerror_on_left_index_mismatched_dtypes():
def test_merge_on_left_categoricalindex():
def test_merge_outer_with_NaN(dtype):
def test_merge_different_index_names():
def test_merge_ea(any_numeric_ea_dtype, join_type):
def test_merge_ea_and_non_ea(any_numeric_ea_dtype, join_type):
def test_merge_arrow_and_numpy_dtypes(dtype):
def test_merge_datetime_different_resolution(tz, how):
def test_merge_multiindex_single_level():
def test_merge_combinations(
def test_merge_ea_int_and_float_numpy():
def test_merge_arrow_string_index(any_string_dtype):
def test_merge_empty_frames_column_order(left_empty, right_empty):
def test_merge_datetime_and_timedelta(how):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_merge_asof.py
-----------------------------
>     """
      Resolution for datetimelike dtypes.
def unit(request):
class TestAsOfMerge:
def test_merge_asof_non_numerical_dtype(kwargs, data, infer_string):
def test_merge_asof_non_numerical_dtype_object():
def test_merge_asof_index_behavior(kwargs):
def test_merge_asof_numeric_column_in_index():
def test_merge_asof_numeric_column_in_multiindex():
def test_merge_asof_numeri_column_in_index_object_dtype():
def test_merge_asof_array_as_on(unit):
def test_merge_asof_raise_for_duplicate_columns():
def test_merge_asof_extension_dtype(dtype):
def test_merge_asof_pyarrow_td_tolerance():
def test_merge_asof_read_only_ndarray():
def test_merge_asof_multiby_with_categorical():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_merge_cross.py
-----------------------------
def test_merge_cross(input_col, output_cols):
def test_merge_cross_error_reporting(kwargs):
def test_merge_cross_mixed_dtypes():
def test_merge_cross_more_than_one_column():
def test_merge_cross_null_values(nulls_fixture):
def test_join_cross_error_reporting():
def test_merge_cross_series():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_merge_index_as_string.py
-----------------------------
>     """Construct left test DataFrame with specified levels
      (any of 'outer', 'inner', and 'v1')
def df1():
def df2():
def left_df(request, df1):
def right_df(request, df2):
def compute_expected(df_left, df_right, on=None, left_on=None, right_on=None, how=None):
def test_merge_indexes_and_columns_on(left_df, right_df, on, how):
def test_merge_indexes_and_columns_lefton_righton(
def test_join_indexes_and_columns_on(df1, df2, left_index, join_type):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_merge_ordered.py
-----------------------------
def left():
def right():
class TestMergeOrdered:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\test_multi.py
-----------------------------
>     """left dataframe (not multi-indexed) for multi-index join tests"""
      # a little relevant example with NAs
      key1 = ["bar", "bar", "bar", "foo", "foo", "baz", "baz", "qux", "qux", "snap"]
      key2 = ["two", "one", "three", "one", "two", "one", "two", "two", "three", "one"]
def left():
def right(multiindex_dataframe_random_data):
def left_multi():
def right_multi():
def on_cols_multi():
class TestMergeMulti:
class TestJoinMultiMulti:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\merge\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_crosstab.py
-----------------------------
def df():
class TestCrosstab:
def test_categoricals(a_dtype, b_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_cut.py
-----------------------------
def test_simple():
def test_bins(func):
def test_right():
def test_no_right():
def test_bins_from_interval_index():
def test_bins_from_interval_index_doc_example():
def test_bins_not_overlapping_from_interval_index():
def test_bins_not_monotonic():
def test_bins_monotonic_not_overflowing(x, bins, expected):
def test_wrong_num_labels():
def test_cut_corner(x, bins, msg):
def test_cut_not_1d_arg(arg, cut_func):
def test_int_bins_with_inf(data):
def test_cut_out_of_range_more():
def test_labels(right, breaks, closed):
def test_cut_pass_series_name_to_factor():
def test_label_precision():
def test_na_handling(labels):
def test_inf_handling():
def test_cut_out_of_bounds():
def test_cut_pass_labels(get_labels, get_expected):
def test_cut_pass_labels_compat():
def test_round_frac_just_works(x):
def test_round_frac(val, precision, expected):
def test_cut_return_intervals():
def test_series_ret_bins():
def test_cut_duplicates_bin(kwargs, msg):
def test_single_bin(data, length):
def test_cut_read_only(array_1_writeable, array_2_writeable):
def test_datetime_bin(conv):
def test_datetime_cut(unit, box):
def test_datetime_tz_cut_mismatched_tzawareness(box):
def test_datetime_tz_cut(bins, box):
def test_datetime_nan_error():
def test_datetime_nan_mask():
def test_datetime_cut_roundtrip(tz, unit):
def test_timedelta_cut_roundtrip():
def test_cut_bool_coercion_to_int(bins, box, compare):
def test_cut_incorrect_labels(labels):
def test_cut_nullable_integer(bins, right, include_lowest):
def test_cut_non_unique_labels(data, bins, labels, expected_codes, expected_labels):
def test_cut_unordered_labels(data, bins, labels, expected_codes, expected_labels):
def test_cut_unordered_with_missing_labels_raises_error():
def test_cut_unordered_with_series_labels():
def test_cut_no_warnings():
def test_cut_with_duplicated_index_lowest_included():
def test_cut_with_nonexact_categorical_indices():
def test_cut_with_timestamp_tuple_labels():
def test_cut_bins_datetime_intervalindex():
def test_cut_with_nullable_int64():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_from_dummies.py
-----------------------------
def dummies_basic():
def dummies_with_unassigned():
def test_error_wrong_data_type():
def test_error_no_prefix_contains_unassigned():
def test_error_no_prefix_wrong_default_category_type():
def test_error_no_prefix_multi_assignment():
def test_error_no_prefix_contains_nan():
def test_error_contains_non_dummies():
def test_error_with_prefix_multiple_seperators():
def test_error_with_prefix_sep_wrong_type(dummies_basic):
def test_error_with_prefix_contains_unassigned(dummies_with_unassigned):
def test_error_with_prefix_default_category_wrong_type(dummies_with_unassigned):
def test_error_with_prefix_default_category_dict_not_complete(
def test_error_with_prefix_contains_nan(dummies_basic):
def test_error_with_prefix_contains_non_dummies(dummies_basic):
def test_error_with_prefix_double_assignment():
def test_roundtrip_series_to_dataframe():
def test_roundtrip_single_column_dataframe():
def test_roundtrip_with_prefixes():
def test_no_prefix_string_cats_basic():
def test_no_prefix_string_cats_basic_bool_values():
def test_no_prefix_string_cats_basic_mixed_bool_values():
def test_no_prefix_int_cats_basic():
def test_no_prefix_float_cats_basic():
def test_no_prefix_mixed_cats_basic():
def test_no_prefix_string_cats_contains_get_dummies_NaN_column():
def test_no_prefix_string_cats_default_category(
def test_with_prefix_basic(dummies_basic):
def test_with_prefix_contains_get_dummies_NaN_column():
def test_with_prefix_default_category(
def test_ea_categories():
def test_ea_categories_with_sep():
def test_maintain_original_index():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_get_dummies.py
-----------------------------
class TestGetDummies:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_melt.py
-----------------------------
def df():
def df1():
def var_name():
def value_name():
class TestMelt:
class TestLreshape:
class TestWideToLong:
def test_wide_to_long_string_columns(string_storage):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_pivot.py
-----------------------------
def dropna(request):
def interval_values(request, closed):
class TestPivotTable:
class TestPivot:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_pivot_multilevel.py
-----------------------------
def test_pivot_list_like_index(
def test_pivot_list_like_columns(
def test_pivot_multiindexed_rows_and_cols(using_array_manager):
def test_pivot_df_multiindex_index_none():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_qcut.py
-----------------------------
def test_qcut():
def test_qcut_bounds():
def test_qcut_specify_quantiles():
def test_qcut_all_bins_same():
def test_qcut_include_lowest():
def test_qcut_nas():
def test_qcut_index():
def test_qcut_binning_issues(datapath):
def test_qcut_return_intervals():
def test_qcut_incorrect_labels(labels):
def test_qcut_wrong_length_labels(labels):
def test_qcut_list_like_labels(labels, expected):
def test_qcut_duplicates_bin(kwargs, msg):
def test_single_quantile(data, start, end, length, labels):
def test_qcut_nat(ser, unit):
def test_datetime_tz_qcut(bins):
def test_date_like_qcut_bins(arg, expected_bins):
def test_qcut_bool_coercion_to_int(bins, box, compare):
def test_qcut_nullable_integer(q, any_numeric_ea_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_union_categoricals.py
-----------------------------
class TestUnionCategoricals:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\test_util.py
-----------------------------
class TestCartesianProduct:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\reshape\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\test_arithmetic.py
-----------------------------
class TestIntervalArithmetic:
class TestIntervalComparisons:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\test_constructors.py
-----------------------------
class TestIntervalConstructors:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\test_contains.py
-----------------------------
class TestContains:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\test_formats.py
-----------------------------
def test_interval_repr():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\test_interval.py
-----------------------------
def interval():
class TestInterval:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\test_overlaps.py
-----------------------------
>     """
      Fixture for generating intervals of types from a start value and a shift
      value that can be added to start to generate an endpoint
def start_shift(request):
class TestOverlaps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\interval\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\period\test_arithmetic.py
-----------------------------
class TestPeriodArithmetic:
class TestPeriodComparisons:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\period\test_asfreq.py
-----------------------------
>     """Test frequency conversion of date objects"""
  
      @pytest.mark.filterwarnings("ignore:Period with BDay:FutureWarning")
      @pytest.mark.parametrize("freq", ["Y", "Q", "M", "W", "B", "D"])
class TestFreqConversion:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\period\test_period.py
-----------------------------
>     """Test properties such as year, month, weekday, etc...."""
  
      @pytest.mark.parametrize("freq", ["Y", "M", "D", "h"])
      def test_is_leap_year(self, freq):
class TestPeriodDisallowedFreqs:
class TestPeriodConstruction:
class TestPeriodMethods:
class TestPeriodProperties:
class TestPeriodComparisons:
def test_period_immutable():
def test_small_year_parsing():
def test_negone_ordinals():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\period\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\methods\test_as_unit.py
-----------------------------
class TestAsUnit:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\methods\test_round.py
-----------------------------
class TestTimedeltaRound:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\test_arithmetic.py
-----------------------------
> """
  Tests for scalar Timedelta arithmetic ops
class TestTimedeltaAdditionSubtraction:
class TestTimedeltaMultiplicationDivision:
class TestTimedeltaComparison:
def test_ops_notimplemented():
def test_ops_error_str():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\test_constructors.py
-----------------------------
class TestTimedeltaConstructorUnitKeyword:
def test_construct_from_kwargs_overflow():
def test_construct_with_weeks_unit_overflow():
def test_construct_from_td64_with_unit():
def test_from_td64_retain_resolution():
def test_from_pytimedelta_us_reso():
def test_from_tick_reso():
def test_construction():
def test_td_construction_with_np_dtypes(npdtype, item):
def test_td_from_repr_roundtrip(val):
def test_overflow_on_construction():
def test_construction_out_of_bounds_td64ns(val, unit):
def test_construction_out_of_bounds_td64s(val, unit):
def test_iso_constructor(fmt, exp):
def test_iso_constructor_raises(fmt):
def test_td_constructor_on_nanoseconds(constructed_td, conversion):
def test_td_constructor_value_error():
def test_timedelta_constructor_identity():
def test_timedelta_pass_td_and_kwargs_raises():
def test_string_with_unit(constructor, value, unit, expectation):
def test_string_without_numbers(value):
def test_timedelta_new_npnat():
def test_subclass_respected():
def test_non_nano_value():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\test_formats.py
-----------------------------
def test_repr(td, expected_repr):
def test_isoformat(td, expected_iso):
class TestReprBase:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\test_timedelta.py
-----------------------------
> """ test the scalar Timedelta """
  from datetime import timedelta
  import sys
  
class TestNonNano:
def test_timedelta_class_min_max_resolution():
class TestTimedeltaUnaryOps:
class TestTimedeltas:
def test_truthiness(value, expected):
def test_timedelta_attribute_precision():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timedelta\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_as_unit.py
-----------------------------
class TestTimestampAsUnit:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_normalize.py
-----------------------------
class TestTimestampNormalize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_replace.py
-----------------------------
class TestTimestampReplace:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_round.py
-----------------------------
class TestTimestampRound:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_timestamp_method.py
-----------------------------
class TestTimestampMethod:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_to_julian_date.py
-----------------------------
class TestTimestampToJulianDate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_to_pydatetime.py
-----------------------------
class TestTimestampToPyDatetime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_tz_convert.py
-----------------------------
class TestTimestampTZConvert:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\test_tz_localize.py
-----------------------------
class TestTimestampTZLocalize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\methods\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\test_arithmetic.py
-----------------------------
class TestTimestampArithmetic:
class SubDatetime(datetime):
def test_dt_subclass_add_timedelta(lh, rh):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\test_comparisons.py
-----------------------------
class TestTimestampComparison:
def test_rich_comparison_with_unsupported_type():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\test_constructors.py
-----------------------------
class TestTimestampConstructorUnitKeyword:
class TestTimestampConstructorFoldKeyword:
class TestTimestampConstructorPositionalAndKeywordSupport:
class TestTimestampClassMethodConstructors:
class TestTimestampResolutionInference:
class TestTimestampConstructors:
def test_constructor_ambiguous_dst():
def test_constructor_before_dst_switch(epoch):
def test_timestamp_constructor_identity():
def test_timestamp_nano_range(nano):
def test_non_nano_value():
def test_timestamp_constructor_na_value(na_value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\test_formats.py
-----------------------------
>         expected = r"""{'bar': [{'w': {'a': Timestamp('2011-01-01 00:00:00')}},
           {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
           {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
           {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
def test_isoformat(ts, timespec, expected_iso):
class TestTimestampRendering:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\test_timestamp.py
-----------------------------
> """ test the scalar Timestamp """
  
  import calendar
  from datetime import (
class TestTimestampProperties:
class TestTimestamp:
class TestTimestampNsOperations:
class TestTimestampConversion:
class TestNonNano:
def test_timestamp_class_min_max_resolution():
def test_delimited_date():
def test_utctimetuple():
def test_negative_dates():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\test_timezones.py
-----------------------------
> """
  Tests for Timestamp timezone-related methods
class TestTimestampTZOperations:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\timestamp\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\test_nat.py
-----------------------------
>     """
      Get overlapping public methods between NaT and another class.
  
      Parameters
class TestNaTFormatting:
def test_nat_fields(nat, idx):
def test_nat_vector_field_access():
def test_identity(klass, value):
def test_round_nat(klass, method, freq):
def test_nat_methods_raise(method):
def test_nat_methods_nan(method):
def test_nat_methods_nat(method):
def test_nat_iso_format(get_nat):
def test_missing_public_nat_methods(klass, expected):
def _get_overlap_public_nat_methods(klass, as_tuple=False):
def test_overlap_public_nat_methods(klass, expected):
def test_nat_doc_strings(compare):
def test_nat_arithmetic_scalar(op_name, value, val_type):
def test_nat_rfloordiv_timedelta(val, expected):
def test_nat_arithmetic_index(op_name, value):
def test_nat_arithmetic_td64_vector(op_name, box):
def test_nat_arithmetic_ndarray(dtype, op, out_dtype):
def test_nat_pinned_docstrings():
def test_to_numpy_alias():
def test_nat_comparisons(compare_operators_no_eq_ne, other):
def test_nat_comparisons_numpy(other):
def test_nat_comparisons_invalid(other_and_type, symbol_and_op):
def test_nat_comparisons_invalid_ndarray(other):
def test_compare_date(fixed_now_ts):
def test_nat_addsub_tdlike_scalar(obj):
def test_pickle():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\test_na_scalar.py
-----------------------------
def test_singleton():
def test_repr():
def test_format():
def test_truthiness():
def test_hashable():
def test_arithmetic_ops(all_arithmetic_functions, other):
def test_comparison_ops(comparison_op, other):
def test_pow_special(value, asarray):
def test_rpow_special(value, asarray):
def test_rpow_minus_one(value, asarray):
def test_unary_ops():
def test_logical_and():
def test_logical_or():
def test_logical_xor():
def test_logical_not():
def test_arithmetic_ndarray(shape, all_arithmetic_functions):
def test_is_scalar():
def test_isna():
def test_series_isna():
def test_ufunc():
def test_ufunc_raises():
def test_binary_input_not_dunder():
def test_divmod_ufunc():
def test_integer_hash_collision_dict():
def test_integer_hash_collision_set():
def test_pickle_roundtrip():
def test_pickle_roundtrip_pandas():
def test_pickle_roundtrip_containers(as_frame, values, dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\scalar\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\test_cat_accessor.py
-----------------------------
class TestCatAccessor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\test_dt_accessor.py
-----------------------------
def get_dir(ser):
class TestSeriesDatetimeValues:
class TestSeriesPeriodValuesDtAccessor:
def test_normalize_pre_epoch_dates():
def test_day_attribute_non_nano_beyond_int32():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\test_list_accessor.py
-----------------------------
def test_list_getitem(list_dtype):
def test_list_getitem_slice():
def test_list_len():
def test_list_flatten():
def test_list_getitem_slice_invalid():
def test_list_accessor_non_list_dtype():
def test_list_getitem_invalid_index(list_dtype):
def test_list_accessor_not_iterable():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\test_sparse_accessor.py
-----------------------------
class TestSparseAccessor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\test_struct_accessor.py
-----------------------------
def test_struct_accessor_dtypes():
def test_struct_accessor_field():
def test_struct_accessor_field_with_invalid_name_or_index():
def test_struct_accessor_explode():
def test_struct_accessor_api_for_invalid(invalid):
def test_struct_accessor_field_expanded(indices, name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\test_str_accessor.py
-----------------------------
class TestStrAccessor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\accessors\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_datetime.py
-----------------------------
> """
  Also test support for datetime64[ns] in Series / DataFrame
def test_fancy_getitem():
def test_fancy_setitem():
def test_getitem_setitem_datetime_tz(tz_source):
def test_getitem_setitem_datetimeindex():
def test_getitem_setitem_periodindex():
def test_datetime_indexing():
def test_indexing_with_duplicate_datetimeindex(
def test_loc_getitem_over_size_cutoff(monkeypatch):
def test_indexing_over_size_cutoff_period_index(monkeypatch):
def test_indexing_unordered():
def test_indexing_unordered2():
def test_indexing():
def test_getitem_str_month_with_datetimeindex():
def test_getitem_str_year_with_datetimeindex():
def test_getitem_str_second_with_datetimeindex():
def test_compare_datetime_with_all_none():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_delitem.py
-----------------------------
class TestSeriesDelItem:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_get.py
-----------------------------
def test_get():
def test_get_nan(float_numpy_dtype):
def test_get_nan_multiple(float_numpy_dtype):
def test_get_with_default():
def test_get_with_ea(arr):
def test_getitem_get(string_series, object_series):
def test_get_none():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_getitem.py
-----------------------------
> """
  Series.__getitem__ test classes are organized by the type of key passed.
class TestSeriesGetitemScalars:
class TestSeriesGetitemSlices:
class TestSeriesGetitemListLike:
class TestGetitemBooleanMask:
class TestGetitemCallable:
def test_getitem_generator(string_series):
def test_getitem_ndim_deprecated(series):
def test_getitem_multilevel_scalar_slice_not_implemented(
def test_getitem_dataframe_raises():
def test_getitem_assignment_series_alignment():
def test_getitem_duplicate_index_mistyped_key_raises_keyerror():
def test_getitem_1tuple_slice_without_multiindex():
def test_getitem_preserve_name(datetime_series):
def test_getitem_with_integer_labels():
def test_getitem_missing(datetime_series):
def test_getitem_fancy(string_series, object_series):
def test_getitem_box_float64(datetime_series):
def test_getitem_unordered_dup():
def test_getitem_dups():
def test_getitem_categorical_str():
def test_slice_can_reorder_not_uniquely_indexed():
def test_duplicated_index_getitem_positional_indexer(index_vals):
class TestGetitemDeprecatedIndexers:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_indexing.py
-----------------------------
> """ test get/set & misc """
  from datetime import timedelta
  import re
  
def test_basic_indexing():
def test_getitem_numeric_should_not_fallback_to_positional(any_numeric_dtype):
def test_setitem_numeric_should_not_fallback_to_positional(any_numeric_dtype):
def test_basic_getitem_with_labels(datetime_series):
def test_basic_getitem_dt64tz_values():
def test_getitem_setitem_ellipsis(using_copy_on_write, warn_copy_on_write):
def test_getitem_with_duplicates_indices(result_1, duplicate_item, expected_1):
def test_getitem_setitem_integers():
def test_series_box_timestamp():
def test_series_box_timedelta():
def test_getitem_ambiguous_keyerror(indexer_sl):
def test_getitem_dups_with_missing(indexer_sl):
def test_setitem_ambiguous_keyerror(indexer_sl):
def test_setitem(datetime_series):
def test_setslice(datetime_series):
def test_basic_getitem_setitem_corner(datetime_series):
def test_slice(string_series, object_series, using_copy_on_write, warn_copy_on_write):
def test_timedelta_assignment():
def test_underlying_data_conversion(using_copy_on_write):
def test_preserve_refs(datetime_series):
def test_multilevel_preserve_name(lexsorted_two_level_string_multiindex, indexer_sl):
def test_slice_with_negative_step(index):
def test_tuple_index():
def test_frozenset_index():
def test_loc_setitem_all_false_indexer():
def test_loc_boolean_indexer_non_matching_index():
def test_loc_boolean_indexer_miss_matching_index():
def test_loc_setitem_nested_data_enlargement():
def test_loc_ea_numeric_index_oob_slice_end():
def test_getitem_bool_int_key():
def test_setitem_empty_indexer(indexer, val):
class TestDeprecatedIndexers:
class TestSetitemValidation:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_mask.py
-----------------------------
def test_mask():
def test_mask_casts():
def test_mask_casts2():
def test_mask_inplace():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py
-----------------------------
>     """
      Check each of several methods that _should_ be equivalent to `obj[key] = val`
  
      We assume that
class TestSetitemDT64Values:
class TestSetitemScalarIndexer:
class TestSetitemSlices:
class TestSetitemBooleanMask:
class TestSetitemViewCopySemantics:
class TestSetitemCallable:
class TestSetitemWithExpansion:
def test_setitem_scalar_into_readonly_backing_data():
def test_setitem_slice_into_readonly_backing_data():
def test_setitem_categorical_assigning_ops():
def test_setitem_nan_into_categorical():
class TestSetitemCasting:
class SetitemCastingEquivalents:
class TestSetitemCastingEquivalents(SetitemCastingEquivalents):
class TestSetitemTimedelta64IntoNumeric(SetitemCastingEquivalents):
class TestSetitemDT64IntoInt(SetitemCastingEquivalents):
class TestSetitemNAPeriodDtype(SetitemCastingEquivalents):
class TestSetitemNADatetimeLikeDtype(SetitemCastingEquivalents):
class TestSetitemMismatchedTZCastsToObject(SetitemCastingEquivalents):
class TestSeriesNoneCoercion(SetitemCastingEquivalents):
class TestSetitemFloatIntervalWithIntIntervalValues(SetitemCastingEquivalents):
class TestSetitemRangeIntoIntegerSeries(SetitemCastingEquivalents):
class TestSetitemFloatNDarrayIntoIntegerSeries(SetitemCastingEquivalents):
class TestSetitemIntoIntegerSeriesNeedsUpcast(SetitemCastingEquivalents):
class TestSmallIntegerSetitemUpcast(SetitemCastingEquivalents):
class CoercionTest(SetitemCastingEquivalents):
class TestCoercionInt8(CoercionTest):
class TestCoercionObject(CoercionTest):
class TestCoercionComplex(CoercionTest):
class TestCoercionBool(CoercionTest):
class TestCoercionInt64(CoercionTest):
class TestCoercionFloat64(CoercionTest):
class TestCoercionFloat32(CoercionTest):
class TestCoercionDatetime64(CoercionTest):
class TestCoercionDatetime64TZ(CoercionTest):
class TestCoercionTimedelta64(CoercionTest):
class TestPeriodIntervalCoercion(CoercionTest):
def test_20643():
def test_20643_comment():
def test_15413():
def test_32878_int_itemsize():
def test_32878_complex_itemsize():
def test_37692(indexer_al):
def test_setitem_bool_int_float_consistency(indexer_sli):
def test_setitem_positional_with_casting():
def test_setitem_positional_float_into_int_coerces():
def test_setitem_int_not_positional():
def test_setitem_with_bool_indexer():
def test_setitem_bool_indexer_dont_broadcast_length1_values(size, mask, item, box):
def test_setitem_empty_mask_dont_upcast_dt64():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_set_value.py
-----------------------------
def test_series_set_value():
def test_set_value_dt64(datetime_series):
def test_set_value_str_index(string_series):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_take.py
-----------------------------
def test_take_validate_axis():
def test_take():
def test_take_categorical():
def test_take_slice_raises():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_where.py
-----------------------------
def test_where_unsafe_int(any_signed_int_numpy_dtype):
def test_where_unsafe_float(float_numpy_dtype):
def test_where_unsafe_upcast(dtype, expected_dtype):
def test_where_unsafe():
def test_where():
def test_where_error():
def test_where_array_like(klass):
def test_where_invalid_input(cond):
def test_where_ndframe_align():
def test_where_setitem_invalid():
def test_broadcast(size, mask, item, box):
def test_where_inplace():
def test_where_dups():
def test_where_numeric_with_string():
def test_where_datetimelike_coerce(dtype):
def test_where_datetimetz():
def test_where_sparse():
def test_where_empty_series_and_empty_cond_having_non_bool_dtypes():
def test_where_categorical(frame_or_series):
def test_where_datetimelike_categorical(tz_naive_fixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\test_xs.py
-----------------------------
def test_xs_datetimelike_wrapping():
class TestXSWithMultiIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\indexing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_add_prefix_suffix.py
-----------------------------
def test_add_prefix_suffix(string_series):
def test_add_prefix_suffix_axis(string_series):
def test_add_prefix_suffix_invalid_axis(string_series):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_align.py
-----------------------------
def test_align(datetime_series, first_slice, second_slice, join_type, fill):
def test_align_fill_method(
def test_align_nocopy(datetime_series, using_copy_on_write):
def test_align_same_index(datetime_series, using_copy_on_write):
def test_align_multiindex():
def test_align_with_dataframe_method(method):
def test_align_dt64tzindex_mismatched_tzs():
def test_align_periodindex(join_type):
def test_align_stringindex(any_string_dtype):
def test_align_left_fewer_levels():
def test_align_left_different_named_levels():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_argsort.py
-----------------------------
class TestSeriesArgsort:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_asof.py
-----------------------------
class TestSeriesAsof:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_astype.py
-----------------------------
>     """
      Generate one random byte string.
def rand_str(nchars: int) -> str:
class TestAstypeAPI:
class TestAstype:
class TestAstypeString:
class TestAstypeCategorical:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_autocorr.py
-----------------------------
class TestAutoCorr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_between.py
-----------------------------
class TestBetween:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_case_when.py
-----------------------------
>     """
      base dataframe for testing
def df():
def test_case_when_caselist_is_not_a_list(df):
def test_case_when_no_caselist(df):
def test_case_when_odd_caselist(df):
def test_case_when_raise_error_from_mask(df):
def test_case_when_single_condition(df):
def test_case_when_multiple_conditions(df):
def test_case_when_multiple_conditions_replacement_list(df):
def test_case_when_multiple_conditions_replacement_extension_dtype(df):
def test_case_when_multiple_conditions_replacement_series(df):
def test_case_when_non_range_index():
def test_case_when_callable():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_clip.py
-----------------------------
>         """Should process np.nan argument as None"""
          # GH#17276
          s = Series([1, 2, 3])
  
class TestSeriesClip:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_combine.py
-----------------------------
class TestCombine:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_combine_first.py
-----------------------------
class TestCombineFirst:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_compare.py
-----------------------------
def test_compare_axis(align_axis):
def test_compare_various_formats(keep_shape, keep_equal):
def test_compare_with_equal_nulls():
def test_compare_with_non_equal_nulls():
def test_compare_multi_index():
def test_compare_unaligned_objects():
def test_compare_datetime64_and_string():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_convert_dtypes.py
-----------------------------
def test_cases(request):
class TestSeriesConvertDtypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_copy.py
-----------------------------
class TestCopy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_count.py
-----------------------------
class TestSeriesCount:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_cov_corr.py
-----------------------------
class TestSeriesCov:
class TestSeriesCorr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_describe.py
-----------------------------
class TestSeriesDescribe:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_diff.py
-----------------------------
class TestSeriesDiff:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_drop.py
-----------------------------
def test_drop_unique_and_non_unique_index(
def test_drop_exception_raised(data, index, drop_labels, axis, error_type, error_desc):
def test_drop_with_ignore_errors():
def test_drop_empty_list(index, drop_labels):
def test_drop_non_empty_list(data, index, drop_labels):
def test_drop_index_ea_dtype(any_numeric_ea_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_dropna.py
-----------------------------
class TestDropna:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_drop_duplicates.py
-----------------------------
def test_drop_duplicates(any_numpy_dtype, keep, expected):
def test_drop_duplicates_bool(keep, expected):
def test_drop_duplicates_no_duplicates(any_numpy_dtype, keep, values):
class TestSeriesDropDuplicates:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_dtypes.py
-----------------------------
class TestSeriesDtypes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_duplicated.py
-----------------------------
def test_duplicated_keep(keep, expected):
def test_duplicated_nan_none(keep, expected):
def test_duplicated_categorical_bool_na(nulls_fixture):
def test_duplicated_mask(keep, vals):
def test_duplicated_mask_no_duplicated_na(keep):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_equals.py
-----------------------------
def test_equals(arr, idx):
def test_equals_list_array(val):
def test_equals_false_negative():
def test_equals_matching_nas():
def test_equals_mismatched_nas(nulls_fixture, nulls_fixture2):
def test_equals_none_vs_nan():
def test_equals_None_vs_float():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_explode.py
-----------------------------
def test_basic():
def test_mixed_type():
def test_empty():
def test_nested_lists():
def test_multi_index():
def test_large():
def test_invert_array():
def test_non_object_dtype(s):
def test_typical_usecase():
def test_nested_EA():
def test_duplicate_index():
def test_ignore_index():
def test_explode_sets():
def test_explode_scalars_can_ignore_index():
def test_explode_pyarrow_list_type(ignore_index):
def test_explode_pyarrow_non_list_type(ignore_index):
def test_str_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_fillna.py
-----------------------------
class TestSeriesFillNA:
class TestFillnaPad:
def test_ffill_bfill_limit_area(data, expected_data, method, kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_get_numeric_data.py
-----------------------------
class TestGetNumericData:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_head_tail.py
-----------------------------
def test_head_tail(string_series):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_infer_objects.py
-----------------------------
class TestInferObjects:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_info.py
-----------------------------
>         """\
          <class 'pandas.core.series.Series'>
          MultiIndex: 10 entries, ('foo', 'one') to ('qux', 'three')
def test_info_categorical_column_just_works():
def test_info_categorical():
def test_info_series(
def test_info_memory():
def test_info_wide():
def test_info_shows_dtypes():
def test_info_memory_usage_deep_not_pypy():
def test_info_memory_usage_deep_pypy():
def test_info_memory_usage_qualified(index, plus):
def test_info_memory_usage_bug_on_multiindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_interpolate.py
-----------------------------
>     """Fixture that returns an (method name, required kwargs) pair.
  
      This fixture does not include method 'time' as a parameterization; that
      method requires a Series with a DatetimeIndex, and is generally tested
def nontemporal_method(request):
def interp_methods_ind(request):
class TestSeriesInterpolateData:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_isin.py
-----------------------------
class TestSeriesIsIn:
def test_isin_large_series_mixed_dtypes_and_nan(monkeypatch):
def test_isin_complex_numbers(array, expected):
def test_isin_filtering_with_mixed_object_types(data, is_in):
def test_isin_filtering_on_iterable(data, isin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_isna.py
-----------------------------
> """
  We also test Series.notna in this file.
class TestIsna:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_is_monotonic.py
-----------------------------
class TestIsMonotonic:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_is_unique.py
-----------------------------
def test_is_unique(data, expected):
def test_is_unique_class_ne(capsys):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_item.py
-----------------------------
> """
  Series.item method, mainly testing that we get python scalars as opposed to
  numpy scalars.
class TestItem:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_map.py
-----------------------------
>     """
      Due to new MultiIndex-ing behaviour in v0.14.0,
      dicts with tuple keys passed to map were being
      converted to a multi-index, preventing tuple values
def test_series_map_box_timedelta():
def test_map_callable(datetime_series):
def test_map_same_length_inference_bug():
def test_series_map_box_timestamps():
def test_map_series_stringdtype(any_string_dtype, using_infer_string):
def test_map_categorical_with_nan_values(data, expected_dtype):
def test_map_empty_integer_series():
def test_map_empty_integer_series_with_datetime_index():
def test_map_simple_str_callables_same_as_astype(
def test_list_raises(string_series):
def test_map():
def test_map_datetime(datetime_series):
def test_map_category():
def test_map_category_numeric():
def test_map_category_string():
def test_map_empty(request, index):
def test_map_compat():
def test_map_int():
def test_map_type_inference():
def test_map_decimal(string_series):
def test_map_na_exclusion():
def test_map_dict_with_tuple_keys():
def test_map_counter():
def test_map_defaultdict():
def test_map_dict_na_key():
def test_map_defaultdict_na_key(na_action):
def test_map_defaultdict_missing_key(na_action):
def test_map_defaultdict_unmutated(na_action):
def test_map_dict_ignore_na(arg_func):
def test_map_defaultdict_ignore_na():
def test_map_categorical_na_ignore(na_action, expected):
def test_map_dict_subclass_with_missing():
def test_map_dict_subclass_without_missing():
def test_map_abc_mapping(non_dict_mapping_subclass):
def test_map_abc_mapping_with_missing(non_dict_mapping_subclass):
def test_map_box_dt64(unit):
def test_map_box_dt64tz(unit):
def test_map_box_td64(unit):
def test_map_box_period():
def test_map_categorical(na_action, using_infer_string):
def test_map_categorical_na_action(na_action, expected):
def test_map_datetimetz():
def test_map_missing_mixed(vals, mapping, exp):
def test_map_scalar_on_date_time_index_aware_series():
def test_map_float_to_string_precision():
def test_map_to_timedelta():
def test_map_type():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_matmul.py
-----------------------------
class TestMatmul:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_nlargest.py
-----------------------------
> """
  Note: for naming purposes, most tests are title with as e.g. "test_nlargest_foo"
  but are implicitly also testing nsmallest_foo.
def s_main_dtypes():
def s_main_dtypes_split(request, s_main_dtypes):
def assert_check_nselect_boundary(vals, dtype, method):
class TestSeriesNLargestNSmallest:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_nunique.py
-----------------------------
def test_nunique():
def test_nunique_categorical():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_pct_change.py
-----------------------------
class TestSeriesPctChange:
def test_pct_change_with_duplicated_indices(fill_method):
def test_pct_change_no_warning_na_beginning():
def test_pct_change_empty():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_pop.py
-----------------------------
def test_pop():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_quantile.py
-----------------------------
class TestSeriesQuantile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_rank.py
-----------------------------
def ser():
def results(request):
def dtype(request):
def expected_dtype(dtype, method, pct=False):
class TestSeriesRank:
def test_rank_dense_pct(dtype, ser, exp):
def test_rank_min_pct(dtype, ser, exp):
def test_rank_max_pct(dtype, ser, exp):
def test_rank_average_pct(dtype, ser, exp):
def test_rank_first_pct(dtype, ser, exp):
def test_pct_max_many_rows():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_reindex.py
-----------------------------
def test_reindex(datetime_series, string_series):
def test_reindex_nan():
def test_reindex_series_add_nat():
def test_reindex_with_datetimes():
def test_reindex_corner(datetime_series):
def test_reindex_pad():
def test_reindex_pad2():
def test_reindex_inference():
def test_reindex_downcasting():
def test_reindex_nearest():
def test_reindex_int(datetime_series):
def test_reindex_bool(datetime_series):
def test_reindex_bool_pad(datetime_series):
def test_reindex_categorical():
def test_reindex_astype_order_consistency():
def test_reindex_fill_value():
def test_reindex_fill_value_datetimelike_upcast(dtype, fill_value, using_array_manager):
def test_reindex_datetimeindexes_tz_naive_and_aware():
def test_reindex_empty_series_tz_dtype():
def test_reindex_periodindex_with_object(p_values, o_values, values, expected_values):
def test_reindex_too_many_args():
def test_reindex_double_index():
def test_reindex_no_posargs():
def test_reindex_empty_with_level(values):
def test_reindex_missing_category():
def test_reindexing_with_float64_NA_log():
def test_reindex_expand_nonnano_nat(dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_reindex_like.py
-----------------------------
def test_reindex_like(datetime_series):
def test_reindex_like_nearest():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_rename.py
-----------------------------
class TestRename:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_rename_axis.py
-----------------------------
class TestSeriesRenameAxis:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_repeat.py
-----------------------------
class TestRepeat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_replace.py
-----------------------------
class TestSeriesReplace:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_reset_index.py
-----------------------------
class TestResetIndex:
def test_reset_index_dtypes_on_empty_series_with_multiindex(
def test_column_name_duplicates(names, expected_names, allow_duplicates):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_round.py
-----------------------------
class TestSeriesRound:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_searchsorted.py
-----------------------------
class TestSeriesSearchSorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_set_name.py
-----------------------------
class TestSetName:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_size.py
-----------------------------
def test_series(data, index, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_sort_index.py
-----------------------------
def sort_kind(request):
class TestSeriesSortIndex:
class TestSeriesSortIndexKey:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_sort_values.py
-----------------------------
class TestSeriesSortValues:
class TestSeriesSortingKey:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_tolist.py
-----------------------------
def test_tolist_scalar_dtype(values, dtype, expected_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_to_csv.py
-----------------------------
class TestSeriesToCSV:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_to_dict.py
-----------------------------
class TestSeriesToDict:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_to_frame.py
-----------------------------
class TestToFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_to_numpy.py
-----------------------------
def test_to_numpy_na_value(dtype):
def test_to_numpy_cast_before_setting_na():
def test_to_numpy_arrow_dtype_given():
def test_astype_ea_int_to_td_ts():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_truncate.py
-----------------------------
class TestTruncate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_tz_localize.py
-----------------------------
class TestTZLocalize:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_unique.py
-----------------------------
class TestUnique:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_unstack.py
-----------------------------
def test_unstack_preserves_object():
def test_unstack():
def test_unstack_tuplename_in_multiindex():
def test_unstack_mixed_type_name_in_multiindex(
def test_unstack_multi_index_categorical_values():
def test_unstack_mixed_level_names():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_update.py
-----------------------------
class TestUpdate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_values.py
-----------------------------
class TestValues:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_value_counts.py
-----------------------------
class TestSeriesValueCounts:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\test_view.py
-----------------------------
class TestView:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\methods\__init__.py
-----------------------------
> """
  Test files dedicated to individual (stand-alone) Series methods
  
  Ideally these files/tests should correspond 1-to-1 with tests.frame.methods

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_api.py
-----------------------------
class TestSeriesMisc:
def test_float_int_deprecated(converter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_arithmetic.py
-----------------------------
def switch_numexpr_min_elements(request, monkeypatch):
def _permute(obj):
class TestSeriesFlexArithmetic:
class TestSeriesArithmetic:
class TestSeriesFlexComparison:
class TestSeriesComparison:
class TestTimeSeriesArithmetic:
class TestNamePreservation:
class TestInplaceOperations:
def test_none_comparison(request, series_with_simple_index):
def test_series_varied_multiindex_alignment():
def test_rmod_consistent_large_series():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_constructors.py
-----------------------------
class TestSeriesConstructors:
class TestSeriesConstructorIndexCoercion:
class TestSeriesConstructorInternals:
def test_constructor(rand_series_with_duplicate_datetimeindex):
def test_numpy_array(input_dict, expected):
def test_index_ordered_dict_keys():
def test_series_with_complex_nan(input_list):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_cumulative.py
-----------------------------
> """
  Tests for Series cumulative operations.
  
  See also
class TestSeriesCumulativeOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_formats.py
-----------------------------
>         result = r"""\begin{tabular}{ll}
  \toprule
   & 0 \\
  \midrule
class TestSeriesRepr:
class TestCategoricalRepr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_iteration.py
-----------------------------
class TestIteration:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_logical_ops.py
-----------------------------
class TestSeriesLogicalOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_missing.py
-----------------------------
class TestSeriesMissingData:
def test_hasnans_uncached_for_series():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_npfuncs.py
-----------------------------
> """
  Tests for np.foo applied to Series, not necessarily ufuncs.
class TestPtp:
def test_numpy_unique(datetime_series):
def test_numpy_argwhere(index):
def test_log_arrow_backed_missing_value():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_reductions.py
-----------------------------
def test_reductions_series_strings(operation, expected):
def test_mode_extension_dtype(as_period):
def test_mode_nullable_dtype(any_numeric_ea_dtype):
def test_mode_infer_string():
def test_reductions_td64_with_nat():
def test_td64_sum_empty(skipna):
def test_td64_summation_overflow():
def test_prod_numpy16_bug():
def test_validate_any_all_out_keepdims_raises(kwargs, func):
def test_validate_sum_initial():
def test_validate_median_initial():
def test_validate_stat_keepdims():
def test_mean_with_convertible_string_raises(using_array_manager, using_infer_string):
def test_mean_dont_convert_j_to_complex(using_array_manager):
def test_median_with_convertible_string_raises(using_array_manager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_subclass.py
-----------------------------
class TestSeriesSubclassing:
class SubclassedSeries(pd.Series):
def test_constructor_from_dict():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_ufunc.py
-----------------------------
>     """
      A pair of random, length-100 integer-dtype arrays, that are mostly 0.
def ufunc(request):
def sparse(request):
def arrays_for_binary_ufunc():
def test_unary_ufunc(ufunc, sparse):
def test_binary_ufunc_with_array(flip, sparse, ufunc, arrays_for_binary_ufunc):
def test_binary_ufunc_with_index(flip, sparse, ufunc, arrays_for_binary_ufunc):
def test_binary_ufunc_with_series(
def test_binary_ufunc_scalar(ufunc, sparse, flip, arrays_for_binary_ufunc):
def test_multiple_output_binary_ufuncs(ufunc, sparse, shuffle, arrays_for_binary_ufunc):
def test_multiple_output_ufunc(sparse, arrays_for_binary_ufunc):
def test_binary_ufunc_drops_series_name(ufunc, sparse, arrays_for_binary_ufunc):
def test_object_series_ok():
def values_for_np_reduce(request):
class TestNumpyReductions:
def test_binary_ufunc_other_types(type_):
def test_object_dtype_ok():
def test_outer():
def test_np_matmul():
def test_array_ufuncs_for_many_arguments():
def test_np_fix():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_unary.py
-----------------------------
class TestSeriesUnaryOps:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\test_validate.py
-----------------------------
>     """Tests for error handling related to data types of method arguments."""
      msg = 'For argument "inplace" expected type bool'
      kwargs = {"inplace": inplace}
  
def test_validate_bool_args(string_series, func, inplace):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\series\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\conftest.py
-----------------------------
>     """
      Fixture for all public methods of `StringMethods`
  
      This fixture returns a tuple of the method name and sample arguments
def any_string_method(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_api.py
-----------------------------
>     """
      Fixture for all (inferred) dtypes allowed in StringMethods.__init__
  
      The covered (inferred) types are:
def any_allowed_skipna_inferred_dtype(request):
def test_api(any_string_dtype):
def test_api_mi_raises():
def test_api_per_dtype(index_or_series, dtype, any_skipna_inferred_dtype):
def test_api_per_method(
def test_api_for_categorical(any_string_method, any_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_case_justify.py
-----------------------------
def test_title(any_string_dtype):
def test_title_mixed_object():
def test_lower_upper(any_string_dtype):
def test_lower_upper_mixed_object():
def test_capitalize(data, expected, any_string_dtype):
def test_capitalize_mixed_object():
def test_swapcase(any_string_dtype):
def test_swapcase_mixed_object():
def test_casefold():
def test_casemethods(any_string_dtype):
def test_pad(any_string_dtype):
def test_pad_mixed_object():
def test_pad_fillchar(any_string_dtype):
def test_pad_fillchar_bad_arg_raises(any_string_dtype):
def test_pad_width_bad_arg_raises(method_name, any_string_dtype):
def test_center_ljust_rjust(any_string_dtype):
def test_center_ljust_rjust_mixed_object():
def test_center_ljust_rjust_fillchar(any_string_dtype):
def test_center_ljust_rjust_fillchar_bad_arg_raises(any_string_dtype):
def test_zfill(any_string_dtype):
def test_wrap(any_string_dtype):
def test_wrap_unicode(any_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_cat.py
-----------------------------
def test_str_cat_name(index_or_series, other):
def test_str_cat(index_or_series, infer_string):
def test_str_cat_raises_intuitive_error(index_or_series):
def test_str_cat_categorical(
def test_str_cat_wrong_dtype_raises(box, data):
def test_str_cat_mixed_inputs(index_or_series):
def test_str_cat_align_indexed(index_or_series, join):
def test_str_cat_align_mixed_inputs(join):
def test_str_cat_all_na(index_or_series, index_or_series2):
def test_str_cat_special_cases():
def test_cat_on_filtered_index():
def test_cat_different_classes(klass):
def test_cat_on_series_dot_str():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_extract.py
-----------------------------
>     pat = r"""
      (?P<user>[a-z0-9]+)
      @
      (?P<domain>[a-z]+)
def test_extract_expand_kwarg_wrong_type_raises(any_string_dtype):
def test_extract_expand_kwarg(any_string_dtype):
def test_extract_expand_False_mixed_object():
def test_extract_expand_index_raises():
def test_extract_expand_no_capture_groups_raises(index_or_series, any_string_dtype):
def test_extract_expand_single_capture_group(index_or_series, any_string_dtype):
def test_extract_expand_capture_groups(any_string_dtype):
def test_extract_expand_capture_groups_index(index, any_string_dtype):
def test_extract_single_series_name_is_preserved(any_string_dtype):
def test_extract_expand_True(any_string_dtype):
def test_extract_expand_True_mixed_object():
def test_extract_expand_True_single_capture_group_raises(
def test_extract_expand_True_single_capture_group(index_or_series, any_string_dtype):
def test_extract_series(name, any_string_dtype):
def test_extract_optional_groups(any_string_dtype):
def test_extract_dataframe_capture_groups_index(index, any_string_dtype):
def test_extract_single_group_returns_frame(any_string_dtype):
def test_extractall(any_string_dtype):
def test_extractall_column_names(pat, expected_names, any_string_dtype):
def test_extractall_single_group(any_string_dtype):
def test_extractall_single_group_with_quantifier(any_string_dtype):
def test_extractall_no_matches(data, names, any_string_dtype):
def test_extractall_stringindex(any_string_dtype):
def test_extractall_no_capture_groups_raises(any_string_dtype):
def test_extract_index_one_two_groups():
def test_extractall_same_as_extract(any_string_dtype):
def test_extractall_same_as_extract_subject_index(any_string_dtype):
def test_extractall_preserves_dtype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_find_replace.py
-----------------------------
def test_contains(any_string_dtype):
def test_contains_object_mixed():
def test_contains_na_kwarg_for_object_category():
def test_contains_na_kwarg_for_nullable_string_dtype(
def test_contains_moar(any_string_dtype):
def test_contains_nan(any_string_dtype):
def test_contains_compiled_regex(any_string_dtype):
def test_startswith_endswith_validate_na(request, any_string_dtype):
def test_startswith(pat, dtype, null_value, na, using_infer_string):
def test_startswith_string_dtype(any_string_dtype, na):
def test_endswith(pat, dtype, null_value, na, using_infer_string):
def test_endswith_string_dtype(any_string_dtype, na):
def test_replace(any_string_dtype):
def test_replace_max_replacements(any_string_dtype):
def test_replace_mixed_object():
def test_replace_unicode(any_string_dtype):
def test_replace_wrong_repl_type_raises(any_string_dtype, index_or_series, repl, data):
def test_replace_callable(any_string_dtype):
def test_replace_callable_raises(any_string_dtype, repl):
def test_replace_callable_named_groups(any_string_dtype):
def test_replace_compiled_regex(any_string_dtype):
def test_replace_compiled_regex_mixed_object():
def test_replace_compiled_regex_unicode(any_string_dtype):
def test_replace_compiled_regex_raises(any_string_dtype):
def test_replace_compiled_regex_callable(any_string_dtype):
def test_replace_literal(regex, expected, any_string_dtype):
def test_replace_literal_callable_raises(any_string_dtype):
def test_replace_literal_compiled_raises(any_string_dtype):
def test_replace_moar(any_string_dtype):
def test_replace_not_case_sensitive_not_regex(any_string_dtype):
def test_replace_regex(any_string_dtype):
def test_replace_regex_single_character(regex, any_string_dtype):
def test_match(any_string_dtype):
def test_match_mixed_object():
def test_match_na_kwarg(any_string_dtype):
def test_match_case_kwarg(any_string_dtype):
def test_match_compiled_regex(any_string_dtype):
def test_fullmatch(any_string_dtype):
def test_fullmatch_dollar_literal(any_string_dtype):
def test_fullmatch_na_kwarg(any_string_dtype):
def test_fullmatch_case_kwarg(any_string_dtype):
def test_fullmatch_compiled_regex(any_string_dtype):
def test_findall(any_string_dtype):
def test_findall_mixed_object():
def test_find(any_string_dtype):
def test_find_bad_arg_raises(any_string_dtype):
def test_find_nan(any_string_dtype):
def test_translate(index_or_series, any_string_dtype, infer_string):
def test_translate_mixed_object():
def test_flags_kwarg(any_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_get_dummies.py
-----------------------------
def test_get_dummies(any_string_dtype):
def test_get_dummies_index():
def test_get_dummies_with_name_dummy(any_string_dtype):
def test_get_dummies_with_name_dummy_index():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_split_partition.py
-----------------------------
def test_split(any_string_dtype, method):
def test_split_more_than_one_char(any_string_dtype, method):
def test_split_more_regex_split(any_string_dtype):
def test_split_regex(any_string_dtype):
def test_split_regex_explicit(any_string_dtype):
def test_split_object_mixed(expand, method):
def test_split_n(any_string_dtype, method, n):
def test_rsplit(any_string_dtype):
def test_rsplit_max_number(any_string_dtype):
def test_split_blank_string(any_string_dtype):
def test_split_blank_string_with_non_empty(any_string_dtype):
def test_split_noargs(any_string_dtype, method):
def test_split_maxsplit(data, pat, any_string_dtype, n):
def test_split_no_pat_with_nonzero_n(data, pat, expected, any_string_dtype):
def test_split_to_dataframe_no_splits(any_string_dtype):
def test_split_to_dataframe(any_string_dtype):
def test_split_to_dataframe_unequal_splits(any_string_dtype):
def test_split_to_dataframe_with_index(any_string_dtype):
def test_split_to_multiindex_expand_no_splits():
def test_split_to_multiindex_expand():
def test_split_to_multiindex_expand_unequal_splits():
def test_rsplit_to_dataframe_expand_no_splits(any_string_dtype):
def test_rsplit_to_dataframe_expand(any_string_dtype):
def test_rsplit_to_dataframe_expand_with_index(any_string_dtype):
def test_rsplit_to_multiindex_expand_no_split():
def test_rsplit_to_multiindex_expand():
def test_rsplit_to_multiindex_expand_n():
def test_split_nan_expand(any_string_dtype):
def test_split_with_name_series(any_string_dtype):
def test_split_with_name_index():
def test_partition_series_more_than_one_char(method, exp, any_string_dtype):
def test_partition_series_none(any_string_dtype, method, exp):
def test_partition_series_not_split(any_string_dtype, method, exp):
def test_partition_series_unicode(any_string_dtype, method, exp):
def test_partition_series_stdlib(any_string_dtype, method):
def test_partition_index(method, expand, exp, exp_levels):
def test_partition_to_dataframe(any_string_dtype, method, exp):
def test_partition_to_dataframe_from_series(any_string_dtype, method, exp):
def test_partition_with_name(any_string_dtype):
def test_partition_with_name_expand(any_string_dtype):
def test_partition_index_with_name():
def test_partition_index_with_name_expand_false():
def test_partition_sep_kwarg(any_string_dtype, method):
def test_get():
def test_get_mixed_object():
def test_get_bounds(idx):
def test_get_complex(idx, exp):
def test_get_complex_nested(to_type):
def test_get_strings(any_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_strings.py
-----------------------------
def test_startswith_endswith_non_str_patterns(pattern):
def test_iter_raises():
def test_count(any_string_dtype):
def test_count_mixed_object():
def test_repeat(any_string_dtype):
def test_repeat_mixed_object():
def test_repeat_with_null(any_string_dtype, arg, repeat):
def test_empty_str_methods(any_string_dtype):
def test_ismethods(method, expected, any_string_dtype):
def test_isnumeric_unicode(method, expected, any_string_dtype):
def test_isnumeric_unicode_missing(method, expected, any_string_dtype):
def test_spilt_join_roundtrip(any_string_dtype):
def test_spilt_join_roundtrip_mixed_object():
def test_len(any_string_dtype):
def test_len_mixed():
def test_index(method, sub, start, end, index_or_series, any_string_dtype, expected):
def test_index_not_found_raises(index_or_series, any_string_dtype):
def test_index_wrong_type_raises(index_or_series, any_string_dtype, method):
def test_index_missing(any_string_dtype, method, exp):
def test_pipe_failures(any_string_dtype):
def test_slice(start, stop, step, expected, any_string_dtype):
def test_slice_mixed_object(start, stop, step, expected):
def test_slice_replace(start, stop, repl, expected, any_string_dtype):
def test_strip_lstrip_rstrip(any_string_dtype, method, exp):
def test_strip_lstrip_rstrip_mixed_object(method, exp):
def test_strip_lstrip_rstrip_args(any_string_dtype, method, exp):
def test_removeprefix(any_string_dtype, prefix, expected):
def test_removesuffix(any_string_dtype, suffix, expected):
def test_string_slice_get_syntax(any_string_dtype):
def test_string_slice_out_of_bounds_nested():
def test_string_slice_out_of_bounds(any_string_dtype):
def test_encode_decode(any_string_dtype):
def test_encode_errors_kwarg(any_string_dtype):
def test_decode_errors_kwarg():
def test_decode_string_dtype(string_dtype):
def test_decode_object_dtype(object_dtype):
def test_decode_bad_dtype():
def test_normalize(form, expected, any_string_dtype):
def test_normalize_bad_arg_raises(any_string_dtype):
def test_normalize_index():
def test_index_str_accessor_visibility(values, inferred_type, index_or_series):
def test_index_str_accessor_non_string_values_raises(
def test_index_str_accessor_multiindex_raises():
def test_str_accessor_no_new_attributes(any_string_dtype):
def test_cat_on_bytes_raises():
def test_str_accessor_in_apply_func():
def test_zfill():
def test_zfill_with_non_integer_argument():
def test_zfill_with_leading_sign():
def test_get_with_dict_label():
def test_series_str_decode():
def test_reversed_logical_ops(any_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\test_string_array.py
-----------------------------
def test_string_array(nullable_string_dtype, any_string_method):
def test_string_array_numeric_integer_array(nullable_string_dtype, method, expected):
def test_string_array_boolean_array(nullable_string_dtype, method, expected):
def test_string_array_extract(nullable_string_dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\strings\__init__.py
-----------------------------
>     """
      Check if string-like dtype is following NaN semantics, i.e. is object
      dtype or a NaN-variant of the StringDtype.
def is_object_or_nan_string_dtype(dtype):
def _convert_na_value(ser, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tools\test_to_datetime.py
-----------------------------
> """ test to_datetime """
  
  import calendar
  from collections import deque
def cache(request):
class TestTimeConversionFormats:
class TestToDatetime:
class TestToDatetimeUnit:
class TestToDatetimeDataFrame:
class TestToDatetimeMisc:
class TestGuessDatetimeFormat:
class TestToDatetimeInferFormat:
class TestDaysInMonth:
class TestDatetimeParsingWrappers:
def units(request):
def epoch_1960():
def units_from_epochs():
def epochs(epoch_1960, request):
def julian_dates():
class TestOrigin:
class TestShouldCache:
def test_nullable_integer_to_datetime():
def test_na_to_datetime(nulls_fixture, klass):
def test_empty_string_datetime(errors, args, format):
def test_empty_string_datetime_coerce__unit():
def test_to_datetime_monotonic_increasing_index(cache):
def test_to_datetime_cache_coerce_50_lines_outofbounds(series_length):
def test_to_datetime_format_f_parse_nanos():
def test_to_datetime_mixed_iso8601():
def test_to_datetime_mixed_other():
def test_to_datetime_mixed_or_iso_exact(exact, format):
def test_to_datetime_mixed_not_necessarily_iso8601_raise():
def test_to_datetime_mixed_not_necessarily_iso8601_coerce(errors, expected):
def test_ignoring_unknown_tz_deprecated():
def test_from_numeric_arrow_dtype(any_numeric_ea_dtype):
def test_to_datetime_with_empty_str_utc_false_format_mixed():
def test_to_datetime_with_empty_str_utc_false_offsets_and_format_mixed():
def test_to_datetime_mixed_tzs_mixed_types():
def test_to_datetime_mixed_types_matching_tzs():
def test_to_datetime_mixed_awareness_mixed_types(aware_val, naive_val, naive_first):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tools\test_to_numeric.py
-----------------------------
def errors(request):
def signed(request):
def transform(request):
def large_val(request):
def multiple_elts(request):
def transform_assert_equal(request):
def test_empty(input_kwargs, result_kwargs):
def test_series(last_val, infer_string):
def test_series_numeric(data):
def test_error(data, msg):
def test_ignore_error(errors, exp_data):
def test_bool_handling(errors, exp):
def test_list():
def test_list_numeric(data, arr_kwargs):
def test_numeric(kwargs):
def test_numeric_df_columns(columns):
def test_numeric_embedded_arr_likes(data, exp_data):
def test_all_nan():
def test_type_check(errors):
def test_scalar(val, signed, transform):
def test_really_large_scalar(large_val, signed, transform, errors):
def test_really_large_in_arr(large_val, signed, transform, multiple_elts, errors):
def test_really_large_in_arr_consistent(large_val, signed, multiple_elts, errors):
def test_scalar_fail(errors, checker):
def test_numeric_dtypes(data, transform_assert_equal):
def test_str(data, exp, transform_assert_equal):
def test_datetime_like(tz_naive_fixture, transform_assert_equal):
def test_timedelta(transform_assert_equal):
def test_period(request, transform_assert_equal):
def test_non_hashable(errors, expected):
def test_downcast_invalid_cast():
def test_errors_invalid_value():
def test_downcast_basic(data, kwargs, exp_dtype):
def test_signed_downcast(data, signed_downcast):
def test_ignore_downcast_invalid_data():
def test_ignore_downcast_neg_to_unsigned():
def test_ignore_downcast_cannot_convert_float(data, expected, downcast):
def test_downcast_not8bit(downcast, expected_dtype):
def test_downcast_limits(dtype, downcast, min_max):
def test_downcast_float64_to_float32():
def test_downcast_uint64(ser, expected):
def test_coerce_uint64_conflict(data, exp_data):
def test_non_coerce_uint64_conflict(errors, exp):
def test_downcast_empty(dc1, dc2):
def test_failure_to_convert_uint64_string_to_NaN():
def test_precision_float_conversion(strrep):
def test_to_numeric_from_nullable_string(values, nullable_string_dtype, expected):
def test_to_numeric_from_nullable_string_coerce(nullable_string_dtype):
def test_to_numeric_from_nullable_string_ignore(nullable_string_dtype):
def test_downcast_nullable_numeric(data, input_dtype, downcast, expected_dtype):
def test_downcast_nullable_mask_is_copied():
def test_to_numeric_scientific_notation():
def test_to_numeric_large_float_not_downcast_to_float_32(val):
def test_to_numeric_dtype_backend(val, dtype):
def test_to_numeric_dtype_backend_na(val, dtype):
def test_to_numeric_dtype_backend_downcasting(val, dtype, downcast):
def test_to_numeric_dtype_backend_downcasting_uint(smaller, dtype_backend):
def test_to_numeric_dtype_backend_already_nullable(dtype):
def test_to_numeric_dtype_backend_error(dtype_backend):
def test_invalid_dtype_backend():
def test_coerce_pyarrow_backend():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tools\test_to_time.py
-----------------------------
class TestToTime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tools\test_to_timedelta.py
-----------------------------
class TestTimedeltas:
def test_from_numeric_arrow_dtype(any_numeric_ea_dtype):
def test_from_timedelta_arrow_dtype(unit):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\frequencies\test_frequencies.py
-----------------------------
def test_super_sub_symmetry(p1, p2, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\frequencies\test_freq_code.py
-----------------------------
def test_get_to_timestamp_base(freqstr, exp_freqstr):
def test_resolution_bumping(args, expected):
def test_cat(args):
def test_compatibility(freqstr, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\frequencies\test_inference.py
-----------------------------
def base_delta_code_pair(request):
def test_infer_freq_range(periods, freq):
def test_raise_if_period_index():
def test_raise_if_too_few():
def test_business_daily():
def test_business_daily_look_alike():
def test_day_corner():
def test_non_datetime_index():
def test_fifth_week_of_month_infer():
def test_week_of_month_fake():
def test_fifth_week_of_month():
def test_monthly_ambiguous():
def test_annual_ambiguous():
def test_infer_freq_delta(base_delta_code_pair, count):
def test_infer_freq_custom(base_delta_code_pair, constructor):
def test_infer_freq_index(freq, expected):
def test_infer_freq_tz(tz_naive_fixture, expected, dates, unit):
def test_infer_freq_tz_series(tz_naive_fixture):
def test_infer_freq_tz_transition(tz_naive_fixture, date_pair, freq):
def test_infer_freq_tz_transition_custom():
def test_infer_freq_business_hour(data, expected):
def test_not_monotonic():
def test_non_datetime_index2():
def test_invalid_index_types(idx):
def test_invalid_index_types_unicode():
def test_string_datetime_like_compat():
def test_series():
def test_series_invalid_type(end):
def test_series_inconvertible_string(using_infer_string):
def test_series_period_index(freq):
def test_series_datetime_index(freq):
def test_legacy_offset_warnings(offset_func, freq):
def test_ms_vs_capital_ms():
def test_infer_freq_non_nano():
def test_infer_freq_non_nano_tzaware(tz_aware_fixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\frequencies\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\holiday\test_calendar.py
-----------------------------
def test_calendar(transform):
def test_calendar_caching():
def test_calendar_observance_dates():
def test_rule_from_name():
def test_calendar_2031():
def test_no_holidays_calendar():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\holiday\test_federal.py
-----------------------------
def test_no_mlk_before_1986():
def test_memorial_day():
def test_federal_holiday_inconsistent_returntype():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\holiday\test_holiday.py
-----------------------------
def test_holiday_dates(holiday, start_date, end_date, expected):
def test_holidays_within_dates(holiday, start, expected):
def test_argument_types(transform):
def test_special_holidays(name, kwargs):
def test_get_calendar():
def test_factory():
def test_both_offset_observance_raises():
def test_half_open_interval_with_observance():
def test_holidays_with_timezone_specified_but_no_occurences():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\holiday\test_observance.py
-----------------------------
def test_next_monday(day):
def test_next_monday_or_tuesday(day, expected):
def test_previous_friday(day):
def test_sunday_to_monday():
def test_nearest_workday(day, expected):
def test_weekend_to_monday(day, expected):
def test_next_workday(day, expected):
def test_previous_workday(day, expected):
def test_before_nearest_workday(day, expected):
def test_after_nearest_workday(day, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\holiday\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\common.py
-----------------------------
> """
  Assertion helpers and base class for offsets tests
def assert_offset_equal(offset, base, expected):
def assert_is_on_offset(offset, date, expected):
class WeekDay:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_business_day.py
-----------------------------
> """
  Tests for offsets.BDay
def dt():
def _offset():
def offset(_offset):
def offset2(_offset):
class TestBusinessDay:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_business_hour.py
-----------------------------
> """
  Tests for offsets.BusinessHour
def dt():
def _offset():
def offset1():
def offset2():
def offset3():
def offset4():
def offset5():
def offset6():
def offset7():
def offset8():
def offset9():
def offset10():
class TestBusinessHour:
class TestOpeningTimes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_business_month.py
-----------------------------
> """
  Tests for the following offsets:
  - BMonthBegin
  - BMonthEnd
def test_apply_index(cls, n):
class TestBMonthBegin:
class TestBMonthEnd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_business_quarter.py
-----------------------------
> """
  Tests for the following offsets:
  - BQuarterBegin
  - BQuarterEnd
def test_quarterly_dont_normalize():
def test_on_offset(offset):
class TestBQuarterBegin:
class TestBQuarterEnd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_business_year.py
-----------------------------
> """
  Tests for the following offsets:
  - BYearBegin
  - BYearEnd
class TestBYearBegin:
class TestBYearEnd:
class TestBYearEndLagged:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_common.py
-----------------------------
def _get_offset(klass, value=1, normalize=False):
def _offset(request):
def dt(_offset):
def test_apply_out_of_range(request, tz_naive_fixture, _offset):
def test_offsets_compare_equal(_offset):
def test_rsub(date, offset2):
def test_radd(date, offset2):
def test_sub(date, offset_box, offset2):
def test_Mult1(offset_box, offset1):
def test_compare_str(_offset):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_custom_business_day.py
-----------------------------
> """
  Tests for offsets.CustomBusinessDay / CDay
def offset():
def offset2():
class TestCustomBusinessDay:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_custom_business_hour.py
-----------------------------
> """
  Tests for offsets.CustomBusinessHour
def dt():
def _offset():
def offset1():
def offset2():
class TestCustomBusinessHour:
def test_custom_businesshour_weekmask_and_holidays(weekmask, expected_time, mult):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_custom_business_month.py
-----------------------------
> """
  Tests for the following offsets:
  - CustomBusinessMonthBase
  - CustomBusinessMonthBegin
def dt():
class TestCommonCBM:
class TestCustomBusinessMonthBegin:
class TestCustomBusinessMonthEnd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_dst.py
-----------------------------
> """
  Tests for DateOffset additions over Daylight Savings Time
def get_utc_offset_hours(ts):
class TestDST:
def test_nontick_offset_with_ambiguous_time_error(original_dt, target_dt, offset, tz):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_easter.py
-----------------------------
> """
  Tests for the following offsets:
  - Easter
class TestEaster:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_fiscal.py
-----------------------------
> """
  Tests for Fiscal Year and Fiscal Quarter offset classes
def makeFY5253LastOfMonthQuarter(*args, **kwds):
def makeFY5253NearestEndMonthQuarter(*args, **kwds):
def makeFY5253NearestEndMonth(*args, **kwds):
def makeFY5253LastOfMonth(*args, **kwds):
def test_get_offset_name():
class TestFY5253LastOfMonth:
class TestFY5253NearestEndMonth:
class TestFY5253LastOfMonthQuarter:
class TestFY5253NearestEndMonthQuarter:
def test_bunched_yearends():
def test_fy5253_last_onoffset():
def test_fy5253_nearest_onoffset():
def test_fy5253qtr_onoffset_nearest():
def test_fy5253qtr_onoffset_last():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_index.py
-----------------------------
> """
  Tests for offset behavior with indices.
def test_apply_index(cls, n):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_month.py
-----------------------------
> """
  Tests for the following offsets:
  - SemiMonthBegin
  - SemiMonthEnd
class TestSemiMonthEnd:
class TestSemiMonthBegin:
class TestMonthBegin:
class TestMonthEnd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_offsets.py
-----------------------------
> """
  Tests of pandas.tseries.offsets
def _create_offset(klass, value=1, normalize=False):
def month_classes(request):
def offset_types(request):
def dt():
def expecteds():
class TestCommon:
class TestDateOffset:
class TestOffsetNames:
def test_get_offset():
def test_get_offset_legacy():
class TestOffsetAliases:
def test_freq_offsets():
class TestReprNames:
def test_valid_default_arguments(offset_types):
def test_valid_month_attributes(kwd, month_classes):
def test_month_offset_name(month_classes):
def test_valid_relativedelta_kwargs(kwd, request):
def test_valid_tick_attributes(kwd, tick_classes):
def test_validate_n_error():
def test_require_integers(offset_types):
def test_tick_normalize_raises(tick_classes):
def test_dateoffset_add_sub(offset_kwargs, expected_arg):
def test_dateoffset_add_sub_timestamp_with_nano():
def test_dateoffset_immutable(attribute):
def test_dateoffset_misc():
def test_construct_int_arg_no_kwargs_assumed_days(n):
def test_dateoffset_add_sub_timestamp_series_with_nano(offset, expected):
def test_offset_multiplication(
def test_dateoffset_operations_on_dataframes():
def test_is_yqm_start_end():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_offsets_properties.py
-----------------------------
> """
  Behavioral based tests for offsets and date_range.
  
  This file is adapted from https://github.com/pandas-dev/pandas/pull/18761 -
def test_on_offset_implementations(dt, offset):
def test_shift_across_dst(offset):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_quarter.py
-----------------------------
> """
  Tests for the following offsets:
  - QuarterBegin
  - QuarterEnd
def test_quarterly_dont_normalize(klass):
def test_on_offset(offset, date):
class TestQuarterBegin:
class TestQuarterEnd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_ticks.py
-----------------------------
> """
  Tests for offsets.Tick and subclasses
def test_apply_ticks():
def test_delta_to_tick():
def test_tick_add_sub(cls, n, m):
def test_tick_equality(cls, n, m):
def test_Hour():
def test_Minute():
def test_Second():
def test_Millisecond():
def test_MillisecondTimestampArithmetic():
def test_Microsecond():
def test_NanosecondGeneric():
def test_Nanosecond():
def test_tick_addition(kls, expected):
def test_tick_delta_overflow():
def test_tick_division(cls):
def test_tick_mul_float():
def test_tick_rdiv(cls):
def test_tick_zero(cls1, cls2):
def test_tick_equalities(cls):
def test_tick_offset(cls):
def test_compare_ticks(cls):
def test_compare_ticks_to_strs(cls):
def test_compare_ticks_to_timedeltalike(cls):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_week.py
-----------------------------
> """
  Tests for the following offsets:
  - Week
  - WeekOfMonth
class TestWeek:
class TestWeekOfMonth:
class TestLastWeekOfMonth:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\test_year.py
-----------------------------
> """
  Tests for the following offsets:
  - YearBegin
  - YearEnd
class TestYearBegin:
class TestYearEnd:
class TestYearEndDiffMonth:
def test_add_out_of_pydatetime_range():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\offsets\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tseries\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_api.py
-----------------------------
> """Tests that the tslibs API is locked down"""
  
  from pandas._libs import tslibs
  
def test_namespace():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_array_to_datetime.py
-----------------------------
class TestArrayToDatetimeResolutionInference:
class TestArrayToDatetimeWithTZResolutionInference:
def test_parsing_valid_dates(data, expected):
def test_parsing_timezone_offsets(dt_string, expected_tz):
def test_parsing_non_iso_timezone_offset():
def test_parsing_different_timezone_offsets():
def test_number_looking_strings_not_into_datetime(data):
def test_coerce_outside_ns_bounds(invalid_date, errors):
def test_coerce_outside_ns_bounds_one_valid():
def test_coerce_of_invalid_datetimes(errors):
def test_to_datetime_barely_out_of_bounds():
def test_to_datetime_barely_inside_bounds(timestamp):
class SubDatetime(datetime):
def test_datetime_subclass(data, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_ccalendar.py
-----------------------------
def test_get_day_of_year_numeric(date_tuple, expected):
def test_get_day_of_year_dt():
def test_dt_correct_iso_8601_year_week_and_day(input_date_tuple, expected_iso_tuple):
def test_isocalendar(dt):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_conversion.py
-----------------------------
def _compare_utc_to_local(tz_didx):
def _compare_local_to_utc(tz_didx, naive_didx):
def test_tz_localize_to_utc_copies():
def test_tz_convert_single_matches_tz_convert_hourly(tz_aware_fixture):
def test_tz_convert_single_matches_tz_convert(tz_aware_fixture, freq):
def test_tz_convert_corner(arr):
def test_tz_convert_readonly():
def test_length_zero_copy(dtype, copy):
def test_ensure_datetime64ns_bigendian():
def test_ensure_timedelta64ns_overflows():
class SubDatetime(datetime):
def test_localize_pydatetime_dt_types(dt, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_fields.py
-----------------------------
def dtindex():
def test_get_date_name_field_readonly(dtindex):
def test_get_date_field_readonly(dtindex):
def test_get_start_end_field_readonly(dtindex):
def test_get_timedelta_field_readonly(dtindex):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_libfrequencies.py
-----------------------------
def test_get_rule_month(obj, expected):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_liboffsets.py
-----------------------------
> """
  Tests for helper functions in the cython tslibs.offsets
def day_opt(request):
def test_get_last_bday(dt, exp_week_day, exp_last_day):
def test_get_first_bday(dt, exp_week_day, exp_first_day):
def test_shift_month_dt(months, day_opt, expected):
def test_shift_month_ts(months, day_opt, expected):
def test_shift_month_error():
def test_roll_qtrday_year(other, expected, n):
def test_roll_qtrday_year2(other, expected, n):
def test_get_day_of_month_error():
def test_roll_qtr_day_not_mod_unequal(day_opt, month, n):
def test_roll_qtr_day_mod_equal(other, month, exp_dict, n, day_opt):
def test_roll_convention(n, expected, compare):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_npy_units.py
-----------------------------
class TestIsDateArrayNormalized:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_np_datetime.py
-----------------------------
def test_is_unitless():
def test_get_unit_from_dtype():
def test_td64_to_tdstruct():
class TestAstypeOverflowSafe:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_parse_iso8601.py
-----------------------------
def test_parsers_iso8601(date_str, exp):
def test_parsers_iso8601_invalid(date_str):
def test_parsers_iso8601_invalid_offset_invalid():
def test_parsers_iso8601_leading_space():
def test_iso8601_formatter(date_str: str, timespec: str, exp: str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_parsing.py
-----------------------------
> """
  Tests for Timestamp parsing, aimed at pandas/_libs/tslibs/parsing.pyx
def test_parsing_tzlocal_deprecated():
def test_parse_datetime_string_with_reso():
def test_parse_datetime_string_with_reso_nanosecond_reso():
def test_parse_datetime_string_with_reso_invalid_type():
def test_parse_time_quarter_with_dash(dashed, normal):
def test_parse_time_quarter_with_dash_error(dashed):
def test_does_not_convert_mixed_integer(date_string, expected):
def test_parsers_quarterly_with_freq_error(date_str, kwargs, msg):
def test_parsers_quarterly_with_freq(date_str, freq, expected):
def test_parsers_quarter_invalid(date_str):
def test_parsers_month_freq(date_str, expected):
def test_guess_datetime_format_with_parseable_formats(string, fmt):
def test_guess_datetime_format_with_dayfirst(dayfirst, expected):
def test_guess_datetime_format_with_locale_specific_formats(string, fmt):
def test_guess_datetime_format_invalid_inputs(invalid_dt):
def test_guess_datetime_format_wrong_type_inputs(invalid_type_dt):
def test_guess_datetime_format_no_padding(string, fmt, dayfirst, warning):
def test_try_parse_dates():
def test_parse_datetime_string_with_reso_check_instance_type_raise_exception():
def test_is_iso_format(fmt, expected):
def test_guess_datetime_format_f(input):
def _helper_hypothesis_delimited_date(call, date_string, **kwargs):
def test_hypothesis_delimited_date(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_period.py
-----------------------------
def get_freq_code(freqstr: str) -> int:
def test_intra_day_conversion_factors(freq1, freq2, expected):
def test_period_ordinal_start_values(freq, expected):
def test_period_ordinal_week(dt, expected):
def test_period_ordinal_business_day(day, expected):
class TestExtractOrdinals:
def test_get_period_field_array_raises_on_out_of_range():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_resolution.py
-----------------------------
def test_get_resolution_nano():
def test_get_resolution_non_nano_data():
def test_get_attrname_from_abbrev(freqstr, expected):
def test_units_A_H_T_S_L_U_N_deprecated_from_attrname_to_abbrevs(freq):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_strptime.py
-----------------------------
class TestArrayStrptimeResolutionInference:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_timedeltas.py
-----------------------------
def test_delta_to_nanoseconds(obj, expected):
def test_delta_to_nanoseconds_error():
def test_delta_to_nanoseconds_td64_MY_raises():
def test_unsupported_td64_unit_raises(unit):
def test_huge_nanoseconds_overflow():
def test_kwarg_assertion(kwargs):
class TestArrayToTimedelta64:
def test_ints_to_pytimedelta(unit):
def test_ints_to_pytimedelta_unsupported(unit):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_timezones.py
-----------------------------
def test_is_utc(utc_fixture):
def test_cache_keys_are_distinct_for_pytz_vs_dateutil(tz_name):
def test_tzlocal_repr():
def test_tzlocal_maybe_get_tz():
def test_tzlocal_offset():
def test_tzlocal_is_not_utc():
def test_tz_compare_utc(utc_fixture, utc_fixture2):
def infer_setup(request):
def test_infer_tz_compat(infer_setup):
def test_infer_tz_utc_localize(infer_setup):
def test_infer_tz_mismatch(infer_setup, ordered):
def test_maybe_get_tz_invalid_types():
def test_maybe_get_tz_offset_only():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_to_offset.py
-----------------------------
def test_to_offset(freq_input, expected):
def test_to_offset_negative(freqstr, expected):
def test_to_offset_invalid(freqstr):
def test_to_offset_no_evaluate():
def test_to_offset_tuple_unsupported():
def test_to_offset_whitespace(freqstr, expected):
def test_to_offset_leading_zero(freqstr, expected):
def test_to_offset_leading_plus(freqstr, expected):
def test_to_offset_pd_timedelta(kwargs, expected):
def test_anchored_shortcuts(shortcut, expected):
def test_to_offset_lowercase_frequency_deprecated(freq_depr):
def test_to_offset_uppercase_frequency_deprecated(freq_depr):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\test_tzconversion.py
-----------------------------
class TestTZLocalizeToUTC:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\tslibs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\conftest.py
-----------------------------
def check_dtype(request):
def check_exact(request):
def check_index_type(request):
def rtol(request):
def check_categorical(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_almost_equal.py
-----------------------------
>     """
      Check that two objects are approximately equal.
  
      This check is performed commutatively.
def _assert_almost_equal_both(a, b, **kwargs):
def _assert_not_almost_equal(a, b, **kwargs):
def _assert_not_almost_equal_both(a, b, **kwargs):
def test_assert_almost_equal_numbers(a, b):
def test_assert_not_almost_equal_numbers(a, b):
def test_assert_almost_equal_numbers_atol(a, b):
def test_assert_not_almost_equal_numbers_atol(a, b):
def test_assert_almost_equal_numbers_rtol(a, b):
def test_assert_not_almost_equal_numbers_rtol(a, b):
def test_assert_almost_equal_complex_numbers(a, b, rtol):
def test_assert_not_almost_equal_complex_numbers(a, b, rtol):
def test_assert_almost_equal_numbers_with_zeros(a, b):
def test_assert_not_almost_equal_numbers_with_zeros(a, b):
def test_assert_not_almost_equal_numbers_with_mixed(a, b):
def test_assert_almost_equal_edge_case_ndarrays(left_dtype, right_dtype):
def test_assert_almost_equal_sets():
def test_assert_almost_not_equal_sets():
def test_assert_almost_equal_dicts():
def test_assert_not_almost_equal_dicts(a, b):
def test_assert_almost_equal_dict_like_object(val):
def test_assert_almost_equal_strings():
def test_assert_not_almost_equal_strings(a, b):
def test_assert_almost_equal_iterables(a, b):
def test_assert_not_almost_equal_iterables(a, b):
def test_assert_almost_equal_null():
def test_assert_not_almost_equal_null(a, b):
def test_assert_almost_equal_inf(a, b):
def test_mismatched_na_assert_almost_equal_deprecation(left, right):
def test_assert_not_almost_equal_inf():
def test_assert_almost_equal_pandas(a, b):
def test_assert_almost_equal_object():
def test_assert_almost_equal_value_mismatch():
def test_assert_almost_equal_class_mismatch(a, b, klass1, klass2):
def test_assert_almost_equal_value_mismatch1():
def test_assert_almost_equal_value_mismatch2():
def test_assert_almost_equal_value_mismatch3():
def test_assert_almost_equal_value_mismatch4():
def test_assert_almost_equal_shape_mismatch_override():
def test_assert_almost_equal_unicode():
def test_assert_almost_equal_timestamp():
def test_assert_almost_equal_iterable_length_mismatch():
def test_assert_almost_equal_iterable_values_mismatch():
def test_assert_almost_equal_array_nested(a, b):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_attr_equal.py
-----------------------------
def test_assert_attr_equal(nulls_fixture):
def test_assert_attr_equal_different_nulls(nulls_fixture, nulls_fixture2):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_categorical_equal.py
-----------------------------
>         msg = """Categorical\\.categories are different
  
  Categorical\\.categories values are different \\(100\\.0 %\\)
  \\[left\\]:  Index\\(\\[1, 2, 3, 4\\], dtype='int64'\\)
def test_categorical_equal(c):
def test_categorical_equal_order_mismatch(check_category_order):
def test_categorical_equal_categories_mismatch():
def test_categorical_equal_codes_mismatch():
def test_categorical_equal_ordered_mismatch():
def test_categorical_equal_object_override(obj):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_extension_array_equal.py
-----------------------------
>         msg = """\
  ExtensionArray are different
  
  ExtensionArray values are different \\(50\\.0 %\\)
def test_assert_extension_array_equal_not_exact(kwargs):
def test_assert_extension_array_equal_less_precise(decimals):
def test_assert_extension_array_equal_dtype_mismatch(check_dtype):
def test_assert_extension_array_equal_missing_values():
def test_assert_extension_array_equal_non_extension_array(side):
def test_assert_extension_array_equal_ignore_dtype_mismatch(right_dtype):
def test_assert_extension_array_equal_time_units():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_frame_equal.py
-----------------------------
>     """
      Check that two DataFrame equal.
  
      This check is performed commutatively.
def by_blocks_fixture(request):
def obj_fixture(request):
def _assert_frame_equal_both(a, b, **kwargs):
def test_frame_equal_row_order_mismatch(check_like, obj_fixture):
def test_frame_equal_shape_mismatch(df1, df2, obj_fixture):
def test_frame_equal_index_dtype_mismatch(df1, df2, msg, check_index_type):
def test_empty_dtypes(check_dtype):
def test_frame_equal_index_mismatch(check_like, obj_fixture, using_infer_string):
def test_frame_equal_columns_mismatch(check_like, obj_fixture, using_infer_string):
def test_frame_equal_block_mismatch(by_blocks_fixture, obj_fixture):
def test_frame_equal_unicode(df1, df2, msg, by_blocks_fixture, obj_fixture):
def test_assert_frame_equal_extension_dtype_mismatch():
def test_assert_frame_equal_interval_dtype_mismatch():
def test_assert_frame_equal_ignore_extension_dtype_mismatch():
def test_assert_frame_equal_ignore_extension_dtype_mismatch_cross_class():
def test_assert_frame_equal_datetime_like_dtype_mismatch(dtype):
def test_allows_duplicate_labels():
def test_assert_frame_equal_columns_mixed_dtype():
def test_frame_equal_extension_dtype(frame_or_series, any_numeric_ea_dtype):
def test_frame_equal_mixed_dtypes(frame_or_series, any_numeric_ea_dtype, indexer):
def test_assert_frame_equal_check_like_different_indexes():
def test_assert_frame_equal_checking_allow_dups_flag():
def test_assert_frame_equal_check_like_categorical_midx():
def test_assert_frame_equal_ea_column_definition_in_exception_mask():
def test_assert_frame_equal_ea_column_definition_in_exception():
def test_assert_frame_equal_ts_column():
def test_assert_frame_equal_set():
def test_assert_frame_equal_set_mismatch():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_index_equal.py
-----------------------------
>     msg = """Index are different
  
  Index levels are different
  \\[left\\]:  1, Index\\(\\[1, 2, 3\\], dtype='int64'\\)
def test_index_equal_levels_mismatch():
def test_index_equal_values_mismatch(check_exact):
def test_index_equal_length_mismatch(check_exact):
def test_index_equal_class(exact):
def test_int_float_index_equal_class_mismatch(check_exact):
def test_range_index_equal_class_mismatch(check_exact):
def test_index_equal_values_close(check_exact):
def test_index_equal_values_less_close(check_exact, rtol):
def test_index_equal_values_too_far(check_exact, rtol):
def test_index_equal_value_order_mismatch(check_exact, rtol, check_order):
def test_index_equal_level_values_mismatch(check_exact, rtol):
def test_index_equal_names(name1, name2):
def test_index_equal_category_mismatch(check_categorical, using_infer_string):
def test_index_equal_range_categories(check_categorical, exact):
def test_assert_index_equal_different_inferred_types():
def test_assert_index_equal_different_names_check_order_false():
def test_assert_index_equal_mixed_dtype():
def test_assert_index_equal_ea_dtype_order_false(any_numeric_ea_dtype):
def test_assert_index_equal_object_ints_order_false():
def test_assert_ea_index_equal_non_matching_na(check_names, check_categorical):
def test_assert_multi_index_dtype_check_categorical(check_categorical):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_interval_array_equal.py
-----------------------------
>     msg = """\
  IntervalArray are different
  
  Attribute "closed" are different
def test_interval_array_equal(kwargs):
def test_interval_array_equal_closed_mismatch():
def test_interval_array_equal_periods_mismatch():
def test_interval_array_equal_end_mismatch():
def test_interval_array_equal_start_mismatch():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_numpy_array_equal.py
-----------------------------
>     msg = """numpy array are different
  
  numpy array shapes are different
  \\[left\\]:  \\(2L*,\\)
def test_assert_numpy_array_equal_shape_mismatch():
def test_assert_numpy_array_equal_bad_type():
def test_assert_numpy_array_equal_class_mismatch(a, b, klass1, klass2):
def test_assert_numpy_array_equal_value_mismatch1():
def test_assert_numpy_array_equal_value_mismatch2():
def test_assert_numpy_array_equal_value_mismatch3():
def test_assert_numpy_array_equal_value_mismatch4():
def test_assert_numpy_array_equal_value_mismatch5():
def test_assert_numpy_array_equal_value_mismatch6():
def test_assert_numpy_array_equal_shape_mismatch_override():
def test_numpy_array_equal_unicode():
def test_numpy_array_equal_object():
def test_numpy_array_equal_copy_flag(other_type, check_same):
def test_numpy_array_equal_contains_na():
def test_numpy_array_equal_identical_na(nulls_fixture):
def test_numpy_array_equal_different_na():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_produces_warning.py
-----------------------------
> """"
  Test module for testing ``pandas._testing.assert_produces_warning``.
def category(request):
def pair_different_warnings(request):
def f():
def test_assert_produces_warning_honors_filter():
def test_catch_warning_category_and_match(category, message, match):
def test_fail_to_match_runtime_warning():
def test_fail_to_match_future_warning():
def test_fail_to_match_resource_warning():
def test_fail_to_catch_actual_warning(pair_different_warnings):
def test_ignore_extra_warning(pair_different_warnings):
def test_raise_on_extra_warning(pair_different_warnings):
def test_same_category_different_messages_first_match():
def test_same_category_different_messages_last_match():
def test_match_multiple_warnings():
def test_right_category_wrong_match_raises(pair_different_warnings):
class TestFalseOrNoneExpectedWarning:
def test_raises_during_exception():
def test_passes_during_exception():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_assert_series_equal.py
-----------------------------
>     """
      Check that two Series equal.
  
      This check is performed commutatively.
def _assert_series_equal_both(a, b, **kwargs):
def _assert_not_series_equal(a, b, **kwargs):
def _assert_not_series_equal_both(a, b, **kwargs):
def test_series_equal(data):
def test_series_not_equal_value_mismatch(data1, data2):
def test_series_not_equal_metadata_mismatch(kwargs):
def test_less_precise(data1, data2, dtype, decimals):
def test_series_equal_index_dtype(s1, s2, msg, check_index_type):
def test_series_equal_order_mismatch(check_like):
def test_series_equal_index_mismatch(check_index):
def test_series_invalid_param_combination():
def test_series_equal_length_mismatch(rtol):
def test_series_equal_numeric_values_mismatch(rtol):
def test_series_equal_categorical_values_mismatch(rtol, using_infer_string):
def test_series_equal_datetime_values_mismatch(rtol):
def test_series_equal_categorical_mismatch(check_categorical, using_infer_string):
def test_assert_series_equal_extension_dtype_mismatch():
def test_assert_series_equal_interval_dtype_mismatch():
def test_series_equal_series_type():
def test_series_equal_exact_for_nonnumeric():
def test_assert_series_equal_ignore_extension_dtype_mismatch():
def test_assert_series_equal_ignore_extension_dtype_mismatch_cross_class():
def test_allows_duplicate_labels():
def test_assert_series_equal_identical_na(nulls_fixture):
def test_identical_nested_series_is_equal():
def test_check_dtype_false_different_reso(dtype):
def test_large_unequal_ints(dtype):
def test_ea_and_numpy_no_dtype_check(val, check_exact, dtype):
def test_assert_series_equal_int_tol():
def test_assert_series_equal_index_exact_default():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_deprecate.py
-----------------------------
>     """
      This is the summary. The deprecate directive goes next.
  
      This is the extended summary. The deprecate directive goes before this.
def new_func():
def new_func_no_docstring():
def new_func_wrong_docstring():
def new_func_with_deprecation():
def test_deprecate_ok():
def test_deprecate_no_docstring():
def test_deprecate_wrong_docstring():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_deprecate_kwarg.py
-----------------------------
def _f1(new=False):
def _f2(new=False):
def _f3_mapping(x):
def _f3(new=0):
def test_deprecate_kwarg(key, klass):
def test_dict_deprecate_kwarg(key):
def test_missing_deprecate_kwarg(key):
def test_callable_deprecate_kwarg(x):
def test_callable_deprecate_kwarg_fail():
def test_bad_deprecate_kwarg():
def _f4(old=True, unchanged=True):
def test_deprecate_keyword(key):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_deprecate_nonkeyword_arguments.py
-----------------------------
> """
  Tests for the `deprecate_nonkeyword_arguments` decorator
def f(a, b=0, c=0, d=0):
def test_f_signature():
def test_one_argument():
def test_one_and_one_arguments():
def test_two_arguments():
def test_two_and_two_arguments():
def test_three_arguments():
def test_four_arguments():
def test_three_arguments_with_name_in_warning():
def g(a, b=0, c=0, d=0):
def test_g_signature():
def test_one_and_three_arguments_default_allowed_args():
def test_three_arguments_default_allowed_args():
def test_three_positional_argument_with_warning_message_analysis():
def h(a=0, b=0, c=0, d=0):
def test_h_signature():
def test_all_keyword_arguments():
def test_one_positional_argument():
def test_one_positional_argument_with_warning_message_analysis():
def i(a=0, /, b=0, *, c=0, d=0):
def test_i_signature():
class Foo:
def test_foo_signature():
def test_class():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_doc.py
-----------------------------
>     """
      This is the {method} method.
  
      It computes the cumulative {operation}.
def cumsum(whatever):
def cumavg(whatever):
def cummax(whatever):
def cummin(whatever):
def test_docstring_formatting():
def test_docstring_appending():
def test_doc_template_from_func():
def test_inherit_doc_template():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_hashing.py
-----------------------------
def series(request):
def index(request):
def test_consistency():
def test_hash_array(series):
def test_hash_array_mixed(dtype):
def test_hash_array_errors(val):
def test_hash_array_index_exception():
def test_hash_tuples():
def test_hash_tuples_err(val):
def test_multiindex_unique():
def test_multiindex_objects():
def test_hash_pandas_object(obj, index):
def test_hash_pandas_object_diff_index_non_empty(obj):
def test_hash_pandas_index(obj, index):
def test_hash_pandas_series(series, index):
def test_hash_pandas_series_diff_index(series):
def test_hash_pandas_empty_object(obj, index):
def test_categorical_consistency(s1, categorize):
def test_categorical_with_nan_consistency():
def test_pandas_errors():
def test_hash_keys():
def test_df_hash_keys():
def test_df_encoding():
def test_invalid_key():
def test_already_encoded(index):
def test_alternate_encoding(index):
def test_same_len_hash_collisions(l_exp, l_add):
def test_hash_collisions():
def test_hash_with_tuple(data, result_data):
def test_hashable_tuple_args():
def test_hash_object_none_key():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_numba.py
-----------------------------
def test_numba_not_installed_option_context():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_rewrite_warning.py
-----------------------------
def test_rewrite_warning(target_category, target_message, hit, new_category):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_shares_memory.py
-----------------------------
def test_shares_memory_interval():
def test_shares_memory_string():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_show_versions.py
-----------------------------
def test_show_versions(tmpdir):
def test_show_versions_console_json(capsys):
def test_show_versions_console(capsys):
def test_json_output_match(capsys, tmpdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_util.py
-----------------------------
def test_numpy_err_state_is_default():
def test_convert_rows_list_to_csv_str():
def test_datapath_missing(datapath):
def test_datapath(datapath):
def test_external_error_raised():
def test_is_sorted():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_validate_args.py
-----------------------------
def _fname():
def test_bad_min_fname_arg_count(_fname):
def test_bad_arg_length_max_value_single(_fname):
def test_bad_arg_length_max_value_multiple(_fname):
def test_not_all_defaults(i, _fname):
def test_validation(_fname):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_validate_args_and_kwargs.py
-----------------------------
def _fname():
def test_invalid_total_length_max_length_one(_fname):
def test_invalid_total_length_max_length_multiple(_fname):
def test_missing_args_or_kwargs(args, kwargs, _fname):
def test_duplicate_argument(_fname):
def test_validation(_fname):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_validate_inclusive.py
-----------------------------
def test_invalid_inclusive(invalid_inclusive):
def test_valid_inclusive(valid_inclusive, expected_tuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\test_validate_kwargs.py
-----------------------------
def _fname():
def test_bad_kwarg(_fname):
def test_not_all_none(i, _fname):
def test_validation(_fname):
def test_validate_bool_kwarg_fail(name, value):
def test_validate_bool_kwarg(name, value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\moments\conftest.py
-----------------------------
>     """
      Test:
          - Empty Series / DataFrame
          - All NaN
def create_series():
def create_dataframes():
def is_constant(x):
def consistent_data(request):
def series_data(request):
def all_data(request):
def min_periods(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\moments\test_moments_consistency_ewm.py
-----------------------------
def create_mock_weights(obj, com, adjust, ignore_na):
def create_mock_series_weights(s, com, adjust, ignore_na):
def test_ewm_consistency_mean(all_data, adjust, ignore_na, min_periods):
def test_ewm_consistency_consistent(consistent_data, adjust, ignore_na, min_periods):
def test_ewm_consistency_var_debiasing_factors(
def test_moments_consistency_var(all_data, adjust, ignore_na, min_periods, bias):
def test_moments_consistency_var_constant(
def test_ewm_consistency_std(all_data, adjust, ignore_na, min_periods, bias):
def test_ewm_consistency_series_cov_corr(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\moments\test_moments_consistency_expanding.py
-----------------------------
def no_nans(x):
def all_na(x):
def test_expanding_apply_consistency_sum_nans(request, all_data, min_periods, f):
def test_moments_consistency_var(all_data, min_periods, ddof):
def test_moments_consistency_var_constant(consistent_data, min_periods, ddof):
def test_expanding_consistency_var_std_cov(all_data, min_periods, ddof):
def test_expanding_consistency_series_cov_corr(series_data, min_periods, ddof):
def test_expanding_consistency_mean(all_data, min_periods):
def test_expanding_consistency_constant(consistent_data, min_periods):
def test_expanding_consistency_var_debiasing_factors(all_data, min_periods):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\moments\test_moments_consistency_rolling.py
-----------------------------
>     """window, min_periods"""
      return request.param
  
  
def no_nans(x):
def all_na(x):
def rolling_consistency_cases(request):
def test_rolling_apply_consistency_sum(
def test_moments_consistency_var(all_data, rolling_consistency_cases, center, ddof):
def test_moments_consistency_var_constant(
def test_rolling_consistency_var_std_cov(
def test_rolling_consistency_series_cov_corr(
def test_rolling_consistency_mean(all_data, rolling_consistency_cases, center):
def test_rolling_consistency_constant(
def test_rolling_consistency_var_debiasing_factors(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\moments\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\conftest.py
-----------------------------
>     """raw keyword argument for rolling.apply"""
      return request.param
  
  
def raw(request):
def arithmetic_win_operators(request):
def center(request):
def min_periods(request):
def parallel(request):
def nogil(request):
def nopython(request):
def adjust(request):
def ignore_na(request):
def numeric_only(request):
def engine(request):
def engine_and_raw(request):
def halflife_with_times(request):
def series():
def frame():
def step(request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_api.py
-----------------------------
def test_getitem(step):
def test_select_bad_cols():
def test_attribute_access():
def tests_skip_nuisance(step):
def test_sum_object_str_raises(step):
def test_agg(step):
def test_multi_axis_1_raises(func):
def test_agg_apply(raw):
def test_agg_consistency(step):
def test_agg_nested_dicts():
def test_count_nonnumeric_types(step):
def test_preserve_metadata():
def test_multiple_agg_funcs(func, window_size, expected_vals):
def test_dont_modify_attributes_after_methods(
def test_centered_axis_validation(step):
def test_rolling_min_min_periods(step):
def test_rolling_max_min_periods(step):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_apply.py
-----------------------------
def f(x):
def test_rolling_apply_invalid_raw(bad_raw):
def test_rolling_apply_out_of_bounds(engine_and_raw):
def test_rolling_apply_with_pandas_objects(window):
def test_rolling_apply(engine_and_raw, step):
def test_all_apply(engine_and_raw):
def test_ragged_apply(engine_and_raw):
def test_invalid_engine():
def test_invalid_engine_kwargs_cython():
def test_invalid_raw_numba():
def test_rolling_apply_args_kwargs(args_kwargs):
def test_nans(raw):
def test_center(raw):
def test_series(raw, series):
def test_frame(raw, frame):
def test_time_rule_series(raw, series):
def test_time_rule_frame(raw, frame):
def test_min_periods(raw, series, minp, step):
def test_center_reindex_series(raw, series):
def test_center_reindex_frame(raw):
def test_axis1(raw):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_base_indexer.py
-----------------------------
def test_bad_get_window_bounds_signature():
def test_expanding_indexer():
def test_indexer_constructor_arg():
def test_indexer_accepts_rolling_args():
def test_rolling_forward_window(
def test_rolling_forward_skewness(frame_or_series, step):
def test_rolling_forward_cov_corr(func, expected):
def test_non_fixed_variable_window_indexer(closed, expected_data):
def test_variableoffsetwindowindexer_not_dti():
def test_variableoffsetwindowindexer_not_offset():
def test_fixed_forward_indexer_count(step):
def test_indexer_quantile_sum(end_value, values, func, args):
def test_indexers_are_reusable_after_groupby_rolling(
def test_fixed_forward_indexer_bounds(
def test_rolling_groupby_with_fixed_forward_specific(df, window_size, expected):
def test_rolling_groupby_with_fixed_forward_many(group_keys, window_size):
def test_unequal_start_end_bounds():
def test_unequal_bounds_to_object():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_cython_aggregations.py
-----------------------------
>     """Make a rolling aggregation function as fixture."""
      return request.param
  
  
def _get_rolling_aggregations():
def rolling_aggregation(request):
def test_rolling_aggregation_boundary_consistency(rolling_aggregation):
def test_rolling_aggregation_with_unused_elements(rolling_aggregation):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_dtypes.py
-----------------------------
>     """Dtypes for window tests"""
      return request.param
  
  
def get_dtype(dtype, coerce_int=None):
def dtypes(request):
def test_series_dtypes(
def test_series_nullable_int(any_signed_int_ea_dtype, step):
def test_dataframe_dtypes(method, expected_data, dtypes, min_periods, step):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_ewm.py
-----------------------------
def test_doc_string():
def test_constructor(frame_or_series):
def test_ewma_times_not_datetime_type():
def test_ewma_times_not_same_length():
def test_ewma_halflife_not_correct_type():
def test_ewma_halflife_without_times(halflife_with_times):
def test_ewma_with_times_equal_spacing(halflife_with_times, times, min_periods):
def test_ewma_with_times_variable_spacing(tz_aware_fixture, unit):
def test_ewm_with_nat_raises(halflife_with_times):
def test_ewm_with_times_getitem(halflife_with_times):
def test_ewm_getitem_attributes_retained(arg, adjust, ignore_na):
def test_ewma_times_adjust_false_raises():
def test_float_dtype_ewma(func, expected, float_numpy_dtype):
def test_times_string_col_raises():
def test_ewm_sum_adjust_false_notimplemented():
def test_ewm_sum(expected_data, ignore):
def test_ewma_adjust():
def test_ewma_cases(adjust, ignore_na):
def test_ewma_nan_handling():
def test_ewma_nan_handling_cases(s, adjust, ignore_na, w):
def test_ewm_alpha():
def test_ewm_domain_checks():
def test_ew_empty_series(method):
def test_ew_min_periods(min_periods, name):
def test_ewm_corr_cov(name):
def test_ewm_corr_cov_min_periods(name, min_periods):
def test_different_input_array_raise_exception(name):
def test_ewma_series(series, name):
def test_ewma_frame(frame, name):
def test_ewma_span_com_args(series):
def test_ewma_halflife_arg(series):
def test_ewm_alpha_arg(series):
def test_ewm_pairwise_cov_corr(func, frame):
def test_numeric_only_frame(arithmetic_win_operators, numeric_only):
def test_numeric_only_corr_cov_frame(kernel, numeric_only, use_arg):
def test_numeric_only_series(arithmetic_win_operators, numeric_only, dtype):
def test_numeric_only_corr_cov_series(kernel, use_arg, numeric_only, dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_expanding.py
-----------------------------
def test_doc_string():
def test_constructor(frame_or_series):
def test_constructor_invalid(frame_or_series, w):
def test_empty_df_expanding(expander):
def test_missing_minp_zero():
def test_expanding_axis(axis_frame):
def test_expanding_count_with_min_periods(frame_or_series):
def test_expanding_count_default_min_periods_with_null_values(frame_or_series):
def test_expanding_count_with_min_periods_exceeding_series_length(frame_or_series):
def test_iter_expanding_dataframe(df, expected, min_periods):
def test_iter_expanding_series(ser, expected, min_periods):
def test_center_invalid():
def test_expanding_sem(frame_or_series):
def test_expanding_skew_kurt_numerical_stability(method):
def test_rank(window, method, pct, ascending, test_data):
def test_expanding_corr(series):
def test_expanding_count(series):
def test_expanding_quantile(series):
def test_expanding_cov(series):
def test_expanding_cov_pairwise(frame):
def test_expanding_corr_pairwise(frame):
def test_expanding_func(func, static_comp, frame_or_series):
def test_expanding_min_periods(func, static_comp):
def test_expanding_apply(engine_and_raw, frame_or_series):
def test_expanding_min_periods_apply(engine_and_raw):
def test_moment_functions_zero_length_pairwise(f):
def test_moment_functions_zero_length(f):
def test_expanding_apply_empty_series(engine_and_raw):
def test_expanding_apply_min_periods_0(engine_and_raw):
def test_expanding_cov_diff_index():
def test_expanding_corr_diff_index():
def test_expanding_cov_pairwise_diff_length():
def test_expanding_corr_pairwise_diff_length():
def test_expanding_apply_args_kwargs(engine_and_raw):
def test_numeric_only_frame(arithmetic_win_operators, numeric_only):
def test_numeric_only_corr_cov_frame(kernel, numeric_only, use_arg):
def test_numeric_only_series(arithmetic_win_operators, numeric_only, dtype):
def test_numeric_only_corr_cov_series(kernel, use_arg, numeric_only, dtype):
def test_keyword_quantile_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_groupby.py
-----------------------------
>     """Frame for testing times argument in EWM groupby."""
      return DataFrame(
          {
              "A": ["a", "b", "c", "a", "b", "c", "a", "b", "c", "a"],
def times_frame():
def roll_frame():
class TestRolling:
class TestExpanding:
class TestEWM:
def test_rolling_corr_with_single_integer_in_index():
def test_rolling_corr_with_tuples_in_index():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_numba.py
-----------------------------
>     """method keyword in rolling/expanding/ewm constructor"""
      return request.param
  
  
def method(request):
def arithmetic_numba_supported_operators(request):
class TestEngine:
class TestEWM:
def test_use_global_config():
def test_invalid_kwargs_nopython():
class TestTableMethod:
def test_npfunc_no_warnings():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_online.py
-----------------------------
class TestEWM:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_pairwise.py
-----------------------------
>     """Pairwise frames test_pairwise"""
      return request.param
  
  
def pairwise_frames(request):
def pairwise_target_frame():
def pairwise_other_frame():
def test_rolling_cov(series):
def test_rolling_corr(series):
def test_rolling_corr_bias_correction():
def test_rolling_pairwise_cov_corr(func, frame):
def test_flex_binary_frame(method, frame):
def test_rolling_corr_with_zero_variance(window):
def test_corr_sanity():
def test_rolling_cov_diff_length():
def test_rolling_corr_diff_length():
def test_rolling_functions_window_non_shrinkage_binary(f):
def test_moment_functions_zero_length_pairwise(f):
class TestPairwise:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_rolling.py
-----------------------------
>     """
      Make sure that decreasing indices give the same results as increasing indices.
  
      GH 36933
def test_doc_string():
def test_constructor(frame_or_series):
def test_invalid_constructor(frame_or_series, w):
def test_freq_window_not_implemented(window):
def test_step_not_implemented_for_cov_corr(agg):
def test_constructor_with_timedelta_window(window):
def test_constructor_timedelta_window_and_minperiods(window, raw):
def test_closed_fixed(closed, arithmetic_win_operators):
def test_datetimelike_centered_selections(
def test_datetimelike_centered_offset_covers_all(
def test_datetimelike_nonunique_index_centering(
def test_variable_window_nonunique(closed, expected, frame_or_series):
def test_variable_offset_window_nonunique(closed, expected, frame_or_series):
def test_even_number_window_alignment():
def test_closed_fixed_binary_col(center, step):
def test_closed_empty(closed, arithmetic_win_operators):
def test_closed_one_entry(func):
def test_closed_one_entry_groupby(func):
def test_closed_min_max_datetime(input_dtype, func, closed, expected):
def test_closed_uneven():
def test_closed_min_max_minp(func, closed, expected):
def test_closed_median_quantile(closed, expected):
def tests_empty_df_rolling(roller):
def test_empty_window_median_quantile():
def test_missing_minp_zero():
def test_missing_minp_zero_variable():
def test_multi_index_names():
def test_rolling_axis_sum(axis_frame):
def test_rolling_axis_count(axis_frame):
def test_readonly_array():
def test_rolling_datetime(axis_frame, tz_naive_fixture):
def test_rolling_window_as_string(center):
def test_min_periods1():
def test_rolling_count_with_min_periods(frame_or_series):
def test_rolling_count_default_min_periods_with_null_values(frame_or_series):
def test_iter_rolling_dataframe(df, expected, window, min_periods):
def test_iter_rolling_on_dataframe(expected, window):
def test_iter_rolling_on_dataframe_unordered():
def test_iter_rolling_series(ser, expected, window, min_periods):
def test_iter_rolling_datetime(expected, expected_index, window):
def test_rolling_positional_argument(grouping, _index, raw):
def test_rolling_numerical_accuracy_kahan_mean(add, unit):
def test_rolling_numerical_accuracy_kahan_sum():
def test_rolling_numerical_accuracy_jump():
def test_rolling_numerical_accuracy_small_values():
def test_rolling_numerical_too_large_numbers():
def test_rolling_mixed_dtypes_axis_1(func, value):
def test_rolling_axis_one_with_nan():
def test_rolling_axis_1_non_numeric_dtypes(value):
def test_rolling_on_df_transposed():
def test_rolling_period_index(index, window, func, values):
def test_rolling_sem(frame_or_series):
def test_rolling_var_numerical_issues(func, third_value, values):
def test_timeoffset_as_window_parameter_for_corr(unit):
def test_rolling_decreasing_indices(method):
def test_rolling_decreasing_indices_centered(window, closed, expected, frame_or_series):
def test_rolling_center_nanosecond_resolution(
def test_rolling_non_monotonic(method, expected):
def test_rolling_corr_timedelta_index(index, window):
def test_groupby_rolling_nan_included():
def test_rolling_skew_kurt_numerical_stability(method):
def test_rolling_skew_kurt_large_value_range(method, values):
def test_invalid_method():
def test_rolling_descending_date_order_with_offset(window, frame_or_series):
def test_rolling_var_floating_artifact_precision():
def test_rolling_std_small_values():
def test_rolling_mean_all_nan_window_floating_artifacts(start, exp_values):
def test_rolling_sum_all_nan_window_floating_artifacts():
def test_rolling_zero_window():
def test_rolling_float_dtype(float_numpy_dtype):
def test_rolling_numeric_dtypes():
def test_rank(window, method, pct, ascending, test_data):
def test_rolling_quantile_np_percentile():
def test_rolling_quantile_interpolation_options(quantile, interpolation, data):
def test_invalid_quantile_value():
def test_rolling_quantile_param():
def test_rolling_std_1obs():
def test_rolling_std_neg_sqrt():
def test_step_not_integer_raises():
def test_step_not_positive_raises():
def test_rolling_var_same_value_count_logic(values, window, min_periods, expected):
def test_rolling_mean_sum_floating_artifacts():
def test_rolling_skew_kurt_floating_artifacts():
def test_numeric_only_frame(arithmetic_win_operators, numeric_only):
def test_numeric_only_corr_cov_frame(kernel, numeric_only, use_arg):
def test_numeric_only_series(arithmetic_win_operators, numeric_only, dtype):
def test_numeric_only_corr_cov_series(kernel, use_arg, numeric_only, dtype):
def test_rolling_timedelta_window_non_nanoseconds(unit, tz):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_rolling_functions.py
-----------------------------
>     """Replicate result expected in GH #6297"""
      indices = [datetime(1975, 1, i) for i in range(1, 6)]
      # So that we can have 2 datapoints on one of the days
      indices.append(datetime(1975, 1, 3, 6, 0))
def test_series(series, compare_func, roll_func, kwargs, step):
def test_frame(raw, frame, compare_func, roll_func, kwargs, step):
def test_time_rule_series(series, compare_func, roll_func, kwargs, minp):
def test_time_rule_frame(raw, frame, compare_func, roll_func, kwargs, minp):
def test_nans(compare_func, roll_func, kwargs):
def test_nans_count():
def test_min_periods(series, minp, roll_func, kwargs, step):
def test_min_periods_count(series, step):
def test_center(roll_func, kwargs, minp):
def test_center_reindex_series(series, roll_func, kwargs, minp, fill_value):
def test_center_reindex_frame(frame, roll_func, kwargs, minp, fill_value):
def test_rolling_functions_window_non_shrinkage(f):
def test_rolling_max_gh6297(step):
def test_rolling_max_resample(step):
def test_rolling_min_resample(step):
def test_rolling_median_resample():
def test_rolling_median_memory_error():
def test_rolling_min_max_numeric_types(data_type):
def test_moment_functions_zero_length(f):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_rolling_quantile.py
-----------------------------
def scoreatpercentile(a, per):
def test_series(series, q, step):
def test_frame(raw, frame, q, step):
def test_time_rule_series(series, q):
def test_time_rule_frame(raw, frame, q):
def test_nans(q):
def test_min_periods(series, minp, q, step):
def test_center(q):
def test_center_reindex_series(series, q):
def test_center_reindex_frame(frame, q):
def test_keyword_quantile_deprecated():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_rolling_skew_kurt.py
-----------------------------
def test_series(series, sp_func, roll_func):
def test_frame(raw, frame, sp_func, roll_func):
def test_time_rule_series(series, sp_func, roll_func):
def test_time_rule_frame(raw, frame, sp_func, roll_func):
def test_nans(sp_func, roll_func):
def test_min_periods(series, minp, roll_func, step):
def test_center(roll_func):
def test_center_reindex_series(series, roll_func):
def test_center_reindex_frame(frame, roll_func):
def test_rolling_skew_edge_cases(step):
def test_rolling_kurt_edge_cases(step):
def test_rolling_skew_eq_value_fperr(step):
def test_rolling_kurt_eq_value_fperr(step):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_timeseries_window.py
-----------------------------
def regular():
def ragged():
class TestRollingTS:
def test_nat_axis_error(msg, axis):
def test_arrow_datetime_axis():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\test_win_type.py
-----------------------------
def win_types(request):
def win_types_special(request):
def test_constructor(frame_or_series):
def test_invalid_constructor(frame_or_series, w):
def test_invalid_constructor_wintype(frame_or_series, wt):
def test_constructor_with_win_type(frame_or_series, win_types):
def test_agg_function_support(arg):
def test_invalid_scipy_arg():
def test_constructor_with_win_type_invalid(frame_or_series):
def test_window_with_args(step):
def test_win_type_with_method_invalid():
def test_consistent_win_type_freq(arg):
def test_win_type_freq_return_none():
def test_win_type_not_implemented():
def test_cmov_mean(step):
def test_cmov_window(step):
def test_cmov_window_corner(step):
def test_cmov_window_frame(f, xp, step):
def test_cmov_window_na_min_periods(step, min_periods):
def test_cmov_window_regular(win_types, step):
def test_cmov_window_regular_linear_range(win_types, step):
def test_cmov_window_regular_missing_data(win_types, step):
def test_cmov_window_special(win_types_special, step):
def test_cmov_window_special_linear_range(win_types_special, step):
def test_weighted_var_big_window_no_segfault(win_types, center):
def test_rolling_center_axis_1():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\window\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_aggregation.py
-----------------------------
def test_maybe_mangle_lambdas_passthrough():
def test_maybe_mangle_lambdas_listlike():
def test_maybe_mangle_lambdas():
def test_maybe_mangle_lambdas_args():
def test_maybe_mangle_lambdas_named():
def test_make_unique(order, expected_reorder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_algos.py
-----------------------------
>         """Comparing df with int`s (1,2) with a string at isin() ("1")
class TestFactorize:
class TestUnique:
def test_nunique_ints(index_or_series_or_array):
class TestIsin:
class TestValueCounts:
class TestDuplicated:
class TestHashTable:
class TestRank:
class TestMode:
class TestDiff:
def test_union_with_duplicates(op):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_common.py
-----------------------------
>     code = """
          import sys
          sys.modules['bz2'] = None
          import pytest
def test_get_callable_name():
def test_any_none():
def test_all_not_none():
def test_random_state():
def test_maybe_match_name(left, right, expected):
def test_standardize_mapping():
def test_git_version():
def test_version_tag():
def test_serializable(obj):
class TestIsBoolIndexer:
def test_temp_setattr(with_exception):
def test_str_size():
def test_bz2_missing_import():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_downstream.py
-----------------------------
> """
  Testing that we work in the downstream packages
def df():
def test_dask(df):
def test_dask_ufunc():
def test_construct_dask_float_array_int_dtype_match_ndarray():
def test_xarray(df):
def test_xarray_cftimeindex_nearest():
def test_oo_optimizable():
def test_oo_optimized_datetime_index_unpickle():
def test_statsmodels():
def test_scikit_learn():
def test_seaborn():
def test_pandas_datareader():
def test_pyarrow(df):
def test_yaml_dump(df):
def test_missing_required_dependency():
def test_frame_setitem_dask_array_into_new_col(request):
def test_pandas_priority():
def array_likes(request):
def test_from_obscure_array(dtype, array_likes):
def test_dataframe_consortium() -> None:
def test_xarray_coerce_unit():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_errors.py
-----------------------------
def test_exception_importable(exc):
def test_catch_oob():
def test_catch_undefined_variable_error(is_local):
class Foo:
def test_AbstractMethodError_classmethod():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_expressions.py
-----------------------------
>         """
          tests solely that the result is the same whether or not numexpr is
          enabled.  Need to test whether the function does the correct thing
          elsewhere.
def _frame():
def _frame2():
def _mixed(_frame):
def _mixed2(_frame2):
def _integer():
def _integer_integers(_integer):
def _integer2():
def _array(_frame):
def _array2(_frame2):
def _array_mixed(_mixed):
def _array_mixed2(_mixed2):
class TestExpressions:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_flags.py
-----------------------------
class TestFlags:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_multilevel.py
-----------------------------
>     """everything you wanted to test about sorting"""
  
      def test_sort_non_lexsorted(self):
          # degenerate case where we sort but don't
class TestMultiLevel:
class TestSorted:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_nanops.py
-----------------------------
def disable_bottleneck(monkeypatch):
def arr_shape():
def arr_float(arr_shape):
def arr_complex(arr_float):
def arr_int(arr_shape):
def arr_bool(arr_shape):
def arr_str(arr_float):
def arr_utf(arr_float):
def arr_date(arr_shape):
def arr_tdelta(arr_shape):
def arr_nan(arr_shape):
def arr_float_nan(arr_float, arr_nan):
def arr_nan_float1(arr_nan, arr_float):
def arr_nan_nan(arr_nan):
def arr_inf(arr_float):
def arr_float_inf(arr_float, arr_inf):
def arr_nan_inf(arr_nan, arr_inf):
def arr_float_nan_inf(arr_float, arr_nan, arr_inf):
def arr_nan_nan_inf(arr_nan, arr_inf):
def arr_obj(
def arr_nan_nanj(arr_nan):
def arr_complex_nan(arr_complex, arr_nan_nanj):
def arr_nan_infj(arr_inf):
def arr_complex_nan_infj(arr_complex, arr_nan_infj):
def arr_float_1d(arr_float):
def arr_nan_1d(arr_nan):
def arr_float_nan_1d(arr_float_nan):
def arr_float1_nan_1d(arr_float1_nan):
def arr_nan_float1_1d(arr_nan_float1):
class TestnanopsDataFrame:
def test_has_infs_non_float(request, arr, correct, disable_bottleneck):
def test_has_infs_floats(request, arr, correct, astype, disable_bottleneck):
def test_bn_ok_dtype(fixture, request, disable_bottleneck):
def test_bn_not_ok_dtype(fixture, request, disable_bottleneck):
class TestEnsureNumeric:
class TestNanvarFixedValues:
class TestNanskewFixedValues:
class TestNankurtFixedValues:
class TestDatetime64NaNOps:
def test_use_bottleneck():
def test_numpy_ops(numpy_op, expected):
def test_nanops_independent_of_mask_param(operation):
def test_check_below_min_count_negative_or_zero_min_count(min_count):
def test_check_below_min_count_positive_min_count(mask, min_count, expected_result):
def test_check_below_min_count_large_shape(min_count, expected_result):
def test_check_bottleneck_disallow(any_real_numpy_dtype, func):
def test_nanmean_overflow(disable_bottleneck, val):
def test_returned_dtype(disable_bottleneck, dtype, method):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_optional_dependency.py
-----------------------------
def test_import_optional():
def test_xlrd_version_fallback():
def test_bad_version(monkeypatch):
def test_submodule(monkeypatch):
def test_no_version_raises(monkeypatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_register_accessor.py
-----------------------------
>     """Ensure that an attribute added to 'obj' during the test is
      removed when we're done
def test_dirname_mixin() -> None:
def ensure_removed(obj, attr) -> Generator[None, None, None]:
class MyAccessor:
def test_register(obj, registrar):
def test_accessor_works():
def test_overwrite_warns():
def test_raises_attribute_error():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_sorting.py
-----------------------------
>         # According to numpy/core/tests/test_multiarray, """The number of
          # sorted items must be greater than ~50 to check the actual algorithm
          # because quick and merge sort fall over to insertion sort for small
def left_right():
class TestSorting:
class TestMerge:
def test_decons(codes_list, shape):
class TestSafeSort:
def test_mixed_str_null(nulls_fixture):
def test_safe_sort_multiindex():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\test_take.py
-----------------------------
def dtype_fill_out_dtype(request):
class TestTake:
class TestExtensionTake:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tseries\api.py
-----------------------------
> """
  Timeseries API

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tseries\frequencies.py
-----------------------------
>     """
      Alias to closest period strings BQ->Q etc.
def get_period_alias(offset_str: str) -> str | None:
def infer_freq(
class _FrequencyInferer:
class _TimedeltaFrequencyInferer(_FrequencyInferer):
def _is_multiple(us, mult: int) -> bool:
def _maybe_add_count(base: str, count: float) -> str:
def is_subperiod(source, target) -> bool:
def is_superperiod(source, target) -> bool:
def _maybe_coerce_freq(code) -> str:
def _quarter_months_conform(source: str, target: str) -> bool:
def _is_annual(rule: str) -> bool:
def _is_quarterly(rule: str) -> bool:
def _is_monthly(rule: str) -> bool:
def _is_weekly(rule: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tseries\holiday.py
-----------------------------
>     """
      If holiday falls on Saturday, use following Monday instead;
      if holiday falls on Sunday, use Monday instead
def next_monday(dt: datetime) -> datetime:
def next_monday_or_tuesday(dt: datetime) -> datetime:
def previous_friday(dt: datetime) -> datetime:
def sunday_to_monday(dt: datetime) -> datetime:
def weekend_to_monday(dt: datetime) -> datetime:
def nearest_workday(dt: datetime) -> datetime:
def next_workday(dt: datetime) -> datetime:
def previous_workday(dt: datetime) -> datetime:
def before_nearest_workday(dt: datetime) -> datetime:
def after_nearest_workday(dt: datetime) -> datetime:
class Holiday:
def register(cls) -> None:
def get_calendar(name: str):
class HolidayCalendarMetaClass(type):
class AbstractHolidayCalendar(metaclass=HolidayCalendarMetaClass):
class USFederalHolidayCalendar(AbstractHolidayCalendar):
def HolidayCalendarFactory(name: str, base, other, base_class=AbstractHolidayCalendar):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tseries\offsets.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\tseries\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\version\__init__.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
class InfinityType:
class NegativeInfinityType:
def parse(version: str) -> LegacyVersion | Version:
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s: str) -> Iterator[str]:
def _legacy_cmpkey(version: str) -> LegacyCmpKey:
class Version(_BaseVersion):
def _parse_letter_version(
def _parse_local_version(local: str) -> LocalType | None:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_decorators.py
-----------------------------
>     """
      Return a new function that emits a deprecation warning on use.
  
      To use this method for a deprecated function, another function
def deprecate(
def deprecate_kwarg(
def _format_argument_list(allow_args: list[str]) -> str:
def future_version_msg(version: str | None) -> str:
def deprecate_nonkeyword_arguments(
def doc(*docstrings: None | str | Callable, **params) -> Callable[[F], F]:
class Substitution:
class Appender:
def indent(text: str | None, indents: int = 1) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_doctools.py
-----------------------------
>     """
      Layout some DataFrames in vertical/horizontal layout for explanation.
      Used in merging.rst
class TablePlotter:
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_exceptions.py
-----------------------------
>     """
      Rewrite the message of an exception.
def rewrite_exception(old_name: str, new_name: str) -> Generator[None, None, None]:
def find_stack_level() -> int:
def rewrite_warning(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_print_versions.py
-----------------------------
>     """
      Use vendored versioneer code to get git hash, which handles
      git worktree correctly.
def _get_commit_hash() -> str | None:
def _get_sys_info() -> dict[str, JSONSerializable]:
def _get_dependency_info() -> dict[str, JSONSerializable]:
def show_versions(as_json: str | bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_tester.py
-----------------------------
> """
  Entrypoint for testing from the top-level namespace.
def test(extra_args: list[str] | None = None, run_doctests: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_test_decorators.py
-----------------------------
> """
  This module provides decorator functions which can be applied to test objects
  in order to skip those objects when certain conditions occur. A sample use case
  is to detect if the platform is missing ``matplotlib``. If so, any test objects
class Foo:
def test_foo():
def skip_if_installed(package: str) -> pytest.MarkDecorator:
def skip_if_no(package: str, min_version: str | None = None) -> pytest.MarkDecorator:
def parametrize_fixture_doc(*args) -> Callable[[F], F]:
def mark_array_manager_not_yet_implemented(request) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\_validators.py
-----------------------------
> """
  Module that contains many useful utilities
  for validating data or function arguments
def _check_arg_length(fname, args, max_fname_arg_count, compat_args) -> None:
def _check_for_default_values(fname, arg_val_dict, compat_args) -> None:
def validate_args(fname, args, max_fname_arg_count, compat_args) -> None:
def _check_for_invalid_keys(fname, kwargs, compat_args) -> None:
def validate_kwargs(fname, kwargs, compat_args) -> None:
def validate_args_and_kwargs(
def validate_bool_kwarg(
def validate_fillna_kwargs(value, method, validate_scalar_dict_value: bool = True):
def validate_percentile(q: float | Iterable[float]) -> np.ndarray:
def validate_ascending(ascending: BoolishT) -> BoolishT:
def validate_ascending(ascending: Sequence[BoolishT]) -> list[BoolishT]:
def validate_ascending(
def validate_endpoints(closed: str | None) -> tuple[bool, bool]:
def validate_inclusive(inclusive: str | None) -> tuple[bool, bool]:
def validate_insert_loc(loc: int, length: int) -> int:
def check_dtype_backend(dtype_backend) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\util\__init__.py
-----------------------------
def __getattr__(key: str):
def capitalize_first_letter(s):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_config\config.py
-----------------------------
> """
  The config module holds package-wide configurables and provides
  a uniform API for working with them.
  
class DeprecatedOption(NamedTuple):
class RegisteredOption(NamedTuple):
class OptionError(AttributeError, KeyError):
def _get_single_key(pat: str, silent: bool) -> str:
def _get_option(pat: str, silent: bool = False) -> Any:
def _set_option(*args, **kwargs) -> None:
def _describe_option(pat: str = "", _print_desc: bool = True) -> str | None:
def _reset_option(pat: str, silent: bool = False) -> None:
def get_default_val(pat: str):
class DictWrapper:
class CallableDynamicDoc(Generic[T]):
class option_context(ContextDecorator):
def register_option(
def deprecate_option(
def _select_options(pat: str) -> list[str]:
def _get_root(key: str) -> tuple[dict[str, Any], str]:
def _is_deprecated(key: str) -> bool:
def _get_deprecated_option(key: str):
def _get_registered_option(key: str):
def _translate_key(key: str) -> str:
def _warn_if_deprecated(key: str) -> bool:
def _build_option_description(k: str) -> str:
def pp_options_list(keys: Iterable[str], width: int = 80, _print: bool = False):
def config_prefix(prefix: str) -> Generator[None, None, None]:
def is_type_factory(_type: type[Any]) -> Callable[[Any], None]:
def is_instance_factory(_type) -> Callable[[Any], None]:
def is_one_of_factory(legal_values) -> Callable[[Any], None]:
def is_nonnegative_int(value: object) -> None:
def is_callable(obj) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_config\dates.py
-----------------------------
> """
  config for datetime formatting

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_config\display.py
-----------------------------
> """
  Unopinionated display configuration.
def detect_console_encoding() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_config\localization.py
-----------------------------
> """
  Helpers for configuring locale settings.
  
  Name `localization` is chosen to avoid overlap with builtin `locale` module.
def set_locale(
def can_set_locale(lc: str, lc_var: int = locale.LC_ALL) -> bool:
def _valid_locales(locales: list[str] | str, normalize: bool) -> list[str]:
def get_locales(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_config\__init__.py
-----------------------------
> """
  pandas._config is considered explicitly upstream of everything else in pandas,
  should have no intra-pandas dependencies.
  
def using_copy_on_write() -> bool:
def warn_copy_on_write() -> bool:
def using_nullable_dtypes() -> bool:
def using_string_dtype() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_libs\tslibs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_libs\window\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_libs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\asserters.py
-----------------------------
>     """
      Check that the left and right objects are approximately equal.
  
      By approximately equal, we refer to objects that are numbers or that
def assert_almost_equal(
def _check_isinstance(left, right, cls) -> None:
def assert_dict_equal(left, right, compare_keys: bool = True) -> None:
def assert_index_equal(
def assert_class_equal(
def assert_attr_equal(attr: str, left, right, obj: str = "Attributes") -> None:
def assert_is_valid_plot_return_object(objs) -> None:
def assert_is_sorted(seq) -> None:
def assert_categorical_equal(
def assert_interval_array_equal(
def assert_period_array_equal(left, right, obj: str = "PeriodArray") -> None:
def assert_datetime_array_equal(
def assert_timedelta_array_equal(
def raise_assert_detail(
def assert_numpy_array_equal(
def assert_extension_array_equal(
def assert_series_equal(
def assert_frame_equal(
def assert_equal(left, right, **kwargs) -> None:
def assert_sp_array_equal(left, right) -> None:
def assert_contains_all(iterable, dic) -> None:
def assert_copy(iter1, iter2, **eql_kwargs) -> None:
def is_extension_array_dtype_and_needs_i8_conversion(
def assert_indexing_slices_equivalent(ser: Series, l_slc: slice, i_slc: slice) -> None:
def assert_metadata_equivalent(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\compat.py
-----------------------------
> """
  Helpers for sharing tests between DataFrame/Series
def get_dtype(obj) -> DtypeObj:
def get_obj(df: DataFrame, klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\contexts.py
-----------------------------
>     """
      Open a compressed file and return a file object.
  
      Parameters
def decompress_file(
def set_timezone(tz: str) -> Generator[None, None, None]:
def ensure_clean(
def with_csv_dialect(name: str, **kwargs) -> Generator[None, None, None]:
def use_numexpr(use, min_elements=None) -> Generator[None, None, None]:
def raises_chained_assignment_error(warn=True, extra_warnings=(), extra_match=()):
def assert_cow_warning(warn=True, match=None, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\_hypothesis.py
-----------------------------
> """
  Hypothesis data generator helpers.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\_io.py
-----------------------------
>     """
      Pickle an object and then read it again.
  
      Parameters
def round_trip_pickle(
def round_trip_pathlib(writer, reader, path: str | None = None):
def round_trip_localpath(writer, reader, path: str | None = None):
def write_to_compressed(compression, path, data, dest: str = "test") -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\_warnings.py
-----------------------------
>     """
      Context manager for running code expected to either raise a specific warning,
      multiple specific warnings, or not raise any warnings. Verifies that the code
      raises the expected warning(s), and that it does not raise any other unexpected
def assert_produces_warning(
def maybe_produces_warning(warning: type[Warning], condition: bool, **kwargs):
def _assert_caught_expected_warning(
def _assert_caught_no_extra_warnings(
def _is_unexpected_warning(
def _assert_raised_with_correct_stacklevel(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_testing\__init__.py
-----------------------------
>     """
      Helper function to wrap the expected output of a test in a given box_class.
  
      Parameters
def box_expected(expected, box_cls, transpose: bool = True):
def to_array(obj):
class SubclassedSeries(Series):
class SubclassedDataFrame(DataFrame):
def convert_rows_list_to_csv_str(rows_list: list[str]) -> str:
def external_error_raised(expected_exception: type[Exception]) -> ContextManager:
def get_cython_table_params(ndframe, func_names_and_expected):
def get_op_from_name(op_name: str) -> Callable:
def getitem(x):
def setitem(x):
def loc(x):
def iloc(x):
def at(x):
def iat(x):
def get_finest_unit(left: str, right: str):
def shares_memory(left, right) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\conftest.py
-----------------------------
> """
  This file is very long and growing, but it was decided to not split it yet, as
  it's still manageable (2020-03-17, ~1.1k LoC). See gh-31989
  
def pytest_addoption(parser) -> None:
def ignore_doctest_warning(item: pytest.Item, path: str, message: str) -> None:
def pytest_collection_modifyitems(items, config) -> None:
def add_doctest_imports(doctest_namespace) -> None:
def configure_tests() -> None:
def axis(request):
def axis_1(request):
def observed(request):
def ordered(request):
def skipna(request):
def keep(request):
def inclusive_endpoints_fixture(request):
def closed(request):
def other_closed(request):
def compression(request):
def compression_only(request):
def writable(request):
def join_type(request):
def nselect_method(request):
def nulls_fixture(request):
def unique_nulls_fixture(request):
def np_nat_fixture(request):
def frame_or_series(request):
def index_or_series(request):
def index_or_series_or_array(request):
def box_with_array(request):
def dict_subclass() -> type[dict]:
def non_dict_mapping_subclass() -> type[abc.Mapping]:
def multiindex_year_month_day_dataframe_random_data():
def lexsorted_two_level_string_multiindex() -> MultiIndex:
def multiindex_dataframe_random_data(
def _create_multiindex():
def _create_mi_with_dt64tz_level():
def index(request):
def index_flat(request):
def index_with_missing(request):
def string_series() -> Series:
def object_series() -> Series:
def datetime_series() -> Series:
def _create_series(index):
def series_with_simple_index(index) -> Series:
def index_or_series_obj(request):
def index_or_series_memory_obj(request):
def int_frame() -> DataFrame:
def float_frame() -> DataFrame:
def rand_series_with_duplicate_datetimeindex() -> Series:
def ea_scalar_and_dtype(request):
def all_arithmetic_operators(request):
def all_binary_operators(request):
def all_arithmetic_functions(request):
def all_numeric_reductions(request):
def all_boolean_reductions(request):
def all_reductions(request):
def comparison_op(request):
def compare_operators_no_eq_ne(request):
def all_logical_operators(request):
def all_numeric_accumulations(request):
def strict_data_files(pytestconfig):
def datapath(strict_data_files: str) -> Callable[..., str]:
def tz_naive_fixture(request):
def tz_aware_fixture(request):
def utc_fixture(request):
def unit(request):
def string_dtype(request):
def string_dtype_no_object(request):
def nullable_string_dtype(request):
def pyarrow_string_dtype(request):
def string_storage(request):
def string_dtype_arguments(request):
def dtype_backend(request):
def bytes_dtype(request):
def object_dtype(request):
def any_string_dtype(request):
def datetime64_dtype(request):
def timedelta64_dtype(request):
def fixed_now_ts() -> Timestamp:
def float_numpy_dtype(request):
def float_ea_dtype(request):
def any_float_dtype(request):
def complex_dtype(request):
def complex_or_float_dtype(request):
def any_signed_int_numpy_dtype(request):
def any_unsigned_int_numpy_dtype(request):
def any_int_numpy_dtype(request):
def any_int_ea_dtype(request):
def any_int_dtype(request):
def any_numeric_ea_dtype(request):
def any_numeric_ea_and_arrow_dtype(request):
def any_signed_int_ea_dtype(request):
def any_real_numpy_dtype(request):
def any_real_numeric_dtype(request):
def any_numpy_dtype(request):
def any_real_nullable_dtype(request):
def any_numeric_dtype(request):
def any_skipna_inferred_dtype(request):
def ip():
def spmatrix(request):
def tick_classes(request):
def sort_by_key(request):
def names(request) -> tuple[Hashable, Hashable, Hashable]:
def indexer_sli(request):
def indexer_li(request):
def indexer_si(request):
def indexer_sl(request):
def indexer_al(request):
def indexer_ial(request):
def using_array_manager() -> bool:
def using_copy_on_write() -> bool:
def warn_copy_on_write() -> bool:
def using_infer_string() -> bool:
def warsaw(request) -> str:
def arrow_string_storage():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\testing.py
-----------------------------
> """
  Public testing utility functions.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_typing.py
-----------------------------
class SequenceNotStr(Protocol[_T_co]):
class BaseBuffer(Protocol):
class ReadBuffer(BaseBuffer, Protocol[AnyStr_co]):
class WriteBuffer(BaseBuffer, Protocol[AnyStr_contra]):
class ReadPickleBuffer(ReadBuffer[bytes], Protocol):
class WriteExcelBuffer(WriteBuffer[bytes], Protocol):
class ReadCsvBuffer(ReadBuffer[AnyStr_co], Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_version.py
-----------------------------
> """Git implementation of _version.py."""
  
  import errno
  import functools
def get_keywords():
class VersioneerConfig:
def get_config():
class NotThisMethod(Exception):
def register_vcs_handler(vcs, method):  # decorator
def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
def versions_from_parentdir(parentdir_prefix, root, verbose):
def git_get_keywords(versionfile_abs):
def git_versions_from_keywords(keywords, tag_prefix, verbose):
def git_pieces_from_vcs(tag_prefix, root, verbose, runner=run_command):
def plus_or_dot(pieces) -> str:
def render_pep440(pieces):
def render_pep440_branch(pieces):
def pep440_split_post(ver):
def render_pep440_pre(pieces):
def render_pep440_post(pieces):
def render_pep440_post_branch(pieces):
def render_pep440_old(pieces):
def render_git_describe(pieces):
def render_git_describe_long(pieces):
def render(pieces, style):
def get_versions():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\_version_meson.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pandas\__init__.py
-----------------------------
> __doc__ = """
  pandas - a powerful data analysis and manipulation library for Python
  =====================================================================
  
def _delvewheel_patch_1_11_1():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\patterns\gitwildmatch.py
-----------------------------
> """
  This module implements Git's wildmatch pattern matching which itself is derived
  from Rsync's wildmatch. Git uses wildmatch for its ".gitignore" files.
class GitWildMatchPatternError(ValueError):
class GitWildMatchPattern(RegexPattern):
class GitIgnorePattern(GitWildMatchPattern):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\patterns\__init__.py
-----------------------------
> """
  The *pathspec.patterns* package contains the pattern matching
  implementations.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\gitignore.py
-----------------------------
> """
  This module provides :class:`.GitIgnoreSpec` which replicates
  *.gitignore* behavior.
class GitIgnoreSpec(PathSpec):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\pathspec.py
-----------------------------
> """
  This module provides an object oriented interface for pattern matching of files.
class PathSpec(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\pattern.py
-----------------------------
> """
  This module provides the base definition for patterns.
class Pattern(object):
class RegexPattern(Pattern):
class RegexMatchResult(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\util.py
-----------------------------
> """
  This module provides utility methods for dealing with path-specs.
def append_dir_sep(path: pathlib.Path) -> str:
def check_match_file(
def detailed_match_files(
def _filter_check_patterns(
def _is_iterable(value: Any) -> bool:
def iter_tree_entries(
def _iter_tree_entries_next(
def iter_tree_files(
def iter_tree(root, on_error=None, follow_links=None):
def lookup_pattern(name: str) -> Callable[[AnyStr], Pattern]:
def match_file(patterns: Iterable[Pattern], file: str) -> bool:
def match_files(
def normalize_file(
def normalize_files(
def register_pattern(
class AlreadyRegisteredError(Exception):
class RecursionError(Exception):
class CheckResult(Generic[TStrPath]):
class MatchDetail(object):
class TreeEntry(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\_meta.py
-----------------------------
> """
  This module contains the project meta-data.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pathspec\__init__.py
-----------------------------
> """
  The *pathspec* package provides pattern matching for file paths. So far
  this only includes Git's wildmatch pattern matching (the style used for
  ".gitignore" files).

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\AvifImagePlugin.py
-----------------------------
def get_codec_version(codec_name: str) -> str | None:
def _accept(prefix: bytes) -> bool | str:
def _get_default_max_threads() -> int:
class AvifImageFile(ImageFile.ImageFile):
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\BdfFontFile.py
-----------------------------
> """
  Parse X Bitmap Distribution Format (BDF)
def bdf_char(
class BdfFontFile(FontFile.FontFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\BlpImagePlugin.py
-----------------------------
> """
  Blizzard Mipmap Format (.blp)
  Jerome Leclanche <jerome@leclan.ch>
  
class Format(IntEnum):
class Encoding(IntEnum):
class AlphaEncoding(IntEnum):
def unpack_565(i: int) -> tuple[int, int, int]:
def decode_dxt1(
def decode_dxt3(data: bytes) -> tuple[bytearray, bytearray, bytearray, bytearray]:
def decode_dxt5(data: bytes) -> tuple[bytearray, bytearray, bytearray, bytearray]:
class BLPFormatError(NotImplementedError):
def _accept(prefix: bytes) -> bool:
class BlpImageFile(ImageFile.ImageFile):
class _BLPBaseDecoder(abc.ABC, ImageFile.PyDecoder):
class BLP1Decoder(_BLPBaseDecoder):
class BLP2Decoder(_BLPBaseDecoder):
class BLPEncoder(ImageFile.PyEncoder):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\BmpImagePlugin.py
-----------------------------
>     """Image plugin for the Windows Bitmap format (BMP)"""
  
      # ------------------------------------------------------------- Description
      format_description = "Windows Bitmap"
def _accept(prefix: bytes) -> bool:
def _dib_accept(prefix: bytes) -> bool:
class BmpImageFile(ImageFile.ImageFile):
class BmpRleDecoder(ImageFile.PyDecoder):
class DibImageFile(BmpImageFile):
def _dib_save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\BufrStubImagePlugin.py
-----------------------------
>     """
      Install application-specific BUFR image handler.
  
      :param handler: Handler object.
def register_handler(handler: ImageFile.StubHandler | None) -> None:
def _accept(prefix: bytes) -> bool:
class BufrStubImageFile(ImageFile.StubImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ContainerIO.py
-----------------------------
>     """
      A file object that provides read access to a part of an existing
      file (for example a TAR file).
class ContainerIO(IO[AnyStr]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\CurImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class CurImageFile(BmpImagePlugin.BmpImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\DcxImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class DcxImageFile(PcxImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\DdsImagePlugin.py
-----------------------------
> """
  A Pillow plugin for .dds files (S3TC-compressed aka DXTC)
  Jerome Leclanche <jerome@leclan.ch>
  
class DDSD(IntFlag):
class DDSCAPS(IntFlag):
class DDSCAPS2(IntFlag):
class DDPF(IntFlag):
class DXGI_FORMAT(IntEnum):
class D3DFMT(IntEnum):
class DdsImageFile(ImageFile.ImageFile):
class DdsRgbDecoder(ImageFile.PyDecoder):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _accept(prefix: bytes) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\EpsImagePlugin.py
-----------------------------
>     """Render an image using Ghostscript"""
      global gs_binary
      if not has_ghostscript():
          msg = "Unable to locate Ghostscript on paths"
def has_ghostscript() -> bool:
def Ghostscript(
def _accept(prefix: bytes) -> bool:
class EpsImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes, eps: int = 1) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ExifTags.py
-----------------------------
> """
  This module provides constants and clear-text names for various
  well-known EXIF tags.
class Base(IntEnum):
class GPS(IntEnum):
class Interop(IntEnum):
class IFD(IntEnum):
class LightSource(IntEnum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\features.py
-----------------------------
>     """
      Checks if a module is available.
  
      :param feature: The module to check for.
def check_module(feature: str) -> bool:
def version_module(feature: str) -> str | None:
def get_supported_modules() -> list[str]:
def check_codec(feature: str) -> bool:
def version_codec(feature: str) -> str | None:
def get_supported_codecs() -> list[str]:
def check_feature(feature: str) -> bool | None:
def version_feature(feature: str) -> str | None:
def get_supported_features() -> list[str]:
def check(feature: str) -> bool | None:
def version(feature: str) -> str | None:
def get_supported() -> list[str]:
def pilinfo(out: IO[str] | None = None, supported_formats: bool = True) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\FitsImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class FitsImageFile(ImageFile.ImageFile):
class FitsGzipDecoder(ImageFile.PyDecoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\FliImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class FliImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\FontFile.py
-----------------------------
>     """Write network order (big-endian) 16-bit sequence"""
      for v in values:
          if v < 0:
              v += 65536
def puti16(
class FontFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\FpxImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class FpxImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\FtexImagePlugin.py
-----------------------------
> """
  A Pillow loader for .ftc and .ftu files (FTEX)
  Jerome Leclanche <jerome@leclan.ch>
  
class Format(IntEnum):
class FtexImageFile(ImageFile.ImageFile):
def _accept(prefix: bytes) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\GbrImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class GbrImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\GdImageFile.py
-----------------------------
> """
  .. note::
      This format cannot be automatically recognized, so the
      class is not registered for use with :py:func:`PIL.Image.open()`.  To open a
class GdImageFile(ImageFile.ImageFile):
def open(fp: StrOrBytesPath | IO[bytes], mode: str = "r") -> GdImageFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\GifImagePlugin.py
-----------------------------
>     """.. versionadded:: 9.1.0"""
  
      RGB_AFTER_FIRST = 0
      RGB_AFTER_DIFFERENT_PALETTE_ONLY = 1
class LoadingStrategy(IntEnum):
def _accept(prefix: bytes) -> bool:
class GifImageFile(ImageFile.ImageFile):
def _normalize_mode(im: Image.Image) -> Image.Image:
def _normalize_palette(
def _write_single_frame(
def _getbbox(
class _Frame(NamedTuple):
def _write_multiple_frames(
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save(
def get_interlace(im: Image.Image) -> int:
def _write_local_header(
def _save_netpbm(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _get_optimize(im: Image.Image, info: dict[str, Any]) -> list[int] | None:
def _get_color_table_size(palette_bytes: bytes) -> int:
def _get_header_palette(palette_bytes: bytes) -> bytes:
def _get_palette_bytes(im: Image.Image) -> bytes:
def _get_background(
def _get_global_header(im: Image.Image, info: dict[str, Any]) -> list[bytes]:
def _write_frame_data(
def getheader(
def getdata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\GimpGradientFile.py
-----------------------------
> """
  Stuff to translate curve segments to palette values (derived from
  the corresponding code in GIMP, written by Federico Mena Quintero.
  See the GIMP distribution for more information.)
def linear(middle: float, pos: float) -> float:
def curved(middle: float, pos: float) -> float:
def sine(middle: float, pos: float) -> float:
def sphere_increasing(middle: float, pos: float) -> float:
def sphere_decreasing(middle: float, pos: float) -> float:
class GradientFile:
class GimpGradientFile(GradientFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\GimpPaletteFile.py
-----------------------------
>     """File handler for GIMP's palette format."""
  
      rawmode = "RGB"
  
class GimpPaletteFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\GribStubImagePlugin.py
-----------------------------
>     """
      Install application-specific GRIB image handler.
  
      :param handler: Handler object.
def register_handler(handler: ImageFile.StubHandler | None) -> None:
def _accept(prefix: bytes) -> bool:
class GribStubImageFile(ImageFile.StubImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\Hdf5StubImagePlugin.py
-----------------------------
>     """
      Install application-specific HDF5 image handler.
  
      :param handler: Handler object.
def register_handler(handler: ImageFile.StubHandler | None) -> None:
def _accept(prefix: bytes) -> bool:
class HDF5StubImageFile(ImageFile.StubImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\IcnsImagePlugin.py
-----------------------------
>     """
      Read a 32bit RGB icon resource.  Seems to be either uncompressed or
      an RLE packbits-like scheme.
def nextheader(fobj: IO[bytes]) -> tuple[bytes, int]:
def read_32t(
def read_32(
def read_mk(
def read_png_or_jpeg2000(
class IcnsFile:
class IcnsImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _accept(prefix: bytes) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\IcoImagePlugin.py
-----------------------------
>         """
          Parse image from file-like object containing ico file data
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _accept(prefix: bytes) -> bool:
class IconHeader(NamedTuple):
class IcoFile:
class IcoImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\Image.py
-----------------------------
>     """
      Checks if an object is an image object.
  
      .. warning::
class DecompressionBombWarning(RuntimeWarning):
class DecompressionBombError(Exception):
def isImageType(t: Any) -> TypeGuard[Image]:
class Transpose(IntEnum):
class Transform(IntEnum):
class Resampling(IntEnum):
class Dither(IntEnum):
class Palette(IntEnum):
class Quantize(IntEnum):
def _conv_type_shape(im: Image) -> tuple[tuple[int, ...], str]:
def getmodebase(mode: str) -> str:
def getmodetype(mode: str) -> str:
def getmodebandnames(mode: str) -> tuple[str, ...]:
def getmodebands(mode: str) -> int:
def preinit() -> None:
def init() -> bool:
def _getdecoder(
def _getencoder(
class ImagePointTransform:
def _getscaleoffset(
class SupportsGetData(Protocol):
class Image:
class ImagePointHandler(abc.ABC):
class ImageTransformHandler(abc.ABC):
def _check_size(size: Any) -> None:
def new(
def frombytes(
def frombuffer(
class SupportsArrayInterface(Protocol):
class SupportsArrowArrayInterface(Protocol):
def fromarray(obj: SupportsArrayInterface, mode: str | None = None) -> Image:
def fromarrow(
def fromqimage(im: ImageQt.QImage) -> ImageFile.ImageFile:
def fromqpixmap(im: ImageQt.QPixmap) -> ImageFile.ImageFile:
def _decompression_bomb_check(size: tuple[int, int]) -> None:
def open(
def alpha_composite(im1: Image, im2: Image) -> Image:
def blend(im1: Image, im2: Image, alpha: float) -> Image:
def composite(image1: Image, image2: Image, mask: Image) -> Image:
def eval(image: Image, *args: Callable[[int], float]) -> Image:
def merge(mode: str, bands: Sequence[Image]) -> Image:
def register_open(
def register_mime(id: str, mimetype: str) -> None:
def register_save(
def register_save_all(
def register_extension(id: str, extension: str) -> None:
def register_extensions(id: str, extensions: list[str]) -> None:
def registered_extensions() -> dict[str, str]:
def register_decoder(name: str, decoder: type[ImageFile.PyDecoder]) -> None:
def register_encoder(name: str, encoder: type[ImageFile.PyEncoder]) -> None:
def _show(image: Image, **options: Any) -> None:
def effect_mandelbrot(
def effect_noise(size: tuple[int, int], sigma: float) -> Image:
def linear_gradient(mode: str) -> Image:
def radial_gradient(mode: str) -> Image:
def _apply_env_variables(env: dict[str, str] | None = None) -> None:
class Exif(_ExifBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageChops.py
-----------------------------
>     """Fill a channel with a given gray level.
  
      :rtype: :py:class:`~PIL.Image.Image`
def constant(image: Image.Image, value: int) -> Image.Image:
def duplicate(image: Image.Image) -> Image.Image:
def invert(image: Image.Image) -> Image.Image:
def lighter(image1: Image.Image, image2: Image.Image) -> Image.Image:
def darker(image1: Image.Image, image2: Image.Image) -> Image.Image:
def difference(image1: Image.Image, image2: Image.Image) -> Image.Image:
def multiply(image1: Image.Image, image2: Image.Image) -> Image.Image:
def screen(image1: Image.Image, image2: Image.Image) -> Image.Image:
def soft_light(image1: Image.Image, image2: Image.Image) -> Image.Image:
def hard_light(image1: Image.Image, image2: Image.Image) -> Image.Image:
def overlay(image1: Image.Image, image2: Image.Image) -> Image.Image:
def add(
def subtract(
def add_modulo(image1: Image.Image, image2: Image.Image) -> Image.Image:
def subtract_modulo(image1: Image.Image, image2: Image.Image) -> Image.Image:
def logical_and(image1: Image.Image, image2: Image.Image) -> Image.Image:
def logical_or(image1: Image.Image, image2: Image.Image) -> Image.Image:
def logical_xor(image1: Image.Image, image2: Image.Image) -> Image.Image:
def blend(image1: Image.Image, image2: Image.Image, alpha: float) -> Image.Image:
def composite(
def offset(image: Image.Image, xoffset: int, yoffset: int | None = None) -> Image.Image:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageCms.py
-----------------------------
> _DESCRIPTION = """
  pyCMS
  
      a Python / PIL interface to the littleCMS ICC Color Management System
def __getattr__(name: str) -> Any:
class Intent(IntEnum):
class Direction(IntEnum):
class Flags(IntFlag):
class ImageCmsProfile:
class ImageCmsTransform(Image.ImagePointHandler):
def get_display_profile(handle: SupportsInt | None = None) -> ImageCmsProfile | None:
class PyCMSError(Exception):
def profileToProfile(
def getOpenProfile(
def buildTransform(
def buildProofTransform(
def applyTransform(
def createProfile(
def getProfileName(profile: _CmsProfileCompatible) -> str:
def getProfileInfo(profile: _CmsProfileCompatible) -> str:
def getProfileCopyright(profile: _CmsProfileCompatible) -> str:
def getProfileManufacturer(profile: _CmsProfileCompatible) -> str:
def getProfileModel(profile: _CmsProfileCompatible) -> str:
def getProfileDescription(profile: _CmsProfileCompatible) -> str:
def getDefaultIntent(profile: _CmsProfileCompatible) -> int:
def isIntentSupported(
def versions() -> tuple[str, str | None, str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageColor.py
-----------------------------
>     """
       Convert a color string to an RGB or RGBA tuple. If the string cannot be
       parsed, this function raises a :py:exc:`ValueError` exception.
  
def getrgb(color: str) -> tuple[int, int, int] | tuple[int, int, int, int]:
def getcolor(color: str, mode: str) -> int | tuple[int, ...]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageDraw.py
-----------------------------
> """
  A simple 2D drawing interface for PIL images.
  <p>
  Application code should use the <b>Draw</b> factory, instead of
class ImageDraw:
def Draw(im: Image.Image, mode: str | None = None) -> ImageDraw:
def getdraw(
def floodfill(
def _compute_regular_polygon_vertices(
def _color_diff(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageDraw2.py
-----------------------------
> """
  (Experimental) WCK-style drawing interface operations
  
  .. seealso:: :py:mod:`PIL.ImageDraw`
class Pen:
class Brush:
class Font:
class Draw:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageEnhance.py
-----------------------------
>         """
          Returns an enhanced image.
  
          :param factor: A floating point value controlling the enhancement.
class _Enhance:
class Color(_Enhance):
class Contrast(_Enhance):
class Brightness(_Enhance):
class Sharpness(_Enhance):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageFile.py
-----------------------------
> """Whether or not to load truncated image files. User code may change this."""
  
  ERRORS = {
      -1: "image buffer overrun error",
def _get_oserror(error: int, *, encoder: bool) -> OSError:
def raise_oserror(error: int) -> OSError:
def _tilesort(t: _Tile) -> int:
class _Tile(NamedTuple):
class ImageFile(Image.Image):
class StubHandler(abc.ABC):
class StubImageFile(ImageFile, metaclass=abc.ABCMeta):
class Parser:
def _save(im: Image.Image, fp: IO[bytes], tile: list[_Tile], bufsize: int = 0) -> None:
def _encode_tile(
def _safe_read(fp: IO[bytes], size: int) -> bytes:
class PyCodecState:
class PyCodec:
class PyDecoder(PyCodec):
class PyEncoder(PyCodec):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageFilter.py
-----------------------------
>     """
      Create a convolution kernel. This only supports 3x3 and 5x5 integer and floating
      point kernels.
  
class Filter(abc.ABC):
class MultibandFilter(Filter):
class BuiltinFilter(MultibandFilter):
class Kernel(BuiltinFilter):
class RankFilter(Filter):
class MedianFilter(RankFilter):
class MinFilter(RankFilter):
class MaxFilter(RankFilter):
class ModeFilter(Filter):
class GaussianBlur(MultibandFilter):
class BoxBlur(MultibandFilter):
class UnsharpMask(MultibandFilter):
class BLUR(BuiltinFilter):
class CONTOUR(BuiltinFilter):
class DETAIL(BuiltinFilter):
class EDGE_ENHANCE(BuiltinFilter):
class EDGE_ENHANCE_MORE(BuiltinFilter):
class EMBOSS(BuiltinFilter):
class FIND_EDGES(BuiltinFilter):
class SHARPEN(BuiltinFilter):
class SMOOTH(BuiltinFilter):
class SMOOTH_MORE(BuiltinFilter):
class Color3DLUT(MultibandFilter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageFont.py
-----------------------------
>     """PIL font wrapper"""
  
      font: ImagingFont
  
class Axis(TypedDict):
class Layout(IntEnum):
def _string_length_check(text: str | bytes | bytearray) -> None:
class ImageFont:
class FreeTypeFont:
class TransposedFont:
def load(filename: str) -> ImageFont:
def truetype(
def load_path(filename: str | bytes) -> ImageFont:
def load_default_imagefont() -> ImageFont:
def load_default(size: float | None = None) -> FreeTypeFont | ImageFont:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageGrab.py
-----------------------------
def grab(
def grabclipboard() -> Image.Image | list[str] | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageMath.py
-----------------------------
>     """Wraps an image operand, providing standard operators"""
  
      def __init__(self, im: Image.Image):
          self.im = im
class _Operand:
def imagemath_int(self: _Operand) -> _Operand:
def imagemath_float(self: _Operand) -> _Operand:
def imagemath_equal(self: _Operand, other: _Operand | float | None) -> _Operand:
def imagemath_notequal(self: _Operand, other: _Operand | float | None) -> _Operand:
def imagemath_min(self: _Operand, other: _Operand | float | None) -> _Operand:
def imagemath_max(self: _Operand, other: _Operand | float | None) -> _Operand:
def imagemath_convert(self: _Operand, mode: str) -> _Operand:
def lambda_eval(
def unsafe_eval(
def eval(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageMode.py
-----------------------------
>     """Wrapper for mode strings."""
  
      mode: str
      bands: tuple[str, ...]
class ModeDescriptor(NamedTuple):
def getmode(mode: str) -> ModeDescriptor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageMorph.py
-----------------------------
>     """A class for building a MorphLut from a descriptive language
  
      The input patterns is a list of a strings sequences like these::
  
class LutBuilder:
class MorphOp:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageOps.py
-----------------------------
>     """
      Maximize (normalize) image contrast. This function calculates a
      histogram of the input image (or mask region), removes ``cutoff`` percent of the
      lightest and darkest pixels from the histogram, and remaps the image
def _border(border: int | tuple[int, ...]) -> tuple[int, int, int, int]:
def _color(color: str | int | tuple[int, ...], mode: str) -> int | tuple[int, ...]:
def _lut(image: Image.Image, lut: list[int]) -> Image.Image:
def autocontrast(
def colorize(
def contain(
def cover(
def pad(
def crop(image: Image.Image, border: int = 0) -> Image.Image:
def scale(
class SupportsGetMesh(Protocol):
def deform(
def equalize(image: Image.Image, mask: Image.Image | None = None) -> Image.Image:
def expand(
def fit(
def flip(image: Image.Image) -> Image.Image:
def grayscale(image: Image.Image) -> Image.Image:
def invert(image: Image.Image) -> Image.Image:
def mirror(image: Image.Image) -> Image.Image:
def posterize(image: Image.Image, bits: int) -> Image.Image:
def solarize(image: Image.Image, threshold: int = 128) -> Image.Image:
def exif_transpose(image: Image.Image, *, in_place: Literal[True]) -> None: ...
def exif_transpose(
def exif_transpose(image: Image.Image, *, in_place: bool = False) -> Image.Image | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImagePalette.py
-----------------------------
>     """
      Color palette for palette mapped images
  
      :param mode: The mode to use for the palette. See:
class ImagePalette:
def raw(rawmode: str, data: Sequence[int] | bytes | bytearray) -> ImagePalette:
def make_linear_lut(black: int, white: float) -> list[int]:
def make_gamma_lut(exp: float) -> list[int]:
def negative(mode: str = "RGB") -> ImagePalette:
def random(mode: str = "RGB") -> ImagePalette:
def sepia(white: str = "#fff0c0") -> ImagePalette:
def wedge(mode: str = "RGB") -> ImagePalette:
def load(filename: str) -> tuple[bytes, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImagePath.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageQt.py
-----------------------------
>     """(Internal) Turns an RGB color into a Qt compatible color integer."""
      # use qRgb to pack the colors, and then turn the resulting long
      # into a negative integer with the same bitpattern.
      return qRgba(r, g, b, a) & 0xFFFFFFFF
def rgb(r: int, g: int, b: int, a: int = 255) -> int:
def fromqimage(im: QImage | QPixmap) -> ImageFile.ImageFile:
def fromqpixmap(im: QPixmap) -> ImageFile.ImageFile:
def align8to32(bytes: bytes, width: int, mode: str) -> bytes:
def _toqclass_helper(im: Image.Image | str | QByteArray) -> dict[str, Any]:
def toqimage(im: Image.Image | str | QByteArray) -> ImageQt:
def toqpixmap(im: Image.Image | str | QByteArray) -> QPixmap:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageSequence.py
-----------------------------
>     """
      This class implements an iterator object that can be used to loop
      over an image sequence.
  
class Iterator:
def all_frames(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageShow.py
-----------------------------
>     """
      The :py:func:`register` function is used to register additional viewers::
  
          from PIL import ImageShow
def register(viewer: type[Viewer] | Viewer, order: int = 1) -> None:
def show(image: Image.Image, title: str | None = None, **options: Any) -> bool:
class Viewer:
class WindowsViewer(Viewer):
class MacViewer(Viewer):
class UnixViewer(abc.ABC, Viewer):
class XDGViewer(UnixViewer):
class DisplayViewer(UnixViewer):
class GmDisplayViewer(UnixViewer):
class EogViewer(UnixViewer):
class XVViewer(UnixViewer):
class IPythonViewer(Viewer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageStat.py
-----------------------------
>         """
          Calculate statistics for the given image. If a mask is included,
          only the regions covered by that mask are included in the
          statistics. You can also pass in a previously calculated histogram.
class Stat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageTk.py
-----------------------------
>     """
      A Tkinter-compatible photo image.  This can be used
      everywhere Tkinter expects an image object.  If the image is an RGBA
      image, pixels having alpha 0 are treated as transparent.
def _get_image_from_kw(kw: dict[str, Any]) -> ImageFile.ImageFile | None:
def _pyimagingtkcall(
class PhotoImage:
class BitmapImage:
def getimage(photo: PhotoImage) -> Image.Image:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageTransform.py
-----------------------------
>     """Base class for other transforms defined in :py:mod:`~PIL.ImageTransform`."""
  
      method: Image.Transform
  
class Transform(Image.ImageTransformHandler):
class AffineTransform(Transform):
class PerspectiveTransform(Transform):
class ExtentTransform(Transform):
class QuadTransform(Transform):
class MeshTransform(Transform):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImageWin.py
-----------------------------
>     """
      Wraps an HDC integer. The resulting object can be passed to the
      :py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`
      methods.
class HDC:
class HWND:
class Dib:
class Window:
class ImageWindow(Window):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImImagePlugin.py
-----------------------------
def number(s: Any) -> float:
class ImImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\ImtImagePlugin.py
-----------------------------
class ImtImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\IptcImagePlugin.py
-----------------------------
>     """.. deprecated:: 10.2.0"""
      deprecate("IptcImagePlugin.i", 12)
      return _i(c)
  
def __getattr__(name: str) -> bytes:
def _i(c: bytes) -> int:
def _i8(c: int | bytes) -> int:
def i(c: bytes) -> int:
def dump(c: Sequence[int | bytes]) -> None:
class IptcImageFile(ImageFile.ImageFile):
def getiptcinfo(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\Jpeg2KImagePlugin.py
-----------------------------
>     """
      A small helper class to read fields stored in JPEG2000 header boxes
      and to easily step into and read sub-boxes.
class BoxReader:
def _parse_codestream(fp: IO[bytes]) -> tuple[tuple[int, int], str]:
def _res_to_dpi(num: int, denom: int, exp: int) -> float | None:
def _parse_jp2_header(
class Jpeg2KImageFile(ImageFile.ImageFile):
def _accept(prefix: bytes) -> bool:
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\JpegImagePlugin.py
-----------------------------
>         """
          internal: read more image data
          For premature EOF and LOAD_TRUNCATED_IMAGES adds EOI marker
          so libjpeg can finish decoding
def Skip(self: JpegImageFile, marker: int) -> None:
def APP(self: JpegImageFile, marker: int) -> None:
def COM(self: JpegImageFile, marker: int) -> None:
def SOF(self: JpegImageFile, marker: int) -> None:
def DQT(self: JpegImageFile, marker: int) -> None:
def _accept(prefix: bytes) -> bool:
class JpegImageFile(ImageFile.ImageFile):
def _getexif(self: JpegImageFile) -> dict[int, Any] | None:
def _getmp(self: JpegImageFile) -> dict[int, Any] | None:
def get_sampling(im: Image.Image) -> int:
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save_cjpeg(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def jpeg_factory(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\JpegPresets.py
-----------------------------
> """
  JPEG quality settings equivalent to the Photoshop settings.
  Can be used when saving JPEG files.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\McIdasImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class McIdasImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\MicImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class MicImageFile(TiffImagePlugin.TiffImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\MpegImagePlugin.py
-----------------------------
class BitStream:
def _accept(prefix: bytes) -> bool:
class MpegImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\MpoImagePlugin.py
-----------------------------
>         """
          Transform the instance of JpegImageFile into
          an instance of MpoImageFile.
          After the call, the JpegImageFile is extended
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
class MpoImageFile(JpegImagePlugin.JpegImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\MspImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class MspImageFile(ImageFile.ImageFile):
class MspDecoder(ImageFile.PyDecoder):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PaletteFile.py
-----------------------------
>     """File handler for Teragon-style palette files."""
  
      rawmode = "RGB"
  
class PaletteFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PalmImagePlugin.py
-----------------------------
def build_prototype_image() -> Image.Image:
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PcdImagePlugin.py
-----------------------------
class PcdImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PcfFontFile.py
-----------------------------
>     """Font file plugin for the X11 PCF format."""
  
      name = "name"
  
def sz(s: bytes, o: int) -> bytes:
class PcfFontFile(FontFile.FontFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PcxImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class PcxImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PdfImagePlugin.py
-----------------------------
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _write_image(
def _save(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PdfParser.py
-----------------------------
>     """An error that probably indicates a syntactic or semantic error in the
def encode_text(s: str) -> bytes:
def decode_text(b: bytes) -> str:
class PdfFormatError(RuntimeError):
def check_format_condition(condition: bool, error_message: str) -> None:
class IndirectReferenceTuple(NamedTuple):
class IndirectReference(IndirectReferenceTuple):
class IndirectObjectDef(IndirectReference):
class XrefTable:
class PdfName:
class PdfArray(list[Any]):
class PdfDict(_DictBase):
class PdfBinary:
class PdfStream:
def pdf_repr(x: Any) -> bytes:
class PdfParser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PixarImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class PixarImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PngImagePlugin.py
-----------------------------
> """
  Maximum decompressed size for a iTXt or zTXt chunk.
  Eliminates decompression bombs where compressed chunks can expand 1000x.
  See :ref:`Text in PNG File Format<png-text>`.
class Disposal(IntEnum):
class Blend(IntEnum):
def _safe_zlib_decompress(s: bytes) -> bytes:
def _crc32(data: bytes, seed: int = 0) -> int:
class ChunkStream:
class iTXt(str):
class PngInfo:
class _RewindState(NamedTuple):
class PngStream(ChunkStream):
def _accept(prefix: bytes) -> bool:
class PngImageFile(ImageFile.ImageFile):
def putchunk(fp: IO[bytes], cid: bytes, *data: bytes) -> None:
class _idat:
class _fdat:
class _Frame(NamedTuple):
def _write_multiple_frames(
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save(
def getchunks(im: Image.Image, **params: Any) -> list[tuple[bytes, bytes, bytes]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PpmImagePlugin.py
-----------------------------
>         """
          This is a separate method because in the plain PBM format, all data tokens are
          exactly one byte, so the inter-token whitespace is optional.
def _accept(prefix: bytes) -> bool:
class PpmImageFile(ImageFile.ImageFile):
class PpmPlainDecoder(ImageFile.PyDecoder):
class PpmDecoder(ImageFile.PyDecoder):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PsdImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class PsdImageFile(ImageFile.ImageFile):
def _layerinfo(
def _maketile(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\PSDraw.py
-----------------------------
>     """
      Sets up printing to the given file. If ``fp`` is omitted,
      ``sys.stdout.buffer`` is assumed.
class PSDraw:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\QoiImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class QoiImageFile(ImageFile.ImageFile):
class QoiDecoder(ImageFile.PyDecoder):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
class QoiEncoder(ImageFile.PyEncoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\report.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\SgiImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class SgiImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
class SGI16Decoder(ImageFile.PyDecoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\SpiderImagePlugin.py
-----------------------------
>     """create a list of :py:class:`~PIL.Image.Image` objects for use in a montage"""
      if filelist is None or len(filelist) < 1:
          return None
  
def isInt(f: Any) -> int:
def isSpiderHeader(t: tuple[float, ...]) -> int:
def isSpiderImage(filename: str) -> int:
class SpiderImageFile(ImageFile.ImageFile):
def loadImageSeries(filelist: list[str] | None = None) -> list[Image.Image] | None:
def makeSpiderHeader(im: Image.Image) -> list[bytes]:
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save_spider(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\SunImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class SunImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\TarIO.py
-----------------------------
>     """A file object that provides read access to a given member of a TAR file."""
  
      def __init__(self, tarfile: str, file: str) -> None:
class TarIO(ContainerIO.ContainerIO[bytes]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\TgaImagePlugin.py
-----------------------------
class TgaImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\TiffImagePlugin.py
-----------------------------
>     """Implements a rational class where 0/0 is a legal value to match
      the in the wild use of exif rationals.
  
      e.g., DigitalZoomRatio - 0.00/0.00  indicates that no digital zoom was used
def _accept(prefix: bytes) -> bool:
def _limit_rational(
def _limit_signed_rational(
def _delegate(op: str) -> Any:
class IFDRational(Rational):
def _register_loader(idx: int, size: int) -> Callable[[_LoaderFunc], _LoaderFunc]:
def _register_writer(idx: int) -> Callable[[Callable[..., Any]], Callable[..., Any]]:
def _register_basic(idx_fmt_name: tuple[int, str, str]) -> None:
class ImageFileDirectory_v2(_IFDv2Base):
class ImageFileDirectory_v1(ImageFileDirectory_v2):
class TiffImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
class AppendingTiffWriter(io.BytesIO):
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\TiffTags.py
-----------------------------
>     """
      :param tag: Integer tag number
      :param group: Which :py:data:`~PIL.TiffTags.TAGS_V2_GROUPS` to look in
  
class _TagInfo(NamedTuple):
class TagInfo(_TagInfo):
def lookup(tag: int, group: int | None = None) -> TagInfo:
def _populate() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\WalImageFile.py
-----------------------------
> """
  This reader is based on the specification available from:
  https://www.flipcode.com/archives/Quake_2_BSP_File_Format.shtml
  and has been tested with a few sample files found using google.
class WalImageFile(ImageFile.ImageFile):
def open(filename: StrOrBytesPath | IO[bytes]) -> WalImageFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\WebPImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool | str:
class WebPImageFile(ImageFile.ImageFile):
def _convert_frame(im: Image.Image) -> Image.Image:
def _save_all(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\WmfImagePlugin.py
-----------------------------
>     """
      Install application-specific WMF image handler.
  
      :param handler: Handler object.
def register_handler(handler: ImageFile.StubHandler | None) -> None:
def _accept(prefix: bytes) -> bool:
class WmfStubImageFile(ImageFile.StubImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\XbmImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class XbmImageFile(ImageFile.ImageFile):
def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\XpmImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class XpmImageFile(ImageFile.ImageFile):
class XpmDecoder(ImageFile.PyDecoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\XVThumbImagePlugin.py
-----------------------------
def _accept(prefix: bytes) -> bool:
class XVThumbImageFile(ImageFile.ImageFile):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\_binary.py
-----------------------------
> """Binary input/output support routines."""
  from __future__ import annotations
  
  from struct import pack, unpack_from
def i8(c: bytes) -> int:
def o8(i: int) -> bytes:
def i16le(c: bytes, o: int = 0) -> int:
def si16le(c: bytes, o: int = 0) -> int:
def si16be(c: bytes, o: int = 0) -> int:
def i32le(c: bytes, o: int = 0) -> int:
def si32le(c: bytes, o: int = 0) -> int:
def si32be(c: bytes, o: int = 0) -> int:
def i16be(c: bytes, o: int = 0) -> int:
def i32be(c: bytes, o: int = 0) -> int:
def o16le(i: int) -> bytes:
def o32le(i: int) -> bytes:
def o16be(i: int) -> bytes:
def o32be(i: int) -> bytes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\_deprecate.py
-----------------------------
>     """
      Deprecations helper.
  
      :param deprecated: Name of thing to be deprecated.
def deprecate(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\_tkinter_finder.py
-----------------------------
> """Find compiled module linking to Tcl / Tk libraries"""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\_typing.py
-----------------------------
class SupportsRead(Protocol[_T_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\_util.py
-----------------------------
>         """
          Creates an object that raises the wrapped exception ``ex`` when used,
          and casts it to :py:obj:`~typing.Any` type.
def is_path(f: Any) -> TypeGuard[StrOrBytesPath]:
class DeferredError:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\__init__.py
-----------------------------
> """Pillow (Fork of the Python Imaging Library)
  
  Pillow is the friendly PIL fork by Jeffrey A. Clark and contributors.
      https://github.com/python-pillow/Pillow/
class UnidentifiedImageError(OSError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\PIL\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\autocompletion.py
-----------------------------
> """Logic that powers autocompletion installed by ``pip completion``."""
  
  from __future__ import annotations
  
def autocomplete() -> None:
def get_path_completion_type(
def auto_complete_paths(current: str, completion_type: str) -> Iterable[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\base_command.py
-----------------------------
> """Base Command class, and related routines"""
  
  from __future__ import annotations
  
class Command(CommandContextMixIn):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\cmdoptions.py
-----------------------------
> """
  shared options and groups
  
  The principle here is to define options once, but *not* instantiate them
def raise_option_error(parser: OptionParser, option: Option, msg: str) -> None:
def make_option_group(group: dict[str, Any], parser: ConfigOptionParser) -> OptionGroup:
def check_dist_restriction(options: Values, check_target: bool = False) -> None:
def _path_option_check(option: Option, opt: str, value: str) -> str:
def _package_name_option_check(option: Option, opt: str, value: str) -> str:
class PipOption(Option):
def exists_action() -> Option:
def extra_index_url() -> Option:
def find_links() -> Option:
def trusted_host() -> Option:
def constraints() -> Option:
def requirements() -> Option:
def editable() -> Option:
def _handle_src(option: Option, opt_str: str, value: str, parser: OptionParser) -> None:
def _get_format_control(values: Values, option: Option) -> Any:
def _handle_no_binary(
def _handle_only_binary(
def no_binary() -> Option:
def only_binary() -> Option:
def _convert_python_version(value: str) -> tuple[tuple[int, ...], str | None]:
def _handle_python_version(
def add_target_python_options(cmd_opts: OptionGroup) -> None:
def make_target_python(options: Values) -> TargetPython:
def prefer_binary() -> Option:
def _handle_no_cache_dir(
def _handle_dependency_group(
def _handle_no_use_pep517(
def _handle_config_settings(
def _handle_merge_hash(
def check_list_path_option(options: Values) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\command_context.py
-----------------------------
class CommandContextMixIn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\index_command.py
-----------------------------
> """
  Contains command classes which may interact with an index / the network.
  
  Unlike its sister module, req_command, this module still uses lazy imports
def _create_truststore_ssl_context() -> SSLContext | None:
class SessionCommandMixin(CommandContextMixIn):
def _pip_self_version_check(session: PipSession, options: Values) -> None:
class IndexGroupCommand(Command, SessionCommandMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\main.py
-----------------------------
> """Primary application entrypoint."""
  
  from __future__ import annotations
  
def main(args: list[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\main_parser.py
-----------------------------
> """A single place for constructing and exposing the main parser"""
  
  from __future__ import annotations
  
def create_main_parser() -> ConfigOptionParser:
def identify_python_interpreter(python: str) -> str | None:
def parse_command(args: list[str]) -> tuple[str, list[str]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\parser.py
-----------------------------
> """Base option parser setup"""
  
  from __future__ import annotations
  
class PrettyHelpFormatter(optparse.IndentedHelpFormatter):
class UpdatingDefaultsHelpFormatter(PrettyHelpFormatter):
class CustomOptionParser(optparse.OptionParser):
class ConfigOptionParser(CustomOptionParser):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\progress_bars.py
-----------------------------
>     """Get an object that can be used to render the download progress.
  
      Returns a callable, that takes an iterable to "wrap".
def _rich_download_progress_bar(
def _rich_install_progress_bar(
def _raw_progress_bar(
def get_download_progress_renderer(
def get_install_progress_renderer(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\req_command.py
-----------------------------
> """Contains the RequirementCommand base class.
  
  This class is in a separate module so the commands that do not always
  need PackageFinder capability don't unnecessarily import the
def with_cleanup(func: Any) -> Any:
class RequirementCommand(IndexGroupCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\spinners.py
-----------------------------
>     """
      Custom rich spinner that matches the style of the legacy spinners.
  
      (*) Updates will be handled in a background thread by a rich live panel
class SpinnerInterface:
class InteractiveSpinner(SpinnerInterface):
class NonInteractiveSpinner(SpinnerInterface):
class RateLimiter:
def open_spinner(message: str) -> Generator[SpinnerInterface, None, None]:
class _PipRichSpinner:
def open_rich_spinner(label: str, console: Console | None = None) -> Generator[None]:
def hidden_cursor(file: IO[str]) -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\status_codes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cli\__init__.py
-----------------------------
> """Subpackage containing all of pip's command line interface related code"""
  
  # This file intentionally does not import submodules

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\cache.py
-----------------------------
>     """
      Inspect and manage pip's wheel cache.
  
      Subcommands:
class CacheCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\check.py
-----------------------------
>     """Verify installed packages have compatible dependencies."""
  
      ignore_require_venv = True
class CheckCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\completion.py
-----------------------------
> BASE_COMPLETION = """
  # pip {shell} completion start{script}# pip {shell} completion end
class CompletionCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\configuration.py
-----------------------------
>     """
      Manage local and global configuration.
  
      Subcommands:
class ConfigurationCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\debug.py
-----------------------------
>     """Log the actual version and print extra info if there is
      a conflict or if the actual version could not be imported.
def show_value(name: str, value: Any) -> None:
def show_sys_implementation() -> None:
def create_vendor_txt_map() -> dict[str, str]:
def get_module_from_module_name(module_name: str) -> ModuleType | None:
def get_vendor_version_from_module(module_name: str) -> str | None:
def show_actual_vendor_versions(vendor_txt_versions: dict[str, str]) -> None:
def show_vendor_versions() -> None:
def show_tags(options: Values) -> None:
def ca_bundle_info(config: Configuration) -> str:
class DebugCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\download.py
-----------------------------
>     """
      Download packages from:
  
      - PyPI (and other indexes) using requirement specifiers.
class DownloadCommand(RequirementCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\freeze.py
-----------------------------
>     """
      Output installed packages in requirements format.
  
      packages are listed in a case-insensitive sorted order.
def _should_suppress_build_backends() -> bool:
def _dev_pkgs() -> set[str]:
class FreezeCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\hash.py
-----------------------------
>     """
      Compute a hash of a local package archive.
  
      These can be used with --hash in a requirements file to do repeatable
class HashCommand(Command):
def _hash_of_file(path: str, algorithm: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\help.py
-----------------------------
>     """Show help for commands"""
  
class HelpCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\index.py
-----------------------------
>     """
      Inspect information available from package indexes.
class IndexCommand(IndexGroupCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\inspect.py
-----------------------------
>     """
      Inspect the content of a Python environment and produce a report in JSON format.
class InspectCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\install.py
-----------------------------
>     """
      Install packages from:
  
      - PyPI (and other indexes) using requirement specifiers.
class InstallCommand(RequirementCommand):
def get_lib_location_guesses(
def site_packages_writable(root: str | None, isolated: bool) -> bool:
def decide_user_install(
def create_os_error_message(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\list.py
-----------------------------
>         """Give the distribution object a couple of extra fields.
  
          These will be populated during ``get_outdated()``. This is dirty but
          makes the rest of the code much cleaner.
class ListCommand(IndexGroupCommand):
def format_for_columns(
def format_for_json(packages: _ProcessedDists, options: Values) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\lock.py
-----------------------------
>     """
      EXPERIMENTAL - Lock packages and their dependencies from:
  
      - PyPI (and other indexes) using requirement specifiers.
class LockCommand(RequirementCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\search.py
-----------------------------
>     """Search for PyPI packages whose name or summary contains <query>."""
  
class TransformedHit(TypedDict):
class SearchCommand(Command, SessionCommandMixin):
def transform_hits(hits: list[dict[str, str]]) -> list[TransformedHit]:
def print_dist_installation_info(latest: str, dist: BaseDistribution | None) -> None:
def get_installed_distribution(name: str) -> BaseDistribution | None:
def print_results(
def highest_version(versions: list[str]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\show.py
-----------------------------
>     """
      Show information about one or more installed packages.
  
      The output is in RFC-compliant mail header format.
def normalize_project_url_label(label: str) -> str:
class ShowCommand(Command):
class _PackageInfo(NamedTuple):
def search_packages_info(query: list[str]) -> Generator[_PackageInfo, None, None]:
def print_results(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\uninstall.py
-----------------------------
>     """
      Uninstall packages.
  
      pip is able to uninstall most installed packages. Known exceptions are:
class UninstallCommand(Command, SessionCommandMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\wheel.py
-----------------------------
>     """
      Build Wheel archives for your requirements and dependencies.
  
      Wheel is a built-package format, and offers the advantage of not
class WheelCommand(RequirementCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\commands\__init__.py
-----------------------------
> """
  Package containing all pip commands
def create_command(name: str, **kwargs: Any) -> Command:
def get_similar_commands(name: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\distributions\base.py
-----------------------------
>     """A base class for handling installable artifacts.
  
      The requirements for anything installable are as follows:
  
class AbstractDistribution(metaclass=abc.ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\distributions\installed.py
-----------------------------
>     """Represents an installed package.
  
      This does not need any preparation as the required information has already
      been computed.
class InstalledDistribution(AbstractDistribution):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\distributions\sdist.py
-----------------------------
>     """Represents a source distribution.
  
      The preparation step for these needs metadata for the packages to be
      generated, either using PEP 517 or using the legacy `setup.py egg_info`.
class SourceDistribution(AbstractDistribution):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\distributions\wheel.py
-----------------------------
>     """Represents a wheel distribution.
  
      This does not need any preparation as wheels can be directly unpacked.
class WheelDistribution(AbstractDistribution):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\distributions\__init__.py
-----------------------------
>     """Returns a Distribution for the given InstallRequirement"""
      # Editable requirements will always be source distributions. They use the
      # legacy logic until we create a modern standard for them.
      if install_req.editable:
def make_distribution_for_install_requirement(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\index\collector.py
-----------------------------
> """
  The main purpose of this module is to expose LinkCollector.collect_sources().
def _match_vcs_scheme(url: str) -> str | None:
class _NotAPIContent(Exception):
def _ensure_api_header(response: Response) -> None:
class _NotHTTP(Exception):
def _ensure_api_response(url: str, session: PipSession) -> None:
def _get_simple_response(url: str, session: PipSession) -> Response:
def _get_encoding_from_headers(headers: ResponseHeaders) -> str | None:
class CacheablePageContent:
class ParseLinks(Protocol):
def with_cached_index_content(fn: ParseLinks) -> ParseLinks:
def parse_links(page: IndexContent) -> Iterable[Link]:
class IndexContent:
class HTMLLinkParser(HTMLParser):
def _handle_get_simple_fail(
def _make_index_content(
def _get_index_content(link: Link, *, session: PipSession) -> IndexContent | None:
class CollectedSources(NamedTuple):
class LinkCollector:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\index\package_finder.py
-----------------------------
> """Routines related to PyPI, indexes"""
  
  from __future__ import annotations
  
def _check_link_requires_python(
class LinkType(enum.Enum):
class LinkEvaluator:
def filter_unallowed_hashes(
class CandidatePreferences:
class BestCandidateResult:
class CandidateEvaluator:
class PackageFinder:
def _find_name_version_sep(fragment: str, canonical_name: str) -> int:
def _extract_version_from_fragment(fragment: str, canonical_name: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\index\sources.py
-----------------------------
>         """Returns the underlying link, if there's one."""
          raise NotImplementedError()
  
      def page_candidates(self) -> FoundCandidates:
class LinkSource:
def _is_html_file(file_url: str) -> bool:
class _FlatDirectoryToUrls:
class _FlatDirectorySource(LinkSource):
class _LocalFileSource(LinkSource):
class _RemoteFileSource(LinkSource):
class _IndexDirectorySource(LinkSource):
def build_source(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\index\__init__.py
-----------------------------
> """Index interaction code"""

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\locations\base.py
-----------------------------
>     """
      Return the major-minor version of the current Python as a string, e.g.
      "3.7" or "3.10".
def get_major_minor_version() -> str:
def change_root(new_root: str, pathname: str) -> str:
def get_src_prefix() -> str:
def is_osx_framework() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\locations\_distutils.py
-----------------------------
> """Locations where we look for configs, install stuff, etc"""
  
  # The following comment should be removed at some point in the future.
  # mypy: strict-optional=False
def distutils_scheme(
def get_scheme(
def get_bin_prefix() -> str:
def get_purelib() -> str:
def get_platlib() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\locations\_sysconfig.py
-----------------------------
>     """Check for Apple's ``osx_framework_library`` scheme.
  
      Python distributed by Apple's Command Line Tools has this special scheme
      that's used when:
def _should_use_osx_framework_prefix() -> bool:
def _infer_prefix() -> str:
def _infer_user() -> str:
def _infer_home() -> str:
def get_scheme(
def get_bin_prefix() -> str:
def get_purelib() -> str:
def get_platlib() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\locations\__init__.py
-----------------------------
>     """This function determines the value of _USE_SYSCONFIG.
  
      By default, pip uses sysconfig on Python 3.10+.
      But Python distributors can override this decision by setting:
def _should_use_sysconfig() -> bool:
def _looks_like_bpo_44860() -> bool:
def _looks_like_red_hat_patched_platlib_purelib(scheme: dict[str, str]) -> bool:
def _looks_like_red_hat_lib() -> bool:
def _looks_like_debian_scheme() -> bool:
def _looks_like_red_hat_scheme() -> bool:
def _looks_like_slackware_scheme() -> bool:
def _looks_like_msys2_mingw_scheme() -> bool:
def _warn_mismatched(old: pathlib.Path, new: pathlib.Path, *, key: str) -> None:
def _warn_if_mismatch(old: pathlib.Path, new: pathlib.Path, *, key: str) -> bool:
def _log_context(
def get_scheme(
def get_bin_prefix() -> str:
def get_bin_user() -> str:
def _looks_like_deb_system_dist_packages(value: str) -> bool:
def get_purelib() -> str:
def get_platlib() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_compat.py
-----------------------------
>     """A protocol that various path objects conform.
  
      This exists because importlib.metadata uses both ``pathlib.Path`` and
      ``zipfile.Path``, and we need a common base for type hints (Union does not
class BadMetadata(ValueError):
class BasePath(Protocol):
def get_info_location(d: importlib.metadata.Distribution) -> BasePath | None:
def parse_name_and_version_from_info_directory(
def get_dist_canonical_name(dist: importlib.metadata.Distribution) -> NormalizedName:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_dists.py
-----------------------------
>     """An ``importlib.metadata.Distribution`` read from a wheel.
  
      Although ``importlib.metadata.PathDistribution`` accepts ``zipfile.Path``,
      its implementation is too "lazy" for pip's needs (we can't keep the ZipFile
class WheelDistribution(importlib.metadata.Distribution):
class Distribution(BaseDistribution):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\importlib\_envs.py
-----------------------------
>     """Finder to locate distributions.
  
      The main purpose of this class is to memoize found distributions' names, so
      only one distribution is returned for each package name. At lot of pip code
def _looks_like_wheel(location: str) -> bool:
class _DistributionFinder:
class Environment(BaseEnvironment):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\importlib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\base.py
-----------------------------
>     """Convert a legacy installed-files.txt path into modern RECORD path.
  
      The legacy format stores paths relative to the info directory, while the
      modern format stores paths relative to the package root, e.g. the
class BaseEntryPoint(Protocol):
def _convert_installed_files_path(
class RequiresEntry(NamedTuple):
class BaseDistribution(Protocol):
class BaseEnvironment:
class Wheel(Protocol):
class FilesystemWheel(Wheel):
class MemoryWheel(Wheel):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\pkg_resources.py
-----------------------------
>     """IMetadataProvider that reads metadata files from a dictionary.
  
      This also maps metadata decoding exceptions to our internal exception type.
class EntryPoint(NamedTuple):
class InMemoryMetadata:
class Distribution(BaseDistribution):
class Environment(BaseEnvironment):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\_json.py
-----------------------------
>     """Convert a Message object into a JSON-compatible dictionary."""
  
      def sanitise_header(h: Header | str) -> str:
          if isinstance(h, Header):
def json_name(field: str) -> str:
def msg_to_json(msg: Message) -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\metadata\__init__.py
-----------------------------
>     """Whether to use the ``importlib.metadata`` or ``pkg_resources`` backend.
  
      By default, pip uses ``importlib.metadata`` on Python 3.11+, and
      ``pkg_resources`` otherwise. Up to Python 3.13, This can be
def _should_use_importlib_metadata() -> bool:
def _emit_pkg_resources_deprecation_if_needed() -> None:
class Backend(Protocol):
def select_backend() -> Backend:
def get_default_environment() -> BaseEnvironment:
def get_environment(paths: list[str] | None) -> BaseEnvironment:
def get_directory_distribution(directory: str) -> BaseDistribution:
def get_wheel_distribution(wheel: Wheel, canonical_name: str) -> BaseDistribution:
def get_metadata_distribution(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\candidate.py
-----------------------------
>     """Represents a potential "candidate" for installation."""
  
      __slots__ = ["name", "version", "link"]
  
class InstallationCandidate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\direct_url.py
-----------------------------
> """PEP 610"""
  
  from __future__ import annotations
  
class DirectUrlValidationError(Exception):
def _get(
def _get_required(
def _exactly_one_of(infos: Iterable[InfoType | None]) -> InfoType:
def _filter_none(**kwargs: Any) -> dict[str, Any]:
class VcsInfo:
class ArchiveInfo:
class DirInfo:
class DirectUrl:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\format_control.py
-----------------------------
>     """Helper for managing formats from which a package can be installed."""
  
      __slots__ = ["no_binary", "only_binary"]
  
class FormatControl:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\index.py
-----------------------------
>     """Represents a Package Index and provides easier access to endpoints"""
  
      __slots__ = ["url", "netloc", "simple_url", "pypi_url", "file_storage_domain"]
  
class PackageIndex:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\installation_report.py
-----------------------------
class InstallationReport:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\link.py
-----------------------------
>     """Links to content may have embedded hash values. This class parses those.
  
      `name` must be any member of `_SUPPORTED_HASHES`.
  
class LinkHash:
class MetadataFile:
def supported_hashes(hashes: dict[str, str] | None) -> dict[str, str] | None:
def _clean_url_path_part(part: str) -> str:
def _clean_file_url_path(part: str) -> str:
def _clean_url_path(path: str, is_local_path: bool) -> str:
def _ensure_quoted_url(url: str) -> str:
def _absolute_link_url(base_url: str, url: str) -> str:
class Link:
class _CleanResult(NamedTuple):
def _clean_link(link: Link) -> _CleanResult:
def links_equivalent(link1: Link, link2: Link) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\pylock.py
-----------------------------
def is_valid_pylock_file_name(path: Path) -> bool:
def _toml_dict_factory(data: list[tuple[str, Any]]) -> dict[str, Any]:
class PackageVcs:
class PackageDirectory:
class PackageArchive:
class PackageSdist:
class PackageWheel:
class Package:
class Pylock:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\scheme.py
-----------------------------
> """
  For types associated with installation schemes.
  
  For a general overview of available schemes and their context, see
class Scheme:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\search_scope.py
-----------------------------
>     """
      Encapsulates the locations that pip is configured to search.
class SearchScope:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\selection_prefs.py
-----------------------------
>     """
      Encapsulates the candidate selection preferences for downloading
      and installing files.
class SelectionPreferences:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\target_python.py
-----------------------------
>     """
      Encapsulates the properties of a Python interpreter one is targeting
      for a package install, download, etc.
class TargetPython:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\wheel.py
-----------------------------
> """Represents a wheel file and provides access to the various parts of the
  name that have meaning.
class Wheel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\models\__init__.py
-----------------------------
> """A package that contains models that represent entities."""

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\auth.py
-----------------------------
> """Network Authentication Helpers
  
  Contains interface (MultiDomainBasicAuth) and associated glue code for
  providing credentials in the context of network requests.
class Credentials(NamedTuple):
class KeyRingBaseProvider(ABC):
class KeyRingNullProvider(KeyRingBaseProvider):
class KeyRingPythonProvider(KeyRingBaseProvider):
class KeyRingCliProvider(KeyRingBaseProvider):
def get_keyring_provider(provider: str) -> KeyRingBaseProvider:
class MultiDomainBasicAuth(AuthBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\cache.py
-----------------------------
> """HTTP cache implementation."""
  
  from __future__ import annotations
  
def is_from_cache(response: Response) -> bool:
def suppressed_cache_errors() -> Generator[None, None, None]:
class SafeFileCache(SeparateBodyBaseCache):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\download.py
-----------------------------
> """Download files with progress indicators."""
  
  from __future__ import annotations
  
def _get_http_response_size(resp: Response) -> int | None:
def _get_http_response_etag_or_last_modified(resp: Response) -> str | None:
def _log_download(
def sanitize_content_filename(filename: str) -> str:
def parse_content_disposition(content_disposition: str, default_filename: str) -> str:
def _get_http_response_filename(resp: Response, link: Link) -> str:
class _FileDownload:
class Downloader:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\lazy_wheel.py
-----------------------------
> """Lazy ZIP over HTTP"""
  
  from __future__ import annotations
  
class HTTPRangeRequestUnsupported(Exception):
def dist_from_wheel_url(name: str, url: str, session: PipSession) -> BaseDistribution:
class LazyZipOverHTTP:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\session.py
-----------------------------
> """PipSession and supporting code, containing all pip-specific
  network request configuration and behavior.
def looks_like_ci() -> bool:
def user_agent() -> str:
class LocalFSAdapter(BaseAdapter):
class _SSLContextAdapterMixin:
class HTTPAdapter(_SSLContextAdapterMixin, _BaseHTTPAdapter):
class CacheControlAdapter(_SSLContextAdapterMixin, _BaseCacheControlAdapter):
class InsecureHTTPAdapter(HTTPAdapter):
class InsecureCacheControlAdapter(CacheControlAdapter):
class PipSession(requests.Session):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\utils.py
-----------------------------
>     """Given a requests Response, provide the data chunks."""
      try:
          # Special case for urllib3.
          for chunk in response.raw.stream(
def raise_for_status(resp: Response) -> None:
def response_chunks(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\xmlrpc.py
-----------------------------
> """xmlrpclib.Transport implementation"""
  
  import logging
  import urllib.parse
class PipXmlrpcTransport(xmlrpc.client.Transport):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\network\__init__.py
-----------------------------
> """Contains purely network-related utilities."""

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\build_tracker.py
-----------------------------
>     """Uniquely identifying string provided to the build tracker."""
  
  
  class BuildTracker:
def update_env_context_manager(**changes: str) -> Generator[None, None, None]:
def get_build_tracker() -> Generator[BuildTracker, None, None]:
class TrackerId(str):
class BuildTracker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\metadata.py
-----------------------------
> """Metadata generation logic for source distributions."""
  
  import os
  
def generate_metadata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_editable.py
-----------------------------
> """Metadata generation logic for source distributions."""
  
  import os
  
def generate_editable_metadata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\metadata_legacy.py
-----------------------------
> """Metadata generation logic for legacy source distributions."""
  
  import logging
  import os
def _find_egg_info(directory: str) -> str:
def generate_metadata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\wheel.py
-----------------------------
>     """Build one InstallRequirement using the PEP 517 build process.
  
      Returns path to wheel if successfully built. Otherwise, returns None.
def build_wheel_pep517(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_editable.py
-----------------------------
>     """Build one InstallRequirement using the PEP 660 build process.
  
      Returns path to wheel if successfully built. Otherwise, returns None.
def build_wheel_editable(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\wheel_legacy.py
-----------------------------
>     """Format command information for logging."""
      command_desc = format_command_args(command_args)
      text = f"Command arguments: {command_desc}\n"
  
def format_command_result(
def get_legacy_build_wheel_path(
def build_wheel_legacy(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\build\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\install\editable_legacy.py
-----------------------------
> """Legacy editable installation process, i.e. `setup.py develop`."""
  
  from __future__ import annotations
  
def install_editable(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\install\wheel.py
-----------------------------
> """Support for installing and building the "wheel" binary package format."""
  
  from __future__ import annotations
  
class File(Protocol):
def rehash(path: str, blocksize: int = 1 << 20) -> tuple[str, str]:
def csv_io_kwargs(mode: str) -> dict[str, Any]:
def fix_script(path: str) -> bool:
def wheel_root_is_purelib(metadata: Message) -> bool:
def get_entrypoints(dist: BaseDistribution) -> tuple[dict[str, str], dict[str, str]]:
def message_about_scripts_not_on_PATH(scripts: Sequence[str]) -> str | None:
def _normalized_outrows(
def _record_to_fs_path(record_path: RecordPath, lib_dir: str) -> str:
def _fs_to_record_path(path: str, lib_dir: str) -> RecordPath:
def get_csv_rows_for_installed(
def get_console_script_specs(console: dict[str, str]) -> list[str]:
class ZipBackedFile:
class ScriptFile:
class MissingCallableSuffix(InstallationError):
def _raise_for_invalid_entrypoint(specification: str) -> None:
class PipScriptMaker(ScriptMaker):
def _install_wheel(  # noqa: C901, PLR0915 function is too long
def req_error_context(req_description: str) -> Generator[None, None, None]:
def install_wheel(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\install\__init__.py
-----------------------------
> """For modules related to installing packages."""

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\check.py
-----------------------------
> """Validation of dependencies of packages"""
  
  from __future__ import annotations
  
class PackageDetails(NamedTuple):
def create_package_set_from_installed() -> tuple[PackageSet, bool]:
def check_package_set(
def check_install_conflicts(to_install: list[InstallRequirement]) -> ConflictDetails:
def check_unsupported(
def _simulate_installation_of(
def _create_whitelist(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\freeze.py
-----------------------------
>     """
      Compute and return values (req, comments) for use in
      FrozenRequirement.from_dist().
class _EditableInfo(NamedTuple):
def freeze(
def _format_as_name_version(dist: BaseDistribution) -> str:
def _get_editable_info(dist: BaseDistribution) -> _EditableInfo:
class FrozenRequirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\prepare.py
-----------------------------
> """Prepares a distribution for installation"""
  
  # The following comment should be removed at some point in the future.
  # mypy: strict-optional=False
def _get_prepared_distribution(
def unpack_vcs_link(link: Link, location: str, verbosity: int) -> None:
class File:
def get_http_url(
def get_file_url(
def unpack_url(
def _check_download_dir(
class RequirementPreparer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\operations\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\constructors.py
-----------------------------
> """Backing implementation for InstallRequirement's various constructors
  
  The idea here is that these formed a major chunk of InstallRequirement's size
  so, moving them and support code dedicated to them outside of that class
def _strip_extras(path: str) -> tuple[str, str | None]:
def convert_extras(extras: str | None) -> set[str]:
def _set_requirement_extras(req: Requirement, new_extras: set[str]) -> Requirement:
def parse_editable(editable_req: str) -> tuple[str | None, str, set[str]]:
def check_first_requirement_in_file(filename: str) -> None:
def deduce_helpful_msg(req: str) -> str:
class RequirementParts:
def parse_req_from_editable(editable_req: str) -> RequirementParts:
def install_req_from_editable(
def _looks_like_path(name: str) -> bool:
def _get_url_from_path(path: str, name: str) -> str | None:
def parse_req_from_line(name: str, line_source: str | None) -> RequirementParts:
def install_req_from_line(
def install_req_from_req_string(
def install_req_from_parsed_requirement(
def install_req_from_link_and_ireq(
def install_req_drop_extras(ireq: InstallRequirement) -> InstallRequirement:
def install_req_extend_extras(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\req_dependency_group.py
-----------------------------
>     """
      Parse dependency groups data as provided via the CLI, in a `[path:]group` syntax.
  
      Raises InstallationErrors if anything goes wrong.
def parse_dependency_groups(groups: list[tuple[str, str]]) -> list[str]:
def _resolve_all_groups(
def _build_resolvers(paths: Iterable[str]) -> dict[str, Any]:
def _load_pyproject(path: str) -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\req_file.py
-----------------------------
> """
  Requirements file parsing
class ParsedRequirement:
class ParsedLine:
def parse_requirements(
def preprocess(content: str) -> ReqFileLines:
def handle_requirement_line(
def handle_option_line(
def handle_line(
class RequirementsFileParser:
def get_line_parser(finder: PackageFinder | None) -> LineParser:
def break_args_options(line: str) -> tuple[str, str]:
class OptionParsingError(Exception):
def build_parser() -> optparse.OptionParser:
def join_lines(lines_enum: ReqFileLines) -> ReqFileLines:
def ignore_comments(lines_enum: ReqFileLines) -> ReqFileLines:
def expand_env_variables(lines_enum: ReqFileLines) -> ReqFileLines:
def get_file_content(url: str, session: PipSession) -> tuple[str, str]:
def _decode_req_file(data: bytes, url: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\req_install.py
-----------------------------
>     """
      Represents something that may be installed later on, may have information
      about where to fetch the relevant requirement and also contains logic for
      installing the said requirement.
class InstallRequirement:
def check_invalid_constraint_type(req: InstallRequirement) -> str:
def _has_option(options: Values, reqs: list[InstallRequirement], option: str) -> bool:
def check_legacy_setup_py_options(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\req_set.py
-----------------------------
>         """Create a RequirementSet."""
  
          self.requirements: dict[str, InstallRequirement] = OrderedDict()
          self.check_supported_wheels = check_supported_wheels
class RequirementSet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\req_uninstall.py
-----------------------------
>     """Create the fully qualified name of the files created by
      {console,gui}_scripts for the given ``dist``.
      Returns the list of file names
def _script_names(
def _unique(
def uninstallation_paths(dist: BaseDistribution) -> Generator[str, None, None]:
def compact(paths: Iterable[str]) -> set[str]:
def compress_for_rename(paths: Iterable[str]) -> set[str]:
def compress_for_output_listing(paths: Iterable[str]) -> tuple[set[str], set[str]]:
class StashedUninstallPathSet:
class UninstallPathSet:
class UninstallPthEntries:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\req\__init__.py
-----------------------------
>     """
      Install everything in the given list.
  
      (to be called after having downloaded and unpacked the packages)
class InstallationResult:
def _validate_requirements(
def install_given_reqs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\legacy\resolver.py
-----------------------------
> """Dependency Resolution
  
  The dependency resolution in pip is performed as follows:
  
def _check_dist_requires_python(
class Resolver(BaseResolver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\legacy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\base.py
-----------------------------
>         """The "project name" of a requirement.
  
          This is different from ``name`` if this requirement contains extras,
          in which case ``name`` would contain the ``[...]`` part, while this
def format_name(project: NormalizedName, extras: frozenset[NormalizedName]) -> str:
class Constraint:
class Requirement:
def _match_link(link: Link, candidate: Candidate) -> bool:
class Candidate:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py
-----------------------------
>     """The runtime version of BaseCandidate."""
      base_candidate_classes = (
          AlreadyInstalledCandidate,
          EditableCandidate,
def as_base_candidate(candidate: Candidate) -> BaseCandidate | None:
def make_install_req_from_link(
def make_install_req_from_editable(
def _make_install_req_from_dist(
class _InstallRequirementBackedCandidate(Candidate):
class LinkCandidate(_InstallRequirementBackedCandidate):
class EditableCandidate(_InstallRequirementBackedCandidate):
class AlreadyInstalledCandidate(Candidate):
class ExtrasCandidate(Candidate):
class RequiresPythonCandidate(Candidate):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\factory.py
-----------------------------
>             """Get the candidate for the currently-installed version."""
              # If --force-reinstall is set, we want the version from the index
              # instead, so we "pretend" there is nothing installed.
              if self._force_reinstall:
class CollectedRootRequirements(NamedTuple):
class Factory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py
-----------------------------
> """Utilities to lazily create and visit candidates found.
  
  Creating and visiting a candidate is a *very* costly operation. It involves
  fetching, extracting, potentially building modules from source, and verifying
def _iter_built(infos: Iterator[IndexCandidateInfo]) -> Iterator[Candidate]:
def _iter_built_with_prepended(
def _iter_built_with_inserted(
class FoundCandidates(Sequence[Candidate]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\provider.py
-----------------------------
>     """Get item from a package name lookup mapping with a resolver identifier.
  
      This extra logic is needed when the target mapping is keyed by package
      name, which cannot be directly looked up with an identifier (which may
def _get_with_identifier(
class PipProvider(_ProviderBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\reporter.py
-----------------------------
>     """A reporter that does an info log for every event it sees."""
  
      def starting(self) -> None:
          logger.info("Reporter.starting()")
class PipReporter(BaseReporter[Requirement, Candidate, str]):
class PipDebuggingReporter(BaseReporter[Requirement, Candidate, str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\requirements.py
-----------------------------
>     """
      Requirement backed by an install requirement on a base package.
      Trims extras from its install requirement if there are any.
class ExplicitRequirement(Requirement):
class SpecifierRequirement(Requirement):
class SpecifierWithoutExtrasRequirement(SpecifierRequirement):
class RequiresPythonRequirement(Requirement):
class UnsatisfiableRequirement(Requirement):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py
-----------------------------
>         """Get order for installation of requirements in RequirementSet.
  
          The returned list contains a requirement before another that depends on
          it. This helps ensure that the environment is kept consistent as they
class Resolver(BaseResolver):
def get_topological_weights(
def _req_set_item_sorter(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\resolvelib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\base.py
-----------------------------
class BaseResolver:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\resolution\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\appdirs.py
-----------------------------
> """
  This code wraps the vendored appdirs module to so the return values are
  compatible for the current pip code base.
  
def user_cache_dir(appname: str) -> str:
def _macos_user_config_dir(appname: str, roaming: bool = True) -> str:
def user_config_dir(appname: str, roaming: bool = True) -> str:
def site_config_dirs(appname: str) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\compat.py
-----------------------------
> """Stuff that differs in different Python versions and platform
def has_tls() -> bool:
def get_path_uid(path: str) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\compatibility_tags.py
-----------------------------
> """Generate and work with PEP 425 Compatibility Tags."""
  
  from __future__ import annotations
  
def version_info_to_nodot(version_info: tuple[int, ...]) -> str:
def _mac_platforms(arch: str) -> list[str]:
def _ios_platforms(arch: str) -> list[str]:
def _android_platforms(arch: str) -> list[str]:
def _custom_manylinux_platforms(arch: str) -> list[str]:
def _get_custom_platforms(arch: str) -> list[str]:
def _expand_allowed_platforms(platforms: list[str] | None) -> list[str] | None:
def _get_python_version(version: str) -> PythonVersion:
def _get_custom_interpreter(
def get_supported(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\datetime.py
-----------------------------
> """For when pip wants to check the date or time."""
  
  import datetime
  
def today_is_later_than(year: int, month: int, day: int) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\deprecation.py
-----------------------------
> """
  A module that implements tooling to enable easy warnings about deprecations.
class PipDeprecationWarning(Warning):
def _showwarning(
def install_warning_logger() -> None:
def deprecated(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\direct_url_helpers.py
-----------------------------
>     """Convert a DirectUrl to a pip requirement string."""
      direct_url.validate()  # if invalid, this is a pip bug
      requirement = name + " @ "
      fragments = []
def direct_url_as_pep440_direct_reference(direct_url: DirectUrl, name: str) -> str:
def direct_url_for_editable(source_dir: str) -> DirectUrl:
def direct_url_from_link(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\egg_link.py
-----------------------------
>     """
      Convert a Name metadata value to a .egg-link name, by applying
      the same substitution as pkg_resources's safe_name function.
      Note: we cannot use canonicalize_name because it has a different logic.
def _egg_link_names(raw_name: str) -> list[str]:
def egg_link_path_from_sys_path(raw_name: str) -> str | None:
def egg_link_path_from_location(raw_name: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\entrypoints.py
-----------------------------
>     """Central wrapper for all old entrypoints.
  
      Historically pip has had several entrypoints defined. Because of issues
      arising from PATH, sys.path, multiple Pythons, their interactions, and most
def _wrapper(args: list[str] | None = None) -> int:
def get_best_invocation_for_this_pip() -> str:
def get_best_invocation_for_this_python() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\filesystem.py
-----------------------------
>     """Return a file-like object pointing to a tmp file next to path.
  
      The file is created securely and is ensured to be written to disk
      after the context reaches its end.
def check_path_owner(path: str) -> bool:
def adjacent_tmp_file(path: str, **kwargs: Any) -> Generator[BinaryIO, None, None]:
def test_writable_dir(path: str) -> bool:
def _test_writable_dir_win(path: str) -> bool:
def find_files(path: str, pattern: str) -> list[str]:
def file_size(path: str) -> int | float:
def format_file_size(path: str) -> str:
def directory_size(path: str) -> int | float:
def format_directory_size(path: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\filetypes.py
-----------------------------
> """Filetype information."""
  
  from pip._internal.utils.misc import splitext
  
def is_archive_file(name: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\glibc.py
-----------------------------
>     """Try to determine the glibc version
  
      Returns a tuple of strings (lib, version) which default to empty strings
      in case the lookup fails.
def glibc_version_string() -> str | None:
def glibc_version_string_confstr() -> str | None:
def glibc_version_string_ctypes() -> str | None:
def libc_ver() -> tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\hashes.py
-----------------------------
>     """A wrapper that builds multiple hashes at once and checks them against
      known-good values
  
class Hashes:
class MissingHashes(Hashes):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\logging.py
-----------------------------
>     """
      Raised if BrokenPipeError occurs for the stdout stream while logging.
class BrokenStdoutLoggingError(Exception):
def _is_broken_pipe_error(exc_class: type[BaseException], exc: BaseException) -> bool:
def indent_log(num: int = 2) -> Generator[None, None, None]:
def get_indentation() -> int:
class IndentingFormatter(logging.Formatter):
class IndentedRenderable:
class PipConsole(Console):
def get_console(*, stderr: bool = False) -> Console:
class RichPipStreamHandler(RichHandler):
class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
class MaxLevelFilter(Filter):
class ExcludeLoggerFilter(Filter):
def setup_logging(verbosity: int, no_color: bool, user_log_file: str | None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\misc.py
-----------------------------
>     """
      Convert a tuple of ints representing a Python version to one of length
      three.
  
def get_pip_version() -> str:
def normalize_version_info(py_version_info: tuple[int, ...]) -> tuple[int, int, int]:
def ensure_dir(path: str) -> None:
def get_prog() -> str:
def rmtree(dir: str, ignore_errors: bool = False, onexc: OnExc | None = None) -> None:
def _onerror_ignore(*_args: Any) -> None:
def _onerror_reraise(*_args: Any) -> None:
def rmtree_errorhandler(
def display_path(path: str) -> str:
def backup_dir(dir: str, ext: str = ".bak") -> str:
def ask_path_exists(message: str, options: Iterable[str]) -> str:
def _check_no_input(message: str) -> None:
def ask(message: str, options: Iterable[str]) -> str:
def ask_input(message: str) -> str:
def ask_password(message: str) -> str:
def strtobool(val: str) -> int:
def format_size(bytes: float) -> str:
def tabulate(rows: Iterable[Iterable[Any]]) -> tuple[list[str], list[int]]:
def is_installable_dir(path: str) -> bool:
def read_chunks(
def normalize_path(path: str, resolve_symlinks: bool = True) -> str:
def splitext(path: str) -> tuple[str, str]:
def renames(old: str, new: str) -> None:
def is_local(path: str) -> bool:
def write_output(msg: Any, *args: Any) -> None:
class StreamWrapper(StringIO):
def enum(*sequential: Any, **named: Any) -> type[Any]:
def build_netloc(host: str, port: int | None) -> str:
def build_url_from_netloc(netloc: str, scheme: str = "https") -> str:
def parse_netloc(netloc: str) -> tuple[str | None, int | None]:
def split_auth_from_netloc(netloc: str) -> NetlocTuple:
def redact_netloc(netloc: str) -> str:
def _transform_url(
def _get_netloc(netloc: str) -> NetlocTuple:
def _redact_netloc(netloc: str) -> tuple[str]:
def split_auth_netloc_from_url(
def remove_auth_from_url(url: str) -> str:
def redact_auth_from_url(url: str) -> str:
def redact_auth_from_requirement(req: Requirement) -> str:
class HiddenText:
def hide_value(value: str) -> HiddenText:
def hide_url(url: str) -> HiddenText:
def protect_pip_from_modification_on_windows(modifying_pip: bool) -> None:
def check_externally_managed() -> None:
def is_console_interactive() -> bool:
def hash_file(path: str, blocksize: int = 1 << 20) -> tuple[Any, int]:
def pairwise(iterable: Iterable[Any]) -> Iterator[tuple[Any, Any]]:
def partition(
class ConfiguredBuildBackendHookCaller(BuildBackendHookCaller):
def warn_if_run_as_root() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\packaging.py
-----------------------------
>     """
      Check if the given Python version matches a "Requires-Python" specifier.
  
      :param version_info: A 3-tuple of ints representing a Python
def check_requires_python(
def get_requirement(req_string: str) -> Requirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\retry.py
-----------------------------
>     """Decorator to automatically retry a function on error.
  
      If the function raises, the function is recalled with the same arguments
      until it returns or the time limit is reached. When the time limit is
def retry(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\setuptools_build.py
-----------------------------
>     """
      exec(compile('''
      # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py
      #
def make_setuptools_shim_args(
def make_setuptools_bdist_wheel_args(
def make_setuptools_clean_args(
def make_setuptools_develop_args(
def make_setuptools_egg_info_args(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\subprocess.py
-----------------------------
>     """
      Create a CommandArgs object.
def make_command(*args: str | HiddenText | CommandArgs) -> CommandArgs:
def format_command_args(args: list[str] | CommandArgs) -> str:
def reveal_command_args(args: list[str] | CommandArgs) -> list[str]:
def call_subprocess(
def runner_with_spinner_message(message: str) -> Callable[..., None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\temp_dir.py
-----------------------------
>     """Manages temp directory behavior"""
  
      def __init__(self) -> None:
          self._should_delete: dict[str, bool] = {}
def global_tempdir_manager() -> Generator[None, None, None]:
class TempDirectoryTypeRegistry:
def tempdir_registry() -> Generator[TempDirectoryTypeRegistry, None, None]:
class _Default:
class TempDirectory:
class AdjacentTempDirectory(TempDirectory):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\unpacking.py
-----------------------------
> """Utilities related archives."""
  
  from __future__ import annotations
  
def current_umask() -> int:
def split_leading_dir(path: str) -> list[str]:
def has_leading_dir(paths: Iterable[str]) -> bool:
def is_within_directory(directory: str, target: str) -> bool:
def _get_default_mode_plus_executable() -> int:
def set_extracted_file_to_default_mode_plus_executable(path: str) -> None:
def zip_item_is_executable(info: ZipInfo) -> bool:
def unzip_file(filename: str, location: str, flatten: bool = True) -> None:
def untar_file(filename: str, location: str) -> None:
def _untar_without_filter(
def unpack_file(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\urls.py
-----------------------------
>     """
      Convert a path to a file: URL.  The path will be made absolute and have
      quoted path parts.
def path_to_url(path: str) -> str:
def url_to_path(url: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\virtualenv.py
-----------------------------
>     """Checks if sys.base_prefix and sys.prefix match.
  
      This handles PEP 405 compliant virtual environments.
def _running_under_venv() -> bool:
def _running_under_legacy_virtualenv() -> bool:
def running_under_virtualenv() -> bool:
def _get_pyvenv_cfg_lines() -> list[str] | None:
def _no_global_under_venv() -> bool:
def _no_global_under_legacy_virtualenv() -> bool:
def virtualenv_no_global() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\wheel.py
-----------------------------
> """Support functions for working with wheel files."""
  
  import logging
  from email.message import Message
def parse_wheel(wheel_zip: ZipFile, name: str) -> tuple[str, Message]:
def wheel_dist_info_dir(source: ZipFile, name: str) -> str:
def read_wheel_metadata_file(source: ZipFile, path: str) -> bytes:
def wheel_metadata(source: ZipFile, dist_info_dir: str) -> Message:
def wheel_version(wheel_data: Message) -> tuple[int, ...]:
def check_compatibility(version: tuple[int, ...], name: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\_jaraco_text.py
-----------------------------
> """Functions brought over from jaraco.text.
  
  These functions are not supposed to be used within `pip._internal`. These are
  helper functions brought over from `jaraco.text` to enable vendoring newer
def _nonblank(str):
def yield_lines(iterable):
def _(text):
def drop_comment(line):
def join_continuation(lines):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\_log.py
-----------------------------
> """Customize logging
  
  Defines custom logger class for the `logger.verbose(...)` method.
  
class VerboseLogger(logging.Logger):
def getLogger(name: str) -> VerboseLogger:
def init_logging() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\utils\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\vcs\bazaar.py
-----------------------------
>         """Always assume the versions don't match"""
          return False
  
  
class Bazaar(VersionControl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\vcs\git.py
-----------------------------
>     r"""^
      # Optional user, e.g. 'git@'
      (\w+@)?
      # Server, e.g. 'github.com'.
def looks_like_hash(sha: str) -> bool:
class Git(VersionControl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\vcs\mercurial.py
-----------------------------
>         """
          Return the repository-local changeset revision number, as an integer.
class Mercurial(VersionControl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\vcs\subversion.py
-----------------------------
>         """
          Return the maximum revision for all files under a given location
class Subversion(VersionControl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\vcs\versioncontrol.py
-----------------------------
> """Handles all VCS (version control) support"""
  
  from __future__ import annotations
  
def is_url(name: str) -> bool:
def make_vcs_requirement_url(
def find_path_to_project_root_from_repo_root(
class RemoteNotFoundError(Exception):
class RemoteNotValidError(Exception):
class RevOptions:
class VcsSupport:
class VersionControl:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\vcs\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\build_env.py
-----------------------------
> """Build Environment used for isolation during sdist building"""
  
  from __future__ import annotations
  
def _dedup(a: str, b: str) -> tuple[str] | tuple[str, str]:
class _Prefix:
def get_runnable_pip() -> str:
def _get_system_sitepackages() -> set[str]:
class BuildEnvironmentInstaller(Protocol):
class SubprocessBuildEnvironmentInstaller:
class BuildEnvironment:
class NoOpBuildEnvironment(BuildEnvironment):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\cache.py
-----------------------------
> """Cache Management"""
  
  from __future__ import annotations
  
def _hash_dict(d: dict[str, str]) -> str:
class Cache:
class SimpleWheelCache(Cache):
class EphemWheelCache(SimpleWheelCache):
class CacheEntry:
class WheelCache(Cache):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\configuration.py
-----------------------------
> """Configuration management setup
  
  Some terminology:
  - name
def _normalize_name(name: str) -> str:
def _disassemble_key(name: str) -> list[str]:
def get_configuration_files() -> dict[Kind, list[str]]:
class Configuration:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\exceptions.py
-----------------------------
> """Exceptions used throughout package.
  
  This module MUST NOT try to import from anything within `pip._internal` to
  operate. This is expected to be importable from any/all files within the
def _is_kebab_case(s: str) -> bool:
def _prefix_with_indent(
class PipError(Exception):
class DiagnosticPipError(PipError):
class ConfigurationError(PipError):
class InstallationError(PipError):
class MissingPyProjectBuildRequires(DiagnosticPipError):
class InvalidPyProjectBuildRequires(DiagnosticPipError):
class NoneMetadataError(PipError):
class UserInstallationInvalid(InstallationError):
class InvalidSchemeCombination(InstallationError):
class DistributionNotFound(InstallationError):
class RequirementsFileParseError(InstallationError):
class BestVersionAlreadyInstalled(PipError):
class BadCommand(PipError):
class CommandError(PipError):
class PreviousBuildDirError(PipError):
class NetworkConnectionError(PipError):
class InvalidWheelFilename(InstallationError):
class UnsupportedWheel(InstallationError):
class InvalidWheel(InstallationError):
class MetadataInconsistent(InstallationError):
class MetadataInvalid(InstallationError):
class InstallationSubprocessError(DiagnosticPipError, InstallationError):
class MetadataGenerationFailed(InstallationSubprocessError, InstallationError):
class HashErrors(InstallationError):
class HashError(InstallationError):
class VcsHashUnsupported(HashError):
class DirectoryUrlHashUnsupported(HashError):
class HashMissing(HashError):
class HashUnpinned(HashError):
class HashMismatch(HashError):
class UnsupportedPythonVersion(InstallationError):
class ConfigurationFileCouldNotBeLoaded(ConfigurationError):
class ExternallyManagedEnvironment(DiagnosticPipError):
class UninstallMissingRecord(DiagnosticPipError):
class LegacyDistutilsInstall(DiagnosticPipError):
class InvalidInstalledPackage(DiagnosticPipError):
class IncompleteDownloadError(DiagnosticPipError):
class ResolutionTooDeepError(DiagnosticPipError):
class InstallWheelBuildError(DiagnosticPipError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\main.py
-----------------------------
>     """This is preserved for old console scripts that may still be referencing
      it.
  
      For additional details, see https://github.com/pypa/pip/issues/7498.
def main(args: list[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\pyproject.py
-----------------------------
>     """Load the pyproject.toml file.
  
      Parameters:
          use_pep517 - Has the user requested PEP 517 processing? None
def _is_list_of_str(obj: Any) -> bool:
def make_pyproject_path(unpacked_source_directory: str) -> str:
def load_pyproject_toml(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\self_outdated_check.py
-----------------------------
>     """Convert an ISO format string to a date.
  
      Handles the format 2020-01-22T14:24:01Z (trailing Z)
      which is not supported by older versions of fromisoformat.
def _get_statefile_name(key: str) -> str:
def _convert_date(isodate: str) -> datetime.datetime:
class SelfCheckState:
class UpgradePrompt:
def was_installed_by_pip(pkg: str) -> bool:
def _get_current_remote_pip_version(
def _self_version_check_logic(
def pip_self_version_check(session: PipSession, options: optparse.Values) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\wheel_builder.py
-----------------------------
> """Orchestrator for building wheels from InstallRequirements."""
  
  from __future__ import annotations
  
def _contains_egg_info(s: str) -> bool:
def _should_build(
def should_build_for_install_command(
def _should_cache(
def _get_cache_dir(
def _verify_one(req: InstallRequirement, wheel_path: str) -> None:
def _build_one(
def _build_one_inside_env(
def _clean_one_legacy(req: InstallRequirement, global_options: list[str]) -> bool:
def build(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_internal\__init__.py
-----------------------------
>     """This is preserved for old console scripts that may still be referencing
      it.
  
      For additional details, see https://github.com/pypa/pip/issues/7498.
def main(args: list[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\caches\file_cache.py
-----------------------------
>     """Shared implementation for both FileCache variants."""
  
      def __init__(
          self,
class _FileCacheMixin:
class FileCache(_FileCacheMixin, BaseCache):
class SeparateBodyFileCache(_FileCacheMixin, SeparateBodyBaseCache):
def url_to_file_path(url: str, filecache: FileCache) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\caches\redis_cache.py
-----------------------------
>         """Helper for clearing all the keys in a database. Use with
class RedisCache(BaseCache):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\caches\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\adapter.py
-----------------------------
>         """
          Send a request. Use the request information to see if it
          exists in the cache and cache the response if we need to and can.
class CacheControlAdapter(HTTPAdapter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\cache.py
-----------------------------
> """
  The cache object API for implementing caches. The default is a thread
  safe in-memory dictionary.
class BaseCache:
class DictCache(BaseCache):
class SeparateBodyBaseCache(BaseCache):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\controller.py
-----------------------------
> """
  The httplib2 algorithms ported for use with requests.
def parse_uri(uri: str) -> tuple[str, str, str, str, str]:
class CacheController:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\filewrapper.py
-----------------------------
>     """
      Small wrapper around a fp object which will tee everything read into a
      buffer, and when that file is closed it will execute a callback with the
      contents of that buffer.
class CallbackFileWrapper:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\heuristics.py
-----------------------------
>         """
          Return a valid 1xx warning header value describing the cache
          adjustments.
  
def expire_after(delta: timedelta, date: datetime | None = None) -> datetime:
def datetime_to_header(dt: datetime) -> str:
class BaseHeuristic:
class OneDayCache(BaseHeuristic):
class ExpiresAfter(BaseHeuristic):
class LastModified(BaseHeuristic):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\serialize.py
-----------------------------
>         """Verify our vary headers match and construct a real urllib3
          HTTPResponse object.
class Serializer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\wrapper.py
-----------------------------
def CacheControl(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py
-----------------------------
def setup_logging() -> None:
def get_session() -> requests.Session:
def get_args() -> Namespace:
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\cachecontrol\__init__.py
-----------------------------
> """CacheControl import Interface.
  
  Make it easy to import from cachecontrol without long namespaces.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\certifi\core.py
-----------------------------
> """
  certifi.py
  ~~~~~~~~~~
  
def exit_cacert_ctx() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\certifi\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\certifi\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\dependency_groups\_implementation.py
-----------------------------
>     """
      An error representing the detection of a cycle.
def _normalize_name(name: str) -> str:
def _normalize_group_names(
class DependencyGroupInclude:
class CyclicDependencyError(ValueError):
class DependencyGroupResolver:
def resolve(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\dependency_groups\_lint_dependency_groups.py
-----------------------------
def main(*, argv: list[str] | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\dependency_groups\_pip_wrapper.py
-----------------------------
def _invoke_pip(deps: list[str]) -> None:
def main(*, argv: list[str] | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\dependency_groups\_toml_compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\dependency_groups\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\dependency_groups\__main__.py
-----------------------------
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distlib\compat.py
-----------------------------
>     # """splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."""
      # global _userprog
      # if _userprog is None:
      # import re

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distlib\resources.py
-----------------------------
>         """
          Is the cache stale for the given resource?
  
          :param resource: The :class:`Resource` being cached.
class ResourceCache(Cache):
class ResourceBase(object):
class Resource(ResourceBase):
class ResourceContainer(ResourceBase):
class ResourceFinder(object):
class ZipResourceFinder(ResourceFinder):
def register_finder(loader, finder_maker):
def finder(package):
def finder_for_path(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distlib\scripts.py
-----------------------------
>     """
      A class to copy or create scripts from source scripts or callable
      specifications.
def enquote_executable(executable):
class ScriptMaker(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distlib\util.py
-----------------------------
>     """
      Parse a marker string and return a dictionary containing a marker expression.
  
      The dictionary will contain keys "op", "lhs" and "rhs" for non-terminals in
def parse_marker(marker_string):
def parse_requirement(req):
def get_resources_dests(resources_root, rules):
def in_venv():
def get_executable():
def proceed(prompt, allowed_chars, error_prompt=None, default=None):
def extract_by_key(d, keys):
def read_exports(stream):
def write_exports(exports, stream):
def tempdir():
def chdir(d):
def socket_timeout(seconds=15):
class cached_property(object):
def convert_path(pathname):
class FileOperator(object):
def resolve(module_name, dotted_path):
class ExportEntry(object):
def get_export_entry(specification):
def get_cache_base(suffix=None):
def path_to_cache_dir(path, use_abspath=True):
def ensure_slash(s):
def parse_credentials(netloc):
def get_process_umask():
def is_string_sequence(seq):
def split_filename(filename, project_name=None):
def parse_name_and_version(p):
def get_extras(requested, available):
def _get_external_data(url):
def get_project_data(name):
def get_package_data(name, version):
class Cache(object):
class EventMixin(object):
class Sequencer(object):
def unarchive(archive_filename, dest_dir, format=None, check=True):
def zip_dir(directory):
class Progress(object):
def iglob(path_glob):
def _iglob(path_glob):
class Transport(xmlrpclib.Transport):
class ServerProxy(xmlrpclib.ServerProxy):
def _csv_open(fn, mode, **kwargs):
class CSVBase(object):
class CSVReader(CSVBase):
class CSVWriter(CSVBase):
class Configurator(BaseConfigurator):
class SubprocessMixin(object):
def normalize_name(name):
class PyPIRCFile(object):
def _load_pypirc(index):
def _store_pypirc(index):
def get_host_platform():
def get_platform():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distlib\__init__.py
-----------------------------
class DistlibException(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distro\distro.py
-----------------------------
> """
  The ``distro`` package (``distro`` stands for Linux Distribution) provides
  information about the Linux distribution it runs on, such as a reliable
  machine-readable distro ID, or version information.
class VersionDict(TypedDict):
class InfoDict(TypedDict):
def linux_distribution(full_distribution_name: bool = True) -> Tuple[str, str, str]:
def id() -> str:
def name(pretty: bool = False) -> str:
def version(pretty: bool = False, best: bool = False) -> str:
def version_parts(best: bool = False) -> Tuple[str, str, str]:
def major_version(best: bool = False) -> str:
def minor_version(best: bool = False) -> str:
def build_number(best: bool = False) -> str:
def like() -> str:
def codename() -> str:
def info(pretty: bool = False, best: bool = False) -> InfoDict:
def os_release_info() -> Dict[str, str]:
def lsb_release_info() -> Dict[str, str]:
def distro_release_info() -> Dict[str, str]:
def uname_info() -> Dict[str, str]:
def os_release_attr(attribute: str) -> str:
def lsb_release_attr(attribute: str) -> str:
def distro_release_attr(attribute: str) -> str:
def uname_attr(attribute: str) -> str:
class LinuxDistribution:
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distro\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\distro\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\codec.py
-----------------------------
class Codec(codecs.Codec):
class IncrementalEncoder(codecs.BufferedIncrementalEncoder):
class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
class StreamWriter(Codec, codecs.StreamWriter):
class StreamReader(Codec, codecs.StreamReader):
def search_function(name: str) -> Optional[codecs.CodecInfo]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\compat.py
-----------------------------
def ToASCII(label: str) -> bytes:
def ToUnicode(label: Union[bytes, bytearray]) -> str:
def nameprep(s: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\core.py
-----------------------------
>     """Base exception for all IDNA-encoding related problems"""
  
      pass
  
class IDNAError(UnicodeError):
class IDNABidiError(IDNAError):
class InvalidCodepoint(IDNAError):
class InvalidCodepointContext(IDNAError):
def _combining_class(cp: int) -> int:
def _is_script(cp: str, script: str) -> bool:
def _punycode(s: str) -> bytes:
def _unot(s: int) -> str:
def valid_label_length(label: Union[bytes, str]) -> bool:
def valid_string_length(label: Union[bytes, str], trailing_dot: bool) -> bool:
def check_bidi(label: str, check_ltr: bool = False) -> bool:
def check_initial_combiner(label: str) -> bool:
def check_hyphen_ok(label: str) -> bool:
def check_nfc(label: str) -> None:
def valid_contextj(label: str, pos: int) -> bool:
def valid_contexto(label: str, pos: int, exception: bool = False) -> bool:
def check_label(label: Union[str, bytes, bytearray]) -> None:
def alabel(label: str) -> bytes:
def ulabel(label: Union[str, bytes, bytearray]) -> str:
def uts46_remap(domain: str, std3_rules: bool = True, transitional: bool = False) -> str:
def encode(
def decode(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\idnadata.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\intranges.py
-----------------------------
> """
  Given a list of integers, made up of (hopefully) a small number of long runs
  of consecutive integers, compute a representation of the form
  ((start1, end1), (start2, end2) ...). Then answer the question "was x present
def intranges_from_list(list_: List[int]) -> Tuple[int, ...]:
def _encode_range(start: int, end: int) -> int:
def _decode_range(r: int) -> Tuple[int, int]:
def intranges_contain(int_: int, ranges: Tuple[int, ...]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\package_data.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\uts46data.py
-----------------------------
> """IDNA Mapping Table from UTS46."""
  
  
  __version__ = "15.1.0"
def _seg_0() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_1() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_2() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_3() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_4() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_5() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_6() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_7() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_8() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_9() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_10() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_11() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_12() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_13() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_14() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_15() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_16() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_17() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_18() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_19() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_20() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_21() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_22() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_23() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_24() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_25() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_26() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_27() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_28() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_29() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_30() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_31() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_32() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_33() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_34() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_35() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_36() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_37() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_38() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_39() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_40() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_41() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_42() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_43() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_44() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_45() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_46() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_47() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_48() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_49() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_50() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_51() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_52() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_53() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_54() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_55() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_56() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_57() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_58() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_59() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_60() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_61() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_62() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_63() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_64() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_65() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_66() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_67() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_68() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_69() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_70() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_71() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_72() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_73() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_74() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_75() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_76() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_77() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_78() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_79() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_80() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:
def _seg_81() -> List[Union[Tuple[int, str], Tuple[int, str, str]]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\idna\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\msgpack\exceptions.py
-----------------------------
>     """Base class for some exceptions raised while unpacking.
  
      NOTE: unpack may raise exception other than subclass of
      UnpackException.  If you want to catch all error, catch
class UnpackException(Exception):
class BufferFull(UnpackException):
class OutOfData(UnpackException):
class FormatError(ValueError, UnpackException):
class StackError(ValueError, UnpackException):
class ExtraData(UnpackValueError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\msgpack\ext.py
-----------------------------
>     """ExtType represents ext type in msgpack."""
  
      def __new__(cls, code, data):
          if not isinstance(code, int):
class ExtType(namedtuple("ExtType", "code data")):
class Timestamp:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\msgpack\fallback.py
-----------------------------
> """Fallback pure Python implementation of msgpack"""
  
  import struct
  import sys
def _check_type_strict(obj, t, type=type, tuple=tuple):
def _get_data_from_buffer(obj):
def unpackb(packed, **kwargs):
class Unpacker:
class Packer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\msgpack\__init__.py
-----------------------------
>     """
      Pack object `o` and write it to `stream`
  
      See :class:`Packer` for options.
def pack(o, stream, **kwargs):
def packb(o, **kwargs):
def unpack(stream, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\licenses\_spdx.py
-----------------------------
class SPDXLicense(TypedDict):
class SPDXException(TypedDict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\licenses\__init__.py
-----------------------------
>     """Raised when a license-expression string is invalid
  
      >>> canonicalize_license_expression("invalid")
      Traceback (most recent call last):
class InvalidLicenseExpression(ValueError):
def canonicalize_license_expression(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Environment(TypedDict):
def _normalize_extra_values(results: Any) -> Any:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str | AbstractSet[str]) -> bool:
def _normalize(
def _evaluate_markers(
def format_full_version(info: sys._version_info) -> str:
def default_environment() -> Environment:
class Marker:
def _repair_python_full_version(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\metadata.py
-----------------------------
>         """A minimal implementation of :external:exc:`ExceptionGroup` from Python 3.11.
  
          If :external:exc:`ExceptionGroup` is already defined by Python itself,
          that version is used instead.
class InvalidMetadata(ValueError):
class RawMetadata(TypedDict, total=False):
def _parse_keywords(data: str) -> list[str]:
def _parse_project_urls(data: list[str]) -> dict[str, str]:
def _get_payload(msg: email.message.Message, source: bytes | str) -> str:
def parse_email(data: bytes | str) -> tuple[RawMetadata, dict[str, list[str]]]:
class _Validator(Generic[T]):
class Metadata:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\specifiers.py
-----------------------------
> """
  .. testsetup::
  
      from pip._vendor.packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier
def _coerce_version(version: UnparsedVersion) -> Version:
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class Specifier(BaseSpecifier):
def _version_split(version: str) -> list[str]:
def _version_join(components: list[str]) -> str:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: list[str], right: list[str]) -> tuple[list[str], list[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> frozenset[Tag]:
def _get_config_var(name: str, warn: bool = False) -> int | str | None:
def _normalize_string(string: str) -> str:
def _is_threaded_cpython(abis: list[str]) -> bool:
def _abi3_applies(python_version: PythonVersion, threading: bool) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> list[str]:
def cpython_tags(
def _generic_abi() -> list[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: AppleVersion, cpu_arch: str) -> list[str]:
def mac_platforms(
def ios_platforms(
def android_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\utils.py
-----------------------------
>     """
      An invalid distribution name; users should refer to the packaging user guide.
class InvalidName(ValueError):
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str, *, validate: bool = False) -> NormalizedName:
def is_normalized_name(name: str) -> bool:
def canonicalize_version(
def _(version: str, *, strip_trailing_zero: bool = True) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\version.py
-----------------------------
> """
  .. testsetup::
  
      from pip._vendor.packaging.version import parse, Version
class _Version(NamedTuple):
def parse(version: str) -> Version:
class InvalidVersion(ValueError):
class _BaseVersion:
class Version(_BaseVersion):
class _TrimmedRelease(Version):
def _parse_letter_version(
def _parse_local_version(local: str | None) -> LocalType | None:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\_elffile.py
-----------------------------
> """
  ELF file parser.
  
  This provides a class ``ELFFile`` that parses an ELF executable in a similar
class ELFInvalid(ValueError):
class EIClass(enum.IntEnum):
class EIData(enum.IntEnum):
class EMachine(enum.IntEnum):
class ELFFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\_manylinux.py
-----------------------------
>     """
      Primary implementation of glibc_version_string using os.confstr.
def _parse_elf(path: str) -> Generator[ELFFile | None, None, None]:
def _is_linux_armhf(executable: str) -> bool:
def _is_linux_i686(executable: str) -> bool:
def _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> str | None:
def _glibc_version_string_ctypes() -> str | None:
def _glibc_version_string() -> str | None:
def _parse_glibc_version(version_str: str) -> tuple[int, int]:
def _get_glibc_version() -> tuple[int, int]:
def _is_compatible(arch: str, version: _GLibCVersion) -> bool:
def platform_tags(archs: Sequence[str]) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> _MuslVersion | None:
def _get_musl_version(executable: str) -> _MuslVersion | None:
def platform_tags(archs: Sequence[str]) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\_parser.py
-----------------------------
> """Handwritten parser of dependency specifiers.
  
  The docstring for each __parse_* function contains EBNF-inspired grammar representing
  the implementation.
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
class ParsedRequirement(NamedTuple):
def parse_requirement(source: str) -> ParsedRequirement:
def _parse_requirement(tokenizer: Tokenizer) -> ParsedRequirement:
def _parse_requirement_details(
def _parse_requirement_marker(
def _parse_extras(tokenizer: Tokenizer) -> list[str]:
def _parse_extras_list(tokenizer: Tokenizer) -> list[str]:
def _parse_specifier(tokenizer: Tokenizer) -> str:
def _parse_version_many(tokenizer: Tokenizer) -> str:
def parse_marker(source: str) -> MarkerList:
def _parse_full_marker(tokenizer: Tokenizer) -> MarkerList:
def _parse_marker(tokenizer: Tokenizer) -> MarkerList:
def _parse_marker_atom(tokenizer: Tokenizer) -> MarkerAtom:
def _parse_marker_item(tokenizer: Tokenizer) -> MarkerItem:
def _parse_marker_var(tokenizer: Tokenizer) -> MarkerVar:
def process_env_var(env_var: str) -> Variable:
def process_python_str(python_str: str) -> Value:
def _parse_marker_op(tokenizer: Tokenizer) -> Op:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\_tokenizer.py
-----------------------------
>     """The provided source text could not be parsed correctly."""
  
      def __init__(
          self,
class Token:
class ParserSyntaxError(Exception):
class Tokenizer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py
-----------------------------
> """
  Package resource API
  --------------------
  
class _LoaderProtocol(Protocol):
class _ZipLoaderModule(Protocol):
class PEP440Warning(RuntimeWarning):
def _declare_state(vartype: str, varname: str, initial_value: _T) -> _T:
def __getstate__() -> dict[str, Any]:
def __setstate__(state: dict[str, Any]) -> dict[str, Any]:
def _sget_dict(val):
def _sset_dict(key, ob, state):
def _sget_object(val):
def _sset_object(key, ob, state):
def get_supported_platform():
class ResolutionError(Exception):
class VersionConflict(ResolutionError):
class ContextualVersionConflict(VersionConflict):
class DistributionNotFound(ResolutionError):
class UnknownExtra(ResolutionError):
def register_loader_type(
def get_provider(moduleOrReq: str) -> IResourceProvider: ...
def get_provider(moduleOrReq: Requirement) -> Distribution: ...
def get_provider(moduleOrReq: str | Requirement) -> IResourceProvider | Distribution:
def _macos_vers():
def _macos_arch(machine):
def get_build_platform():
def compatible_platforms(provided: str | None, required: str | None):
def get_distribution(dist: _DistributionT) -> _DistributionT: ...
def get_distribution(dist: _PkgReqType) -> Distribution: ...
def get_distribution(dist: Distribution | _PkgReqType) -> Distribution:
def load_entry_point(dist: _EPDistType, group: str, name: str) -> _ResolvedEntryPoint:
def get_entry_map(
def get_entry_map(dist: _EPDistType, group: str) -> dict[str, EntryPoint]: ...
def get_entry_map(dist: _EPDistType, group: str | None = None):
def get_entry_info(dist: _EPDistType, group: str, name: str):
class IMetadataProvider(Protocol):
class IResourceProvider(IMetadataProvider, Protocol):
class WorkingSet:
class _ReqExtras(Dict["Requirement", Tuple[str, ...]]):
class Environment:
class ExtractionError(RuntimeError):
class ResourceManager:
def get_default_cache() -> str:
def safe_name(name: str):
def safe_version(version: str):
def _forgiving_version(version):
def _safe_segment(segment):
def safe_extra(extra: str):
def to_filename(name: str):
def invalid_marker(text: str):
def evaluate_marker(text: str, extra: str | None = None) -> bool:
class NullProvider:
def _parents(path):
class EggProvider(NullProvider):
class DefaultProvider(EggProvider):
class EmptyProvider(NullProvider):
class ZipManifests(Dict[str, "MemoizedZipManifests.manifest_mod"]):
class MemoizedZipManifests(ZipManifests):
class ZipProvider(EggProvider):
class FileMetadata(EmptyProvider):
class PathMetadata(DefaultProvider):
class EggMetadata(ZipProvider):
def register_finder(importer_type: type[_T], distribution_finder: _DistFinderType[_T]):
def find_distributions(path_item: str, only: bool = False):
def find_eggs_in_zip(
def find_nothing(
def find_on_path(importer: object | None, path_item, only=False):
def dist_factory(path_item, entry, only):
class NoDists:
def safe_listdir(path: StrOrBytesPath):
def distributions_from_metadata(path: str):
def non_empty_lines(path):
def resolve_egg_link(path):
def register_namespace_handler(
def _handle_ns(packageName, path_item):
def _rebuild_mod_path(orig_path, package_name, module: types.ModuleType):
def declare_namespace(packageName: str):
def fixup_namespace_packages(path_item: str, parent: str | None = None):
def file_ns_handler(
def null_ns_handler(
def normalize_path(filename: StrPath) -> str: ...
def normalize_path(filename: BytesPath) -> bytes: ...
def normalize_path(filename: StrOrBytesPath):
def _cygwin_patch(filename: StrOrBytesPath):  # pragma: nocover
def _is_egg_path(path):
def _is_zip_egg(path):
def _is_unpacked_egg(path):
def _set_parent_ns(packageName):
class EntryPoint:
def _version_from_file(lines):
class Distribution:
class EggInfoDistribution(Distribution):
class DistInfoDistribution(Distribution):
def issue_warning(*args, **kw):
def parse_requirements(strs: _NestedStr):
class RequirementParseError(_packaging_requirements.InvalidRequirement):
class Requirement(_packaging_requirements.Requirement):
def _always_object(classes):
def _find_adapter(registry: Mapping[type, _AdapterT], ob: object) -> _AdapterT:
def ensure_directory(path: StrOrBytesPath):
def _bypass_ensure_directory(path):
def split_sections(s: _NestedStr) -> Iterator[tuple[str | None, list[str]]]:
def _mkstemp(*args, **kw):
class PkgResourcesDeprecationWarning(Warning):
def _read_utf8_with_fallback(file: str, fallback_encoding=_LOCALE_ENCODING) -> str:
def _call_aside(f, *args, **kwargs):
def _initialize(g=globals()):
def _initialize_master_working_set():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\android.py
-----------------------------
> """Android."""
  
  from __future__ import annotations
  
class Android(PlatformDirsABC):
def _android_folder() -> str | None:  # noqa: C901
def _android_documents_folder() -> str:
def _android_downloads_folder() -> str:
def _android_pictures_folder() -> str:
def _android_videos_folder() -> str:
def _android_music_folder() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\api.py
-----------------------------
> """Base API."""
  
  from __future__ import annotations
  
class PlatformDirsABC(ABC):  # noqa: PLR0904

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\macos.py
-----------------------------
> """macOS."""
  
  from __future__ import annotations
  
class MacOS(PlatformDirsABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\unix.py
-----------------------------
> """Unix."""
  
  from __future__ import annotations
  
class Unix(PlatformDirsABC):  # noqa: PLR0904
def _get_user_media_dir(env_var: str, fallback_tilde_path: str) -> str:
def _get_user_dirs_folder(key: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\windows.py
-----------------------------
> """Windows."""
  
  from __future__ import annotations
  
class Windows(PlatformDirsABC):
def get_win_folder_from_env_vars(csidl_name: str) -> str:
def get_win_folder_if_csidl_name_not_env_var(csidl_name: str) -> str | None:
def get_win_folder_from_registry(csidl_name: str) -> str:
def get_win_folder_via_ctypes(csidl_name: str) -> str:
def _pick_get_win_folder() -> Callable[[str], str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\__init__.py
-----------------------------
> """
  Utilities for determining application-specific dirs.
  
  See <https://github.com/platformdirs/platformdirs> for details and usage.
def _set_platform_dir_class() -> type[PlatformDirsABC]:
def user_data_dir(
def site_data_dir(
def user_config_dir(
def site_config_dir(
def user_cache_dir(
def site_cache_dir(
def user_state_dir(
def user_log_dir(
def user_documents_dir() -> str:
def user_downloads_dir() -> str:
def user_pictures_dir() -> str:
def user_videos_dir() -> str:
def user_music_dir() -> str:
def user_desktop_dir() -> str:
def user_runtime_dir(
def site_runtime_dir(
def user_data_path(
def site_data_path(
def user_config_path(
def site_config_path(
def site_cache_path(
def user_cache_path(
def user_state_path(
def user_log_path(
def user_documents_path() -> Path:
def user_downloads_path() -> Path:
def user_pictures_path() -> Path:
def user_videos_path() -> Path:
def user_music_path() -> Path:
def user_desktop_path() -> Path:
def user_runtime_path(
def site_runtime_path(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\platformdirs\__main__.py
-----------------------------
> """Main entry point."""
  
  from __future__ import annotations
  
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\filters\__init__.py
-----------------------------
> """
      pygments.filters
      ~~~~~~~~~~~~~~~~
  
def find_filter_class(filtername):
def get_filter_by_name(filtername, **options):
def get_all_filters():
def _replace_special(ttype, value, regex, specialttype,
class CodeTagFilter(Filter):
class SymbolFilter(Filter):
class KeywordCaseFilter(Filter):
class NameHighlightFilter(Filter):
class ErrorToken(Exception):
class RaiseOnErrorTokenFilter(Filter):
class VisibleWhitespaceFilter(Filter):
class GobbleFilter(Filter):
class TokenMergeFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\formatters\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\formatters\__init__.py
-----------------------------
> """
      pygments.formatters
      ~~~~~~~~~~~~~~~~~~~
  
def _fn_matches(fn, glob):
def _load_formatters(module_name):
def get_all_formatters():
def find_formatter_class(alias):
def get_formatter_by_name(_alias, **options):
def load_formatter_from_file(filename, formattername="CustomFormatter", **options):
def get_formatter_for_filename(fn, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\lexers\python.py
-----------------------------
> """
      pygments.lexers.python
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PythonLexer(RegexLexer):
class Python2Lexer(RegexLexer):
class _PythonConsoleLexerBase(RegexLexer):
class PythonConsoleLexer(DelegatingLexer):
class PythonTracebackLexer(RegexLexer):
class Python2TracebackLexer(RegexLexer):
class CythonLexer(RegexLexer):
class DgLexer(RegexLexer):
class NumPyLexer(PythonLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\lexers\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\lexers\__init__.py
-----------------------------
> """
      pygments.lexers
      ~~~~~~~~~~~~~~~
  
def _fn_matches(fn, glob):
def _load_lexers(module_name):
def get_all_lexers(plugins=True):
def find_lexer_class(name):
def find_lexer_class_by_name(_alias):
def get_lexer_by_name(_alias, **options):
def load_lexer_from_file(filename, lexername="CustomLexer", **options):
def find_lexer_class_for_filename(_fn, code=None):
def get_lexer_for_filename(_fn, code=None, **options):
def get_lexer_for_mimetype(_mime, **options):
def _iter_lexerclasses(plugins=True):
def guess_lexer_for_filename(_fn, _text, **options):
def guess_lexer(_text, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\styles\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\styles\__init__.py
-----------------------------
> """
      pygments.styles
      ~~~~~~~~~~~~~~~
  
def get_style_by_name(name):
def get_all_styles():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\console.py
-----------------------------
> """
      pygments.console
      ~~~~~~~~~~~~~~~~
  
def reset_color():
def colorize(color_key, text):
def ansiformat(attr, text):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\filter.py
-----------------------------
> """
      pygments.filter
      ~~~~~~~~~~~~~~~
  
def apply_filters(stream, filters, lexer=None):
def simplefilter(f):
class Filter:
class FunctionFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\formatter.py
-----------------------------
> """
      pygments.formatter
      ~~~~~~~~~~~~~~~~~~
  
def _lookup_style(style):
class Formatter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\lexer.py
-----------------------------
> """
      pygments.lexer
      ~~~~~~~~~~~~~~
  
class LexerMeta(type):
class Lexer(metaclass=LexerMeta):
class DelegatingLexer(Lexer):
class include(str):  # pylint: disable=invalid-name
class _inherit:
class combined(tuple):  # pylint: disable=invalid-name
class _PseudoMatch:
def bygroups(*args):
class _This:
def using(_other, **kwargs):
class default:
class words(Future):
class RegexLexerMeta(LexerMeta):
class RegexLexer(Lexer, metaclass=RegexLexerMeta):
class LexerContext:
class ExtendedRegexLexer(RegexLexer):
def do_insertions(insertions, tokens):
class ProfilingRegexLexerMeta(RegexLexerMeta):
class ProfilingRegexLexer(RegexLexer, metaclass=ProfilingRegexLexerMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\modeline.py
-----------------------------
> """
      pygments.modeline
      ~~~~~~~~~~~~~~~~~
  
def get_filetype_from_line(l): # noqa: E741
def get_filetype_from_buffer(buf, max_lines=5):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\plugin.py
-----------------------------
> """
      pygments.plugin
      ~~~~~~~~~~~~~~~
  
def iter_entry_points(group_name):
def find_plugin_lexers():
def find_plugin_formatters():
def find_plugin_styles():
def find_plugin_filters():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\regexopt.py
-----------------------------
> """
      pygments.regexopt
      ~~~~~~~~~~~~~~~~~
  
def make_charset(letters):
def regex_opt_inner(strings, open_paren):
def regex_opt(strings, prefix='', suffix=''):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\scanner.py
-----------------------------
> """
      pygments.scanner
      ~~~~~~~~~~~~~~~~
  
class EndOfText(RuntimeError):
class Scanner:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\sphinxext.py
-----------------------------
> """
      pygments.sphinxext
      ~~~~~~~~~~~~~~~~~~
  
class PygmentsDoc(Directive):
def setup(app):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\style.py
-----------------------------
> """
      pygments.style
      ~~~~~~~~~~~~~~
  
class StyleMeta(type):
class Style(metaclass=StyleMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\token.py
-----------------------------
> """
      pygments.token
      ~~~~~~~~~~~~~~
  
class _TokenType(tuple):
def is_token_subtype(ttype, other):
def string_to_tokentype(s):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\unistring.py
-----------------------------
> """
      pygments.unistring
      ~~~~~~~~~~~~~~~~~~
  
def combine(*args):
def allexcept(*args):
def _handle_runs(char_list):  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\util.py
-----------------------------
> """
      pygments.util
      ~~~~~~~~~~~~~
  
class ClassNotFound(ValueError):
class OptionError(Exception):
def get_choice_opt(options, optname, allowed, default=None, normcase=False):
def get_bool_opt(options, optname, default=None):
def get_int_opt(options, optname, default=None):
def get_list_opt(options, optname, default=None):
def docstring_headline(obj):
def make_analysator(f):
def shebang_matches(text, regex):
def doctype_matches(text, regex):
def html_doctype_matches(text):
def looks_like_xml(text):
def surrogatepair(c):
def format_lines(var_name, seq, raw=False, indent_level=0):
def duplicates_removed(it, already_seen=()):
class Future:
def guess_decode(text):
def guess_decode_from_terminal(text, term):
def terminal_encoding(term):
class UnclosingTextIOWrapper(TextIOWrapper):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\__init__.py
-----------------------------
> """
      Pygments
      ~~~~~~~~
  
def lex(code, lexer):
def format(tokens, formatter, outfile=None):  # pylint: disable=redefined-builtin
def highlight(code, lexer, formatter, outfile=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pygments\__main__.py
-----------------------------
> """
      pygments.__main__
      ~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\_in_process.py
-----------------------------
> """This is invoked in a subprocess to call the build backend hooks.
  
  It expects:
  - Command line args: hook_name, control_dir
def write_json(obj, path, **kwargs):
def read_json(path):
class BackendUnavailable(Exception):
class HookMissing(Exception):
def _build_backend():
class _BackendPathFinder:
def _supported_features():
def get_requires_for_build_wheel(config_settings):
def get_requires_for_build_editable(config_settings):
def prepare_metadata_for_build_wheel(
def prepare_metadata_for_build_editable(
def _dist_info_files(whl_zip):
def _get_wheel_metadata_from_wheel(whl_basename, metadata_directory, config_settings):
def _find_already_built_wheel(metadata_directory):
def build_wheel(wheel_directory, config_settings, metadata_directory=None):
def build_editable(wheel_directory, config_settings, metadata_directory=None):
def get_requires_for_build_sdist(config_settings):
class _DummyException(Exception):
class GotUnsupportedOperation(Exception):
def build_sdist(sdist_directory, config_settings):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\__init__.py
-----------------------------
> """This is a subpackage because the directory is on sys.path for _in_process.py
  
  The subpackage should stay as empty as possible to avoid shadowing modules that
  the backend might import.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_impl.py
-----------------------------
>         """A protocol for the subprocess runner."""
  
          def __call__(
              self,
def write_json(obj: Mapping[str, Any], path: str, **kwargs) -> None:
def read_json(path: str) -> Mapping[str, Any]:
class BackendUnavailable(Exception):
class HookMissing(Exception):
class UnsupportedOperation(Exception):
def default_subprocess_runner(
def quiet_subprocess_runner(
def norm_and_check(source_tree: str, requested: str) -> str:
class BuildBackendHookCaller:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\pyproject_hooks\__init__.py
-----------------------------
> """Wrappers to call pyproject.toml-based build backend hooks.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\adapters.py
-----------------------------
> """
  requests.adapters
  ~~~~~~~~~~~~~~~~~
  
def _urllib3_request_context(
class BaseAdapter:
class HTTPAdapter(BaseAdapter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\api.py
-----------------------------
> """
  requests.api
  ~~~~~~~~~~~~
  
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\auth.py
-----------------------------
> """
  requests.auth
  ~~~~~~~~~~~~~
  
def _basic_auth_str(username, password):
class AuthBase:
class HTTPBasicAuth(AuthBase):
class HTTPProxyAuth(HTTPBasicAuth):
class HTTPDigestAuth(AuthBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\certs.py
-----------------------------
> """
  requests.certs
  ~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\compat.py
-----------------------------
> """
  requests.compat
  ~~~~~~~~~~~~~~~
  
def _resolve_char_detection():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\cookies.py
-----------------------------
> """
  requests.cookies
  ~~~~~~~~~~~~~~~~
  
class MockRequest:
class MockResponse:
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
class CookieConflictError(RuntimeError):
class RequestsCookieJar(cookielib.CookieJar, MutableMapping):
def _copy_cookie_jar(jar):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\exceptions.py
-----------------------------
> """
  requests.exceptions
  ~~~~~~~~~~~~~~~~~~~
  
class RequestException(IOError):
class InvalidJSONError(RequestException):
class JSONDecodeError(InvalidJSONError, CompatJSONDecodeError):
class HTTPError(RequestException):
class ConnectionError(RequestException):
class ProxyError(ConnectionError):
class SSLError(ConnectionError):
class Timeout(RequestException):
class ConnectTimeout(ConnectionError, Timeout):
class ReadTimeout(Timeout):
class URLRequired(RequestException):
class TooManyRedirects(RequestException):
class MissingSchema(RequestException, ValueError):
class InvalidSchema(RequestException, ValueError):
class InvalidURL(RequestException, ValueError):
class InvalidHeader(RequestException, ValueError):
class InvalidProxyURL(InvalidURL):
class ChunkedEncodingError(RequestException):
class ContentDecodingError(RequestException, BaseHTTPError):
class StreamConsumedError(RequestException, TypeError):
class RetryError(RequestException):
class UnrewindableBodyError(RequestException):
class RequestsWarning(Warning):
class FileModeWarning(RequestsWarning, DeprecationWarning):
class RequestsDependencyWarning(RequestsWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\help.py
-----------------------------
> """Module containing bug report helper(s)."""
  
  import json
  import platform
def _implementation():
def info():
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\hooks.py
-----------------------------
> """
  requests.hooks
  ~~~~~~~~~~~~~~
  
def default_hooks():
def dispatch_hook(key, hooks, hook_data, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\models.py
-----------------------------
> """
  requests.models
  ~~~~~~~~~~~~~~~
  
class RequestEncodingMixin:
class RequestHooksMixin:
class Request(RequestHooksMixin):
class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
class Response:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\packages.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\sessions.py
-----------------------------
> """
  requests.sessions
  ~~~~~~~~~~~~~~~~~
  
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
class SessionRedirectMixin:
class Session(SessionRedirectMixin):
def session():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\status_codes.py
-----------------------------
> r"""
  The ``codes`` object defines a mapping from common names for HTTP statuses
  to their numerical codes, accessible either as attributes or as dictionary
  items.
def _init():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\structures.py
-----------------------------
> """
  requests.structures
  ~~~~~~~~~~~~~~~~~~~
  
class CaseInsensitiveDict(MutableMapping):
class LookupDict(dict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\utils.py
-----------------------------
> """
  requests.utils
  ~~~~~~~~~~~~~~
  
def dict_to_sequence(d):
def super_len(o):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def extract_zipped_paths(path):
def atomic_open(filename):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def _parse_content_type_header(header):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_ipv4_address(string_ip):
def is_valid_cidr(string_network):
def set_environ(env_name, value):
def should_bypass_proxies(url, no_proxy):
def get_environ_proxies(url, no_proxy=None):
def select_proxy(url, proxies):
def resolve_proxies(request, proxies, trust_env=True):
def default_user_agent(name="python-requests"):
def default_headers():
def parse_header_links(value):
def guess_json_utf(data):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def check_header_validity(header):
def _validate_header_part(header, header_part, header_validator_index):
def urldefragauth(url):
def rewind_body(prepared_request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\_internal_utils.py
-----------------------------
> """
  requests._internal_utils
  ~~~~~~~~~~~~~~
  
def to_native_string(string, encoding="ascii"):
def unicode_is_ascii(u_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\__init__.py
-----------------------------
> """
  Requests HTTP Library
  ~~~~~~~~~~~~~~~~~~~~~
  
def check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):
def _check_cryptography(cryptography_version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\requests\__version__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\resolvers\abstract.py
-----------------------------
>     """The thing that performs the actual resolution work."""
  
      base_exception = Exception
  
class AbstractResolver(Generic[RT, CT, KT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\resolvers\criterion.py
-----------------------------
>     """Representation of possible resolution results of a package.
  
      This holds three attributes:
  
class Criterion(Generic[RT, CT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\resolvers\exceptions.py
-----------------------------
>     """A base class for all exceptions raised by this module.
  
      Exceptions derived by this class should all be handled in this module. Any
      bubbling pass the resolver should be treated as a bug.
class ResolverException(Exception):
class RequirementsConflicted(ResolverException, Generic[RT, CT]):
class InconsistentCandidate(ResolverException, Generic[RT, CT]):
class ResolutionError(ResolverException):
class ResolutionImpossible(ResolutionError, Generic[RT, CT]):
class ResolutionTooDeep(ResolutionError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\resolvers\resolution.py
-----------------------------
>     """Stateful resolution object.
  
      This is designed as a one-off object that holds information to kick start
      the resolution process, and holds the results afterwards.
def _build_result(state: State[RT, CT, KT]) -> Result[RT, CT, KT]:
class Resolution(Generic[RT, CT, KT]):
class Resolver(AbstractResolver[RT, CT, KT]):
def _has_route_to_root(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\resolvers\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\providers.py
-----------------------------
>     """Delegate class to provide the required interface for the resolver."""
  
      def identify(self, requirement_or_candidate: RT | CT) -> KT:
class AbstractProvider(Generic[RT, CT, KT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\reporters.py
-----------------------------
>     """Delegate class to provide progress reporting for the resolver."""
  
      def starting(self) -> None:
class BaseReporter(Generic[RT, CT, KT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\structs.py
-----------------------------
>         """Resolution state in a round."""
  
          mapping: dict[KT, CT]
          criteria: dict[KT, Criterion[RT, CT]]
class DirectedGraph(Generic[KT]):
class IteratorMapping(Mapping[KT, Iterator[CT]], Generic[RT, CT, KT]):
class _FactoryIterableView(Iterable[RT]):
class _SequenceIterableView(Iterable[RT]):
def build_iter_view(matches: Matches[CT]) -> Iterable[CT]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\resolvelib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\abc.py
-----------------------------
>     """An abstract base class for Rich renderables.
  
      Note that there is no need to extend this class, the intended use is to check if an
      object supports the Rich renderable protocol. For example::
class RichRenderable(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\align.py
-----------------------------
>     """Align a renderable by adding spaces if necessary.
  
      Args:
          renderable (RenderableType): A console renderable.
class Align(JupyterMixin):
class VerticalCenter(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\ansi.py
-----------------------------
>     r"""
  (?:\x1b[0-?])|
  (?:\x1b\](.*?)\x1b\\)|
  (?:\x1b([(@-Z\\-_]|\[[0-?]*[ -/]*[@-~]))
class _AnsiToken(NamedTuple):
def _ansi_tokenize(ansi_text: str) -> Iterable[_AnsiToken]:
class AnsiDecoder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\bar.py
-----------------------------
>     """Renders a solid block bar.
  
      Args:
          size (float): Value for the end of the bar.
class Bar(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\box.py
-----------------------------
>     """Defines characters to render boxes.
  
      â”Œâ”€â”¬â” top
      â”‚ â”‚â”‚ head
class Box:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\cells.py
-----------------------------
>     """Get the number of cells required to display text.
  
      This method always caches, which may use up a lot of memory. It is recommended to use
      `cell_len` over this method.
def cached_cell_len(text: str) -> int:
def cell_len(text: str, _cell_len: Callable[[str], int] = cached_cell_len) -> int:
def get_character_cell_size(character: str) -> int:
def set_cell_size(text: str, total: int) -> str:
def chop_cells(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\color.py
-----------------------------
>     """One of the 3 color system supported by terminals."""
  
      STANDARD = 1
      EIGHT_BIT = 2
class ColorSystem(IntEnum):
class ColorType(IntEnum):
class ColorParseError(Exception):
class Color(NamedTuple):
def parse_rgb_hex(hex_color: str) -> ColorTriplet:
def blend_rgb(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\color_triplet.py
-----------------------------
>     """The red, green, and blue components of a color."""
  
      red: int
class ColorTriplet(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\columns.py
-----------------------------
>     """Display renderables in neat columns.
  
      Args:
          renderables (Iterable[RenderableType]): Any number of Rich renderables (including 
str).
class Columns(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\console.py
-----------------------------
>     """Size of the terminal."""
  
      width: int
class NoChange:
class ConsoleDimensions(NamedTuple):
class ConsoleOptions:
class RichCast(Protocol):
class ConsoleRenderable(Protocol):
class CaptureError(Exception):
class NewLine:
class ScreenUpdate:
class Capture:
class ThemeContext:
class PagerContext:
class ScreenContext:
class Group:
def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:
def _is_jupyter() -> bool:  # pragma: no cover
class ConsoleThreadLocals(threading.local):
class RenderHook(ABC):
def get_windows_console_features() -> "WindowsConsoleFeatures":  # pragma: no cover
def detect_legacy_windows() -> bool:
class Console:
def _svg_hash(svg_main_code: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\constrain.py
-----------------------------
>     """Constrain the width of a renderable to a given number of characters.
  
      Args:
          renderable (RenderableType): A renderable object.
class Constrain(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\containers.py
-----------------------------
>     """A list subclass which renders its contents to the console."""
  
      def __init__(
          self, renderables: Optional[Iterable["RenderableType"]] = None
class Renderables:
class Lines:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\control.py
-----------------------------
>     """A renderable that inserts a control code (non printable but may move cursor).
  
      Args:
          *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` 
enum or a
class Control:
def strip_control_codes(
def escape_control_codes(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\default_styles.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\diagnose.py
-----------------------------
>     """Print a report to the terminal with debugging information"""
      console = Console()
      inspect(console)
      features = get_windows_console_features()
def report() -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\emoji.py
-----------------------------
>     """No emoji by that name."""
  
  
  class Emoji(JupyterMixin):
class NoEmoji(Exception):
class Emoji(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\errors.py
-----------------------------
>     """An error in console operation."""
  
  
  class StyleError(Exception):
class ConsoleError(Exception):
class StyleError(Exception):
class StyleSyntaxError(ConsoleError):
class MissingStyle(StyleError):
class StyleStackError(ConsoleError):
class NotRenderableError(ConsoleError):
class MarkupError(ConsoleError):
class LiveError(ConsoleError):
class NoAltScreen(ConsoleError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\filesize.py
-----------------------------
> """Functions for reporting filesizes. Borrowed from 
https://github.com/PyFilesystem/pyfilesystem2
  
  The functions declared in this module should cover the different
  use cases needed to generate a string representation of a file size
def _to_str(
def pick_unit_and_suffix(size: int, suffixes: List[str], base: int) -> Tuple[int, str]:
def decimal(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\file_proxy.py
-----------------------------
>     """Wraps a file (e.g. sys.stdout) and redirects writes to a console."""
  
      def __init__(self, console: "Console", file: IO[str]) -> None:
          self.__console = console
class FileProxy(io.TextIOBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\highlighter.py
-----------------------------
>     """Combine a number of regexes in to a single regex.
  
      Returns:
          str: New regex with all regexes ORed together.
def _combine_regex(*regexes: str) -> str:
class Highlighter(ABC):
class NullHighlighter(Highlighter):
class RegexHighlighter(Highlighter):
class ReprHighlighter(RegexHighlighter):
class JSONHighlighter(RegexHighlighter):
class ISO8601Highlighter(RegexHighlighter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\json.py
-----------------------------
>     """A renderable which pretty prints JSON.
  
      Args:
          json (str): JSON encoded data.
class JSON:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\jupyter.py
-----------------------------
> JUPYTER_HTML_FORMAT = """\
  <pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu 
Sans Mono',consolas,'Courier New',monospace">{code}</pre>
class JupyterRenderable:
class JupyterMixin:
def _render_segments(segments: Iterable[Segment]) -> str:
def display(segments: Iterable[Segment], text: str) -> None:
def print(*args: Any, **kwargs: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\layout.py
-----------------------------
>     """An individual layout render."""
  
      region: Region
      render: List[List[Segment]]
class LayoutRender(NamedTuple):
class LayoutError(Exception):
class NoSplitter(LayoutError):
class _Placeholder:
class Splitter(ABC):
class RowSplitter(Splitter):
class ColumnSplitter(Splitter):
class Layout:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\live.py
-----------------------------
>     """A thread that calls refresh() at regular intervals."""
  
      def __init__(self, live: "Live", refresh_per_second: float) -> None:
          self.live = live
class _RefreshThread(Thread):
class Live(JupyterMixin, RenderHook):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\live_render.py
-----------------------------
>     """Creates a renderable that may be updated.
  
      Args:
          renderable (RenderableType): Any renderable object.
class LiveRender:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\logging.py
-----------------------------
>     """A logging handler that renders output with Rich. The time / level / message and file 
are displayed in columns.
      The level is color coded, and the message is syntax highlighted.
  
      Note:
class RichHandler(Handler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\markup.py
-----------------------------
>     r"""((\\*)\[([a-z#/@][^[]*?)])""",
      re.VERBOSE,
  )
  
class Tag(NamedTuple):
def escape(
def _parse(markup: str) -> Iterable[Tuple[int, Optional[str], Optional[Tag]]]:
def render(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\measure.py
-----------------------------
>     """Stores the minimum and maximum widths (in characters) required to render an 
object."""
  
      minimum: int
class Measurement(NamedTuple):
def measure_renderables(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\padding.py
-----------------------------
>     """Draw space around content.
  
      Example:
          >>> print(Padding("Hello", (2, 4), style="on blue"))
class Padding(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\pager.py
-----------------------------
>     """Base class for a pager."""
  
      @abstractmethod
      def show(self, content: str) -> None:
class Pager(ABC):
class SystemPager(Pager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\palette.py
-----------------------------
>     """A palette of available colors."""
  
      def __init__(self, colors: Sequence[Tuple[int, int, int]]):
          self._colors = colors
class Palette:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\panel.py
-----------------------------
>     """A console renderable that draws a border around its contents.
  
      Example:
          >>> console.print(Panel("Hello, World!"))
class Panel(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\pretty.py
-----------------------------
>     """Check if an object was created with attrs module."""
      return _has_attrs and _attr_module.has(type(obj))
  
  
def _is_attr_object(obj: Any) -> bool:
def _get_attr_fields(obj: Any) -> Sequence["_attr_module.Attribute[Any]"]:
def _is_dataclass_repr(obj: object) -> bool:
def _has_default_namedtuple_repr(obj: object) -> bool:
def _ipy_display_hook(
def _safe_isinstance(
def install(
class Pretty(JupyterMixin):
def _get_braces_for_defaultdict(_object: DefaultDict[Any, Any]) -> Tuple[str, str, str]:
def _get_braces_for_deque(_object: Deque[Any]) -> Tuple[str, str, str]:
def _get_braces_for_array(_object: "array[Any]") -> Tuple[str, str, str]:
def is_expandable(obj: Any) -> bool:
class Node:
class _Line:
def _is_namedtuple(obj: Any) -> bool:
def traverse(
def pretty_repr(
def pprint(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\progress.py
-----------------------------
>     """A thread to periodically update progress."""
  
      def __init__(self, progress: "Progress", task_id: "TaskID", update_period: float):
          self.progress = progress
class _TrackThread(Thread):
def track(
class _Reader(RawIOBase, BinaryIO):
class _ReadContext(ContextManager[_I], Generic[_I]):
def wrap_file(
def open(
def open(
def open(
class ProgressColumn(ABC):
class RenderableColumn(ProgressColumn):
class SpinnerColumn(ProgressColumn):
class TextColumn(ProgressColumn):
class BarColumn(ProgressColumn):
class TimeElapsedColumn(ProgressColumn):
class TaskProgressColumn(TextColumn):
class TimeRemainingColumn(ProgressColumn):
class FileSizeColumn(ProgressColumn):
class TotalFileSizeColumn(ProgressColumn):
class MofNCompleteColumn(ProgressColumn):
class DownloadColumn(ProgressColumn):
class TransferSpeedColumn(ProgressColumn):
class ProgressSample(NamedTuple):
class Task:
class Progress(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\progress_bar.py
-----------------------------
>     """Renders a (progress) bar. Used by rich.progress.
  
      Args:
          total (float, optional): Number of steps in the bar. Defaults to 100. Set to None 
to render a pulsing animation.
class ProgressBar(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\prompt.py
-----------------------------
>     """Exception base class for prompt related errors."""
  
  
  class InvalidResponse(PromptError):
class PromptError(Exception):
class InvalidResponse(PromptError):
class PromptBase(Generic[PromptType]):
class Prompt(PromptBase[str]):
class IntPrompt(PromptBase[int]):
class FloatPrompt(PromptBase[float]):
class Confirm(PromptBase[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\protocol.py
-----------------------------
> _GIBBERISH = """aihwerij235234ljsdnp34ksodfipwoe234234jlskjdf"""
  
  
  def is_renderable(check_object: Any) -> bool:
def is_renderable(check_object: Any) -> bool:
def rich_cast(renderable: object) -> "RenderableType":

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\region.py
-----------------------------
>     """Defines a rectangular region of the screen."""
  
      x: int
      y: int
class Region(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\repr.py
-----------------------------
>     """An error occurred when attempting to build a repr."""
  
  
  @overload
class ReprError(Exception):
def auto(cls: Optional[Type[T]]) -> Type[T]:
def auto(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
def auto(
def rich_repr(cls: Optional[Type[T]]) -> Type[T]:
def rich_repr(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
def rich_repr(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\rule.py
-----------------------------
>     """A console renderable to draw a horizontal rule (line).
  
      Args:
          title (Union[str, Text], optional): Text to render in the rule. Defaults to "".
class Rule(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\scope.py
-----------------------------
>     """Render python variables in a given scope.
  
      Args:
          scope (Mapping): A mapping containing variable names and values.
def render_scope(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\screen.py
-----------------------------
>     """A renderable that fills the terminal screen and crops excess.
  
      Args:
          renderable (RenderableType): Child renderable.
class Screen:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\segment.py
-----------------------------
>     """Non-printable control codes which typically translate to ANSI codes."""
  
      BELL = 1
      CARRIAGE_RETURN = 2
class ControlType(IntEnum):
class Segment(NamedTuple):
class Segments:
class SegmentLines:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\spinner.py
-----------------------------
>     """A spinner animation.
  
      Args:
          name (str): Name of spinner (run python -m rich.spinner).
class Spinner:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\status.py
-----------------------------
>     """Displays a status indicator with a 'spinner' animation.
  
      Args:
          status (RenderableType): A status renderable (str or Text typically).
class Status(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\style.py
-----------------------------
>     """A descriptor to get/set a style attribute bit."""
  
      __slots__ = ["bit"]
  
class _Bit:
class Style:
class StyleStack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\styled.py
-----------------------------
>     """Apply a style to a renderable.
  
      Args:
          renderable (RenderableType): Any renderable.
class Styled:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\syntax.py
-----------------------------
>     """Base class for a syntax theme."""
  
      @abstractmethod
      def get_style_for_token(self, token_type: TokenType) -> Style:
class SyntaxTheme(ABC):
class PygmentsSyntaxTheme(SyntaxTheme):
class ANSISyntaxTheme(SyntaxTheme):
class _SyntaxHighlightRange(NamedTuple):
class PaddingProperty:
class Syntax(JupyterMixin):
def _get_code_index_for_syntax_position(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\table.py
-----------------------------
>     """Defines a column within a ~Table.
  
      Args:
          title (Union[str, Text], optional): The title of the table rendered at the top. 
Defaults to None.
class Column:
class Row:
class _Cell(NamedTuple):
class Table(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\terminal_theme.py
-----------------------------
>     """A color theme used when exporting console content.
  
      Args:
          background (Tuple[int, int, int]): The background color.
class TerminalTheme:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\text.py
-----------------------------
> """A plain string or a :class:`Text` instance."""
  
  GetStyleCallable = Callable[[str], Optional[StyleType]]
  
class Span(NamedTuple):
class Text(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\theme.py
-----------------------------
>     """A container for style information, used by :class:`~rich.console.Console`.
  
      Args:
          styles (Dict[str, Style], optional): A mapping of style names on to styles. 
Defaults to None for a theme with no styles.
class Theme:
class ThemeStackError(Exception):
class ThemeStack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\themes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\traceback.py
-----------------------------
>     """Yield start and end positions per line.
  
      Args:
          start: Start position.
def _iter_syntax_lines(
def install(
class Frame:
class _SyntaxError:
class Stack:
class Trace:
class PathHighlighter(RegexHighlighter):
class Traceback:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\tree.py
-----------------------------
>     """A renderable for a tree structure.
  
      Attributes:
          ASCII_GUIDES (GuideType): Guide lines used when Console.ascii_only is True.
class Tree(JupyterMixin):
class Segment(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_cell_widths.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_emoji_codes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_emoji_replace.py
-----------------------------
>     """Replace emoji code in text."""
      get_emoji = EMOJI.__getitem__
      variants = {"text": "\uFE0E", "emoji": "\uFE0F"}
      get_variant = variants.get
def _emoji_replace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_export_format.py
-----------------------------
> CONSOLE_HTML_FORMAT = """\
  <!DOCTYPE html>
  <html>
  <head>

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_extension.py
-----------------------------
def load_ipython_extension(ip: Any) -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_fileno.py
-----------------------------
>     """Get fileno() from a file, accounting for poorly implemented file-like objects.
  
      Args:
          file_like (IO): A file-like object.
def get_fileno(file_like: IO[str]) -> int | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_inspect.py
-----------------------------
>     """Get the first paragraph from a docstring."""
      paragraph, _, _ = doc.partition("\n\n")
      return paragraph
  
def _first_paragraph(doc: str) -> str:
class Inspect(JupyterMixin):
def get_object_types_mro(obj: Union[object, Type[Any]]) -> Tuple[type, ...]:
def get_object_types_mro_as_strings(obj: object) -> Collection[str]:
def is_object_one_of_types(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_log_render.py
-----------------------------
class LogRender:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_loop.py
-----------------------------
>     """Iterate and generate a tuple with a flag for first value."""
      iter_values = iter(values)
      try:
          value = next(iter_values)
def loop_first(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
def loop_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_null_file.py
-----------------------------
class NullFile(IO[str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_palettes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_pick.py
-----------------------------
>     """Pick the first non-none bool or return the last value.
  
      Args:
          *values (bool): Any number of boolean or None values.
def pick_bool(*values: Optional[bool]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_ratio.py
-----------------------------
>     """Any object that defines an edge (such as Layout)."""
  
      size: Optional[int] = None
      ratio: int = 1
class Edge(Protocol):
def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:
def ratio_reduce(
def ratio_distribute(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_spinners.py
-----------------------------
> """
  Spinners are from:
  * cli-spinners:
      MIT License

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_stack.py
-----------------------------
>     """A small shim over builtin list."""
  
      @property
      def top(self) -> T:
class Stack(List[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_timer.py
-----------------------------
> """
  Timer context manager, only used in debug.
  
def timer(subject: str = "time") -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_win32_console.py
-----------------------------
> """Light wrapper around the Win32 Console API - this module should only be imported on 
Windows
  
  The API that this module wraps is documented at 
https://docs.microsoft.com/en-us/windows/console/console-functions
class LegacyWindowsError(Exception):
class WindowsCoordinates(NamedTuple):
class CONSOLE_SCREEN_BUFFER_INFO(Structure):
class CONSOLE_CURSOR_INFO(ctypes.Structure):
def GetStdHandle(handle: int = STDOUT) -> wintypes.HANDLE:
def GetConsoleMode(std_handle: wintypes.HANDLE) -> int:
def FillConsoleOutputCharacter(
def FillConsoleOutputAttribute(
def SetConsoleTextAttribute(
def GetConsoleScreenBufferInfo(
def SetConsoleCursorPosition(
def GetConsoleCursorInfo(
def SetConsoleCursorInfo(
def SetConsoleTitle(title: str) -> bool:
class LegacyWindowsTerm:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_windows.py
-----------------------------
>     """Windows features available."""
  
      vt: bool = False
class WindowsConsoleFeatures:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_windows_renderer.py
-----------------------------
>     """Makes appropriate Windows Console API calls based on the segments in the buffer.
  
      Args:
          buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.
def legacy_windows_render(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\_wrap.py
-----------------------------
>     """Yields each word from the text as a tuple
      containing (start_index, end_index, word). A "word" in this context may
      include the actual word and any whitespace to the right.
def words(text: str) -> Iterable[tuple[int, int, str]]:
def divide_line(text: str, width: int, fold: bool = True) -> list[int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\__init__.py
-----------------------------
> """Rich text and beautiful formatting in the terminal."""
  
  import os
  from typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union
def get_console() -> "Console":
def reconfigure(*args: Any, **kwargs: Any) -> None:
def print(
def print_json(
def inspect(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\rich\__main__.py
-----------------------------
>     """Get a renderable that demonstrates a number of features."""
      table = Table.grid(padding=1, pad_edge=True)
      table.title = "Rich features"
      table.add_column("Feature", no_wrap=True, justify="center", style="bold red")
class ColorBox:
def make_test_card() -> Table:
def iter_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\tomli\_parser.py
-----------------------------
>     """Sentinel to be used as default arg during deprecation
class DEPRECATED_DEFAULT:
class TOMLDecodeError(ValueError):
def load(__fp: IO[bytes], *, parse_float: ParseFloat = float) -> dict[str, Any]:
def loads(__s: str, *, parse_float: ParseFloat = float) -> dict[str, Any]:  # noqa: C901
class Flags:
class NestedDict:
class Output(NamedTuple):
def skip_chars(src: str, pos: Pos, chars: Iterable[str]) -> Pos:
def skip_until(
def skip_comment(src: str, pos: Pos) -> Pos:
def skip_comments_and_array_ws(src: str, pos: Pos) -> Pos:
def create_dict_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def create_list_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def key_value_rule(
def parse_key_value_pair(
def parse_key(src: str, pos: Pos) -> tuple[Pos, Key]:
def parse_key_part(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_one_line_basic_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_array(
def parse_inline_table(
def parse_basic_str_escape(
def parse_basic_str_escape_multiline(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_hex_char(src: str, pos: Pos, hex_len: int) -> tuple[Pos, str]:
def parse_literal_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_multiline_str(src: str, pos: Pos, *, literal: bool) -> tuple[Pos, str]:
def parse_basic_str(src: str, pos: Pos, *, multiline: bool) -> tuple[Pos, str]:
def parse_value(  # noqa: C901
def is_unicode_scalar_value(codepoint: int) -> bool:
def make_safe_parse_float(parse_float: ParseFloat) -> ParseFloat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\tomli\_re.py
-----------------------------
>     r"""
  0
  (?:
      x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*   # hex
def match_to_datetime(match: re.Match) -> datetime | date:
def cached_tz(hour_str: str, minute_str: str, sign_str: str) -> timezone:
def match_to_localtime(match: re.Match) -> time:
def match_to_number(match: re.Match, parse_float: ParseFloat) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\tomli\_types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\tomli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\tomli_w\_writer.py
-----------------------------
>         result = '"""\n'
          s = s.replace("\r\n", "\n")
      else:
          result = '"'
class Context:
def dump(
def dumps(
def gen_table_chunks(
def format_literal(obj: object, ctx: Context, *, nest_level: int = 0) -> str:
def format_decimal(obj: Decimal) -> str:
def format_inline_table(obj: Mapping, ctx: Context) -> str:
def format_inline_array(obj: tuple | list, ctx: Context, nest_level: int) -> str:
def format_key_part(part: str) -> str:
def format_string(s: str, *, allow_multiline: bool) -> str:
def is_aot(obj: Any) -> bool:
def is_suitable_inline_table(obj: Mapping, ctx: Context) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\tomli_w\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\truststore\_api.py
-----------------------------
>     """Injects the :class:`truststore.SSLContext` into the ``ssl``
      module by replacing :class:`ssl.SSLContext`.
def inject_into_ssl() -> None:
def extract_from_ssl() -> None:
class SSLContext(_truststore_SSLContext_super_class):  # type: ignore[misc]
def _verify_peercerts(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\truststore\_macos.py
-----------------------------
>     """Loads a CDLL by name, falling back to known path on 10.16+"""
      try:
          # Big Sur is technically 11 but we use 10.16 due to the Big Sur
          # beta being labeled as 10.16.
def _load_cdll(name: str, macos10_16_path: str) -> CDLL:
def _handle_osstatus(result: OSStatus, _: typing.Any, args: typing.Any) -> typing.Any:
class CFConst:
def _bytes_to_cf_data_ref(value: bytes) -> CFDataRef:  # type: ignore[valid-type]
def _bytes_to_cf_string(value: bytes) -> CFString:
def _cf_string_ref_to_str(cf_string_ref: CFStringRef) -> str | None:  # type: ignore[valid-type]
def _der_certs_to_cf_cert_array(certs: list[bytes]) -> CFMutableArrayRef:  # type: ignore[valid-type]
def _configure_context(ctx: ssl.SSLContext) -> typing.Iterator[None]:
def _verify_peercerts_impl(
def _verify_peercerts_impl_macos_10_13(
def _verify_peercerts_impl_macos_10_14(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\truststore\_openssl.py
-----------------------------
>     """Check whether capath exists and contains certs in the expected format."""
      if not os.path.isdir(capath):
          return False
      for name in os.listdir(capath):
def _configure_context(ctx: ssl.SSLContext) -> typing.Iterator[None]:
def _capath_contains_certs(capath: str) -> bool:
def _verify_peercerts_impl(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\truststore\_ssl_constants.py
-----------------------------
def _set_ssl_context_verify_mode(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\truststore\_windows.py
-----------------------------
>     """Verify the cert_chain from the server using Windows APIs."""
  
      # If the peer didn't send any certificates then
      # we can't do verification. Raise an error.
class CERT_CONTEXT(Structure):
class CERT_ENHKEY_USAGE(Structure):
class CERT_USAGE_MATCH(Structure):
class CERT_CHAIN_PARA(Structure):
class CERT_TRUST_STATUS(Structure):
class CERT_CHAIN_ELEMENT(Structure):
class CERT_SIMPLE_CHAIN(Structure):
class CERT_CHAIN_CONTEXT(Structure):
class SSL_EXTRA_CERT_CHAIN_POLICY_PARA(Structure):
class CERT_CHAIN_POLICY_PARA(Structure):
class CERT_CHAIN_POLICY_STATUS(Structure):
class CERT_CHAIN_ENGINE_CONFIG(Structure):
def _handle_win_error(result: bool, _: Any, args: Any) -> Any:
def _verify_peercerts_impl(
def _get_and_verify_cert_chain(
def _verify_using_custom_ca_certs(
def _configure_context(ctx: ssl.SSLContext) -> typing.Iterator[None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\truststore\__init__.py
-----------------------------
> """Verify certificates using native system trust stores"""
  
  import sys as _sys
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\bindings.py
-----------------------------
> """
  This module uses ctypes to bind a whole bunch of functions and constants from
  SecureTransport. The goal here is to provide the low-level API to
  SecureTransport. These are essentially the C-level functions and constants, and
def load_cdll(name, macos10_16_path):
class CFConst(object):
class SecurityConst(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\low_level.py
-----------------------------
> """
  Low-level helpers for the SecureTransport bindings.
  
  These are Python functions that are not directly related to the high-level APIs
def _cf_data_from_bytes(bytestring):
def _cf_dictionary_from_tuples(tuples):
def _cfstr(py_bstr):
def _create_cfstring_array(lst):
def _cf_string_to_unicode(value):
def _assert_no_error(error, exception_class=None):
def _cert_array_from_pem(pem_bundle):
def _is_cert(item):
def _is_identity(item):
def _temporary_keychain():
def _load_items_from_file(keychain, path):
def _load_client_cert_chain(keychain, *paths):
def _build_tls_unknown_ca_alert(version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\appengine.py
-----------------------------
> """
  This module provides a pool manager that uses Google App Engine's
  `URLFetch Service <https://cloud.google.com/appengine/docs/python/urlfetch>`_.
  
class AppEnginePlatformWarning(HTTPWarning):
class AppEnginePlatformError(HTTPError):
class AppEngineManager(RequestMethods):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\ntlmpool.py
-----------------------------
> """
  NTLM authenticating pool, contributed by erikcederstran
  
  Issue #10, see: http://code.google.com/p/urllib3/issues/detail?id=10
class NTLMConnectionPool(HTTPSConnectionPool):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\pyopenssl.py
-----------------------------
> """
  TLS with SNI_-support for Python 2. Follow these instructions if you would
  like to verify TLS certificates in Python 2. Note, the default libraries do
  *not* do certificate checking; you need to do additional work to validate
def inject_into_urllib3():
def extract_from_urllib3():
def _validate_dependencies_met():
def _dnsname_to_stdlib(name):
def get_subj_alt_name(peer_cert):
class WrappedSocket(object):
class PyOpenSSLContext(object):
def _verify_callback(cnx, x509, err_no, err_depth, return_code):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\securetransport.py
-----------------------------
> """
  SecureTranport support for urllib3 via ctypes.
  
  This makes platform-native TLS available to urllib3 users on macOS without the
def inject_into_urllib3():
def extract_from_urllib3():
def _read_callback(connection_id, data_buffer, data_length_pointer):
def _write_callback(connection_id, data_buffer, data_length_pointer):
class WrappedSocket(object):
class SecureTransportContext(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\socks.py
-----------------------------
> """
  This module contains provisional support for SOCKS proxies from within
  urllib3. This module supports SOCKS4, SOCKS4A (an extension of SOCKS4), and
  SOCKS5. To enable its functionality, either install PySocks or install this
class SOCKSConnection(HTTPConnection):
class SOCKSHTTPSConnection(SOCKSConnection, HTTPSConnection):
class SOCKSHTTPConnectionPool(HTTPConnectionPool):
class SOCKSHTTPSConnectionPool(HTTPSConnectionPool):
class SOCKSProxyManager(PoolManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_appengine_environ.py
-----------------------------
> """
  This module provides means to detect the App Engine environment.
def is_appengine():
def is_appengine_sandbox():
def is_local_appengine():
def is_prod_appengine():
def is_prod_appengine_mvms():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\contrib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\packages\backports\makefile.py
-----------------------------
> """
  backports.makefile
  ~~~~~~~~~~~~~~~~~~
  
def backport_makefile(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\packages\backports\weakref_finalize.py
-----------------------------
> """
  backports.weakref_finalize
  ~~~~~~~~~~~~~~~~~~
  
class weakref_finalize(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\packages\backports\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\packages\six.py
-----------------------------
> """Utilities for writing code that runs on Python 2 and 3"""
  
  from __future__ import absolute_import
  
def _add_doc(func, doc):
def _import_module(name):
class _LazyDescr(object):
class MovedModule(_LazyDescr):
class _LazyModule(types.ModuleType):
class MovedAttribute(_LazyDescr):
class _SixMetaPathImporter(object):
class _MovedItems(_LazyModule):
class Module_six_moves_urllib_parse(_LazyModule):
class Module_six_moves_urllib_error(_LazyModule):
class Module_six_moves_urllib_request(_LazyModule):
class Module_six_moves_urllib_response(_LazyModule):
class Module_six_moves_urllib_robotparser(_LazyModule):
class Module_six_moves_urllib(types.ModuleType):
def add_move(move):
def remove_move(name):
def assertCountEqual(self, *args, **kwargs):
def assertRaisesRegex(self, *args, **kwargs):
def assertRegex(self, *args, **kwargs):
def assertNotRegex(self, *args, **kwargs):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def ensure_binary(s, encoding="utf-8", errors="strict"):
def ensure_str(s, encoding="utf-8", errors="strict"):
def ensure_text(s, encoding="utf-8", errors="strict"):
def python_2_unicode_compatible(klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\packages\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\connection.py
-----------------------------
>     """
      Returns True if the connection is dropped and should be closed.
  
      :param conn:
def is_connection_dropped(conn):  # Platform-specific
def create_connection(
def _set_socket_options(sock, options):
def allowed_gai_family():
def _has_ipv6(host):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\proxy.py
-----------------------------
>     """
      Returns True if the connection requires an HTTP CONNECT through the proxy.
  
      :param URL proxy_url:
def connection_requires_http_tunnel(
def create_proxy_ssl_context(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\queue.py
-----------------------------
class LifoQueue(queue.Queue):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\request.py
-----------------------------
>     """
      Shortcuts for generating request headers.
  
      :param keep_alive:
def make_headers(
def set_file_position(body, pos):
def rewind_body(body, body_pos):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\response.py
-----------------------------
>     """
      Checks whether a given file-like object is closed.
  
      :param obj:
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\retry.py
-----------------------------
>     """Retry configuration.
  
      Each retry attempt will create a new Retry object with updated values, so
      they can be safely reused.
class _RetryMeta(type):
class Retry(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssltransport.py
-----------------------------
>     """
      The SSLTransport wraps an existing socket and establishes an SSL connection.
  
      Contrary to Python's implementation of SSLSocket, it allows you to chain
class SSLTransport:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py
-----------------------------
>     """
      Compare two digests of equal length in constant time.
  
      The digests must be of type str/bytes.
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(
def ssl_wrap_socket(
def is_ipaddress(hostname):
def _is_key_file_encrypted(key_file):
def _ssl_wrap_socket_impl(sock, ssl_context, tls_in_tls, server_hostname=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\ssl_match_hostname.py
-----------------------------
> """The match_hostname() function from Python 3.3.3, essential when using SSL."""
  
  # Note: This file is under the PSF license as the code comes from the python
  # stdlib.   http://docs.python.org/3/license.html
class CertificateError(ValueError):
def _dnsname_match(dn, hostname, max_wildcards=1):
def _to_unicode(obj):
def _ipaddress_match(ipname, host_ip):
def match_hostname(cert, hostname):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\timeout.py
-----------------------------
>     """Timeout configuration.
  
      Timeouts can be defined as a default for a pool:
  
class Timeout(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\url.py
-----------------------------
>     """
      Data structure for representing an HTTP URL. Used as a return value for
      :func:`parse_url`. Both the scheme and host are normalized as they are
      both case-insensitive according to RFC 3986.
class Url(namedtuple("Url", url_attrs)):
def split_first(s, delims):
def _encode_invalid_chars(component, allowed_chars, encoding="utf-8"):
def _remove_path_dot_segments(path):
def _normalize_host(host, scheme):
def _idna_encode(name):
def _encode_target(target):
def parse_url(url):
def get_host(url):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\wait.py
-----------------------------
>     """Waits for reading to be available on a given socket.
      Returns True if the socket is readable, or False if the timeout expired.
class NoWayToWaitForSocketError(Exception):
def select_wait_for_socket(sock, read=False, write=False, timeout=None):
def poll_wait_for_socket(sock, read=False, write=False, timeout=None):
def null_wait_for_socket(*args, **kwargs):
def _have_working_poll():
def wait_for_socket(*args, **kwargs):
def wait_for_read(sock, timeout=None):
def wait_for_write(sock, timeout=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\connection.py
-----------------------------
>     """
      Based on :class:`http.client.HTTPConnection` but provides an extra constructor
      backwards-compatibility layer between older and newer Pythons.
  
class HTTPConnection(_HTTPConnection, object):
class HTTPSConnection(HTTPConnection):
def _match_hostname(cert, asserted_hostname):
def _get_default_user_agent():
class DummyConnection(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\connectionpool.py
-----------------------------
>     """
      Base class for all connection pools, such as
      :class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.
  
class ConnectionPool(object):
class HTTPConnectionPool(ConnectionPool, RequestMethods):
class HTTPSConnectionPool(HTTPConnectionPool):
def connection_from_url(url, **kw):
def _normalize_host(host, scheme):
def _close_pool_connections(pool):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\exceptions.py
-----------------------------
>     """Base exception used by this module."""
  
      pass
  
class HTTPError(Exception):
class HTTPWarning(Warning):
class PoolError(HTTPError):
class RequestError(PoolError):
class SSLError(HTTPError):
class ProxyError(HTTPError):
class DecodeError(HTTPError):
class ProtocolError(HTTPError):
class MaxRetryError(RequestError):
class HostChangedError(RequestError):
class TimeoutStateError(HTTPError):
class TimeoutError(HTTPError):
class ReadTimeoutError(TimeoutError, RequestError):
class ConnectTimeoutError(TimeoutError):
class NewConnectionError(ConnectTimeoutError, PoolError):
class EmptyPoolError(PoolError):
class ClosedPoolError(PoolError):
class LocationValueError(ValueError, HTTPError):
class LocationParseError(LocationValueError):
class URLSchemeUnknown(LocationValueError):
class ResponseError(HTTPError):
class SecurityWarning(HTTPWarning):
class SubjectAltNameWarning(SecurityWarning):
class InsecureRequestWarning(SecurityWarning):
class SystemTimeWarning(SecurityWarning):
class InsecurePlatformWarning(SecurityWarning):
class SNIMissingWarning(HTTPWarning):
class DependencyWarning(HTTPWarning):
class ResponseNotChunked(ProtocolError, ValueError):
class BodyNotHttplibCompatible(HTTPError):
class IncompleteRead(HTTPError, httplib_IncompleteRead):
class InvalidChunkLength(HTTPError, httplib_IncompleteRead):
class InvalidHeader(HTTPError):
class ProxySchemeUnknown(AssertionError, URLSchemeUnknown):
class ProxySchemeUnsupported(ValueError):
class HeaderParsingError(HTTPError):
class UnrewindableBodyError(HTTPError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\fields.py
-----------------------------
>     """
      Guess the "Content-Type" of a file.
  
      :param filename:
def guess_content_type(filename, default="application/octet-stream"):
def format_header_param_rfc2231(name, value):
def _replace_multiple(value, needles_and_replacements):
def format_header_param_html5(name, value):
class RequestField(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\filepost.py
-----------------------------
>     """
      Our embarrassingly-simple replacement for mimetools.choose_boundary.
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\poolmanager.py
-----------------------------
>     """
      Create a pool key out of a request context dictionary.
  
      According to RFC 3986, both the scheme and host are case-insensitive.
def _default_key_normalizer(key_class, request_context):
class PoolManager(RequestMethods):
class ProxyManager(PoolManager):
def proxy_from_url(url, **kw):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\request.py
-----------------------------
>     """
      Convenience mixin for classes who implement a :meth:`urlopen` method, such
      as :class:`urllib3.HTTPConnectionPool` and
      :class:`urllib3.PoolManager`.
class RequestMethods(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\response.py
-----------------------------
>     """
      From RFC7231:
          If one or more encodings have been applied to a representation, the
          sender that applied the encodings MUST generate a Content-Encoding
class DeflateDecoder(object):
class GzipDecoderState(object):
class GzipDecoder(object):
class MultiDecoder(object):
def _get_decoder(mode):
class HTTPResponse(io.IOBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\_collections.py
-----------------------------
>     """
      Provides a thread-safe dict-like container which maintains up to
      ``maxsize`` keys while throwing away the least-recently-used keys beyond
      ``maxsize``.
class RecentlyUsedContainer(MutableMapping):
class HTTPHeaderDict(MutableMapping):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\urllib3\__init__.py
-----------------------------
> """
  Python HTTP library with thread-safe connection pooling, file post support, user friendly, 
and more
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\_vendor\__init__.py
-----------------------------
> """
  pip._vendor is for vendoring dependencies of pip to prevent needing pip to
  depend on something external.
  
def vendored(modulename):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\__init__.py
-----------------------------
>     """This is an internal API only meant for use by pip's own console scripts.
  
      For additional details, see https://github.com/pypa/pip/issues/7498.
def main(args: list[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pip\__pip-runner__.py
-----------------------------
> """Execute exactly this copy of pip, within a different environment.
  
  This file is named as it is, to ensure that this module can't be imported via
  an import statement.
def version_str(version):  # type: ignore
class PipImportRedirectingFinder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\extern\__init__.py
-----------------------------
>     """
      A PEP 302 meta path importer for finding optionally-vendored
      or otherwise naturally-installed packages from root_name.
class VendorImporter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\abc.py
-----------------------------
>     """Abstract base class for loaders to provide resource reading support."""
  
      @abc.abstractmethod
      def open_resource(self, resource: Text) -> BinaryIO:
class ResourceReader(metaclass=abc.ABCMeta):
class Traversable(Protocol):
class TraversableResources(ResourceReader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\readers.py
-----------------------------
>         """
          Return the file system path to prevent
          `resources.path()` from creating a temporary
          copy.
def remove_duplicates(items):
class FileReader(abc.TraversableResources):
class ZipReader(abc.TraversableResources):
class MultiplexedPath(abc.Traversable):
class NamespaceReader(abc.TraversableResources):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\simple.py
-----------------------------
> """
  Interface adapters for low-level readers.
class SimpleReader(abc.ABC):
class ResourceHandle(Traversable):
class ResourceContainer(Traversable):
class TraversableReader(TraversableResources, SimpleReader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_adapters.py
-----------------------------
>     """
      Adapt a package spec to adapt the underlying loader.
class SpecLoaderAdapter:
class TraversableResourcesLoader:
def _io_wrapper(file, mode='r', *args, **kwargs):
class CompatibilityFiles:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_common.py
-----------------------------
>     """
      Get a Traversable resource from a package
def files(package):
def get_resource_reader(package):
def resolve(cand):
def get_package(package):
def from_package(package):
def _tempfile(reader, suffix=''):
def as_file(path):
def _(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_compat.py
-----------------------------
>     """
      Adapt loaders to provide TraversableResources and other
      compatibility.
  
class TraversableResourcesLoader:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_itertools.py
-----------------------------
def unique_everseen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\_legacy.py
-----------------------------
>     """Normalize a path by ensuring it is a string.
  
      If the resulting string contains path separators, an exception is raised.
def deprecated(func):
def normalize_path(path):
def open_binary(package: Package, resource: Resource) -> BinaryIO:
def read_binary(package: Package, resource: Resource) -> bytes:
def open_text(
def read_text(
def contents(package: Package) -> Iterable[str]:
def is_resource(package: Package, name: str) -> bool:
def path(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\__init__.py
-----------------------------
> """Read resources contained within a package."""
  
  from ._common import (
      as_file,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\jaraco\text\__init__.py
-----------------------------
>     """
      Return a function that will perform a substitution on a string
def substitution(old, new):
def multi_substitution(*substitutions):
class FoldedCase(str):
def is_decodable(value):
def is_binary(value):
def trim(s):
def wrap(s):
def unwrap(s):
class Splitter(object):
def indent(string, prefix=' ' * 4):
class WordSet(tuple):
def simple_html_strip(s):
class SeparatedValues(str):
class Stripper:
def remove_prefix(text, prefix):
def remove_suffix(text, suffix):
def normalize_newlines(text):
def _nonblank(str):
def yield_lines(iterable):
def _(text):
def drop_comment(line):
def join_continuation(lines):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\jaraco\context.py
-----------------------------
>     """
      Get a tarball, extract it, change to that directory, yield, then
      clean up.
      `runner` is the function to invoke commands.
def pushd(dir):
def tarball_context(url, target_dir=None, runner=None, pushd=pushd):
def infer_compression(url):
def temp_dir(remover=shutil.rmtree):
def repo_context(url, branch=None, quiet=True, dest_ctx=temp_dir):
def null():
class ExceptionTrap:
class suppress(contextlib.suppress, contextlib.ContextDecorator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\jaraco\functools.py
-----------------------------
>     """
      Compose any number of unary functions into a single unary function.
  
      >>> import textwrap
def compose(*funcs):
def method_caller(method_name, *args, **kwargs):
def once(func):
def method_cache(
def _special_method_cache(method, cache_wrapper):
def apply(transform):
def result_invoke(action):
def call_aside(f, *args, **kwargs):
class Throttler:
def first_invoke(func1, func2):
def retry_call(func, cleanup=lambda: None, retries=0, trap=()):
def retry(*r_args, **r_kwargs):
def print_yielded(func):
def pass_none(func):
def assign_params(func, namespace):
def save_method_args(method):
def except_(*exceptions, replace=None, use=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\jaraco\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\more.py
-----------------------------
>     """Break *iterable* into lists of length *n*:
  
          >>> list(chunked([1, 2, 3, 4, 5, 6], 3))
          [[1, 2, 3], [4, 5, 6]]
def chunked(iterable, n, strict=False):
def first(iterable, default=_marker):
def last(iterable, default=_marker):
def nth_or_last(iterable, n, default=_marker):
class peekable:
def collate(*iterables, **kwargs):
def consumer(func):
def ilen(iterable):
def iterate(func, start):
def with_iter(context_manager):
def one(iterable, too_short=None, too_long=None):
def raise_(exception, *args):
def strictly_n(iterable, n, too_short=None, too_long=None):
def distinct_permutations(iterable, r=None):
def intersperse(e, iterable, n=1):
def unique_to_each(*iterables):
def windowed(seq, n, fillvalue=None, step=1):
def substrings(iterable):
def substrings_indexes(seq, reverse=False):
class bucket:
def spy(iterable, n=1):
def interleave(*iterables):
def interleave_longest(*iterables):
def interleave_evenly(iterables, lengths=None):
def collapse(iterable, base_type=None, levels=None):
def side_effect(func, iterable, chunk_size=None, before=None, after=None):
def sliced(seq, n, strict=False):
def split_at(iterable, pred, maxsplit=-1, keep_separator=False):
def split_before(iterable, pred, maxsplit=-1):
def split_after(iterable, pred, maxsplit=-1):
def split_when(iterable, pred, maxsplit=-1):
def split_into(iterable, sizes):
def padded(iterable, fillvalue=None, n=None, next_multiple=False):
def repeat_each(iterable, n=2):
def repeat_last(iterable, default=None):
def distribute(n, iterable):
def stagger(iterable, offsets=(-1, 0, 1), longest=False, fillvalue=None):
class UnequalIterablesError(ValueError):
def _zip_equal_generator(iterables):
def _zip_equal(*iterables):
def zip_equal(*iterables):
def zip_offset(*iterables, offsets, longest=False, fillvalue=None):
def sort_together(iterables, key_list=(0,), key=None, reverse=False):
def unzip(iterable):
def divide(n, iterable):
def always_iterable(obj, base_type=(str, bytes)):
def adjacent(predicate, iterable, distance=1):
def groupby_transform(iterable, keyfunc=None, valuefunc=None, reducefunc=None):
class numeric_range(abc.Sequence, abc.Hashable):
def count_cycle(iterable, n=None):
def mark_ends(iterable):
def locate(iterable, pred=bool, window_size=None):
def lstrip(iterable, pred):
def rstrip(iterable, pred):
def strip(iterable, pred):
class islice_extended:
def _islice_helper(it, s):
def always_reversible(iterable):
def consecutive_groups(iterable, ordering=lambda x: x):
def difference(iterable, func=sub, *, initial=None):
class SequenceView(Sequence):
class seekable:
class run_length:
def exactly_n(iterable, n, predicate=bool):
def circular_shifts(iterable):
def make_decorator(wrapping_func, result_index=0):
def map_reduce(iterable, keyfunc, valuefunc=None, reducefunc=None):
def rlocate(iterable, pred=bool, window_size=None):
def replace(iterable, pred, substitutes, count=None, window_size=1):
def partitions(iterable):
def set_partitions(iterable, k=None):
class time_limited:
def only(iterable, default=None, too_long=None):
def ichunked(iterable, n):
def distinct_combinations(iterable, r):
def filter_except(validator, iterable, *exceptions):
def map_except(function, iterable, *exceptions):
def map_if(iterable, pred, func, func_else=lambda x: x):
def _sample_unweighted(iterable, k):
def _sample_weighted(iterable, k, weights):
def sample(iterable, k, weights=None):
def is_sorted(iterable, key=None, reverse=False, strict=False):
class AbortThread(BaseException):
class callback_iter:
def windowed_complete(iterable, n):
def all_unique(iterable, key=None):
def nth_product(index, *args):
def nth_permutation(iterable, r, index):
def value_chain(*args):
def product_index(element, *args):
def combination_index(element, iterable):
def permutation_index(element, iterable):
class countable:
def chunked_even(iterable, n):
def _chunked_even_online(iterable, n):
def _chunked_even_finite(iterable, N, n):
def zip_broadcast(*objects, scalar_types=(str, bytes), strict=False):
def unique_in_window(iterable, n, key=None):
def duplicates_everseen(iterable, key=None):
def duplicates_justseen(iterable, key=None):
def minmax(iterable_or_value, *others, key=None, default=_marker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\recipes.py
-----------------------------
> """Imported from the recipes section of the itertools documentation.
  
  All functions taken from the recipes section of the itertools library docs
  [1]_.
def take(n, iterable):
def tabulate(function, start=0):
def tail(n, iterable):
def consume(iterator, n=None):
def nth(iterable, n, default=None):
def all_equal(iterable):
def quantify(iterable, pred=bool):
def pad_none(iterable):
def ncycles(iterable, n):
def dotproduct(vec1, vec2):
def flatten(listOfLists):
def repeatfunc(func, times=None, *args):
def _pairwise(iterable):
def grouper(iterable, n, fillvalue=None):
def roundrobin(*iterables):
def partition(pred, iterable):
def powerset(iterable):
def unique_everseen(iterable, key=None):
def unique_justseen(iterable, key=None):
def iter_except(func, exception, first=None):
def first_true(iterable, default=None, pred=None):
def random_product(*args, repeat=1):
def random_permutation(iterable, r=None):
def random_combination(iterable, r):
def random_combination_with_replacement(iterable, r):
def nth_combination(iterable, r, index):
def prepend(value, iterator):
def convolve(signal, kernel):
def before_and_after(predicate, it):
def triplewise(iterable):
def sliding_window(iterable, n):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
def _coerce_parse_result(results: Union[ParseResults, List[Any]]) -> List[Any]:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str) -> bool:
class Undefined:
def _get_env(environment: Dict[str, str], name: str) -> str:
def _evaluate_markers(markers: List[Any], environment: Dict[str, str]) -> bool:
def format_full_version(info: "sys._version_info") -> str:
def default_environment() -> Dict[str, str]:
class Marker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\specifiers.py
-----------------------------
>     """
      An invalid specifier was found, users should refer to PEP 440.
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class _IndividualSpecifier(BaseSpecifier):
class LegacySpecifier(_IndividualSpecifier):
def _require_version_compare(
class Specifier(_IndividualSpecifier):
def _version_split(version: str) -> List[str]:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: List[str], right: List[str]) -> Tuple[List[str], List[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> FrozenSet[Tag]:
def _get_config_var(name: str, warn: bool = False) -> Union[int, str, None]:
def _normalize_string(string: str) -> str:
def _abi3_applies(python_version: PythonVersion) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> List[str]:
def cpython_tags(
def _generic_abi() -> Iterator[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: MacVersion, cpu_arch: str) -> List[str]:
def mac_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\utils.py
-----------------------------
>     """
      An invalid wheel filename was found, users should refer to PEP 427.
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str) -> NormalizedName:
def canonicalize_version(version: Union[Version, str]) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> Tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\version.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
def parse(version: str) -> Union["LegacyVersion", "Version"]:
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s: str) -> Iterator[str]:
def _legacy_cmpkey(version: str) -> LegacyCmpKey:
class Version(_BaseVersion):
def _parse_letter_version(
def _parse_local_version(local: str) -> Optional[LocalType]:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\_manylinux.py
-----------------------------
>         """
          An invalid ELF file header was found.
class _ELFFileHeader:
def _get_elf_header() -> Optional[_ELFFileHeader]:
def _is_linux_armhf() -> bool:
def _is_linux_i686() -> bool:
def _have_compatible_abi(arch: str) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> Optional[str]:
def _glibc_version_string_ctypes() -> Optional[str]:
def _glibc_version_string() -> Optional[str]:
def _parse_glibc_version(version_str: str) -> Tuple[int, int]:
def _get_glibc_version() -> Tuple[int, int]:
def _is_compatible(name: str, arch: str, version: _GLibCVersion) -> bool:
def platform_tags(linux: str, arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
def _read_unpacked(f: IO[bytes], fmt: str) -> Tuple[int, ...]:
def _parse_ld_musl_from_elf(f: IO[bytes]) -> Optional[str]:
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> Optional[_MuslVersion]:
def _get_musl_version(executable: str) -> Optional[_MuslVersion]:
def platform_tags(arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\__about__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\diagram\__init__.py
-----------------------------
> jinja2_template_source = """\
  <!DOCTYPE html>
  <html>
  <head>
class EachItem(railroad.Group):
class AnnotatedItem(railroad.Group):
class EditablePartial(Generic[T]):
def railroad_to_html(diagrams: List[NamedDiagram], **kwargs) -> str:
def resolve_partial(partial: "EditablePartial[T]") -> T:
def to_railroad(
def _should_vertical(
class ElementState:
class ConverterState:
def _worth_extracting(element: pyparsing.ParserElement) -> bool:
def _apply_diagram_item_enhancements(fn):
def _visible_exprs(exprs: Iterable[pyparsing.ParserElement]):
def _to_diagram_element(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\actions.py
-----------------------------
>     """
      Wrapper for parse actions, to ensure they are only called once.
class OnlyOnce:
def match_only_at_col(n):
def replace_with(repl_str):
def remove_quotes(s, l, t):
def with_attribute(*args, **attr_dict):
def with_class(classname, namespace=""):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\common.py
-----------------------------
>     """Here are some common low-level expressions that may be useful in
      jump-starting parser development:
  
      - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
class pyparsing_common:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\core.py
-----------------------------
>     """
      A cross-version compatibility configuration for pyparsing features that will be
      released in a future version. By setting values in this configuration to True,
      those features can be enabled in prior versions for compatibility development
class __compat__(__config_flags):
class __diag__(__config_flags):
class Diagnostics(Enum):
def enable_diag(diag_enum: Diagnostics) -> None:
def disable_diag(diag_enum: Diagnostics) -> None:
def enable_all_warnings() -> None:
def _should_enable_warnings(
def _trim_arity(func, max_limit=3):
def condition_as_parse_action(
def _default_start_debug_action(
def _default_success_debug_action(
def _default_exception_debug_action(
def null_debug_action(*args):
class ParserElement(ABC):
class _PendingSkip(ParserElement):
class Token(ParserElement):
class Empty(Token):
class NoMatch(Token):
class Literal(Token):
class _SingleCharLiteral(Literal):
class Keyword(Token):
class CaselessLiteral(Literal):
class CaselessKeyword(Keyword):
class CloseMatch(Token):
class Word(Token):
class _WordRegex(Word):
class Char(_WordRegex):
class Regex(Token):
class QuotedString(Token):
class CharsNotIn(Token):
class White(Token):
class PositionToken(Token):
class GoToColumn(PositionToken):
class LineStart(PositionToken):
class LineEnd(PositionToken):
class StringStart(PositionToken):
class StringEnd(PositionToken):
class WordStart(PositionToken):
class WordEnd(PositionToken):
class ParseExpression(ParserElement):
class And(ParseExpression):
class Or(ParseExpression):
class MatchFirst(ParseExpression):
class Each(ParseExpression):
class ParseElementEnhance(ParserElement):
class IndentedBlock(ParseElementEnhance):
class AtStringStart(ParseElementEnhance):
class AtLineStart(ParseElementEnhance):
class FollowedBy(ParseElementEnhance):
class PrecededBy(ParseElementEnhance):
class Located(ParseElementEnhance):
class NotAny(ParseElementEnhance):
class _MultipleMatch(ParseElementEnhance):
class OneOrMore(_MultipleMatch):
class ZeroOrMore(_MultipleMatch):
class _NullToken:
class Opt(ParseElementEnhance):
class SkipTo(ParseElementEnhance):
class Forward(ParseElementEnhance):
class TokenConverter(ParseElementEnhance):
class Combine(TokenConverter):
class Group(TokenConverter):
class Dict(TokenConverter):
class Suppress(TokenConverter):
def trace_parse_action(f: ParseAction) -> ParseAction:
def srange(s: str) -> str:
def token_map(func, *args) -> ParseAction:
def autoname_elements() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\exceptions.py
-----------------------------
>     """base exception class for all parsing runtime exceptions"""
  
      # Performance tuning: we construct a *lot* of these, so keep this
      # constructor as small and fast as possible
class ExceptionWordUnicode(ppu.Latin1, ppu.LatinA, ppu.LatinB, ppu.Greek, ppu.Cyrillic):
class ParseBaseException(Exception):
class ParseException(ParseBaseException):
class ParseFatalException(ParseBaseException):
class ParseSyntaxException(ParseFatalException):
class RecursiveGrammarException(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\helpers.py
-----------------------------
>     """Helper to define a delimited list of expressions - the delimiter
      defaults to ','. By default, the list elements and delimiters can
      have intervening whitespace, and comments, but this can be
      overridden by passing ``combine=True`` in the constructor. If
def delimited_list(
def counted_array(
def match_previous_literal(expr: ParserElement) -> ParserElement:
def match_previous_expr(expr: ParserElement) -> ParserElement:
def one_of(
def dict_of(key: ParserElement, value: ParserElement) -> ParserElement:
def original_text_for(
def ungroup(expr: ParserElement) -> ParserElement:
def locatedExpr(expr: ParserElement) -> ParserElement:
def nested_expr(
def _makeTags(tagStr, xml, suppress_LT=Suppress("<"), suppress_GT=Suppress(">")):
def make_html_tags(
def make_xml_tags(
def replace_html_entity(t):
class OpAssoc(Enum):
def infix_notation(
def indentedBlock(blockStatementExpr, indentStack, indent=True, backup_stacks=[]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\results.py
-----------------------------
>     """Structured parse results, to provide multiple means of access to
      the parsed data:
  
      - as a list (``len(results)``)
class _ParseResultsWithOffset:
class ParseResults:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\testing.py
-----------------------------
>     """
      namespace class for classes useful in writing unit tests
class pyparsing_test:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\unicode.py
-----------------------------
>     """
      A set of Unicode characters, for language-specific strings for
      ``alphas``, ``nums``, ``alphanums``, and ``printables``.
      A unicode_set is defined by a list of ranges in the Unicode character
class _lazyclassproperty:
class unicode_set:
class pyparsing_unicode(unicode_set):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\util.py
-----------------------------
>     """Internal class for defining compatibility and debugging flags"""
  
      _all_names: List[str] = []
      _fixed_names: List[str] = []
class __config_flags:
def col(loc: int, strg: str) -> int:
def lineno(loc: int, strg: str) -> int:
def line(loc: int, strg: str) -> str:
class _UnboundedCache:
class _FifoCache:
class LRUMemo:
class UnboundedMemo(dict):
def _escape_regex_range_chars(s: str) -> str:
def _collapse_string_to_ranges(
def _flatten(ll: list) -> list:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\pyparsing\__init__.py
-----------------------------
> __doc__ = """
  pyparsing module - Classes and methods to define and execute parsing grammars
  =============================================================================
  
class version_info(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\appdirs.py
-----------------------------
> """Utilities for determining application-specific dirs.
  
  See <http://github.com/ActiveState/appdirs> for details and usage.
def user_data_dir(appname=None, appauthor=None, version=None, roaming=False):
def site_data_dir(appname=None, appauthor=None, version=None, multipath=False):
def user_config_dir(appname=None, appauthor=None, version=None, roaming=False):
def site_config_dir(appname=None, appauthor=None, version=None, multipath=False):
def user_cache_dir(appname=None, appauthor=None, version=None, opinion=True):
def user_state_dir(appname=None, appauthor=None, version=None, roaming=False):
def user_log_dir(appname=None, appauthor=None, version=None, opinion=True):
class AppDirs(object):
def _get_win_folder_from_registry(csidl_name):
def _get_win_folder_with_pywin32(csidl_name):
def _get_win_folder_with_ctypes(csidl_name):
def _get_win_folder_with_jna(csidl_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\zipp.py
-----------------------------
>     """
      Given a path with elements separated by
      posixpath.sep, generate all parents of that path.
  
def _parents(path):
def _ancestry(path):
def _difference(minuend, subtrahend):
class CompleteDirs(zipfile.ZipFile):
class FastLookup(CompleteDirs):
def _pathlib_compat(path):
class Path:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\_vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pkg_resources\__init__.py
-----------------------------
> """
  Package resource API
  --------------------
  
class PEP440Warning(RuntimeWarning):
def parse_version(v):
def _declare_state(vartype, **kw):
def __getstate__():
def __setstate__(state):
def _sget_dict(val):
def _sset_dict(key, ob, state):
def _sget_object(val):
def _sset_object(key, ob, state):
def get_supported_platform():
class ResolutionError(Exception):
class VersionConflict(ResolutionError):
class ContextualVersionConflict(VersionConflict):
class DistributionNotFound(ResolutionError):
class UnknownExtra(ResolutionError):
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def _macos_vers(_cache=[]):
def _macos_arch(machine):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
class IMetadataProvider:
class IResourceProvider(IMetadataProvider):
class WorkingSet:
class _ReqExtras(dict):
class Environment:
class ExtractionError(RuntimeError):
class ResourceManager:
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def invalid_marker(text):
def evaluate_marker(text, extra=None):
class NullProvider:
def _parents(path):
class EggProvider(NullProvider):
class DefaultProvider(EggProvider):
class EmptyProvider(NullProvider):
class ZipManifests(dict):
class MemoizedZipManifests(ZipManifests):
class ZipProvider(EggProvider):
class FileMetadata(EmptyProvider):
class PathMetadata(DefaultProvider):
class EggMetadata(ZipProvider):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_nothing(importer, path_item, only=False):
def _by_version_descending(names):
def find_on_path(importer, path_item, only=False):
def dist_factory(path_item, entry, only):
class NoDists:
def safe_listdir(path):
def distributions_from_metadata(path):
def non_empty_lines(path):
def resolve_egg_link(path):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def _rebuild_mod_path(orig_path, package_name, module):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def null_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def _cygwin_patch(filename):  # pragma: nocover
def _normalize_cached(filename, _cache={}):
def _is_egg_path(path):
def _is_zip_egg(path):
def _is_unpacked_egg(path):
def _set_parent_ns(packageName):
class EntryPoint:
def _version_from_file(lines):
class Distribution:
class EggInfoDistribution(Distribution):
class DistInfoDistribution(Distribution):
def issue_warning(*args, **kw):
def parse_requirements(strs):
class RequirementParseError(packaging.requirements.InvalidRequirement):
class Requirement(packaging.requirements.Requirement):
def _always_object(classes):
def _find_adapter(registry, ob):
def ensure_directory(path):
def _bypass_ensure_directory(path):
def split_sections(s):
def _mkstemp(*args, **kw):
def _call_aside(f, *args, **kwargs):
def _initialize(g=globals()):
class PkgResourcesDeprecationWarning(Warning):
def _initialize_master_working_set():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\android.py
-----------------------------
> """Android."""
  
  from __future__ import annotations
  
class Android(PlatformDirsABC):
def _android_folder() -> str | None:  # noqa: C901
def _android_documents_folder() -> str:
def _android_downloads_folder() -> str:
def _android_pictures_folder() -> str:
def _android_videos_folder() -> str:
def _android_music_folder() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\api.py
-----------------------------
> """Base API."""
  
  from __future__ import annotations
  
class PlatformDirsABC(ABC):  # noqa: PLR0904

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\macos.py
-----------------------------
> """macOS."""
  
  from __future__ import annotations
  
class MacOS(PlatformDirsABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\unix.py
-----------------------------
> """Unix."""
  
  from __future__ import annotations
  
class Unix(PlatformDirsABC):  # noqa: PLR0904
def _get_user_media_dir(env_var: str, fallback_tilde_path: str) -> str:
def _get_user_dirs_folder(key: str) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\windows.py
-----------------------------
> """Windows."""
  
  from __future__ import annotations
  
class Windows(PlatformDirsABC):
def get_win_folder_from_env_vars(csidl_name: str) -> str:
def get_win_folder_if_csidl_name_not_env_var(csidl_name: str) -> str | None:
def get_win_folder_from_registry(csidl_name: str) -> str:
def get_win_folder_via_ctypes(csidl_name: str) -> str:
def _pick_get_win_folder() -> Callable[[str], str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\__init__.py
-----------------------------
> """
  Utilities for determining application-specific dirs.
  
  See <https://github.com/platformdirs/platformdirs> for details and usage.
def _set_platform_dir_class() -> type[PlatformDirsABC]:
def user_data_dir(
def site_data_dir(
def user_config_dir(
def site_config_dir(
def user_cache_dir(
def site_cache_dir(
def user_state_dir(
def user_log_dir(
def user_documents_dir() -> str:
def user_downloads_dir() -> str:
def user_pictures_dir() -> str:
def user_videos_dir() -> str:
def user_music_dir() -> str:
def user_desktop_dir() -> str:
def user_runtime_dir(
def site_runtime_dir(
def user_data_path(
def site_data_path(
def user_config_path(
def site_config_path(
def site_cache_path(
def user_cache_path(
def user_state_path(
def user_log_path(
def user_documents_path() -> Path:
def user_downloads_path() -> Path:
def user_pictures_path() -> Path:
def user_videos_path() -> Path:
def user_music_path() -> Path:
def user_desktop_path() -> Path:
def user_runtime_path(
def site_runtime_path(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\platformdirs\__main__.py
-----------------------------
> """Main entry point."""
  
  from __future__ import annotations
  
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_callers.py
-----------------------------
> """
  Call loop machinery
def run_old_style_hookwrapper(
def _raise_wrapfail(
def _warn_teardown_exception(
def _multicall(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_hooks.py
-----------------------------
> """
  Internal hook annotation, representation and calling machinery.
class HookspecOpts(TypedDict):
class HookimplOpts(TypedDict):
class HookspecMarker:
class HookimplMarker:
def normalize_hookimpl_opts(opts: HookimplOpts) -> None:
def varnames(func: object) -> tuple[tuple[str, ...], tuple[str, ...]]:
class HookRelay:
class HookCaller:
class _SubsetHookCaller(HookCaller):
class HookImpl:
class HookSpec:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_manager.py
-----------------------------
>     """Plugin failed validation.
  
      :param plugin: The plugin which failed validation.
      :param message: Error message.
def _warn_for_function(warning: Warning, function: Callable[..., object]) -> None:
class PluginValidationError(Exception):
class DistFacade:
class PluginManager:
def _formatdef(func: Callable[..., object]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_result.py
-----------------------------
> """
  Hook wrapper "result" utilities.
class HookCallError(Exception):
class Result(Generic[ResultType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_tracing.py
-----------------------------
> """
  Tracing utils
class TagTracer:
class TagTracerSub:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\_warnings.py
-----------------------------
>     """Base class for all warnings emitted by pluggy."""
  
      __module__ = "pluggy"
  
class PluggyWarning(UserWarning):
class PluggyTeardownRaisedWarning(PluggyWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pluggy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\autoupdate.py
-----------------------------
>     """detect `rev:` lines or reformat the file"""
      with open(path, newline='') as f:
          original = f.read()
  
class RevInfo(NamedTuple):
class RepositoryCannotBeUpdatedError(RuntimeError):
def _check_hooks_still_exist_at_rev(
def _update_one(
def _original_lines(
def _write_new_config(path: str, rev_infos: list[RevInfo | None]) -> None:
def autoupdate(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\clean.py
-----------------------------
def clean(store: Store) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\gc.py
-----------------------------
def _mark_used_repos(
def _gc_repos(store: Store) -> int:
def gc(store: Store) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\hook_impl.py
-----------------------------
def _run_legacy(
def _validate_config(
def _ns(
def _rev_exists(rev: str) -> bool:
def _pre_push_ns(
def _check_args_length(hook_type: str, args: Sequence[str]) -> None:
def _run_ns(
def hook_impl(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\init_templatedir.py
-----------------------------
def init_templatedir(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\install_uninstall.py
-----------------------------
def _hook_types(cfg_filename: str, hook_types: list[str] | None) -> list[str]:
def _hook_paths(
def is_our_script(filename: str) -> bool:
def _install_hook_script(
def install(
def install_hooks(config_file: str, store: Store) -> int:
def _uninstall_hook_script(hook_type: str) -> None:
def uninstall(config_file: str, hook_types: list[str] | None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\migrate_config.py
-----------------------------
def _is_header_line(line: str) -> bool:
def _migrate_map(contents: str) -> str:
def _preserve_style(n: ScalarNode, *, s: str) -> str:
def _fix_stage(n: ScalarNode) -> str:
def _migrate_composed(contents: str) -> str:
def migrate_config(config_file: str, quiet: bool = False) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\run.py
-----------------------------
>     """Compute the number of columns to display hook messages.  The widest
      that will be displayed is in the no files skipped case:
  
          Hook name...(no files to check) Skipped
def _len_cjk(msg: str) -> int:
def _start_msg(*, start: str, cols: int, end_len: int) -> str:
def _full_msg(
def filter_by_include_exclude(
class Classifier:
def _get_skips(environ: MutableMapping[str, str]) -> set[str]:
def _subtle_line(s: str, use_color: bool) -> None:
def _run_single_hook(
def _compute_cols(hooks: Sequence[Hook]) -> int:
def _all_filenames(args: argparse.Namespace) -> Iterable[str]:
def _get_diff() -> bytes:
def _run_hooks(
def _has_unmerged_paths() -> bool:
def _has_unstaged_config(config_file: str) -> bool:
def run(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\sample_config.py
-----------------------------
def sample_config() -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\try_repo.py
-----------------------------
def _repo_ref(tmpdir: str, repo: str, ref: str | None) -> tuple[str, str]:
def try_repo(args: argparse.Namespace) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\validate_config.py
-----------------------------
def validate_config(filenames: Sequence[str]) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\validate_manifest.py
-----------------------------
def validate_manifest(filenames: Sequence[str]) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\commands\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\conda.py
-----------------------------
def get_env_patch(env: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def _conda_exe() -> str:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\coursier.py
-----------------------------
def install_environment(
def get_env_patch(target_dir: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\dart.py
-----------------------------
def get_env_patch(venv: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\docker.py
-----------------------------
def _is_in_docker() -> bool:
def _get_container_id() -> str:
def _get_docker_path(path: str) -> str:
def md5(s: str) -> str:  # pragma: win32 no cover
def docker_tag(prefix: Prefix) -> str:  # pragma: win32 no cover
def build_docker_image(
def install_environment(
def _is_rootless() -> bool:  # pragma: win32 no cover
def get_docker_user() -> tuple[str, ...]:  # pragma: win32 no cover
def get_docker_tty(*, color: bool) -> tuple[str, ...]:  # pragma: win32 no cover  # noqa: E501
def docker_cmd(*, color: bool) -> tuple[str, ...]:  # pragma: win32 no cover
def run_hook(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\docker_image.py
-----------------------------
def run_hook(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\dotnet.py
-----------------------------
def get_env_patch(venv: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def _nuget_config_no_sources() -> Generator[str]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\fail.py
-----------------------------
def run_hook(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\golang.py
-----------------------------
class ExtractAll(Protocol):
def get_default_version() -> str:
def get_env_patch(venv: str, version: str) -> PatchesT:
def _infer_go_version(version: str) -> str:
def _get_url(version: str) -> str:
def _install_go(version: str, dest: str) -> None:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\haskell.py
-----------------------------
def get_env_patch(target_dir: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\julia.py
-----------------------------
>         julia_code = """
          @assert length(ARGS) > 0
          hook_env = ARGS[1]
          deps = join(ARGS[2:end], " ")
def run_hook(
def get_env_patch(target_dir: str, version: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\lua.py
-----------------------------
>     """Get the Lua version used in file paths."""
      _, stdout, _ = cmd_output('luarocks', 'config', '--lua-ver')
      return stdout.strip()
  
def _get_lua_version() -> str:  # pragma: win32 no cover
def get_env_patch(d: str) -> PatchesT:  # pragma: win32 no cover
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\node.py
-----------------------------
def get_default_version() -> str:
def get_env_patch(venv: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def health_check(prefix: Prefix, version: str) -> str | None:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\perl.py
-----------------------------
def get_env_patch(venv: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\pygrep.py
-----------------------------
def _process_filename_by_line(pattern: Pattern[bytes], filename: str) -> int:
def _process_filename_at_once(pattern: Pattern[bytes], filename: str) -> int:
def _process_filename_by_line_negated(
def _process_filename_at_once_negated(
class Choice(NamedTuple):
def run_hook(
def main(argv: Sequence[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\python.py
-----------------------------
>     """On windows there's a different directory for the virtualenv"""
      bin_part = 'Scripts' if sys.platform == 'win32' else 'bin'
      return os.path.join(venv, bin_part)
  
def _version_info(exe: str) -> str:
def _read_pyvenv_cfg(filename: str) -> dict[str, str]:
def bin_dir(venv: str) -> str:
def get_env_patch(venv: str) -> PatchesT:
def _find_by_py_launcher(
def _impl_exe_name() -> str:
def _find_by_sys_executable() -> str | None:
def get_default_version() -> str:  # pragma: no cover (platform dependent)
def _sys_executable_matches(version: str) -> bool:
def norm_version(version: str) -> str | None:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def health_check(prefix: Prefix, version: str) -> str | None:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\r.py
-----------------------------
>     """
      To avoid quoting and escaping issues, avoid `Rscript [options] -e {expr}`
      but use `Rscript [options] path/to/file_with_expr.R`
def _execute_r(
def _execute_r_in_renv(
def _execute_vanilla_r(
def _read_installed_version(envdir: str, prefix: Prefix, version: str) -> str:
def _read_executable_version(envdir: str, prefix: Prefix, version: str) -> str:
def _write_current_r_version(
def health_check(prefix: Prefix, version: str) -> str | None:
def _r_code_in_tempfile(code: str) -> Generator[str]:
def get_env_patch(venv: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def _prefix_if_file_entry(
def _rscript_exec() -> str:
def _entry_validate(entry: list[str]) -> None:
def _cmd_from_hook(
def install_environment(
def _inline_r_setup(code: str) -> str:
def run_hook(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\ruby.py
-----------------------------
def _resource_bytesio(filename: str) -> IO[bytes]:
def get_default_version() -> str:
def get_env_patch(
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def _extract_resource(filename: str, dest: str) -> None:
def _install_rbenv(
def _install_ruby(
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\rust.py
-----------------------------
>     """Transform the language version into a rust toolchain version."""
      if language_version == C.DEFAULT:
          return 'stable'
      else:
def get_default_version() -> str:
def _rust_toolchain(language_version: str) -> str:
def get_env_patch(target_dir: str, version: str) -> PatchesT:
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def _add_dependencies(
def install_rust_with_toolchain(toolchain: str, envdir: str) -> None:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\script.py
-----------------------------
def run_hook(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\swift.py
-----------------------------
def get_env_patch(venv: str) -> PatchesT:  # pragma: win32 no cover
def in_env(prefix: Prefix, version: str) -> Generator[None]:
def install_environment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\system.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\languages\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\meta_hooks\check_hooks_apply.py
-----------------------------
def check_all_hooks_match_files(config_file: str) -> int:
def main(argv: Sequence[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\meta_hooks\check_useless_excludes.py
-----------------------------
def exclude_matches_any(
def check_useless_excludes(config_file: str) -> int:
def main(argv: Sequence[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\meta_hooks\identity.py
-----------------------------
def main(argv: Sequence[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\meta_hooks\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\resources\empty_template_setup.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\resources\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\all_languages.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\clientlib.py
-----------------------------
>     """poor man's version comparison"""
      return tuple(int(p) for p in s.split('.'))
  
  
def check_type_tag(tag: str) -> None:
def parse_version(s: str) -> tuple[int, ...]:
def check_min_version(version: str) -> None:
def transform_stage(stage: str) -> str:
def warn_for_stages_on_repo_init(repo: str, directory: str) -> None:
class StagesMigrationNoDefault(NamedTuple):
class StagesMigration(StagesMigrationNoDefault):
class DeprecatedStagesWarning(NamedTuple):
class DeprecatedDefaultStagesWarning(NamedTuple):
class InvalidManifestError(FatalError):
class WarnMutableRev(cfgv.Conditional):
class OptionalSensibleRegexAtHook(cfgv.OptionalNoDefault):
class OptionalSensibleRegexAtTop(cfgv.OptionalNoDefault):
def _entry(modname: str) -> str:
def warn_unknown_keys_root(
def warn_unknown_keys_repo(
class NotAllowed(cfgv.OptionalNoDefault):
class InvalidConfigError(FatalError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\color.py
-----------------------------
>     """Format text with color.
  
      Args:
          text - Text to be formatted with color if `use_color`
def format_color(text: str, color: str, use_color_setting: bool) -> str:
def use_color(setting: str) -> bool:
def add_color_option(parser: argparse.ArgumentParser) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\constants.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\envcontext.py
-----------------------------
>     """In this context, `os.environ` is modified according to `patch`.
  
      `patch` is an iterable of 2-tuples (key, value):
          `key`: string
class Var(NamedTuple):
def format_env(parts: SubstitutionT, env: MutableMapping[str, str]) -> str:
def envcontext(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\errors.py
-----------------------------
class FatalError(RuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\error_handler.py
-----------------------------
def _log_and_exit(
def error_handler() -> Generator[None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\file_lock.py
-----------------------------
def lock(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\git.py
-----------------------------
>     """See https://github.com/pre-commit/pre-commit/issues/354"""
      if sys.platform in ('cygwin', 'win32'):  # pragma: no cover (windows)
          is_cygwin_python = sys.platform == 'cygwin'
          try:
def zsplit(s: str) -> list[str]:
def no_git_env(_env: Mapping[str, str] | None = None) -> dict[str, str]:
def get_root() -> str:
def get_git_dir(git_root: str = '.') -> str:
def get_git_common_dir(git_root: str = '.') -> str:
def is_in_merge_conflict() -> bool:
def parse_merge_msg_for_conflicts(merge_msg: bytes) -> list[str]:
def get_conflicted_files() -> set[str]:
def get_staged_files(cwd: str | None = None) -> list[str]:
def intent_to_add_files() -> list[str]:
def get_all_files() -> list[str]:
def get_changed_files(old: str, new: str) -> list[str]:
def head_rev(remote: str) -> str:
def has_diff(*args: str, repo: str = '.') -> bool:
def has_core_hookpaths_set() -> bool:
def init_repo(path: str, remote: str) -> None:
def commit(repo: str = '.') -> None:
def git_path(name: str, repo: str = '.') -> str:
def check_for_cygwin_mismatch() -> None:
def get_best_candidate_tag(rev: str, git_repo: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\hook.py
-----------------------------
class Hook(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\lang_base.py
-----------------------------
>     """Deterministically shuffle"""
      fixed_random = random.Random()
      fixed_random.seed(FIXED_RANDOM_SEED, version=1)
  
class Language(Protocol):
def exe_exists(exe: str) -> bool:
def setup_cmd(prefix: Prefix, cmd: tuple[str, ...], **kwargs: Any) -> None:
def environment_dir(prefix: Prefix, d: str, language_version: str) -> str:
def assert_version_default(binary: str, version: str) -> None:
def assert_no_additional_deps(
def basic_get_default_version() -> str:
def basic_health_check(prefix: Prefix, language_version: str) -> str | None:
def no_install(
def no_env(prefix: Prefix, version: str) -> Generator[None]:
def target_concurrency() -> int:
def _shuffled(seq: Sequence[str]) -> list[str]:
def run_xargs(
def hook_cmd(entry: str, args: Sequence[str]) -> tuple[str, ...]:
def basic_run_hook(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\logging_handler.py
-----------------------------
class LoggingHandler(logging.Handler):
def logging_handler(use_color: bool) -> Generator[None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\main.py
-----------------------------
def _add_config_option(parser: argparse.ArgumentParser) -> None:
def _add_hook_type_option(parser: argparse.ArgumentParser) -> None:
def _add_run_options(parser: argparse.ArgumentParser) -> None:
def _adjust_args_and_chdir(args: argparse.Namespace) -> None:
def main(argv: Sequence[str] | None = None) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\output.py
-----------------------------
def write(s: str, stream: IO[bytes] = sys.stdout.buffer) -> None:
def write_line_b(
def write_line(s: str | None = None, **kwargs: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\parse_shebang.py
-----------------------------
>     """Fixes for the following issues on windows
      - https://bugs.python.org/issue8557
      - windows does not parse shebangs
  
class ExecutableNotFoundError(OSError):
def parse_filename(filename: str) -> tuple[str, ...]:
def find_executable(
def normexe(orig: str, *, env: Mapping[str, str] | None = None) -> str:
def normalize_cmd(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\prefix.py
-----------------------------
class Prefix(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\repository.py
-----------------------------
def _state_filename_v1(venv: str) -> str:
def _state_filename_v2(venv: str) -> str:
def _state(additional_deps: Sequence[str]) -> object:
def _read_state(venv: str) -> object | None:
def _hook_installed(hook: Hook) -> bool:
def _hook_install(hook: Hook) -> None:
def _hook(
def _non_cloned_repository_hooks(
def _cloned_repository_hooks(
def _repository_hooks(
def install_hook_envs(hooks: Sequence[Hook], store: Store) -> None:
def all_hooks(root_config: dict[str, Any], store: Store) -> tuple[Hook, ...]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\staged_files_only.py
-----------------------------
>     """Clear any unstaged changes from the git working directory inside this
      context.
def _git_apply(patch: str) -> None:
def _intent_to_add_cleared() -> Generator[None]:
def _unstaged_changes_cleared(patch_dir: str) -> Generator[None]:
def staged_files_only(patch_dir: str) -> Generator[None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\store.py
-----------------------------
>     """Returns the default directory for the Store.  This is intentionally
      underscored to indicate that `Store.get_default_directory` is the intended
      way to get this information.  This is also done so
      `Store.get_default_directory` can be mocked in tests and
def _get_default_directory() -> str:
def _make_local_repo(directory: str) -> None:
class Store:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\util.py
-----------------------------
>     """Cleans up the directory on an exceptional failure."""
      try:
          yield
      except BaseException:
def force_bytes(exc: Any) -> bytes:
def clean_path_on_failure(path: str) -> Generator[None]:
def resource_text(filename: str) -> str:
def make_executable(filename: str) -> None:
class CalledProcessError(RuntimeError):
def _setdefault_kwargs(kwargs: dict[str, Any]) -> None:
def _oserror_to_output(e: OSError) -> tuple[int, bytes, None]:
def cmd_output_b(
def cmd_output(*cmd: str, **kwargs: Any) -> tuple[int, str, str | None]:
def _handle_readonly(
def win_exe(s: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\xargs.py
-----------------------------
>     """A simplified implementation of xargs.
  
      color: Make a pty if on a platform that supports it
      target_concurrency: Target number of partitions to run concurrently
def cpu_count() -> int:
def _environ_size(_env: MutableMapping[str, str] | None = None) -> int:
def _get_platform_max_length() -> int:  # pragma: no cover (platform specific)
def _command_length(*cmd: str) -> int:
class ArgumentTooLongError(RuntimeError):
def partition(
def _thread_mapper(maxsize: int) -> Generator[
def xargs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\yaml.py
-----------------------------
def yaml_dump(o: Any, **kwargs: Any) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\yaml_rewrite.py
-----------------------------
class _Matcher(Protocol):
class MappingKey(NamedTuple):
class MappingValue(NamedTuple):
class SequenceItem(NamedTuple):
def _match(gen: Iterable[Node], m: _Matcher) -> Iterable[Node]:
def match(n: Node, matcher: tuple[_Matcher, ...]) -> Generator[ScalarNode]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pre_commit\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\bridge\graphite.py
-----------------------------
def _sanitize(s):
class _RegularPush(threading.Thread):
class GraphiteBridge:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\bridge\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\openmetrics\exposition.py
-----------------------------
> """Content type of the latest OpenMetrics text format"""
  
  
  def _is_valid_exemplar_metric(metric, sample):
def _is_valid_exemplar_metric(metric, sample):
def generate_latest(registry):
def escape_metric_name(s: str) -> str:
def escape_label_name(s: str) -> str:
def _escape(s: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\openmetrics\parser.py
-----------------------------
>     """Parse Openmetrics text format from a unicode string.
  
      See text_fd_to_metric_families.
def text_string_to_metric_families(text):
def _isUncanonicalNumber(s):
def _replace_escape_sequence(match):
def _replace_escaping(s):
def _unescape_help(text):
def _parse_timestamp(timestamp):
def _is_character_escaped(s, charpos):
def _parse_sample(text):
def _parse_remaining_text(text):
def _parse_nh_sample(text, suffixes):
def _parse_nh_struct(text):
def _compose_spans(span_matches, spans_name):
def _compose_deltas(deltas, deltas_name):
def _group_for_sample(sample, name, typ):
def _check_histogram(samples, name):
def text_fd_to_metric_families(fd):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\openmetrics\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\twisted\_exposition.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\twisted\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\asgi.py
-----------------------------
>     """Create a ASGI app which serves the metrics from a registry."""
  
      async def prometheus_app(scope, receive, send):
          assert scope.get("type") == "http"
def make_asgi_app(registry: CollectorRegistry = REGISTRY, disable_compression: bool = False) -> Callable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\context_managers.py
-----------------------------
class ExceptionCounter:
class InprogressTracker:
class Timer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\core.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\decorator.py
-----------------------------
> """
  Decorator module, see http://pypi.python.org/pypi/decorator
  for the documentation.
def getargspec(f):
class FunctionMaker(object):
def decorate(func, caller):
def decorator(caller, _func=None):
class ContextManager(_GeneratorContextManager):
def append(a, vancestors):
def dispatch_on(*dispatch_args):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\exposition.py
-----------------------------
> """Content type of the latest text format"""
  
  
  class _PrometheusRedirectHandler(HTTPRedirectHandler):
class _PrometheusRedirectHandler(HTTPRedirectHandler):
def _bake_output(registry, accept_header, accept_encoding_header, params, disable_compression):
def make_wsgi_app(registry: CollectorRegistry = REGISTRY, disable_compression: bool = False) -> Callable:
class _SilentHandler(WSGIRequestHandler):
class ThreadingWSGIServer(ThreadingMixIn, WSGIServer):
def _get_best_family(address, port):
def _get_ssl_ctx(
def start_wsgi_server(
def generate_latest(registry: CollectorRegistry = REGISTRY) -> bytes:
def choose_encoder(accept_header: str) -> Tuple[Callable[[CollectorRegistry], bytes], str]:
def gzip_accepted(accept_encoding_header: str) -> bool:
class MetricsHandler(BaseHTTPRequestHandler):
def write_to_textfile(path: str, registry: CollectorRegistry) -> None:
def _make_handler(
def default_handler(
def passthrough_redirect_handler(
def basic_auth_handler(
def tls_auth_handler(
def push_to_gateway(
def pushadd_to_gateway(
def delete_from_gateway(
def _use_gateway(
def _escape_grouping_key(k, v):
def instance_ip_grouping_key() -> Dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\gc_collector.py
-----------------------------
>     """Collector for Garbage collection statistics."""
  
      def __init__(self, registry: CollectorRegistry = REGISTRY):
          if not hasattr(gc, 'get_stats') or platform.python_implementation() != 'CPython':
class GCCollector(Collector):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\metrics.py
-----------------------------
>     """Disable exporting _created metrics on counters, histograms, and summaries."""
      global _use_created
      _use_created = False
  
def _build_full_name(metric_type, name, namespace, subsystem, unit):
def _get_use_created() -> bool:
def disable_created_metrics():
def enable_created_metrics():
class MetricWrapperBase(Collector):
class Counter(MetricWrapperBase):
class Gauge(MetricWrapperBase):
class Summary(MetricWrapperBase):
class Histogram(MetricWrapperBase):
class Info(MetricWrapperBase):
class Enum(MetricWrapperBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\metrics_core.py
-----------------------------
>     """A single metric family and its samples.
  
      This is intended only for internal use by the instrumentation client.
  
class Metric:
class UnknownMetricFamily(Metric):
class CounterMetricFamily(Metric):
class GaugeMetricFamily(Metric):
class SummaryMetricFamily(Metric):
class HistogramMetricFamily(Metric):
class GaugeHistogramMetricFamily(Metric):
class InfoMetricFamily(Metric):
class StateSetMetricFamily(Metric):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\mmap_dict.py
-----------------------------
>     """Yield (key, value, timestamp, pos). No locking is performed."""
  
      if used <= 0:
          # If not valid `used` value is passed in, read it from the file.
def _pack_two_doubles(data, pos, value, timestamp):
def _pack_integer(data, pos, value):
def _read_all_values(data, used=0):
class MmapedDict:
def mmap_key(metric_name: str, name: str, labelnames: List[str], labelvalues: List[str], help_text: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\multiprocess.py
-----------------------------
>     """Collector for files for multi-process mode."""
  
      def __init__(self, registry, path=None):
          if path is None:
class MultiProcessCollector:
def mark_process_dead(pid, path=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\parser.py
-----------------------------
>     """Parse Prometheus text format from a unicode string.
  
      See text_fd_to_metric_families.
def text_string_to_metric_families(text: str) -> Iterable[Metric]:
def replace_escape_sequence(match: Match[str]) -> str:
def _replace_help_escaping(s: str) -> str:
def _replace_escaping(s: str) -> str:
def _is_character_escaped(s: str, charpos: int) -> bool:
def parse_labels(labels_string: str, openmetrics: bool = False) -> Dict[str, str]:
def _next_term(text: str, openmetrics: bool) -> Tuple[str, str]:
def _next_unquoted_char(text: str, chs: str, startidx: int = 0) -> int:
def _last_unquoted_char(text: str, chs: str) -> int:
def _split_quoted(text, separator, maxsplit=0):
def _unquote_unescape(text):
def _parse_value_and_timestamp(s: str) -> Tuple[float, Optional[float]]:
def _parse_value(value):
def _parse_sample(text):
def text_fd_to_metric_families(fd: TextIO) -> Iterable[Metric]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\platform_collector.py
-----------------------------
>     """Collector for python platform information"""
  
      def __init__(self,
                   registry: Optional[CollectorRegistry] = REGISTRY,
class PlatformCollector(Collector):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\process_collector.py
-----------------------------
>     """Collector for Standard Exports such as cpu and memory."""
  
      def __init__(self,
                   namespace: str = '',
class ProcessCollector(Collector):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\registry.py
-----------------------------
>     """Metric collector registry.
  
      Collectors must have a no-argument method 'collect' that returns a list of
      Metric objects. The returned metrics should be consistent with the Prometheus
class Collector(ABC):
class _EmptyCollector(Collector):
class CollectorRegistry(Collector):
class RestrictedRegistry:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\samples.py
-----------------------------
>     """A nanosecond-resolution timestamp."""
  
      def __init__(self, sec: float, nsec: float) -> None:
          if nsec < 0 or nsec >= 1e9:
class Timestamp:
class BucketSpan(NamedTuple):
class NativeHistogram(NamedTuple):
class Exemplar(NamedTuple):
class Sample(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\utils.py
-----------------------------
def floatToGoString(d):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\validation.py
-----------------------------
>     """Retrieve name validation setting from environment."""
      return os.environ.get("PROMETHEUS_LEGACY_NAME_VALIDATION", 'False').lower() in ('true', 
'1', 't')
  
  
def _init_legacy_validation() -> bool:
def get_legacy_validation() -> bool:
def disable_legacy_validation():
def enable_legacy_validation():
def _validate_metric_name(name: str) -> None:
def _is_valid_legacy_metric_name(name: str) -> bool:
def _validate_metric_label_name_token(tok: str) -> None:
def _validate_labelname(l):
def _is_valid_legacy_labelname(l: str) -> bool:
def _validate_labelnames(cls, labelnames):
def _validate_exemplar(exemplar):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\values.py
-----------------------------
>     """A float protected by a mutex."""
  
      _multiprocess = False
  
class MutexValue:
def MultiProcessValue(process_identifier=os.getpid):
def get_value_class():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\prometheus_client\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\interchange\buffer.py
-----------------------------
>     """Integer enum for device type codes matching DLPack."""
  
      CPU = 1
      CUDA = 2
class DlpackDeviceType(enum.IntEnum):
class _PyArrowBuffer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\interchange\column.py
-----------------------------
>     """
      Integer enum for data types.
  
      Attributes
class DtypeKind(enum.IntEnum):
class ColumnNullType(enum.IntEnum):
class ColumnBuffers(TypedDict):
class CategoricalDescription(TypedDict):
class Endianness:
class NoBufferPresent(Exception):
class _PyArrowColumn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\interchange\dataframe.py
-----------------------------
>     """
      A data frame class, with only the methods required by the interchange
      protocol defined.
  
class _PyArrowDataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\interchange\from_dataframe.py
-----------------------------
>     """
      Build a ``pa.Table`` from any DataFrame supporting the interchange protocol.
  
      Parameters
def from_dataframe(df: DataFrameObject, allow_copy=True) -> pa.Table:
def _from_dataframe(df: DataFrameObject, allow_copy=True):
def protocol_df_chunk_to_pyarrow(
def column_to_array(
def bool_column_to_array(
def categorical_column_to_dictionary(
def parse_datetime_format_str(format_str):
def map_date_type(data_type):
def buffers_to_array(
def validity_buffer_from_mask(
def validity_buffer_nan_sentinel(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\interchange\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\parquet\core.py
-----------------------------
>     """
      Check if filters are well-formed.
def _check_contains_null(val):
def _check_filters(filters, check_null_strings=True):
def filters_to_expression(filters):
class ParquetFile:
def _sanitized_spark_field_name(name):
def _sanitize_schema(schema, flavor):
def _sanitize_table(table, new_schema, flavor):
class ParquetWriter:
def _get_pandas_index_columns(keyvalues):
class ParquetDataset:
def read_table(source, *, columns=None, use_threads=True,
def read_pandas(source, columns=None, **kwargs):
def write_table(table, where, row_group_size=None, version='2.6',
def write_to_dataset(table, root_path, partition_cols=None,
def write_metadata(schema, where, metadata_collector=None, filesystem=None,
def read_metadata(where, memory_map=False, decryption_properties=None,
def read_schema(where, memory_map=False, decryption_properties=None,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\parquet\encryption.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\parquet\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\interchange\test_conversion.py
-----------------------------
def test_datetime(unit, tz):
def test_array_to_pyarrowcolumn(test_data, kind):
def test_offset_of_sliced_array():
def test_pandas_roundtrip(uint, int, float, np_float_str):
def test_pandas_roundtrip_string():
def test_pandas_roundtrip_large_string():
def test_pandas_roundtrip_string_with_missing():
def test_pandas_roundtrip_categorical():
def test_pandas_roundtrip_datetime(unit):
def test_pandas_to_pyarrow_with_missing(np_float_str):
def test_pandas_to_pyarrow_float16_with_missing():
def test_pyarrow_roundtrip(uint, int, float, np_float_str,
def test_pyarrow_roundtrip_categorical(offset, length):
def test_pyarrow_roundtrip_large_string():
def test_nan_as_null():
def test_allow_copy_false():
def test_allow_copy_false_bool_categorical():
def test_empty_dataframe():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\interchange\test_interchange_spec.py
-----------------------------
def test_dtypes(arr):
def test_mixed_dtypes(uint, uint_bw, int, int_bw,
def test_na_float():
def test_noncategorical():
def test_categorical(use_batch):
def test_dataframe(use_batch):
def test_df_get_chunks(use_batch, size, n_chunks):
def test_column_get_chunks(use_batch, size, n_chunks):
def test_get_columns(uint, int, float, np_float_str, use_batch):
def test_buffer(int, use_batch):
def test_categorical_dtype(indices_type, bitwidth, f_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\interchange\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\common.py
-----------------------------
def _write_table(table, path, **kwargs):
def _read_table(*args, **kwargs):
def _roundtrip_table(table, read_table_kwargs=None,
def _check_roundtrip(table, expected=None, read_table_kwargs=None,
def _roundtrip_pandas_dataframe(df, write_kwargs):
def _random_integers(size, dtype):
def _range_integers(size, dtype):
def _test_dataframe(size=10000, seed=0):
def make_sample_file(table_or_df):
def alltypes_sample(size=10000, seed=0, categorical=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\conftest.py
-----------------------------
def datadir(base_datadir):
def parquet_test_datadir():
def s3_bucket(s3_server):
def s3_example_s3fs(s3_server, s3_bucket):
def s3_example_fs(s3_server):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\encryption.py
-----------------------------
>     """This is a mock class implementation of KmsClient, built for testing
      only.
class InMemoryKmsClient(pe.KmsClient):
def verify_file_encrypted(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_basic.py
-----------------------------
>     """Check that checksum verification works for datasets created with
def test_parquet_invalid_version(tempdir):
def test_set_data_page_size():
def test_set_write_batch_size():
def test_set_dictionary_pagesize_limit():
def test_chunked_table_write():
def test_memory_map(tempdir):
def test_enable_buffered_stream(tempdir):
def test_special_chars_filename(tempdir):
def test_invalid_source():
def test_read_table_without_dataset(tempdir):
def test_file_with_over_int16_max_row_groups():
def test_empty_table_roundtrip():
def test_empty_table_no_columns():
def test_write_nested_zero_length_array_chunk_failure():
def test_multiple_path_types(tempdir):
def test_fspath(tempdir):
def test_relative_paths(tempdir, filesystem, name):
def test_read_non_existing_file():
def test_file_error_python_exception():
def test_parquet_read_from_buffer(tempdir):
def test_byte_stream_split():
def test_store_decimal_as_integer(tempdir):
def test_column_encoding():
def test_compression_level():
def test_sanitized_spark_field_names():
def test_multithreaded_read():
def test_min_chunksize():
def test_write_error_deletes_incomplete_file(tempdir):
def test_read_non_existent_file(tempdir):
def test_read_table_doesnt_warn(datadir):
def test_zlib_compression_bug():
def test_parquet_file_too_small(tempdir):
def test_fastparquet_cross_compatibility(tempdir):
def test_buffer_contents(
def test_parquet_compression_roundtrip(tempdir):
def test_empty_row_groups(tempdir):
def test_reads_over_batch(tempdir):
def test_permutation_of_column_order(tempdir):
def test_thrift_size_limits(tempdir):
def test_page_checksum_verification_write_table(tempdir):
def test_checksum_write_to_dataset(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_compliant_nested_type.py
-----------------------------
def test_write_compliant_nested_type_enable(tempdir, test_data):
def test_write_compliant_nested_type_disable(tempdir, test_data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_dataset.py
-----------------------------
>     """Verify kwargs in pq.write_to_dataset are passed onto ds.write_dataset"""
      import pyarrow.dataset as ds
  
      table = pa.table({"a": [1, 2, 3]})
def test_filesystem_uri(tempdir):
def test_read_partitioned_directory(tempdir):
def test_read_partitioned_columns_selection(tempdir):
def test_filters_equivalency(tempdir):
def test_filters_cutoff_exclusive_integer(tempdir):
def test_filters_cutoff_exclusive_datetime(tempdir):
def test_filters_inclusive_datetime(tempdir):
def test_filters_inclusive_integer(tempdir):
def test_filters_inclusive_set(tempdir):
def test_filters_invalid_pred_op(tempdir):
def test_filters_invalid_column(tempdir):
def test_filters_read_table(tempdir, filters, read_method):
def test_partition_keys_with_underscores(tempdir):
def test_read_s3fs(s3_example_s3fs, ):
def test_read_directory_s3fs(s3_example_s3fs):
def test_read_single_file_list(tempdir):
def test_read_partitioned_directory_s3fs(s3_example_s3fs):
def _partition_test_for_filesystem(fs, base_path):
def _generate_partition_directories(fs, base_dir, partition_spec, df):
def _filter_partition(df, part_keys):
def test_filter_before_validate_schema(tempdir):
def test_read_multiple_files(tempdir):
def test_dataset_read_pandas(tempdir):
def test_dataset_memory_map(tempdir):
def test_dataset_enable_buffered_stream(tempdir):
def test_dataset_enable_pre_buffer(tempdir):
def _make_example_multifile_dataset(base_path, nfiles=10, file_nrows=5):
def _assert_dataset_paths(dataset, paths):
def test_ignore_private_directories(tempdir, dir_prefix):
def test_ignore_hidden_files_dot(tempdir):
def test_ignore_hidden_files_underscore(tempdir):
def test_ignore_no_private_directories_in_base_path(tempdir, dir_prefix):
def test_ignore_custom_prefixes(tempdir):
def test_empty_directory(tempdir):
def _test_write_to_dataset_with_partitions(base_path,
def _test_write_to_dataset_no_partitions(base_path,
def test_write_to_dataset_with_partitions(tempdir):
def test_write_to_dataset_with_partitions_and_schema(tempdir):
def test_write_to_dataset_with_partitions_and_index_name(tempdir):
def test_write_to_dataset_no_partitions(tempdir):
def test_write_to_dataset_pathlib(tempdir):
def test_write_to_dataset_pathlib_nonlocal(tempdir, s3_example_s3fs):
def test_write_to_dataset_with_partitions_s3fs(s3_example_s3fs):
def test_write_to_dataset_no_partitions_s3fs(s3_example_s3fs):
def test_write_to_dataset_filesystem(tempdir):
def _make_dataset_for_pickling(tempdir, N=100):
def test_pickle_dataset(tempdir, pickle_module):
def test_partitioned_dataset(tempdir):
def test_dataset_read_dictionary(tempdir):
def test_read_table_schema(tempdir):
def test_read_table_duplicate_column_selection(tempdir):
def test_dataset_partitioning(tempdir):
def test_parquet_dataset_new_filesystem(tempdir):
def test_parquet_dataset_partitions_piece_path_with_fsspec(tempdir):
def test_parquet_write_to_dataset_exposed_keywords(tempdir):
def test_write_to_dataset_kwargs_passed(tempdir, write_dataset_kwarg):
def test_write_to_dataset_category_observed(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_data_types.py
-----------------------------
def test_parquet_2_6_roundtrip(tempdir, chunk_size):
def test_parquet_1_0_roundtrip(tempdir):
def _simple_table_write_read(table):
def test_direct_read_dictionary():
def test_direct_read_dictionary_subfield():
def test_dictionary_array_automatically_read():
def test_decimal_roundtrip(tempdir):
def test_decimal_roundtrip_negative_scale(tempdir):
def test_single_pylist_column_roundtrip(tempdir, dtype,):
def test_empty_lists_table_roundtrip():
def test_nested_list_nonnullable_roundtrip_bug():
def test_nested_list_struct_multiple_batches_roundtrip(tempdir):
def test_writing_empty_lists():
def test_column_of_arrays(tempdir):
def test_column_of_lists(tempdir):
def test_large_list_records():
def test_list_types():
def test_parquet_nested_convenience(tempdir):
def test_fixed_size_binary():
def test_binary_types():
def test_large_table_int32_overflow():
def _simple_table_roundtrip(table, **write_kwargs):
def test_byte_array_exactly_2gb():
def test_binary_array_overflow_to_chunked():
def test_list_of_binary_large_cell():
def test_large_binary_and_binary_view():
def test_large_binary_and_binary_view_huge():
def test_large_binary_overflow():
def test_json_extension_type(storage_type):
def test_uuid_extension_type():
def test_undefined_logical_type(parquet_test_datadir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_datetime.py
-----------------------------
>     """
      ARROW-2555: Test that we can truncate timestamps when coercing if
      explicitly allowed.
def test_pandas_parquet_datetime_tz():
def test_datetime_timezone_tzinfo():
def test_coerce_timestamps(tempdir):
def test_coerce_timestamps_truncated(tempdir):
def test_date_time_types(tempdir):
def test_coerce_int96_timestamp_unit(unit):
def test_coerce_int96_timestamp_overflow(pq_reader_method, tempdir):
def test_timestamp_restore_timezone(unit):
def test_timestamp_restore_timezone_nanosecond():
def test_list_of_datetime_time_roundtrip():
def test_parquet_version_timestamp_differences():
def test_noncoerced_nanoseconds_written_without_exception(tempdir):
def test_duration_type():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_encryption.py
-----------------------------
>     """
      Sets up and returns the KMS connection configuration and crypto factory
      based on provided KMS configuration parameters.
def data_table():
def basic_encryption_config():
def setup_encryption_environment(custom_kms_conf):
def write_encrypted_file(path, data_table, footer_key_name, col_key_name,
def test_encrypted_parquet_write_read(tempdir, data_table):
def test_uniform_encrypted_parquet_write_read(tempdir, data_table):
def write_encrypted_parquet(path, table, encryption_config,
def read_encrypted_parquet(path, decryption_config,
def test_encrypted_parquet_write_read_wrong_key(tempdir, data_table):
def test_encrypted_parquet_read_no_decryption_config(tempdir, data_table):
def test_encrypted_parquet_read_metadata_no_decryption_config(
def test_encrypted_parquet_read_schema_no_decryption_config(
def test_encrypted_parquet_write_no_col_key(tempdir, data_table):
def test_encrypted_parquet_write_col_key_and_uniform_encryption(tempdir, data_table):
def test_encrypted_parquet_write_kms_error(tempdir, data_table,
def test_encrypted_parquet_write_kms_specific_error(tempdir, data_table,
def test_encrypted_parquet_write_kms_factory_error(tempdir, data_table,
def test_encrypted_parquet_write_kms_factory_type_error(
def test_encrypted_parquet_encryption_configuration():
def test_encrypted_parquet_decryption_configuration():
def test_encrypted_parquet_kms_configuration():
def test_encrypted_parquet_write_read_plain_footer_single_wrapping(
def test_encrypted_parquet_write_external(tempdir, data_table):
def test_encrypted_parquet_loop(tempdir, data_table, basic_encryption_config):
def test_read_with_deleted_crypto_factory(tempdir, data_table, basic_encryption_config):
def test_encrypted_parquet_read_table(tempdir, data_table, basic_encryption_config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_metadata.py
-----------------------------
def test_parquet_metadata_api():
def test_parquet_metadata_lifetime(tempdir):
def test_parquet_column_statistics_api(data, type, physical_type, min_value,
def _close(type, left, right):
def test_parquet_raise_on_unset_statistics():
def test_statistics_convert_logical_types(tempdir):
def test_parquet_write_disable_statistics(tempdir):
def test_parquet_sorting_column():
def test_parquet_sorting_column_nested():
def test_parquet_file_sorting_columns():
def test_field_id_metadata():
def test_parquet_file_page_index():
def test_multi_dataset_metadata(tempdir):
def test_metadata_hashing(tempdir):
def test_write_metadata(tempdir):
def test_table_large_metadata():
def test_compare_schemas():
def test_read_schema(tempdir):
def test_parquet_metadata_empty_to_dict(tempdir):
def test_metadata_exceeds_message_size():
def test_metadata_schema_filesystem(tempdir):
def test_metadata_equals():
def test_metadata_append_row_groups_diff(t1, t2, expected_error):
def test_write_metadata_fs_file_combinations(tempdir, s3_example_s3fs):
def test_column_chunk_key_value_metadata(parquet_test_datadir):
def test_internal_class_instantiation():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_pandas.py
-----------------------------
>     expected_string = b"""\
  carat        cut  color  clarity  depth  table  price     x     y     z
   0.23      Ideal      E      SI2   61.5   55.0    326  3.95  3.98  2.43
   0.21    Premium      E      SI1   59.8   61.0    326  3.89  3.84  2.31
def test_pandas_parquet_custom_metadata(tempdir):
def test_merging_parquet_tables_with_different_pandas_metadata(tempdir):
def test_pandas_parquet_column_multiindex(tempdir):
def test_pandas_parquet_2_roundtrip_read_pandas_no_index_written(tempdir):
def test_pandas_parquet_native_file_roundtrip():
def test_read_pandas_column_subset():
def test_pandas_parquet_empty_roundtrip():
def test_pandas_can_write_nested_data():
def test_pandas_parquet_pyfile_roundtrip(tempdir):
def test_pandas_parquet_configuration_options(tempdir):
def test_spark_flavor_preserves_pandas_metadata():
def test_index_column_name_duplicate(tempdir):
def test_multiindex_duplicate_values(tempdir):
def test_backwards_compatible_index_naming(datadir):
def test_backwards_compatible_index_multi_level_named(datadir):
def test_backwards_compatible_index_multi_level_some_named(datadir):
def test_backwards_compatible_column_metadata_handling(datadir):
def test_categorical_index_survives_roundtrip():
def test_categorical_order_survives_roundtrip():
def test_pandas_categorical_na_type_row_groups():
def test_pandas_categorical_roundtrip():
def test_categories_with_string_pyarrow_dtype(tempdir):
def test_write_to_dataset_pandas_preserve_extensiondtypes(tempdir):
def test_write_to_dataset_pandas_preserve_index(tempdir):
def test_dataset_read_pandas_common_metadata(
def test_read_pandas_passthrough_keywords(tempdir):
def test_read_pandas_map_fields(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_parquet_file.py
-----------------------------
>     """
      Unopened files should be closed explicitly after use,
      and previously opened files should be left open.
      Applies to read_table, ParquetDataset, and ParquetFile
def test_pass_separate_metadata():
def test_read_single_row_group():
def test_read_single_row_group_with_column_subset():
def test_read_multiple_row_groups():
def test_read_multiple_row_groups_with_column_subset():
def test_scan_contents():
def test_parquet_file_pass_directory_instead_of_file(tempdir):
def test_read_column_invalid_index():
def test_iter_batches_columns_reader(tempdir, batch_size):
def test_iter_batches_reader(tempdir, chunk_size):
def test_pre_buffer(pre_buffer):
def test_parquet_file_explicitly_closed(tempdir):
def test_parquet_file_with_filesystem(s3_example_fs, use_uri):
def test_read_statistics():
def test_read_undefined_logical_type(parquet_test_datadir):
def test_parquet_file_fsspec_support():
def test_parquet_file_fsspec_support_through_filesystem_argument():
def test_parquet_file_hugginface_support():
def test_fsspec_uri_raises_if_fsspec_is_not_available():
def test_iter_batches_raises_batch_size_zero(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\test_parquet_writer.py
-----------------------------
def test_parquet_incremental_file_build(tempdir):
def test_validate_schema_write_table(tempdir):
def test_parquet_invalid_writer(tempdir):
def test_parquet_writer_context_obj(tempdir):
def test_parquet_writer_context_obj_with_exception(tempdir):
def test_parquet_writer_write_wrappers(tempdir, filesystem):
def test_parquet_writer_chunk_size(tempdir):
def test_parquet_writer_filesystem_local(tempdir, filesystem):
def test_parquet_writer_filesystem_s3(s3_example_fs):
def test_parquet_writer_filesystem_s3_uri(s3_example_fs):
def test_parquet_writer_filesystem_s3fs(s3_example_s3fs):
def test_parquet_writer_filesystem_buffer_raises():
def test_parquet_writer_store_schema(tempdir):
def test_parquet_writer_append_key_value_metadata(tempdir):
def test_parquet_content_defined_chunking(tempdir):
def test_parquet_content_defined_chunking_parameters(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\parquet\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\arrow_16597.py
-----------------------------
class Server(flight.FlightServerBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\arrow_39313.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\arrow_7980.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\conftest.py
-----------------------------
>     """Stop the AWS SDK from trying to contact the EC2 metadata server.
  
      Otherwise, this causes a 5 second delay in tests that exercise the
      S3 filesystem.
def pytest_addoption(parser):
class PyArrowConfig:
def pytest_configure(config):
def pytest_runtest_setup(item):
def tempdir(tmpdir):
def base_datadir():
def disable_aws_metadata(monkeypatch):
def hdfs_connection():
def s3_connection():
def retry(attempts=3, delay=1.0, max_delay=None, backoff=1):
def s3_server(s3_connection, tmpdir_factory):
def gcs_server():
def azure_server(tmpdir_factory):
def pickle_module(request):
def builtin_pickle():
def cloudpickle():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\pandas_examples.py
-----------------------------
>     """
      Dataframe with numpy arrays columns of every possible primitive type.
  
      Returns
def dataframe_with_arrays(include_index=False):
def dataframe_with_lists(include_index=False, parquet_compatible=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\pandas_threaded_import.py
-----------------------------
def thread_func(i):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\read_record_batch.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\strategies.py
-----------------------------
def fields(draw, type_strategy=primitive_types):
def list_types(item_strategy=primitive_types):
def struct_types(draw, item_strategy=primitive_types):
def dictionary_types(key_strategy=None, value_strategy=None):
def map_types(draw, key_strategy=primitive_types,
def schemas(type_strategy=primitive_types, max_fields=None):
def _pylist(draw, value_type, size, nullable=True):
def _pymap(draw, key_type, value_type, size, nullable=True):
def arrays(draw, type, size=None, nullable=True):
def chunked_arrays(draw, type, min_chunks=0, max_chunks=None, chunk_size=None):
def record_batches(draw, type, rows=None, max_fields=None):
def tables(draw, type, rows=None, max_fields=None):
def pandas_compatible_list_types(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_acero.py
-----------------------------
def table_source():
def test_declaration():
def test_declaration_repr(table_source):
def test_declaration_to_reader(table_source):
def test_table_source():
def test_filter(table_source):
def test_filter_all_rows(source):
def test_project(table_source):
def test_aggregate_scalar(table_source):
def test_aggregate_hash():
def test_order_by():
def test_hash_join():
def test_hash_join_with_residual_filter():
def test_asof_join():
def test_scan(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_adhoc_memory_leak.py
-----------------------------
def test_deserialize_pandas_arrow_7956():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_array.py
-----------------------------
>     code = """if 1:
      import pyarrow as pa
  
      assert pa.total_allocated_bytes() == 0
def test_total_bytes_allocated():
def test_weakref():
def test_getitem_NULL():
def test_constructor_raises():
def test_list_format():
def test_string_format():
def test_long_array_format():
def test_indented_string_format():
def test_top_level_indented_string_format():
def test_binary_format():
def test_binary_total_values_length():
def test_to_numpy_zero_copy():
def test_chunked_array_to_numpy_zero_copy():
def test_to_numpy_unsupported_types():
def test_to_numpy_writable():
def test_to_numpy_datetime64(unit, tz):
def test_to_numpy_timedelta64(unit):
def test_to_numpy_dictionary():
def test_to_pandas_zero_copy():
def test_asarray():
def test_nulls(ty):
def test_array_from_scalar():
def test_array_from_dictionary_scalar():
def test_array_getitem():
def test_array_getitem_numpy_scalars():
def test_array_slice():
def test_array_slice_negative_step():
def test_arange():
def test_array_diff():
def test_array_iter():
def test_struct_array_slice():
def test_array_factory_invalid_type():
def test_array_ref_to_ndarray_base():
def test_array_eq():
def test_array_from_buffers():
def test_string_binary_from_buffers():
def test_string_view_from_buffers():
def test_list_from_buffers(list_type_factory):
def test_struct_from_buffers():
def test_struct_from_arrays():
def test_struct_array_from_chunked():
def test_dictionary_from_buffers(offset):
def test_dictionary_from_numpy():
def test_dictionary_to_numpy():
def test_dictionary_from_boxed_arrays():
def test_dictionary_from_arrays_boundscheck():
def test_dictionary_indices():
def test_list_from_arrays(list_array_type, list_type_factory):
def test_list_array_types_from_arrays(
def test_list_array_types_from_arrays_fail(list_array_type, list_type_factory):
def test_map_cast():
def test_map_labelled():
def test_map_from_dict():
def test_map_from_arrays():
def test_fixed_size_list_from_arrays():
def test_variable_list_from_arrays():
def test_union_from_dense():
def test_union_from_sparse():
def test_union_array_to_pylist_with_nulls():
def test_union_array_slice():
def _check_cast_case(case, *, safe=True, check_array_construction=True):
def test_cast_integers_safe():
def test_cast_none():
def test_cast_list_to_primitive():
def test_slice_chunked_array_zero_chunks():
def test_cast_chunked_array():
def test_cast_chunked_array_empty():
def test_chunked_array_data_warns():
def test_cast_integers_unsafe():
def test_floating_point_truncate_safe():
def test_floating_point_truncate_unsafe():
def test_half_float_array_from_python():
def test_decimal_to_int_safe():
def test_decimal_to_int_value_out_of_bounds():
def test_decimal_to_int_non_integer():
def test_decimal_to_decimal():
def test_safe_cast_nan_to_int_raises():
def test_cast_signed_to_unsigned():
def test_cast_from_null():
def test_cast_string_to_number_roundtrip():
def test_cast_dictionary():
def test_view():
def test_unique_simple():
def test_value_counts_simple():
def test_unique_value_counts_dictionary_type():
def test_dictionary_encode_simple():
def test_dictionary_encode_sliced():
def test_dictionary_encode_zero_length():
def test_dictionary_decode():
def test_cast_time32_to_int():
def test_cast_time64_to_int():
def test_cast_timestamp_to_int():
def test_cast_date32_to_int():
def test_cast_duration_to_int():
def test_cast_binary_to_utf8():
def test_cast_date64_to_int():
def test_date64_from_builtin_datetime():
def test_cast_identities(ty, values):
def test_array_pickle(data, typ, pickle_module):
def test_array_pickle_dictionary(pickle_module):
def test_pickling(pickle_module, arr):
def test_array_pickle_protocol5(data, typ, pickle_module):
def test_to_numpy_roundtrip():
def test_array_uint64_from_py_over_range():
def test_array_conversions_no_sentinel_values():
def test_time32_time64_from_integer():
def test_binary_string_pandas_null_sentinels():
def test_pandas_null_sentinels_raise_error():
def test_pandas_null_sentinels_index():
def test_array_roundtrip_from_numpy_datetimeD():
def test_array_from_naive_datetimes():
def test_array_from_numpy_datetime(dtype, type):
def test_array_from_different_numpy_datetime_units_raises():
def test_array_from_list_of_timestamps(unit):
def test_array_from_timestamp_with_generic_unit():
def test_array_from_numpy_timedelta(dtype, type):
def test_array_from_numpy_timedelta_incorrect_unit():
def test_array_from_numpy_ascii(binary_type):
def test_interval_array_from_timedelta():
def test_interval_array_from_relativedelta():
def test_interval_array_from_tuple():
def test_interval_array_from_dateoffset():
def test_array_from_numpy_unicode(string_type):
def test_array_string_from_non_string():
def test_array_string_from_all_null():
def test_array_from_masked():
def test_array_from_shrunken_masked():
def test_array_from_invalid_dim_raises():
def test_array_from_strided_bool():
def test_array_from_strided():
def test_boolean_true_count_false_count():
def test_buffers_primitive():
def test_buffers_nested():
def test_total_buffer_size():
def test_nbytes_size():
def test_invalid_tensor_constructor_repr():
def test_invalid_tensor_construction():
def test_list_array_flatten(offset_type, list_type_factory):
def test_list_value_parent_indices(list_type):
def test_list_value_lengths(offset_type, list_type):
def test_list_array_flatten_non_canonical(list_type_factory):
def test_list_array_values_offsets_sliced(klass):
def test_fixed_size_list_array_flatten():
def test_fixed_size_list_array_flatten_with_slice():
def test_map_array_values_offsets():
def test_struct_array_flatten():
def test_struct_array_field():
def test_struct_array_flattened_field():
def test_empty_cast():
def test_nested_dictionary_array():
def test_array_from_numpy_str_utf8():
def test_numpy_binary_overflow_to_chunked(large_types):
def test_list_child_overflow_to_chunked():
def test_infer_type_masked():
def test_array_masked():
def test_array_supported_masks():
def test_array_supported_pandas_masks():
def test_binary_array_masked():
def test_binary_array_strided():
def test_array_invalid_mask_raises():
def test_array_from_large_pyints():
def test_numpy_array_protocol():
def test_array_protocol():
class ArrayWrapper:
class ArrayDeviceWrapper:
def test_c_array_protocol(wrapper_class):
def test_c_array_protocol_device_unsupported_keyword():
def test_concat_array():
def test_concat_array_different_types():
def test_concat_array_invalid_type():
def test_to_pandas_timezone():
def test_to_pandas_float16_list():
def test_array_sort():
def test_struct_array_sort():
def test_array_accepts_pyarrow_array():
def check_run_end_encoded(ree_array, run_ends, values, logical_length, physical_length,
def check_run_end_encoded_from_arrays_with_type(ree_type=None):
def check_run_end_encoded_from_typed_arrays(ree_type):
def test_run_end_encoded_from_arrays():
def test_run_end_encoded_from_buffers():
def test_run_end_encoded_from_array_with_type():
def test_run_end_encoded_to_numpy():
def test_run_end_encoded_to_pandas():
def test_list_view_from_arrays(list_array_type, list_type_factory):
def test_list_view_from_arrays_fails(list_array_type, list_type_factory):
def test_list_view_flatten(list_array_type, list_type_factory, offset_type):
def test_list_view_slice(list_view_type):
def test_swapped_byte_order_fails(numpy_native_dtype):
def test_non_cpu_array():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_builder.py
-----------------------------
def test_weakref():
def test_string_builder_append():
def test_string_builder_append_values():
def test_string_builder_append_after_finish():
def test_string_view_builder():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_cffi.py
-----------------------------
def PyCapsule_IsValid(capsule, name):
def registered_extension_type(ext_type):
class ParamExtType(pa.ExtensionType):
def make_schema():
def make_extension_schema():
def make_extension_storage_schema():
def make_batch():
def make_extension_batch():
def make_batches():
def make_serialized(schema, batches):
def test_export_import_type():
def test_export_import_field():
def check_export_import_array(array_type, exporter, importer):
def test_export_import_array():
def test_export_import_device_array():
def check_export_import_schema(schema_factory, expected_schema_factory=None):
def test_export_import_schema():
def test_export_import_schema_with_extension():
def test_export_import_schema_float_pointer():
def check_export_import_batch(array_type, exporter, importer, batch_factory):
def test_export_import_batch():
def test_export_import_batch_with_extension():
def test_export_import_device_batch():
def _export_import_batch_reader(ptr_stream, reader_factory):
def make_ipc_stream_reader(schema, batches):
def make_py_record_batch_reader(schema, batches):
def test_export_import_batch_reader(reader_factory):
def test_export_import_exception_reader():
def test_imported_batch_reader_error():
def test_roundtrip_schema_capsule(obj):
def test_roundtrip_array_capsule(arr, schema_accessor, bad_type, good_type):
def test_roundtrip_device_array_capsule(arr, schema_accessor, bad_type, good_type):
def test_roundtrip_reader_capsule(constructor):
def test_roundtrip_batch_reader_capsule_requested_schema():
def test_roundtrip_batch_reader_capsule():
def test_roundtrip_chunked_array_capsule():
def test_roundtrip_chunked_array_capsule_requested_schema():
def test_import_device_no_cuda():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_compute.py
-----------------------------
>     assert pc.min_max.__doc__ == textwrap.dedent("""\
          Compute the minimum and maximum values of a numeric array.
  
          Null values are ignored by default.
def test_exported_functions():
def test_hash_aggregate_not_exported():
def test_exported_option_classes():
def test_option_class_equality(request):
def test_list_functions():
def _check_get_function(name, expected_func_cls, expected_ker_cls,
def test_get_function_scalar():
def test_get_function_vector():
def test_get_function_scalar_aggregate():
def test_get_function_hash_aggregate():
def test_call_function_with_memory_pool():
def test_pickle_functions(pickle_module):
def test_pickle_global_functions(pickle_module):
def test_function_attributes():
def test_input_type_conversion():
def test_sum_array(arrow_type):
def test_sum_decimal_array(arrow_type):
def test_sum_chunked_array(arrow_type):
def test_sum_chunked_array_decimal_type(arrow_type):
def test_mode_array():
def test_mode_chunked_array():
def test_empty_chunked_array():
def test_variance():
def test_skew():
def test_kurtosis():
def test_unbiased_skew_and_kurtosis(input, expected):
def test_count_substring():
def test_count_substring_regex():
def test_find_substring():
def test_match_like():
def test_match_substring():
def test_match_substring_regex():
def test_trim():
def test_slice_compatibility():
def test_binary_slice_compatibility():
def test_split_pattern():
def test_split_whitespace_utf8():
def test_split_whitespace_ascii():
def test_split_pattern_regex():
def test_min_max():
def test_any():
def test_all():
def test_is_valid():
def test_generated_docstrings():
def test_generated_signatures():
def find_new_unicode_codepoints():
def test_string_py_compat_boolean(function_name, variant):
def test_pad():
def test_utf8_zfill():
def test_replace_slice():
def test_replace_plain():
def test_replace_regex():
def test_extract_regex():
def test_extract_regex_span():
def test_binary_join():
def test_binary_join_element_wise():
def test_take(ty, values):
def test_take_indices_types():
def test_take_on_chunked_array():
def test_take_dictionary(ordered):
def test_take_null_type():
def test_drop_null(ty, values):
def test_drop_null_chunked_array():
def test_drop_null_record_batch():
def test_drop_null_table():
def test_drop_null_null_type():
def test_filter(ty, values):
def test_filter_numpy_array_mask(ty, values):
def test_filter_chunked_array():
def test_filter_record_batch():
def test_filter_table():
def test_filter_errors():
def test_filter_null_type():
def test_compare_array(typ):
def test_compare_string_scalar(typ):
def test_compare_scalar(typ):
def test_compare_chunked_array_mixed():
def test_arithmetic_add():
def test_arithmetic_subtract():
def test_arithmetic_multiply():
def test_round_to_integer(ty):
def test_round():
def test_round_to_multiple():
def test_round_binary():
def test_is_null():
def test_is_nan():
def test_fill_null():
def test_fill_null_array(arrow_type):
def test_fill_null_chunked_array(arrow_type):
def test_logical():
def test_dictionary_decode():
def test_cast():
def test_identity_cast_dates(value_type):
def test_fsl_to_fsl_cast(value_type):
def largest_scaled_float_not_above(val, scale):
def scaled_float(int_val, scale):
def integral_float_to_decimal_cast_cases(float_ty, max_precision):
def real_float_to_decimal_cast_cases(float_ty, max_precision):
def random_float_to_decimal_cast_cases(float_ty, max_precision):
def check_cast_float_to_decimal(float_ty, float_val, decimal_ty, decimal_ctx,
def test_cast_float_to_decimal(float_ty, decimal_ty, case_generator):
def test_cast_float_to_decimal_random(float_ty, decimal_traits):
def test_strptime():
def test_strftime():
def _check_datetime_components(timestamps, timezone=None):
def test_extract_datetime_components(request):
def test_iso_calendar_longer_array(unit):
def test_assume_timezone():
def _check_temporal_rounding(ts, values, unit):
def test_round_temporal(unit):
def test_count():
def test_index():
def check_partition_nth(data, indices, pivot, null_placement):
def test_partition_nth():
def test_partition_nth_null_placement():
def test_select_k_array():
def test_select_k_table():
def test_array_sort_indices():
def test_sort_indices_array():
def test_sort_indices_table():
def test_is_in():
def test_index_in():
def test_quantile():
def test_tdigest():
def test_fill_null_segfault():
def test_min_max_element_wise():
def test_cumulative_sum(start, skip_nulls):
def test_cumulative_prod(start, skip_nulls):
def test_cumulative_max(start, skip_nulls):
def test_cumulative_min(start, skip_nulls):
def test_make_struct():
def test_map_lookup():
def test_struct_fields_options():
def test_case_when():
def test_list_element():
def test_count_distinct():
def test_count_distinct_options():
def test_utf8_normalize():
def test_random():
def test_rank_options_tiebreaker(tiebreaker, expected_values):
def test_rank_options():
def test_rank_quantile_options():
def test_rank_normal_options():
def create_sample_expressions():
def test_expression_serialization_arrow(pickle_module):
def test_expression_serialization_substrait():
def test_expression_construction():
def test_expression_boolean_operators():
def test_expression_call_function():
def test_cast_table_raises():
def test_list_slice_output_fixed(start, stop, step, expected, value_type,
def test_list_slice_output_variable(start, stop, step, value_type, list_type):
def test_list_slice_field_names_retained(return_fixed_size, type):
def test_list_slice_bad_parameters():
def check_run_end_encode_decode(value_type, run_end_encode_opts=None):
def test_run_end_encode(value_type, option):
def test_pairwise_diff():
def test_pivot_wider():
def test_winsorize():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_convert_builtin.py
-----------------------------
>     """
      Check a struct type is as expected, but not taking order into account.
class StrangeIterable:
class MyInt:
class MyBrokenInt:
def check_struct_type(ty, expected):
def test_iterable_types():
def test_empty_iterable():
def test_limited_iterator_types():
def test_limited_iterator_size_overflow():
def test_limited_iterator_size_underflow():
def test_iterator_without_size():
def test_infinite_iterator():
def test_failing_iterator():
class ObjectWithOnlyGetitem:
def test_object_with_getitem():
def _as_list(xs):
def _as_tuple(xs):
def _as_deque(xs):
def _as_dict_values(xs):
def _as_numpy_array(xs):
def _as_set(xs):
def test_sequence_types(seq):
def test_nested_sequence_types(seq):
def test_sequence_boolean(seq):
def test_sequence_numpy_boolean(seq):
def test_sequence_mixed_numpy_python_bools(seq):
def test_empty_list(seq):
def test_nested_lists(seq):
def test_nested_lists_with_explicit_type(seq, factory):
def test_list_with_non_list(seq):
def test_nested_arrays(seq, inner_seq, factory):
def test_nested_fixed_size_list(seq):
def test_sequence_all_none(seq):
def test_sequence_integer(seq, np_scalar_pa_type):
def test_sequence_integer_np_nan(seq, pa_type):
def test_sequence_integer_nested_np_nan(seq, pa_type):
def test_sequence_integer_inferred(seq):
def test_sequence_numpy_integer(seq, np_scalar_pa_type):
def test_sequence_numpy_integer_inferred(seq, np_scalar_pa_type):
def test_sequence_custom_integers(seq):
def test_broken_integers(seq):
def test_numpy_scalars_mixed_type():
def test_uint64_max_convert():
def test_signed_integer_overflow(bits):
def test_unsigned_integer_overflow(bits):
def test_integer_from_string_error(seq, typ):
def test_convert_with_mask():
def test_garbage_collection():
def test_sequence_double():
def test_double_auto_coerce_from_integer():
def test_double_integer_coerce_representable_range():
def test_float32_integer_coerce_representable_range():
def test_mixed_sequence_errors():
def test_sequence_numpy_double(seq, np_str_scalar, pa_type, from_pandas):
def test_ndarray_nested_numpy_double(from_pandas):
def test_nested_ndarray_in_object_array():
def test_multidimensional_ndarray_as_nested_list():
def test_list_array_from_object_ndarray(data, value_type):
def test_nested_list_array_from_object_ndarray(data, value_type):
def test_array_ignore_nan_from_pandas():
def test_nested_ndarray_different_dtypes():
def test_sequence_unicode():
def test_sequence_unicode_explicit_type(ty):
def check_array_mixed_unicode_bytes(binary_type, string_type):
def test_array_mixed_unicode_bytes():
def test_large_binary_array(ty):
def test_large_binary_value(ty):
def test_string_too_large(ty):
def test_sequence_bytes():
def test_sequence_utf8_to_unicode(ty):
def test_sequence_fixed_size_bytes():
def test_fixed_size_bytes_does_not_accept_varying_lengths():
def test_fixed_size_binary_length_check():
def test_sequence_date():
def test_sequence_explicit_types(input):
def test_date32_overflow():
def test_sequence_time_with_timezone(time_type, unit, int_type):
def test_sequence_timestamp():
def test_sequence_timestamp_with_timezone(timezone, unit):
def test_pyarrow_ignore_timezone_environment_variable(monkeypatch, timezone):
def test_sequence_timestamp_with_timezone_inference():
def test_sequence_timestamp_with_zoneinfo_timezone_inference():
def test_sequence_timestamp_from_mixed_builtin_and_pandas_datetimes():
def test_sequence_timestamp_out_of_bounds_nanosecond():
def test_sequence_numpy_timestamp():
class MyDate(datetime.date):
class MyDatetime(datetime.datetime):
class MyTimedelta(datetime.timedelta):
def test_datetime_subclassing():
def test_sequence_timestamp_nanoseconds():
def test_sequence_timestamp_from_int_with_unit():
def test_sequence_duration():
def test_sequence_duration_np_scalar():
def test_sequence_duration_with_unit(unit):
def test_sequence_duration_from_int_with_unit(unit):
def test_sequence_duration_nested_lists():
def test_sequence_duration_nested_lists_with_explicit_type(factory):
def test_sequence_duration_nested_lists_numpy():
def test_sequence_nesting_levels():
def test_sequence_mixed_types_fails():
def test_sequence_mixed_types_with_specified_type_fails():
def test_sequence_decimal():
def test_sequence_decimal_different_precisions():
def test_sequence_decimal_no_scale():
def test_sequence_decimal_negative():
def test_sequence_decimal_no_whole_part():
def test_sequence_decimal_large_integer():
def test_sequence_decimal_from_integers():
def test_sequence_decimal_too_high_precision():
def test_sequence_decimal_infer():
def test_sequence_decimal_infer_mixed():
def test_sequence_decimal_given_type():
def test_range_types():
def test_empty_range():
def test_structarray():
def test_struct_from_dicts():
def test_struct_from_dicts_bytes_keys():
def test_struct_from_tuples():
def test_struct_from_list_of_pairs():
def test_struct_from_list_of_pairs_errors():
def test_struct_from_mixed_sequence():
def test_struct_from_dicts_inference():
def test_structarray_from_arrays_coerce():
def test_decimal_array_with_none_and_nan():
def test_map_from_dicts():
def test_map_from_tuples():
def test_dictionary_from_boolean():
def test_dictionary_from_integers(value_type):
def test_dictionary_index_type(input_index_type):
def test_dictionary_is_always_adaptive():
def test_dictionary_from_strings():
def test_duration_array_roundtrip_corner_cases(unit, expected):
def test_roundtrip_nanosecond_resolution_pandas_temporal_objects():
def test_array_to_pylist_roundtrip(arr):
def test_auto_chunking_binary_like():
def test_auto_chunking_list_of_binary():
def test_auto_chunking_list_like():
def test_auto_chunking_map_type():
def test_nested_auto_chunking(ty, char):
def test_array_from_pylist_data_overflow():
def test_array_from_pylist_offset_overflow():
def test_array_accepts_pyarrow_scalar(seq, data, scalar_data, value_type):
def test_array_accepts_pyarrow_scalar_errors(seq):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_cpp_internals.py
-----------------------------
>     """
      Inject C++ tests as Python functions into namespace `ns` (a dict).
def inject_cpp_tests(ns):
def test_pyarrow_include():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_csv.py
-----------------------------
>     """
      Check setting and getting attributes of an *Options class.
def generate_col_names():
def split_rows(arr, num_cols, num_rows):
def split_columns(arr, num_cols, num_rows):
def make_random_csv(num_cols=2, num_rows=10, linesep='\r\n', write_names=True):
def make_empty_csv(column_names):
def check_options_class(cls, **attr_values):
def check_options_class_pickling(cls, pickler, **attr_values):
class InvalidRowHandler:
def test_split_rows_and_columns_utility():
def test_read_options(pickle_module):
def test_parse_options(pickle_module):
def test_convert_options(pickle_module):
def test_write_options():
class BaseTestCSV(abc.ABC):
class BaseCSVTableRead(BaseTestCSV):
class TestSerialCSVTableRead(BaseCSVTableRead):
class TestThreadedCSVTableRead(BaseCSVTableRead):
class BaseStreamingCSVRead(BaseTestCSV):
class TestSerialStreamingCSVRead(BaseStreamingCSVRead):
class TestThreadedStreamingCSVRead(BaseStreamingCSVRead):
class BaseTestCompressedCSVRead:
class TestGZipCSVRead(BaseTestCompressedCSVRead, unittest.TestCase):
class TestBZ2CSVRead(BaseTestCompressedCSVRead, unittest.TestCase):
def test_read_csv_does_not_close_passed_file_handles():
def test_write_read_round_trip():
def test_write_quoting_style():
def test_read_csv_reference_cycle():
def test_write_csv_decimal(tmpdir, type_factory):
def test_read_csv_gil_deadlock():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_cuda.py
-----------------------------
> """
  UNTESTED:
  read_message
def setup_module(module):
def teardown_module(module):
def test_Context():
def test_manage_allocate_free_host(size):
def test_context_allocate_del():
def make_random_buffer(size, target='host'):
def test_context_device_buffer(size):
def test_context_from_object(size):
def test_foreign_buffer():
def test_CudaBuffer(size):
def test_HostBuffer(size):
def test_copy_from_to_host(size):
def test_copy_to_host(size):
def test_copy_from_device(dest_ctx, size):
def test_copy_from_host(size):
def test_buffer_device():
def test_BufferWriter():
def test_BufferWriter_edge_cases():
def test_BufferReader():
def test_BufferReader_zero_size():
def make_recordbatch(length):
def test_batch_serialize():
def make_table():
def make_table_cuda():
def test_table_deserialize():
def test_create_table_with_device_buffers():
def other_process_for_test_IPC(handle_buffer, expected_arr):
def test_IPC(size):
def test_copy_to():
def test_device_interface_array():
def test_device_interface_batch_array():
def test_print_array():
def test_print_array_host(size):
def make_chunked_array(n_elements_per_chunk, n_chunks):
def test_print_chunked_array():
def test_print_record_batch():
def test_print_table():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_cuda_numba_interop.py
-----------------------------
>     """Return a host or device buffer with random data.
def setup_module(module):
def teardown_module(module):
def test_context(c):
def make_random_buffer(size, target='host', dtype='uint8', ctx=None):
def test_from_object(c, dtype, size):
def test_numba_memalloc(c, dtype):
def test_pyarrow_memalloc(c, dtype):
def test_numba_context(c, dtype):
def test_pyarrow_jit(c, dtype):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_cython.py
-----------------------------
> setup_template = """if 1:
      from setuptools import setup
      from Cython.Build import cythonize
  
def check_cython_example_module(mod):
def test_cython_api(tmpdir):
def test_visit_strings(tmpdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_dataset.py
-----------------------------
>     """
      Test passing file_size to make_fragment. Not all FS implementations make use
      of the file size (by implementing an OpenInputFile that takes a FileInfo), but
      s3 does, which is why it's used here.
class TableStreamWrapper:
def _generate_data(n):
def _table_from_pandas(df):
def assert_dataset_fragment_convenience_methods(dataset):
def mockfs():
def open_logging_fs(monkeypatch):
def multisourcefs(request):
def dataset(mockfs):
def dataset_reader(request):
def test_filesystem_dataset(mockfs):
def test_filesystem_dataset_no_filesystem_interaction(dataset_reader):
def test_dataset(dataset, dataset_reader):
def test_scanner_options(dataset):
def test_scanner(dataset, dataset_reader):
def test_scanner_memory_pool(dataset):
def test_head(dataset, dataset_reader):
def test_take(dataset, dataset_reader):
def test_count_rows(dataset, dataset_reader):
def test_abstract_classes():
def test_partitioning():
def test_partitioning_pickling(pickle_module):
def test_dataset_partitioning_format(
def test_expression_arithmetic_operators():
def test_partition_keys():
def test_parquet_read_options():
def test_parquet_file_format_read_options():
def test_parquet_scan_options():
def test_file_format_pickling(pickle_module):
def test_fragment_scan_options_pickling(pickle_module):
def test_filesystem_factory(mockfs, paths_or_selector, pre_buffer):
def test_make_fragment(multisourcefs):
def test_make_fragment_with_size(s3_example_simple):
def test_make_csv_fragment_from_buffer(dataset_reader, pickle_module):
def test_make_json_fragment_from_buffer(dataset_reader, pickle_module):
def test_make_parquet_fragment_from_buffer(dataset_reader, pickle_module):
def _create_dataset_for_fragments(tempdir, chunk_size=None, filesystem=None):
def test_fragments(tempdir, dataset_reader):
def test_fragments_implicit_cast(tempdir):
def test_fragments_reconstruct(tempdir, dataset_reader, pickle_module):
def test_fragments_parquet_row_groups(tempdir, dataset_reader):
def test_fragments_parquet_num_row_groups(tempdir):
def test_fragments_parquet_row_groups_dictionary(tempdir, dataset_reader):
def test_fragments_parquet_ensure_metadata(tempdir, open_logging_fs, pickle_module):
def test_fragments_parquet_pickle_no_metadata(tempdir, open_logging_fs, pickle_module):
def _create_dataset_all_types(tempdir, chunk_size=None):
def test_parquet_fragment_statistics(tempdir):
def test_parquet_fragment_statistics_nulls(tempdir):
def test_parquet_empty_row_group_statistics(tempdir):
def test_fragments_parquet_row_groups_predicate(tempdir):
def test_fragments_parquet_row_groups_reconstruct(tempdir, dataset_reader,
def test_fragments_parquet_subset_ids(tempdir, open_logging_fs,
def test_fragments_parquet_subset_filter(tempdir, open_logging_fs,
def test_fragments_parquet_subset_invalid(tempdir):
def test_fragments_parquet_subset_with_nested_fields(tempdir):
def test_fragments_repr(tempdir, dataset):
def test_partitioning_factory(mockfs, pickled, pickle_module):
def test_partitioning_factory_dictionary(mockfs, infer_dictionary, pickled,
def test_partitioning_factory_segment_encoding(pickled, pickle_module):
def test_partitioning_factory_hive_segment_encoding_key_encoded(pickled, pickle_module):
def test_dictionary_partitioning_outer_nulls_raises(tempdir):
def test_positional_keywords_raises(tempdir):
def test_read_partition_keys_only(tempdir):
def _has_subdirs(basedir):
def _do_list_all_dirs(basedir, path_so_far, result):
def _list_all_dirs(basedir):
def _check_dataset_directories(tempdir, expected_directories):
def test_dictionary_partitioning_inner_nulls(tempdir):
def test_hive_partitioning_nulls(tempdir):
def test_partitioning_function():
def test_directory_partitioning_dictionary_key(mockfs):
def test_hive_partitioning_dictionary_key(multisourcefs):
def _create_single_file(base_dir, table=None, row_group_size=None):
def _create_directory_of_files(base_dir):
def _check_dataset(dataset, table, dataset_reader, pickler):
def _check_dataset_from_path(path, table, dataset_reader, pickler, **kwargs):
def test_open_dataset_single_file(tempdir, dataset_reader, pickle_module):
def test_deterministic_row_order(tempdir, dataset_reader, pickle_module):
def test_open_dataset_directory(tempdir, dataset_reader, pickle_module):
def test_open_dataset_list_of_files(tempdir, dataset_reader, pickle_module):
def test_open_dataset_filesystem_fspath(tempdir):
def test_construct_from_single_file(tempdir, dataset_reader, pickle_module):
def test_construct_from_single_directory(tempdir, dataset_reader, pickle_module):
def test_construct_from_list_of_files(tempdir, dataset_reader):
def test_construct_from_list_of_mixed_paths_fails(mockfs):
def test_construct_from_mixed_child_datasets(mockfs):
def test_construct_empty_dataset():
def test_construct_dataset_with_invalid_schema():
def test_construct_from_invalid_sources_raise(multisourcefs):
def test_construct_in_memory(dataset_reader):
def test_scan_iterator(use_threads):
def _create_partitioned_dataset(basedir):
def test_open_dataset_partitioned_directory(tempdir, dataset_reader, pickle_module):
def test_open_dataset_filesystem(tempdir):
def test_open_dataset_unsupported_format(tempdir):
def test_open_union_dataset(tempdir, dataset_reader, pickle_module):
def test_open_union_dataset_with_additional_kwargs(multisourcefs):
def test_open_dataset_non_existing_file():
def test_partition_discovery(
def test_dataset_partitioned_dictionary_type_reconstruct(tempdir, pickle_module):
def s3_example_simple(s3_server):
def test_open_dataset_from_uri_s3(s3_example_simple, dataset_reader):
def test_open_dataset_from_fileinfos(s3_example_simple, dataset_reader):
def test_open_dataset_from_uri_s3_fsspec(s3_example_simple):
def test_open_dataset_from_s3_with_filesystem_uri(s3_server):
def test_open_dataset_from_fsspec(tempdir):
def test_file_format_inspect_fsspec(tempdir):
def test_filter_timestamp(tempdir, dataset_reader):
def test_filter_implicit_cast(tempdir, dataset_reader):
def test_filter_equal_null(tempdir, dataset_reader):
def test_filter_compute_expression(tempdir, dataset_reader):
def test_dataset_union(multisourcefs):
def test_union_dataset_from_other_datasets(tempdir, multisourcefs):
def test_dataset_from_a_list_of_local_directories_raises(multisourcefs):
def test_union_dataset_filesystem_datasets(multisourcefs):
def test_specified_schema(tempdir, dataset_reader):
def test_incompatible_schema_hang(tempdir, dataset_reader):
def test_ipc_format(tempdir, dataset_reader):
def test_orc_format(tempdir, dataset_reader):
def test_orc_scan_options(tempdir, dataset_reader):
def test_orc_format_not_supported():
def test_orc_writer_not_implemented_for_dataset():
def test_csv_format(tempdir, dataset_reader):
def test_csv_format_compressed(tempdir, compression, dataset_reader):
def test_csv_format_options(tempdir, dataset_reader):
def test_csv_format_options_generate_columns(tempdir, dataset_reader):
def test_csv_fragment_options(tempdir, dataset_reader):
def test_json_format(tempdir, dataset_reader):
def test_json_format_options(tempdir, dataset_reader):
def test_json_fragment_options(tempdir, dataset_reader):
def test_encoding(tempdir, dataset_reader):
def test_column_names_encoding(tempdir, dataset_reader):
def test_feather_format(tempdir, dataset_reader):
def test_feather_format_compressed(tempdir, compression, dataset_reader):
def _create_parquet_dataset_simple(root_path):
def test_parquet_dataset_factory(tempdir):
def test_parquet_dataset_factory_fsspec(tempdir):
def test_parquet_dataset_factory_roundtrip(tempdir):
def test_parquet_dataset_factory_order(tempdir):
def test_parquet_dataset_factory_invalid(tempdir):
def _create_metadata_file(root_path):
def _create_parquet_dataset_partitioned(root_path):
def test_parquet_dataset_factory_partitioned(tempdir):
def test_parquet_dataset_factory_metadata(tempdir):
def test_parquet_dataset_lazy_filtering(tempdir, open_logging_fs):
def test_dataset_schema_metadata(tempdir, dataset_reader):
def test_filter_mismatching_schema(tempdir, dataset_reader):
def test_dataset_project_only_partition_columns(tempdir, dataset_reader):
def test_dataset_project_null_column(tempdir, dataset_reader):
def test_dataset_project_columns(tempdir, dataset_reader):
def test_dataset_preserved_partitioning(tempdir):
def test_write_to_dataset_given_null_just_works(tempdir):
def _sort_table(tab, sort_col):
def _check_dataset_roundtrip(dataset, base_dir, expected_files, sort_col,
def test_write_dataset(tempdir):
def test_write_dataset_partitioned(tempdir):
def test_write_dataset_with_field_names(tempdir):
def test_write_dataset_with_field_names_hive(tempdir):
def test_write_dataset_with_scanner(tempdir):
def test_write_dataset_with_backpressure(tempdir):
def test_write_dataset_with_dataset(tempdir):
def test_write_dataset_existing_data(tempdir):
def _generate_random_int_array(size=4, min=1, max=10):
def _generate_data_and_columns(num_of_columns, num_of_records):
def _get_num_of_files_generated(base_directory, file_format):
def test_write_dataset_max_rows_per_file(tempdir):
def test_write_dataset_min_rows_per_group(tempdir):
def test_write_dataset_max_rows_per_group(tempdir):
def test_write_dataset_max_open_files(tempdir):
def test_write_dataset_partitioned_dict(tempdir):
def test_write_dataset_use_threads(tempdir):
def test_write_dataset_use_threads_preserve_order(tempdir):
def test_write_table(tempdir):
def test_write_table_multiple_fragments(tempdir):
def test_write_iterable(tempdir):
def test_write_scanner(tempdir, dataset_reader):
def test_write_table_partitioned_dict(tempdir):
def test_write_dataset_parquet(tempdir):
def test_write_dataset_csv(tempdir):
def test_write_dataset_parquet_file_visitor(tempdir):
def test_partition_dataset_parquet_file_visitor(tempdir):
def test_write_dataset_arrow_schema_metadata(tempdir):
def test_write_dataset_schema_metadata(tempdir):
def test_write_dataset_schema_metadata_parquet(tempdir):
def test_write_dataset_s3(s3_example_simple):
def test_write_dataset_s3_put_only(s3_server):
def test_dataset_null_to_dictionary_cast(tempdir, dataset_reader):
def test_dataset_join(tempdir):
def test_dataset_join_unique_key(tempdir):
def test_dataset_join_collisions(tempdir):
def test_dataset_join_asof(tempdir):
def test_dataset_join_asof_multiple_by(tempdir):
def test_dataset_join_asof_empty_by(tempdir):
def test_dataset_join_asof_collisions(tempdir):
def test_dataset_filter(tempdir, dstype):
def test_union_dataset_filter(tempdir, dstype):
def test_parquet_dataset_filter(tempdir):
def test_write_dataset_with_scanner_use_projected_schema(tempdir):
def test_read_table_nested_columns(tempdir, format):
def test_dataset_partition_with_slash(tmpdir):
def test_write_dataset_preserve_nullability(tempdir):
def test_write_dataset_preserve_field_metadata(tempdir):
def test_write_dataset_write_page_index(tempdir):
def test_dataset_sort_by(tempdir, dstype):
def test_checksum_write_dataset_read_dataset_to_table(tempdir):
def test_make_write_options_error():
def test_scanner_from_substrait(dataset):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_dataset_encryption.py
-----------------------------
>     """Test write_dataset with ParquetFileFormat and test if an exception is thrown
def create_sample_table():
def create_encryption_config():
def create_decryption_config():
def create_kms_connection_config():
def kms_factory(kms_connection_configuration):
def test_dataset_encryption_decryption():
def test_write_dataset_parquet_without_encryption():
def test_large_row_encryption_decryption():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_deprecations.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_device.py
-----------------------------
def test_device_memory_manager():
def test_buffer_device():
def test_copy_to():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_dlpack.py
-----------------------------
def PyCapsule_IsValid(capsule, name):
def check_dlpack_export(arr, expected_arr):
def check_bytes_allocated(f):
def test_dlpack(value_type, np_type_str):
def test_tensor_dlpack(np_type):
def test_dlpack_not_supported():
def test_dlpack_cuda_not_supported():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_exec_plan.py
-----------------------------
def test_joins_corner_cases():
def test_joins(jointype, expected, use_threads, coalesce_keys, use_datasets):
def test_table_join_collisions():
def test_table_join_keys_order():
def test_filter_table_errors():
def test_filter_table():
def test_filter_table_ordering():
def test_complex_filter_table():
def test_join_extension_array_column():
def test_group_by_ordering():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_extension_type.py
-----------------------------
>     """
      Generic extension type that can store any storage type.
def registered_extension_type(ext_type):
class TinyIntType(pa.ExtensionType):
class IntegerType(pa.ExtensionType):
class IntegerEmbeddedType(pa.ExtensionType):
class ExampleUuidScalarType(pa.ExtensionScalar):
class ExampleUuidType(pa.ExtensionType):
class ExampleUuidType2(pa.ExtensionType):
class LabelType(pa.ExtensionType):
class ParamExtType(pa.ExtensionType):
class MyStructType(pa.ExtensionType):
class MyListType(pa.ExtensionType):
class MyFixedListType(pa.ExtensionType):
class AnnotatedType(pa.ExtensionType):
def ipc_write_batch(batch):
def ipc_read_batch(buf):
def test_ext_type_basics():
def test_ext_type_str():
def test_ext_type_repr():
def test_ext_type_lifetime():
def test_ext_type_storage_type():
def test_ext_type_byte_width():
def test_ext_type_bit_width():
def test_ext_type_as_py():
def test_uuid_type_pickle(pickle_module):
def test_ext_type_equality():
def test_ext_array_basics():
def test_ext_array_lifetime():
def test_ext_array_to_pylist():
def test_ext_array_errors():
def test_ext_array_equality():
def test_ext_array_wrap_array():
def test_ext_scalar_from_array():
def test_ext_scalar_from_storage():
def test_ext_array_pickling(pickle_module):
def test_ext_array_conversion_to_numpy():
def test_ext_array_conversion_to_pandas():
def struct_w_ext_data():
def test_struct_w_ext_array_to_numpy(struct_w_ext_data):
def test_struct_w_ext_array_to_pandas(struct_w_ext_data):
def test_cast_kernel_on_extension_arrays():
def test_casting_to_extension_type(data, ty):
def test_cast_between_extension_types():
def test_cast_to_extension_with_extension_storage():
def test_cast_nested_extension_types(data, type_factory):
def test_casting_dict_array_to_extension_type():
def test_cast_to_extension_with_nested_storage():
def test_concat():
def test_null_storage_type():
def example_batch():
def check_example_batch(batch, *, expect_extension):
def test_ipc_unregistered():
def test_ipc_registered():
class PeriodArray(pa.ExtensionArray):
class PeriodType(pa.ExtensionType):
class PeriodTypeWithClass(PeriodType):
class PeriodTypeWithToPandasDtype(PeriodType):
def registered_period_type(request):
def test_generic_ext_type():
def test_generic_ext_type_ipc(registered_period_type):
def test_generic_ext_type_ipc_unknown(registered_period_type):
def test_generic_ext_type_equality():
def test_generic_ext_type_pickling(registered_period_type, pickle_module):
def test_generic_ext_array_pickling(registered_period_type, pickle_module):
def test_generic_ext_type_register(registered_period_type):
def test_parquet_period(tmpdir, registered_period_type):
def test_parquet_extension_with_nested_storage(tmpdir):
def test_parquet_nested_extension(tmpdir):
def test_parquet_extension_nested_in_extension(tmpdir):
def test_to_numpy():
def test_empty_take():
def test_extension_array_to_numpy_pandas(data, ty, into):
def test_array_constructor():
def test_array_constructor_from_pandas():
def test_cpp_extension_in_python(tmpdir):
def test_uuid_extension():
def test_tensor_type():
def test_tensor_class_methods(np_type_str):
def test_tensor_array_from_numpy(np_type_str):
def test_tensor_type_ipc(tensor_type):
def test_tensor_type_equality():
def test_tensor_type_cast():
def test_extension_to_pandas_storage_type(registered_period_type):
def test_tensor_type_is_picklable(pickle_module):
def test_tensor_type_str(tensor_type, text):
def test_opaque_type(pickle_module, storage_type, storage):
def test_bool8_type(pickle_module):
def test_bool8_to_bool_conversion():
def test_bool8_to_numpy_conversion():
def test_bool8_from_numpy_conversion():
def test_bool8_scalar():
def test_json(storage_type, pickle_module):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_feather.py
-----------------------------
def datadir(base_datadir):
def random_path(prefix='feather_'):
def version(request):
def compression(request):
def setup_module(module):
def teardown_module(module):
def test_file_not_exist():
def _check_pandas_roundtrip(df, expected=None, path=None,
def _check_arrow_roundtrip(table, path=None, compression=None):
def _assert_error_on_write(df, exc, path=None, version=2):
def test_dataset(version):
def test_float_no_nulls(version):
def test_read_table(version):
def test_use_threads(version):
def test_float_nulls(version):
def test_integer_no_nulls(version):
def test_platform_numpy_integers(version):
def test_integer_with_nulls(version):
def test_boolean_no_nulls(version):
def test_boolean_nulls(version):
def test_buffer_bounds_error(version):
def test_boolean_object_nulls(version):
def test_delete_partial_file_on_error(version):
def test_strings(version):
def test_empty_strings(version):
def test_all_none(version):
def test_all_null_category(version):
def test_multithreaded_read(version):
def test_nan_as_null(version):
def test_category(version):
def test_timestamp(version):
def test_timestamp_with_nulls(version):
def test_timedelta_with_nulls_v1():
def test_timedelta_with_nulls():
def test_out_of_float64_timestamp_with_nulls(version):
def test_non_string_columns(version):
def test_unicode_filename(version):
def test_read_columns(version):
def test_overwritten_file(version):
def test_filelike_objects(version):
def test_sparse_dataframe(version):
def test_duplicate_columns_pandas():
def test_duplicate_columns():
def test_unsupported():
def test_v2_set_chunksize():
def test_v2_compression_options():
def test_v2_lz4_default_compression():
def test_v1_unsupported_types():
def test_large_dataframe(version):
def test_chunked_binary_error_message():
def test_feather_without_pandas(tempdir, version):
def test_read_column_selection(version):
def test_read_column_duplicated_selection(tempdir, version):
def test_read_column_duplicated_in_file(tempdir):
def test_read_column_with_generator(tempdir, version):
def test_nested_types(compression):
def test_roundtrip(table, compression):
def test_feather_v017_experimental_compression_backward_compatibility(datadir):
def test_preserve_index_pandas(version):
def test_feather_datetime_resolution_arrow_to_pandas(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_flight.py
-----------------------------
>     """Get the path to the test resources directory."""
      if not os.environ.get("ARROW_TEST_DATA"):
          raise RuntimeError("Test resources not found; set "
                             "ARROW_TEST_DATA to <repo root>/testing/data")
def test_import():
def resource_root():
def read_flight_resource(path):
def example_tls_certs():
def simple_ints_table():
def simple_dicts_table():
def multiple_column_table():
class ConstantFlightServer(FlightServerBase):
class MetadataFlightServer(FlightServerBase):
class EchoFlightServer(FlightServerBase):
class EchoStreamFlightServer(EchoFlightServer):
class GetInfoFlightServer(FlightServerBase):
class ListActionsFlightServer(FlightServerBase):
class ListActionsErrorFlightServer(FlightServerBase):
class CheckTicketFlightServer(FlightServerBase):
class InvalidStreamFlightServer(FlightServerBase):
class NeverSendsDataFlightServer(FlightServerBase):
class SlowFlightServer(FlightServerBase):
class ErrorFlightServer(FlightServerBase):
class ExchangeFlightServer(FlightServerBase):
class HttpBasicServerAuthHandler(ServerAuthHandler):
class HttpBasicClientAuthHandler(ClientAuthHandler):
class TokenServerAuthHandler(ServerAuthHandler):
class TokenClientAuthHandler(ClientAuthHandler):
class NoopAuthHandler(ServerAuthHandler):
def case_insensitive_header_lookup(headers, lookup_key):
class ClientHeaderAuthMiddlewareFactory(ClientMiddlewareFactory):
class ClientHeaderAuthMiddleware(ClientMiddleware):
class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):
class HeaderAuthServerMiddleware(ServerMiddleware):
class HeaderAuthFlightServer(FlightServerBase):
class ArbitraryHeadersServerMiddlewareFactory(ServerMiddlewareFactory):
class ArbitraryHeadersServerMiddleware(ServerMiddleware):
class ArbitraryHeadersFlightServer(FlightServerBase):
class HeaderServerMiddleware(ServerMiddleware):
class HeaderServerMiddlewareFactory(ServerMiddlewareFactory):
class HeaderFlightServer(FlightServerBase):
class MultiHeaderFlightServer(FlightServerBase):
class SelectiveAuthServerMiddlewareFactory(ServerMiddlewareFactory):
class SelectiveAuthClientMiddlewareFactory(ClientMiddlewareFactory):
class SelectiveAuthClientMiddleware(ClientMiddleware):
class RecordingServerMiddlewareFactory(ServerMiddlewareFactory):
class RecordingClientMiddlewareFactory(ClientMiddlewareFactory):
class MultiHeaderClientMiddlewareFactory(ClientMiddlewareFactory):
class MultiHeaderClientMiddleware(ClientMiddleware):
class MultiHeaderServerMiddlewareFactory(ServerMiddlewareFactory):
class MultiHeaderServerMiddleware(ServerMiddleware):
class LargeMetadataFlightServer(FlightServerBase):
def test_repr():
def test_eq():
def test_flight_info_defaults():
def test_flight_server_location_argument():
def test_server_exit_reraises_exception():
def test_client_wait_for_available():
def test_flight_list_flights():
def test_flight_client_close():
def test_flight_do_get_ints():
def test_do_get_ints_pandas():
def test_flight_do_get_dicts():
def test_flight_do_get_ticket():
def test_flight_get_info():
def test_flight_get_schema():
def test_list_actions():
class ConvenienceServer(FlightServerBase):
def test_do_action_result_convenience():
def test_nicer_server_exceptions():
def test_get_port():
def test_flight_domain_socket():
def test_flight_large_message():
def test_flight_generator_stream():
def test_flight_invalid_generator_stream():
def test_timeout_fires():
def test_timeout_passes():
def test_read_options():
def test_http_basic_unauth():
def test_http_basic_auth():
def test_http_basic_auth_invalid_password():
def test_token_auth():
def test_token_auth_invalid():
def test_authenticate_basic_token():
def test_authenticate_basic_token_invalid_password():
def test_authenticate_basic_token_and_action():
def test_authenticate_basic_token_with_client_middleware():
def test_arbitrary_headers_in_flight_call_options():
def test_location_invalid():
def test_location_unknown_scheme():
def test_tls_fails():
def test_tls_do_get():
def test_tls_disable_server_verification():
def test_tls_override_hostname():
def test_flight_do_get_metadata():
def test_flight_metadata_record_batch_reader_iterator():
def test_flight_do_get_metadata_v4():
def test_flight_do_put_metadata():
def test_flight_do_put_limit():
def test_cancel_do_get():
def test_cancel_do_get_threaded():
def test_streaming_do_action():
def test_roundtrip_types():
def test_roundtrip_errors():
def test_do_put_independent_read_write():
def test_server_middleware_same_thread():
def test_middleware_reject():
def test_middleware_mapping():
def test_extra_info():
def test_mtls():
def test_doexchange_get():
def test_doexchange_put():
def test_doexchange_echo():
def test_doexchange_echo_v4():
def test_doexchange_transform():
def test_middleware_multi_header():
def test_generic_options():
class CancelFlightServer(FlightServerBase):
def test_interrupt():
def test_never_sends_data():
def test_large_descriptor():
def test_large_metadata_client():
class ActionNoneFlightServer(EchoFlightServer):
def test_none_action_side_effect():
def test_write_error_propagation():
def test_interpreter_shutdown():
class TracingFlightServer(FlightServerBase):
def test_tracing():
def test_do_put_does_not_crash_when_schema_is_none():
def test_headers_trailers():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_flight_async.py
-----------------------------
class ExampleServer(flight.FlightServerBase):
def async_or_skip(client):
def flight_client():
def async_client(flight_client):
def test_async_support_property(flight_client):
def test_get_flight_info(async_client):
def test_get_flight_info_error(async_client):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_fs.py
-----------------------------
> _minio_limited_policy = """{
      "Version": "2012-10-17",
      "Statement": [
          {
class DummyHandler(FileSystemHandler):
def localfs(request, tempdir):
def py_localfs(request, tempdir):
def mockfs(request):
def py_mockfs(request):
def localfs_with_mmap(request, tempdir):
def subtree_localfs(request, tempdir, localfs):
def gcsfs(request, gcs_server):
def s3fs(request, s3_server):
def subtree_s3fs(request, s3fs):
def azurefs(request, azure_server):
def hdfs(request, hdfs_connection):
def py_fsspec_localfs(request, tempdir):
def py_fsspec_memoryfs(request, tempdir):
def py_fsspec_s3fs(request, s3_server):
def filesystem_config(request):
def fs(filesystem_config):
def pathfn(filesystem_config):
def allow_move_dir(filesystem_config):
def allow_append_to_file(filesystem_config):
def check_mtime(file_info):
def check_mtime_absent(file_info):
def check_mtime_or_absent(file_info):
def skip_fsspec_s3fs(fs):
def skip_azure(fs, reason):
def test_s3fs_limited_permissions_create_bucket(s3_server):
def test_file_info_constructor():
def test_cannot_instantiate_base_filesystem():
def test_filesystem_equals():
def test_filesystem_equals_none(fs):
def test_subtree_filesystem():
def test_filesystem_pickling(fs, pickle_module):
def test_filesystem_is_functional_after_pickling(fs, pathfn, pickle_module):
def test_type_name():
def test_normalize_path(fs):
def test_non_path_like_input_raises(fs):
def test_get_file_info(fs, pathfn):
def test_get_file_info_with_selector(fs, pathfn):
def test_create_dir(fs, pathfn):
def test_delete_dir(fs, pathfn):
def test_delete_dir_with_explicit_subdir(fs, pathfn):
def test_delete_dir_contents(fs, pathfn):
def _check_root_dir_contents(config):
def test_delete_root_dir_contents(mockfs, py_mockfs):
def test_copy_file(fs, pathfn):
def test_move_directory(fs, pathfn, allow_move_dir):
def test_move_file(fs, pathfn):
def test_delete_file(fs, pathfn):
def identity(v):
def test_open_input_stream(fs, pathfn, compression, buffer_size, compressor):
def test_open_input_file(fs, pathfn):
def test_open_input_stream_not_found(fs, pathfn):
def test_open_output_stream(fs, pathfn, compression, buffer_size,
def test_open_append_stream(fs, pathfn, compression, buffer_size, compressor,
def test_open_output_stream_metadata(fs, pathfn):
def test_localfs_options():
def test_localfs_errors(localfs):
def test_localfs_file_info(localfs):
def test_mockfs_mtime_roundtrip(mockfs):
def test_gcs_options(pickle_module):
def test_s3_options(pickle_module):
def test_s3_proxy_options(monkeypatch, pickle_module):
def test_s3fs_wrong_region():
def test_azurefs_options(pickle_module):
def test_hdfs_options(hdfs_connection, pickle_module):
def test_filesystem_from_uri(uri, expected_klass, expected_path):
def test_filesystem_from_path_object(path):
def test_filesystem_from_uri_s3(s3_server):
def test_filesystem_from_uri_gcs(gcs_server):
def test_py_filesystem():
def test_py_filesystem_equality():
def test_py_filesystem_pickling(pickle_module):
def test_py_filesystem_lifetime():
def test_py_filesystem_get_file_info():
def test_py_filesystem_get_file_info_selector():
def test_py_filesystem_ops():
def test_py_open_input_stream():
def test_py_open_input_file():
def test_py_open_output_stream():
def test_py_open_append_stream():
def test_s3_real_aws():
def test_s3_real_aws_region_selection():
def test_resolve_s3_region():
def test_copy_files(s3_connection, s3fs, tempdir):
def test_copy_files_directory(tempdir):
def test_s3_finalize():
def test_s3_finalize_region_resolver():
def test_concurrent_s3fs_init():
def test_uwsgi_integration():
def test_fsspec_filesystem_from_uri():
def test_huggingface_filesystem_from_uri():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_gandiva.py
-----------------------------
def test_tree_exp_builder():
def test_table():
def test_filter():
def test_in_expr():
def test_in_expr_todo():
def test_boolean():
def test_literals():
def test_regex():
def test_get_registered_function_signatures():
def test_filter_project():
def test_to_string():
def test_rejects_none():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_gdb.py
-----------------------------
>         """
          Record output until the gdb prompt displays.  Return recorded output.
def environment_for_gdb():
def is_gdb_available():
def python_executable():
def skip_if_gdb_unavailable():
def skip_if_gdb_script_unavailable():
class GdbSession:
def gdb():
def gdb_arrow(gdb):
def test_gdb_session(gdb):
def test_gdb_arrow(gdb_arrow):
def check_stack_repr(gdb, expr, expected):
def check_heap_repr(gdb, expr, expected):
def test_status(gdb_arrow):
def test_buffer_stack(gdb_arrow):
def test_buffer_heap(gdb_arrow):
def test_decimals(gdb_arrow):
def test_metadata(gdb_arrow):
def test_types_stack(gdb_arrow):
def test_types_heap(gdb_arrow):
def test_fields_stack(gdb_arrow):
def test_fields_heap(gdb_arrow):
def test_scalars_stack(gdb_arrow):
def test_scalars_heap(gdb_arrow):
def test_array_data(gdb_arrow):
def test_arrays_stack(gdb_arrow):
def test_arrays_heap(gdb_arrow):
def test_schema(gdb_arrow):
def test_chunked_array(gdb_arrow):
def test_record_batch(gdb_arrow):
def test_table(gdb_arrow):
def test_datum(gdb_arrow):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_io.py
-----------------------------
def check_large_seeks(file_factory, expected_error=None):
def assert_file_not_found():
def test_python_file_write():
def test_python_file_read():
def test_python_file_get_stream(nbytes, file_offset):
def test_python_file_read_at():
def test_python_file_readall():
def test_python_file_readinto():
def test_python_file_read_buffer():
def test_python_file_correct_abc():
def test_python_file_iterable():
def test_python_file_large_seeks():
def test_bytes_reader():
def test_bytes_reader_non_bytes():
def test_bytes_reader_retains_parent_reference():
def test_python_file_implicit_mode(tmpdir):
def test_python_file_writelines(tmpdir):
def test_python_file_closing():
def check_buffer_pickling(buf, pickler):
def test_buffer_bytes(pickle_module):
def test_buffer_null_data(pickle_module):
def test_buffer_memoryview(pickle_module):
def test_buffer_bytearray(pickle_module):
def test_buffer_invalid():
def test_buffer_weakref():
def test_buffer_hex(val, expected_hex_buffer):
def test_buffer_to_numpy():
def test_buffer_from_numpy():
def test_buffer_address():
def test_buffer_equals():
def test_buffer_eq_bytes():
def test_buffer_getitem():
def test_buffer_slicing():
def test_buffer_hashing():
def test_buffer_protocol_respects_immutability():
def test_foreign_buffer():
def test_allocate_buffer():
def test_allocate_buffer_resizable():
def test_non_cpu_buffer(pickle_module):
def test_cache_options():
def test_cache_options_pickling(pickle_module):
def test_compress_decompress(compression):
def test_compression_level(compression):
def test_buffer_memoryview_is_immutable():
def test_uninitialized_buffer():
def test_memory_output_stream():
def test_inmemory_write_after_closed():
def test_buffer_protocol_ref_counting():
def test_nativefile_write_memoryview():
def test_mock_output_stream():
def sample_disk_data(request, tmpdir):
def _check_native_file_reader(FACTORY, sample_data,
def test_memory_map_reader(sample_disk_data):
def test_memory_map_retain_buffer_reference(sample_disk_data):
def test_os_file_reader(sample_disk_data):
def test_os_file_large_seeks():
def _try_delete(path):
def test_memory_map_writer(tmpdir):
def test_memory_map_resize(tmpdir):
def test_memory_zero_length(tmpdir):
def test_memory_map_large_seeks():
def test_memory_map_close_remove(tmpdir):
def test_memory_map_deref_remove(tmpdir):
def test_os_file_writer(tmpdir):
def test_native_file_write_reject_unicode():
def test_native_file_modes(tmpdir):
def test_native_file_permissions(tmpdir):
def test_native_file_raises_ValueError_after_close(tmpdir):
def test_native_file_TextIOWrapper(tmpdir):
def test_native_file_TextIOWrapper_perf(tmpdir):
def test_native_file_read1(tmpdir):
def test_native_file_pandas_text_reader(tmpdir):
def test_native_file_open_error():
def test_buffered_input_stream():
def test_buffered_input_stream_detach_seekable():
def test_buffered_input_stream_detach_non_seekable():
def test_buffered_output_stream():
def test_buffered_output_stream_detach():
def check_compressed_input(data, fn, compression):
def test_compressed_input_gzip(tmpdir):
def test_compressed_input_bz2(tmpdir):
def test_compressed_input_openfile(tmpdir):
def check_compressed_concatenated(data, fn, compression):
def test_compressed_concatenated_gzip(tmpdir):
def test_compressed_input_invalid():
def make_compressed_output(data, fn, compression):
def test_compressed_output_gzip(tmpdir):
def test_compressed_output_bz2(tmpdir):
def test_output_stream_constructor(tmpdir):
def test_compression_detection(path, expected_compression):
def test_unknown_compression_raises():
def test_compressed_roundtrip(compression):
def test_compressed_recordbatch_stream(compression):
def check_transcoding(data, src_encoding, dest_encoding, chunk_sizes):
def test_transcoding_input_stream(src_encoding, dest_encoding):
def test_transcoding_no_ops(src_encoding, dest_encoding):
def test_transcoding_encoding_error(src_encoding, dest_encoding):
def test_transcoding_decoding_error(src_encoding, dest_encoding):
def test_input_stream_buffer():
def test_input_stream_duck_typing():
def test_input_stream_file_path(tmpdir):
def test_input_stream_file_path_compressed(tmpdir):
def test_input_stream_file_path_buffered(tmpdir):
def test_input_stream_file_path_compressed_and_buffered(tmpdir):
def test_input_stream_python_file(tmpdir):
def test_input_stream_native_file():
def test_input_stream_errors(tmpdir):
def test_output_stream_buffer():
def test_output_stream_duck_typing():
def test_output_stream_file_path(tmpdir):
def test_output_stream_file_path_compressed(tmpdir):
def test_output_stream_file_path_buffered(tmpdir):
def test_output_stream_file_path_compressed_and_buffered(tmpdir):
def test_output_stream_destructor(tmpdir):
def test_output_stream_python_file(tmpdir):
def test_output_stream_errors(tmpdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_ipc.py
-----------------------------
>     """ARROW-15783: Verify to_pandas works for interval types.
  
      Interval types require static structures to be enabled. This test verifies
      that they are when no other library functions are invoked.
class IpcFixture:
class FileFormatFixture(IpcFixture):
class StreamFormatFixture(IpcFixture):
class MessageFixture(IpcFixture):
def ipc_fixture():
def file_fixture():
def stream_fixture():
def format_fixture(request):
def test_empty_file():
def test_file_simple_roundtrip(file_fixture):
def test_file_write_table(file_fixture):
def test_file_read_all(sink_factory):
def test_open_file_from_buffer(file_fixture):
def test_file_read_pandas(file_fixture):
def test_file_pathlib(file_fixture, tmpdir):
def test_empty_stream():
def test_read_year_month_nano_interval(tmpdir):
def test_stream_categorical_roundtrip(stream_fixture):
def test_open_stream_from_buffer(stream_fixture):
def test_open_stream_options(stream_fixture, options):
def test_open_stream_with_wrong_options(stream_fixture):
def test_open_file_options(file_fixture, options):
def test_open_file_with_wrong_options(file_fixture):
def test_stream_write_dispatch(stream_fixture):
def test_stream_write_table_batches(stream_fixture):
def test_stream_simple_roundtrip(stream_fixture):
def test_compression_roundtrip():
def test_write_options():
def test_stream_options_roundtrip(stream_fixture, options):
def test_read_options():
def test_read_options_included_fields(stream_fixture):
def test_dictionary_delta(format_fixture):
def test_envvar_set_legacy_ipc_format():
def test_stream_read_all(stream_fixture):
def test_stream_read_pandas(stream_fixture):
def example_messages(stream_fixture):
def test_message_ctors_no_segfault():
def test_message_reader(example_messages):
def test_message_serialize_read_message(example_messages):
def test_message_read_from_compressed(example_messages):
def test_message_read_schema(example_messages):
def test_message_read_record_batch(example_messages):
def test_read_record_batch_on_stream_error_message():
class StreamReaderServer(threading.Thread):
class SocketStreamFixture(IpcFixture):
def socket_fixture():
def test_socket_simple_roundtrip(socket_fixture):
def test_socket_read_all(socket_fixture):
def test_ipc_file_stream_has_eos():
def test_ipc_zero_copy_numpy():
def test_batches_with_custom_metadata_roundtrip(ipc_type):
def test_ipc_stream_no_batches():
def test_get_record_batch_size():
def _check_serialize_pandas_round_trip(df, use_threads=False):
def test_pandas_serialize_round_trip():
def test_pandas_serialize_round_trip_nthreads():
def test_pandas_serialize_round_trip_multi_index():
def test_serialize_pandas_empty_dataframe():
def test_pandas_serialize_round_trip_not_string_columns():
def test_serialize_pandas_no_preserve_index():
def test_schema_batch_serialize_methods():
def test_schema_serialization_with_metadata():
def write_file(batch, sink):
def read_file(source):
def test_write_empty_ipc_file():
def test_py_record_batch_reader():
def test_record_batch_reader_from_arrow_stream():
def test_record_batch_reader_cast():
def test_record_batch_reader_cast_nulls():
def test_record_batch_file_writer_with_metadata():
def test_record_batch_file_writer_with_empty_metadata():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_json.py
-----------------------------
>         """
          :param b: bytes to be parsed
          :param kwargs: arguments passed on to open the json file
          :return: b parsed as a single Table
def generate_col_names():
def make_random_json(num_cols=2, num_rows=10, linesep='\r\n'):
def check_options_class_pickling(cls, pickler, **attr_values):
def test_read_options(pickle_module):
def test_parse_options(pickle_module):
class BaseTestJSON(abc.ABC):
class BaseTestJSONRead(BaseTestJSON):
class BaseTestStreamingJSONRead(BaseTestJSON):
class TestSerialJSONRead(BaseTestJSONRead, unittest.TestCase):
class TestParallelJSONRead(BaseTestJSONRead, unittest.TestCase):
class TestSerialStreamingJSONRead(BaseTestStreamingJSONRead, unittest.TestCase):
class TestThreadedStreamingJSONRead(BaseTestStreamingJSONRead, unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_jvm.py
-----------------------------
def root_allocator():
def test_jvm_buffer(root_allocator):
def test_jvm_buffer_released(root_allocator):
def _jvm_field(jvm_spec):
def _jvm_schema(jvm_spec, metadata=None):
def test_jvm_types(root_allocator, pa_type, jvm_spec, nullable):
def test_jvm_array(root_allocator, pa_type, py_data, jvm_type):
def test_jvm_array_empty(root_allocator):
def test_jvm_record_batch(root_allocator, pa_type, py_data, jvm_type,
def _string_to_varchar_holder(ra, string):
def test_jvm_string_array(root_allocator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_memory.py
-----------------------------
>     """
      Temporarily allocate *nbytes* from the given *pool*.
def backend_factory(backend_name):
def supported_factories():
def allocate_bytes(pool, nbytes):
def check_allocated_bytes(pool):
def test_default_allocated_bytes():
def test_proxy_memory_pool():
def test_logging_memory_pool(capfd):
def test_set_memory_pool():
def test_default_backend_name():
def test_release_unused():
def check_env_var(name, expected, *, expect_warning=False):
def test_env_var():
def test_memory_pool_factories():
def test_supported_memory_backends():
def run_debug_memory_pool(pool_factory, env_value):
def test_debug_memory_pool_abort(pool_factory):
def test_debug_memory_pool_trap(pool_factory):
def test_debug_memory_pool_warn(pool_factory):
def check_debug_memory_pool_disabled(pool_factory, env_value, msg):
def test_debug_memory_pool_none(pool_factory):
def test_debug_memory_pool_empty(pool_factory):
def test_debug_memory_pool_unknown(pool_factory):
def test_print_stats(pool_factory):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_misc.py
-----------------------------
>     code = """if 1:
          import pyarrow as pa
          print(pa.io_thread_count())
def test_get_include():
def test_get_library_dirs_win32():
def test_cpu_count():
def test_io_thread_count():
def test_env_var_io_thread_count():
def test_build_info():
def test_runtime_info():
def test_import_at_shutdown():
def test_set_timezone_db_path_non_windows():
def test_extension_type_constructor_errors(klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_orc.py
-----------------------------
>     """
      Fix type of expected values (as read from JSON) according to
      actual ORC datatype.
def datadir(base_datadir):
def fix_example_values(actual_cols, expected_cols):
def check_example_values(orc_df, expected_df, start=None, stop=None):
def check_example_file(orc_path, expected_df, need_fix=False):
def test_example_using_json(filename, datadir):
def test_timezone_database_absent(datadir):
def test_timezone_absent(datadir, tmpdir):
def test_orcfile_empty(datadir):
def test_filesystem_uri(tmpdir):
def test_orcfile_readwrite(tmpdir):
def test_bytesio_readwrite():
def test_buffer_readwrite():
def test_buffer_readwrite_with_writeoptions():
def test_buffer_readwrite_with_bad_writeoptions():
def test_column_selection(tempdir):
def test_wrong_usage_orc_writer(tempdir):
def test_orc_writer_with_null_arrays(tempdir):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_pandas.py
-----------------------------
>     """
      Conversion tests for Pandas metadata & indices.
def _alltypes_example(size=100):
def _check_pandas_roundtrip(df, expected=None, use_threads=False,
def _check_series_roundtrip(s, type_=None, expected_pa_type=None):
def _check_array_roundtrip(values, expected=None, mask=None,
def _check_array_from_pandas_roundtrip(np_array, type=None):
class TestConvertMetadata:
class TestConvertPrimitiveTypes:
def test_array_integer_object_nulls_option(dtype):
def test_table_integer_object_nulls_option(dtype):
class TestConvertDateTimeLikeTypes:
class TestConvertStringLikeTypes:
class TestConvertDecimalTypes:
class TestConvertListTypes:
class TestConvertStructTypes:
class TestZeroCopyConversion:
def _non_threaded_conversion():
def _threaded_conversion():
class TestConvertMisc:
def test_safe_cast_from_float_with_nans_to_int():
def _fully_loaded_dataframe_example():
def test_roundtrip_with_bytes_unicode(columns):
def _pytime_from_micros(val):
def _pytime_to_micros(pytime):
def test_convert_unsupported_type_error_message():
def test_array_to_pandas_roundtrip(arr):
def _generate_dedup_example(nunique, repeats):
def _assert_nunique(obj, expected):
def test_to_pandas_deduplicate_strings_array_types():
def test_to_pandas_deduplicate_strings_table_types():
def test_to_pandas_deduplicate_integers_as_objects():
def test_to_pandas_deduplicate_date_time():
def test_table_from_pandas_checks_field_nullability():
def test_table_from_pandas_keeps_column_order_of_dataframe():
def test_table_from_pandas_keeps_column_order_of_schema():
def test_table_from_pandas_columns_argument_only_does_filtering():
def test_table_from_pandas_columns_and_schema_are_mutually_exclusive():
def test_table_from_pandas_keeps_schema_nullability():
def test_table_from_pandas_schema_index_columns():
def test_table_from_pandas_schema_index_columns__unnamed_index():
def test_table_from_pandas_schema_with_custom_metadata():
def test_table_from_pandas_schema_field_order_metadata():
def test_recordbatch_from_to_pandas():
def test_recordbatchlist_to_pandas():
def test_recordbatch_table_pass_name_to_pandas():
def test_logical_type(type, expected):
def test_array_uses_memory_pool():
def test_singleton_blocks_zero_copy():
def _check_to_pandas_memory_unchanged(obj, **kwargs):
def test_to_pandas_split_blocks():
def _get_mgr(df):
def _check_blocks_created(t, number):
def test_to_pandas_self_destruct():
def test_table_uses_memory_pool():
def test_object_leak_in_numpy_array():
def test_object_leak_in_dataframe():
def test_array_from_py_float32():
def test_cast_timestamp_unit():
def test_nested_with_timestamp_tz_round_trip():
def test_nested_with_timestamp_tz():
def test_dictionary_with_pandas():
def random_strings(n, item_size, pct_null=0, dictionary=None):
def test_variable_dictionary_to_pandas():
def test_dictionary_encoded_nested_to_pandas():
def test_dictionary_from_pandas():
def test_dictionary_from_pandas_specified_type():
def test_convert_categories_to_array_with_string_pyarrow_dtype():
def test_array_protocol():
class DummyExtensionType(pa.ExtensionType):
def PandasArray__arrow_array__(self, type=None):
def test_array_protocol_pandas_extension_types(monkeypatch):
def _Int64Dtype__from_arrow__(self, array):
def test_convert_to_extension_array(monkeypatch):
class MyCustomIntegerType(pa.ExtensionType):
def test_conversion_extensiontype_to_extensionarray(monkeypatch):
def test_to_pandas_extension_dtypes_mapping():
def test_to_pandas_extension_dtypes_mapping_complex_type():
def test_array_to_pandas():
def test_roundtrip_empty_table_with_extension_dtype_index():
def test_to_pandas_types_mapper_index(index):
def test_array_to_pandas_types_mapper():
def test_chunked_array_to_pandas_types_mapper():
def test_metadata_compat_range_index_pre_0_12():
def test_metadata_compat_missing_field_name():
def test_metadata_index_name_not_json_serializable():
def test_metadata_index_name_is_json_serializable():
def make_df_with_timestamps():
def test_timestamp_as_object_parquet(tempdir):
def test_timestamp_as_object_out_of_range():
def test_timestamp_as_object_non_nanosecond(resolution, tz, dt):
def test_timestamp_as_object_fixed_offset():
def test_threaded_pandas_import():
def test_does_not_mutate_timedelta_dtype():
def test_does_not_mutate_timedelta_nested():
def test_roundtrip_nested_map_table_with_pydicts():
def test_roundtrip_nested_map_array_with_pydicts_sliced():
def test_roundtrip_map_array_with_pydicts_duplicate_keys():
def test_unhashable_map_keys_with_pydicts():
def test_table_column_conversion_for_datetime():
def test_array_conversion_for_datetime():
def test_nested_chunking_valid():
def test_bytes_column_name_to_pandas():
def test_is_data_frame_race_condition():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_scalars.py
-----------------------------
>     """
      Check we can call `MapScalar.as_py` with custom field names
  
      See https://github.com/apache/arrow/issues/36809
def test_basics(value, ty, klass, pickle_module):
def test_basics_np_required(pickle_module):
def test_invalid_scalar():
def test_null_singleton():
def test_nulls(pickle_module):
def test_hashing():
def test_hashing_struct_scalar():
def test_timestamp_scalar():
def test_bool():
def test_numerics():
def test_decimal128():
def test_decimal256():
def test_date():
def test_date_cast():
def test_time_from_datetime_time():
def test_temporal_values(value, time_type: pa.DataType):
def test_cast():
def test_cast_timestamp_to_string():
def test_cast_float_to_int():
def test_cast_int_to_float():
def test_cast_string_to_date(typ):
def test_timestamp():
def test_timestamp_nanos_nopandas():
def test_timestamp_no_overflow():
def test_timestamp_fixed_offset_print():
def test_duration():
def test_duration_nanos_pandas():
def test_duration_nanos_nopandas():
def test_month_day_nano_interval():
def test_string(value, ty, scalar_typ):
def test_binary(value, ty, scalar_typ):
def test_fixed_size_binary():
def test_list(ty, klass):
def test_list_from_numpy(ty):
def test_list_from_pandas(factory):
def test_fixed_size_list():
def test_struct():
def test_struct_duplicate_fields():
def test_map(pickle_module):
def test_map_duplicate_fields():
def test_dictionary(pickle_module):
def test_run_end_encoded():
def test_union(pickle_module):
def test_map_scalar_as_py_with_custom_field_name():
def test_nested_map_types_with_maps_as_pydicts():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_schema.py
-----------------------------
>     assert repr(sch) == """\
  foo: int32
  bar: string
  baz: list<item: int8>
def test_schema_constructor_errors():
def test_type_integers():
def test_type_to_pandas_dtype():
def test_type_to_pandas_dtype_check_import():
def test_type_list():
def test_type_comparisons():
def test_type_for_alias():
def test_type_string():
def test_type_timestamp_with_tz():
def test_time_types():
def test_from_numpy_dtype():
def test_schema():
def test_schema_weakref():
def test_schema_to_string_with_metadata():
def test_schema_from_tuples():
def test_schema_from_mapping():
def test_schema_duplicate_fields():
def test_field_flatten():
def test_schema_add_remove_metadata():
def test_schema_set_field():
def test_schema_equals():
def test_schema_equals_propagates_check_metadata():
def test_schema_equals_invalid_type():
def test_schema_equality_operators():
def test_schema_get_fields():
def test_schema_negative_indexing():
def test_schema_repr_with_dictionaries():
def test_type_schema_pickling(pickle_module):
def test_empty_table():
def test_schema_from_pandas():
def test_schema_sizeof():
def test_schema_merge():
def test_undecodable_metadata():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_sparse_tensor.py
-----------------------------
def test_sparse_tensor_attrs(sparse_tensor_type):
def test_sparse_coo_tensor_base_object():
def test_sparse_csr_matrix_base_object():
def test_sparse_csf_tensor_base_object():
def test_sparse_tensor_equals(sparse_tensor_type):
def test_sparse_coo_tensor_from_dense(dtype_str, arrow_type):
def test_sparse_csr_matrix_from_dense(dtype_str, arrow_type):
def test_sparse_csf_tensor_from_dense_numpy(dtype_str, arrow_type):
def test_sparse_csf_tensor_from_dense_tensor(dtype_str, arrow_type):
def test_sparse_coo_tensor_numpy_roundtrip(dtype_str, arrow_type):
def test_sparse_csr_matrix_numpy_roundtrip(dtype_str, arrow_type):
def test_sparse_csf_tensor_numpy_roundtrip(dtype_str, arrow_type):
def test_dense_to_sparse_tensor(dtype_str, arrow_type, sparse_tensor_type):
def test_sparse_coo_tensor_scipy_roundtrip(dtype_str, arrow_type,
def test_sparse_csr_matrix_scipy_roundtrip(dtype_str, arrow_type,
def test_pydata_sparse_sparse_coo_tensor_roundtrip(dtype_str, arrow_type):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_strategies.py
-----------------------------
def test_types(ty):
def test_fields(field):
def test_schemas(schema):
def test_arrays(array):
def test_array_nullability(array):
def test_chunked_arrays(chunked_array):
def test_record_batches(record_bath):
def test_tables(table):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_substrait.py
-----------------------------
>     substrait_query = """
      {
          "version": { "major": 9999 },
          "relations": [
def mock_udf_context(batch_length=10):
def _write_dummy_data_to_disk(tmpdir, file_name, table):
def test_run_serialized_query(tmpdir, use_threads):
def test_run_query_input_types(tmpdir, query):
def test_invalid_plan():
def test_binary_conversion_with_json_options(tmpdir, use_threads):
def has_function(fns, ext_file, fn_name):
def test_get_supported_functions():
def test_named_table(use_threads):
def test_named_table_invalid_table_name():
def test_named_table_empty_names():
def test_udf_via_substrait(unary_func_fixture, use_threads):
def test_udf_via_substrait_wrong_udf_name():
def test_output_field_names(use_threads):
def test_scalar_aggregate_udf_basic(varargs_agg_func_fixture):
def test_hash_aggregate_udf_basic(varargs_agg_func_fixture):
def test_serializing_expressions(expr):
def test_arrow_specific_types():
def test_arrow_one_way_types():
def test_invalid_expression_ser_des():
def test_serializing_multiple_expressions():
def test_serializing_with_compute():
def test_serializing_udfs():
def test_serializing_schema():
def test_bound_expression_from_Message():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_table.py
-----------------------------
>     assert str(data) == """[
    [
      1,
      2,
def test_chunked_array_basics():
def test_chunked_array_construction():
def test_combine_chunks():
def test_chunked_array_can_combine_chunks_with_no_chunks():
def test_chunked_array_to_numpy():
def test_chunked_array_mismatch_types():
def test_chunked_array_str():
def test_chunked_array_getitem():
def test_chunked_array_slice():
def test_chunked_array_iter():
def test_chunked_array_equals():
def test_chunked_array_pickle(data, typ, pickle_module):
def test_chunked_array_to_pandas():
def test_chunked_array_to_pandas_preserve_name():
def test_table_roundtrip_to_pandas_empty_dataframe():
def test_recordbatch_roundtrip_to_pandas_empty_dataframe():
def test_to_pandas_empty_table():
def test_chunked_array_asarray():
def test_chunked_array_flatten():
def test_chunked_array_unify_dictionaries():
def test_recordbatch_dunder_init():
def test_chunked_array_c_array_interface():
def test_chunked_array_c_stream_interface():
class BatchWrapper:
class BatchDeviceWrapper:
def test_recordbatch_c_array_interface(wrapper_class):
def test_recordbatch_c_array_interface_device_unsupported_keyword():
def test_table_c_array_interface(wrapper_class):
def test_table_c_stream_interface():
def test_recordbatch_itercolumns():
def test_recordbatch_equals():
def test_recordbatch_take():
def test_recordbatch_column_sets_private_name():
def test_recordbatch_from_arrays_validate_schema():
def test_recordbatch_from_arrays_validate_lengths():
def test_recordbatch_no_fields():
def test_recordbatch_from_arrays_invalid_names():
def test_recordbatch_empty_metadata():
def test_recordbatch_pickle(pickle_module):
def test_recordbatch_get_field():
def test_recordbatch_select_column():
def test_recordbatch_select():
def test_recordbatch_from_struct_array_invalid():
def test_recordbatch_from_struct_array():
def test_recordbatch_to_struct_array():
def test_table_from_struct_array_invalid():
def test_table_from_struct_array():
def test_table_from_struct_array_chunked_array():
def test_table_to_struct_array():
def test_table_to_struct_array_with_max_chunksize():
def test_table_to_struct_array_for_empty_table():
def check_tensors(tensor, expected_tensor, type, size):
def test_recordbatch_to_tensor_uniform_type(typ_str):
def test_recordbatch_to_tensor_uniform_float_16():
def test_recordbatch_to_tensor_mixed_type():
def test_recordbatch_to_tensor_unsupported_mixed_type_with_float16():
def test_recordbatch_to_tensor_nan():
def test_recordbatch_to_tensor_null():
def test_recordbatch_to_tensor_empty():
def test_recordbatch_to_tensor_unsupported():
def _table_like_slice_tests(factory):
def test_recordbatch_slice_getitem():
def test_table_slice_getitem():
def test_slice_zero_length_table():
def test_recordbatchlist_schema_equals():
def test_table_column_sets_private_name():
def test_table_equals():
def test_table_from_batches_and_schema():
def test_table_to_batches():
def test_table_basics(cls):
def test_table_dunder_init():
def test_table_from_arrays_preserves_column_metadata():
def test_table_from_arrays_invalid_names():
def test_table_from_lists():
def test_table_pickle(pickle_module):
def test_table_get_field():
def test_table_select_column():
def test_table_column_with_duplicates():
def test_table_add_column(cls):
def test_table_set_column(cls):
def test_table_drop_columns(cls):
def test_table_drop():
def test_table_remove_column(cls):
def test_table_remove_column_empty(cls):
def test_empty_table_with_names():
def test_empty_table():
def test_table_rename_columns(cls):
def test_table_rename_columns_mapping(cls):
def test_table_flatten():
def test_table_combine_chunks():
def test_table_unify_dictionaries():
def test_table_maps_as_pydicts():
def test_concat_tables():
def test_concat_tables_permissive():
def test_concat_tables_invalid_option():
def test_concat_tables_none_table():
def test_concat_tables_with_different_schema_metadata():
def test_concat_tables_with_promote_option():
def test_concat_tables_with_promotion():
def test_concat_tables_with_promotion_error():
def test_table_negative_indexing():
def test_concat_batches():
def test_concat_batches_different_schema():
def test_concat_batches_none_batches():
def test_table_cast_to_incompatible_schema(cls):
def test_table_safe_casting(cls):
def test_table_unsafe_casting(cls):
def test_invalid_table_construct():
def test_from_arrays_schema(data, klass):
def test_table_from_pydict(cls):
def test_table_from_pydict_arrow_arrays(data, klass):
def test_table_from_pydict_schema(data, klass):
def test_table_from_pylist(cls):
def test_table_from_pandas_schema():
def test_table_factory_function():
def test_table_factory_function_args():
def test_table_factory_function_args_pandas():
def test_factory_functions_invalid_input():
def test_table_repr_to_string():
def test_table_repr_to_string_ellipsis():
def test_record_batch_repr_to_string():
def test_record_batch_repr_to_string_ellipsis():
def test_table_function_unicode_schema():
def test_table_take_vanilla_functionality():
def test_table_take_null_index():
def test_table_take_non_consecutive():
def test_table_select():
def test_table_group_by():
def test_table_group_by_first():
def test_table_group_by_pivot_wider():
def test_table_to_recordbatchreader():
def test_table_join():
def test_table_join_unique_key():
def test_table_join_collisions():
def test_table_filter_expression(cls):
def test_table_filter_expression_chunks():
def test_table_join_many_columns():
def test_table_join_asof():
def test_table_join_asof_multiple_by():
def test_table_join_asof_empty_by():
def test_table_join_asof_collisions():
def test_table_join_asof_by_length_mismatch():
def test_table_join_asof_by_type_mismatch():
def test_table_join_asof_on_type_mismatch():
def test_table_cast_invalid(cls):
def test_table_sort_by(cls):
def test_numpy_asarray(constructor):
def test_numpy_array_protocol(constructor):
def test_invalid_non_join_column():
def cuda_context():
def schema():
def cpu_arrays(schema):
def cuda_arrays(cuda_context, cpu_arrays):
def cpu_chunked_array(cpu_arrays):
def cuda_chunked_array(cuda_arrays):
def cpu_and_cuda_chunked_array(cpu_arrays, cuda_arrays):
def cpu_recordbatch(cpu_arrays, schema):
def cuda_recordbatch(cuda_context, cpu_recordbatch):
def cpu_table(schema, cpu_chunked_array):
def cuda_table(schema, cuda_chunked_array):
def cpu_and_cuda_table(schema, cpu_chunked_array, cuda_chunked_array):
def test_chunked_array_non_cpu(cuda_context, cpu_chunked_array, cuda_chunked_array,
def verify_cuda_recordbatch(batch, expected_schema):
def test_recordbatch_non_cpu(cuda_context, cpu_recordbatch, cuda_recordbatch,
def verify_cuda_table(table, expected_schema):
def test_table_non_cpu(cuda_context, cpu_table, cuda_table,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_tensor.py
-----------------------------
def test_tensor_attrs():
def test_tensor_base_object():
def test_tensor_numpy_roundtrip(dtype_str, arrow_type):
def test_tensor_ipc_roundtrip(tmpdir):
def test_tensor_ipc_read_from_compressed(tempdir):
def test_tensor_ipc_strided(tmpdir):
def test_tensor_equals():
def test_tensor_hashing():
def test_tensor_size():
def test_read_tensor(tmpdir):
def test_tensor_memoryview():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_types.py
-----------------------------
>         """
          Conversion is using utcoffset()
def get_many_types():
def test_is_boolean():
def test_is_integer():
def test_is_floating():
def test_is_null():
def test_null_field_may_not_be_non_nullable():
def test_is_decimal():
def test_is_list():
def test_is_list_view():
def test_is_map():
def test_is_dictionary():
def test_is_nested_or_struct():
def test_is_union():
def test_is_run_end_encoded():
def test_is_binary_string():
def test_is_temporal_date_time_timestamp():
def test_is_primitive():
def test_tzinfo_to_string(tz, expected):
def test_pytz_tzinfo_to_string():
def test_dateutil_tzinfo_to_string():
def test_zoneinfo_tzinfo_to_string():
def test_tzinfo_to_string_errors():
def test_pytz_timezone_roundtrip(tz):
def test_convert_custom_tzinfo_objects_to_string():
def test_string_to_tzinfo():
def test_timezone_string_roundtrip_pytz():
def test_timestamp():
def test_timestamp_print():
def test_time32_units():
def test_time64_units():
def test_duration():
def test_list_type():
def test_large_list_type():
def test_list_view_type():
def test_large_list_view_type():
def test_map_type():
def test_fixed_size_list_type():
def test_struct_type():
def test_struct_duplicate_field_names():
def test_union_type():
def test_dictionary_type():
def test_dictionary_ordered_equals():
def test_types_hashable():
def test_types_picklable(pickle_module):
def test_types_weakref():
def test_types_has_variadic_buffers():
def test_fields_hashable():
def test_fields_weakrefable():
def test_run_end_encoded_type():
def test_exact_primitive_types(t, check_func):
def test_type_id():
def test_bit_and_byte_width():
def test_fixed_size_binary_byte_width():
def test_decimal_properties():
def test_decimal_overflow():
def test_timedelta_overflow():
def test_type_equality_operators():
def test_key_value_metadata():
def test_key_value_metadata_duplicates():
def test_field_basic():
def test_field_datatype_alias():
def test_field_equals():
def test_field_equality_operators():
def test_field_metadata():
def test_field_add_remove_metadata():
def test_field_modified_copies():
def test_is_integer_value():
def test_is_float_value():
def test_is_boolean_value():
def test_pickling(pickle_module, field):
def test_hashing(items):
def test_types_come_back_with_specific_type():
class SchemaWrapper:
class SchemaMapping(Mapping):
def test_schema_import_c_schema_interface(wrapper_class):
def test_field_import_c_schema_interface():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_udf.py
-----------------------------
>     """
      Register a unary aggregate function (mean)
def mock_udf_context(batch_length=10):
class MyError(RuntimeError):
def sum_agg_func_fixture():
def exception_agg_func_fixture():
def wrong_output_dtype_agg_func_fixture(scope="session"):
def wrong_output_type_agg_func_fixture(scope="session"):
def binary_func_fixture():
def ternary_func_fixture():
def varargs_func_fixture():
def nullary_func_fixture():
def ephemeral_nullary_func_fixture():
def wrong_output_type_func_fixture():
def wrong_output_datatype_func_fixture():
def wrong_signature_func_fixture():
def raising_func_fixture():
def unary_vector_func_fixture():
def struct_vector_func_fixture():
def check_scalar_function(func_fixture,
def test_udf_array_unary(unary_func_fixture):
def test_udf_array_binary(binary_func_fixture):
def test_udf_array_ternary(ternary_func_fixture):
def test_udf_array_varargs(varargs_func_fixture):
def test_registration_errors():
def test_varargs_function_validation(varargs_func_fixture):
def test_function_doc_validation():
def test_nullary_function(nullary_func_fixture):
def test_ephemeral_function(ephemeral_nullary_func_fixture):
def test_wrong_output_type(wrong_output_type_func_fixture):
def test_wrong_output_datatype(wrong_output_datatype_func_fixture):
def test_wrong_signature(wrong_signature_func_fixture):
def test_wrong_datatype_declaration():
def test_wrong_input_type_declaration():
def test_scalar_udf_context(unary_func_fixture):
def test_raising_func(raising_func_fixture):
def test_scalar_input(unary_func_fixture):
def test_input_lifetime(unary_func_fixture):
def _record_batch_from_iters(schema, *iters):
def _record_batch_for_range(schema, n):
def make_udt_func(schema, batch_gen):
def datasource1_direct():
def datasource1_generator():
def datasource1_exception():
def datasource1_schema():
def datasource1_args(func, func_name):
def _test_datasource1_udt(func_maker):
def test_udt_datasource1_direct():
def test_udt_datasource1_generator():
def test_udt_datasource1_exception():
def test_scalar_agg_basic(unary_agg_func_fixture):
def test_scalar_agg_empty(unary_agg_func_fixture):
def test_scalar_agg_wrong_output_dtype(wrong_output_dtype_agg_func_fixture):
def test_scalar_agg_wrong_output_type(wrong_output_type_agg_func_fixture):
def test_scalar_agg_varargs(varargs_agg_func_fixture):
def test_scalar_agg_exception(exception_agg_func_fixture):
def test_hash_agg_basic(unary_agg_func_fixture):
def test_hash_agg_empty(unary_agg_func_fixture):
def test_hash_agg_wrong_output_dtype(wrong_output_dtype_agg_func_fixture):
def test_hash_agg_wrong_output_type(wrong_output_type_agg_func_fixture):
def test_hash_agg_exception(exception_agg_func_fixture):
def test_hash_agg_random(sum_agg_func_fixture):
def test_vector_basic(unary_vector_func_fixture):
def test_vector_empty(unary_vector_func_fixture):
def test_vector_struct(struct_vector_func_fixture):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_util.py
-----------------------------
>     """
      This is the {method} method.
  
      It computes {operation}.
def func_a(whatever):
def func_b(whatever):
def func_c(whatever):
def func_d(whatever):
def func_e(whatever):
def func_f(whatever):
def test_docstring_formatting():
def test_docstring_concatenation():
def test_docstring_append():
def test_docstring_template_from_callable():
def test_inherit_docstring_template_from_callable():
def test_escaping_in_docstring():
def exhibit_signal_refcycle():
def test_signal_refcycle():
def test_download_tzdata_on_windows():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\test_without_numpy.py
-----------------------------
def test_array_to_np():
def test_chunked_array_to_np():
def test_tensor_to_np():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\util.py
-----------------------------
> """
  Utility functions for testing
def randsign():
def random_seed(seed):
def randdecimal(precision, scale):
def random_ascii(length):
def rands(nchars):
def memory_leak_check(f, metric='rss', threshold=1 << 17, iterations=10,
def get_modified_env_with_pythonpath():
def invoke_script(script_name, *args):
def changed_environ(name, value):
def change_cwd(path):
def disabled_gc():
def _filesystem_uri(path):
class FSProtocolClass:
class ProxyHandler(pyarrow.fs.FileSystemHandler):
def signal_wakeup_fd(*, warn_on_full_buffer=False):
def _ensure_minio_component_version(component, minimum_year):
def _wait_for_minio_startup(mcdir, address, access_key, secret_key):
def _run_mc_command(mcdir, *args):
def _configure_s3_limited_user(s3_server, policy, username, password):
def windows_has_tzdata():
def running_on_musllinux():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\wsgi_examples.py
-----------------------------
def application(env, start_response):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\vendored\docscrape.py
-----------------------------
> """Extract reference documentation from the NumPy source tree.
  
def strip_blank_lines(l):
class Reader:
class ParseError(Exception):
class NumpyDocString(Mapping):
def dedent_lines(lines):
class FunctionDoc(NumpyDocString):
class ObjDoc(NumpyDocString):
class ClassDoc(NumpyDocString):
def get_doc_object(obj, what=None, doc=None, config=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\vendored\version.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
class InfinityType:
class NegativeInfinityType:
def parse(version):
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s):
def _legacy_cmpkey(version):
class Version(_BaseVersion):
def _parse_letter_version(letter, number):
def _parse_local_version(local):
def _cmpkey(epoch, release, pre, post, dev, local):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\vendored\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\acero.py
-----------------------------
>     """
      Perform join of two tables or datasets.
  
      The result will be an output table with the result of the join operation
def _dataset_to_decl(dataset, use_threads=True, implicit_ordering=False):
def _perform_join(join_type, left_operand, left_keys,
def _perform_join_asof(left_operand, left_on, left_by,
def _filter_table(table, expression):
def _sort_source(table_or_dataset, sort_keys, output_type=Table, **kwargs):
def _group_by(table, aggregates, keys, use_threads=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\benchmark.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\cffi.py
-----------------------------
> c_source = """
      struct ArrowSchema {
        // Array type description
        const char* format;

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\compute.py
-----------------------------
>     doc_pieces.append(dedent("""\
          Parameters
          ----------
def _get_arg_names(func):
def _scrape_options_class_doc(options_class):
def _decorate_compute_function(wrapper, exposed_name, func, options_class):
def _get_options_class(func):
def _handle_options(name, options_class, options, args, kwargs):
def _make_generic_wrapper(func_name, func, options_class, arity):
def _make_signature(arg_names, var_arg_names, options_class):
def _wrap_function(name, func):
def _make_global_functions():
def cast(arr, target_type=None, safe=None, options=None, memory_pool=None):
def index(data, value, start=None, end=None, *, memory_pool=None):
def take(data, indices, *, boundscheck=True, memory_pool=None):
def fill_null(values, fill_value):
def top_k_unstable(values, k, sort_keys=None, *, memory_pool=None):
def bottom_k_unstable(values, k, sort_keys=None, *, memory_pool=None):
def random(n, *, initializer='system', options=None, memory_pool=None):
def field(*name_or_index):
def scalar(value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\conftest.py
-----------------------------
>     """
      Register a unary scalar function.
def pytest_ignore_collect(collection_path, config):
def _docdir(request):
def add_fs(doctest_namespace, request, tmp_path):
def unary_func_fixture():
def unary_agg_func_fixture():
def varargs_agg_func_fixture():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\csv.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\cuda.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\dataset.py
-----------------------------
> """Dataset is currently unstable. APIs subject to change without notice."""
  
  import pyarrow as pa
  from pyarrow.util import _is_iterable, _stringify_path, _is_path_like
def __getattr__(name):
def partitioning(schema=None, field_names=None, flavor=None,
def _ensure_partitioning(scheme):
def _ensure_format(obj):
def _ensure_multiple_sources(paths, filesystem=None):
def _ensure_single_source(path, filesystem=None):
def _filesystem_dataset(source, schema=None, filesystem=None,
def _in_memory_dataset(source, schema=None, **kwargs):
def _union_dataset(children, schema=None, **kwargs):
def parquet_dataset(metadata_path, schema=None, filesystem=None, format=None,
def dataset(source, schema=None, format=None, filesystem=None,
def _ensure_write_partitioning(part, schema, flavor):
def write_dataset(data, base_dir, *, basename_template=None, format=None,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\feather.py
-----------------------------
>     """
      Encapsulates details of reading a list of Feather files.
  
      Parameters
class FeatherDataset:
def check_chunked_overflow(name, col):
def write_feather(df, dest, compression=None, compression_level=None,
def read_feather(source, columns=None, use_threads=True,
def read_table(source, columns=None, memory_map=False, use_threads=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\flight.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\fs.py
-----------------------------
> """
  FileSystem abstraction to interact with various local and remote filesystems.
def __getattr__(name):
def _ensure_filesystem(filesystem, *, use_mmap=False):
def _resolve_filesystem_and_path(path, filesystem=None, *, memory_map=False):
def copy_files(source, destination,
class FSSpecHandler(FileSystemHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\ipc.py
-----------------------------
>     """
      Reader for the Arrow streaming binary format.
  
      Parameters
class RecordBatchStreamReader(lib._RecordBatchStreamReader):
class RecordBatchStreamWriter(lib._RecordBatchStreamWriter):
class RecordBatchFileReader(lib._RecordBatchFileReader):
class RecordBatchFileWriter(lib._RecordBatchFileWriter):
def _get_legacy_format_default(options):
def _ensure_default_ipc_read_options(options):
def new_stream(sink, schema, *, options=None):
def open_stream(source, *, options=None, memory_pool=None):
def new_file(sink, schema, *, options=None, metadata=None):
def open_file(source, footer_offset=None, *, options=None, memory_pool=None):
def serialize_pandas(df, *, nthreads=None, preserve_index=None):
def deserialize_pandas(buf, *, use_threads=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\json.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\jvm.py
-----------------------------
> """
  Functions to interact with Arrow memory allocated by Arrow Java.
  
  These functions convert the objects holding the metadata, the actual
class _JvmBufferNanny:
def jvm_buffer(jvm_buf):
def _from_jvm_int_type(jvm_type):
def _from_jvm_float_type(jvm_type):
def _from_jvm_time_type(jvm_type):
def _from_jvm_timestamp_type(jvm_type):
def _from_jvm_date_type(jvm_type):
def field(jvm_field):
def schema(jvm_schema):
def array(jvm_array):
def record_batch(jvm_vector_schema_root):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\orc.py
-----------------------------
>     """
      Reader interface for a single ORC file
  
      Parameters
class ORCFile:
class ORCWriter:
def read_table(source, columns=None, filesystem=None):
def write_table(table, where, *,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\pandas_compat.py
-----------------------------
>     """Construct the metadata for a given column
  
      Parameters
      ----------
def get_logical_type_map():
def get_logical_type(arrow_type):
def get_numpy_logical_type_map():
def get_logical_type_from_numpy(pandas_collection):
def get_extension_dtype_info(column):
def get_column_metadata(column, name, arrow_type, field_name):
def construct_metadata(columns_to_convert, df, column_names, index_levels,
def _get_simple_index_descriptor(level, name):
def _column_name_to_strings(name):
def _index_level_name(index, i, column_names):
def _get_columns_to_convert(df, schema, preserve_index, columns):
def _get_columns_to_convert_given_schema(df, schema, preserve_index):
def _get_index_level(df, name):
def _level_name(name):
def _get_range_index_descriptor(level):
def _get_index_level_values(index):
def _resolve_columns_of_interest(df, schema, columns):
def dataframe_to_types(df, preserve_index, columns=None):
def dataframe_to_arrays(df, schema, preserve_index, nthreads=1, columns=None,
def get_datetimetz_type(values, dtype, type_):
def _reconstruct_block(item, columns=None, extension_columns=None, return_block=True):
def make_datetimetz(unit, tz):
def table_to_dataframe(
def _get_extension_dtypes(table, columns_metadata, types_mapper, options, categories):
def _check_data_column_metadata_consistency(all_columns):
def _deserialize_column_index(block_table, all_columns, column_indexes):
def _reconstruct_index(table, index_descriptors, all_columns, types_mapper=None):
def _extract_index_level(table, result_table, field_name,
def _backwards_compatible_index_name(raw_name, logical_name):
def _is_generated_index_name(name):
def get_pandas_logical_type_map():
def _pandas_type_to_numpy_type(pandas_type):
def _reconstruct_columns_from_metadata(columns, column_indexes):
def _add_any_metadata(table, pandas_metadata):
def make_tz_aware(series, tz):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\substrait.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\types.py
-----------------------------
>     """
      Return True if value is an instance of type: {datatype}.
  
      Parameters
def is_null(t):
def is_boolean(t):
def is_integer(t):
def is_signed_integer(t):
def is_unsigned_integer(t):
def is_int8(t):
def is_int16(t):
def is_int32(t):
def is_int64(t):
def is_uint8(t):
def is_uint16(t):
def is_uint32(t):
def is_uint64(t):
def is_floating(t):
def is_float16(t):
def is_float32(t):
def is_float64(t):
def is_list(t):
def is_large_list(t):
def is_fixed_size_list(t):
def is_list_view(t):
def is_large_list_view(t):
def is_struct(t):
def is_union(t):
def is_nested(t):
def is_run_end_encoded(t):
def is_temporal(t):
def is_timestamp(t):
def is_duration(t):
def is_time(t):
def is_time32(t):
def is_time64(t):
def is_binary(t):
def is_large_binary(t):
def is_unicode(t):
def is_string(t):
def is_large_unicode(t):
def is_large_string(t):
def is_fixed_size_binary(t):
def is_binary_view(t):
def is_string_view(t):
def is_date(t):
def is_date32(t):
def is_date64(t):
def is_map(t):
def is_decimal(t):
def is_decimal32(t):
def is_decimal64(t):
def is_decimal128(t):
def is_decimal256(t):
def is_dictionary(t):
def is_interval(t):
def is_primitive(t):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\util.py
-----------------------------
>     """
      A decorator that takes docstring templates, concatenates them, and finally
      performs string substitution on them.
      This decorator will add a variable "_docstring_components" to the wrapped
def doc(*docstrings, **params):
def _deprecate_api(old_name, new_name, api, next_version, type=FutureWarning):
def _deprecate_class(old_name, new_class, next_version,
def _is_iterable(obj):
def _is_path_like(path):
def _stringify_path(path):
def product(seq):
def get_contiguous_span(shape, strides, itemsize):
def find_free_port():
def guid():
def _break_traceback_cycle_from_frame(frame):
def _download_urllib(url, out_path):
def _download_requests(url, out_path):
def download_tzdata_on_windows():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\_compute_docstrings.py
-----------------------------
> """
  Custom documentation additions for compute functions.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\_generated_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pyarrow\__init__.py
-----------------------------
> """
  PyArrow is the python implementation of Apache Arrow.
  
  Apache Arrow is a cross-language development platform for in-memory data.
def _delvewheel_patch_1_10_1():
def show_versions():
def _module_is_available(module):
def _filesystem_is_available(fs):
def show_info():
def get_include():
def _get_pkg_config_executable():
def _has_pkg_config(pkgname):
def _read_pkg_config_variable(pkgname, cli_args):
def get_libraries():
def create_library_symlinks():
def get_library_dirs():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\class_validators.py
-----------------------------
> """Old `@validator` and `@root_validator` function validators from V1."""
  
  from __future__ import annotations as _annotations
  
def validator(
def root_validator(
def root_validator(
def root_validator(
def root_validator(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\config.py
-----------------------------
>     """This class is only retained for backwards compatibility.
  
      !!! Warning "Deprecated"
          BaseConfig is deprecated. Use the [`pydantic.ConfigDict`][pydantic.ConfigDict] 
instead.
class _ConfigMetaclass(type):
class BaseConfig(metaclass=_ConfigMetaclass):
class _ExtraMeta(type):
class Extra(metaclass=_ExtraMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\copy_internals.py
-----------------------------
def _iter(
def _copy_and_set_values(
def _get_value(
def _calculate_keys(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\decorator.py
-----------------------------
>     """Decorator to validate the arguments passed to a function."""
      warnings.warn(
          'The `validate_arguments` method is deprecated; use `validate_call` instead.',
          PydanticDeprecatedSince20,
def validate_arguments(
def validate_arguments(func: 'AnyCallableT') -> 'AnyCallableT': ...
def validate_arguments(func: Optional['AnyCallableT'] = None, *, config: 'ConfigType' = None) -> Any:
class ValidatedFunction:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\json.py
-----------------------------
>     """Encodes a Decimal as int of there's no exponent, otherwise float.
  
      This is useful when we use ConstrainedDecimal to represent Numeric(x,0)
      where a integer (but not int typed) is used. Encoding this as a float
def isoformat(o: Union[datetime.date, datetime.time]) -> str:
def decimal_encoder(dec_value: Decimal) -> Union[int, float]:
def pydantic_encoder(obj: Any) -> Any:
def custom_pydantic_encoder(type_encoders: dict[Any, Callable[[type[Any]], Any]], obj: Any) -> Any:
def timedelta_isoformat(td: datetime.timedelta) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\parse.py
-----------------------------
class Protocol(str, Enum):
def load_str_bytes(
def load_file(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\tools.py
-----------------------------
>     """Generate a JSON schema (as dict) for the passed model or dynamically generated 
one."""
      warnings.warn(
          '`schema_of` is deprecated. Use `pydantic.TypeAdapter.json_schema` instead.',
          category=PydanticDeprecatedSince20,
def parse_obj_as(type_: type[T], obj: Any, type_name: NameFactory | None = None) -> T:
def schema_of(
def schema_json_of(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\deprecated\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\experimental\arguments_schema.py
-----------------------------
> """Experimental module exposing a function to generate a core schema that validates 
callable arguments."""
  
  from __future__ import annotations
  
def generate_arguments_schema(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\experimental\pipeline.py
-----------------------------
> """Experimental pipeline API functionality. Be careful with this API, it's subject to 
change."""
  
  from __future__ import annotations
  
class _ValidateAs:
class _ValidateAsDefer:
class _Transform:
class _PipelineOr:
class _PipelineAnd:
class _Eq:
class _NotEq:
class _In:
class _NotIn:
class _Constraint:
class _FieldTypeMarker:
class _Pipeline(Generic[_InT, _OutT]):
def _check_func(
def _apply_step(step: _Step, s: cs.CoreSchema | None, handler: GetCoreSchemaHandler, source_type: Any) -> cs.CoreSchema:
def _apply_parse(
def _apply_transform(
def _apply_constraint(  # noqa: C901
class _SupportsRange(annotated_types.SupportsLe, annotated_types.SupportsGe, Protocol):
class _SupportsLen(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\experimental\__init__.py
-----------------------------
> """The "experimental" module of pydantic contains potential new features that are subject 
to change."""
  
  import warnings
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\plugin\_loader.py
-----------------------------
>     """Load plugins for Pydantic.
  
      Inspired by: 
https://github.com/pytest-dev/pluggy/blob/1.3.0/src/pluggy/_manager.py#L376-L402
def get_plugins() -> Iterable[PydanticPluginProtocol]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\plugin\_schema_validator.py
-----------------------------
> """Pluggable schema validator for pydantic."""
  
  from __future__ import annotations
  
def create_schema_validator(
class PluggableSchemaValidator:
def build_wrapper(func: Callable[P, R], event_handlers: list[BaseValidateHandlerProtocol]) -> Callable[P, R]:
def filter_handlers(handler_cls: BaseValidateHandlerProtocol, method_name: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\plugin\__init__.py
-----------------------------
> """!!! abstract "Usage Documentation"
      [Build a Plugin](../concepts/plugins.md#build-a-plugin)
  
  Plugin interface for Pydantic plugins, and related types.
class SchemaTypePath(NamedTuple):
class PydanticPluginProtocol(Protocol):
class BaseValidateHandlerProtocol(Protocol):
class ValidatePythonHandlerProtocol(BaseValidateHandlerProtocol, Protocol):
class ValidateJsonHandlerProtocol(BaseValidateHandlerProtocol, Protocol):
class ValidateStringsHandlerProtocol(BaseValidateHandlerProtocol, Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\annotated_types.py
-----------------------------
>     """
      Create a `BaseModel` based on the fields of a `TypedDict`.
      Since `typing.TypedDict` in Python 3.8 does not store runtime information about 
optional keys,
      we raise an error if this happens (see https://bugs.python.org/issue38834).
def create_model_from_typeddict(
def create_model_from_namedtuple(namedtuple_cls: Type['NamedTuple'], **kwargs: Any) -> Type['BaseModel']:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\class_validators.py
-----------------------------
>     """
      Decorate methods on the class indicating that they should be used to validate fields
      :param fields: which field(s) the method should be called on
      :param pre: whether or not this validator should be called before the standard 
validators (else after)
class Validator:
def validator(
def root_validator(_func: AnyCallable) -> 'AnyClassMethod':
def root_validator(
def root_validator(
def _prepare_validator(function: AnyCallable, allow_reuse: bool) -> 'AnyClassMethod':
class ValidatorGroup:
def extract_validators(namespace: Dict[str, Any]) -> Dict[str, List[Validator]]:
def extract_root_validators(namespace: Dict[str, Any]) -> Tuple[List[AnyCallable], List[Tuple[bool, AnyCallable]]]:
def inherit_validators(base_validators: 'ValidatorListDict', validators: 'ValidatorListDict') -> 'ValidatorListDict':
def make_generic_validator(validator: AnyCallable) -> 'ValidatorCallable':
def prep_validators(v_funcs: Iterable[AnyCallable]) -> 'ValidatorsList':
def _generic_validator_cls(validator: AnyCallable, sig: 'Signature', args: Set[str]) -> 'ValidatorCallable':
def _generic_validator_basic(validator: AnyCallable, sig: 'Signature', args: Set[str]) -> 'ValidatorCallable':
def gather_all_validators(type_: 'ModelOrDc') -> Dict[str, 'AnyClassMethod']:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\color.py
-----------------------------
> """
  Color definitions are  used as per CSS3 specification:
  http://www.w3.org/TR/css3-color/#svg-color
  
class RGBA:
class Color(Representation):
def parse_tuple(value: Tuple[Any, ...]) -> RGBA:
def parse_str(value: str) -> RGBA:
def ints_to_rgba(r: Union[int, str], g: Union[int, str], b: Union[int, str], alpha: Optional[float]) -> RGBA:
def parse_color_value(value: Union[int, str], max_val: int = 255) -> float:
def parse_float_alpha(value: Union[None, str, float, int]) -> Optional[float]:
def parse_hsl(h: str, h_units: str, sat: str, light: str, alpha: Optional[float] = None) -> RGBA:
def float_to_255(c: float) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\config.py
-----------------------------
>         """
          Get properties of FieldInfo from the `fields` property of the config class.
class Extra(str, Enum):
class BaseConfig:
def get_config(config: Union[ConfigDict, Type[object], None]) -> Type[BaseConfig]:
def inherit_config(self_config: 'ConfigType', parent_config: 'ConfigType', **namespace: Any) -> 'ConfigType':
def prepare_config(config: Type[BaseConfig], cls_name: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\dataclasses.py
-----------------------------
> """
  The main purpose is to enhance stdlib dataclasses by adding validation
  A pydantic dataclass can be generated from scratch or from a stdlib one.
  
class M:
def dataclass(
def set_validation(cls: Type['DataclassT'], value: bool) -> Generator[Type['DataclassT'], None, None]:
class DataclassProxy:
def _add_pydantic_validation_attributes(  # noqa: C901 (ignore complexity)
def _get_validators(cls: 'DataclassClassOrWrapper') -> 'CallableGenerator':
def _validate_dataclass(cls: Type['DataclassT'], v: Any) -> 'DataclassT':
def create_pydantic_model_from_dataclass(
def _dataclass_validate_values(self: 'Dataclass') -> None:
def _dataclass_validate_assignment_setattr(self: 'Dataclass', name: str, value: Any) -> None:
def is_builtin_dataclass(_cls: Type[Any]) -> bool:
def make_dataclass_validator(dc_cls: Type['Dataclass'], config: Type[BaseConfig]) -> 'CallableGenerator':

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\datetime_parse.py
-----------------------------
> """
  Functions to parse datetime objects.
  
  We're using regular expressions rather than time.strptime because:
def get_numeric(value: StrBytesIntFloat, native_expected_type: str) -> Union[None, int, float]:
def from_unix_seconds(seconds: Union[int, float]) -> datetime:
def _parse_timezone(value: Optional[str], error: Type[Exception]) -> Union[None, int, timezone]:
def parse_date(value: Union[date, StrBytesIntFloat]) -> date:
def parse_time(value: Union[time, StrBytesIntFloat]) -> time:
def parse_datetime(value: Union[datetime, StrBytesIntFloat]) -> datetime:
def parse_duration(value: StrBytesIntFloat) -> timedelta:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\decorator.py
-----------------------------
>     """
      Decorator to validate the arguments passed to a function.
def validate_arguments(func: None = None, *, config: 'ConfigType' = None) -> Callable[['AnyCallableT'], 'AnyCallableT']:
def validate_arguments(func: 'AnyCallableT') -> 'AnyCallableT':
def validate_arguments(func: Optional['AnyCallableT'] = None, *, config: 'ConfigType' = None) -> Any:
class ValidatedFunction:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\env_settings.py
-----------------------------
>     """
      Base class for settings, allowing values to be overridden by environment variables.
  
      This is useful in production for secrets you do not wish to save in code, it plays 
nicely with docker(-compose),
class SettingsError(ValueError):
class BaseSettings(BaseModel):
class InitSettingsSource:
class EnvSettingsSource:
class SecretsSettingsSource:
def read_env_file(
def find_case_path(dir_path: Path, file_name: str, case_sensitive: bool) -> Optional[Path]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\errors.py
-----------------------------
>     """
      For built-in exceptions like ValueError or TypeError, we need to implement
      __reduce__ to override the default behaviour (instead of __getstate__/__setstate__)
      By default pickle protocol 2 calls `cls.__new__(cls, *args)`.
def cls_kwargs(cls: Type['PydanticErrorMixin'], ctx: 'DictStrAny') -> 'PydanticErrorMixin':
class PydanticErrorMixin:
class PydanticTypeError(PydanticErrorMixin, TypeError):
class PydanticValueError(PydanticErrorMixin, ValueError):
class ConfigError(RuntimeError):
class MissingError(PydanticValueError):
class ExtraError(PydanticValueError):
class NoneIsNotAllowedError(PydanticTypeError):
class NoneIsAllowedError(PydanticTypeError):
class WrongConstantError(PydanticValueError):
class NotNoneError(PydanticTypeError):
class BoolError(PydanticTypeError):
class BytesError(PydanticTypeError):
class DictError(PydanticTypeError):
class EmailError(PydanticValueError):
class UrlError(PydanticValueError):
class UrlSchemeError(UrlError):
class UrlSchemePermittedError(UrlError):
class UrlUserInfoError(UrlError):
class UrlHostError(UrlError):
class UrlHostTldError(UrlError):
class UrlPortError(UrlError):
class UrlExtraError(UrlError):
class EnumMemberError(PydanticTypeError):
class IntegerError(PydanticTypeError):
class FloatError(PydanticTypeError):
class PathError(PydanticTypeError):
class _PathValueError(PydanticValueError):
class PathNotExistsError(_PathValueError):
class PathNotAFileError(_PathValueError):
class PathNotADirectoryError(_PathValueError):
class PyObjectError(PydanticTypeError):
class SequenceError(PydanticTypeError):
class IterableError(PydanticTypeError):
class ListError(PydanticTypeError):
class SetError(PydanticTypeError):
class FrozenSetError(PydanticTypeError):
class DequeError(PydanticTypeError):
class TupleError(PydanticTypeError):
class TupleLengthError(PydanticValueError):
class ListMinLengthError(PydanticValueError):
class ListMaxLengthError(PydanticValueError):
class ListUniqueItemsError(PydanticValueError):
class SetMinLengthError(PydanticValueError):
class SetMaxLengthError(PydanticValueError):
class FrozenSetMinLengthError(PydanticValueError):
class FrozenSetMaxLengthError(PydanticValueError):
class AnyStrMinLengthError(PydanticValueError):
class AnyStrMaxLengthError(PydanticValueError):
class StrError(PydanticTypeError):
class StrRegexError(PydanticValueError):
class _NumberBoundError(PydanticValueError):
class NumberNotGtError(_NumberBoundError):
class NumberNotGeError(_NumberBoundError):
class NumberNotLtError(_NumberBoundError):
class NumberNotLeError(_NumberBoundError):
class NumberNotFiniteError(PydanticValueError):
class NumberNotMultipleError(PydanticValueError):
class DecimalError(PydanticTypeError):
class DecimalIsNotFiniteError(PydanticValueError):
class DecimalMaxDigitsError(PydanticValueError):
class DecimalMaxPlacesError(PydanticValueError):
class DecimalWholeDigitsError(PydanticValueError):
class DateTimeError(PydanticValueError):
class DateError(PydanticValueError):
class DateNotInThePastError(PydanticValueError):
class DateNotInTheFutureError(PydanticValueError):
class TimeError(PydanticValueError):
class DurationError(PydanticValueError):
class HashableError(PydanticTypeError):
class UUIDError(PydanticTypeError):
class UUIDVersionError(PydanticValueError):
class ArbitraryTypeError(PydanticTypeError):
class ClassError(PydanticTypeError):
class SubclassError(PydanticTypeError):
class JsonError(PydanticValueError):
class JsonTypeError(PydanticTypeError):
class PatternError(PydanticValueError):
class DataclassTypeError(PydanticTypeError):
class CallableError(PydanticTypeError):
class EnumError(PydanticTypeError):
class IntEnumError(PydanticTypeError):
class IPvAnyAddressError(PydanticValueError):
class IPvAnyInterfaceError(PydanticValueError):
class IPvAnyNetworkError(PydanticValueError):
class IPv4AddressError(PydanticValueError):
class IPv6AddressError(PydanticValueError):
class IPv4NetworkError(PydanticValueError):
class IPv6NetworkError(PydanticValueError):
class IPv4InterfaceError(PydanticValueError):
class IPv6InterfaceError(PydanticValueError):
class ColorError(PydanticValueError):
class StrictBoolError(PydanticValueError):
class NotDigitError(PydanticValueError):
class LuhnValidationError(PydanticValueError):
class InvalidLengthForBrand(PydanticValueError):
class InvalidByteSize(PydanticValueError):
class InvalidByteSizeUnit(PydanticValueError):
class MissingDiscriminator(PydanticValueError):
class InvalidDiscriminator(PydanticValueError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\error_wrappers.py
-----------------------------
class ErrorWrapper(Representation):
class ValidationError(Representation, ValueError):
def display_errors(errors: List['ErrorDict']) -> str:
def _display_error_loc(error: 'ErrorDict') -> str:
def _display_error_type_and_ctx(error: 'ErrorDict') -> str:
def flatten_errors(
def error_dict(exc: Exception, config: Type['BaseConfig'], loc: 'Loc') -> 'ErrorDict':
def get_exc_type(cls: Type[Exception]) -> str:
def _get_exc_type(cls: Type[Exception]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\fields.py
-----------------------------
>     """
      Captures extra information about a field.
class UndefinedType:
class FieldInfo(Representation):
def Field(
class ModelField(Representation):
class ModelPrivateAttr(Representation):
def PrivateAttr(
class DeferredType:
def is_finalvar_with_default_val(type_: Type[Any], val: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\generics.py
-----------------------------
>         """Instantiates a new class from a generic class `cls` and type variables `params`.
  
          :param params: Tuple of types the class . Given a generic class
              `Model` with 2 type variables and a concrete model `Model[str, int]`,
class GenericModel(BaseModel):
def replace_types(type_: Any, type_map: Mapping[Any, Any]) -> Any:
def check_parameters_count(cls: Type[GenericModel], parameters: Tuple[Any, ...]) -> None:
def iter_contained_typevars(v: Any) -> Iterator[TypeVarType]:
def get_caller_frame_info() -> Tuple[Optional[str], bool]:
def _prepare_model_fields(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\json.py
-----------------------------
>     """
      Encodes a Decimal as int of there's no exponent, otherwise float
  
      This is useful when we use ConstrainedDecimal to represent Numeric(x,0)
def isoformat(o: Union[datetime.date, datetime.time]) -> str:
def decimal_encoder(dec_value: Decimal) -> Union[int, float]:
def pydantic_encoder(obj: Any) -> Any:
def custom_pydantic_encoder(type_encoders: Dict[Any, Callable[[Type[Any]], Any]], obj: Any) -> Any:
def timedelta_isoformat(td: datetime.timedelta) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\main.py
-----------------------------
>         """
          Avoid calling ABC _abc_subclasscheck unless we're pretty sure.
  
          See #3829 and python/cpython#92810
def validate_custom_root_type(fields: Dict[str, ModelField]) -> None:
def generate_hash_function(frozen: bool) -> Optional[Callable[[Any], int]]:
class ModelMetaclass(ABCMeta):
class BaseModel(Representation, metaclass=ModelMetaclass):
def create_model(
def create_model(
def create_model(
def validate_model(  # noqa: C901 (ignore complexity)

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\mypy.py
-----------------------------
>     """
      `version` is the mypy version string
  
      We might want to use this to print a warning if the mypy version being used is
def parse_mypy_version(version: str) -> Tuple[int, ...]:
def plugin(version: str) -> 'TypingType[Plugin]':
class PydanticPlugin(Plugin):
class PydanticPluginConfig:
def from_orm_callback(ctx: MethodContext) -> Type:
class PydanticModelTransformer:
class PydanticModelField:
class ModelConfigData:
def error_from_orm(model_name: str, api: CheckerPluginInterface, context: Context) -> None:
def error_invalid_config_value(name: str, api: SemanticAnalyzerPluginInterface, context: Context) -> None:
def error_required_dynamic_aliases(api: SemanticAnalyzerPluginInterface, context: Context) -> None:
def error_unexpected_behavior(
def error_untyped_fields(api: SemanticAnalyzerPluginInterface, context: Context) -> None:
def error_default_and_default_factory_specified(api: CheckerPluginInterface, context: Context) -> None:
def add_method(
def get_fullname(x: Union[FuncBase, SymbolNode]) -> str:
def get_name(x: Union[FuncBase, SymbolNode]) -> str:
def parse_toml(config_file: str) -> Optional[Dict[str, Any]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\networks.py
-----------------------------
>     """
      Compiled multi host url regex.
  
      Additionally to `url_regex` it allows to match multiple hosts.
def url_regex() -> Pattern[str]:
def multi_host_url_regex() -> Pattern[str]:
def ascii_domain_regex() -> Pattern[str]:
def int_domain_regex() -> Pattern[str]:
def host_regex() -> Pattern[str]:
class AnyUrl(str):
class AnyHttpUrl(AnyUrl):
class HttpUrl(AnyHttpUrl):
class FileUrl(AnyUrl):
class MultiHostDsn(AnyUrl):
class PostgresDsn(MultiHostDsn):
class CockroachDsn(AnyUrl):
class AmqpDsn(AnyUrl):
class RedisDsn(AnyUrl):
class MongoDsn(AnyUrl):
class KafkaDsn(AnyUrl):
def stricturl(
def import_email_validator() -> None:
class EmailStr(str):
class NameEmail(Representation):
class IPvAnyAddress(_BaseAddress):
class IPvAnyInterface(_BaseAddress):
class IPvAnyNetwork(_BaseNetwork):  # type: ignore
def validate_email(value: Union[str]) -> Tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\parse.py
-----------------------------
class Protocol(str, Enum):
def load_str_bytes(
def load_file(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\schema.py
-----------------------------
>     """
      Process a list of models and generate a single JSON Schema with all of them defined in 
the ``definitions``
      top-level JSON key, including their sub-models.
  
def _apply_modify_schema(
def schema(
def model_schema(
def get_field_info_schema(field: ModelField, schema_overrides: bool = False) -> Tuple[Dict[str, Any], bool]:
def field_schema(
def get_field_schema_validations(field: ModelField) -> Dict[str, Any]:
def get_model_name_map(unique_models: TypeModelSet) -> Dict[TypeModelOrEnum, str]:
def get_flat_models_from_model(model: Type['BaseModel'], known_models: Optional[TypeModelSet] = None) -> TypeModelSet:
def get_flat_models_from_field(field: ModelField, known_models: TypeModelSet) -> TypeModelSet:
def get_flat_models_from_fields(fields: Sequence[ModelField], known_models: TypeModelSet) -> TypeModelSet:
def get_flat_models_from_models(models: Sequence[Type['BaseModel']]) -> TypeModelSet:
def get_long_model_name(model: TypeModelOrEnum) -> str:
def field_type_schema(
def model_process_schema(
def model_type_schema(
def enum_process_schema(enum: Type[Enum], *, field: Optional[ModelField] = None) -> Dict[str, Any]:
def field_singleton_sub_fields_schema(
def add_field_type_to_schema(field_type: Any, schema_: Dict[str, Any]) -> None:
def get_schema_ref(name: str, ref_prefix: Optional[str], ref_template: str, schema_overrides: bool) -> Dict[str, Any]:
def field_singleton_schema(  # noqa: C901 (ignore complexity)
def multitypes_literal_field_for_schema(values: Tuple[Any, ...], field: ModelField) -> ModelField:
def encode_default(dft: Any) -> Any:
def get_annotation_from_field_info(
def get_annotation_with_constraints(annotation: Any, field_info: FieldInfo) -> Tuple[Type[Any], Set[str]]:  # noqa: C901
def normalize_name(name: str) -> str:
class SkipField(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\tools.py
-----------------------------
>     """Generate a JSON schema (as dict) for the passed model or dynamically generated one"""
      return _get_parsing_type(type_, type_name=title).schema(**schema_kwargs)
  
  
def _generate_parsing_type_name(type_: Any) -> str:
def _get_parsing_type(type_: Any, *, type_name: Optional[NameFactory] = None) -> Any:
def parse_obj_as(type_: Type[T], obj: Any, *, type_name: Optional[NameFactory] = None) -> T:
def parse_file_as(
def parse_raw_as(
def schema_of(type_: Any, *, title: Optional[NameFactory] = None, **schema_kwargs: Any) -> 'DictStrAny':
def schema_json_of(type_: Any, *, title: Optional[NameFactory] = None, **schema_json_kwargs: Any) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\types.py
-----------------------------
>         """
          StrictBool to allow for bools which are not type-coerced.
def _registered(typ: Type[T]) -> Type[T]:
def _registered(typ: 'ConstrainedNumberMeta') -> 'ConstrainedNumberMeta':
def _registered(typ: Union[Type[T], 'ConstrainedNumberMeta']) -> Union[Type[T], 'ConstrainedNumberMeta']:
class ConstrainedNumberMeta(type):
class ConstrainedInt(int, metaclass=ConstrainedNumberMeta):
def conint(
class ConstrainedFloat(float, metaclass=ConstrainedNumberMeta):
def confloat(
class ConstrainedBytes(bytes):
def conbytes(
class ConstrainedStr(str):
def constr(
class ConstrainedSet(set):  # type: ignore
def conset(item_type: Type[T], *, min_items: Optional[int] = None, max_items: Optional[int] = None) -> Type[Set[T]]:
class ConstrainedFrozenSet(frozenset):  # type: ignore
def confrozenset(
class ConstrainedList(list):  # type: ignore
def conlist(
class ConstrainedDecimal(Decimal, metaclass=ConstrainedNumberMeta):
def condecimal(
class JsonWrapper:
class JsonMeta(type):
class SecretField(abc.ABC):
class SecretStr(SecretField):
class SecretBytes(SecretField):
class PaymentCardBrand(str, Enum):
class PaymentCardNumber(str):
class ByteSize(int):
class ConstrainedDate(date, metaclass=ConstrainedNumberMeta):
def condate(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\typing.py
-----------------------------
>         """
          We can't directly use `typing.get_origin` since we need a fallback to support
          custom generic classes like `ConstrainedList`
          It should be useless once https://github.com/cython/cython/issues/3537 is
def display_as_type(v: Type[Any]) -> str:
def resolve_annotations(raw_annotations: Dict[str, Type[Any]], module_name: Optional[str]) -> Dict[str, Type[Any]]:
def is_callable_type(type_: Type[Any]) -> bool:
def is_literal_type(type_: Type[Any]) -> bool:
def literal_values(type_: Type[Any]) -> Tuple[Any, ...]:
def all_literal_values(type_: Type[Any]) -> Tuple[Any, ...]:
def is_namedtuple(type_: Type[Any]) -> bool:
def is_typeddict(type_: Type[Any]) -> bool:
def _check_typeddict_special(type_: Any) -> bool:
def is_typeddict_special(type_: Any) -> bool:
def is_new_type(type_: Type[Any]) -> bool:
def new_type_supertype(type_: Type[Any]) -> Type[Any]:
def _check_classvar(v: Optional[Type[Any]]) -> bool:
def _check_finalvar(v: Optional[Type[Any]]) -> bool:
def is_classvar(ann_type: Type[Any]) -> bool:
def is_finalvar(ann_type: Type[Any]) -> bool:
def update_field_forward_refs(field: 'ModelField', globalns: Any, localns: Any) -> None:
def update_model_forward_refs(
def get_class(type_: Type[Any]) -> Union[None, bool, Type[Any]]:
def get_sub_types(tp: Any) -> List[Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\utils.py
-----------------------------
>     """
      Stolen approximately from django. Import a dotted module path and return the 
attribute/class designated by the
      last name in the path. Raise ImportError if the import fails.
def import_string(dotted_path: str) -> Any:
def truncate(v: Union[str], *, max_len: int = 80) -> str:
def sequence_like(v: Any) -> bool:
def validate_field_name(bases: Iterable[Type[Any]], field_name: str) -> None:
def lenient_isinstance(o: Any, class_or_tuple: Union[Type[Any], Tuple[Type[Any], ...], None]) -> bool:
def lenient_issubclass(cls: Any, class_or_tuple: Union[Type[Any], Tuple[Type[Any], ...], None]) -> bool:
def in_ipython() -> bool:
def is_valid_identifier(identifier: str) -> bool:
def deep_update(mapping: Dict[KeyType, Any], *updating_mappings: Dict[KeyType, Any]) -> Dict[KeyType, Any]:
def update_not_none(mapping: Dict[Any, Any], **update: Any) -> None:
def almost_equal_floats(value_1: float, value_2: float, *, delta: float = 1e-8) -> bool:
def generate_model_signature(
def get_model(obj: Union[Type['BaseModel'], Type['Dataclass']]) -> Type['BaseModel']:
def to_camel(string: str) -> str:
def to_lower_camel(string: str) -> str:
def unique_list(
class PyObjectStr(str):
class Representation:
class GetterDict(Representation):
class ValueItems(Representation):
class ClassAttribute:
def path_type(p: 'Path') -> str:
def smart_deepcopy(obj: Obj) -> Obj:
def is_valid_field(name: str) -> bool:
def is_valid_private_name(name: str) -> bool:
def all_identical(left: Iterable[Any], right: Iterable[Any]) -> bool:
def assert_never(obj: NoReturn, msg: str) -> NoReturn:
def get_unique_discriminator_alias(all_aliases: Collection[str], discriminator_key: str) -> str:
def get_discriminator_alias_and_values(tp: Any, discriminator_key: str) -> Tuple[str, Tuple[str, ...]]:
def _get_union_alias_and_all_values(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\validators.py
-----------------------------
>     """Validate ``const`` fields.
  
      The value provided for a ``const`` field must be equal to the default value
      of the field. This is to support the keyword of the same name in JSON
def str_validator(v: Any) -> Union[str]:
def strict_str_validator(v: Any) -> Union[str]:
def bytes_validator(v: Any) -> Union[bytes]:
def strict_bytes_validator(v: Any) -> Union[bytes]:
def bool_validator(v: Any) -> bool:
def int_validator(v: Any) -> int:
def strict_int_validator(v: Any) -> int:
def float_validator(v: Any) -> float:
def strict_float_validator(v: Any) -> float:
def float_finite_validator(v: 'Number', field: 'ModelField', config: 'BaseConfig') -> 'Number':
def number_multiple_validator(v: 'Number', field: 'ModelField') -> 'Number':
def number_size_validator(v: 'Number', field: 'ModelField') -> 'Number':
def constant_validator(v: 'Any', field: 'ModelField') -> 'Any':
def anystr_length_validator(v: 'StrBytes', config: 'BaseConfig') -> 'StrBytes':
def anystr_strip_whitespace(v: 'StrBytes') -> 'StrBytes':
def anystr_upper(v: 'StrBytes') -> 'StrBytes':
def anystr_lower(v: 'StrBytes') -> 'StrBytes':
def ordered_dict_validator(v: Any) -> 'AnyOrderedDict':
def dict_validator(v: Any) -> Dict[Any, Any]:
def list_validator(v: Any) -> List[Any]:
def tuple_validator(v: Any) -> Tuple[Any, ...]:
def set_validator(v: Any) -> Set[Any]:
def frozenset_validator(v: Any) -> FrozenSet[Any]:
def deque_validator(v: Any) -> Deque[Any]:
def enum_member_validator(v: Any, field: 'ModelField', config: 'BaseConfig') -> Enum:
def uuid_validator(v: Any, field: 'ModelField') -> UUID:
def decimal_validator(v: Any) -> Decimal:
def hashable_validator(v: Any) -> Hashable:
def ip_v4_address_validator(v: Any) -> IPv4Address:
def ip_v6_address_validator(v: Any) -> IPv6Address:
def ip_v4_network_validator(v: Any) -> IPv4Network:
def ip_v6_network_validator(v: Any) -> IPv6Network:
def ip_v4_interface_validator(v: Any) -> IPv4Interface:
def ip_v6_interface_validator(v: Any) -> IPv6Interface:
def path_validator(v: Any) -> Path:
def path_exists_validator(v: Any) -> Path:
def callable_validator(v: Any) -> AnyCallable:
def enum_validator(v: Any) -> Enum:
def int_enum_validator(v: Any) -> IntEnum:
def make_literal_validator(type_: Any) -> Callable[[Any], Any]:
def constr_length_validator(v: 'StrBytes', field: 'ModelField', config: 'BaseConfig') -> 'StrBytes':
def constr_strip_whitespace(v: 'StrBytes', field: 'ModelField', config: 'BaseConfig') -> 'StrBytes':
def constr_upper(v: 'StrBytes', field: 'ModelField', config: 'BaseConfig') -> 'StrBytes':
def constr_lower(v: 'StrBytes', field: 'ModelField', config: 'BaseConfig') -> 'StrBytes':
def validate_json(v: Any, config: 'BaseConfig') -> Any:
def make_arbitrary_type_validator(type_: Type[T]) -> Callable[[T], T]:
def make_class_validator(type_: Type[T]) -> Callable[[Any], Type[T]]:
def any_class_validator(v: Any) -> Type[T]:
def none_validator(v: Any) -> 'Literal[None]':
def pattern_validator(v: Any) -> Pattern[str]:
def make_namedtuple_validator(
def make_typeddict_validator(
class IfConfig:
def find_validators(  # noqa: C901 (ignore complexity)

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\version.py
-----------------------------
def version_info() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\_hypothesis_plugin.py
-----------------------------
> """
  Register Hypothesis strategies for Pydantic custom types.
  
  This enables fully-automatic generation of test data for most Pydantic classes.
def add_luhn_digit(card_number: str) -> str:
def _registered(typ: Type[pydantic.types.T]) -> Type[pydantic.types.T]:
def _registered(typ: pydantic.types.ConstrainedNumberMeta) -> pydantic.types.ConstrainedNumberMeta:
def _registered(
def resolves(
def resolve_json(cls):  # type: ignore[no-untyped-def]
def resolve_conbytes(cls):  # type: ignore[no-untyped-def]  # pragma: no cover
def resolve_condecimal(cls):  # type: ignore[no-untyped-def]
def resolve_confloat(cls):  # type: ignore[no-untyped-def]
def resolve_conint(cls):  # type: ignore[no-untyped-def]
def resolve_condate(cls):  # type: ignore[no-untyped-def]
def resolve_constr(cls):  # type: ignore[no-untyped-def]  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\v1\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_config.py
-----------------------------
>     """Internal wrapper for Config which exposes ConfigDict items as attributes."""
  
      __slots__ = ('config_dict',)
  
class ConfigWrapper:
class ConfigWrapperStack:
def prepare_config(config: ConfigDict | dict[str, Any] | type[Any] | None) -> ConfigDict:
def check_deprecated(config_dict: ConfigDict) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_core_metadata.py
-----------------------------
>     """A `TypedDict` for holding the metadata dict of the schema.
  
      Attributes:
          pydantic_js_functions: List of JSON schema functions that resolve refs during 
application.
class CoreMetadata(TypedDict, total=False):
def update_core_metadata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_core_utils.py
-----------------------------
>     """Produces the ref to be used for this type by pydantic_core's core schemas.
  
      This `args_override` argument was added for the purpose of creating valid recursive 
references
      when creating generic models without needing to create a concrete class.
def is_core_schema(
def is_core_schema_field(
def is_function_with_inner_schema(
def is_list_like_schema_with_items_schema(
def get_type_ref(type_: Any, args_override: tuple[type[Any], ...] | None = None) -> str:
def get_ref(s: core_schema.CoreSchema) -> None | str:
def validate_core_schema(schema: CoreSchema) -> CoreSchema:
def _clean_schema_for_pretty_print(obj: Any, strip_metadata: bool = True) -> Any:  # pragma: no cover
def pretty_print_core_schema(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_dataclasses.py
-----------------------------
> """Private logic for creating pydantic dataclasses."""
  
  from __future__ import annotations as _annotations
  
def set_dataclass_fields(
def complete_dataclass(
def is_builtin_dataclass(_cls: type[Any]) -> TypeGuard[type[StandardDataclass]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_decorators.py
-----------------------------
> """Logic related to validators applied to models etc. via the `@field_validator` and 
`@model_validator` decorators."""
  
  from __future__ import annotations as _annotations
  
class ValidatorDecoratorInfo:
class FieldValidatorDecoratorInfo:
class RootValidatorDecoratorInfo:
class FieldSerializerDecoratorInfo:
class ModelSerializerDecoratorInfo:
class ModelValidatorDecoratorInfo:
class PydanticDescriptorProxy(Generic[ReturnType]):
class Decorator(Generic[DecoratorInfoType]):
def get_bases(tp: type[Any]) -> tuple[type[Any], ...]:
def mro(tp: type[Any]) -> tuple[type[Any], ...]:
def mro_for_bases(bases: tuple[type[Any], ...]) -> tuple[type[Any], ...]:
def get_attribute_from_bases(tp: type[Any] | tuple[type[Any], ...], name: str) -> Any:
def get_attribute_from_base_dicts(tp: type[Any], name: str) -> Any:
class DecoratorInfos:
def inspect_validator(validator: Callable[..., Any], mode: FieldValidatorModes) -> bool:
def inspect_field_serializer(serializer: Callable[..., Any], mode: Literal['plain', 'wrap']) -> tuple[bool, bool]:
def inspect_annotated_serializer(serializer: Callable[..., Any], mode: Literal['plain', 'wrap']) -> bool:
def inspect_model_serializer(serializer: Callable[..., Any], mode: Literal['plain', 'wrap']) -> bool:
def _serializer_info_arg(mode: Literal['plain', 'wrap'], n_positional: int) -> bool | None:
def is_instance_method_from_sig(function: AnyDecoratorCallable) -> bool:
def ensure_classmethod_based_on_signature(function: AnyDecoratorCallable) -> Any:
def _is_classmethod_from_sig(function: AnyDecoratorCallable) -> bool:
def unwrap_wrapped_function(
def get_callable_return_type(
def count_positional_required_params(sig: Signature) -> int:
def ensure_property(f: Any) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_decorators_v1.py
-----------------------------
> """Logic for V1 validators, e.g. `@validator` and `@root_validator`."""
  
  from __future__ import annotations as _annotations
  
class V1OnlyValueValidator(Protocol):
class V1ValidatorWithValues(Protocol):
class V1ValidatorWithValuesKwOnly(Protocol):
class V1ValidatorWithKwargs(Protocol):
class V1ValidatorWithValuesAndKwargs(Protocol):
def can_be_keyword(param: Parameter) -> bool:
def make_generic_v1_field_validator(validator: V1Validator) -> core_schema.WithInfoValidatorFunction:
class V1RootValidatorFunction(Protocol):
class V2CoreBeforeRootValidator(Protocol):
class V2CoreAfterRootValidator(Protocol):
def make_v1_generic_root_validator(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_discriminated_union.py
-----------------------------
>     """Raised when applying a discriminated union discriminator to a schema
      requires a definition that is not yet defined
class MissingDefinitionForUnionRef(Exception):
def set_discriminator_in_metadata(schema: CoreSchema, discriminator: Any) -> None:
def apply_discriminator(
class _ApplyInferredDiscriminator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_docs_extraction.py
-----------------------------
> """Utilities related to attribute docstring extraction."""
  
  from __future__ import annotations
  
class DocstringVisitor(ast.NodeVisitor):
def _dedent_source_lines(source: list[str]) -> str:
def _extract_source_from_frame(cls: type[Any]) -> list[str] | None:
def extract_docstrings_from_cls(cls: type[Any], use_inspect: bool = False) -> dict[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_fields.py
-----------------------------
> """Private logic related to fields (the `Field()` function and `FieldInfo` class), and 
arguments to `Annotated`."""
  
  from __future__ import annotations as _annotations
  
class PydanticMetadata(Representation):
def pydantic_general_metadata(**metadata: Any) -> BaseMetadata:
def _general_metadata_cls() -> type[BaseMetadata]:
def _update_fields_from_docstrings(cls: type[Any], fields: dict[str, FieldInfo], use_inspect: bool = False) -> None:
def collect_model_fields(  # noqa: C901
def _warn_on_nested_alias_in_annotation(ann_type: type[Any], ann_name: str) -> None:
def rebuild_model_fields(
def collect_dataclass_fields(
def rebuild_dataclass_fields(
def is_valid_field_name(name: str) -> bool:
def is_valid_privateattr_name(name: str) -> bool:
def takes_validated_data_argument(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_forward_ref.py
-----------------------------
>         """Defining __call__ is necessary for the `typing` module to let you use an 
instance of
          this class as the result of resolving a standard ForwardRef.
class PydanticRecursiveRef:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_generate_schema.py
-----------------------------
> """Convert python types to pydantic-core schema."""
  
  from __future__ import annotations as _annotations
  
def check_validator_fields_against_field_name(
def check_decorator_fields_exist(decorators: Iterable[AnyFieldDecorator], fields: Iterable[str]) -> None:
def filter_field_decorator_info_by_field(
def apply_each_item_validators(
def _extract_json_schema_info_from_field_info(
def _add_custom_serialization_from_json_encoders(
def _get_first_non_null(a: Any, b: Any) -> Any:
class InvalidSchemaError(Exception):
class GenerateSchema:
def apply_validators(
def _validators_require_validate_default(validators: Iterable[Decorator[ValidatorDecoratorInfo]]) -> bool:
def apply_model_validators(
def wrap_default(field_info: FieldInfo, schema: core_schema.CoreSchema) -> core_schema.CoreSchema:
def _extract_get_pydantic_json_schema(tp: Any) -> GetJsonSchemaFunction | None:
class _CommonField(TypedDict):
def _common_field(
def resolve_original_schema(schema: CoreSchema, definitions: _Definitions) -> CoreSchema | None:
def _inlining_behavior(
class _Definitions:
class _FieldNameStack:
class _ModelTypeStack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_generics.py
-----------------------------
>         """Variant of ChainMap that allows direct updates to inner scopes.
  
          Taken from https://docs.python.org/3/library/collections.html#collections.ChainMap,
          with some light modifications for this use case.
class LimitedDict(dict[KT, VT]):
class PydanticGenericMetadata(typing_extensions.TypedDict):
def create_generic_submodel(
def _get_caller_frame_info(depth: int = 2) -> tuple[str | None, bool]:
def iter_contained_typevars(v: Any) -> Iterator[TypeVar]:
def get_args(v: Any) -> Any:
def get_origin(v: Any) -> Any:
def get_standard_typevars_map(cls: Any) -> dict[TypeVar, Any] | None:
def get_model_typevars_map(cls: type[BaseModel]) -> dict[TypeVar, Any]:
def replace_types(type_: Any, type_map: Mapping[TypeVar, Any] | None) -> Any:
def map_generic_model_arguments(cls: type[BaseModel], args: tuple[Any, ...]) -> dict[TypeVar, Any]:
def generic_recursion_self_type(
def recursively_defined_type_refs() -> set[str]:
def get_cached_generic_type_early(parent: type[BaseModel], typevar_values: Any) -> type[BaseModel] | None:
def get_cached_generic_type_late(
def set_cached_generic_type(
def _union_orderings_key(typevar_values: Any) -> Any:
def _early_cache_key(cls: type[BaseModel], typevar_values: Any) -> GenericTypesCacheKey:
def _late_cache_key(origin: type[BaseModel], args: tuple[Any, ...], typevar_values: Any) -> GenericTypesCacheKey:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_git.py
-----------------------------
> """Git utilities, adopted from mypy's git utilities 
(https://github.com/python/mypy/blob/master/mypy/git.py)."""
  
  from __future__ import annotations
  
def is_git_repo(dir: Path) -> bool:
def have_git() -> bool:  # pragma: no cover
def git_revision(dir: Path) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_import_utils.py
-----------------------------
def import_cached_base_model() -> type['BaseModel']:
def import_cached_field_info() -> type['FieldInfo']:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_internal_dataclass.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_known_annotated_metadata.py
-----------------------------
>     """Expand the annotations.
  
      Args:
          annotations: An iterable of annotations.
def as_jsonable_value(v: Any) -> Any:
def expand_grouped_metadata(annotations: Iterable[Any]) -> Iterable[Any]:
def _get_at_to_constraint_map() -> dict[type, str]:
def apply_known_metadata(annotation: Any, schema: CoreSchema) -> CoreSchema | None:  # noqa: C901
def collect_known_metadata(annotations: Iterable[Any]) -> tuple[dict[str, Any], list[Any]]:
def check_metadata(metadata: dict[str, Any], allowed: Iterable[str], source_type: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_mock_val_ser.py
-----------------------------
>     """Mocker for `pydantic_core.CoreSchema` which optionally attempts to
      rebuild the thing it's mocking when one of its methods is accessed and raises an error 
if that fails.
class MockCoreSchema(Mapping[str, Any]):
class MockValSer(Generic[ValSer]):
def set_type_adapter_mocks(adapter: TypeAdapter) -> None:
def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:
def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_model_construction.py
-----------------------------
> """Private logic for creating models."""
  
  from __future__ import annotations as _annotations
  
class _ModelNamespaceDict(dict):
def NoInitField(
class ModelMetaclass(ABCMeta):
def init_private_attributes(self: BaseModel, context: Any, /) -> None:
def get_model_post_init(namespace: dict[str, Any], bases: tuple[type[Any], ...]) -> Callable[..., Any] | None:
def inspect_namespace(  # noqa C901
def set_default_hash_func(cls: type[BaseModel], bases: tuple[type[Any], ...]) -> None:
def make_hash_func(cls: type[BaseModel]) -> Any:
def set_model_fields(
def complete_model_class(
def set_deprecated_descriptors(cls: type[BaseModel]) -> None:
class _DeprecatedFieldDescriptor:
class _PydanticWeakRef:
def build_lenient_weakvaluedict(d: dict[str, Any] | None) -> dict[str, Any] | None:
def unpack_lenient_weakvaluedict(d: dict[str, Any] | None) -> dict[str, Any] | None:
def default_ignored_types() -> tuple[type[Any], ...]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_namespace_utils.py
-----------------------------
> """A global namespace.
  
  In most cases, this is a reference to the `__dict__` attribute of a module.
  This namespace type is expected as the `globals` argument during annotations evaluation.
class NamespacesTuple(NamedTuple):
def get_module_ns_of(obj: Any) -> dict[str, Any]:
class LazyLocalNamespace(Mapping[str, Any]):
def ns_for_function(obj: Callable[..., Any], parent_namespace: MappingNamespace | None = None) -> NamespacesTuple:
class NsResolver:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_repr.py
-----------------------------
> """Tools to provide pretty/human-readable display of objects."""
  
  from __future__ import annotations as _annotations
  
class PlainRepr(str):
class Representation:
def display_as_type(obj: Any) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_schema_gather.py
-----------------------------
>     """Schema traversing result."""
  
      collected_references: dict[str, DefinitionReferenceSchema | None]
class GatherResult(TypedDict):
class MissingDefinitionError(LookupError):
class GatherContext:
def traverse_metadata(schema: AllSchemas, ctx: GatherContext) -> None:
def traverse_definition_ref(def_ref_schema: DefinitionReferenceSchema, ctx: GatherContext) -> None:
def traverse_schema(schema: AllSchemas, context: GatherContext) -> None:
def gather_schemas_for_cleaning(schema: CoreSchema, definitions: dict[str, CoreSchema]) -> GatherResult:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_schema_generation_shared.py
-----------------------------
> """Types and utility functions used by various other internal tools."""
  
  from __future__ import annotations
  
class GenerateJsonSchemaHandler(GetJsonSchemaHandler):
class CallbackGetCoreSchemaHandler(GetCoreSchemaHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_serializers.py
-----------------------------
def serialize_sequence_via_list(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_signature.py
-----------------------------
>     """Extract the correct name to use for the field when generating a signature.
  
      Assuming the field has a valid alias, this will return the alias. Otherwise, it will 
return the field name.
      First priority is given to the alias, then the validation_alias, then the field name.
class _HAS_DEFAULT_FACTORY_CLASS:
def _field_name_for_signature(field_name: str, field_info: FieldInfo) -> str:
def _process_param_defaults(param: Parameter) -> Parameter:
def _generate_signature_parameters(  # noqa: C901 (ignore complexity, could use a refactor)
def generate_pydantic_signature(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_typing_extra.py
-----------------------------
> """Logic for interacting with type annotations, mostly extensions, shims and hacks to wrap 
Python's typing module."""
  
  from __future__ import annotations
  
def is_annotated(tp: Any, /) -> bool:
def annotated_type(tp: Any, /) -> Any | None:
def unpack_type(tp: Any, /) -> Any | None:
def is_hashable(tp: Any, /) -> bool:
def is_callable(tp: Any, /) -> bool:
def is_classvar_annotation(tp: Any, /) -> bool:
def is_finalvar(tp: Any, /) -> bool:
def is_none_type(tp: Any, /) -> bool:
def is_namedtuple(tp: Any, /) -> bool:
def is_generic_alias(tp: Any, /) -> bool:
def parent_frame_namespace(*, parent_depth: int = 2, force: bool = False) -> dict[str, Any] | None:
def _type_convert(arg: Any) -> Any:
def get_model_type_hints(
def get_cls_type_hints(
def try_eval_type(
def eval_type(
def eval_type_lenient(
def eval_type_backport(
def _eval_type_backport(
def _eval_type(
def is_backport_fixable_error(e: TypeError) -> bool:
def get_function_type_hints(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_utils.py
-----------------------------
> """Bucket of reusable internal utilities.
  
  This should be reduced as much as possible with functions only used in one place, moved to 
that place.
def can_be_positional(param: Parameter) -> bool:
def sequence_like(v: Any) -> bool:
def lenient_isinstance(o: Any, class_or_tuple: type[Any] | tuple[type[Any], ...] | None) -> bool:  # pragma: no cover
def lenient_issubclass(cls: Any, class_or_tuple: Any) -> bool:  # pragma: no cover
def is_model_class(cls: Any) -> TypeGuard[type[BaseModel]]:
def is_valid_identifier(identifier: str) -> bool:
def deep_update(mapping: dict[KeyType, Any], *updating_mappings: dict[KeyType, Any]) -> dict[KeyType, Any]:
def update_not_none(mapping: dict[Any, Any], **update: Any) -> None:
def unique_list(
class ValueItems(_repr.Representation):
def smart_deepcopy(obj: Obj) -> Obj:
def all_identical(left: typing.Iterable[Any], right: typing.Iterable[Any]) -> bool:
class SafeGetItemProxy:
class deprecated_instance_property(Generic[_ModelT, _RT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_validate_call.py
-----------------------------
>     """Extract the name of a `ValidateCallSupportedTypes` object."""
      return f'partial({func.func.__name__})' if isinstance(func, functools.partial) else 
func.__name__
  
  
def extract_function_name(func: ValidateCallSupportedTypes) -> str:
def extract_function_qualname(func: ValidateCallSupportedTypes) -> str:
def update_wrapper_attributes(wrapped: ValidateCallSupportedTypes, wrapper: Callable[..., Any]):
class ValidateCallWrapper:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\_validators.py
-----------------------------
> """Validator functions for standard library types.
  
  Import of this module is deferred since it contains imports of many standard library 
modules.
def sequence_validator(
def import_string(value: Any) -> Any:
def _import_string_logic(dotted_path: str) -> Any:
def pattern_either_validator(input_value: Any, /) -> typing.Pattern[Any]:
def pattern_str_validator(input_value: Any, /) -> typing.Pattern[str]:
def pattern_bytes_validator(input_value: Any, /) -> typing.Pattern[bytes]:
def compile_pattern(pattern: PatternType) -> typing.Pattern[PatternType]:
def ip_v4_address_validator(input_value: Any, /) -> IPv4Address:
def ip_v6_address_validator(input_value: Any, /) -> IPv6Address:
def ip_v4_network_validator(input_value: Any, /) -> IPv4Network:
def ip_v6_network_validator(input_value: Any, /) -> IPv6Network:
def ip_v4_interface_validator(input_value: Any, /) -> IPv4Interface:
def ip_v6_interface_validator(input_value: Any, /) -> IPv6Interface:
def fraction_validator(input_value: Any, /) -> Fraction:
def forbid_inf_nan_check(x: Any) -> Any:
def _safe_repr(v: Any) -> int | float | str:
def greater_than_validator(x: Any, gt: Any) -> Any:
def greater_than_or_equal_validator(x: Any, ge: Any) -> Any:
def less_than_validator(x: Any, lt: Any) -> Any:
def less_than_or_equal_validator(x: Any, le: Any) -> Any:
def multiple_of_validator(x: Any, multiple_of: Any) -> Any:
def min_length_validator(x: Any, min_length: Any) -> Any:
def max_length_validator(x: Any, max_length: Any) -> Any:
def _extract_decimal_digits_info(decimal: Decimal) -> tuple[int, int]:
def max_digits_validator(x: Any, max_digits: Any) -> Any:
def decimal_places_validator(x: Any, decimal_places: Any) -> Any:
def deque_validator(input_value: Any, handler: core_schema.ValidatorFunctionWrapHandler) -> collections.deque[Any]:
def defaultdict_validator(
def get_defaultdict_default_default_factory(values_source_type: Any) -> Callable[[], Any]:
def validate_str_is_valid_iana_tz(value: Any, /) -> ZoneInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_internal\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\aliases.py
-----------------------------
> """Support for alias configurations."""
  
  from __future__ import annotations
  
class AliasPath:
class AliasChoices:
class AliasGenerator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\alias_generators.py
-----------------------------
> """Alias generators for converting between different capitalization conventions."""
  
  import re
  
def to_pascal(snake: str) -> str:
def to_camel(snake: str) -> str:
def to_snake(camel: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\annotated_handlers.py
-----------------------------
> """Type annotations to use with `__get_pydantic_core_schema__` and 
`__get_pydantic_json_schema__`."""
  
  from __future__ import annotations as _annotations
  
class GetJsonSchemaHandler:
class GetCoreSchemaHandler:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\class_validators.py
-----------------------------
> """`class_validators` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\color.py
-----------------------------
> """Color definitions are used as per the CSS3
  [CSS Color Module Level 3](http://www.w3.org/TR/css3-color/#svg-color) specification.
  
  A few colors have multiple names referring to the sames colors, eg. `grey` and `gray` or 
`aqua` and `cyan`.
class RGBA:
class Color(_repr.Representation):
def parse_tuple(value: tuple[Any, ...]) -> RGBA:
def parse_str(value: str) -> RGBA:
def ints_to_rgba(r: Union[int, str], g: Union[int, str], b: Union[int, str], alpha: Optional[float] = None) -> RGBA:
def parse_color_value(value: Union[int, str], max_val: int = 255) -> float:
def parse_float_alpha(value: Union[None, str, float, int]) -> Optional[float]:
def parse_hsl(h: str, h_units: str, sat: str, light: str, alpha: Optional[float] = None) -> RGBA:
def float_to_255(c: float) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\config.py
-----------------------------
> """Configuration for Pydantic models."""
  
  from __future__ import annotations as _annotations
  
class ConfigDict(TypedDict, total=False):
def with_config(*, config: ConfigDict) -> Callable[[_TypeT], _TypeT]: ...
def with_config(config: ConfigDict, /) -> Callable[[_TypeT], _TypeT]: ...
def with_config(**config: Unpack[ConfigDict]) -> Callable[[_TypeT], _TypeT]: ...
def with_config(config: ConfigDict | None = None, /, **kwargs: Any) -> Callable[[_TypeT], _TypeT]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\dataclasses.py
-----------------------------
> """Provide an enhanced dataclass that performs validation."""
  
  from __future__ import annotations as _annotations
  
def dataclass(
def _pydantic_fields_complete(cls: type[PydanticDataclass]) -> bool:
def rebuild_dataclass(
def is_pydantic_dataclass(class_: type[Any], /) -> TypeGuard[type[PydanticDataclass]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\datetime_parse.py
-----------------------------
> """The `datetime_parse` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\decorator.py
-----------------------------
> """The `decorator` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\env_settings.py
-----------------------------
> """The `env_settings` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\errors.py
-----------------------------
> """Pydantic-specific errors."""
  
  from __future__ import annotations as _annotations
  
class PydanticErrorMixin:
class PydanticUserError(PydanticErrorMixin, TypeError):
class PydanticUndefinedAnnotation(PydanticErrorMixin, NameError):
class PydanticImportError(PydanticErrorMixin, ImportError):
class PydanticSchemaGenerationError(PydanticUserError):
class PydanticInvalidForJsonSchema(PydanticUserError):
class PydanticForbiddenQualifier(PydanticUserError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\error_wrappers.py
-----------------------------
> """The `error_wrappers` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\fields.py
-----------------------------
> """Defining fields on models."""
  
  from __future__ import annotations as _annotations
  
class _FromFieldInfoInputs(typing_extensions.TypedDict, total=False):
class _FieldInfoInputs(_FromFieldInfoInputs, total=False):
class FieldInfo(_repr.Representation):
class _EmptyKwargs(typing_extensions.TypedDict):
def Field(
def Field(
def Field(
def Field(  # No default set
def Field(  # noqa: C901
class ModelPrivateAttr(_repr.Representation):
def PrivateAttr(
def PrivateAttr(
def PrivateAttr(
def PrivateAttr(
class ComputedFieldInfo:
def _wrapped_property_is_private(property_: cached_property | property) -> bool:  # type: ignore
def computed_field(func: PropertyT, /) -> PropertyT: ...
def computed_field(
def computed_field(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\functional_serializers.py
-----------------------------
> """This module contains related classes and functions for serialization."""
  
  from __future__ import annotations
  
class PlainSerializer:
class WrapSerializer:
def field_serializer(
def field_serializer(
def field_serializer(
def model_serializer(f: _ModelPlainSerializerT, /) -> _ModelPlainSerializerT: ...
def model_serializer(
def model_serializer(
def model_serializer(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\functional_validators.py
-----------------------------
> """This module contains related classes and functions for validation."""
  
  from __future__ import annotations as _annotations
  
class AfterValidator:
class BeforeValidator:
class PlainValidator:
class WrapValidator:
def field_validator(
def field_validator(
def field_validator(
def field_validator(
class ModelWrapValidatorHandler(_core_schema.ValidatorFunctionWrapHandler, Protocol[_ModelTypeCo]):
class ModelWrapValidatorWithoutInfo(Protocol[_ModelType]):
class ModelWrapValidator(Protocol[_ModelType]):
class FreeModelBeforeValidatorWithoutInfo(Protocol):
class ModelBeforeValidatorWithoutInfo(Protocol):
class FreeModelBeforeValidator(Protocol):
class ModelBeforeValidator(Protocol):
def model_validator(
def model_validator(
def model_validator(
def model_validator(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\generics.py
-----------------------------
> """The `generics` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\json.py
-----------------------------
> """The `json` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\json_schema.py
-----------------------------
> """!!! abstract "Usage Documentation"
      [JSON Schema](../concepts/json_schema.md)
  
  The `json_schema` module contains classes and functions to allow the way [JSON 
Schema](https://json-schema.org/)
class PydanticJsonSchemaWarning(UserWarning):
class _DefinitionsRemapping:
class GenerateJsonSchema:
def model_json_schema(
def models_json_schema(
def _deduplicate_schemas(schemas: Iterable[JsonDict]) -> list[JsonDict]:
def _make_json_hashable(value: JsonValue) -> _HashableJsonValue:
class WithJsonSchema:
class Examples:
def _get_all_json_refs(item: Any) -> set[JsonRef]:
def _get_typed_dict_config(cls: type[Any] | None) -> ConfigDict:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\main.py
-----------------------------
> """Logic for creating models."""
  
  # Because `dict` is in the local namespace of the `BaseModel` class, we use `Dict` for 
annotations.
  # TODO v3 fallback to `dict` when the deprecated `dict` method gets removed.
def _check_frozen(model_cls: type[BaseModel], name: str, value: Any) -> None:
def _model_field_setattr_handler(model: BaseModel, name: str, val: Any) -> None:
def _private_setattr_handler(model: BaseModel, name: str, val: Any) -> None:
class BaseModel(metaclass=_model_construction.ModelMetaclass):
def create_model(
def create_model(
def create_model(  # noqa: C901

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\mypy.py
-----------------------------
> """This module includes classes and functions designed specifically for use with the mypy 
plugin."""
  
  from __future__ import annotations
  
def plugin(version: str) -> type[Plugin]:
class PydanticPlugin(Plugin):
class PydanticPluginConfig:
def from_attributes_callback(ctx: MethodContext) -> Type:
class PydanticModelField:
class PydanticModelClassVar:
class PydanticModelTransformer:
class ChangeExplicitTypeOfAny(TypeTranslator):
class ModelConfigData:
def is_root_model(info: TypeInfo) -> bool:
def error_from_attributes(model_name: str, api: CheckerPluginInterface, context: Context) -> None:
def error_invalid_config_value(name: str, api: SemanticAnalyzerPluginInterface, context: Context) -> None:
def error_required_dynamic_aliases(api: SemanticAnalyzerPluginInterface, context: Context) -> None:
def error_unexpected_behavior(
def error_untyped_fields(api: SemanticAnalyzerPluginInterface, context: Context) -> None:
def error_extra_fields_on_root_model(api: CheckerPluginInterface, context: Context) -> None:
def add_method(
def parse_toml(config_file: str) -> dict[str, Any] | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\networks.py
-----------------------------
> """The networks module contains types for common network-related fields."""
  
  from __future__ import annotations as _annotations
  
class UrlConstraints:
class _BaseUrl:
class _BaseMultiHostUrl:
def _build_type_adapter(cls: type[_BaseUrl | _BaseMultiHostUrl]) -> TypeAdapter:
class AnyUrl(_BaseUrl):
class AnyHttpUrl(AnyUrl):
class HttpUrl(AnyUrl):
class AnyWebsocketUrl(AnyUrl):
class WebsocketUrl(AnyUrl):
class FileUrl(AnyUrl):
class FtpUrl(AnyUrl):
class PostgresDsn(_BaseMultiHostUrl):
class CockroachDsn(AnyUrl):
class AmqpDsn(AnyUrl):
class RedisDsn(AnyUrl):
class MongoDsn(_BaseMultiHostUrl):
class KafkaDsn(AnyUrl):
class NatsDsn(_BaseMultiHostUrl):
class MySQLDsn(AnyUrl):
class MariaDBDsn(AnyUrl):
class ClickHouseDsn(AnyUrl):
class SnowflakeDsn(AnyUrl):
def import_email_validator() -> None:
class NameEmail(_repr.Representation):
def _build_pretty_email_regex() -> re.Pattern[str]:
def validate_email(value: str) -> tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\parse.py
-----------------------------
> """The `parse` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\root_model.py
-----------------------------
> """RootModel class and type definitions."""
  
  from __future__ import annotations as _annotations
  
class RootModel(BaseModel, typing.Generic[RootModelRootType], metaclass=_RootModelMetaclass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\schema.py
-----------------------------
> """The `schema` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\tools.py
-----------------------------
> """The `tools` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\types.py
-----------------------------
> """The types module contains custom types used by pydantic."""
  
  from __future__ import annotations as _annotations
  
class Strict(_fields.PydanticMetadata, BaseMetadata):
def conint(
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class StrictIntModel(BaseModel):
class AllowInfNan(_fields.PydanticMetadata):
def confloat(
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class StrictFloatModel(BaseModel):
class Model(BaseModel):
def conbytes(
class StringConstraints(annotated_types.GroupedMetadata):
def constr(
def conset(
def confrozenset(
def conlist(
def condecimal(
class UuidVersion:
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class PathType:
class Model(BaseModel):
class Model(BaseModel):
class _SecretBase(Generic[SecretType]):
def _serialize_secret(value: Secret[SecretType], info: core_schema.SerializationInfo) -> str | Secret[SecretType]:
class Secret(_SecretBase[SecretType]):
def _secret_display(value: SecretType) -> str:  # type: ignore
def _serialize_secret_field(
class _SecretField(_SecretBase[SecretType]):
class SecretStr(_SecretField[str]):
class SecretBytes(_SecretField[bytes]):
class PaymentCardBrand(str, Enum):
class PaymentCardNumber(str):
class ByteSize(int):
def _check_annotated_type(annotated_type: str, expected_type: str, annotation: str) -> None:
def condate(
class EncoderProtocol(Protocol):
class Base64Encoder(EncoderProtocol):
class Base64UrlEncoder(EncoderProtocol):
class EncodedBytes:
class EncodedStr:
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class Model(BaseModel):
class GetPydanticSchema:
class Tag:
class Discriminator:
def _get_type_name(x: Any) -> str:
class _AllowAnyJson:
class _OnErrorOmit:
class FailFast(_fields.PydanticMetadata, BaseMetadata):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\type_adapter.py
-----------------------------
> """Type adapter specification."""
  
  from __future__ import annotations as _annotations
  
def _getattr_no_parents(obj: Any, attribute: str) -> Any:
def _type_has_config(type_: Any) -> bool:
class TypeAdapter(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\typing.py
-----------------------------
> """`typing` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\utils.py
-----------------------------
> """The `utils` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\validate_call_decorator.py
-----------------------------
> """Decorator for validating function calls."""
  
  from __future__ import annotations as _annotations
  
def _check_function_type(function: object) -> None:
def validate_call(
def validate_call(func: AnyCallableT, /) -> AnyCallableT: ...
def validate_call(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\validators.py
-----------------------------
> """The `validators` module is a backport module from V1."""
  
  from ._migration import getattr_migration
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\version.py
-----------------------------
> """The `version` module holds the version information for Pydantic."""
  
  from __future__ import annotations as _annotations
  
def version_short() -> str:
def version_info() -> str:
def check_pydantic_core_version() -> bool:
def parse_mypy_version(version: str) -> tuple[int, int, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\warnings.py
-----------------------------
> """Pydantic-specific warnings."""
  
  from __future__ import annotations as _annotations
  
class PydanticDeprecationWarning(DeprecationWarning):
class PydanticDeprecatedSince20(PydanticDeprecationWarning):
class PydanticDeprecatedSince26(PydanticDeprecationWarning):
class PydanticDeprecatedSince29(PydanticDeprecationWarning):
class PydanticDeprecatedSince210(PydanticDeprecationWarning):
class PydanticDeprecatedSince211(PydanticDeprecationWarning):
class GenericBeforeBaseModelWarning(Warning):
class PydanticExperimentalWarning(Warning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\_migration.py
-----------------------------
>     """Implement PEP 562 for objects that were either moved or removed on the migration
      to V2.
  
      Args:
def getattr_migration(module: str) -> Callable[[str], Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic\__init__.py
-----------------------------
def __getattr__(attr_name: str) -> object:
def __dir__() -> 'list[str]':

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic_core\core_schema.py
-----------------------------
> """
  This module contains definitions to build schemas which `pydantic_core` can
  validate and serialize.
class CoreConfig(TypedDict, total=False):
class SerializationInfo(Protocol):
class FieldSerializationInfo(SerializationInfo, Protocol):
class ValidationInfo(Protocol):
class SimpleSerSchema(TypedDict, total=False):
def simple_ser_schema(type: ExpectedSerializationTypes) -> SimpleSerSchema:
class PlainSerializerFunctionSerSchema(TypedDict, total=False):
def plain_serializer_function_ser_schema(
class SerializerFunctionWrapHandler(Protocol):  # pragma: no cover
class WrapSerializerFunctionSerSchema(TypedDict, total=False):
def wrap_serializer_function_ser_schema(
class FormatSerSchema(TypedDict, total=False):
def format_ser_schema(formatting_string: str, *, when_used: WhenUsed = 'json-unless-none') -> FormatSerSchema:
class ToStringSerSchema(TypedDict, total=False):
def to_string_ser_schema(*, when_used: WhenUsed = 'json-unless-none') -> ToStringSerSchema:
class ModelSerSchema(TypedDict, total=False):
def model_ser_schema(cls: type[Any], schema: CoreSchema) -> ModelSerSchema:
class InvalidSchema(TypedDict, total=False):
def invalid_schema(ref: str | None = None, metadata: dict[str, Any] | None = None) -> InvalidSchema:
class ComputedField(TypedDict, total=False):
def computed_field(
class AnySchema(TypedDict, total=False):
def any_schema(
class NoneSchema(TypedDict, total=False):
def none_schema(
class BoolSchema(TypedDict, total=False):
def bool_schema(
class IntSchema(TypedDict, total=False):
def int_schema(
class FloatSchema(TypedDict, total=False):
def float_schema(
class DecimalSchema(TypedDict, total=False):
def decimal_schema(
class ComplexSchema(TypedDict, total=False):
def complex_schema(
class StringSchema(TypedDict, total=False):
def str_schema(
class BytesSchema(TypedDict, total=False):
def bytes_schema(
class DateSchema(TypedDict, total=False):
def date_schema(
class TimeSchema(TypedDict, total=False):
def time_schema(
class DatetimeSchema(TypedDict, total=False):
def datetime_schema(
class TimedeltaSchema(TypedDict, total=False):
def timedelta_schema(
class LiteralSchema(TypedDict, total=False):
def literal_schema(
class EnumSchema(TypedDict, total=False):
def enum_schema(
class IsInstanceSchema(TypedDict, total=False):
def is_instance_schema(
class IsSubclassSchema(TypedDict, total=False):
def is_subclass_schema(
class CallableSchema(TypedDict, total=False):
def callable_schema(
class UuidSchema(TypedDict, total=False):
def uuid_schema(
class IncExSeqSerSchema(TypedDict, total=False):
def filter_seq_schema(*, include: set[int] | None = None, exclude: set[int] | None = None) -> IncExSeqSerSchema:
class ListSchema(TypedDict, total=False):
def list_schema(
def tuple_positional_schema(
def tuple_variable_schema(
class TupleSchema(TypedDict, total=False):
def tuple_schema(
class SetSchema(TypedDict, total=False):
def set_schema(
class FrozenSetSchema(TypedDict, total=False):
def frozenset_schema(
class GeneratorSchema(TypedDict, total=False):
def generator_schema(
class IncExDictSerSchema(TypedDict, total=False):
def filter_dict_schema(*, include: IncExDict | None = None, exclude: IncExDict | None = None) -> IncExDictSerSchema:
class DictSchema(TypedDict, total=False):
def dict_schema(
class NoInfoValidatorFunctionSchema(TypedDict):
class WithInfoValidatorFunctionSchema(TypedDict, total=False):
class _ValidatorFunctionSchema(TypedDict, total=False):
class BeforeValidatorFunctionSchema(_ValidatorFunctionSchema, total=False):
def no_info_before_validator_function(
def with_info_before_validator_function(
class AfterValidatorFunctionSchema(_ValidatorFunctionSchema, total=False):
def no_info_after_validator_function(
def with_info_after_validator_function(
class ValidatorFunctionWrapHandler(Protocol):
class NoInfoWrapValidatorFunctionSchema(TypedDict):
class WithInfoWrapValidatorFunctionSchema(TypedDict, total=False):
class WrapValidatorFunctionSchema(TypedDict, total=False):
def no_info_wrap_validator_function(
def with_info_wrap_validator_function(
class PlainValidatorFunctionSchema(TypedDict, total=False):
def no_info_plain_validator_function(
def with_info_plain_validator_function(
class WithDefaultSchema(TypedDict, total=False):
def with_default_schema(
class NullableSchema(TypedDict, total=False):
def nullable_schema(
class UnionSchema(TypedDict, total=False):
def union_schema(
class TaggedUnionSchema(TypedDict, total=False):
def tagged_union_schema(
class ChainSchema(TypedDict, total=False):
def chain_schema(
class LaxOrStrictSchema(TypedDict, total=False):
def lax_or_strict_schema(
class JsonOrPythonSchema(TypedDict, total=False):
def json_or_python_schema(
class TypedDictField(TypedDict, total=False):
def typed_dict_field(
class TypedDictSchema(TypedDict, total=False):
def typed_dict_schema(
class ModelField(TypedDict, total=False):
def model_field(
class ModelFieldsSchema(TypedDict, total=False):
def model_fields_schema(
class ModelSchema(TypedDict, total=False):
def model_schema(
class DataclassField(TypedDict, total=False):
def dataclass_field(
class DataclassArgsSchema(TypedDict, total=False):
def dataclass_args_schema(
class DataclassSchema(TypedDict, total=False):
def dataclass_schema(
class ArgumentsParameter(TypedDict, total=False):
def arguments_parameter(
class ArgumentsSchema(TypedDict, total=False):
def arguments_schema(
class ArgumentsV3Parameter(TypedDict, total=False):
def arguments_v3_parameter(
class ArgumentsV3Schema(TypedDict, total=False):
def arguments_v3_schema(
class CallSchema(TypedDict, total=False):
def call_schema(
class CustomErrorSchema(TypedDict, total=False):
def custom_error_schema(
class JsonSchema(TypedDict, total=False):
def json_schema(
class UrlSchema(TypedDict, total=False):
def url_schema(
class MultiHostUrlSchema(TypedDict, total=False):
def multi_host_url_schema(
class DefinitionsSchema(TypedDict, total=False):
def definitions_schema(schema: CoreSchema, definitions: list[CoreSchema]) -> DefinitionsSchema:
class DefinitionReferenceSchema(TypedDict, total=False):
def definition_reference_schema(
def _dict_not_none(**kwargs: Any) -> Any:
def field_before_validator_function(function: WithInfoValidatorFunction, field_name: str, schema: CoreSchema, **kwargs):
def general_before_validator_function(*args, **kwargs):
def field_after_validator_function(function: WithInfoValidatorFunction, field_name: str, schema: CoreSchema, **kwargs):
def general_after_validator_function(*args, **kwargs):
def field_wrap_validator_function(
def general_wrap_validator_function(*args, **kwargs):
def field_plain_validator_function(function: WithInfoValidatorFunction, field_name: str, **kwargs):
def general_plain_validator_function(*args, **kwargs):
def __getattr__(attr_name: str) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydantic_core\__init__.py
-----------------------------
>     """
      The type of error that occurred, this is an identifier designed for
      programmatic use that will change rarely or never.
  
class ErrorDetails(_TypedDict):
class InitErrorDetails(_TypedDict):
class ErrorTypeInfo(_TypedDict):
class MultiHostHost(_TypedDict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\base_map_provider.py
-----------------------------
>     """Basemap provider available in pydeck"""
  
      MAPBOX = "mapbox"
      GOOGLE_MAPS = "google_maps"
class BaseMapProvider(Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\deck.py
-----------------------------
>         """This is the renderer and configuration for a deck.gl visualization, similar to 
the
          `Deck <https://deck.gl/docs/api-reference/core/deck>`_ class from deck.gl.
          Pass `Deck` a Mapbox API token to display a basemap; see the notes below.
  
def has_jupyter_extra():
class Deck(JSONMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\json_tools.py
-----------------------------
> """
  Support serializing objects into JSON
def to_camel_case(snake_case):
def lower_first_letter(s):
def camel_and_lower(w):
def lower_camel_case_keys(attrs):
def default_serialize(o, remap_function=lower_camel_case_keys):
def serialize(serializable):
class JSONMixin(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\layer.py
-----------------------------
>         """Configures a deck.gl layer for rendering on a map. Parameters passed
          here will be specific to the particular deck.gl layer that you are choosing to use.
  
          Please see the deck.gl
class Layer(JSONMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\light_settings.py
-----------------------------
>     """
      Configuration of lights on the plane
  
      Parameters
class LightSettings(JSONMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\map_styles.py
-----------------------------
>     """Attempt to get a style URI by map provider, otherwise pass the map identifier
      to the API service
  
      Provide reasonable cross-provider default map styles
def get_from_map_identifier(map_identifier: str, provider: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\view.py
-----------------------------
>     """
      Represents a "hard configuration" of a camera location
  
      Parameters
class View(JSONMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\view_state.py
-----------------------------
>     """An object that represents where the state of a viewport, essentially where the 
screen is focused.
  
      If you have two dimensional data and you don't want to set this manually,
      see :func:`pydeck.data_utils.viewport_helpers.compute_view`.
class ViewState(JSONMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\bindings\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\data_utils\binary_transfer.py
-----------------------------
def array_to_binary(ar, obj=None, force_contiguous=True):
def serialize_columns(data_set_cols, obj=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\data_utils\color_scales.py
-----------------------------
>     """Generate a random RGB value
  
      Returns
      -------
def get_random_rgb():
def assign_random_colors(data_vector):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\data_utils\type_checking.py
-----------------------------
>     """Check if an object is a Pandas DataFrame
  
      Returns
      -------
def is_pandas_df(obj):
def has_geo_interface(obj):
def records_from_geo_interface(data):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\data_utils\viewport_helpers.py
-----------------------------
> """
  Functions that make it easier to provide a default centering
  for a view state
def _squared_diff(x, x0):
def euclidean(y, y1):
def geometric_mean(points):
def get_bbox(points):
def k_nearest_neighbors(points, center, k):
def get_n_pct(points, proportion=1):
def bbox_to_zoom_level(bbox):
def compute_view(points, view_proportion=1, view_type=ViewState):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\data_utils\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\exceptions\exceptions.py
-----------------------------
class PydeckException(BaseException):
class BinaryTransportException(PydeckException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\exceptions\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\io\html.py
-----------------------------
>     """Serializes Python booleans to JavaScript. Returns non-boolean values unchanged."""
      if type(py_bool) is not bool:
          return py_bool
      return "true" if py_bool else "false"
def in_jupyter():
def convert_js_bool(py_bool):
def cdn_picker(offline=False):
def render_json_to_html(
def display_html(filename):
def iframe_with_srcdoc(html_str, width="100%", height=500):
def render_for_colab(html_str, iframe_height):
def deck_to_html(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\io\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\nbextension\__init__.py
-----------------------------
>     """Integrates Widget with a Jupyter notebook.
      Required for building a widget. `See the Jupyter Notebook docs.`_
  
      Users should not explicitly call this function.
def _jupyter_nbextension_paths():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\types\base.py
-----------------------------
class PydeckType(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\types\function.py
-----------------------------
>     """Indicate a function type with arguments and set already in pydeck
  
      Parameters
      ----------
class Function(PydeckType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\types\image.py
-----------------------------
>     """Indicate an image for pydeck
  
      Parameters
      ----------
def get_encoding(path: str) -> str:
class Image(PydeckType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\types\string.py
-----------------------------
>     """Indicate a string value in pydeck
  
      Parameters
      ----------
class String(PydeckType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\types\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\widget\debounce.py
-----------------------------
class Timer:
def debounce(wait):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\widget\widget.py
-----------------------------
>     """Callback for storing data on click"""
      try:
          if payload.get("data") and payload["data"].get("object"):
              datum = payload["data"]["object"]
def store_selection(widget_instance, payload):
class DeckGLWidget(DOMWidget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\widget\_frontend.py
-----------------------------
> """
  Information about the frontend package of the widget.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\widget\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\frontend_semver.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\settings.py
-----------------------------
>     """Global settings for pydeck
  
      Parameters
      ----------
class Settings:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pydeck\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\filters\__init__.py
-----------------------------
> """
      pygments.filters
      ~~~~~~~~~~~~~~~~
  
def find_filter_class(filtername):
def get_filter_by_name(filtername, **options):
def get_all_filters():
def _replace_special(ttype, value, regex, specialttype,
class CodeTagFilter(Filter):
class SymbolFilter(Filter):
class KeywordCaseFilter(Filter):
class NameHighlightFilter(Filter):
class ErrorToken(Exception):
class RaiseOnErrorTokenFilter(Filter):
class VisibleWhitespaceFilter(Filter):
class GobbleFilter(Filter):
class TokenMergeFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\bbcode.py
-----------------------------
> """
      pygments.formatters.bbcode
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BBCodeFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\groff.py
-----------------------------
> """
      pygments.formatters.groff
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class GroffFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\html.py
-----------------------------
> """
      pygments.formatters.html
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_html(text, table=_escape_html_table):
def webify(color):
def _get_ttype_class(ttype):
class HtmlFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\img.py
-----------------------------
> """
      pygments.formatters.img
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class PilNotAvailable(ImportError):
class FontNotFound(Exception):
class FontManager:
class ImageFormatter(Formatter):
class GifImageFormatter(ImageFormatter):
class JpgImageFormatter(ImageFormatter):
class BmpImageFormatter(ImageFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\irc.py
-----------------------------
> """
      pygments.formatters.irc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def ircformat(color, text):
class IRCFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\latex.py
-----------------------------
> """
      pygments.formatters.latex
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_tex(text, commandprefix):
def _get_ttype_name(ttype):
class LatexFormatter(Formatter):
class LatexEmbeddedLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\other.py
-----------------------------
> """
      pygments.formatters.other
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class NullFormatter(Formatter):
class RawTokenFormatter(Formatter):
class TestcaseFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\pangomarkup.py
-----------------------------
> """
      pygments.formatters.pangomarkup
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_special_chars(text, table=_escape_table):
class PangoMarkupFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\rtf.py
-----------------------------
> """
      pygments.formatters.rtf
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class RtfFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\svg.py
-----------------------------
> """
      pygments.formatters.svg
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def escape_html(text):
class SvgFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\terminal.py
-----------------------------
> """
      pygments.formatters.terminal
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class TerminalFormatter(Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\terminal256.py
-----------------------------
> """
      pygments.formatters.terminal256
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class EscapeSequence:
class Terminal256Formatter(Formatter):
class TerminalTrueColorFormatter(Terminal256Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatters\__init__.py
-----------------------------
> """
      pygments.formatters
      ~~~~~~~~~~~~~~~~~~~
  
def _fn_matches(fn, glob):
def _load_formatters(module_name):
def get_all_formatters():
def find_formatter_class(alias):
def get_formatter_by_name(_alias, **options):
def load_formatter_from_file(filename, formattername="CustomFormatter", **options):
def get_formatter_for_filename(fn, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\actionscript.py
-----------------------------
> """
      pygments.lexers.actionscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ActionScriptLexer(RegexLexer):
class ActionScript3Lexer(RegexLexer):
class MxmlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ada.py
-----------------------------
> """
      pygments.lexers.ada
      ~~~~~~~~~~~~~~~~~~~
  
class AdaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\agile.py
-----------------------------
> """
      pygments.lexers.agile
      ~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\algebra.py
-----------------------------
> """
      pygments.lexers.algebra
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GAPLexer(RegexLexer):
class GAPConsoleLexer(Lexer):
class MathematicaLexer(RegexLexer):
class MuPADLexer(RegexLexer):
class BCLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ambient.py
-----------------------------
> """
      pygments.lexers.ambient
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class AmbientTalkLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\amdgpu.py
-----------------------------
> """
      pygments.lexers.amdgpu
      ~~~~~~~~~~~~~~~~~~~~~~
  
class AMDGPULexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ampl.py
-----------------------------
> """
      pygments.lexers.ampl
      ~~~~~~~~~~~~~~~~~~~~
  
class AmplLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\apdlexer.py
-----------------------------
> """
      pygments.lexers.apdlexer
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class apdlexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\apl.py
-----------------------------
> """
      pygments.lexers.apl
      ~~~~~~~~~~~~~~~~~~~
  
class APLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\archetype.py
-----------------------------
> """
      pygments.lexers.archetype
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class AtomsLexer(RegexLexer):
class OdinLexer(AtomsLexer):
class CadlLexer(AtomsLexer):
class AdlLexer(AtomsLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\arrow.py
-----------------------------
> """
      pygments.lexers.arrow
      ~~~~~~~~~~~~~~~~~~~~~
  
class ArrowLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\arturo.py
-----------------------------
> """
      pygments.lexers.arturo
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ArturoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\asc.py
-----------------------------
> """
      pygments.lexers.asc
      ~~~~~~~~~~~~~~~~~~~
  
class AscLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\asm.py
-----------------------------
> """
      pygments.lexers.asm
      ~~~~~~~~~~~~~~~~~~~
  
class GasLexer(RegexLexer):
def _objdump_lexer_tokens(asm_lexer):
class ObjdumpLexer(RegexLexer):
class DObjdumpLexer(DelegatingLexer):
class CppObjdumpLexer(DelegatingLexer):
class CObjdumpLexer(DelegatingLexer):
class HsailLexer(RegexLexer):
class LlvmLexer(RegexLexer):
class LlvmMirBodyLexer(RegexLexer):
class LlvmMirLexer(RegexLexer):
class NasmLexer(RegexLexer):
class NasmObjdumpLexer(ObjdumpLexer):
class TasmLexer(RegexLexer):
class Ca65Lexer(RegexLexer):
class Dasm16Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\asn1.py
-----------------------------
> """
      pygments.lexers.asn1
      ~~~~~~~~~~~~~~~~~~~~
  
def word_sequences(tokens):
class Asn1Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\automation.py
-----------------------------
> """
      pygments.lexers.automation
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class AutohotkeyLexer(RegexLexer):
class AutoItLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\bare.py
-----------------------------
> """
      pygments.lexers.bare
      ~~~~~~~~~~~~~~~~~~~~
  
class BareLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\basic.py
-----------------------------
> """
      pygments.lexers.basic
      ~~~~~~~~~~~~~~~~~~~~~
  
class BlitzMaxLexer(RegexLexer):
class BlitzBasicLexer(RegexLexer):
class MonkeyLexer(RegexLexer):
class CbmBasicV2Lexer(RegexLexer):
class QBasicLexer(RegexLexer):
class VBScriptLexer(RegexLexer):
class BBCBasicLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\bdd.py
-----------------------------
> """
      pygments.lexers.bdd
      ~~~~~~~~~~~~~~~~~~~
  
class BddLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\berry.py
-----------------------------
> """
      pygments.lexers.berry
      ~~~~~~~~~~~~~~~~~~~~~
  
class BerryLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\bibtex.py
-----------------------------
> """
      pygments.lexers.bibtex
      ~~~~~~~~~~~~~~~~~~~~~~
  
class BibTeXLexer(ExtendedRegexLexer):
class BSTLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\blueprint.py
-----------------------------
> """
      pygments.lexers.blueprint
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BlueprintLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\boa.py
-----------------------------
> """
      pygments.lexers.boa
      ~~~~~~~~~~~~~~~~~~~
  
class BoaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\bqn.py
-----------------------------
> """
      pygments.lexers.bqn
      ~~~~~~~~~~~~~~~~~~~
  
class BQNLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\business.py
-----------------------------
> """
      pygments.lexers.business
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class CobolLexer(RegexLexer):
class CobolFreeformatLexer(CobolLexer):
class ABAPLexer(RegexLexer):
class OpenEdgeLexer(RegexLexer):
class GoodDataCLLexer(RegexLexer):
class MaqlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\capnproto.py
-----------------------------
> """
      pygments.lexers.capnproto
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class CapnProtoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\carbon.py
-----------------------------
> """
      pygments.lexers.carbon
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CarbonLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\cddl.py
-----------------------------
> """
      pygments.lexers.cddl
      ~~~~~~~~~~~~~~~~~~~~
  
class CddlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\chapel.py
-----------------------------
> """
      pygments.lexers.chapel
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ChapelLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\clean.py
-----------------------------
> """
      pygments.lexers.clean
      ~~~~~~~~~~~~~~~~~~~~~
  
class CleanLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\codeql.py
-----------------------------
> """
      pygments.lexers.codeql
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CodeQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\comal.py
-----------------------------
> """
      pygments.lexers.comal
      ~~~~~~~~~~~~~~~~~~~~~
  
class Comal80Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\compiled.py
-----------------------------
> """
      pygments.lexers.compiled
      ~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\configs.py
-----------------------------
> """
      pygments.lexers.configs
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class IniLexer(RegexLexer):
class DesktopLexer(RegexLexer):
class SystemdLexer(RegexLexer):
class RegeditLexer(RegexLexer):
class PropertiesLexer(RegexLexer):
def _rx_indent(level):
class KconfigLexer(RegexLexer):
class Cfengine3Lexer(RegexLexer):
class ApacheConfLexer(RegexLexer):
class SquidConfLexer(RegexLexer):
class NginxConfLexer(RegexLexer):
class LighttpdConfLexer(RegexLexer):
class DockerLexer(RegexLexer):
class TerraformLexer(ExtendedRegexLexer):
class TermcapLexer(RegexLexer):
class TerminfoLexer(RegexLexer):
class PkgConfigLexer(RegexLexer):
class PacmanConfLexer(RegexLexer):
class AugeasLexer(RegexLexer):
class TOMLLexer(RegexLexer):
class NestedTextLexer(RegexLexer):
class SingularityLexer(RegexLexer):
class UnixConfigLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\console.py
-----------------------------
> """
      pygments.lexers.console
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class VCTreeStatusLexer(RegexLexer):
class PyPyLogLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\cplint.py
-----------------------------
> """
      pygments.lexers.cplint
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CplintLexer(PrologLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\crystal.py
-----------------------------
> """
      pygments.lexers.crystal
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class CrystalLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\csound.py
-----------------------------
> """
      pygments.lexers.csound
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CsoundLexer(RegexLexer):
class CsoundScoreLexer(CsoundLexer):
class CsoundOrchestraLexer(CsoundLexer):
class CsoundDocumentLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\css.py
-----------------------------
> """
      pygments.lexers.css
      ~~~~~~~~~~~~~~~~~~~
  
class CssLexer(RegexLexer):
def _indentation(lexer, match, ctx):
def _starts_block(token, state):
class SassLexer(ExtendedRegexLexer):
class ScssLexer(RegexLexer):
class LessCssLexer(CssLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\c_cpp.py
-----------------------------
> """
      pygments.lexers.c_cpp
      ~~~~~~~~~~~~~~~~~~~~~
  
class CFamilyLexer(RegexLexer):
class CLexer(CFamilyLexer):
class CppLexer(CFamilyLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\c_like.py
-----------------------------
> """
      pygments.lexers.c_like
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PikeLexer(CppLexer):
class NesCLexer(CLexer):
class ClayLexer(RegexLexer):
class ECLexer(CLexer):
class ValaLexer(RegexLexer):
class CudaLexer(CLexer):
class SwigLexer(CppLexer):
class MqlLexer(CppLexer):
class ArduinoLexer(CppLexer):
class CharmciLexer(CppLexer):
class OmgIdlLexer(CLexer):
class PromelaLexer(CLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\d.py
-----------------------------
> """
      pygments.lexers.d
      ~~~~~~~~~~~~~~~~~
  
class DLexer(RegexLexer):
class CrocLexer(RegexLexer):
class MiniDLexer(CrocLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\dalvik.py
-----------------------------
> """
      pygments.lexers.dalvik
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SmaliLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\data.py
-----------------------------
> """
      pygments.lexers.data
      ~~~~~~~~~~~~~~~~~~~~
  
class YamlLexerContext(LexerContext):
class YamlLexer(ExtendedRegexLexer):
class JsonLexer(Lexer):
class JsonBareObjectLexer(JsonLexer):
class JsonLdLexer(JsonLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\dax.py
-----------------------------
> """
      pygments.lexers.dax
      ~~~~~~~~~~~~~~~~~~~
  
class DaxLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\devicetree.py
-----------------------------
> """
      pygments.lexers.devicetree
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class DevicetreeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\diff.py
-----------------------------
> """
      pygments.lexers.diff
      ~~~~~~~~~~~~~~~~~~~~
  
class DiffLexer(RegexLexer):
class DarcsPatchLexer(RegexLexer):
class WDiffLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\dns.py
-----------------------------
> """
      pygments.lexers.dns
      ~~~~~~~~~~~~~~~~~~~
  
class DnsZoneLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\dotnet.py
-----------------------------
> """
      pygments.lexers.dotnet
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CSharpLexer(RegexLexer):
class NemerleLexer(RegexLexer):
class BooLexer(RegexLexer):
class VbNetLexer(RegexLexer):
class GenericAspxLexer(RegexLexer):
class CSharpAspxLexer(DelegatingLexer):
class VbNetAspxLexer(DelegatingLexer):
class FSharpLexer(RegexLexer):
class XppLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\dsls.py
-----------------------------
> """
      pygments.lexers.dsls
      ~~~~~~~~~~~~~~~~~~~~
  
class ProtoBufLexer(RegexLexer):
class ThriftLexer(RegexLexer):
class ZeekLexer(RegexLexer):
class PuppetLexer(RegexLexer):
class RslLexer(RegexLexer):
class MscgenLexer(RegexLexer):
class VGLLexer(RegexLexer):
class AlloyLexer(RegexLexer):
class PanLexer(RegexLexer):
class CrmshLexer(RegexLexer):
class FlatlineLexer(RegexLexer):
class SnowballLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\dylan.py
-----------------------------
> """
      pygments.lexers.dylan
      ~~~~~~~~~~~~~~~~~~~~~
  
class DylanLexer(RegexLexer):
class DylanLidLexer(RegexLexer):
class DylanConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ecl.py
-----------------------------
> """
      pygments.lexers.ecl
      ~~~~~~~~~~~~~~~~~~~
  
class ECLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\eiffel.py
-----------------------------
> """
      pygments.lexers.eiffel
      ~~~~~~~~~~~~~~~~~~~~~~
  
class EiffelLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\elm.py
-----------------------------
> """
      pygments.lexers.elm
      ~~~~~~~~~~~~~~~~~~~
  
class ElmLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\elpi.py
-----------------------------
> """
      pygments.lexers.elpi
      ~~~~~~~~~~~~~~~~~~~~
  
class ElpiLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\email.py
-----------------------------
> """
      pygments.lexers.email
      ~~~~~~~~~~~~~~~~~~~~~
  
class EmailHeaderLexer(RegexLexer):
class EmailLexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\erlang.py
-----------------------------
> """
      pygments.lexers.erlang
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ErlangLexer(RegexLexer):
class ErlangShellLexer(Lexer):
def gen_elixir_string_rules(name, symbol, token):
def gen_elixir_sigstr_rules(term, term_class, token, interpol=True):
class ElixirLexer(RegexLexer):
class ElixirConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\esoteric.py
-----------------------------
> """
      pygments.lexers.esoteric
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class BrainfuckLexer(RegexLexer):
class BefungeLexer(RegexLexer):
class CAmkESLexer(RegexLexer):
class CapDLLexer(RegexLexer):
class RedcodeLexer(RegexLexer):
class AheuiLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ezhil.py
-----------------------------
> """
      pygments.lexers.ezhil
      ~~~~~~~~~~~~~~~~~~~~~
  
class EzhilLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\factor.py
-----------------------------
> """
      pygments.lexers.factor
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FactorLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\fantom.py
-----------------------------
> """
      pygments.lexers.fantom
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FantomLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\felix.py
-----------------------------
> """
      pygments.lexers.felix
      ~~~~~~~~~~~~~~~~~~~~~
  
class FelixLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\fift.py
-----------------------------
> """
      pygments.lexers.fift
      ~~~~~~~~~~~~~~~~~~~~
  
class FiftLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\floscript.py
-----------------------------
> """
      pygments.lexers.floscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class FloScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\forth.py
-----------------------------
> """
      pygments.lexers.forth
      ~~~~~~~~~~~~~~~~~~~~~
  
class ForthLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\fortran.py
-----------------------------
> """
      pygments.lexers.fortran
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class FortranLexer(RegexLexer):
class FortranFixedLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\foxpro.py
-----------------------------
> """
      pygments.lexers.foxpro
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FoxProLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\freefem.py
-----------------------------
> """
      pygments.lexers.freefem
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class FreeFemLexer(CppLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\func.py
-----------------------------
> """
      pygments.lexers.func
      ~~~~~~~~~~~~~~~~~~~~
  
class FuncLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\functional.py
-----------------------------
> """
      pygments.lexers.functional
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\futhark.py
-----------------------------
> """
      pygments.lexers.futhark
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class FutharkLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\gcodelexer.py
-----------------------------
> """
      pygments.lexers.gcodelexer
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class GcodeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\gdscript.py
-----------------------------
> """
      pygments.lexers.gdscript
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class GDScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\gleam.py
-----------------------------
> """
      pygments.lexers.gleam
      ~~~~~~~~~~~~~~~~~~~~~
  
class GleamLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\go.py
-----------------------------
> """
      pygments.lexers.go
      ~~~~~~~~~~~~~~~~~~
  
class GoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\grammar_notation.py
-----------------------------
> """
      pygments.lexers.grammar_notation
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BnfLexer(RegexLexer):
class AbnfLexer(RegexLexer):
class JsgfLexer(RegexLexer):
class PegLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\graph.py
-----------------------------
> """
      pygments.lexers.graph
      ~~~~~~~~~~~~~~~~~~~~~
  
class CypherLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\graphics.py
-----------------------------
> """
      pygments.lexers.graphics
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class GLShaderLexer(RegexLexer):
class HLSLShaderLexer(RegexLexer):
class PostScriptLexer(RegexLexer):
class AsymptoteLexer(RegexLexer):
def _shortened(word):
def _shortened_many(*words):
class GnuplotLexer(RegexLexer):
class PovrayLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\graphql.py
-----------------------------
> """
      pygments.lexers.graphql
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GraphQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\graphviz.py
-----------------------------
> """
      pygments.lexers.graphviz
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class GraphvizLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\gsql.py
-----------------------------
> """
      pygments.lexers.gsql
      ~~~~~~~~~~~~~~~~~~~~
  
class GSQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\hare.py
-----------------------------
> """
      pygments.lexers.hare
      ~~~~~~~~~~~~~~~~~~~~
  
class HareLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\haskell.py
-----------------------------
> """
      pygments.lexers.haskell
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class HaskellLexer(RegexLexer):
class HspecLexer(HaskellLexer):
class IdrisLexer(RegexLexer):
class AgdaLexer(RegexLexer):
class CryptolLexer(RegexLexer):
class LiterateLexer(Lexer):
class LiterateHaskellLexer(LiterateLexer):
class LiterateIdrisLexer(LiterateLexer):
class LiterateAgdaLexer(LiterateLexer):
class LiterateCryptolLexer(LiterateLexer):
class KokaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\haxe.py
-----------------------------
> """
      pygments.lexers.haxe
      ~~~~~~~~~~~~~~~~~~~~
  
class HaxeLexer(ExtendedRegexLexer):
class HxmlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\hdl.py
-----------------------------
> """
      pygments.lexers.hdl
      ~~~~~~~~~~~~~~~~~~~
  
class VerilogLexer(RegexLexer):
class SystemVerilogLexer(RegexLexer):
class VhdlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\hexdump.py
-----------------------------
> """
      pygments.lexers.hexdump
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class HexdumpLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\html.py
-----------------------------
> """
      pygments.lexers.html
      ~~~~~~~~~~~~~~~~~~~~
  
class HtmlLexer(RegexLexer):
class DtdLexer(RegexLexer):
class XmlLexer(RegexLexer):
class XsltLexer(XmlLexer):
class HamlLexer(ExtendedRegexLexer):
class ScamlLexer(ExtendedRegexLexer):
class PugLexer(ExtendedRegexLexer):
class UrlEncodedLexer(RegexLexer):
class VueLexer(HtmlLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\idl.py
-----------------------------
> """
      pygments.lexers.idl
      ~~~~~~~~~~~~~~~~~~~
  
class IDLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\igor.py
-----------------------------
> """
      pygments.lexers.igor
      ~~~~~~~~~~~~~~~~~~~~
  
class IgorLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\inferno.py
-----------------------------
> """
      pygments.lexers.inferno
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class LimboLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\installers.py
-----------------------------
> """
      pygments.lexers.installers
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class NSISLexer(RegexLexer):
class RPMSpecLexer(RegexLexer):
class DebianSourcesLexer(RegexLexer):
class SourcesListLexer(RegexLexer):
class DebianControlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\int_fiction.py
-----------------------------
> """
      pygments.lexers.int_fiction
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class Inform6Lexer(RegexLexer):
class Inform7Lexer(RegexLexer):
class Inform6TemplateLexer(Inform7Lexer):
class Tads3Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\iolang.py
-----------------------------
> """
      pygments.lexers.iolang
      ~~~~~~~~~~~~~~~~~~~~~~
  
class IoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\j.py
-----------------------------
> """
      pygments.lexers.j
      ~~~~~~~~~~~~~~~~~
  
class JLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\javascript.py
-----------------------------
> """
      pygments.lexers.javascript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class JavascriptLexer(RegexLexer):
class TypeScriptLexer(JavascriptLexer):
class KalLexer(RegexLexer):
class LiveScriptLexer(RegexLexer):
class DartLexer(RegexLexer):
class LassoLexer(RegexLexer):
class ObjectiveJLexer(RegexLexer):
class CoffeeScriptLexer(RegexLexer):
class MaskLexer(RegexLexer):
class EarlGreyLexer(RegexLexer):
class JuttleLexer(RegexLexer):
class NodeConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\jmespath.py
-----------------------------
> """
      pygments.lexers.jmespath
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class JMESPathLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\jslt.py
-----------------------------
> """
      pygments.lexers.jslt
      ~~~~~~~~~~~~~~~~~~~~
  
class JSLTLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\json5.py
-----------------------------
> """
      pygments.lexers.json5
      ~~~~~~~~~~~~~~~~~~~~~
  
def string_rules(quote_mark):
def quoted_field_name(quote_mark):
class Json5Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\jsonnet.py
-----------------------------
> """
      pygments.lexers.jsonnet
      ~~~~~~~~~~~~~~~~~~~~~~~
  
def string_rules(quote_mark):
def quoted_field_name(quote_mark):
class JsonnetLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\jsx.py
-----------------------------
> """
      pygments.lexers.jsx
      ~~~~~~~~~~~~~~~~~~~
  
class JsxLexer(JavascriptLexer):
class TsxLexer(TypeScriptLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\julia.py
-----------------------------
> """
      pygments.lexers.julia
      ~~~~~~~~~~~~~~~~~~~~~
  
class JuliaLexer(RegexLexer):
class JuliaConsoleLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\jvm.py
-----------------------------
> """
      pygments.lexers.jvm
      ~~~~~~~~~~~~~~~~~~~
  
class JavaLexer(RegexLexer):
class AspectJLexer(JavaLexer):
class ScalaLexer(RegexLexer):
class GosuLexer(RegexLexer):
class GosuTemplateLexer(Lexer):
class GroovyLexer(RegexLexer):
class IokeLexer(RegexLexer):
class ClojureLexer(RegexLexer):
class ClojureScriptLexer(ClojureLexer):
class TeaLangLexer(RegexLexer):
class CeylonLexer(RegexLexer):
class KotlinLexer(RegexLexer):
class XtendLexer(RegexLexer):
class PigLexer(RegexLexer):
class GoloLexer(RegexLexer):
class JasminLexer(RegexLexer):
class SarlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\kuin.py
-----------------------------
> """
      pygments.lexers.kuin
      ~~~~~~~~~~~~~~~~~~~~
  
class KuinLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\kusto.py
-----------------------------
> """
      pygments.lexers.kusto
      ~~~~~~~~~~~~~~~~~~~~~
  
class KustoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ldap.py
-----------------------------
> """
      pygments.lexers.ldap
      ~~~~~~~~~~~~~~~~~~~~
  
class LdifLexer(RegexLexer):
class LdaprcLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\lean.py
-----------------------------
> """
      pygments.lexers.lean
      ~~~~~~~~~~~~~~~~~~~~
  
class Lean3Lexer(RegexLexer):
class Lean4Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\lilypond.py
-----------------------------
> """
      pygments.lexers.lilypond
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
def builtin_words(names, backslash, suffix=NAME_END_RE):
class LilyPondLexer(SchemeLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\lisp.py
-----------------------------
> """
      pygments.lexers.lisp
      ~~~~~~~~~~~~~~~~~~~~
  
class SchemeLexer(RegexLexer):
class CommonLispLexer(RegexLexer):
class HyLexer(RegexLexer):
class RacketLexer(RegexLexer):
class NewLispLexer(RegexLexer):
class EmacsLispLexer(RegexLexer):
class ShenLexer(RegexLexer):
class CPSALexer(RegexLexer):
class XtlangLexer(RegexLexer):
class FennelLexer(RegexLexer):
class JanetLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\macaulay2.py
-----------------------------
> """
      pygments.lexers.macaulay2
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class Macaulay2Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\make.py
-----------------------------
> """
      pygments.lexers.make
      ~~~~~~~~~~~~~~~~~~~~
  
class MakefileLexer(Lexer):
class BaseMakefileLexer(RegexLexer):
class CMakeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\maple.py
-----------------------------
> """
      pygments.lexers.maple
      ~~~~~~~~~~~~~~~~~~~~~
  
class MapleLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\markup.py
-----------------------------
> """
      pygments.lexers.markup
      ~~~~~~~~~~~~~~~~~~~~~~
  
class BBCodeLexer(RegexLexer):
class MoinWikiLexer(RegexLexer):
class RstLexer(RegexLexer):
class TexLexer(RegexLexer):
class GroffLexer(RegexLexer):
class MozPreprocHashLexer(RegexLexer):
class MozPreprocPercentLexer(MozPreprocHashLexer):
class MozPreprocXulLexer(DelegatingLexer):
class MozPreprocJavascriptLexer(DelegatingLexer):
class MozPreprocCssLexer(DelegatingLexer):
class MarkdownLexer(RegexLexer):
class OrgLexer(RegexLexer):
class TiddlyWiki5Lexer(RegexLexer):
class WikitextLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\math.py
-----------------------------
> """
      pygments.lexers.math
      ~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\matlab.py
-----------------------------
> """
      pygments.lexers.matlab
      ~~~~~~~~~~~~~~~~~~~~~~
  
class MatlabLexer(RegexLexer):
class MatlabSessionLexer(Lexer):
class OctaveLexer(RegexLexer):
class ScilabLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\maxima.py
-----------------------------
> """
      pygments.lexers.maxima
      ~~~~~~~~~~~~~~~~~~~~~~
  
class MaximaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\meson.py
-----------------------------
> """
      pygments.lexers.meson
      ~~~~~~~~~~~~~~~~~~~~~
  
class MesonLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\mime.py
-----------------------------
> """
      pygments.lexers.mime
      ~~~~~~~~~~~~~~~~~~~~
  
class MIMELexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\minecraft.py
-----------------------------
> """
      pygments.lexers.minecraft
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class SNBTLexer(RegexLexer):
class MCFunctionLexer(RegexLexer):
class MCSchemaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\mips.py
-----------------------------
> """
      pygments.lexers.mips
      ~~~~~~~~~~~~~~~~~~~~
  
class MIPSLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ml.py
-----------------------------
> """
      pygments.lexers.ml
      ~~~~~~~~~~~~~~~~~~
  
class SMLLexer(RegexLexer):
class OcamlLexer(RegexLexer):
class OpaLexer(RegexLexer):
class ReasonLexer(RegexLexer):
class FStarLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\modeling.py
-----------------------------
> """
      pygments.lexers.modeling
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ModelicaLexer(RegexLexer):
class BugsLexer(RegexLexer):
class JagsLexer(RegexLexer):
class StanLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\modula2.py
-----------------------------
> """
      pygments.lexers.modula2
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class Modula2Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\mojo.py
-----------------------------
> """
      pygments.lexers.mojo
      ~~~~~~~~~~~~~~~~~~~~
  
class MojoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\monte.py
-----------------------------
> """
      pygments.lexers.monte
      ~~~~~~~~~~~~~~~~~~~~~
  
class MonteLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\mosel.py
-----------------------------
> """
      pygments.lexers.mosel
      ~~~~~~~~~~~~~~~~~~~~~
  
class MoselLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ncl.py
-----------------------------
> """
      pygments.lexers.ncl
      ~~~~~~~~~~~~~~~~~~~
  
class NCLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\nimrod.py
-----------------------------
> """
      pygments.lexers.nimrod
      ~~~~~~~~~~~~~~~~~~~~~~
  
class NimrodLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\nit.py
-----------------------------
> """
      pygments.lexers.nit
      ~~~~~~~~~~~~~~~~~~~
  
class NitLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\nix.py
-----------------------------
> """
      pygments.lexers.nix
      ~~~~~~~~~~~~~~~~~~~
  
class NixLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\numbair.py
-----------------------------
> """
      pygments.lexers.numbair
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class NumbaIRLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\oberon.py
-----------------------------
> """
      pygments.lexers.oberon
      ~~~~~~~~~~~~~~~~~~~~~~
  
class ComponentPascalLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\objective.py
-----------------------------
> """
      pygments.lexers.objective
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def objective(baselexer):
class ObjectiveCLexer(objective(CLexer)):
class ObjectiveCppLexer(objective(CppLexer)):
class LogosLexer(ObjectiveCppLexer):
class SwiftLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ooc.py
-----------------------------
> """
      pygments.lexers.ooc
      ~~~~~~~~~~~~~~~~~~~
  
class OocLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\openscad.py
-----------------------------
> """
      pygments.lexers.openscad
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class OpenScadLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\other.py
-----------------------------
> """
      pygments.lexers.other
      ~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\parasail.py
-----------------------------
> """
      pygments.lexers.parasail
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ParaSailLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\parsers.py
-----------------------------
> """
      pygments.lexers.parsers
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class RagelLexer(RegexLexer):
class RagelEmbeddedLexer(RegexLexer):
class RagelRubyLexer(DelegatingLexer):
class RagelCLexer(DelegatingLexer):
class RagelDLexer(DelegatingLexer):
class RagelCppLexer(DelegatingLexer):
class RagelObjectiveCLexer(DelegatingLexer):
class RagelJavaLexer(DelegatingLexer):
class AntlrLexer(RegexLexer):
class AntlrCppLexer(DelegatingLexer):
class AntlrObjectiveCLexer(DelegatingLexer):
class AntlrCSharpLexer(DelegatingLexer):
class AntlrPythonLexer(DelegatingLexer):
class AntlrJavaLexer(DelegatingLexer):
class AntlrRubyLexer(DelegatingLexer):
class AntlrPerlLexer(DelegatingLexer):
class AntlrActionScriptLexer(DelegatingLexer):
class TreetopBaseLexer(RegexLexer):
class TreetopLexer(DelegatingLexer):
class EbnfLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\pascal.py
-----------------------------
> """
      pygments.lexers.pascal
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PortugolLexer(Lexer):
class DelphiLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\pawn.py
-----------------------------
> """
      pygments.lexers.pawn
      ~~~~~~~~~~~~~~~~~~~~
  
class SourcePawnLexer(RegexLexer):
class PawnLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\pddl.py
-----------------------------
> """
      pygments.lexers.pddl
      ~~~~~~~~~~~~~~~~~~~~
  
class PddlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\perl.py
-----------------------------
> """
      pygments.lexers.perl
      ~~~~~~~~~~~~~~~~~~~~
  
class PerlLexer(RegexLexer):
class Perl6Lexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\phix.py
-----------------------------
> """
      pygments.lexers.phix
      ~~~~~~~~~~~~~~~~~~~~
  
class PhixLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\php.py
-----------------------------
> """
      pygments.lexers.php
      ~~~~~~~~~~~~~~~~~~~
  
class ZephirLexer(RegexLexer):
class PsyshConsoleLexer(Lexer):
class PhpLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\pointless.py
-----------------------------
> """
      pygments.lexers.pointless
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class PointlessLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\pony.py
-----------------------------
> """
      pygments.lexers.pony
      ~~~~~~~~~~~~~~~~~~~~
  
class PonyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\praat.py
-----------------------------
> """
      pygments.lexers.praat
      ~~~~~~~~~~~~~~~~~~~~~
  
class PraatLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\procfile.py
-----------------------------
> """
      pygments.lexers.procfile
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ProcfileLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\prolog.py
-----------------------------
> """
      pygments.lexers.prolog
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PrologLexer(RegexLexer):
class LogtalkLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\promql.py
-----------------------------
> """
      pygments.lexers.promql
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PromQLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\prql.py
-----------------------------
> """
      pygments.lexers.prql
      ~~~~~~~~~~~~~~~~~~~~
  
class PrqlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ptx.py
-----------------------------
> """
      pygments.lexers.ptx
      ~~~~~~~~~~~~~~~~~~~
  
class PtxLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\python.py
-----------------------------
> """
      pygments.lexers.python
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PythonLexer(RegexLexer):
class Python2Lexer(RegexLexer):
class _PythonConsoleLexerBase(RegexLexer):
class PythonConsoleLexer(DelegatingLexer):
class PythonTracebackLexer(RegexLexer):
class Python2TracebackLexer(RegexLexer):
class CythonLexer(RegexLexer):
class DgLexer(RegexLexer):
class NumPyLexer(PythonLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\q.py
-----------------------------
> """
      pygments.lexers.q
      ~~~~~~~~~~~~~~~~~
  
class KLexer(RegexLexer):
class QLexer(KLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\qlik.py
-----------------------------
> """
      pygments.lexers.qlik
      ~~~~~~~~~~~~~~~~~~~~
  
class QlikLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\qvt.py
-----------------------------
> """
      pygments.lexers.qvt
      ~~~~~~~~~~~~~~~~~~~
  
class QVToLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\r.py
-----------------------------
> """
      pygments.lexers.r
      ~~~~~~~~~~~~~~~~~
  
class RConsoleLexer(Lexer):
class SLexer(RegexLexer):
class RdLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\rdf.py
-----------------------------
> """
      pygments.lexers.rdf
      ~~~~~~~~~~~~~~~~~~~
  
class SparqlLexer(RegexLexer):
class TurtleLexer(RegexLexer):
class ShExCLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\rebol.py
-----------------------------
> """
      pygments.lexers.rebol
      ~~~~~~~~~~~~~~~~~~~~~
  
class RebolLexer(RegexLexer):
class RedLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\rego.py
-----------------------------
> """
      pygments.lexers.rego
      ~~~~~~~~~~~~~~~~~~~~
  
class RegoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\resource.py
-----------------------------
> """
      pygments.lexers.resource
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ResourceLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ride.py
-----------------------------
> """
      pygments.lexers.ride
      ~~~~~~~~~~~~~~~~~~~~
  
class RideLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\rita.py
-----------------------------
> """
      pygments.lexers.rita
      ~~~~~~~~~~~~~~~~~~~~
  
class RitaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\rnc.py
-----------------------------
> """
      pygments.lexers.rnc
      ~~~~~~~~~~~~~~~~~~~
  
class RNCCompactLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\roboconf.py
-----------------------------
> """
      pygments.lexers.roboconf
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class RoboconfGraphLexer(RegexLexer):
class RoboconfInstancesLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\robotframework.py
-----------------------------
> """
      pygments.lexers.robotframework
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def normalize(string, remove=''):
class RobotFrameworkLexer(Lexer):
class VariableTokenizer:
class RowTokenizer:
class RowSplitter:
class Tokenizer:
class Comment(Tokenizer):
class Setting(Tokenizer):
class ImportSetting(Tokenizer):
class TestCaseSetting(Setting):
class KeywordSetting(TestCaseSetting):
class Variable(Tokenizer):
class KeywordCall(Tokenizer):
class GherkinTokenizer:
class TemplatedKeywordCall(Tokenizer):
class ForLoop(Tokenizer):
class _Table:
class UnknownTable(_Table):
class VariableTable(_Table):
class SettingTable(_Table):
class TestCaseTable(_Table):
class KeywordTable(TestCaseTable):
class VariableSplitter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ruby.py
-----------------------------
> """
      pygments.lexers.ruby
      ~~~~~~~~~~~~~~~~~~~~
  
class RubyLexer(ExtendedRegexLexer):
class RubyConsoleLexer(Lexer):
class FancyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\rust.py
-----------------------------
> """
      pygments.lexers.rust
      ~~~~~~~~~~~~~~~~~~~~
  
class RustLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\sas.py
-----------------------------
> """
      pygments.lexers.sas
      ~~~~~~~~~~~~~~~~~~~
  
class SASLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\savi.py
-----------------------------
> """
      pygments.lexers.savi
      ~~~~~~~~~~~~~~~~~~~~
  
class SaviLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\scdoc.py
-----------------------------
> """
      pygments.lexers.scdoc
      ~~~~~~~~~~~~~~~~~~~~~
  
class ScdocLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\scripting.py
-----------------------------
> """
      pygments.lexers.scripting
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def all_lua_builtins():
class LuaLexer(RegexLexer):
def _luau_make_expression(should_pop, _s):
def _luau_make_expression_special(should_pop):
class LuauLexer(RegexLexer):
class MoonScriptLexer(LuaLexer):
class ChaiscriptLexer(RegexLexer):
class LSLLexer(RegexLexer):
class AppleScriptLexer(RegexLexer):
class RexxLexer(RegexLexer):
class MOOCodeLexer(RegexLexer):
class HybrisLexer(RegexLexer):
class EasytrieveLexer(RegexLexer):
class JclLexer(RegexLexer):
class MiniScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\sgf.py
-----------------------------
> """
      pygments.lexers.sgf
      ~~~~~~~~~~~~~~~~~~~
  
class SmartGameFormatLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\shell.py
-----------------------------
> """
      pygments.lexers.shell
      ~~~~~~~~~~~~~~~~~~~~~
  
class BashLexer(RegexLexer):
class SlurmBashLexer(BashLexer):
class ShellSessionBaseLexer(Lexer):
class BashSessionLexer(ShellSessionBaseLexer):
class BatchLexer(RegexLexer):
class MSDOSSessionLexer(ShellSessionBaseLexer):
class TcshLexer(RegexLexer):
class TcshSessionLexer(ShellSessionBaseLexer):
class PowerShellLexer(RegexLexer):
class PowerShellSessionLexer(ShellSessionBaseLexer):
class FishShellLexer(RegexLexer):
class ExeclineLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\sieve.py
-----------------------------
> """
      pygments.lexers.sieve
      ~~~~~~~~~~~~~~~~~~~~~
  
class SieveLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\slash.py
-----------------------------
> """
      pygments.lexers.slash
      ~~~~~~~~~~~~~~~~~~~~~
  
class SlashLanguageLexer(ExtendedRegexLexer):
class SlashLexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\smalltalk.py
-----------------------------
> """
      pygments.lexers.smalltalk
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class SmalltalkLexer(RegexLexer):
class NewspeakLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\smithy.py
-----------------------------
> """
      pygments.lexers.smithy
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SmithyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\smv.py
-----------------------------
> """
      pygments.lexers.smv
      ~~~~~~~~~~~~~~~~~~~
  
class NuSMVLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\snobol.py
-----------------------------
> """
      pygments.lexers.snobol
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SnobolLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\solidity.py
-----------------------------
> """
      pygments.lexers.solidity
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class SolidityLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\soong.py
-----------------------------
> """
      pygments.lexers.soong
      ~~~~~~~~~~~~~~~~~~~~~
  
class SoongLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\sophia.py
-----------------------------
> """
      pygments.lexers.sophia
      ~~~~~~~~~~~~~~~~~~~~~~
  
class SophiaLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\special.py
-----------------------------
> """
      pygments.lexers.special
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class TextLexer(Lexer):
class OutputLexer(Lexer):
class RawTokenLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\spice.py
-----------------------------
> """
      pygments.lexers.spice
      ~~~~~~~~~~~~~~~~~~~~~
  
class SpiceLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\sql.py
-----------------------------
> """
      pygments.lexers.sql
      ~~~~~~~~~~~~~~~~~~~
  
def language_callback(lexer, match):
class PostgresBase:
class PostgresLexer(PostgresBase, RegexLexer):
class PlPgsqlLexer(PostgresBase, RegexLexer):
class PsqlRegexLexer(PostgresBase, RegexLexer):
class lookahead:
class PostgresConsoleLexer(Lexer):
class PostgresExplainLexer(RegexLexer):
class SqlLexer(RegexLexer):
class TransactSqlLexer(RegexLexer):
class MySqlLexer(RegexLexer):
class GoogleSqlLexer(RegexLexer):
class SqliteConsoleLexer(Lexer):
class RqlLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\srcinfo.py
-----------------------------
> """
      pygments.lexers.srcinfo
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class SrcinfoLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\stata.py
-----------------------------
> """
      pygments.lexers.stata
      ~~~~~~~~~~~~~~~~~~~~~
  
class StataLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\supercollider.py
-----------------------------
> """
      pygments.lexers.supercollider
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class SuperColliderLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tablegen.py
-----------------------------
> """
      pygments.lexers.tablegen
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class TableGenLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tact.py
-----------------------------
> """
      pygments.lexers.tact
      ~~~~~~~~~~~~~~~~~~~~
  
class TactLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tal.py
-----------------------------
> """
      pygments.lexers.tal
      ~~~~~~~~~~~~~~~~~~~
  
class TalLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tcl.py
-----------------------------
> """
      pygments.lexers.tcl
      ~~~~~~~~~~~~~~~~~~~
  
class TclLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\teal.py
-----------------------------
> """
      pygments.lexers.teal
      ~~~~~~~~~~~~~~~~~~~~
  
class TealLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\templates.py
-----------------------------
> """
      pygments.lexers.templates
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ErbLexer(Lexer):
class SmartyLexer(RegexLexer):
class VelocityLexer(RegexLexer):
class VelocityHtmlLexer(DelegatingLexer):
class VelocityXmlLexer(DelegatingLexer):
class DjangoLexer(RegexLexer):
class MyghtyLexer(RegexLexer):
class MyghtyHtmlLexer(DelegatingLexer):
class MyghtyXmlLexer(DelegatingLexer):
class MyghtyJavascriptLexer(DelegatingLexer):
class MyghtyCssLexer(DelegatingLexer):
class MasonLexer(RegexLexer):
class MakoLexer(RegexLexer):
class MakoHtmlLexer(DelegatingLexer):
class MakoXmlLexer(DelegatingLexer):
class MakoJavascriptLexer(DelegatingLexer):
class MakoCssLexer(DelegatingLexer):
class CheetahPythonLexer(Lexer):
class CheetahLexer(RegexLexer):
class CheetahHtmlLexer(DelegatingLexer):
class CheetahXmlLexer(DelegatingLexer):
class CheetahJavascriptLexer(DelegatingLexer):
class GenshiTextLexer(RegexLexer):
class GenshiMarkupLexer(RegexLexer):
class HtmlGenshiLexer(DelegatingLexer):
class GenshiLexer(DelegatingLexer):
class JavascriptGenshiLexer(DelegatingLexer):
class CssGenshiLexer(DelegatingLexer):
class RhtmlLexer(DelegatingLexer):
class XmlErbLexer(DelegatingLexer):
class CssErbLexer(DelegatingLexer):
class JavascriptErbLexer(DelegatingLexer):
class HtmlPhpLexer(DelegatingLexer):
class XmlPhpLexer(DelegatingLexer):
class CssPhpLexer(DelegatingLexer):
class JavascriptPhpLexer(DelegatingLexer):
class HtmlSmartyLexer(DelegatingLexer):
class XmlSmartyLexer(DelegatingLexer):
class CssSmartyLexer(DelegatingLexer):
class JavascriptSmartyLexer(DelegatingLexer):
class HtmlDjangoLexer(DelegatingLexer):
class XmlDjangoLexer(DelegatingLexer):
class CssDjangoLexer(DelegatingLexer):
class JavascriptDjangoLexer(DelegatingLexer):
class JspRootLexer(RegexLexer):
class JspLexer(DelegatingLexer):
class EvoqueLexer(RegexLexer):
class EvoqueHtmlLexer(DelegatingLexer):
class EvoqueXmlLexer(DelegatingLexer):
class ColdfusionLexer(RegexLexer):
class ColdfusionMarkupLexer(RegexLexer):
class ColdfusionHtmlLexer(DelegatingLexer):
class ColdfusionCFCLexer(DelegatingLexer):
class SspLexer(DelegatingLexer):
class TeaTemplateRootLexer(RegexLexer):
class TeaTemplateLexer(DelegatingLexer):
class LassoHtmlLexer(DelegatingLexer):
class LassoXmlLexer(DelegatingLexer):
class LassoCssLexer(DelegatingLexer):
class LassoJavascriptLexer(DelegatingLexer):
class HandlebarsLexer(RegexLexer):
class HandlebarsHtmlLexer(DelegatingLexer):
class YamlJinjaLexer(DelegatingLexer):
class LiquidLexer(RegexLexer):
class TwigLexer(RegexLexer):
class TwigHtmlLexer(DelegatingLexer):
class Angular2Lexer(RegexLexer):
class Angular2HtmlLexer(DelegatingLexer):
class SqlJinjaLexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\teraterm.py
-----------------------------
> """
      pygments.lexers.teraterm
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class TeraTermLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\testing.py
-----------------------------
> """
      pygments.lexers.testing
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GherkinLexer(RegexLexer):
class TAPLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\text.py
-----------------------------
> """
      pygments.lexers.text
      ~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\textedit.py
-----------------------------
> """
      pygments.lexers.textedit
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class AwkLexer(RegexLexer):
class SedLexer(RegexLexer):
class VimLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\textfmts.py
-----------------------------
> """
      pygments.lexers.textfmts
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class IrcLogsLexer(RegexLexer):
class GettextLexer(RegexLexer):
class HttpLexer(RegexLexer):
class TodotxtLexer(RegexLexer):
class NotmuchLexer(RegexLexer):
class KernelLogLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\theorem.py
-----------------------------
> """
      pygments.lexers.theorem
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class CoqLexer(RegexLexer):
class IsabelleLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\thingsdb.py
-----------------------------
> """
      pygments.lexers.thingsdb
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ThingsDBLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tlb.py
-----------------------------
> """
      pygments.lexers.tlb
      ~~~~~~~~~~~~~~~~~~~
  
class TlbLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tls.py
-----------------------------
> """
      pygments.lexers.tls
      ~~~~~~~~~~~~~~~~~~~
  
class TlsLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\tnt.py
-----------------------------
> """
      pygments.lexers.tnt
      ~~~~~~~~~~~~~~~~~~~
  
class TNTLexer(Lexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\trafficscript.py
-----------------------------
> """
      pygments.lexers.trafficscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class RtsLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\typoscript.py
-----------------------------
> """
      pygments.lexers.typoscript
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class TypoScriptCssDataLexer(RegexLexer):
class TypoScriptHtmlDataLexer(RegexLexer):
class TypoScriptLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\typst.py
-----------------------------
> """
      pygments.lexers.typst
      ~~~~~~~~~~~~~~~~~~~~~
  
class TypstLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\ul4.py
-----------------------------
> """
      pygments.lexers.ul4
      ~~~~~~~~~~~~~~~~~~~
  
class UL4Lexer(RegexLexer):
class HTMLUL4Lexer(DelegatingLexer):
class XMLUL4Lexer(DelegatingLexer):
class CSSUL4Lexer(DelegatingLexer):
class JavascriptUL4Lexer(DelegatingLexer):
class PythonUL4Lexer(DelegatingLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\unicon.py
-----------------------------
> """
      pygments.lexers.unicon
      ~~~~~~~~~~~~~~~~~~~~~~
  
class UniconLexer(RegexLexer):
class IconLexer(RegexLexer):
class UcodeLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\urbi.py
-----------------------------
> """
      pygments.lexers.urbi
      ~~~~~~~~~~~~~~~~~~~~
  
class UrbiscriptLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\usd.py
-----------------------------
> """
      pygments.lexers.usd
      ~~~~~~~~~~~~~~~~~~~
  
def _keywords(words, type_):
class UsdLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\varnish.py
-----------------------------
> """
      pygments.lexers.varnish
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class VCLLexer(RegexLexer):
class VCLSnippetLexer(VCLLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\verification.py
-----------------------------
> """
      pygments.lexers.verification
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class BoogieLexer(RegexLexer):
class SilverLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\verifpal.py
-----------------------------
> """
      pygments.lexers.verifpal
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class VerifpalLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\vip.py
-----------------------------
> """
      pygments.lexers.vip
      ~~~~~~~~~~~~~~~~~~~
  
class VisualPrologBaseLexer(RegexLexer):
class VisualPrologLexer(VisualPrologBaseLexer):
class VisualPrologGrammarLexer(VisualPrologBaseLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\vyper.py
-----------------------------
> """
      pygments.lexers.vyper
      ~~~~~~~~~~~~~~~~~~~~~
  
class VyperLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\web.py
-----------------------------
> """
      pygments.lexers.web
      ~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\webassembly.py
-----------------------------
> """
      pygments.lexers.webassembly
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class WatLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\webidl.py
-----------------------------
> """
      pygments.lexers.webidl
      ~~~~~~~~~~~~~~~~~~~~~~
  
class WebIDLLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\webmisc.py
-----------------------------
> """
      pygments.lexers.webmisc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class DuelLexer(RegexLexer):
class XQueryLexer(ExtendedRegexLexer):
class QmlLexer(RegexLexer):
class CirruLexer(RegexLexer):
class SlimLexer(ExtendedRegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\wgsl.py
-----------------------------
> """
      pygments.lexers.wgsl
      ~~~~~~~~~~~~~~~~~~~~
  
class WgslLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\whiley.py
-----------------------------
> """
      pygments.lexers.whiley
      ~~~~~~~~~~~~~~~~~~~~~~
  
class WhileyLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\wowtoc.py
-----------------------------
> """
      pygments.lexers.wowtoc
      ~~~~~~~~~~~~~~~~~~~~~~
  
def _create_tag_line_pattern(inner_pattern, ignore_case=False):
def _create_tag_line_token(inner_pattern, inner_token, ignore_case=False):
class WoWTocLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\wren.py
-----------------------------
> """
      pygments.lexers.wren
      ~~~~~~~~~~~~~~~~~~~~
  
class WrenLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\x10.py
-----------------------------
> """
      pygments.lexers.x10
      ~~~~~~~~~~~~~~~~~~~
  
class X10Lexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\xorg.py
-----------------------------
> """
      pygments.lexers.xorg
      ~~~~~~~~~~~~~~~~~~~~
  
class XorgLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\yang.py
-----------------------------
> """
      pygments.lexers.yang
      ~~~~~~~~~~~~~~~~~~~~
  
class YangLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\yara.py
-----------------------------
> """
      pygments.lexers.yara
      ~~~~~~~~~~~~~~~~~~~~
  
class YaraLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\zig.py
-----------------------------
> """
      pygments.lexers.zig
      ~~~~~~~~~~~~~~~~~~~
  
class ZigLexer(RegexLexer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_ada_builtins.py
-----------------------------
> """
      pygments.lexers._ada_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_asy_builtins.py
-----------------------------
> """
      pygments.lexers._asy_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_cl_builtins.py
-----------------------------
> """
      pygments.lexers._cl_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_cocoa_builtins.py
-----------------------------
> """
      pygments.lexers._cocoa_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_csound_builtins.py
-----------------------------
> """
      pygments.lexers._csound_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_css_builtins.py
-----------------------------
> """
      pygments.lexers._css_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_googlesql_builtins.py
-----------------------------
> """
      pygments.lexers._googlesql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_julia_builtins.py
-----------------------------
> """
      pygments.lexers._julia_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_lasso_builtins.py
-----------------------------
> """
      pygments.lexers._lasso_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_lilypond_builtins.py
-----------------------------
> """
      pygments.lexers._lilypond_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_luau_builtins.py
-----------------------------
> """
      pygments.lexers._luau_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_lua_builtins.py
-----------------------------
> """
      pygments.lexers._lua_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_mql_builtins.py
-----------------------------
> """
      pygments.lexers._mql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_mysql_builtins.py
-----------------------------
> """
      pygments.lexers._mysql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_openedge_builtins.py
-----------------------------
> """
      pygments.lexers._openedge_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_php_builtins.py
-----------------------------
> """
      pygments.lexers._php_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_postgres_builtins.py
-----------------------------
> """
      pygments.lexers._postgres_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_qlik_builtins.py
-----------------------------
> """
      pygments.lexers._qlik_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_scheme_builtins.py
-----------------------------
> """
      pygments.lexers._scheme_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_scilab_builtins.py
-----------------------------
> """
      pygments.lexers._scilab_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_sourcemod_builtins.py
-----------------------------
> """
      pygments.lexers._sourcemod_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_sql_builtins.py
-----------------------------
> """
      pygments.lexers._sql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_stan_builtins.py
-----------------------------
> """
      pygments.lexers._stan_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_stata_builtins.py
-----------------------------
> """
      pygments.lexers._stata_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_tsql_builtins.py
-----------------------------
> """
      pygments.lexers._tsql_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_usd_builtins.py
-----------------------------
> """
      pygments.lexers._usd_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_vbscript_builtins.py
-----------------------------
> """
      pygments.lexers._vbscript_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\_vim_builtins.py
-----------------------------
> """
      pygments.lexers._vim_builtins
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
def _getauto():
def _getcommand():
def _getoption():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexers\__init__.py
-----------------------------
> """
      pygments.lexers
      ~~~~~~~~~~~~~~~
  
def _fn_matches(fn, glob):
def _load_lexers(module_name):
def get_all_lexers(plugins=True):
def find_lexer_class(name):
def find_lexer_class_by_name(_alias):
def get_lexer_by_name(_alias, **options):
def load_lexer_from_file(filename, lexername="CustomLexer", **options):
def find_lexer_class_for_filename(_fn, code=None):
def get_lexer_for_filename(_fn, code=None, **options):
def get_lexer_for_mimetype(_mime, **options):
def _iter_lexerclasses(plugins=True):
def guess_lexer_for_filename(_fn, _text, **options):
def guess_lexer(_text, **options):
class _automodule(types.ModuleType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\abap.py
-----------------------------
> """
      pygments.styles.abap
      ~~~~~~~~~~~~~~~~~~~~
  
class AbapStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\algol.py
-----------------------------
> """
      pygments.styles.algol
      ~~~~~~~~~~~~~~~~~~~~~
  
class AlgolStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\algol_nu.py
-----------------------------
> """
      pygments.styles.algol_nu
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class Algol_NuStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\arduino.py
-----------------------------
> """
      pygments.styles.arduino
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class ArduinoStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\autumn.py
-----------------------------
> """
      pygments.styles.autumn
      ~~~~~~~~~~~~~~~~~~~~~~
  
class AutumnStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\borland.py
-----------------------------
> """
      pygments.styles.borland
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class BorlandStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\bw.py
-----------------------------
> """
      pygments.styles.bw
      ~~~~~~~~~~~~~~~~~~
  
class BlackWhiteStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\coffee.py
-----------------------------
> """
      pygments.styles.coffee
      ~~~~~~~~~~~~~~~~~~~~~~
  
class CoffeeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\colorful.py
-----------------------------
> """
      pygments.styles.colorful
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class ColorfulStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\default.py
-----------------------------
> """
      pygments.styles.default
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class DefaultStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\dracula.py
-----------------------------
> """
      pygments.styles.dracula
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class DraculaStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\emacs.py
-----------------------------
> """
      pygments.styles.emacs
      ~~~~~~~~~~~~~~~~~~~~~
  
class EmacsStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\friendly.py
-----------------------------
> """
      pygments.styles.friendly
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class FriendlyStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\friendly_grayscale.py
-----------------------------
> """
      pygments.styles.friendly_grayscale
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class FriendlyGrayscaleStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\fruity.py
-----------------------------
> """
      pygments.styles.fruity
      ~~~~~~~~~~~~~~~~~~~~~~
  
class FruityStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\gh_dark.py
-----------------------------
> """
      pygments.styles.gh_dark
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GhDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\gruvbox.py
-----------------------------
> """
      pygments.styles.gruvbox
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class GruvboxDarkStyle(Style):
class GruvboxLightStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\igor.py
-----------------------------
> """
      pygments.styles.igor
      ~~~~~~~~~~~~~~~~~~~~
  
class IgorStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\inkpot.py
-----------------------------
> """
      pygments.styles.inkpot
      ~~~~~~~~~~~~~~~~~~~~~~
  
class InkPotStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\lightbulb.py
-----------------------------
> """
      pygments.styles.lightbulb
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
class LightbulbStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\lilypond.py
-----------------------------
> """
      pygments.styles.lilypond
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class LilyPondStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\lovelace.py
-----------------------------
> """
      pygments.styles.lovelace
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class LovelaceStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\manni.py
-----------------------------
> """
      pygments.styles.manni
      ~~~~~~~~~~~~~~~~~~~~~
  
class ManniStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\material.py
-----------------------------
> """
      pygments.styles.material
      ~~~~~~~~~~~~~~~~~~~~~~~~
  
class MaterialStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\monokai.py
-----------------------------
> """
      pygments.styles.monokai
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class MonokaiStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\murphy.py
-----------------------------
> """
      pygments.styles.murphy
      ~~~~~~~~~~~~~~~~~~~~~~
  
class MurphyStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\native.py
-----------------------------
> """
      pygments.styles.native
      ~~~~~~~~~~~~~~~~~~~~~~
  
class NativeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\nord.py
-----------------------------
> """
      pygments.styles.nord
      ~~~~~~~~~~~~~~~~~~~~
  
class NordStyle(Style):
class NordDarkerStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\onedark.py
-----------------------------
> """
      pygments.styles.onedark
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class OneDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\paraiso_dark.py
-----------------------------
> """
      pygments.styles.paraiso_dark
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ParaisoDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\paraiso_light.py
-----------------------------
> """
      pygments.styles.paraiso_light
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class ParaisoLightStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\pastie.py
-----------------------------
> """
      pygments.styles.pastie
      ~~~~~~~~~~~~~~~~~~~~~~
  
class PastieStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\perldoc.py
-----------------------------
> """
      pygments.styles.perldoc
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class PerldocStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\rainbow_dash.py
-----------------------------
> """
      pygments.styles.rainbow_dash
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class RainbowDashStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\rrt.py
-----------------------------
> """
      pygments.styles.rrt
      ~~~~~~~~~~~~~~~~~~~
  
class RrtStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\sas.py
-----------------------------
> """
      pygments.styles.sas
      ~~~~~~~~~~~~~~~~~~~
  
class SasStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\solarized.py
-----------------------------
> """
      pygments.styles.solarized
      ~~~~~~~~~~~~~~~~~~~~~~~~~
  
def make_style(colors):
class SolarizedDarkStyle(Style):
class SolarizedLightStyle(SolarizedDarkStyle):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\staroffice.py
-----------------------------
> """
      pygments.styles.staroffice
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class StarofficeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\stata_dark.py
-----------------------------
> """
      pygments.styles.stata_dark
      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class StataDarkStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\stata_light.py
-----------------------------
> """
      pygments.styles.stata_light
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
class StataLightStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\tango.py
-----------------------------
> """
      pygments.styles.tango
      ~~~~~~~~~~~~~~~~~~~~~
  
class TangoStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\trac.py
-----------------------------
> """
      pygments.styles.trac
      ~~~~~~~~~~~~~~~~~~~~
  
class TracStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\vim.py
-----------------------------
> """
      pygments.styles.vim
      ~~~~~~~~~~~~~~~~~~~
  
class VimStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\vs.py
-----------------------------
> """
      pygments.styles.vs
      ~~~~~~~~~~~~~~~~~~
  
class VisualStudioStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\xcode.py
-----------------------------
> """
      pygments.styles.xcode
      ~~~~~~~~~~~~~~~~~~~~~
  
class XcodeStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\zenburn.py
-----------------------------
> """
      pygments.styles.zenburn
      ~~~~~~~~~~~~~~~~~~~~~~~
  
class ZenburnStyle(Style):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\_mapping.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\styles\__init__.py
-----------------------------
> """
      pygments.styles
      ~~~~~~~~~~~~~~~
  
def get_style_by_name(name):
def get_all_styles():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\cmdline.py
-----------------------------
> """
      pygments.cmdline
      ~~~~~~~~~~~~~~~~
  
def _parse_options(o_strs):
def _parse_filters(f_strs):
def _print_help(what, name):
def _print_list(what):
def _print_list_as_json(requested_items):
def main_inner(parser, argns):
class HelpFormatter(argparse.HelpFormatter):
def main(args=sys.argv):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\console.py
-----------------------------
> """
      pygments.console
      ~~~~~~~~~~~~~~~~
  
def reset_color():
def colorize(color_key, text):
def ansiformat(attr, text):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\filter.py
-----------------------------
> """
      pygments.filter
      ~~~~~~~~~~~~~~~
  
def apply_filters(stream, filters, lexer=None):
def simplefilter(f):
class Filter:
class FunctionFilter(Filter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\formatter.py
-----------------------------
> """
      pygments.formatter
      ~~~~~~~~~~~~~~~~~~
  
def _lookup_style(style):
class Formatter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\lexer.py
-----------------------------
> """
      pygments.lexer
      ~~~~~~~~~~~~~~
  
class LexerMeta(type):
class Lexer(metaclass=LexerMeta):
class DelegatingLexer(Lexer):
class include(str):  # pylint: disable=invalid-name
class _inherit:
class combined(tuple):  # pylint: disable=invalid-name
class _PseudoMatch:
def bygroups(*args):
class _This:
def using(_other, **kwargs):
class default:
class words(Future):
class RegexLexerMeta(LexerMeta):
class RegexLexer(Lexer, metaclass=RegexLexerMeta):
class LexerContext:
class ExtendedRegexLexer(RegexLexer):
def do_insertions(insertions, tokens):
class ProfilingRegexLexerMeta(RegexLexerMeta):
class ProfilingRegexLexer(RegexLexer, metaclass=ProfilingRegexLexerMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\modeline.py
-----------------------------
> """
      pygments.modeline
      ~~~~~~~~~~~~~~~~~
  
def get_filetype_from_line(l): # noqa: E741
def get_filetype_from_buffer(buf, max_lines=5):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\plugin.py
-----------------------------
> """
      pygments.plugin
      ~~~~~~~~~~~~~~~
  
def iter_entry_points(group_name):
def find_plugin_lexers():
def find_plugin_formatters():
def find_plugin_styles():
def find_plugin_filters():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\regexopt.py
-----------------------------
> """
      pygments.regexopt
      ~~~~~~~~~~~~~~~~~
  
def make_charset(letters):
def regex_opt_inner(strings, open_paren):
def regex_opt(strings, prefix='', suffix=''):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\scanner.py
-----------------------------
> """
      pygments.scanner
      ~~~~~~~~~~~~~~~~
  
class EndOfText(RuntimeError):
class Scanner:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\sphinxext.py
-----------------------------
> """
      pygments.sphinxext
      ~~~~~~~~~~~~~~~~~~
  
class PygmentsDoc(Directive):
def setup(app):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\style.py
-----------------------------
> """
      pygments.style
      ~~~~~~~~~~~~~~
  
class StyleMeta(type):
class Style(metaclass=StyleMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\token.py
-----------------------------
> """
      pygments.token
      ~~~~~~~~~~~~~~
  
class _TokenType(tuple):
def is_token_subtype(ttype, other):
def string_to_tokentype(s):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\unistring.py
-----------------------------
> """
      pygments.unistring
      ~~~~~~~~~~~~~~~~~~
  
def combine(*args):
def allexcept(*args):
def _handle_runs(char_list):  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\util.py
-----------------------------
> """
      pygments.util
      ~~~~~~~~~~~~~
  
class ClassNotFound(ValueError):
class OptionError(Exception):
def get_choice_opt(options, optname, allowed, default=None, normcase=False):
def get_bool_opt(options, optname, default=None):
def get_int_opt(options, optname, default=None):
def get_list_opt(options, optname, default=None):
def docstring_headline(obj):
def make_analysator(f):
def shebang_matches(text, regex):
def doctype_matches(text, regex):
def html_doctype_matches(text):
def looks_like_xml(text):
def surrogatepair(c):
def format_lines(var_name, seq, raw=False, indent_level=0):
def duplicates_removed(it, already_seen=()):
class Future:
def guess_decode(text):
def guess_decode_from_terminal(text, term):
def terminal_encoding(term):
class UnclosingTextIOWrapper(TextIOWrapper):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\__init__.py
-----------------------------
> """
      Pygments
      ~~~~~~~~
  
def lex(code, lexer):
def format(tokens, formatter, outfile=None):  # pylint: disable=redefined-builtin
def highlight(code, lexer, formatter, outfile=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pygments\__main__.py
-----------------------------
> """
      pygments.__main__
      ~~~~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest\__init__.py
-----------------------------
> """pytest: unit and functional testing with Python."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest\__main__.py
-----------------------------
> """The pytest entry point."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest_cov\compat.py
-----------------------------
class SessionWrapper:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest_cov\embed.py
-----------------------------
> """Activate coverage at python startup if appropriate.
  
  The python site initialisation will ensure that anything we import
  will be removed and not visible at the end of python startup.  However
def init():
def _cleanup(cov):
def cleanup():
def _signal_cleanup_handler(signum, frame):
def cleanup_on_signal(signum):
def cleanup_on_sigterm():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest_cov\engine.py
-----------------------------
> """Coverage controllers for use by pytest-cov and nose-cov."""
  
  import argparse
  import contextlib
class BrokenCovConfigError(Exception):
class _NullFile:
def _backup(obj, attr):
def _ensure_topdir(meth):
def _data_suffix(name):
class CovController:
class Central(CovController):
class DistMaster(CovController):
class DistWorker(CovController):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest_cov\plugin.py
-----------------------------
> """Coverage plugin for pytest."""
  
  import argparse
  import os
def validate_report(arg):
def validate_fail_under(num_str):
def validate_context(arg):
class StoreReport(argparse.Action):
def pytest_addoption(parser):
def _prepare_cov_source(cov_source):
def pytest_load_initial_conftests(early_config, parser, args):
class CovPlugin:
class TestContextPlugin:
def no_cover():
def cov(request):
def pytest_configure(config):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytest_cov\__init__.py
-----------------------------
> """pytest-cov: avoid already-imported warning: PYTEST_DONT_REWRITE."""
  
  __version__ = '6.2.1'
  
class CoverageError(Exception):
class PytestCovWarning(pytest.PytestWarning):
class CovDisabledWarning(PytestCovWarning):
class CovReportWarning(PytestCovWarning):
class CentralCovContextWarning(PytestCovWarning):
class DistCovError(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytz\exceptions.py
-----------------------------
class Error(Exception):
class UnknownTimeZoneError(KeyError, Error):
class InvalidTimeError(Error):
class AmbiguousTimeError(InvalidTimeError):
class NonExistentTimeError(InvalidTimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytz\lazy.py
-----------------------------
>     """Dictionary populated on first use."""
      data = None
  
      def __getitem__(self, key):
class LazyDict(DictMixin):
class LazyList(list):
class LazySet(set):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytz\reference.py
-----------------------------
>     """Fixed offset in minutes east from UTC."""
  
      def __init__(self, offset, name):
          self.__offset = timedelta(minutes=offset)
class FixedOffset(tzinfo):
class LocalTimezone(tzinfo):
def first_sunday_on_or_after(dt):
class USTimeZone(tzinfo):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytz\tzfile.py
-----------------------------
>     """Cast a string or byte string to an ASCII byte string."""
      return s.encode('ASCII')
  
  _NULL = _byte_string('\0')
def _byte_string(s):
def _std_string(s):
def build_tzinfo(zone, fp):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytz\tzinfo.py
-----------------------------
>     """Factory function for unpickling pytz tzinfo instances.
  
      This is shared for both StaticTzInfo and DstTzInfo instances, because
      database changes could cause a zones implementation to switch between
def memorized_timedelta(seconds):
def memorized_datetime(seconds):
def memorized_ttinfo(*args):
def _to_seconds(td):
class BaseTzInfo(tzinfo):
class StaticTzInfo(BaseTzInfo):
class DstTzInfo(BaseTzInfo):
def unpickler(zone, utcoffset=None, dstoffset=None, tzname=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\pytz\__init__.py
-----------------------------
>         r"""
          >>> ascii('Hello')
          'Hello'
          >>> ascii('\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
def open_resource(name):
def resource_exists(name):
def timezone(zone):
def _unmunge_zone(zone):
def _case_insensitive_zone_lookup(zone):
class UTC(BaseTzInfo):
def _UTC():
def _p(*args):
class _CountryTimezoneDict(LazyDict):
class _CountryNameDict(LazyDict):
class _FixedOffset(datetime.tzinfo):
def FixedOffset(offset, _tzinfos={}):
def _test():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\tests\test_core.py
-----------------------------
>     """
      A retriever suitable for use in tests which expect it never to be used.
def blow_up(uri):  # pragma: no cover
class TestRegistry:
class TestResource:
class TestResolver:
class TestSpecification:
class TestOpaqueSpecification:
def test_nonsubclassable(cls):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\tests\test_exceptions.py
-----------------------------
def pairs(choices):
def test_eq_incompatible_types(one, two):
def test_hash(thunk):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\tests\test_jsonschema.py
-----------------------------
>     """
      The $schema keyword in JSON Schema is a dialect identifier.
def test_schemas_with_explicit_schema_keywords_are_detected(uri, expected):
def test_unknown_dialect():
def test_id_of_mapping(id, specification):
def test_id_of_bool(specification, value):
def test_anchors_in_bool(specification, value):
def test_subresources_of_bool(specification, value):
def test_specification_with(uri, expected):
def test_specification_with_no_empty_fragment(uri, expected):
def test_specification_with_unknown_dialect():
def test_specification_with_default():
def test_lookup_trivial_dynamic_ref():
def test_multiple_lookup_trivial_dynamic_ref():
def test_multiple_lookup_dynamic_ref_to_nondynamic_ref():
def test_lookup_trivial_recursive_ref():
def test_lookup_recursive_ref_to_bool():
def test_multiple_lookup_recursive_ref_to_bool():
def test_multiple_lookup_recursive_ref_with_nonrecursive_ref():
def test_empty_registry():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\tests\test_referencing_suite.py
-----------------------------
class SuiteNotFound(Exception):
def test_referencing_suite(test_path, subtests):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\tests\test_retrieval.py
-----------------------------
class TestToCachedResource:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\exceptions.py
-----------------------------
> """
  Errors, oh no!
class NoSuchResource(KeyError):
class NoInternalID(Exception):
class Unretrievable(KeyError):
class CannotDetermineSpecification(Exception):
class Unresolvable(Exception):
class PointerToNowhere(Unresolvable):
class NoSuchAnchor(Unresolvable):
class InvalidAnchor(Unresolvable):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\jsonschema.py
-----------------------------
> """
  Referencing implementations for JSON Schema specs (historic & current).
class UnknownDialect(Exception):
def _dollar_id(contents: Schema) -> URI | None:
def _legacy_dollar_id(contents: Schema) -> URI | None:
def _legacy_id(contents: ObjectSchema) -> URI | None:
def _anchor(
def _anchor_2019(
def _legacy_anchor_in_dollar_id(
def _legacy_anchor_in_id(
def _subresources_of(
def _subresources_of_with_crazy_items(
def _subresources_of_with_crazy_items_dependencies(
def _subresources_of_with_crazy_aP_items_dependencies(
def _maybe_in_subresource(
def _maybe_in_subresource_crazy_items(
def _maybe_in_subresource_crazy_items_dependencies(
def specification_with(
class DynamicAnchor:
def lookup_recursive_ref(resolver: _Resolver[Schema]) -> _Resolved[Schema]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\retrieval.py
-----------------------------
> """
  Helpers related to (dynamic) resource retrieval.
def to_cached_resource(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\typing.py
-----------------------------
> """
  Type-annotation related support for the referencing library.
class Retrieve(Protocol[D]):
class Anchor(Protocol[D]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\_attrs.py
-----------------------------
def define(cls: type[_T]) -> type[_T]:  # pragma: no cover
def frozen(cls: type[_T]) -> type[_T]:
class UnsupportedSubclassing(Exception):
def _do_not_subclass() -> NoReturn:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\_core.py
-----------------------------
>     """
      What sillyness...
class _Unset(Enum):
class _MaybeInSubresource(Protocol[D]):
def _detect_or_error(contents: D) -> Specification[D]:
def _detect_or_default(
class _SpecificationDetector:
class Specification(Generic[D]):
class Resource(Generic[D]):
def _fail_to_retrieve(uri: URI):
class Registry(Mapping[URI, Resource[D]]):
class Retrieved(Generic[D, AnchorOrResource]):
class Resolved(Generic[D]):
class Resolver(Generic[D]):
class Anchor(Generic[D]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\referencing\__init__.py
-----------------------------
> """
  Cross-specification, implementation-agnostic JSON referencing.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\adapters.py
-----------------------------
> """
  requests.adapters
  ~~~~~~~~~~~~~~~~~
  
def _urllib3_request_context(
class BaseAdapter:
class HTTPAdapter(BaseAdapter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\api.py
-----------------------------
> """
  requests.api
  ~~~~~~~~~~~~
  
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\auth.py
-----------------------------
> """
  requests.auth
  ~~~~~~~~~~~~~
  
def _basic_auth_str(username, password):
class AuthBase:
class HTTPBasicAuth(AuthBase):
class HTTPProxyAuth(HTTPBasicAuth):
class HTTPDigestAuth(AuthBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\certs.py
-----------------------------
> """
  requests.certs
  ~~~~~~~~~~~~~~
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\compat.py
-----------------------------
> """
  requests.compat
  ~~~~~~~~~~~~~~~
  
def _resolve_char_detection():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\cookies.py
-----------------------------
> """
  requests.cookies
  ~~~~~~~~~~~~~~~~
  
class MockRequest:
class MockResponse:
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
class CookieConflictError(RuntimeError):
class RequestsCookieJar(cookielib.CookieJar, MutableMapping):
def _copy_cookie_jar(jar):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\exceptions.py
-----------------------------
> """
  requests.exceptions
  ~~~~~~~~~~~~~~~~~~~
  
class RequestException(IOError):
class InvalidJSONError(RequestException):
class JSONDecodeError(InvalidJSONError, CompatJSONDecodeError):
class HTTPError(RequestException):
class ConnectionError(RequestException):
class ProxyError(ConnectionError):
class SSLError(ConnectionError):
class Timeout(RequestException):
class ConnectTimeout(ConnectionError, Timeout):
class ReadTimeout(Timeout):
class URLRequired(RequestException):
class TooManyRedirects(RequestException):
class MissingSchema(RequestException, ValueError):
class InvalidSchema(RequestException, ValueError):
class InvalidURL(RequestException, ValueError):
class InvalidHeader(RequestException, ValueError):
class InvalidProxyURL(InvalidURL):
class ChunkedEncodingError(RequestException):
class ContentDecodingError(RequestException, BaseHTTPError):
class StreamConsumedError(RequestException, TypeError):
class RetryError(RequestException):
class UnrewindableBodyError(RequestException):
class RequestsWarning(Warning):
class FileModeWarning(RequestsWarning, DeprecationWarning):
class RequestsDependencyWarning(RequestsWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\help.py
-----------------------------
> """Module containing bug report helper(s)."""
  
  import json
  import platform
def _implementation():
def info():
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\hooks.py
-----------------------------
> """
  requests.hooks
  ~~~~~~~~~~~~~~
  
def default_hooks():
def dispatch_hook(key, hooks, hook_data, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\models.py
-----------------------------
> """
  requests.models
  ~~~~~~~~~~~~~~~
  
class RequestEncodingMixin:
class RequestHooksMixin:
class Request(RequestHooksMixin):
class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
class Response:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\packages.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\sessions.py
-----------------------------
> """
  requests.sessions
  ~~~~~~~~~~~~~~~~~
  
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
class SessionRedirectMixin:
class Session(SessionRedirectMixin):
def session():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\status_codes.py
-----------------------------
> r"""
  The ``codes`` object defines a mapping from common names for HTTP statuses
  to their numerical codes, accessible either as attributes or as dictionary
  items.
def _init():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\structures.py
-----------------------------
> """
  requests.structures
  ~~~~~~~~~~~~~~~~~~~
  
class CaseInsensitiveDict(MutableMapping):
class LookupDict(dict):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\utils.py
-----------------------------
> """
  requests.utils
  ~~~~~~~~~~~~~~
  
def dict_to_sequence(d):
def super_len(o):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def extract_zipped_paths(path):
def atomic_open(filename):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def _parse_content_type_header(header):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_ipv4_address(string_ip):
def is_valid_cidr(string_network):
def set_environ(env_name, value):
def should_bypass_proxies(url, no_proxy):
def get_environ_proxies(url, no_proxy=None):
def select_proxy(url, proxies):
def resolve_proxies(request, proxies, trust_env=True):
def default_user_agent(name="python-requests"):
def default_headers():
def parse_header_links(value):
def guess_json_utf(data):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def check_header_validity(header):
def _validate_header_part(header, header_part, header_validator_index):
def urldefragauth(url):
def rewind_body(prepared_request):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\_internal_utils.py
-----------------------------
> """
  requests._internal_utils
  ~~~~~~~~~~~~~~
  
def to_native_string(string, encoding="ascii"):
def unicode_is_ascii(u_string):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\__init__.py
-----------------------------
> """
  Requests HTTP Library
  ~~~~~~~~~~~~~~~~~~~~~
  
def check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):
def _check_cryptography(cryptography_version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\requests\__version__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\abc.py
-----------------------------
>     """An abstract base class for Rich renderables.
  
      Note that there is no need to extend this class, the intended use is to check if an
      object supports the Rich renderable protocol. For example::
class RichRenderable(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\align.py
-----------------------------
>     """Align a renderable by adding spaces if necessary.
  
      Args:
          renderable (RenderableType): A console renderable.
class Align(JupyterMixin):
class VerticalCenter(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\ansi.py
-----------------------------
>     r"""
  (?:\x1b[0-?])|
  (?:\x1b\](.*?)\x1b\\)|
  (?:\x1b([(@-Z\\-_]|\[[0-?]*[ -/]*[@-~]))
class _AnsiToken(NamedTuple):
def _ansi_tokenize(ansi_text: str) -> Iterable[_AnsiToken]:
class AnsiDecoder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\bar.py
-----------------------------
>     """Renders a solid block bar.
  
      Args:
          size (float): Value for the end of the bar.
class Bar(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\box.py
-----------------------------
>     """Defines characters to render boxes.
  
      â”Œâ”€â”¬â” top
      â”‚ â”‚â”‚ head
class Box:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\cells.py
-----------------------------
>     """Get the number of cells required to display text.
  
      This method always caches, which may use up a lot of memory. It is recommended to use
      `cell_len` over this method.
def cached_cell_len(text: str) -> int:
def cell_len(text: str, _cell_len: Callable[[str], int] = cached_cell_len) -> int:
def get_character_cell_size(character: str) -> int:
def set_cell_size(text: str, total: int) -> str:
def chop_cells(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\color.py
-----------------------------
>     """One of the 3 color system supported by terminals."""
  
      STANDARD = 1
      EIGHT_BIT = 2
class ColorSystem(IntEnum):
class ColorType(IntEnum):
class ColorParseError(Exception):
class Color(NamedTuple):
def parse_rgb_hex(hex_color: str) -> ColorTriplet:
def blend_rgb(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\color_triplet.py
-----------------------------
>     """The red, green, and blue components of a color."""
  
      red: int
class ColorTriplet(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\columns.py
-----------------------------
>     """Display renderables in neat columns.
  
      Args:
          renderables (Iterable[RenderableType]): Any number of Rich renderables (including 
str).
class Columns(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\console.py
-----------------------------
>     """Size of the terminal."""
  
      width: int
class NoChange:
class ConsoleDimensions(NamedTuple):
class ConsoleOptions:
class RichCast(Protocol):
class ConsoleRenderable(Protocol):
class CaptureError(Exception):
class NewLine:
class ScreenUpdate:
class Capture:
class ThemeContext:
class PagerContext:
class ScreenContext:
class Group:
def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:
def _is_jupyter() -> bool:  # pragma: no cover
class ConsoleThreadLocals(threading.local):
class RenderHook(ABC):
def get_windows_console_features() -> "WindowsConsoleFeatures":  # pragma: no cover
def detect_legacy_windows() -> bool:
class Console:
def _svg_hash(svg_main_code: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\constrain.py
-----------------------------
>     """Constrain the width of a renderable to a given number of characters.
  
      Args:
          renderable (RenderableType): A renderable object.
class Constrain(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\containers.py
-----------------------------
>     """A list subclass which renders its contents to the console."""
  
      def __init__(
          self, renderables: Optional[Iterable["RenderableType"]] = None
class Renderables:
class Lines:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\control.py
-----------------------------
>     """A renderable that inserts a control code (non printable but may move cursor).
  
      Args:
          *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` 
enum or a
class Control:
def strip_control_codes(
def escape_control_codes(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\default_styles.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\diagnose.py
-----------------------------
>     """Print a report to the terminal with debugging information"""
      console = Console()
      inspect(console)
      features = get_windows_console_features()
def report() -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\emoji.py
-----------------------------
>     """No emoji by that name."""
  
  
  class Emoji(JupyterMixin):
class NoEmoji(Exception):
class Emoji(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\errors.py
-----------------------------
>     """An error in console operation."""
  
  
  class StyleError(Exception):
class ConsoleError(Exception):
class StyleError(Exception):
class StyleSyntaxError(ConsoleError):
class MissingStyle(StyleError):
class StyleStackError(ConsoleError):
class NotRenderableError(ConsoleError):
class MarkupError(ConsoleError):
class LiveError(ConsoleError):
class NoAltScreen(ConsoleError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\filesize.py
-----------------------------
> """Functions for reporting filesizes. Borrowed from 
https://github.com/PyFilesystem/pyfilesystem2
  
  The functions declared in this module should cover the different
  use cases needed to generate a string representation of a file size
def _to_str(
def pick_unit_and_suffix(size: int, suffixes: List[str], base: int) -> Tuple[int, str]:
def decimal(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\file_proxy.py
-----------------------------
>     """Wraps a file (e.g. sys.stdout) and redirects writes to a console."""
  
      def __init__(self, console: "Console", file: IO[str]) -> None:
          self.__console = console
class FileProxy(io.TextIOBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\highlighter.py
-----------------------------
>     """Combine a number of regexes in to a single regex.
  
      Returns:
          str: New regex with all regexes ORed together.
def _combine_regex(*regexes: str) -> str:
class Highlighter(ABC):
class NullHighlighter(Highlighter):
class RegexHighlighter(Highlighter):
class ReprHighlighter(RegexHighlighter):
class JSONHighlighter(RegexHighlighter):
class ISO8601Highlighter(RegexHighlighter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\json.py
-----------------------------
>     """A renderable which pretty prints JSON.
  
      Args:
          json (str): JSON encoded data.
class JSON:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\jupyter.py
-----------------------------
> JUPYTER_HTML_FORMAT = """\
  <pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu 
Sans Mono',consolas,'Courier New',monospace">{code}</pre>
class JupyterRenderable:
class JupyterMixin:
def _render_segments(segments: Iterable[Segment]) -> str:
def display(segments: Iterable[Segment], text: str) -> None:
def print(*args: Any, **kwargs: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\layout.py
-----------------------------
>     """An individual layout render."""
  
      region: Region
      render: List[List[Segment]]
class LayoutRender(NamedTuple):
class LayoutError(Exception):
class NoSplitter(LayoutError):
class _Placeholder:
class Splitter(ABC):
class RowSplitter(Splitter):
class ColumnSplitter(Splitter):
class Layout:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\live.py
-----------------------------
>     """A thread that calls refresh() at regular intervals."""
  
      def __init__(self, live: "Live", refresh_per_second: float) -> None:
          self.live = live
class _RefreshThread(Thread):
class Live(JupyterMixin, RenderHook):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\live_render.py
-----------------------------
>     """Creates a renderable that may be updated.
  
      Args:
          renderable (RenderableType): Any renderable object.
class LiveRender:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\logging.py
-----------------------------
>     """A logging handler that renders output with Rich. The time / level / message and file 
are displayed in columns.
      The level is color coded, and the message is syntax highlighted.
  
      Note:
class RichHandler(Handler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\markdown.py
-----------------------------
>         """Factory to create markdown element,
  
          Args:
              markdown (Markdown): The parent Markdown object.
class MarkdownElement:
class UnknownElement(MarkdownElement):
class TextElement(MarkdownElement):
class Paragraph(TextElement):
class Heading(TextElement):
class CodeBlock(TextElement):
class BlockQuote(TextElement):
class HorizontalRule(MarkdownElement):
class TableElement(MarkdownElement):
class TableHeaderElement(MarkdownElement):
class TableBodyElement(MarkdownElement):
class TableRowElement(MarkdownElement):
class TableDataElement(MarkdownElement):
class ListElement(MarkdownElement):
class ListItem(TextElement):
class Link(TextElement):
class ImageItem(TextElement):
class MarkdownContext:
class Markdown(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\markup.py
-----------------------------
>     r"""((\\*)\[([a-z#/@][^[]*?)])""",
      re.VERBOSE,
  )
  
class Tag(NamedTuple):
def escape(
def _parse(markup: str) -> Iterable[Tuple[int, Optional[str], Optional[Tag]]]:
def render(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\measure.py
-----------------------------
>     """Stores the minimum and maximum widths (in characters) required to render an 
object."""
  
      minimum: int
class Measurement(NamedTuple):
def measure_renderables(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\padding.py
-----------------------------
>     """Draw space around content.
  
      Example:
          >>> print(Padding("Hello", (2, 4), style="on blue"))
class Padding(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\pager.py
-----------------------------
>     """Base class for a pager."""
  
      @abstractmethod
      def show(self, content: str) -> None:
class Pager(ABC):
class SystemPager(Pager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\palette.py
-----------------------------
>     """A palette of available colors."""
  
      def __init__(self, colors: Sequence[Tuple[int, int, int]]):
          self._colors = colors
class Palette:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\panel.py
-----------------------------
>     """A console renderable that draws a border around its contents.
  
      Example:
          >>> console.print(Panel("Hello, World!"))
class Panel(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\pretty.py
-----------------------------
>     """Check if an object was created with attrs module."""
      return _has_attrs and _attr_module.has(type(obj))
  
  
def _is_attr_object(obj: Any) -> bool:
def _get_attr_fields(obj: Any) -> Sequence["_attr_module.Attribute[Any]"]:
def _is_dataclass_repr(obj: object) -> bool:
def _has_default_namedtuple_repr(obj: object) -> bool:
def _ipy_display_hook(
def _safe_isinstance(
def install(
class Pretty(JupyterMixin):
def _get_braces_for_defaultdict(_object: DefaultDict[Any, Any]) -> Tuple[str, str, str]:
def _get_braces_for_deque(_object: Deque[Any]) -> Tuple[str, str, str]:
def _get_braces_for_array(_object: "array[Any]") -> Tuple[str, str, str]:
def is_expandable(obj: Any) -> bool:
class Node:
class _Line:
def _is_namedtuple(obj: Any) -> bool:
def traverse(
def pretty_repr(
def pprint(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\progress.py
-----------------------------
>     """A thread to periodically update progress."""
  
      def __init__(self, progress: "Progress", task_id: "TaskID", update_period: float):
          self.progress = progress
class _TrackThread(Thread):
def track(
class _Reader(RawIOBase, BinaryIO):
class _ReadContext(ContextManager[_I], Generic[_I]):
def wrap_file(
def open(
def open(
def open(
class ProgressColumn(ABC):
class RenderableColumn(ProgressColumn):
class SpinnerColumn(ProgressColumn):
class TextColumn(ProgressColumn):
class BarColumn(ProgressColumn):
class TimeElapsedColumn(ProgressColumn):
class TaskProgressColumn(TextColumn):
class TimeRemainingColumn(ProgressColumn):
class FileSizeColumn(ProgressColumn):
class TotalFileSizeColumn(ProgressColumn):
class MofNCompleteColumn(ProgressColumn):
class DownloadColumn(ProgressColumn):
class TransferSpeedColumn(ProgressColumn):
class ProgressSample(NamedTuple):
class Task:
class Progress(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\progress_bar.py
-----------------------------
>     """Renders a (progress) bar. Used by rich.progress.
  
      Args:
          total (float, optional): Number of steps in the bar. Defaults to 100. Set to None 
to render a pulsing animation.
class ProgressBar(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\prompt.py
-----------------------------
>     """Exception base class for prompt related errors."""
  
  
  class InvalidResponse(PromptError):
class PromptError(Exception):
class InvalidResponse(PromptError):
class PromptBase(Generic[PromptType]):
class Prompt(PromptBase[str]):
class IntPrompt(PromptBase[int]):
class FloatPrompt(PromptBase[float]):
class Confirm(PromptBase[bool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\protocol.py
-----------------------------
> _GIBBERISH = """aihwerij235234ljsdnp34ksodfipwoe234234jlskjdf"""
  
  
  def is_renderable(check_object: Any) -> bool:
def is_renderable(check_object: Any) -> bool:
def rich_cast(renderable: object) -> "RenderableType":

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\region.py
-----------------------------
>     """Defines a rectangular region of the screen."""
  
      x: int
      y: int
class Region(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\repr.py
-----------------------------
>     """An error occurred when attempting to build a repr."""
  
  
  @overload
class ReprError(Exception):
def auto(cls: Optional[Type[T]]) -> Type[T]:
def auto(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
def auto(
def rich_repr(cls: Optional[Type[T]]) -> Type[T]:
def rich_repr(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
def rich_repr(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\rule.py
-----------------------------
>     """A console renderable to draw a horizontal rule (line).
  
      Args:
          title (Union[str, Text], optional): Text to render in the rule. Defaults to "".
class Rule(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\scope.py
-----------------------------
>     """Render python variables in a given scope.
  
      Args:
          scope (Mapping): A mapping containing variable names and values.
def render_scope(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\screen.py
-----------------------------
>     """A renderable that fills the terminal screen and crops excess.
  
      Args:
          renderable (RenderableType): Child renderable.
class Screen:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\segment.py
-----------------------------
>     """Non-printable control codes which typically translate to ANSI codes."""
  
      BELL = 1
      CARRIAGE_RETURN = 2
class ControlType(IntEnum):
class Segment(NamedTuple):
class Segments:
class SegmentLines:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\spinner.py
-----------------------------
>     """A spinner animation.
  
      Args:
          name (str): Name of spinner (run python -m rich.spinner).
class Spinner:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\status.py
-----------------------------
>     """Displays a status indicator with a 'spinner' animation.
  
      Args:
          status (RenderableType): A status renderable (str or Text typically).
class Status(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\style.py
-----------------------------
>     """A descriptor to get/set a style attribute bit."""
  
      __slots__ = ["bit"]
  
class _Bit:
class Style:
class StyleStack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\styled.py
-----------------------------
>     """Apply a style to a renderable.
  
      Args:
          renderable (RenderableType): Any renderable.
class Styled:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\syntax.py
-----------------------------
>     """Base class for a syntax theme."""
  
      @abstractmethod
      def get_style_for_token(self, token_type: TokenType) -> Style:
class SyntaxTheme(ABC):
class PygmentsSyntaxTheme(SyntaxTheme):
class ANSISyntaxTheme(SyntaxTheme):
class _SyntaxHighlightRange(NamedTuple):
class PaddingProperty:
class Syntax(JupyterMixin):
def _get_code_index_for_syntax_position(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\table.py
-----------------------------
>     """Defines a column within a ~Table.
  
      Args:
          title (Union[str, Text], optional): The title of the table rendered at the top. 
Defaults to None.
class Column:
class Row:
class _Cell(NamedTuple):
class Table(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\terminal_theme.py
-----------------------------
>     """A color theme used when exporting console content.
  
      Args:
          background (Tuple[int, int, int]): The background color.
class TerminalTheme:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\text.py
-----------------------------
> """A plain string or a :class:`Text` instance."""
  
  GetStyleCallable = Callable[[str], Optional[StyleType]]
  
class Span(NamedTuple):
class Text(JupyterMixin):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\theme.py
-----------------------------
>     """A container for style information, used by :class:`~rich.console.Console`.
  
      Args:
          styles (Dict[str, Style], optional): A mapping of style names on to styles. 
Defaults to None for a theme with no styles.
class Theme:
class ThemeStackError(Exception):
class ThemeStack:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\themes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\traceback.py
-----------------------------
>     """Yield start and end positions per line.
  
      Args:
          start: Start position.
def _iter_syntax_lines(
def install(
class Frame:
class _SyntaxError:
class Stack:
class Trace:
class PathHighlighter(RegexHighlighter):
class Traceback:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\tree.py
-----------------------------
>     """A renderable for a tree structure.
  
      Attributes:
          ASCII_GUIDES (GuideType): Guide lines used when Console.ascii_only is True.
class Tree(JupyterMixin):
class Segment(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_cell_widths.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_emoji_codes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_emoji_replace.py
-----------------------------
>     """Replace emoji code in text."""
      get_emoji = EMOJI.__getitem__
      variants = {"text": "\uFE0E", "emoji": "\uFE0F"}
      get_variant = variants.get
def _emoji_replace(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_export_format.py
-----------------------------
> CONSOLE_HTML_FORMAT = """\
  <!DOCTYPE html>
  <html>
  <head>

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_extension.py
-----------------------------
def load_ipython_extension(ip: Any) -> None:  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_fileno.py
-----------------------------
>     """Get fileno() from a file, accounting for poorly implemented file-like objects.
  
      Args:
          file_like (IO): A file-like object.
def get_fileno(file_like: IO[str]) -> int | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_inspect.py
-----------------------------
>     """Get the first paragraph from a docstring."""
      paragraph, _, _ = doc.partition("\n\n")
      return paragraph
  
def _first_paragraph(doc: str) -> str:
class Inspect(JupyterMixin):
def get_object_types_mro(obj: Union[object, Type[Any]]) -> Tuple[type, ...]:
def get_object_types_mro_as_strings(obj: object) -> Collection[str]:
def is_object_one_of_types(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_log_render.py
-----------------------------
class LogRender:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_loop.py
-----------------------------
>     """Iterate and generate a tuple with a flag for first value."""
      iter_values = iter(values)
      try:
          value = next(iter_values)
def loop_first(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
def loop_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_null_file.py
-----------------------------
class NullFile(IO[str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_palettes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_pick.py
-----------------------------
>     """Pick the first non-none bool or return the last value.
  
      Args:
          *values (bool): Any number of boolean or None values.
def pick_bool(*values: Optional[bool]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_ratio.py
-----------------------------
>     """Any object that defines an edge (such as Layout)."""
  
      size: Optional[int] = None
      ratio: int = 1
class Edge(Protocol):
def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:
def ratio_reduce(
def ratio_distribute(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_spinners.py
-----------------------------
> """
  Spinners are from:
  * cli-spinners:
      MIT License

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_stack.py
-----------------------------
>     """A small shim over builtin list."""
  
      @property
      def top(self) -> T:
class Stack(List[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_timer.py
-----------------------------
> """
  Timer context manager, only used in debug.
  
def timer(subject: str = "time") -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_win32_console.py
-----------------------------
> """Light wrapper around the Win32 Console API - this module should only be imported on 
Windows
  
  The API that this module wraps is documented at 
https://docs.microsoft.com/en-us/windows/console/console-functions
class LegacyWindowsError(Exception):
class WindowsCoordinates(NamedTuple):
class CONSOLE_SCREEN_BUFFER_INFO(Structure):
class CONSOLE_CURSOR_INFO(ctypes.Structure):
def GetStdHandle(handle: int = STDOUT) -> wintypes.HANDLE:
def GetConsoleMode(std_handle: wintypes.HANDLE) -> int:
def FillConsoleOutputCharacter(
def FillConsoleOutputAttribute(
def SetConsoleTextAttribute(
def GetConsoleScreenBufferInfo(
def SetConsoleCursorPosition(
def GetConsoleCursorInfo(
def SetConsoleCursorInfo(
def SetConsoleTitle(title: str) -> bool:
class LegacyWindowsTerm:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_windows.py
-----------------------------
>     """Windows features available."""
  
      vt: bool = False
class WindowsConsoleFeatures:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_windows_renderer.py
-----------------------------
>     """Makes appropriate Windows Console API calls based on the segments in the buffer.
  
      Args:
          buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.
def legacy_windows_render(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\_wrap.py
-----------------------------
>     """Yields each word from the text as a tuple
      containing (start_index, end_index, word). A "word" in this context may
      include the actual word and any whitespace to the right.
def words(text: str) -> Iterable[tuple[int, int, str]]:
def divide_line(text: str, width: int, fold: bool = True) -> list[int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\__init__.py
-----------------------------
> """Rich text and beautiful formatting in the terminal."""
  
  import os
  from typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union
def get_console() -> "Console":
def reconfigure(*args: Any, **kwargs: Any) -> None:
def print(
def print_json(
def inspect(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rich\__main__.py
-----------------------------
>     """Get a renderable that demonstrates a number of features."""
      table = Table.grid(padding=1, pad_edge=True)
      table.title = "Rich features"
      table.add_column("Feature", no_wrap=True, justify="center", style="bold red")
class ColorBox:
def make_test_card() -> Table:
def iter_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\rpds\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\ruff\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\ruff\__main__.py
-----------------------------
>     """Return the ruff binary path."""
  
      ruff_exe = "ruff" + sysconfig.get_config_var("EXE")
  
def find_ruff_bin() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setproctitle\__init__.py
-----------------------------
> """Allow customization of the process title."""
  
  import os
  import sys
def setproctitle(title: str) -> None:
def getproctitle() -> str:
def setthreadtitle(title: str) -> None:
def getthreadtitle() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\alias.py
-----------------------------
>     """Quote an argument for later parsing by shlex.split()"""
      for c in '"', "'", "\\", "#":
          if c in arg:
              return repr(arg)
def shquote(arg):
class alias(option_base):
def format_alias(name, aliases):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\bdist_egg.py
-----------------------------
> """setuptools.command.bdist_egg
  
def _get_purelib():
def strip_module(filename):
def sorted_walk(dir):
def write_stub(resource, pyfile):
class bdist_egg(Command):
def walk_egg(egg_dir):
def analyze_egg(egg_dir, stubs):
def write_safety_flag(egg_dir, safe):
def scan_module(egg_dir, base, name, stubs):
def iter_symbols(code):
def can_scan():
def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=True,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\bdist_rpm.py
-----------------------------
>     """
      Override the default bdist_rpm behavior to do the following:
  
      1. Run egg_info to ensure the name and version are properly calculated.
class bdist_rpm(orig.bdist_rpm):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\build.py
-----------------------------
>             msg = """
              It seems that you are using `distutils.command.build` to add
              new subcommands. Using `distutils` directly is considered deprecated,
              please use `setuptools.command.build`.
class build(_build):
class SubCommand(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\build_clib.py
-----------------------------
>     """
      Override the default build_clib behaviour to do the following:
  
      1. Implement a rudimentary timestamp-based dependency system
class build_clib(orig.build_clib):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\build_ext.py
-----------------------------
>     """Return the file extension for an abi3-compliant Extension()"""
      for suffix in EXTENSION_SUFFIXES:
          if '.abi3' in suffix:  # Unix
              return suffix
def _customize_compiler_for_shlib(compiler):
def if_dl(s):
def get_abi3_suffix():
class build_ext(_build_ext):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\build_py.py
-----------------------------
>     """Enhanced 'build_py' command that includes data files with packages
  
      The data files are specified via a 'package_data' argument to 'setup()'.
      See 'setuptools.dist.Distribution' for more details.
def make_writable(target):
class build_py(orig.build_py):
def assert_relative(path):
class _IncludePackageDataAbuse:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\develop.py
-----------------------------
>     """Set up package for development"""
  
      description = "install package in 'development mode'"
  
class develop(namespaces.DevelopInstaller, easy_install):
class VersionlessRequirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\dist_info.py
-----------------------------
> """
  Create a dist_info directory
  As defined in the wheel specification
class dist_info(Command):
def _safe(component: str) -> str:
def _version(version: str) -> str:
def _rm(dir_name, **opts):
def _copy(src, dst, **opts):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\easy_install.py
-----------------------------
> """
  Easy Install
  ------------
  
def is_64bit():
def _to_bytes(s):
def isascii(s):
def _one_liner(text):
class easy_install(Command):
def _pythonpath():
def get_site_dirs():
def expand_paths(inputs):  # noqa: C901  # is too complex (11)  # FIXME
def extract_wininst_cfg(dist_filename):
def get_exe_prefixes(exe_filename):
class PthDistributions(Environment):
class RewritePthDistributions(PthDistributions):
def _first_line_re():
def auto_chmod(func, arg, exc):
def update_dist_caches(dist_path, fix_zipimporter_caches):
def _collect_zipimporter_cache_entries(normalized_path, cache):
def _update_zipimporter_cache(normalized_path, cache, updater=None):
def _uncache(normalized_path, cache):
def _remove_and_clear_zip_directory_cache_data(normalized_path):
def is_python(text, filename='<string>'):
def is_sh(executable):
def nt_quote_arg(arg):
def is_python_script(script_text, filename):
def chmod(path, mode):
class CommandSpec(list):
class WindowsCommandSpec(CommandSpec):
class ScriptWriter:
class WindowsScriptWriter(ScriptWriter):
class WindowsExecutableLauncherWriter(WindowsScriptWriter):
def get_win_launcher(type):
def load_launcher_manifest(name):
def rmtree(path, ignore_errors=False, onerror=auto_chmod):
def current_umask():
def only_strs(values):
class EasyInstallDeprecationWarning(SetuptoolsDeprecationWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\editable_wheel.py
-----------------------------
> """
  Create a wheel that, when installed, will make the source package 'editable'
  (add it to the interpreter's path, including metadata) per PEP 660. Replaces
  'setup.py develop'.
class _EditableMode(Enum):
class editable_wheel(Command):
class EditableStrategy(Protocol):
class _StaticPth:
class _LinkTree(_StaticPth):
class _TopLevelFinder:
def _can_symlink_files(base_dir: Path) -> bool:
def _simple_layout(
def _parent_path(pkg, pkg_path):
def _find_packages(dist: Distribution) -> Iterator[str]:
def _find_top_level_modules(dist: Distribution) -> Iterator[str]:
def _find_package_roots(
def _absolute_root(path: _Path) -> str:
def _find_virtual_namespaces(pkg_roots: Dict[str, str]) -> Iterator[str]:
def _find_namespaces(
def _remove_nested(pkg_roots: Dict[str, str]) -> Dict[str, str]:
def _is_nested(pkg: str, pkg_path: str, parent: str, parent_path: str) -> bool:
def _normalize_path(filename: _Path) -> str:
def _empty_dir(dir_: _P) -> _P:
def _make_identifier(name: str) -> str:
class _NamespaceInstaller(namespaces.Installer):
class _EditableFinder:  # MetaPathFinder
class _EditableNamespaceFinder:  # PathEntryFinder
def install():
def _finder_template(
class InformationOnly(UserWarning):
class LinksNotSupported(errors.FileError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\egg_info.py
-----------------------------
> """setuptools.command.egg_info
  
def translate_pattern(glob):  # noqa: C901  # is too complex (14)  # FIXME
class InfoCommon:
class egg_info(InfoCommon, Command):
class FileList(_FileList):
class manifest_maker(sdist):
def write_file(filename, contents):
def write_pkg_info(cmd, basename, filename):
def warn_depends_obsolete(cmd, basename, filename):
def _write_requirements(stream, reqs):
def write_requirements(cmd, basename, filename):
def write_setup_requirements(cmd, basename, filename):
def write_toplevel_names(cmd, basename, filename):
def overwrite_arg(cmd, basename, filename):
def write_arg(cmd, basename, filename, force=False):
def write_entries(cmd, basename, filename):
def get_pkg_info_revision():
class EggInfoDeprecationWarning(SetuptoolsDeprecationWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\install.py
-----------------------------
>     """Use easy_install to install the package, w/dependencies"""
  
      user_options = orig.install.user_options + [
          ('old-and-unmanageable', None, "Try not to use this!"),
class install(orig.install):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\install_egg_info.py
-----------------------------
>     """Install an .egg-info directory for the package"""
  
      description = "Install an .egg-info directory for the package"
  
class install_egg_info(namespaces.Installer, Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\install_lib.py
-----------------------------
>     """Don't add compiled flags to filenames of non-Python files"""
  
      def run(self):
          self.build()
class install_lib(orig.install_lib):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\install_scripts.py
-----------------------------
>     """Do normal script install, plus any egg_info wrapper scripts"""
  
      def initialize_options(self):
          orig.install_scripts.initialize_options(self)
class install_scripts(orig.install_scripts):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\py36compat.py
-----------------------------
>     """
      Mix-in providing forward-compatibility for functionality as found in
      distutils on Python 3.7.
  
class sdist_add_defaults:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\register.py
-----------------------------
>     """Formerly used to register packages on PyPI."""
  
      def run(self):
          msg = (
class register(orig.register):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\rotate.py
-----------------------------
>     """Delete older distributions"""
  
      description = "delete older distributions, keeping N newest files"
      user_options = [
class rotate(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\saveopts.py
-----------------------------
>     """Save command-line options to a file"""
  
      description = "save supplied options to setup.cfg or other config file"
  
class saveopts(option_base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\sdist.py
-----------------------------
>     """Find all files under revision control"""
      for ep in metadata.entry_points(group='setuptools.file_finders'):
          for item in ep.load()(dirname):
              yield item
def walk_revctrl(dirname=''):
class sdist(sdist_add_defaults, orig.sdist):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\setopt.py
-----------------------------
>     """Get the filename of the distutils, local, global, or per-user config
  
      `kind` must be one of "local", "global", or "user"
def config_file(kind="local"):
def edit_config(filename, settings, dry_run=False):
class option_base(Command):
class setopt(option_base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\test.py
-----------------------------
>         """Return a suite of all tests cases contained in the given module
  
          If the module is a package, load tests from all the modules in it.
          If the module has an ``additional_tests`` function, call it and add
class ScanningLoader(TestLoader):
class NonDataProperty:
class test(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\upload.py
-----------------------------
>     """Formerly used to upload packages to PyPI."""
  
      def run(self):
          msg = (
class upload(orig.upload):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\upload_docs.py
-----------------------------
> """upload_docs
  
  Implements a Distutils 'upload_docs' subcommand (upload documentation to
  sites other than PyPi such as devpi).
def _encode(s):
class upload_docs(upload):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\command\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\error_reporting.py
-----------------------------
>     """Report violations of a given JSON schema.
  
      This class extends :exc:`~fastjsonschema.JsonSchemaValueException`
      by adding the following properties:
class ValidationError(JsonSchemaValueException):
def detailed_errors():
class _ErrorFormatting:
class _SummaryWriter:
def _separate_terms(word: str) -> List[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\extra_validations.py
-----------------------------
> """The purpose of this module is implement PEP 621 validations that are
  difficult to express as a JSON Schema (or that are not supported by the current
  JSON Schema library).
class RedefiningStaticFieldAsDynamic(ValidationError):
def validate_project_dynamic(pyproject: T) -> T:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\fastjsonschema_exceptions.py
-----------------------------
>     """
      Base exception of ``fastjsonschema`` library.
class JsonSchemaException(ValueError):
class JsonSchemaValueException(JsonSchemaException):
class JsonSchemaDefinitionException(JsonSchemaException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\fastjsonschema_validations.py
-----------------------------
def validate(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_build_dependencies(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_file_directive(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_attr_directive(data, custom_formats={}, name_prefix=None):
def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_find_directive(data, custom_formats={}, name_prefix=None):
def validate_https___docs_python_org_3_install(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_dependency(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_entry_point_group(data, custom_formats={}, name_prefix=None):
def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_author(data, custom_formats={}, name_prefix=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\formats.py
-----------------------------
> VERSION_PATTERN = r"""
      v?
      (?:
          (?:(?P<epoch>[0-9]+)!)?                           # epoch
def pep440(version: str) -> bool:
def pep508_identifier(name: str) -> bool:
def pep508_versionspec(value: str) -> bool:
def pep517_backend_reference(value: str) -> bool:
def _download_classifiers() -> str:
class _TroveClassifier:
def url(value: str) -> bool:
def python_identifier(value: str) -> bool:
def python_qualified_identifier(value: str) -> bool:
def python_module_name(value: str) -> bool:
def python_entrypoint_group(value: str) -> bool:
def python_entrypoint_name(value: str) -> bool:
def python_entrypoint_reference(value: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_validate_pyproject\__init__.py
-----------------------------
>     """Validate the given ``data`` object using JSON Schema
      This function raises ``ValidationError`` if ``data`` is invalid.
def validate(data: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\expand.py
-----------------------------
> """Utility functions to expand configuration directives or special values
  (such glob patterns).
  
  We can split the process of interpreting configuration files into 2 steps:
class StaticModule:
def glob_relative(
def read_files(filepaths: Union[str, bytes, Iterable[_Path]], root_dir=None) -> str:
def _filter_existing_files(filepaths: Iterable[_Path]) -> Iterator[_Path]:
def _read_file(filepath: Union[bytes, _Path]) -> str:
def _assert_local(filepath: _Path, root_dir: str):
def read_attr(
def _find_spec(module_name: str, module_path: Optional[_Path]) -> ModuleSpec:
def _load_spec(spec: ModuleSpec, module_name: str) -> ModuleType:
def _find_module(
def resolve_class(
def cmdclass(
def find_packages(
def _nest_path(parent: _Path, path: _Path) -> str:
def version(value: Union[Callable, Iterable[Union[str, int]], str]) -> str:
def canonic_package_data(package_data: dict) -> dict:
def canonic_data_files(
def entry_points(text: str, text_source="entry-points") -> Dict[str, dict]:
class EnsurePackagesDiscovered:
class LazyMappingProxy(Mapping[_K, _V]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\pyprojecttoml.py
-----------------------------
> """
  Load setuptools configuration from ``pyproject.toml`` files.
  
  **PRIVATE MODULE**: API reserved for setuptools internal usage only.
def load_file(filepath: _Path) -> dict:
def validate(config: dict, filepath: _Path) -> bool:
def apply_configuration(
def read_configuration(
def _skip_bad_config(
def expand_configuration(
class _ConfigExpander:
def _parse_requirements_list(value):
def _ignore_errors(ignore_option_errors: bool):
class _EnsurePackagesDiscovered(_expand.EnsurePackagesDiscovered):
class _BetaConfiguration(UserWarning):
class _InvalidFile(UserWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\setupcfg.py
-----------------------------
> """
  Load setuptools configuration from ``setup.cfg`` files.
  
  **API will be made private in the future**
def read_configuration(
def apply_configuration(dist: "Distribution", filepath: _Path) -> "Distribution":
def _apply(
def _get_option(target_obj: Target, key: str):
def configuration_to_dict(handlers: Tuple["ConfigHandler", ...]) -> dict:
def parse_configuration(
def _warn_accidental_env_marker_misconfig(label: str, orig_value: str, parsed: list):
class ConfigHandler(Generic[Target]):
class ConfigMetadataHandler(ConfigHandler["DistributionMetadata"]):
class ConfigOptionsHandler(ConfigHandler["Distribution"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\_apply_pyprojecttoml.py
-----------------------------
> """Translation layer between pyproject config and setuptools distribution and
  metadata objects.
  
  The distribution and metadata objects are modeled after (an old version of)
def apply(dist: "Distribution", config: dict, filename: _Path) -> "Distribution":
def _apply_project_table(dist: "Distribution", config: dict, root_dir: _Path):
def _apply_tool_table(dist: "Distribution", config: dict, filename: _Path):
def _handle_missing_dynamic(dist: "Distribution", project_table: dict):
def json_compatible_key(key: str) -> str:
def _set_config(dist: "Distribution", field: str, value: Any):
def _guess_content_type(file: str) -> Optional[str]:
def _long_description(dist: "Distribution", val: _DictOrStr, root_dir: _Path):
def _license(dist: "Distribution", val: dict, root_dir: _Path):
def _people(dist: "Distribution", val: List[dict], _root_dir: _Path, kind: str):
def _project_urls(dist: "Distribution", val: dict, _root_dir):
def _python_requires(dist: "Distribution", val: dict, _root_dir):
def _dependencies(dist: "Distribution", val: list, _root_dir):
def _optional_dependencies(dist: "Distribution", val: dict, _root_dir):
def _unify_entry_points(project_table: dict):
def _copy_command_options(pyproject: dict, dist: "Distribution", filename: _Path):
def _valid_command_options(cmdclass: Mapping = EMPTY) -> Dict[str, Set[str]]:
def _load_ep(ep: "metadata.EntryPoint") -> Optional[Tuple[str, Type]]:
def _normalise_cmd_option_key(name: str) -> str:
def _normalise_cmd_options(desc: List[Tuple[str, Optional[str], str]]) -> Set[str]:
def _attrgetter(attr):
def _some_attrgetter(*items):
class _WouldIgnoreField(UserWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\config\__init__.py
-----------------------------
> """For backward compatibility, expose main functions from
  ``setuptools.config.setupcfg``
def _deprecation_notice(fn: Fn) -> Fn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\extern\__init__.py
-----------------------------
>     """
      A PEP 302 meta path importer for finding optionally-vendored
      or otherwise naturally-installed packages from root_name.
class VendorImporter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\bdist.py
-----------------------------
> """distutils.command.bdist
  
  Implements the Distutils 'bdist' command (create a built [binary]
def show_formats():
class ListCompat(dict):
class bdist(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_dumb.py
-----------------------------
> """distutils.command.bdist_dumb
  
  Implements the Distutils 'bdist_dumb' command (create a "dumb" built
  distribution -- i.e., just an archive to be unpacked under $prefix or
class bdist_dumb(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\bdist_rpm.py
-----------------------------
> """distutils.command.bdist_rpm
  
  Implements the Distutils 'bdist_rpm' command (create RPM source and binary
class bdist_rpm(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\build.py
-----------------------------
> """distutils.command.build
  
def show_compilers():
class build(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\build_clib.py
-----------------------------
> """distutils.command.build_clib
  
  Implements the Distutils 'build_clib' command, to build a C/C++ library
  that is included in the module distribution and needed by an extension
def show_compilers():
class build_clib(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\build_ext.py
-----------------------------
> """distutils.command.build_ext
  
  Implements the Distutils 'build_ext' command, for building extension
  modules (currently limited to C extensions, should accommodate C++
def show_compilers():
class build_ext(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\build_py.py
-----------------------------
> """distutils.command.build_py
  
class build_py(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\build_scripts.py
-----------------------------
> """distutils.command.build_scripts
  
class build_scripts(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\check.py
-----------------------------
> """distutils.command.check
  
  Implements the Distutils 'check' command.
class check(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\clean.py
-----------------------------
> """distutils.command.clean
  
class clean(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\config.py
-----------------------------
> """distutils.command.config
  
  Implements the Distutils 'config' command, a (mostly) empty command class
  that exists mainly to be sub-classed by specific module distributions and
class config(Command):
def dump_file(filename, head=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\install.py
-----------------------------
> """distutils.command.install
  
def _load_sysconfig_schemes():
def _load_schemes():
def _get_implementation():
def _select_scheme(ob, name):
def _remove_set(ob, attrs):
def _resolve_scheme(name):
def _load_scheme(name):
def _inject_headers(name, scheme):
def _scheme_attrs(scheme):
def _pypy_hack(name):
class install(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\install_data.py
-----------------------------
> """distutils.command.install_data
  
  Implements the Distutils 'install_data' command, for installing
class install_data(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\install_egg_info.py
-----------------------------
> """
  distutils.command.install_egg_info
  
  Implements the Distutils 'install_egg_info' command, for installing
class install_egg_info(Command):
def safe_name(name):
def safe_version(version):
def to_filename(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\install_headers.py
-----------------------------
> """distutils.command.install_headers
  
  Implements the Distutils 'install_headers' command, to install C/C++ header
class install_headers(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\install_lib.py
-----------------------------
> """distutils.command.install_lib
  
  Implements the Distutils 'install_lib' command
class install_lib(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\install_scripts.py
-----------------------------
> """distutils.command.install_scripts
  
  Implements the Distutils 'install_scripts' command, for installing
class install_scripts(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\py37compat.py
-----------------------------
>     """
      On Python 3.7 and earlier, distutils would include the Python
      library. See pypa/distutils#9.
def _pythonlib_compat():
def compose(f1, f2):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\register.py
-----------------------------
> """distutils.command.register
  
  Implements the Distutils 'register' command (register with the repository).
class register(PyPIRCCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\sdist.py
-----------------------------
> """distutils.command.sdist
  
def show_formats():
class sdist(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\upload.py
-----------------------------
> """
  distutils.command.upload
  
  Implements the Distutils 'upload' subcommand (upload package to a package
class upload(PyPIRCCommand):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\_framework_compat.py
-----------------------------
> """
  Backward compatibility for homebrew builds on macOS.
def enabled():
def vars():
def scheme(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\command\__init__.py
-----------------------------
> """distutils.command
  
  Package containing implementation of all the standard Distutils

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\archive_util.py
-----------------------------
> """distutils.archive_util
  
  Utility functions for creating archive files (tarballs, zip files,
def _get_gid(name):
def _get_uid(name):
def make_tarball(
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):  # noqa: C901
def check_archive_formats(formats):
def make_archive(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\bcppcompiler.py
-----------------------------
> """distutils.bcppcompiler
  
  Contains BorlandCCompiler, an implementation of the abstract CCompiler class
  for the Borland C++ compiler.
class BCPPCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\ccompiler.py
-----------------------------
> """distutils.ccompiler
  
  Contains CCompiler, an abstract base class that defines the interface
class CCompiler:
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\cmd.py
-----------------------------
> """distutils.cmd
  
  Provides the Command class, the base class for the command classes
  in the distutils.command package.
class Command:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\config.py
-----------------------------
> """distutils.pypirc
  
  Provides the PyPIRCCommand class, the base class for the command classes
  that uses .pypirc in the distutils.command package.
class PyPIRCCommand(Command):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\core.py
-----------------------------
> """distutils.core
  
  The only module that needs to be imported to use the Distutils; provides
  the 'setup' function (which is to be called from the setup script).  Also
def gen_usage(script_name):
def setup(**attrs):  # noqa: C901
def run_commands(dist):
def run_setup(script_name, script_args=None, stop_after="run"):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\cygwinccompiler.py
-----------------------------
> """distutils.cygwinccompiler
  
  Provides the CygwinCCompiler class, a subclass of UnixCCompiler that
  handles the Cygwin port of the GNU C compiler to Windows.  It also contains
def get_msvcr():
class CygwinCCompiler(UnixCCompiler):
class Mingw32CCompiler(CygwinCCompiler):
def check_config_h():
def is_cygwincc(cc):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\debug.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\dep_util.py
-----------------------------
> """distutils.dep_util
  
  Utility functions for simple, timestamp-based dependency of files
  and groups of files; also, function based entirely on such
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\dir_util.py
-----------------------------
> """distutils.dir_util
  
def mkpath(name, mode=0o777, verbose=1, dry_run=0):  # noqa: C901
def create_tree(base_dir, files, mode=0o777, verbose=1, dry_run=0):
def copy_tree(  # noqa: C901
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\dist.py
-----------------------------
> """distutils.dist
  
  Provides the Distribution class, which represents the module distribution
  being built/installed/distributed.
def _ensure_list(value, fieldname):
class Distribution:
class DistributionMetadata:
def fix_help_options(options):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\errors.py
-----------------------------
> """distutils.errors
  
  Provides exceptions used by the Distutils modules.  Note that Distutils
  modules may raise standard exceptions; in particular, SystemExit is
class DistutilsError(Exception):
class DistutilsModuleError(DistutilsError):
class DistutilsClassError(DistutilsError):
class DistutilsGetoptError(DistutilsError):
class DistutilsArgError(DistutilsError):
class DistutilsFileError(DistutilsError):
class DistutilsOptionError(DistutilsError):
class DistutilsSetupError(DistutilsError):
class DistutilsPlatformError(DistutilsError):
class DistutilsExecError(DistutilsError):
class DistutilsInternalError(DistutilsError):
class DistutilsTemplateError(DistutilsError):
class DistutilsByteCompileError(DistutilsError):
class CCompilerError(Exception):
class PreprocessError(CCompilerError):
class CompileError(CCompilerError):
class LibError(CCompilerError):
class LinkError(CCompilerError):
class UnknownFileError(CCompilerError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\extension.py
-----------------------------
> """distutils.extension
  
  Provides the Extension class, used to describe C/C++ extension
class Extension:
def read_setup_file(filename):  # noqa: C901

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\fancy_getopt.py
-----------------------------
> """distutils.fancy_getopt
  
  Wrapper around the standard getopt module that provides the following
  additional features:
class FancyGetopt:
def fancy_getopt(options, negative_opt, object, args):
def wrap_text(text, width):
def translate_longopt(opt):
class OptionDummy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\filelist.py
-----------------------------
> """distutils.filelist
  
  Provides the FileList class, used for poking about the filesystem
  and building lists of files.
class FileList:
def _find_all_simple(path):
class _UniqueDirs(set):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\file_util.py
-----------------------------
> """distutils.file_util
  
  Utility functions for operating on single files.
def _copy_file_contents(src, dst, buffer_size=16 * 1024):  # noqa: C901
def copy_file(  # noqa: C901
def move_file(src, dst, verbose=1, dry_run=0):  # noqa: C901
def write_file(filename, contents):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\log.py
-----------------------------
> """A simple log mechanism styled after PEP 282."""
  
  # The class here is styled after PEP 282 so that it could later be
  # replaced with a standard Python logging implementation.
class Log:
def set_threshold(level):
def set_verbosity(v):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\msvc9compiler.py
-----------------------------
> """distutils.msvc9compiler
  
  Contains MSVCCompiler, an implementation of the abstract CCompiler class
  for the Microsoft Visual Studio 2008.
class Reg:
class MacroExpander:
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch="x86"):
class MSVCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\msvccompiler.py
-----------------------------
> """distutils.msvccompiler
  
  Contains MSVCCompiler, an implementation of the abstract CCompiler class
  for the Microsoft Visual Studio.
def read_keys(base, key):
def read_values(base, key):
def convert_mbcs(s):
class MacroExpander:
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
class MSVCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\py38compat.py
-----------------------------
def aix_platform(osname, version, release):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\py39compat.py
-----------------------------
>     """
      Ensure vars contains 'EXT_SUFFIX'. pypa/distutils#130
def add_ext_suffix_39(vars):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\spawn.py
-----------------------------
> """distutils.spawn
  
  Provides the 'spawn()' function, a front-end to various platform-
  specific functions for launching another program in a sub-process.
def spawn(cmd, search_path=1, verbose=0, dry_run=0, env=None):  # noqa: C901
def find_executable(executable, path=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\sysconfig.py
-----------------------------
> """Provide access to Python's configuration information.  The specific
  configuration variables available depend heavily on the platform and
  configuration.  The values may be retrieved using
  get_config_var(name), and the list of variables is available via
def _is_python_source_dir(d):
def _is_parent(dir_a, dir_b):
def _python_build():
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def _get_python_inc_posix(prefix, spec_prefix, plat_specific):
def _get_python_inc_posix_python(plat_specific):
def _get_python_inc_from_config(plat_specific, spec_prefix):
def _get_python_inc_posix_prefix(prefix):
def _get_python_inc_nt(prefix, spec_prefix, plat_specific):
def _posix_lib(standard_lib, libpython, early_prefix, prefix):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):  # noqa: C901
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):  # noqa: C901
def expand_makefile_vars(s, vars):
def get_config_vars(*args):
def get_config_var(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\text_file.py
-----------------------------
> """text_file
  
  provides the TextFile class, which gives an interface to text files
  that (optionally) takes care of stripping comments, ignoring blank
class TextFile:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\unixccompiler.py
-----------------------------
> """distutils.unixccompiler
  
  Contains the UnixCCompiler class, a subclass of CCompiler that handles
  the "typical" Unix-style command-line C compiler:
def _split_env(cmd):
def _split_aix(cmd):
def _linker_params(linker_cmd, compiler_cmd):
class UnixCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\util.py
-----------------------------
> """distutils.util
  
  Miscellaneous utility functions -- anything that doesn't fit into
  one of the other *util.py modules.
def get_host_platform():
def get_platform():
def _clear_cached_macosx_ver():
def get_macosx_target_ver_from_syscfg():
def get_macosx_target_ver():
def split_version(s):
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def _subst_compat(s):
def grok_environment_error(exc, prefix="error: "):
def _init_regex():
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(  # noqa: C901
def rfc822_escape(header):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\version.py
-----------------------------
> """Provides classes to represent module version numbers (one class for
  each style of version numbering).  There are currently two such classes
  implemented: StrictVersion and LooseVersion.
  
def suppress_known_deprecation():
class Version:
class StrictVersion(Version):
class LooseVersion(Version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\versionpredicate.py
-----------------------------
> """Module for parsing and testing package version predicate strings.
def splitUp(pred):
class VersionPredicate:
def split_provision(value):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\_collections.py
-----------------------------
>     """
      A stack of dictionaries that behaves as a view on those dictionaries,
      giving preference to the last.
  
class DictStack(list, collections.abc.Mapping):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\_functools.py
-----------------------------
>     """
      Wrap func so it's not called if its first param is None
  
      >>> print_text = pass_none(print)
def pass_none(func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\_macos_compat.py
-----------------------------
def bypass_compiler_fixup(cmd, args):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\_msvccompiler.py
-----------------------------
> """distutils._msvccompiler
  
  Contains MSVCCompiler, an implementation of the abstract CCompiler class
  for Microsoft Visual Studio 2015.
def _find_vc2015():
def _find_vc2017():
def _find_vcvarsall(plat_spec):
def _get_vc_env(plat_spec):
def _find_exe(exe, paths=None):
class MSVCCompiler(CCompiler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_distutils\__init__.py
-----------------------------
> """distutils
  
  The main package for the Python Module Distribution Utilities.  Normally
  used from a setup script as

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_adapters.py
-----------------------------
>     """
      Keys that may be indicated multiple times per PEP 566.
class Message(email.message.Message):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_collections.py
-----------------------------
>     """
      Often it is desirable to prevent the mutation of
      a default dict after its initial construction, such
      as to prevent mutation during iteration.
class FreezableDefaultDict(collections.defaultdict):
class Pair(collections.namedtuple('Pair', 'name value')):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_compat.py
-----------------------------
>     """
      Class decorator for installation on sys.meta_path.
  
      Adds the backport DistributionFinder to sys.meta_path and
def install(cls):
def disable_stdlib_finder():
class NullFinder:
def pypy_partial(val):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_functools.py
-----------------------------
>     """
      Wrap lru_cache to support storing the cache data in the object instances.
  
      Abstracts the common paradigm where the method explicitly saves an
def method_cache(method, cache_wrapper=None):
def pass_none(func):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_itertools.py
-----------------------------
>     """If *obj* is iterable, return an iterator over its items::
  
          >>> obj = (1, 2, 3)
          >>> list(always_iterable(obj))
def unique_everseen(iterable, key=None):
def always_iterable(obj, base_type=(str, bytes)):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_meta.py
-----------------------------
>         """
          Return all values associated with a possibly multi-valued key.
class PackageMetadata(Protocol):
class SimplePath(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\_text.py
-----------------------------
>     """
      A case insensitive string class; behaves just like str
      except compares equal when the only variation is case.
  
class FoldedCase(str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\__init__.py
-----------------------------
>     """The package was not found."""
  
      def __str__(self):
          return f"No package metadata was found for {self.name}"
class PackageNotFoundError(ModuleNotFoundError):
class Sectioned:
class DeprecatedTuple:
class EntryPoint(DeprecatedTuple):
class DeprecatedList(list):
class EntryPoints(DeprecatedList):
class Deprecated:
class SelectableGroups(Deprecated, dict):
class PackagePath(pathlib.PurePosixPath):
class FileHash:
class Distribution:
class DistributionFinder(MetaPathFinder):
class FastPath:
class Lookup:
class Prepared:
class MetadataPathFinder(NullFinder, DistributionFinder):
class PathDistribution(Distribution):
def distribution(distribution_name):
def distributions(**kwargs):
def metadata(distribution_name) -> _meta.PackageMetadata:
def version(distribution_name):
def entry_points(**params) -> Union[EntryPoints, SelectableGroups]:
def files(distribution_name):
def requires(distribution_name):
def packages_distributions() -> Mapping[str, List[str]]:
def _top_level_declared(dist):
def _top_level_inferred(dist):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\abc.py
-----------------------------
>     """Abstract base class for loaders to provide resource reading support."""
  
      @abc.abstractmethod
      def open_resource(self, resource: Text) -> BinaryIO:
class ResourceReader(metaclass=abc.ABCMeta):
class Traversable(Protocol):
class TraversableResources(ResourceReader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\readers.py
-----------------------------
>         """
          Return the file system path to prevent
          `resources.path()` from creating a temporary
          copy.
def remove_duplicates(items):
class FileReader(abc.TraversableResources):
class ZipReader(abc.TraversableResources):
class MultiplexedPath(abc.Traversable):
class NamespaceReader(abc.TraversableResources):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\simple.py
-----------------------------
> """
  Interface adapters for low-level readers.
class SimpleReader(abc.ABC):
class ResourceHandle(Traversable):
class ResourceContainer(Traversable):
class TraversableReader(TraversableResources, SimpleReader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\_adapters.py
-----------------------------
>     """
      Adapt a package spec to adapt the underlying loader.
class SpecLoaderAdapter:
class TraversableResourcesLoader:
def _io_wrapper(file, mode='r', *args, **kwargs):
class CompatibilityFiles:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\_common.py
-----------------------------
>     """
      Get a Traversable resource from a package
def files(package):
def get_resource_reader(package):
def resolve(cand):
def get_package(package):
def from_package(package):
def _tempfile(reader, suffix=''):
def as_file(path):
def _(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\_compat.py
-----------------------------
>     """
      Adapt loaders to provide TraversableResources and other
      compatibility.
  
class TraversableResourcesLoader:
def wrap_spec(package):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\_itertools.py
-----------------------------
def unique_everseen(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\_legacy.py
-----------------------------
>     """Normalize a path by ensuring it is a string.
  
      If the resulting string contains path separators, an exception is raised.
def deprecated(func):
def normalize_path(path):
def open_binary(package: Package, resource: Resource) -> BinaryIO:
def read_binary(package: Package, resource: Resource) -> bytes:
def open_text(
def read_text(
def contents(package: Package) -> Iterable[str]:
def is_resource(package: Package, name: str) -> bool:
def path(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\importlib_resources\__init__.py
-----------------------------
> """Read resources contained within a package."""
  
  from ._common import (
      as_file,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\jaraco\text\__init__.py
-----------------------------
>     """
      Return a function that will perform a substitution on a string
def substitution(old, new):
def multi_substitution(*substitutions):
class FoldedCase(str):
def is_decodable(value):
def is_binary(value):
def trim(s):
def wrap(s):
def unwrap(s):
class Splitter(object):
def indent(string, prefix=' ' * 4):
class WordSet(tuple):
def simple_html_strip(s):
class SeparatedValues(str):
class Stripper:
def remove_prefix(text, prefix):
def remove_suffix(text, suffix):
def normalize_newlines(text):
def _nonblank(str):
def yield_lines(iterable):
def _(text):
def drop_comment(line):
def join_continuation(lines):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\jaraco\context.py
-----------------------------
>     """
      Get a tarball, extract it, change to that directory, yield, then
      clean up.
      `runner` is the function to invoke commands.
def pushd(dir):
def tarball_context(url, target_dir=None, runner=None, pushd=pushd):
def infer_compression(url):
def temp_dir(remover=shutil.rmtree):
def repo_context(url, branch=None, quiet=True, dest_ctx=temp_dir):
def null():
class ExceptionTrap:
class suppress(contextlib.suppress, contextlib.ContextDecorator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\jaraco\functools.py
-----------------------------
>     """
      Compose any number of unary functions into a single unary function.
  
      >>> import textwrap
def compose(*funcs):
def method_caller(method_name, *args, **kwargs):
def once(func):
def method_cache(
def _special_method_cache(method, cache_wrapper):
def apply(transform):
def result_invoke(action):
def call_aside(f, *args, **kwargs):
class Throttler:
def first_invoke(func1, func2):
def retry_call(func, cleanup=lambda: None, retries=0, trap=()):
def retry(*r_args, **r_kwargs):
def print_yielded(func):
def pass_none(func):
def assign_params(func, namespace):
def save_method_args(method):
def except_(*exceptions, replace=None, use=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\jaraco\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\more.py
-----------------------------
>     """Break *iterable* into lists of length *n*:
  
          >>> list(chunked([1, 2, 3, 4, 5, 6], 3))
          [[1, 2, 3], [4, 5, 6]]
def chunked(iterable, n, strict=False):
def first(iterable, default=_marker):
def last(iterable, default=_marker):
def nth_or_last(iterable, n, default=_marker):
class peekable:
def collate(*iterables, **kwargs):
def consumer(func):
def ilen(iterable):
def iterate(func, start):
def with_iter(context_manager):
def one(iterable, too_short=None, too_long=None):
def distinct_permutations(iterable, r=None):
def intersperse(e, iterable, n=1):
def unique_to_each(*iterables):
def windowed(seq, n, fillvalue=None, step=1):
def substrings(iterable):
def substrings_indexes(seq, reverse=False):
class bucket:
def spy(iterable, n=1):
def interleave(*iterables):
def interleave_longest(*iterables):
def collapse(iterable, base_type=None, levels=None):
def side_effect(func, iterable, chunk_size=None, before=None, after=None):
def sliced(seq, n, strict=False):
def split_at(iterable, pred, maxsplit=-1, keep_separator=False):
def split_before(iterable, pred, maxsplit=-1):
def split_after(iterable, pred, maxsplit=-1):
def split_when(iterable, pred, maxsplit=-1):
def split_into(iterable, sizes):
def padded(iterable, fillvalue=None, n=None, next_multiple=False):
def repeat_last(iterable, default=None):
def distribute(n, iterable):
def stagger(iterable, offsets=(-1, 0, 1), longest=False, fillvalue=None):
class UnequalIterablesError(ValueError):
def _zip_equal_generator(iterables):
def zip_equal(*iterables):
def zip_offset(*iterables, offsets, longest=False, fillvalue=None):
def sort_together(iterables, key_list=(0,), key=None, reverse=False):
def unzip(iterable):
def divide(n, iterable):
def always_iterable(obj, base_type=(str, bytes)):
def adjacent(predicate, iterable, distance=1):
def groupby_transform(iterable, keyfunc=None, valuefunc=None, reducefunc=None):
class numeric_range(abc.Sequence, abc.Hashable):
def count_cycle(iterable, n=None):
def mark_ends(iterable):
def locate(iterable, pred=bool, window_size=None):
def lstrip(iterable, pred):
def rstrip(iterable, pred):
def strip(iterable, pred):
class islice_extended:
def _islice_helper(it, s):
def always_reversible(iterable):
def consecutive_groups(iterable, ordering=lambda x: x):
def difference(iterable, func=sub, *, initial=None):
class SequenceView(Sequence):
class seekable:
class run_length:
def exactly_n(iterable, n, predicate=bool):
def circular_shifts(iterable):
def make_decorator(wrapping_func, result_index=0):
def map_reduce(iterable, keyfunc, valuefunc=None, reducefunc=None):
def rlocate(iterable, pred=bool, window_size=None):
def replace(iterable, pred, substitutes, count=None, window_size=1):
def partitions(iterable):
def set_partitions(iterable, k=None):
class time_limited:
def only(iterable, default=None, too_long=None):
def ichunked(iterable, n):
def distinct_combinations(iterable, r):
def filter_except(validator, iterable, *exceptions):
def map_except(function, iterable, *exceptions):
def _sample_unweighted(iterable, k):
def _sample_weighted(iterable, k, weights):
def sample(iterable, k, weights=None):
def is_sorted(iterable, key=None, reverse=False):
class AbortThread(BaseException):
class callback_iter:
def windowed_complete(iterable, n):
def all_unique(iterable, key=None):
def nth_product(index, *args):
def nth_permutation(iterable, r, index):
def value_chain(*args):
def product_index(element, *args):
def combination_index(element, iterable):
def permutation_index(element, iterable):
class countable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\recipes.py
-----------------------------
> """Imported from the recipes section of the itertools documentation.
  
  All functions taken from the recipes section of the itertools library docs
  [1]_.
def take(n, iterable):
def tabulate(function, start=0):
def tail(n, iterable):
def consume(iterator, n=None):
def nth(iterable, n, default=None):
def all_equal(iterable):
def quantify(iterable, pred=bool):
def pad_none(iterable):
def ncycles(iterable, n):
def dotproduct(vec1, vec2):
def flatten(listOfLists):
def repeatfunc(func, times=None, *args):
def _pairwise(iterable):
def grouper(iterable, n, fillvalue=None):
def roundrobin(*iterables):
def partition(pred, iterable):
def powerset(iterable):
def unique_everseen(iterable, key=None):
def unique_justseen(iterable, key=None):
def iter_except(func, exception, first=None):
def first_true(iterable, default=None, pred=None):
def random_product(*args, repeat=1):
def random_permutation(iterable, r=None):
def random_combination(iterable, r):
def random_combination_with_replacement(iterable, r):
def nth_combination(iterable, r, index):
def prepend(value, iterator):
def convolve(signal, kernel):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\more_itertools\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\markers.py
-----------------------------
>     """
      An invalid marker was found, users should refer to PEP 508.
class InvalidMarker(ValueError):
class UndefinedComparison(ValueError):
class UndefinedEnvironmentName(ValueError):
class Node:
class Variable(Node):
class Value(Node):
class Op(Node):
def _coerce_parse_result(results: Union[ParseResults, List[Any]]) -> List[Any]:
def _format_marker(
def _eval_op(lhs: str, op: Op, rhs: str) -> bool:
class Undefined:
def _get_env(environment: Dict[str, str], name: str) -> str:
def _evaluate_markers(markers: List[Any], environment: Dict[str, str]) -> bool:
def format_full_version(info: "sys._version_info") -> str:
def default_environment() -> Dict[str, str]:
class Marker:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\requirements.py
-----------------------------
>     """
      An invalid requirement was found, users should refer to PEP 508.
class InvalidRequirement(ValueError):
class Requirement:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\specifiers.py
-----------------------------
>     """
      An invalid specifier was found, users should refer to PEP 440.
class InvalidSpecifier(ValueError):
class BaseSpecifier(metaclass=abc.ABCMeta):
class _IndividualSpecifier(BaseSpecifier):
class LegacySpecifier(_IndividualSpecifier):
def _require_version_compare(
class Specifier(_IndividualSpecifier):
def _version_split(version: str) -> List[str]:
def _is_not_suffix(segment: str) -> bool:
def _pad_version(left: List[str], right: List[str]) -> Tuple[List[str], List[str]]:
class SpecifierSet(BaseSpecifier):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\tags.py
-----------------------------
>     """
      A representation of the tag triple for a wheel.
  
      Instances are considered immutable and thus are hashable. Equality checking
class Tag:
def parse_tag(tag: str) -> FrozenSet[Tag]:
def _get_config_var(name: str, warn: bool = False) -> Union[int, str, None]:
def _normalize_string(string: str) -> str:
def _abi3_applies(python_version: PythonVersion) -> bool:
def _cpython_abis(py_version: PythonVersion, warn: bool = False) -> List[str]:
def cpython_tags(
def _generic_abi() -> Iterator[str]:
def generic_tags(
def _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:
def compatible_tags(
def _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:
def _mac_binary_formats(version: MacVersion, cpu_arch: str) -> List[str]:
def mac_platforms(
def _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:
def _generic_platforms() -> Iterator[str]:
def platform_tags() -> Iterator[str]:
def interpreter_name() -> str:
def interpreter_version(*, warn: bool = False) -> str:
def _version_nodot(version: PythonVersion) -> str:
def sys_tags(*, warn: bool = False) -> Iterator[Tag]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\utils.py
-----------------------------
>     """
      An invalid wheel filename was found, users should refer to PEP 427.
class InvalidWheelFilename(ValueError):
class InvalidSdistFilename(ValueError):
def canonicalize_name(name: str) -> NormalizedName:
def canonicalize_version(version: Union[Version, str]) -> str:
def parse_wheel_filename(
def parse_sdist_filename(filename: str) -> Tuple[NormalizedName, Version]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\version.py
-----------------------------
>     """
      Parse the given version string and return either a :class:`Version` object
      or a :class:`LegacyVersion` object depending on if the given version is
      a valid PEP 440 version or a legacy version.
def parse(version: str) -> Union["LegacyVersion", "Version"]:
class InvalidVersion(ValueError):
class _BaseVersion:
class LegacyVersion(_BaseVersion):
def _parse_version_parts(s: str) -> Iterator[str]:
def _legacy_cmpkey(version: str) -> LegacyCmpKey:
class Version(_BaseVersion):
def _parse_letter_version(
def _parse_local_version(local: str) -> Optional[LocalType]:
def _cmpkey(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\_manylinux.py
-----------------------------
>         """
          An invalid ELF file header was found.
class _ELFFileHeader:
def _get_elf_header() -> Optional[_ELFFileHeader]:
def _is_linux_armhf() -> bool:
def _is_linux_i686() -> bool:
def _have_compatible_abi(arch: str) -> bool:
class _GLibCVersion(NamedTuple):
def _glibc_version_string_confstr() -> Optional[str]:
def _glibc_version_string_ctypes() -> Optional[str]:
def _glibc_version_string() -> Optional[str]:
def _parse_glibc_version(version_str: str) -> Tuple[int, int]:
def _get_glibc_version() -> Tuple[int, int]:
def _is_compatible(name: str, arch: str, version: _GLibCVersion) -> bool:
def platform_tags(linux: str, arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\_musllinux.py
-----------------------------
> """PEP 656 support.
  
  This module implements logic to detect if the currently running Python is
  linked against musl, and what musl version is used.
def _read_unpacked(f: IO[bytes], fmt: str) -> Tuple[int, ...]:
def _parse_ld_musl_from_elf(f: IO[bytes]) -> Optional[str]:
class _MuslVersion(NamedTuple):
def _parse_musl_version(output: str) -> Optional[_MuslVersion]:
def _get_musl_version(executable: str) -> Optional[_MuslVersion]:
def platform_tags(arch: str) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\_structures.py
-----------------------------
class InfinityType:
class NegativeInfinityType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\__about__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\packaging\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\diagram\__init__.py
-----------------------------
> jinja2_template_source = """\
  <!DOCTYPE html>
  <html>
  <head>
class EachItem(railroad.Group):
class AnnotatedItem(railroad.Group):
class EditablePartial(Generic[T]):
def railroad_to_html(diagrams: List[NamedDiagram], **kwargs) -> str:
def resolve_partial(partial: "EditablePartial[T]") -> T:
def to_railroad(
def _should_vertical(
class ElementState:
class ConverterState:
def _worth_extracting(element: pyparsing.ParserElement) -> bool:
def _apply_diagram_item_enhancements(fn):
def _visible_exprs(exprs: Iterable[pyparsing.ParserElement]):
def _to_diagram_element(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\actions.py
-----------------------------
>     """
      Wrapper for parse actions, to ensure they are only called once.
class OnlyOnce:
def match_only_at_col(n):
def replace_with(repl_str):
def remove_quotes(s, l, t):
def with_attribute(*args, **attr_dict):
def with_class(classname, namespace=""):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\common.py
-----------------------------
>     """Here are some common low-level expressions that may be useful in
      jump-starting parser development:
  
      - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
class pyparsing_common:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\core.py
-----------------------------
>     """
      A cross-version compatibility configuration for pyparsing features that will be
      released in a future version. By setting values in this configuration to True,
      those features can be enabled in prior versions for compatibility development
class __compat__(__config_flags):
class __diag__(__config_flags):
class Diagnostics(Enum):
def enable_diag(diag_enum: Diagnostics) -> None:
def disable_diag(diag_enum: Diagnostics) -> None:
def enable_all_warnings() -> None:
def _should_enable_warnings(
def _trim_arity(func, max_limit=3):
def condition_as_parse_action(
def _default_start_debug_action(
def _default_success_debug_action(
def _default_exception_debug_action(
def null_debug_action(*args):
class ParserElement(ABC):
class _PendingSkip(ParserElement):
class Token(ParserElement):
class Empty(Token):
class NoMatch(Token):
class Literal(Token):
class _SingleCharLiteral(Literal):
class Keyword(Token):
class CaselessLiteral(Literal):
class CaselessKeyword(Keyword):
class CloseMatch(Token):
class Word(Token):
class _WordRegex(Word):
class Char(_WordRegex):
class Regex(Token):
class QuotedString(Token):
class CharsNotIn(Token):
class White(Token):
class PositionToken(Token):
class GoToColumn(PositionToken):
class LineStart(PositionToken):
class LineEnd(PositionToken):
class StringStart(PositionToken):
class StringEnd(PositionToken):
class WordStart(PositionToken):
class WordEnd(PositionToken):
class ParseExpression(ParserElement):
class And(ParseExpression):
class Or(ParseExpression):
class MatchFirst(ParseExpression):
class Each(ParseExpression):
class ParseElementEnhance(ParserElement):
class IndentedBlock(ParseElementEnhance):
class AtStringStart(ParseElementEnhance):
class AtLineStart(ParseElementEnhance):
class FollowedBy(ParseElementEnhance):
class PrecededBy(ParseElementEnhance):
class Located(ParseElementEnhance):
class NotAny(ParseElementEnhance):
class _MultipleMatch(ParseElementEnhance):
class OneOrMore(_MultipleMatch):
class ZeroOrMore(_MultipleMatch):
class _NullToken:
class Opt(ParseElementEnhance):
class SkipTo(ParseElementEnhance):
class Forward(ParseElementEnhance):
class TokenConverter(ParseElementEnhance):
class Combine(TokenConverter):
class Group(TokenConverter):
class Dict(TokenConverter):
class Suppress(TokenConverter):
def trace_parse_action(f: ParseAction) -> ParseAction:
def srange(s: str) -> str:
def token_map(func, *args) -> ParseAction:
def autoname_elements() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\exceptions.py
-----------------------------
>     """base exception class for all parsing runtime exceptions"""
  
      # Performance tuning: we construct a *lot* of these, so keep this
      # constructor as small and fast as possible
class ExceptionWordUnicode(ppu.Latin1, ppu.LatinA, ppu.LatinB, ppu.Greek, ppu.Cyrillic):
class ParseBaseException(Exception):
class ParseException(ParseBaseException):
class ParseFatalException(ParseBaseException):
class ParseSyntaxException(ParseFatalException):
class RecursiveGrammarException(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\helpers.py
-----------------------------
>     """Helper to define a delimited list of expressions - the delimiter
      defaults to ','. By default, the list elements and delimiters can
      have intervening whitespace, and comments, but this can be
      overridden by passing ``combine=True`` in the constructor. If
def delimited_list(
def counted_array(
def match_previous_literal(expr: ParserElement) -> ParserElement:
def match_previous_expr(expr: ParserElement) -> ParserElement:
def one_of(
def dict_of(key: ParserElement, value: ParserElement) -> ParserElement:
def original_text_for(
def ungroup(expr: ParserElement) -> ParserElement:
def locatedExpr(expr: ParserElement) -> ParserElement:
def nested_expr(
def _makeTags(tagStr, xml, suppress_LT=Suppress("<"), suppress_GT=Suppress(">")):
def make_html_tags(
def make_xml_tags(
def replace_html_entity(t):
class OpAssoc(Enum):
def infix_notation(
def indentedBlock(blockStatementExpr, indentStack, indent=True, backup_stacks=[]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\results.py
-----------------------------
>     """Structured parse results, to provide multiple means of access to
      the parsed data:
  
      - as a list (``len(results)``)
class _ParseResultsWithOffset:
class ParseResults:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\testing.py
-----------------------------
>     """
      namespace class for classes useful in writing unit tests
class pyparsing_test:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\unicode.py
-----------------------------
>     """
      A set of Unicode characters, for language-specific strings for
      ``alphas``, ``nums``, ``alphanums``, and ``printables``.
      A unicode_set is defined by a list of ranges in the Unicode character
class _lazyclassproperty:
class unicode_set:
class pyparsing_unicode(unicode_set):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\util.py
-----------------------------
>     """Internal class for defining compatibility and debugging flags"""
  
      _all_names: List[str] = []
      _fixed_names: List[str] = []
class __config_flags:
def col(loc: int, strg: str) -> int:
def lineno(loc: int, strg: str) -> int:
def line(loc: int, strg: str) -> str:
class _UnboundedCache:
class _FifoCache:
class LRUMemo:
class UnboundedMemo(dict):
def _escape_regex_range_chars(s: str) -> str:
def _collapse_string_to_ranges(
def _flatten(ll: list) -> list:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\pyparsing\__init__.py
-----------------------------
> __doc__ = """
  pyparsing module - Classes and methods to define and execute parsing grammars
  =============================================================================
  
class version_info(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\tomli\_parser.py
-----------------------------
>     """An error raised if a document is not valid TOML."""
  
  
  def load(__fp: BinaryIO, *, parse_float: ParseFloat = float) -> dict[str, Any]:
class TOMLDecodeError(ValueError):
def load(__fp: BinaryIO, *, parse_float: ParseFloat = float) -> dict[str, Any]:
def loads(__s: str, *, parse_float: ParseFloat = float) -> dict[str, Any]:  # noqa: C901
class Flags:
class NestedDict:
class Output(NamedTuple):
def skip_chars(src: str, pos: Pos, chars: Iterable[str]) -> Pos:
def skip_until(
def skip_comment(src: str, pos: Pos) -> Pos:
def skip_comments_and_array_ws(src: str, pos: Pos) -> Pos:
def create_dict_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def create_list_rule(src: str, pos: Pos, out: Output) -> tuple[Pos, Key]:
def key_value_rule(
def parse_key_value_pair(
def parse_key(src: str, pos: Pos) -> tuple[Pos, Key]:
def parse_key_part(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_one_line_basic_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_array(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[Pos, list]:
def parse_inline_table(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[Pos, dict]:
def parse_basic_str_escape(
def parse_basic_str_escape_multiline(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_hex_char(src: str, pos: Pos, hex_len: int) -> tuple[Pos, str]:
def parse_literal_str(src: str, pos: Pos) -> tuple[Pos, str]:
def parse_multiline_str(src: str, pos: Pos, *, literal: bool) -> tuple[Pos, str]:
def parse_basic_str(src: str, pos: Pos, *, multiline: bool) -> tuple[Pos, str]:
def parse_value(  # noqa: C901
def suffixed_err(src: str, pos: Pos, msg: str) -> TOMLDecodeError:
def is_unicode_scalar_value(codepoint: int) -> bool:
def make_safe_parse_float(parse_float: ParseFloat) -> ParseFloat:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\tomli\_re.py
-----------------------------
>     r"""
  0
  (?:
      x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*   # hex
def match_to_datetime(match: re.Match) -> datetime | date:
def cached_tz(hour_str: str, minute_str: str, sign_str: str) -> timezone:
def match_to_localtime(match: re.Match) -> time:
def match_to_number(match: re.Match, parse_float: ParseFloat) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\tomli\_types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\tomli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\ordered_set.py
-----------------------------
> """
  An OrderedSet is a custom MutableSet that remembers its order, so that every
  entry has an index that can be looked up.
  
def is_iterable(obj):
class OrderedSet(MutableSet, Sequence):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\typing_extensions.py
-----------------------------
>         """Special type indicating functions that never return.
          Example::
  
            from typing import NoReturn
def _no_slots_copy(dct):
def _check_generic(cls, parameters):
def IntVar(name):
class _ExtensionsGenericMeta(GenericMeta):
def _gorg(cls):
def _get_protocol_attrs(cls):
def _is_callable_members_only(cls):
def _concatenate_getitem(self, parameters):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\zipp.py
-----------------------------
>     """
      Given a path with elements separated by
      posixpath.sep, generate all parents of that path.
  
def _parents(path):
def _ancestry(path):
def _difference(minuend, subtrahend):
class CompleteDirs(zipfile.ZipFile):
class FastLookup(CompleteDirs):
def _pathlib_compat(path):
class Path:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\archive_util.py
-----------------------------
> """Utilities for extracting common archive formats"""
  
  import zipfile
  import tarfile
class UnrecognizedFormat(DistutilsError):
def default_filter(src, dst):
def unpack_archive(
def unpack_directory(filename, extract_dir, progress_filter=default_filter):
def unpack_zipfile(filename, extract_dir, progress_filter=default_filter):
def _unpack_zipfile_obj(zipfile_obj, extract_dir, progress_filter=default_filter):
def _resolve_tar_file_or_dir(tar_obj, tar_member_obj):
def _iter_open_tar(tar_obj, extract_dir, progress_filter):
def unpack_tarfile(filename, extract_dir, progress_filter=default_filter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\build_meta.py
-----------------------------
> """A PEP 517 interface to setuptools
  
  Previously, when a user or a command line tool (let's call it a "frontend")
  needed to make a request of setuptools to take a certain action, for
class SetupRequirementsError(BaseException):
class Distribution(setuptools.dist.Distribution):
def no_install_setup_requires():
def _get_immediate_subdirectories(a_dir):
def _file_with_extension(directory, extension):
def _open_setup_script(setup_script):
def suppress_known_deprecation():
class _ConfigSettingsTranslator:
class _BuildMetaBackend(_ConfigSettingsTranslator):
class _BuildMetaLegacyBackend(_BuildMetaBackend):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\depends.py
-----------------------------
>     """A prerequisite to building or installing a distribution"""
  
      def __init__(
              self, name, requested_version, module, homepage='',
class Require:
def maybe_close(f):
def get_module_constant(module, symbol, default=-1, paths=None):
def extract_constant(code, symbol, default=-1):
def _update_globals():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\dep_util.py
-----------------------------
>     """Walk both arguments in parallel, testing if each source group is newer
      than its corresponding target. Returns a pair of lists (sources_groups,
      targets) where sources is newer than target, according to the semantics
      of 'newer_group()'.
def newer_pairwise_group(sources_groups, targets):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\discovery.py
-----------------------------
> """Automatic discovery of Python modules and packages (for inclusion in the
  distribution) and other config values.
  
  For the purposes of this module, the following nomenclature is used:
def _valid_name(path: _Path) -> bool:
class _Finder:
class PackageFinder(_Finder):
class PEP420PackageFinder(PackageFinder):
class ModuleFinder(_Finder):
class FlatLayoutPackageFinder(PEP420PackageFinder):
class FlatLayoutModuleFinder(ModuleFinder):
def _find_packages_within(root_pkg: str, pkg_dir: _Path) -> List[str]:
class ConfigDiscovery:
def remove_nested_packages(packages: List[str]) -> List[str]:
def remove_stubs(packages: List[str]) -> List[str]:
def find_parent_package(
def find_package_path(
def construct_package_dir(packages: List[str], package_path: _Path) -> Dict[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\dist.py
-----------------------------
>     """Reverse RFC-822 escaping by removing leading whitespaces from content."""
      lines = content.splitlines()
      if len(lines) == 1:
          return lines[0].lstrip()
def _get_unpatched(cls):
def get_metadata_version(self):
def rfc822_unescape(content: str) -> str:
def _read_field_from_msg(msg: "Message", field: str) -> Optional[str]:
def _read_field_unescaped_from_msg(msg: "Message", field: str) -> Optional[str]:
def _read_list_from_msg(msg: "Message", field: str) -> Optional[List[str]]:
def _read_payload_from_msg(msg: "Message") -> Optional[str]:
def read_pkg_file(self, file):
def single_line(val):
def write_pkg_file(self, file):  # noqa: C901  # is too complex (14)  # FIXME
def check_importable(dist, attr, value):
def assert_string_list(dist, attr, value):
def check_nsp(dist, attr, value):
def check_extras(dist, attr, value):
def _check_extra(extra, reqs):
def assert_bool(dist, attr, value):
def invalid_unless_false(dist, attr, value):
def check_requirements(dist, attr, value):
def check_specifier(dist, attr, value):
def check_entry_points(dist, attr, value):
def check_test_suite(dist, attr, value):
def check_package_data(dist, attr, value):
def check_packages(dist, attr, value):
class Distribution(_Distribution):
class DistDeprecationWarning(SetuptoolsDeprecationWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\errors.py
-----------------------------
> """setuptools.errors
  
  Provides exceptions used by setuptools modules.
class RemovedCommandError(BaseError, RuntimeError):
class PackageDiscoveryError(BaseError, RuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\extension.py
-----------------------------
>     """
      Return True if Cython can be imported.
def _have_cython():
class Extension(_Extension):
class Library(Extension):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\glob.py
-----------------------------
> """
  Filename globbing utility. Mostly a copy of `glob` from Python 3.5.
  
  Changes include:
def glob(pathname, recursive=False):
def iglob(pathname, recursive=False):
def _iglob(pathname, recursive):
def glob1(dirname, pattern):
def glob0(dirname, basename):
def glob2(dirname, pattern):
def _rlistdir(dirname):
def has_magic(s):
def _isrecursive(pattern):
def escape(pathname):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\installer.py
-----------------------------
>     """Ensure find-links option end-up being a list of strings."""
      if isinstance(find_links, str):
          return find_links.split()
      assert isinstance(find_links, (tuple, list))
def _fixup_find_links(find_links):
def fetch_build_egg(dist, req):  # noqa: C901  # is too complex (16)  # FIXME
def strip_marker(req):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\launch.py
-----------------------------
> """
  Launch the Python script on the command line after
  setuptools is bootstrapped via import.
def run():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\logging.py
-----------------------------
>     """
      Configure logging to emit warning and above to stderr
      and everything else to stdout. This behavior is provided
      for compatibility with distutils.log but may change in
def _not_warning(record):
def configure():
def set_threshold(level):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\monkey.py
-----------------------------
> """
  Monkey patching of distutils.
def _get_mro(cls):
def get_unpatched(item):
def get_unpatched_class(cls):
def patch_all():
def _patch_distribution_metadata():
def patch_func(replacement, target_mod, func_name):
def get_unpatched_function(candidate):
def patch_for_msvc_specialized_compiler():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\msvc.py
-----------------------------
> """
  Improved support for Microsoft Visual C++ compilers.
  
  Known supported compilers:
def _msvc14_find_vc2015():
def _msvc14_find_vc2017():
def _msvc14_find_vcvarsall(plat_spec):
def _msvc14_get_vc_env(plat_spec):
def msvc14_get_vc_env(plat_spec):
def msvc14_gen_lib_options(*args, **kwargs):
def _augment_exception(exc, version, arch=''):
class PlatformInfo:
class RegistryInfo:
class SystemInfo:
class EnvironmentInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\namespaces.py
-----------------------------
>         """Return sorted list of all package namespaces"""
          pkgs = self.distribution.namespace_packages or []
          return sorted(flatten(map(self._pkg_names, pkgs)))
  
class Installer:
class DevelopInstaller(Installer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\package_index.py
-----------------------------
> """PyPI and direct package downloading"""
  import sys
  import os
  import re
def parse_requirement_arg(spec):
def parse_bdist_wininst(name):
def egg_info_for_url(url):
def distros_for_url(url, metadata=None):
def distros_for_location(location, basename, metadata=None):
def distros_for_filename(filename, metadata=None):
def interpret_distro_name(
def unique_values(func):
def find_external_links(url, page):
class ContentChecker:
class HashChecker(ContentChecker):
class PackageIndex(Environment):
def decode_entity(match):
def htmldecode(text):
def socket_timeout(timeout=15):
def _encode_auth(auth):
class Credential:
class PyPIConfig(configparser.RawConfigParser):
def open_with_auth(url, opener=urllib.request.urlopen):
def _splituser(host):
def fix_sf_url(url):
def local_open(url):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\py34compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\sandbox.py
-----------------------------
>     """
      Python 3 implementation of execfile.
def _execfile(filename, globals, locals=None):
def save_argv(repl=None):
def save_path():
def override_temp(replacement):
def pushd(target):
class UnpickleableException(Exception):
class ExceptionSaver:
def save_modules():
def _clear_modules(module_names):
def save_pkg_resources_state():
def setup_context(setup_dir):
def _needs_hiding(mod_name):
def hide_setuptools():
def run_setup(setup_script, args):
class AbstractSandbox:
class DirectorySandbox(AbstractSandbox):
class SandboxViolation(DistutilsError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\unicode_utils.py
-----------------------------
>     """
      Ensure that the given path is decoded,
      NONE when no expected encoding works
def decompose(path):
def filesys_decode(path):
def try_encode(string, enc):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\wheel.py
-----------------------------
> """Wheels support."""
  
  import email
  import itertools
def unpack(src_dir, dst_dir):
def disable_info_traces():
class Wheel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\windows_support.py
-----------------------------
>     """
      Set the hidden attribute on a file or directory.
  
      From http://stackoverflow.com/questions/19622133/
def windows_only(func):
def hide_file(path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_deprecation_warning.py
-----------------------------
>     """
      Base class for warning deprecations in ``setuptools``
  
      This class is not derived from ``DeprecationWarning``, and as such is
class SetuptoolsDeprecationWarning(Warning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_entry_points.py
-----------------------------
>     """
      Exercise one of the dynamic properties to trigger
      the pattern match.
def ensure_valid(ep):
def load_group(value, group):
def by_group_and_name(ep):
def validate(eps: metadata.EntryPoints):
def load(eps):
def _(eps):
def render(eps: metadata.EntryPoints):
def render_items(eps):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_imp.py
-----------------------------
> """
  Re-implementation of find_module and get_frozen_object
  from the deprecated imp module.
def find_spec(module, paths):
def find_module(module, paths=None):
def get_frozen_object(module, paths=None):
def get_module(module, paths, info):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_importlib.py
-----------------------------
>     """
      Ensure importlib_metadata doesn't provide older, incompatible
      Distributions.
  
def disable_importlib_metadata_finder(metadata):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_itertools.py
-----------------------------
>     """
      Wrap an iterable to raise a ValueError if non-unique values are encountered.
  
      >>> list(ensure_unique('abc'))
def ensure_unique(iterable, key=lambda x: x):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_path.py
-----------------------------
>     """Ensure that the parent directory of `path` exists"""
      dirname = os.path.dirname(path)
      os.makedirs(dirname, exist_ok=True)
  
def ensure_directory(path):
def same_path(p1: _Path, p2: _Path) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\_reqs.py
-----------------------------
>     """
      Yield requirement strings for each specification in `strs`.
  
      `strs` must be a string, or a (possibly-nested) iterable thereof.
def parse_strings(strs):
def parse(strs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\setuptools\__init__.py
-----------------------------
> """Extensions to the 'distutils' for large or complex distributions"""
  
  import functools
  import os
def _install_setup_requires(attrs):
def setup(**attrs):
class Command(_Command):
def _find_all_simple(path):
def findall(dir=os.curdir):
def convert_path(pathname):
class sic(str):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\posix\proc.py
-----------------------------
>     """Detect /proc filesystem style.
  
      This checks the /proc/{pid} directory for possible formats. Returns one of
      the following as str:
def detect_proc():
def _use_bsd_stat_format():
def _get_ppid(pid, name):
def _get_cmdline(pid):
class ProcFormatError(EnvironmentError):
def iter_process_parents(pid, max_depth=10):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\posix\ps.py
-----------------------------
>     """Try to look up the process tree via the output of `ps`."""
      try:
          cmd = ["ps", "-ww", "-o", "pid=", "-o", "ppid=", "-o", "args="]
          output = subprocess.check_output(cmd)
class PsNotAvailable(EnvironmentError):
def iter_process_parents(pid, max_depth=10):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\posix\_core.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\posix\__init__.py
-----------------------------
>     r"""qemu-
          (alpha
          |armeb
          |arm
def _iter_process_parents(pid, max_depth=10):
def _get_login_shell(proc_cmd):
def _get_interpreter_shell(proc_name, proc_args):
def _get_shell(cmd, *args):
def get_shell(pid=None, max_depth=10):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\nt.py
-----------------------------
def _check_handle(error_val=0):
def _check_expected(expected):
class ProcessEntry32(ctypes.Structure):
def _handle(f, *args, **kwargs):
def _iter_processes():
def _get_full_path(proch):
def get_shell(pid=None, max_depth=10):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\_core.py
-----------------------------
class ShellDetectionFailure(EnvironmentError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\shellingham\__init__.py
-----------------------------
def detect_shell(pid=None, max_depth=10):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\test\lib.py
-----------------------------
> """Provide base classes for the test system"""
  from unittest import TestCase
  import os
  import tempfile
class FileCreator:
class TestBase(TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\test\test_buf.py
-----------------------------
class TestBuf(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\test\test_mman.py
-----------------------------
class TestMMan(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\test\test_tutorial.py
-----------------------------
class TestTutorial(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\test\test_util.py
-----------------------------
class TestMMan(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\test\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\buf.py
-----------------------------
> """Module with a simple buffer implementation using the memory manager"""
  import sys
  
  __all__ = ["SlidingWindowMapBuffer"]
class SlidingWindowMapBuffer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\mman.py
-----------------------------
> """Module containing a memory memory manager which provides a sliding window on a number of 
memory mapped files"""
  from .util import (
      MapWindow,
      MapRegion,
class WindowCursor:
class StaticWindowMapManager:
class SlidingWindowMapManager(StaticWindowMapManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\util.py
-----------------------------
> """Module containing a memory memory manager which provides a sliding window on a number of 
memory mapped files"""
  import os
  import sys
  
def align_to_mmap(num, round_up):
def is_64_bit():
class MapWindow:
class MapRegion:
class MapRegionList(list):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\smmap\__init__.py
-----------------------------
> """Initialize the smmap package"""
  
  __author__ = "Sebastian Thiel"
  __contact__ = "byronimo@gmail.com"

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sniffio\_tests\test_sniffio.py
-----------------------------
def test_basics_cvar():
def test_basics_tlocal():
def test_asyncio():
def test_curio():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sniffio\_tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sniffio\_impl.py
-----------------------------
>     """Detect which async library is currently running.
  
      The following libraries are currently supported:
  
class _ThreadLocal(threading.local):
class AsyncLibraryNotFoundError(RuntimeError):
def current_async_library() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sniffio\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sniffio\__init__.py
-----------------------------
> """Top-level package for sniffio."""
  
  __all__ = [
      "current_async_library",

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sortedcontainers\sorteddict.py
-----------------------------
> """Sorted Dict
  ==============
  
  :doc:`Sorted Containers<index>` is an Apache2 licensed Python sorted
class SortedDict(dict):
def _view_delitem(self, index):
class SortedKeysView(KeysView, Sequence):
class SortedItemsView(ItemsView, Sequence):
class SortedValuesView(ValuesView, Sequence):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sortedcontainers\sortedlist.py
-----------------------------
> """Sorted List
  ==============
  
  :doc:`Sorted Containers<index>` is an Apache2 licensed Python sorted
def recursive_repr(fillvalue='...'):
class SortedList(MutableSequence):
def identity(value):
class SortedKeyList(SortedList):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sortedcontainers\sortedset.py
-----------------------------
> """Sorted Set
  =============
  
  :doc:`Sorted Containers<index>` is an Apache2 licensed Python sorted
class SortedSet(MutableSet, Sequence):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sortedcontainers\__init__.py
-----------------------------
> """Sorted Containers -- Sorted List, Sorted Dict, Sorted Set
  
  Sorted Containers is an Apache2 licensed containers library, written in
  pure-Python, and fast as C-extensions.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\connectors\aioodbc.py
-----------------------------
class AsyncAdapt_aioodbc_cursor(AsyncAdapt_dbapi_cursor):
class AsyncAdapt_aioodbc_ss_cursor(
class AsyncAdapt_aioodbc_connection(AsyncAdapt_dbapi_connection):
class AsyncAdaptFallback_aioodbc_connection(
class AsyncAdapt_aioodbc_dbapi:
class aiodbcConnector(PyODBCConnector):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\connectors\asyncio.py
-----------------------------
> """generic asyncio-adapted versions of DBAPI connection and cursor"""
  
  from __future__ import annotations
  
class AsyncIODBAPIConnection(Protocol):
class AsyncIODBAPICursor(Protocol):
class AsyncAdapt_dbapi_module:
class AsyncAdapt_dbapi_cursor:
class AsyncAdapt_dbapi_ss_cursor(AsyncAdapt_dbapi_cursor):
class AsyncAdapt_dbapi_connection(AdaptedConnection):
class AsyncAdaptFallback_dbapi_connection(AsyncAdapt_dbapi_connection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\connectors\pyodbc.py
-----------------------------
class PyODBCConnector(Connector):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\connectors\__init__.py
-----------------------------
>     """Base class for dialect mixins, for DBAPIs that work
      across entirely different database backends.
  
      Currently the only such mixin is pyodbc.
class Connector(Dialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\cyextension\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\aioodbc.py
-----------------------------
> r"""
  .. dialect:: mssql+aioodbc
      :name: aioodbc
      :dbapi: aioodbc
class MSExecutionContext_aioodbc(MSExecutionContext_pyodbc):
class MSDialectAsync_aioodbc(aiodbcConnector, MSDialect_pyodbc):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\base.py
-----------------------------
> """
  .. dialect:: mssql
      :name: Microsoft SQL Server
      :normal_support: 2012+
class REAL(sqltypes.REAL):
class DOUBLE_PRECISION(sqltypes.DOUBLE_PRECISION):
class TINYINT(sqltypes.Integer):
class _MSDate(sqltypes.Date):
class TIME(sqltypes.TIME):
class _BASETIMEIMPL(TIME):
class _DateTimeBase:
class _MSDateTime(_DateTimeBase, sqltypes.DateTime):
class SMALLDATETIME(_DateTimeBase, sqltypes.DateTime):
class DATETIME2(_DateTimeBase, sqltypes.DateTime):
class DATETIMEOFFSET(_DateTimeBase, sqltypes.DateTime):
class _UnicodeLiteral:
class _MSUnicode(_UnicodeLiteral, sqltypes.Unicode):
class _MSUnicodeText(_UnicodeLiteral, sqltypes.UnicodeText):
class TIMESTAMP(sqltypes._Binary):
class ROWVERSION(TIMESTAMP):
class NTEXT(sqltypes.UnicodeText):
class VARBINARY(sqltypes.VARBINARY, sqltypes.LargeBinary):
class IMAGE(sqltypes.LargeBinary):
class XML(sqltypes.Text):
class BIT(sqltypes.Boolean):
class MONEY(sqltypes.TypeEngine):
class SMALLMONEY(sqltypes.TypeEngine):
class MSUUid(sqltypes.Uuid):
class UNIQUEIDENTIFIER(sqltypes.Uuid[sqltypes._UUID_RETURN]):
class SQL_VARIANT(sqltypes.TypeEngine):
class MSTypeCompiler(compiler.GenericTypeCompiler):
class MSExecutionContext(default.DefaultExecutionContext):
class MSSQLCompiler(compiler.SQLCompiler):
class MSSQLStrictCompiler(MSSQLCompiler):
class MSDDLCompiler(compiler.DDLCompiler):
class MSIdentifierPreparer(compiler.IdentifierPreparer):
def _db_plus_owner_listing(fn):
def _db_plus_owner(fn):
def _switch_db(dbname, connection, fn, *arg, **kw):
def _owner_plus_db(dialect, schema):
def _schema_elements(schema):
class MSDialect(default.DefaultDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\information_schema.py
-----------------------------
>     r"""This type casts sql_variant columns in the identity_columns view
      to numeric. This is required because:
  
      * pyodbc does not support sql_variant
class CoerceUnicode(TypeDecorator):
class _cast_on_2005(expression.ColumnElement):
def _compile(element, compiler, **kw):
class NumericSqlVariant(TypeDecorator):
class NVarcharSqlVariant(TypeDecorator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\json.py
-----------------------------
>     """MSSQL JSON type.
  
      MSSQL supports JSON-formatted data as of SQL Server 2016.
  
class JSON(sqltypes.JSON):
class _FormatTypeMixin:
class JSONIndexType(_FormatTypeMixin, sqltypes.JSON.JSONIndexType):
class JSONPathType(_FormatTypeMixin, sqltypes.JSON.JSONPathType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\provision.py
-----------------------------
def post_configure_engine(url, engine, follower_ident):
def generate_driver_url(url, driver, query_str):
def _mssql_create_db(cfg, eng, ident):
def _mssql_drop_db(cfg, eng, ident):
def _mssql_drop_ignore(conn, ident):
def _reap_mssql_dbs(url, idents):
def _mssql_temp_table_keyword_args(cfg, eng):
def _mssql_get_temp_table_name(cfg, eng, base_name):
def drop_all_schema_objects_pre_tables(cfg, eng):
def normalize_sequence(cfg, sequence):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\pymssql.py
-----------------------------
> """
  .. dialect:: mssql+pymssql
      :name: pymssql
      :dbapi: pymssql
class _MSNumeric_pymssql(sqltypes.Numeric):
class MSIdentifierPreparer_pymssql(MSIdentifierPreparer):
class MSDialect_pymssql(MSDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\pyodbc.py
-----------------------------
> r"""
  .. dialect:: mssql+pyodbc
      :name: PyODBC
      :dbapi: pyodbc
class _ms_numeric_pyodbc:
class _MSNumeric_pyodbc(_ms_numeric_pyodbc, sqltypes.Numeric):
class _MSFloat_pyodbc(_ms_numeric_pyodbc, sqltypes.Float):
class _ms_binary_pyodbc:
class _ODBCDateTimeBindProcessor:
class _ODBCDateTime(_ODBCDateTimeBindProcessor, _MSDateTime):
class _ODBCDATETIMEOFFSET(_ODBCDateTimeBindProcessor, DATETIMEOFFSET):
class _VARBINARY_pyodbc(_ms_binary_pyodbc, VARBINARY):
class _BINARY_pyodbc(_ms_binary_pyodbc, BINARY):
class _String_pyodbc(sqltypes.String):
class _Unicode_pyodbc(_MSUnicode):
class _UnicodeText_pyodbc(_MSUnicodeText):
class _JSON_pyodbc(_MSJson):
class _JSONIndexType_pyodbc(_MSJsonIndexType):
class _JSONPathType_pyodbc(_MSJsonPathType):
class MSExecutionContext_pyodbc(MSExecutionContext):
class MSDialect_pyodbc(PyODBCConnector, MSDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mssql\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\aiomysql.py
-----------------------------
> r"""
  .. dialect:: mysql+aiomysql
      :name: aiomysql
      :dbapi: aiomysql
class AsyncAdapt_aiomysql_cursor(AsyncAdapt_dbapi_cursor):
class AsyncAdapt_aiomysql_ss_cursor(
class AsyncAdapt_aiomysql_connection(AsyncAdapt_dbapi_connection):
class AsyncAdaptFallback_aiomysql_connection(AsyncAdapt_aiomysql_connection):
class AsyncAdapt_aiomysql_dbapi(AsyncAdapt_dbapi_module):
class MySQLDialect_aiomysql(MySQLDialect_pymysql):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\asyncmy.py
-----------------------------
> r"""
  .. dialect:: mysql+asyncmy
      :name: asyncmy
      :dbapi: asyncmy
class AsyncAdapt_asyncmy_cursor(AsyncAdapt_dbapi_cursor):
class AsyncAdapt_asyncmy_ss_cursor(
class AsyncAdapt_asyncmy_connection(AsyncAdapt_dbapi_connection):
class AsyncAdaptFallback_asyncmy_connection(AsyncAdapt_asyncmy_connection):
class AsyncAdapt_asyncmy_dbapi(AsyncAdapt_dbapi_module):
class MySQLDialect_asyncmy(MySQLDialect_pymysql):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\base.py
-----------------------------
> r"""
  
  .. dialect:: mysql
      :name: MySQL / MariaDB
class MySQLExecutionContext(default.DefaultExecutionContext):
class MySQLCompiler(compiler.SQLCompiler):
class MySQLDDLCompiler(compiler.DDLCompiler):
class MySQLTypeCompiler(compiler.GenericTypeCompiler):
class MySQLIdentifierPreparer(compiler.IdentifierPreparer):
class MariaDBIdentifierPreparer(MySQLIdentifierPreparer):
class MySQLDialect(default.DefaultDialect):
class _DecodingRow:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\cymysql.py
-----------------------------
> r"""
  
  .. dialect:: mysql+cymysql
      :name: CyMySQL
class _cymysqlBIT(BIT):
class MySQLDialect_cymysql(MySQLDialect_mysqldb):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\dml.py
-----------------------------
>     """Construct a MySQL/MariaDB-specific variant :class:`_mysql.Insert`
      construct.
  
      .. container:: inherited_member
def insert(table: _DMLTableArgument) -> Insert:
class Insert(StandardInsert):
class OnDuplicateClause(ClauseElement):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\enumerated.py
-----------------------------
>     """MySQL ENUM type."""
  
      __visit_name__ = "ENUM"
  
class ENUM(type_api.NativeForEmulated, sqltypes.Enum, _StringType):
class SET(_StringType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\expression.py
-----------------------------
>     """Produce a ``MATCH (X, Y) AGAINST ('TEXT')`` clause.
  
      E.g.::
  
class match(Generative, elements.BinaryExpression[Any]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\json.py
-----------------------------
>     """MySQL JSON type.
  
      MySQL supports JSON as of version 5.7.
      MariaDB supports JSON (as an alias for LONGTEXT) as of version 10.2.
class JSON(sqltypes.JSON):
class _FormatTypeMixin:
class JSONIndexType(_FormatTypeMixin, sqltypes.JSON.JSONIndexType):
class JSONPathType(_FormatTypeMixin, sqltypes.JSON.JSONPathType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\mariadb.py
-----------------------------
>     """INET4 column type for MariaDB
  
      .. versionadded:: 2.0.37
class INET4(sqltypes.TypeEngine[str]):
class INET6(sqltypes.TypeEngine[str]):
class MariaDBTypeCompiler(MySQLTypeCompiler):
class MariaDBDialect(MySQLDialect):
def loader(driver: str) -> Callable[[], type[MariaDBDialect]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\mariadbconnector.py
-----------------------------
> """
  
  .. dialect:: mysql+mariadbconnector
      :name: MariaDB Connector/Python
class _MariaDBUUID(sqltypes.UUID[sqltypes._UUID_RETURN]):
class MySQLExecutionContext_mariadbconnector(MySQLExecutionContext):
class MySQLCompiler_mariadbconnector(MySQLCompiler):
class MySQLDialect_mariadbconnector(MySQLDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\mysqlconnector.py
-----------------------------
> r"""
  .. dialect:: mysql+mysqlconnector
      :name: MySQL Connector/Python
      :dbapi: myconnpy
class MySQLExecutionContext_mysqlconnector(MySQLExecutionContext):
class MySQLCompiler_mysqlconnector(MySQLCompiler):
class IdentifierPreparerCommon_mysqlconnector:
class MySQLIdentifierPreparer_mysqlconnector(
class MariaDBIdentifierPreparer_mysqlconnector(
class _myconnpyBIT(BIT):
class MySQLDialect_mysqlconnector(MySQLDialect):
class MariaDBDialect_mysqlconnector(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\mysqldb.py
-----------------------------
> """
  
  .. dialect:: mysql+mysqldb
      :name: mysqlclient (maintained fork of MySQL-Python)
class MySQLExecutionContext_mysqldb(MySQLExecutionContext):
class MySQLCompiler_mysqldb(MySQLCompiler):
class MySQLDialect_mysqldb(MySQLDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\provision.py
-----------------------------
def generate_driver_url(url, driver, query_str):
def _mysql_create_db(cfg, eng, ident):
def _mysql_configure_follower(config, ident):
def _mysql_drop_db(cfg, eng, ident):
def _mysql_temp_table_keyword_args(cfg, eng):
def _upsert(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\pymysql.py
-----------------------------
> r"""
  
  .. dialect:: mysql+pymysql
      :name: PyMySQL
class MySQLDialect_pymysql(MySQLDialect_mysqldb):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\pyodbc.py
-----------------------------
> r"""
  
  .. dialect:: mysql+pyodbc
      :name: PyODBC
class _pyodbcTIME(TIME):
class MySQLExecutionContext_pyodbc(MySQLExecutionContext):
class MySQLDialect_pyodbc(PyODBCConnector, MySQLDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\reflection.py
-----------------------------
>     """Stores raw information about a SHOW CREATE TABLE statement."""
  
      charset: Optional[str]
  
class ReflectedState:
class MySQLTableDefinitionParser:
def _pr_compile(
def _pr_compile(
def _pr_compile(
def _re_compile(regex: str) -> re.Pattern[Any]:
def _strip_values(values: Sequence[str]) -> List[str]:
def cleanup_text(raw_text: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\reserved_words.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\types.py
-----------------------------
>     """Base for MySQL numeric types.
  
      This is the base both for NUMERIC as well as INTEGER, hence
      it's a mixin.
class _NumericType:
class _FloatType(_NumericType, sqltypes.Float[Union[decimal.Decimal, float]]):
class _IntegerType(_NumericType, sqltypes.Integer):
class _StringType(sqltypes.String):
class _MatchType(
class NUMERIC(_NumericType, sqltypes.NUMERIC[Union[decimal.Decimal, float]]):
class DECIMAL(_NumericType, sqltypes.DECIMAL[Union[decimal.Decimal, float]]):
class DOUBLE(_FloatType, sqltypes.DOUBLE[Union[decimal.Decimal, float]]):
class REAL(_FloatType, sqltypes.REAL[Union[decimal.Decimal, float]]):
class FLOAT(_FloatType, sqltypes.FLOAT[Union[decimal.Decimal, float]]):
class INTEGER(_IntegerType, sqltypes.INTEGER):
class BIGINT(_IntegerType, sqltypes.BIGINT):
class MEDIUMINT(_IntegerType):
class TINYINT(_IntegerType):
class SMALLINT(_IntegerType, sqltypes.SMALLINT):
class BIT(sqltypes.TypeEngine[Any]):
class TIME(sqltypes.TIME):
class TIMESTAMP(sqltypes.TIMESTAMP):
class DATETIME(sqltypes.DATETIME):
class YEAR(sqltypes.TypeEngine[Any]):
class TEXT(_StringType, sqltypes.TEXT):
class TINYTEXT(_StringType):
class MEDIUMTEXT(_StringType):
class LONGTEXT(_StringType):
class VARCHAR(_StringType, sqltypes.VARCHAR):
class CHAR(_StringType, sqltypes.CHAR):
class NVARCHAR(_StringType, sqltypes.NVARCHAR):
class NCHAR(_StringType, sqltypes.NCHAR):
class TINYBLOB(sqltypes._Binary):
class MEDIUMBLOB(sqltypes._Binary):
class LONGBLOB(sqltypes._Binary):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\mysql\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\base.py
-----------------------------
> r"""
  .. dialect:: oracle
      :name: Oracle Database
      :normal_support: 11+
class OracleTypeCompiler(compiler.GenericTypeCompiler):
class OracleCompiler(compiler.SQLCompiler):
class OracleDDLCompiler(compiler.DDLCompiler):
class OracleIdentifierPreparer(compiler.IdentifierPreparer):
class OracleExecutionContext(default.DefaultExecutionContext):
class OracleDialect(default.DefaultDialect):
class _OuterJoinColumn(sql.ClauseElement):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\cx_oracle.py
-----------------------------
> r""".. dialect:: oracle+cx_oracle
      :name: cx-Oracle
      :dbapi: cx_oracle
      :connectstring: oracle+cx_oracle://user:pass@hostname:port[/dbname][?service_name=<servi
ce>[&key=value&key=value...]]
class and "purity" when acquiring a connection from the SessionPool.  Refer to
class _OracleInteger(sqltypes.Integer):
class _OracleNumeric(sqltypes.Numeric):
class _OracleUUID(sqltypes.Uuid):
class _OracleBinaryFloat(_OracleNumeric):
class _OracleBINARY_FLOAT(_OracleBinaryFloat, oracle.BINARY_FLOAT):
class _OracleBINARY_DOUBLE(_OracleBinaryFloat, oracle.BINARY_DOUBLE):
class _OracleNUMBER(_OracleNumeric):
class _CXOracleDate(oracle._OracleDate):
class _CXOracleTIMESTAMP(_OracleDateLiteralRender, sqltypes.TIMESTAMP):
class _LOBDataType:
class _OracleChar(sqltypes.CHAR):
class _OracleNChar(sqltypes.NCHAR):
class _OracleUnicodeStringNCHAR(oracle.NVARCHAR2):
class _OracleUnicodeStringCHAR(sqltypes.Unicode):
class _OracleUnicodeTextNCLOB(_LOBDataType, oracle.NCLOB):
class _OracleUnicodeTextCLOB(_LOBDataType, sqltypes.UnicodeText):
class _OracleText(_LOBDataType, sqltypes.Text):
class _OracleLong(_LOBDataType, oracle.LONG):
class _OracleString(sqltypes.String):
class _OracleEnum(sqltypes.Enum):
class _OracleBinary(_LOBDataType, sqltypes.LargeBinary):
class _OracleInterval(oracle.INTERVAL):
class _OracleRaw(oracle.RAW):
class _OracleRowid(oracle.ROWID):
class OracleCompiler_cx_oracle(OracleCompiler):
class OracleExecutionContext_cx_oracle(OracleExecutionContext):
class OracleDialect_cx_oracle(OracleDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\dictionary.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\oracledb.py
-----------------------------
> r""".. dialect:: oracle+oracledb
      :name: python-oracledb
      :dbapi: oracledb
      :connectstring: oracle+oracledb://user:pass@hostname:port[/dbname][?service_name=<servic
e>[&key=value&key=value...]]
class OracleExecutionContext_oracledb(
class OracleDialect_oracledb(_cx_oracle.OracleDialect_cx_oracle):
class AsyncAdapt_oracledb_cursor(AsyncAdapt_dbapi_cursor):
class AsyncAdapt_oracledb_ss_cursor(
class AsyncAdapt_oracledb_connection(AsyncAdapt_dbapi_connection):
class AsyncAdaptFallback_oracledb_connection(
class OracledbAdaptDBAPI:
class OracleExecutionContextAsync_oracledb(OracleExecutionContext_oracledb):
class OracleDialectAsync_oracledb(OracleDialect_oracledb):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\provision.py
-----------------------------
>     """Set database options (db_opts) for a test database that we created."""
      if (
          options.oracledb_thick_mode
          and sa_url.make_url(db_url).get_driver_name() == "oracledb"
def _oracle_create_db(cfg, eng, ident):
def _oracle_configure_follower(config, ident):
def _ora_drop_ignore(conn, dbname):
def _ora_drop_all_schema_objects_pre_tables(cfg, eng):
def _ora_drop_all_schema_objects_post_tables(cfg, eng):
def _oracle_drop_db(cfg, eng, ident):
def _ora_stop_test_class_outside_fixtures(config, db, cls):
def _purge_recyclebin(eng, schema=None):
def _oracle_post_configure_engine(url, engine, follower_ident):
def _reap_oracle_dbs(url, idents):
def _oracle_follower_url_from_main(url, ident):
def _oracle_temp_table_keyword_args(cfg, eng):
def _oracle_set_default_schema_on_connection(
def _update_db_opts(db_url, db_opts, options):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\types.py
-----------------------------
>     """Oracle Database FLOAT.
  
      This is the same as :class:`_sqltypes.FLOAT` except that
      an Oracle Database -specific :paramref:`_oracle.FLOAT.binary_precision`
class RAW(sqltypes._Binary):
class NCLOB(sqltypes.Text):
class VARCHAR2(VARCHAR):
class NUMBER(sqltypes.Numeric, sqltypes.Integer):
class FLOAT(sqltypes.FLOAT):
class BINARY_DOUBLE(sqltypes.Double):
class BINARY_FLOAT(sqltypes.Float):
class BFILE(sqltypes.LargeBinary):
class LONG(sqltypes.Text):
class _OracleDateLiteralRender:
class DATE(_OracleDateLiteralRender, sqltypes.DateTime):
class _OracleDate(_OracleDateLiteralRender, sqltypes.Date):
class INTERVAL(sqltypes.NativeForEmulated, sqltypes._AbstractInterval):
class TIMESTAMP(sqltypes.TIMESTAMP):
class ROWID(sqltypes.TypeEngine):
class _OracleBoolean(sqltypes.Boolean):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\vector.py
-----------------------------
>     """Enum representing different types of VECTOR index structures.
  
      See :ref:`oracle_vector_datatype` for background.
  
class VectorIndexType(Enum):
class VectorDistanceType(Enum):
class VectorStorageFormat(Enum):
class VectorStorageType(Enum):
class VectorIndexConfig:
class SparseVector:
class VECTOR(types.TypeEngine):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\oracle\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\array.py
-----------------------------
>     """A synonym for the ARRAY-level :meth:`.ARRAY.Comparator.any` method.
      See that method for details.
  
def Any(
def All(
class array(expression.ExpressionClauseList[_T]):
class ARRAY(sqltypes.ARRAY[_T]):
def _split_enum_values(array_string: str) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py
-----------------------------
> r"""
  .. dialect:: postgresql+asyncpg
      :name: asyncpg
      :dbapi: asyncpg
class AsyncpgARRAY(PGARRAY):
class AsyncpgString(sqltypes.String):
class AsyncpgREGCONFIG(REGCONFIG):
class AsyncpgTime(sqltypes.Time):
class AsyncpgBit(BIT):
class AsyncpgByteA(BYTEA):
class AsyncpgDate(sqltypes.Date):
class AsyncpgDateTime(sqltypes.DateTime):
class AsyncpgBoolean(sqltypes.Boolean):
class AsyncPgInterval(INTERVAL):
class AsyncPgEnum(ENUM):
class AsyncpgInteger(sqltypes.Integer):
class AsyncpgSmallInteger(sqltypes.SmallInteger):
class AsyncpgBigInteger(sqltypes.BigInteger):
class AsyncpgJSON(json.JSON):
class AsyncpgJSONB(json.JSONB):
class AsyncpgJSONIndexType(sqltypes.JSON.JSONIndexType):
class AsyncpgJSONIntIndexType(sqltypes.JSON.JSONIntIndexType):
class AsyncpgJSONStrIndexType(sqltypes.JSON.JSONStrIndexType):
class AsyncpgJSONPathType(json.JSONPathType):
class AsyncpgNumeric(sqltypes.Numeric):
class AsyncpgFloat(AsyncpgNumeric, sqltypes.Float):
class AsyncpgREGCLASS(REGCLASS):
class AsyncpgOID(OID):
class AsyncpgCHAR(sqltypes.CHAR):
class _AsyncpgRange(ranges.AbstractSingleRangeImpl):
class _AsyncpgMultiRange(ranges.AbstractMultiRangeImpl):
class PGExecutionContext_asyncpg(PGExecutionContext):
class PGCompiler_asyncpg(PGCompiler):
class PGIdentifierPreparer_asyncpg(PGIdentifierPreparer):
class AsyncAdapt_asyncpg_cursor:
class AsyncAdapt_asyncpg_ss_cursor(AsyncAdapt_asyncpg_cursor):
class AsyncAdapt_asyncpg_connection(AdaptedConnection):
class AsyncAdaptFallback_asyncpg_connection(AsyncAdapt_asyncpg_connection):
class AsyncAdapt_asyncpg_dbapi:
class PGDialect_asyncpg(PGDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\base.py
-----------------------------
> r"""
  .. dialect:: postgresql
      :name: PostgreSQL
      :normal_support: 9.6+
class PGCompiler(compiler.SQLCompiler):
class PGDDLCompiler(compiler.DDLCompiler):
class PGTypeCompiler(compiler.GenericTypeCompiler):
class PGIdentifierPreparer(compiler.IdentifierPreparer):
class ReflectedNamedType(TypedDict):
class ReflectedDomainConstraint(TypedDict):
class ReflectedDomain(ReflectedNamedType):
class ReflectedEnum(ReflectedNamedType):
class PGInspector(reflection.Inspector):
class PGExecutionContext(default.DefaultExecutionContext):
class PGReadOnlyConnectionCharacteristic(
class PGDeferrableConnectionCharacteristic(
class PGDialect(default.DefaultDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\dml.py
-----------------------------
>     """Construct a PostgreSQL-specific variant :class:`_postgresql.Insert`
      construct.
  
      .. container:: inherited_member
def insert(table: _DMLTableArgument) -> Insert:
class Insert(StandardInsert):
class OnConflictClause(ClauseElement):
class OnConflictDoNothing(OnConflictClause):
class OnConflictDoUpdate(OnConflictClause):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\ext.py
-----------------------------
>     """Represent a PostgreSQL aggregate order by expression.
  
      E.g.::
  
class aggregate_order_by(expression.ColumnElement[_T]):
class ExcludeConstraint(ColumnCollectionConstraint):
def array_agg(*arg, **kw):
class _regconfig_fn(functions.GenericFunction[_T]):
class to_tsvector(_regconfig_fn):
class to_tsquery(_regconfig_fn):
class plainto_tsquery(_regconfig_fn):
class phraseto_tsquery(_regconfig_fn):
class websearch_to_tsquery(_regconfig_fn):
class ts_headline(_regconfig_fn):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\hstore.py
-----------------------------
>     """Represent the PostgreSQL HSTORE type.
  
      The :class:`.HSTORE` type stores dictionaries containing strings, e.g.::
  
class HSTORE(sqltypes.Indexable, sqltypes.Concatenable, sqltypes.TypeEngine):
class hstore(sqlfunc.GenericFunction):
class _HStoreDefinedFunction(sqlfunc.GenericFunction):
class _HStoreDeleteFunction(sqlfunc.GenericFunction):
class _HStoreSliceFunction(sqlfunc.GenericFunction):
class _HStoreKeysFunction(sqlfunc.GenericFunction):
class _HStoreValsFunction(sqlfunc.GenericFunction):
class _HStoreArrayFunction(sqlfunc.GenericFunction):
class _HStoreMatrixFunction(sqlfunc.GenericFunction):
def _parse_error(hstore_str, pos):
def _parse_hstore(hstore_str):
def _serialize_hstore(val):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\json.py
-----------------------------
>     """JSON Path Type.
  
      This is usually required to cast literal values to json path when using
      json search like function, such as ``jsonb_path_query_array`` or
class JSONPathType(sqltypes.JSON.JSONPathType):
class JSONPATH(JSONPathType):
class JSON(sqltypes.JSON):
class JSONB(JSON):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\named_types.py
-----------------------------
>     """Base for named types."""
  
      __abstract__ = True
      DDLGenerator: Type[NamedTypeGenerator]
class NamedType(schema.SchemaVisitable, sqltypes.TypeEngine):
class NamedTypeGenerator(InvokeCreateDDLBase):
class NamedTypeDropper(InvokeDropDDLBase):
class EnumGenerator(NamedTypeGenerator):
class EnumDropper(NamedTypeDropper):
class ENUM(NamedType, type_api.NativeForEmulated, sqltypes.Enum):
class DomainGenerator(NamedTypeGenerator):
class DomainDropper(NamedTypeDropper):
class DOMAIN(NamedType, sqltypes.SchemaType):
class CreateEnumType(schema._CreateDropBase):
class DropEnumType(schema._CreateDropBase):
class CreateDomainType(schema._CreateDropBase):
class DropDomainType(schema._CreateDropBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\operators.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\pg8000.py
-----------------------------
> r"""
  .. dialect:: postgresql+pg8000
      :name: pg8000
      :dbapi: pg8000
class _PGString(sqltypes.String):
class _PGNumeric(sqltypes.Numeric):
class _PGFloat(_PGNumeric, sqltypes.Float):
class _PGNumericNoBind(_PGNumeric):
class _PGJSON(JSON):
class _PGJSONB(JSONB):
class _PGJSONIndexType(sqltypes.JSON.JSONIndexType):
class _PGJSONIntIndexType(sqltypes.JSON.JSONIntIndexType):
class _PGJSONStrIndexType(sqltypes.JSON.JSONStrIndexType):
class _PGJSONPathType(JSONPathType):
class _PGEnum(ENUM):
class _PGInterval(INTERVAL):
class _PGTimeStamp(sqltypes.DateTime):
class _PGDate(sqltypes.Date):
class _PGTime(sqltypes.Time):
class _PGInteger(sqltypes.Integer):
class _PGSmallInteger(sqltypes.SmallInteger):
class _PGNullType(sqltypes.NullType):
class _PGBigInteger(sqltypes.BigInteger):
class _PGBoolean(sqltypes.Boolean):
class _PGARRAY(PGARRAY):
class _PGOIDVECTOR(_SpaceVector, OIDVECTOR):
class _Pg8000Range(ranges.AbstractSingleRangeImpl):
class _Pg8000MultiRange(ranges.AbstractMultiRangeImpl):
class PGExecutionContext_pg8000(PGExecutionContext):
class ServerSideCursor:
class PGCompiler_pg8000(PGCompiler):
class PGIdentifierPreparer_pg8000(PGIdentifierPreparer):
class PGDialect_pg8000(PGDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\pg_catalog.py
-----------------------------
class NAME(TypeDecorator[str]):
class PG_NODE_TREE(TypeDecorator[str]):
class INT2VECTOR(TypeDecorator[Sequence[int]]):
class OIDVECTOR(TypeDecorator[Sequence[int]]):
class _SpaceVector:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\provision.py
-----------------------------
>     """Ensure there are no locks on the current username/database."""
  
      result = connection.exec_driver_sql(
          "select pid, state, wait_event_type, query "
def _pg_create_db(cfg, eng, ident):
def _pg_drop_db(cfg, eng, ident):
def _postgresql_temp_table_keyword_args(cfg, eng):
def _postgresql_set_default_schema_on_connection(
def drop_all_schema_objects_pre_tables(cfg, eng):
def drop_all_schema_objects_post_tables(cfg, eng):
def prepare_for_drop_tables(config, connection):
def _upsert(
def _create_citext_extension(url, engine, follower_ident):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\psycopg.py
-----------------------------
> r"""
  .. dialect:: postgresql+psycopg
      :name: psycopg (a.k.a. psycopg 3)
      :dbapi: psycopg
class _PGString(sqltypes.String):
class _PGREGCONFIG(REGCONFIG):
class _PGJSON(JSON):
class _PGJSONB(JSONB):
class _PGJSONIntIndexType(sqltypes.JSON.JSONIntIndexType):
class _PGJSONStrIndexType(sqltypes.JSON.JSONStrIndexType):
class _PGJSONPathType(JSONPathType):
class _PGInterval(INTERVAL):
class _PGTimeStamp(sqltypes.DateTime):
class _PGDate(sqltypes.Date):
class _PGTime(sqltypes.Time):
class _PGInteger(sqltypes.Integer):
class _PGSmallInteger(sqltypes.SmallInteger):
class _PGNullType(sqltypes.NullType):
class _PGBigInteger(sqltypes.BigInteger):
class _PGBoolean(sqltypes.Boolean):
class _PsycopgRange(ranges.AbstractSingleRangeImpl):
class _PsycopgMultiRange(ranges.AbstractMultiRangeImpl):
class PGExecutionContext_psycopg(_PGExecutionContext_common_psycopg):
class PGCompiler_psycopg(PGCompiler):
class PGIdentifierPreparer_psycopg(PGIdentifierPreparer):
def _log_notices(diagnostic):
class PGDialect_psycopg(_PGDialect_common_psycopg):
class AsyncAdapt_psycopg_cursor:
class AsyncAdapt_psycopg_ss_cursor(AsyncAdapt_psycopg_cursor):
class AsyncAdapt_psycopg_connection(AdaptedConnection):
class AsyncAdaptFallback_psycopg_connection(AsyncAdapt_psycopg_connection):
class PsycopgAdaptDBAPI:
class PGDialectAsync_psycopg(PGDialect_psycopg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\psycopg2.py
-----------------------------
> r"""
  .. dialect:: postgresql+psycopg2
      :name: psycopg2
      :dbapi: psycopg2
class _PGJSON(JSON):
class _PGJSONB(JSONB):
class _Psycopg2Range(ranges.AbstractSingleRangeImpl):
class _Psycopg2NumericRange(_Psycopg2Range):
class _Psycopg2DateRange(_Psycopg2Range):
class _Psycopg2DateTimeRange(_Psycopg2Range):
class _Psycopg2DateTimeTZRange(_Psycopg2Range):
class PGExecutionContext_psycopg2(_PGExecutionContext_common_psycopg):
class PGIdentifierPreparer_psycopg2(PGIdentifierPreparer):
class ExecutemanyMode(FastIntFlag):
class PGDialect_psycopg2(_PGDialect_common_psycopg):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\psycopg2cffi.py
-----------------------------
> r"""
  .. dialect:: postgresql+psycopg2cffi
      :name: psycopg2cffi
      :dbapi: psycopg2cffi
class PGDialect_psycopg2cffi(PGDialect_psycopg2):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\ranges.py
-----------------------------
>     """Represent a PostgreSQL range.
  
      E.g.::
  
class Range(Generic[_T]):
class MultiRange(List[Range[_T]]):
class AbstractRange(sqltypes.TypeEngine[_T]):
class AbstractSingleRange(AbstractRange[Range[_T]]):
class AbstractSingleRangeImpl(AbstractSingleRange[_T]):
class AbstractMultiRange(AbstractRange[Sequence[Range[_T]]]):
class AbstractMultiRangeImpl(AbstractMultiRange[_T]):
class INT4RANGE(AbstractSingleRange[int]):
class INT8RANGE(AbstractSingleRange[int]):
class NUMRANGE(AbstractSingleRange[Decimal]):
class DATERANGE(AbstractSingleRange[date]):
class TSRANGE(AbstractSingleRange[datetime]):
class TSTZRANGE(AbstractSingleRange[datetime]):
class INT4MULTIRANGE(AbstractMultiRange[int]):
class INT8MULTIRANGE(AbstractMultiRange[int]):
class NUMMULTIRANGE(AbstractMultiRange[Decimal]):
class DATEMULTIRANGE(AbstractMultiRange[date]):
class TSMULTIRANGE(AbstractMultiRange[datetime]):
class TSTZMULTIRANGE(AbstractMultiRange[datetime]):
def _is_int32(r: Range[int]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\types.py
-----------------------------
>     r"""Provide the PostgreSQL MONEY type.
  
      Depending on driver, result rows using this type may return a
      string value which includes currency symbols.
class PGUuid(sqltypes.UUID[sqltypes._UUID_RETURN]):
class BYTEA(sqltypes.LargeBinary):
class _NetworkAddressTypeMixin:
class INET(_NetworkAddressTypeMixin, sqltypes.TypeEngine[str]):
class CIDR(_NetworkAddressTypeMixin, sqltypes.TypeEngine[str]):
class MACADDR(_NetworkAddressTypeMixin, sqltypes.TypeEngine[str]):
class MACADDR8(_NetworkAddressTypeMixin, sqltypes.TypeEngine[str]):
class MONEY(sqltypes.TypeEngine[str]):
class OID(sqltypes.TypeEngine[int]):
class REGCONFIG(sqltypes.TypeEngine[str]):
class TSQUERY(sqltypes.TypeEngine[str]):
class REGCLASS(sqltypes.TypeEngine[str]):
class TIMESTAMP(sqltypes.TIMESTAMP):
class TIME(sqltypes.TIME):
class INTERVAL(type_api.NativeForEmulated, sqltypes._AbstractInterval):
class BIT(sqltypes.TypeEngine[int]):
class TSVECTOR(sqltypes.TypeEngine[str]):
class CITEXT(sqltypes.TEXT):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\_psycopg_common.py
-----------------------------
class _PsycopgNumeric(sqltypes.Numeric):
class _PsycopgFloat(_PsycopgNumeric):
class _PsycopgHStore(HSTORE):
class _PsycopgARRAY(PGARRAY):
class _PsycopgINT2VECTOR(_SpaceVector, INT2VECTOR):
class _PsycopgOIDVECTOR(_SpaceVector, OIDVECTOR):
class _PGExecutionContext_common_psycopg(PGExecutionContext):
class _PGDialect_common_psycopg(PGDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\postgresql\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\aiosqlite.py
-----------------------------
> r"""
  
  .. dialect:: sqlite+aiosqlite
      :name: aiosqlite
class AsyncAdapt_aiosqlite_cursor:
class AsyncAdapt_aiosqlite_ss_cursor(AsyncAdapt_aiosqlite_cursor):
class AsyncAdapt_aiosqlite_connection(AdaptedConnection):
class AsyncAdaptFallback_aiosqlite_connection(AsyncAdapt_aiosqlite_connection):
class AsyncAdapt_aiosqlite_dbapi(AsyncAdapt_dbapi_module):
class SQLiteExecutionContext_aiosqlite(SQLiteExecutionContext):
class SQLiteDialect_aiosqlite(SQLiteDialect_pysqlite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\base.py
-----------------------------
>         """
          select x.a, x.b from x where a=1
          union
          select x.a, x.b from x where a=2
class _SQliteJson(JSON):
class _DateTimeMixin:
class DATETIME(_DateTimeMixin, sqltypes.DateTime):
class DATE(_DateTimeMixin, sqltypes.Date):
class TIME(_DateTimeMixin, sqltypes.Time):
class SQLiteCompiler(compiler.SQLCompiler):
class SQLiteDDLCompiler(compiler.DDLCompiler):
class SQLiteTypeCompiler(compiler.GenericTypeCompiler):
class SQLiteIdentifierPreparer(compiler.IdentifierPreparer):
class SQLiteExecutionContext(default.DefaultExecutionContext):
class SQLiteDialect(default.DefaultDialect):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\dml.py
-----------------------------
>     """Construct a sqlite-specific variant :class:`_sqlite.Insert`
      construct.
  
      .. container:: inherited_member
def insert(table: _DMLTableArgument) -> Insert:
class Insert(StandardInsert):
class OnConflictClause(ClauseElement):
class OnConflictDoNothing(OnConflictClause):
class OnConflictDoUpdate(OnConflictClause):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\json.py
-----------------------------
>     """SQLite JSON type.
  
      SQLite supports JSON as of version 3.9 through its JSON1_ extension. Note
      that JSON1_ is a
class JSON(sqltypes.JSON):
class _FormatTypeMixin:
class JSONIndexType(_FormatTypeMixin, sqltypes.JSON.JSONIndexType):
class JSONPathType(_FormatTypeMixin, sqltypes.JSON.JSONPathType):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\provision.py
-----------------------------
>     """given a sqlite url + desired driver + ident, make a canonical
      URL out of it
  
def _format_url(url, driver, ident):
def generate_driver_url(url, driver, query_str):
def _sqlite_follower_url_from_main(url, ident):
def _sqlite_post_configure_engine(url, engine, follower_ident):
def _sqlite_create_db(cfg, eng, ident):
def _sqlite_drop_db(cfg, eng, ident):
def _drop_dbs_w_ident(databasename, driver, ident):
def stop_test_class_outside_fixtures(config, db, cls):
def _sqlite_temp_table_keyword_args(cfg, eng):
def _reap_sqlite_dbs(url, idents):
def _upsert(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\pysqlcipher.py
-----------------------------
> """
  .. dialect:: sqlite+pysqlcipher
      :name: pysqlcipher
      :dbapi: sqlcipher 3 or pysqlcipher
class SQLiteDialect_pysqlcipher(SQLiteDialect_pysqlite):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\pysqlite.py
-----------------------------
> r"""
  .. dialect:: sqlite+pysqlite
      :name: pysqlite
      :dbapi: sqlite3
class _SQLite_pysqliteTimeStamp(DATETIME):
class _SQLite_pysqliteDate(DATE):
class SQLiteDialect_pysqlite(SQLiteDialect):
class _SQLiteDialect_pysqlite_numeric(SQLiteDialect_pysqlite):
class _SQLiteDialect_pysqlite_dollar(_SQLiteDialect_pysqlite_numeric):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\sqlite\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\_typing.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\dialects\__init__.py
-----------------------------
>     """default dialect importer.
  
      plugs into the :class:`.PluginLoader`
      as a first-hit system.
def _auto_fn(name: str) -> Optional[Callable[[], Type[Dialect]]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\base.py
-----------------------------
> """Defines :class:`_engine.Connection` and :class:`_engine.Engine`."""
  from __future__ import annotations
  
  import contextlib
class Connection(ConnectionEventsTarget, inspection.Inspectable["Inspector"]):
class ExceptionContextImpl(ExceptionContext):
class Transaction(TransactionalContext):
class RootTransaction(Transaction):
class NestedTransaction(Transaction):
class TwoPhaseTransaction(RootTransaction):
class Engine(
class OptionEngineMixin(log.Identified):
class OptionEngine(OptionEngineMixin, Engine):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\characteristics.py
-----------------------------
>     """An abstract base for an object that can set, get and reset a
      per-connection characteristic, typically one that gets reset when the
      connection is returned to the connection pool.
  
class ConnectionCharacteristic(abc.ABC):
class IsolationLevelCharacteristic(ConnectionCharacteristic):
class LoggingTokenCharacteristic(ConnectionCharacteristic):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\create.py
-----------------------------
>     """Create a new :class:`_engine.Engine` instance.
  
      The standard calling form is to send the :ref:`URL <database_urls>` as the
      first positional argument, usually a string
def create_engine(
def create_engine(url: Union[str, URL], **kwargs: Any) -> Engine: ...
def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
def engine_from_config(
def create_pool_from_url(
def create_pool_from_url(url: Union[str, URL], **kwargs: Any) -> Pool: ...
def create_pool_from_url(url: Union[str, URL], **kwargs: Any) -> Pool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\cursor.py
-----------------------------
> """Define cursor-specific result set constructs including
class CursorResultMetaData(ResultMetaData):
class ResultFetchStrategy:
class NoCursorFetchStrategy(ResultFetchStrategy):
class NoCursorDQLFetchStrategy(NoCursorFetchStrategy):
class NoCursorDMLFetchStrategy(NoCursorFetchStrategy):
class CursorFetchStrategy(ResultFetchStrategy):
class BufferedRowCursorFetchStrategy(CursorFetchStrategy):
class FullyBufferedCursorFetchStrategy(CursorFetchStrategy):
class _NoResultMetaData(ResultMetaData):
def null_dml_result() -> IteratorResult[Any]:
class CursorResult(Result[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\default.py
-----------------------------
> """Default implementations of per-dialect sqlalchemy.engine classes.
  
  These are semi-private implementation classes which are only of importance
  to database dialect authors; dialects will usually use the classes here
class DefaultDialect(Dialect):
class StrCompileDialect(DefaultDialect):
class DefaultExecutionContext(ExecutionContext):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\events.py
-----------------------------
>     """Available events for
      :class:`_engine.Connection` and :class:`_engine.Engine`.
  
      The methods here define the name of an event as well as the names of
class ConnectionEvents(event.Events[ConnectionEventsTarget]):
class DialectEvents(event.Events[Dialect]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\interfaces.py
-----------------------------
> """Define core interfaces used by the engine system."""
  
  from __future__ import annotations
  
class CacheStats(Enum):
class ExecuteStyle(Enum):
class DBAPIModule(Protocol):
class DBAPIConnection(Protocol):
class DBAPIType(Protocol):
class DBAPICursor(Protocol):
class _CoreKnownExecutionOptions(TypedDict, total=False):
class ReflectedIdentity(TypedDict):
class ReflectedComputed(TypedDict):
class ReflectedColumn(TypedDict):
class ReflectedConstraint(TypedDict):
class ReflectedCheckConstraint(ReflectedConstraint):
class ReflectedUniqueConstraint(ReflectedConstraint):
class ReflectedPrimaryKeyConstraint(ReflectedConstraint):
class ReflectedForeignKeyConstraint(ReflectedConstraint):
class ReflectedIndex(TypedDict):
class ReflectedTableComment(TypedDict):
class BindTyping(Enum):
class Dialect(EventTarget):
class CreateEnginePlugin:
class ExecutionContext:
class ConnectionEventsTarget(EventTarget):
class ExceptionContext:
class AdaptedConnection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\mock.py
-----------------------------
>     """Create a "mock" engine used for echoing DDL.
  
      This is a utility function used for debugging or storing the output of DDL
      sequences as generated by :meth:`_schema.MetaData.create_all`
class MockConnection:
def create_mock_engine(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\processors.py
-----------------------------
> """defines generic type conversion functions, as used in bind and result
  processors.
  
  They all share one common characteristic: None is passed through unchanged.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\reflection.py
-----------------------------
> """Provides an abstraction for obtaining database schema information.
  
  Usage Notes:
  
def cache(
def flexi_cache(
class ObjectKind(Flag):
class ObjectScope(Flag):
class Inspector(inspection.Inspectable["Inspector"]):
class ReflectionDefaults:
class _ReflectionInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\result.py
-----------------------------
> """Define generic result set constructs."""
  
  from __future__ import annotations
  
class ResultMetaData:
class RMKeyView(typing.KeysView[Any]):
class SimpleResultMetaData(ResultMetaData):
def result_tuple(
class _NoRow(Enum):
class ResultInternal(InPlaceGenerative, Generic[_R]):
class _WithKeys:
class Result(_WithKeys, ResultInternal[Row[_TP]]):
class FilterResult(ResultInternal[_R]):
class ScalarResult(FilterResult[_R]):
class TupleResult(FilterResult[_R], util.TypingOnly):
class MappingResult(_WithKeys, FilterResult[RowMapping]):
class FrozenResult(Generic[_TP]):
class IteratorResult(Result[_TP]):
def null_result() -> IteratorResult[Any]:
class ChunkedIteratorResult(IteratorResult[_TP]):
class MergedResult(IteratorResult[_TP]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\row.py
-----------------------------
> """Define row constructs including :class:`.Row`."""
  
  from __future__ import annotations
  
class Row(BaseRow, Sequence[Any], Generic[_TP]):
class ROMappingView(ABC):
class ROMappingKeysValuesView(
class ROMappingItemsView(ROMappingView, typing.ItemsView["_KeyType", Any]):
class RowMapping(BaseRow, typing.Mapping["_KeyType", Any]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\strategies.py
-----------------------------
> """Deprecated mock engine strategy used by Alembic."""
  
  from __future__ import annotations
  
class MockEngineStrategy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\url.py
-----------------------------
> """Provides the :class:`~sqlalchemy.engine.url.URL` class which encapsulates
  information about a database connection specification.
  
  The URL object is created automatically when
class URL(NamedTuple):
def make_url(name_or_url: Union[str, URL]) -> URL:
def _parse_url(name: str) -> URL:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\util.py
-----------------------------
>     """Decorator, memoize a function in a connection.info stash.
  
      Only applicable to functions which take no arguments other than a
      connection.  The memo will be stored in ``connection.info[key]``.
def connection_memoize(key: str) -> Callable[[_C], _C]:
class _TConsSubject(Protocol):
class TransactionalContext:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\_py_processors.py
-----------------------------
> """defines generic type conversion functions, as used in bind and result
  processors.
  
  They all share one common characteristic: None is passed through unchanged.
def str_to_datetime_processor_factory(
def to_decimal_processor_factory(
def to_float(value: Optional[Union[int, float]]) -> Optional[float]:
def to_str(value: Optional[Any]) -> Optional[str]:
def int_to_boolean(value: Optional[int]) -> Optional[bool]:
def str_to_datetime(value: Optional[str]) -> Optional[datetime.datetime]:
def str_to_time(value: Optional[str]) -> Optional[datetime.time]:
def str_to_date(value: Optional[str]) -> Optional[datetime.date]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\_py_row.py
-----------------------------
>         """Row objects are constructed by CursorResult objects."""
          object.__setattr__(self, "_parent", parent)
  
          object.__setattr__(self, "_key_to_index", key_to_index)
class BaseRow:
def rowproxy_reconstructor(
def tuplegetter(*indexes: int) -> _TupleGetterType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\_py_util.py
-----------------------------
def _distill_params_20(
def _distill_raw_params(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\engine\__init__.py
-----------------------------
> """SQL connections, SQL execution and high-level DB-API interface.
  
  The engine package defines the basic components used to interface
  DB-API modules with higher-level statement construction,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\event\api.py
-----------------------------
> """Public API functions for the event system."""
  from __future__ import annotations
  
  from typing import Any
def _event_key(
def listen(
def listens_for(
def remove(target: Any, identifier: str, fn: Callable[..., Any]) -> None:
def contains(target: Any, identifier: str, fn: Callable[..., Any]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\event\attr.py
-----------------------------
> """Attribute implementation for _Dispatch classes.
  
  The various listener targets for a particular event class are represented
  as attributes, which refer to collections of listeners to be fired off.
class RefCollection(util.MemoizedSlots, Generic[_ET]):
class _empty_collection(Collection[_T]):
class _ClsLevelDispatch(RefCollection[_ET]):
class _InstanceLevelDispatch(RefCollection[_ET], Collection[_ListenerFnType]):
class _EmptyListener(_InstanceLevelDispatch[_ET]):
class _MutexProtocol(Protocol):
class _CompoundListener(_InstanceLevelDispatch[_ET]):
class _ListenerCollection(_CompoundListener[_ET]):
class _JoinedListener(_CompoundListener[_ET]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\event\base.py
-----------------------------
> """Base implementation classes.
  
  The public-facing ``Events`` serves as the base class for an event interface;
  its public attributes represent different kinds of events.   These attributes
def _is_event_name(name: str) -> bool:
class _UnpickleDispatch:
class _DispatchCommon(Generic[_ET]):
class _Dispatch(_DispatchCommon[_ET]):
def _remove_dispatcher(cls: Type[_HasEventsDispatch[_ET]]) -> None:
class _HasEventsDispatch(Generic[_ET]):
class _JoinedDispatcher(_DispatchCommon[_ET]):
class Events(_HasEventsDispatch[_ET]):
class dispatcher(Generic[_ET]):
class slots_dispatcher(dispatcher[_ET]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\event\legacy.py
-----------------------------
> """Routines to handle adaption of legacy call signatures,
  generation of deprecation notes and docstrings.
  
def _legacy_signature(
def _wrap_fn_for_legacy(
def _indent(text: str, indent: str) -> str:
def _standard_listen_example(
def _legacy_listen_examples(
def _version_signature_changes(
def _augment_fn_docs(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\event\registry.py
-----------------------------
> """Provides managed registration services on behalf of :func:`.listen`
  arguments.
  
  By "managed registration", we mean that event listening functions and
class EventTarget:
def _collection_gced(ref: weakref.ref[Any]) -> None:
def _stored_in_collection(
def _removed_from_collection(
def _stored_in_collection_multi(
def _clear(
class _EventKey(Generic[_ET]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\event\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\base.py
-----------------------------
>     """@asyncstartablecontext decorator.
  
      the decorated function can be called either as ``async with fn()``, **or**
      ``await fn()``.   This is decidedly different from what
class ReversibleProxy(Generic[_PT]):
class StartableContext(Awaitable[_T_co], abc.ABC):
class GeneratorStartableContext(StartableContext[_T_co]):
def asyncstartablecontext(
class ProxyComparable(ReversibleProxy[_PT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\engine.py
-----------------------------
>     """Create a new async engine instance.
  
      Arguments passed to :func:`_asyncio.create_async_engine` are mostly
      identical to those passed to the :func:`_sa.create_engine` function.
def create_async_engine(url: Union[str, URL], **kw: Any) -> AsyncEngine:
def async_engine_from_config(
def create_async_pool_from_url(url: Union[str, URL], **kwargs: Any) -> Pool:
class AsyncConnectable:
class AsyncConnection(
class AsyncEngine(ProxyComparable[Engine], AsyncConnectable):
class AsyncTransaction(
def _get_sync_engine_or_connection(async_engine: AsyncEngine) -> Engine: ...
def _get_sync_engine_or_connection(
def _get_sync_engine_or_connection(
def _no_insp_for_async_conn_yet(
def _no_insp_for_async_engine_xyet(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\exc.py
-----------------------------
>     """an API can't be used because its result would not be
class AsyncMethodRequired(exc.InvalidRequestError):
class AsyncContextNotStarted(exc.InvalidRequestError):
class AsyncContextAlreadyStarted(exc.InvalidRequestError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\result.py
-----------------------------
>         """Close this result."""
  
          await greenlet_spawn(self._real_result.close)
  
class AsyncCommon(FilterResult[_R]):
class AsyncResult(_WithKeys, AsyncCommon[Row[_TP]]):
class AsyncScalarResult(AsyncCommon[_R]):
class AsyncMappingResult(_WithKeys, AsyncCommon[RowMapping]):
class AsyncTupleResult(AsyncCommon[_R], util.TypingOnly):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\scoping.py
-----------------------------
>     """Provides scoped management of :class:`.AsyncSession` objects.
  
      See the section :ref:`asyncio_scoped_session` for usage details.
  
class async_scoped_session(Generic[_AS]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\session.py
-----------------------------
>     """Mixin class which provides an awaitable accessor for all attributes.
  
      E.g.::
  
class AsyncAttrs:
class AsyncSession(ReversibleProxy[Session]):
class async_sessionmaker(Generic[_AS]):
class _AsyncSessionContextManager(Generic[_AS]):
class AsyncSessionTransaction(
def async_object_session(instance: object) -> Optional[AsyncSession]:
def async_session(session: Session) -> Optional[AsyncSession]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\asyncio\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\declarative\extensions.py
-----------------------------
> """Public API functions and helpers for declarative."""
  from __future__ import annotations
  
  import collections
class ConcreteBase:
class AbstractConcreteBase(ConcreteBase):
class DeferredReflection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\declarative\__init__.py
-----------------------------
def declarative_base(*arg, **kw):
def as_declarative(*arg, **kw):
def has_inherited_table(*arg, **kw):
def synonym_for(*arg, **kw):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\apply.py
-----------------------------
>     """For multiple class passes, re-apply our left-hand side types as mypy
      seems to reset them in place.
  
def apply_mypy_mapped_attr(
def re_apply_declarative_assignments(
def apply_type_to_mapped_statement(
def add_additional_orm_attributes(
def _apply_placeholder_attr_to_class(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\decl_class.py
-----------------------------
>     """Extract mapping information from a SymbolTableNode that's in the
      type.names dictionary.
  
def scan_declarative_assignments_and_apply_types(
def _scan_symbol_table_entry(
def _scan_declarative_decorator_stmt(
def _scan_declarative_assignment_stmt(
def _scan_for_mapped_bases(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\infer.py
-----------------------------
>     """Infer the type of mapping from a relationship.
  
      E.g.::
  
def infer_type_from_right_hand_nameexpr(
def _infer_type_from_relationship(
def _infer_type_from_decl_composite_property(
def _infer_type_from_mapped(
def _infer_type_from_decl_column_property(
def _infer_type_from_decl_column(
def _infer_type_from_left_and_inferred_right(
def _infer_collection_type_from_left_and_inferred_right(
def infer_type_from_left_hand_type_only(
def extract_python_type_from_typeengine(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\names.py
-----------------------------
def has_base_type_id(info: TypeInfo, type_id: int) -> bool:
def mro_has_id(mro: List[TypeInfo], type_id: int) -> bool:
def type_id_for_unbound_type(
def type_id_for_callee(callee: Expression) -> Optional[int]:
def type_id_for_named_node(
def type_id_for_fullname(fullname: str) -> Optional[int]:
def expr_to_mapped_constructor(expr: Expression) -> CallExpr:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\plugin.py
-----------------------------
> """
  Mypy plugin for SQLAlchemy ORM.
  
class SQLAlchemyPlugin(Plugin):
def plugin(version: str) -> TypingType[SQLAlchemyPlugin]:
def _dynamic_class_hook(ctx: DynamicClassDefContext) -> None:
def _fill_in_decorators(ctx: ClassDefContext) -> None:
def _cls_decorator_hook(ctx: ClassDefContext) -> None:
def _base_cls_decorator_hook(ctx: ClassDefContext) -> None:
def _declarative_mixin_hook(ctx: ClassDefContext) -> None:
def _metaclass_cls_hook(ctx: ClassDefContext) -> None:
def _base_cls_hook(ctx: ClassDefContext) -> None:
def _queryable_getattr_hook(ctx: AttributeContext) -> Type:
def _add_globals(ctx: Union[ClassDefContext, DynamicClassDefContext]) -> None:
def _set_declarative_metaclass(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\util.py
-----------------------------
>         """Expands type vars in the context of a subtype when an attribute is
          inherited from a generic super type.
class SQLAlchemyAttribute:
def name_is_dunder(name: str) -> bool:
def _set_info_metadata(info: TypeInfo, key: str, data: Any) -> None:
def _get_info_metadata(info: TypeInfo, key: str) -> Optional[Any]:
def _get_info_mro_metadata(info: TypeInfo, key: str) -> Optional[Any]:
def establish_as_sqlalchemy(info: TypeInfo) -> None:
def set_is_base(info: TypeInfo) -> None:
def get_is_base(info: TypeInfo) -> bool:
def has_declarative_base(info: TypeInfo) -> bool:
def set_has_table(info: TypeInfo) -> None:
def get_has_table(info: TypeInfo) -> bool:
def get_mapped_attributes(
def format_type(typ_: Type, options: Options) -> str:
def set_mapped_attributes(
def fail(api: SemanticAnalyzerPluginInterface, msg: str, ctx: Context) -> None:
def add_global(
def get_callexpr_kwarg(
def get_callexpr_kwarg(
def get_callexpr_kwarg(
def flatten_typechecking(stmts: Iterable[Statement]) -> Iterator[Statement]:
def type_for_callee(callee: Expression) -> Optional[Union[Instance, TypeInfo]]:
def unbound_to_instance(
def info_for_cls(
def serialize_type(typ: Type) -> Union[str, JsonDict]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mypy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\associationproxy.py
-----------------------------
> """Contain the ``AssociationProxy`` class.
  
  The ``AssociationProxy`` is a Python property object which provides
  transparent proxied access to the endpoint of an association object.
def association_proxy(
class AssociationProxyExtensionType(InspectionAttrExtensionType):
class _GetterProtocol(Protocol[_T_co]):
class _SetterProtocol(Protocol): ...
class _PlainSetterProtocol(_SetterProtocol, Protocol[_T_con]):
class _DictSetterProtocol(_SetterProtocol, Protocol[_T_con]):
class _CreatorProtocol(Protocol): ...
class _PlainCreatorProtocol(_CreatorProtocol, Protocol[_T_con]):
class _KeyCreatorProtocol(_CreatorProtocol, Protocol[_T_con]):
class _LazyCollectionProtocol(Protocol[_T]):
class _GetSetFactoryProtocol(Protocol):
class _ProxyFactoryProtocol(Protocol):
class _ProxyBulkSetProtocol(Protocol):
class _AssociationProxyProtocol(Protocol[_T]):
class AssociationProxy(
class AssociationProxyInstance(SQLORMOperations[_T]):
class AmbiguousAssociationProxyInstance(AssociationProxyInstance[_T]):
class ObjectAssociationProxyInstance(AssociationProxyInstance[_T]):
class ColumnAssociationProxyInstance(AssociationProxyInstance[_T]):
class _lazy_collection(_LazyCollectionProtocol[_T]):
class _AssociationCollection(Generic[_IT]):
class _AssociationSingleItem(_AssociationCollection[_T]):
class _AssociationList(_AssociationSingleItem[_T], MutableSequence[_T]):
class _AssociationDict(_AssociationCollection[_VT], MutableMapping[_KT, _VT]):
class _AssociationSet(_AssociationSingleItem[_T], MutableSet[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\automap.py
-----------------------------
> r"""Define an extension to the :mod:`sqlalchemy.ext.declarative` system
  which automatically generates mapped classes and relationships from a database
  schema, typically though not necessarily one which is reflected.
  
class name.
class PythonNameForTableType(Protocol):
def classname_for_table(
class NameForScalarRelationshipType(Protocol):
def name_for_scalar_relationship(
class NameForCollectionRelationshipType(Protocol):
def name_for_collection_relationship(
class GenerateRelationshipType(Protocol):
def generate_relationship(
def generate_relationship(
def generate_relationship(
class AutomapBase:
class _Bookkeeping:
def automap_base(
def _is_many_to_many(
def _relationships_for_fks(
def _m2m_relationship(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\baked.py
-----------------------------
> """Baked query extension.
  
  Provides a creational pattern for the :class:`.query.Query` object which
  allows the fully constructed object, Core select statement, and string
class Bakery:
class BakedQuery:
class Result:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\compiler.py
-----------------------------
> r"""Provides an API for creation of custom ClauseElements and compilers.
  
  Synopsis
  ========
def compiles(class_: Type[Any], *specs: str) -> Callable[[_F], _F]:
def deregister(class_: Type[Any]) -> None:
class _dispatcher:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\horizontal_shard.py
-----------------------------
> """Horizontal sharding support.
  
  Defines a rudimental 'horizontal sharding' system which allows a Session to
  distribute queries and persistence operations across multiple databases.
class ShardChooser(Protocol):
class IdentityChooser(Protocol):
class ShardedQuery(Query[_T]):
class ShardedSession(Session):
class set_shard_id(ORMOption):
def execute_and_instances(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\hybrid.py
-----------------------------
> r"""Define attributes on ORM-mapped classes that have "hybrid" behavior.
  
  "hybrid" means the attribute has distinct behaviors defined at the
  class level and at the instance level.
class level and at the instance level.
class HybridExtensionType(InspectionAttrExtensionType):
class _HybridGetterType(Protocol[_T_co]):
class _HybridSetterType(Protocol[_T_con]):
class _HybridUpdaterType(Protocol[_T_con]):
class _HybridDeleterType(Protocol[_T_co]):
class _HybridExprCallableType(Protocol[_T_co]):
class _HybridComparatorCallableType(Protocol[_T]):
class _HybridClassLevelAccessor(QueryableAttribute[_T]):
class hybrid_method(interfaces.InspectionAttrInfo, Generic[_P, _R]):
def _unwrap_classmethod(meth: _T) -> _T:
class hybrid_property(interfaces.InspectionAttrInfo, ORMDescriptor[_T]):
class Comparator(interfaces.PropComparator[_T]):
class ExprComparator(Comparator[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\indexable.py
-----------------------------
> """Define attributes on ORM-mapped classes that have "index" attributes for
  columns with :class:`_types.Indexable` types.
  
  "index" means the attribute is associated with an element of an
class index_property(hybrid_property):  # noqa

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\instrumentation.py
-----------------------------
> """Extensible class instrumentation.
  
  The :mod:`sqlalchemy.ext.instrumentation` package provides for alternate
  systems of class instrumentation within the ORM.  Class instrumentation
def find_native_user_instrumentation_hook(cls):
class ExtendedInstrumentationRegistry(InstrumentationFactory):
class InstrumentationManager:
class _ClassInstrumentationAdapter(ClassManager):
def _install_instrumented_lookups():
def _reinstall_default_lookups():
def _install_lookups(lookups):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\mutable.py
-----------------------------
> r"""Provide support for tracking of in-place changes to scalar values,
  which are propagated into ORM change events on owning parent objects.
  
  .. _mutable_scalars:
class and associates a listener that will detect all future mappings
class introduced in :ref:`mapper_composite` to include
class uses a ``weakref.WeakKeyDictionary`` available via the
class MutableBase:
class Mutable(MutableBase):
class MutableComposite(MutableBase):
def _setup_composite_listener() -> None:
class MutableDict(Mutable, Dict[_KT, _VT]):
class MutableList(Mutable, List[_T]):
class MutableSet(Mutable, Set[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\orderinglist.py
-----------------------------
> """A custom list that manages index/position information for contained
  elements.
  
  :author: Jason Kirtland
def ordering_list(
def count_from_0(index: int, collection: object) -> int:
def count_from_1(index: int, collection: object) -> int:
def count_from_n_factory(start: int) -> OrderingFunc[Any]:
def _unsugar_count_from(**kw: Any) -> Dict[str, Any]:
class OrderingList(List[_T]):
def _reconstitute(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\serializer.py
-----------------------------
> """Serializer/Deserializer objects for usage with SQLAlchemy query structures,
  allowing "contextual" deserialization.
  
  .. legacy::
class Serializer(pickle.Pickler):
class Deserializer(pickle.Unpickler):
def dumps(obj, protocol=pickle.HIGHEST_PROTOCOL):
def loads(data, metadata=None, scoped_session=None, engine=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\ext\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\future\engine.py
-----------------------------
> """2.0 API features.
  
  this module is legacy as 2.0 APIs are now standard.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\future\__init__.py
-----------------------------
> """2.0 API features.
  
  this module is legacy as 2.0 APIs are now standard.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\attributes.py
-----------------------------
> """Defines instrumentation for class attributes and their interaction
  with instances.
  
  This module is usually not directly visible to user applications, but
class QueryableAttribute(
def _queryable_attribute_unreduce(
class InstrumentedAttribute(QueryableAttribute[_T_co]):
class AdHocHasEntityNamespace(HasCacheKey):
def create_proxied_attribute(
class AttributeEventToken:
class AttributeImpl:
class ScalarAttributeImpl(AttributeImpl):
class ScalarObjectAttributeImpl(ScalarAttributeImpl):
class HasCollectionAdapter:
class CollectionAttributeImpl(HasCollectionAdapter, AttributeImpl):
def backref_listeners(
class History(NamedTuple):
def get_history(
def get_state_history(
def has_parent(
def register_attribute(
def register_attribute_impl(
def register_descriptor(
def unregister_attribute(class_: Type[Any], key: str) -> None:
def init_collection(obj: object, key: str) -> CollectionAdapter:
def init_state_collection(
def set_committed_value(instance: object, key: str, value: Any) -> None:
def set_attribute(
def get_attribute(instance: object, key: str) -> Any:
def del_attribute(instance: object, key: str) -> None:
def flag_modified(instance: object, key: str) -> None:
def flag_dirty(instance: object) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\base.py
-----------------------------
> """Constants and rudimental functions used throughout the ORM."""
  
  from __future__ import annotations
  
class LoaderCallableStatus(Enum):
class PassiveFlag(FastIntFlag):
class EventConstants(Enum):
class RelationshipDirection(Enum):
class InspectionAttrExtensionType(Enum):
class NotExtension(InspectionAttrExtensionType):
def _assertions(
def instance_str(instance: object) -> str:
def state_str(state: InstanceState[Any]) -> str:
def state_class_str(state: InstanceState[Any]) -> str:
def attribute_str(instance: object, attribute: str) -> str:
def state_attribute_str(state: InstanceState[Any], attribute: str) -> str:
def object_mapper(instance: _T) -> Mapper[_T]:
def object_state(instance: _T) -> InstanceState[_T]:
def _inspect_mapped_object(instance: _T) -> Optional[InstanceState[_T]]:
def _class_to_mapper(
def _mapper_or_none(
def _is_mapped_class(entity: Any) -> bool:
def _is_aliased_class(entity: Any) -> bool:
def _entity_descriptor(entity: _EntityType[Any], key: str) -> Any:
def _inspect_mapped_class(
def _parse_mapper_argument(arg: Union[Mapper[_O], Type[_O]]) -> Mapper[_O]:
def class_mapper(class_: Type[_O], configure: bool = True) -> Mapper[_O]:
class InspectionAttr:
class InspectionAttrInfo(InspectionAttr):
class SQLORMOperations(SQLCoreOperations[_T_co], TypingOnly):
class ORMDescriptor(Generic[_T_co], TypingOnly):
class _MappedAnnotationBase(Generic[_T_co], TypingOnly):
class SQLORMExpression(
class Mapped(
class _MappedAttribute(Generic[_T_co], TypingOnly):
class _DeclarativeMapped(Mapped[_T_co], _MappedAttribute[_T_co]):
class DynamicMapped(_MappedAnnotationBase[_T_co]):
class WriteOnlyMapped(_MappedAnnotationBase[_T_co]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\bulk_persistence.py
-----------------------------
> """additional ORM persistence classes related to "bulk" operations,
  specifically outside of the flush() process.
  
def _bulk_insert(
def _bulk_insert(
def _bulk_insert(
def _bulk_update(
def _bulk_update(
def _bulk_update(
def _expand_composites(mapper, mappings):
class ORMDMLState(AbstractORMCompileState):
class BulkUDCompileState(ORMDMLState):
class BulkORMInsert(ORMDMLState, InsertDMLState):
class BulkORMUpdate(BulkUDCompileState, UpdateDMLState):
class BulkORMDelete(BulkUDCompileState, DeleteDMLState):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\clsregistry.py
-----------------------------
> """Routines to handle the string class registry used by declarative.
  
  This system allows specification of classes and expressions used in
  :func:`_orm.relationship` using strings.
def add_class(
def remove_class(
def _key_is_empty(
class ClsRegistryToken:
class _MultipleClassMarker(ClsRegistryToken):
class _ModuleMarker(ClsRegistryToken):
class _ModNS:
class _GetColumns:
class _GetTable:
def _determine_container(key: str, value: Any) -> _GetColumns:
class _class_resolver:
def _resolver(cls: Type[Any], prop: RelationshipProperty[Any]) -> Tuple[

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\collections.py
-----------------------------
> """Support for collections of mapped entities.
  
  The collections package supplies the machinery used to inform the ORM of
  collection membership changes.  An instrumentation via decoration approach is
class _CollectionConverterProtocol(Protocol):
class _AdaptedCollectionProtocol(Protocol):
class collection:
class CollectionAdapter:
def bulk_replace(values, existing_adapter, new_adapter, initiator=None):
def prepare_instrumentation(
def _instrument_class(cls):
def _locate_roles_and_methods(cls):
def _setup_canned_roles(cls, roles, methods):
def _assert_required_roles(cls, roles, methods):
def _set_collection_attributes(cls, roles, methods):
def _instrument_membership_mutator(method, before, argument, after):
def __set_wo_mutation(collection, item, _sa_initiator=None):
def __set(collection, item, _sa_initiator, key):
def __del(collection, item, _sa_initiator, key):
def __before_pop(collection, _sa_initiator=None):
def _list_decorators() -> Dict[str, Callable[[_FN], _FN]]:
def _dict_decorators() -> Dict[str, Callable[[_FN], _FN]]:
def _set_binops_check_strict(self: Any, obj: Any) -> bool:
def _set_binops_check_loose(self: Any, obj: Any) -> bool:
def _set_decorators() -> Dict[str, Callable[[_FN], _FN]]:
class InstrumentedList(List[_T]):
class InstrumentedSet(Set[_T]):
class InstrumentedDict(Dict[_KT, _VT]):
def __go(lcls):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\context.py
-----------------------------
>         """Create a context for a statement given a :class:`.Compiler`.
  
          This method is always invoked in the context of SQLCompiler.process().
  
class QueryContext:
class AbstractORMCompileState(CompileState):
class AutoflushOnlyORMCompileState(AbstractORMCompileState):
class ORMCompileState(AbstractORMCompileState):
class _DMLReturningColFilter:
class _DMLBulkInsertReturningColFilter(_DMLReturningColFilter):
class _DMLUpdateDeleteReturningColFilter(_DMLReturningColFilter):
class ORMFromStatementCompileState(ORMCompileState):
class FromStatement(GroupedElement, Generative, TypedReturnsRows[_TP]):
class CompoundSelectCompileState(
class ORMSelectCompileState(ORMCompileState, SelectState):
def _column_descriptions(
def _legacy_filter_by_entity_zero(
def _entity_from_pre_ent_zero(
def _determine_last_joined_entity(
class _QueryEntity:
class _MapperEntity(_QueryEntity):
class _BundleEntity(_QueryEntity):
class _ColumnEntity(_QueryEntity):
class _RawColumnEntity(_ColumnEntity):
class _ORMColumnEntity(_ColumnEntity):
class _IdentityTokenEntity(_ORMColumnEntity):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\decl_api.py
-----------------------------
> """Public API functions and helpers for declarative."""
  
  from __future__ import annotations
  
def has_inherited_table(cls: Type[_O]) -> bool:
class _DynamicAttributesType(type):
class DeclarativeAttributeIntercept(
class DCTransformDeclarative(DeclarativeAttributeIntercept):
class DeclarativeMeta(DeclarativeAttributeIntercept):
def synonym_for(
class _declared_attr_common:
class _declared_directive(_declared_attr_common, Generic[_T]):
class declared_attr(interfaces._MappedAttribute[_T], _declared_attr_common):
class _stateful_declared_attr(declared_attr[_T]):
def declarative_mixin(cls: Type[_T]) -> Type[_T]:
def _setup_declarative_base(cls: Type[Any]) -> None:
class MappedAsDataclass(metaclass=DCTransformDeclarative):
class DeclarativeBase(
def _check_not_declarative(cls: Type[Any], base: Type[Any]) -> None:
class DeclarativeBaseNoMeta(
def add_mapped_attribute(
def declarative_base(
class registry:
def as_declarative(**kw: Any) -> Callable[[Type[_T]], Type[_T]]:
def _inspect_decl_meta(cls: Type[Any]) -> Optional[Mapper[Any]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\decl_base.py
-----------------------------
> """Internal implementation for declarative."""
  
  from __future__ import annotations
  
class MappedClassProtocol(Protocol[_O]):
class _DeclMappedClassProtocol(MappedClassProtocol[_O], Protocol):
class _DataclassArguments(TypedDict):
def _declared_mapping_info(
def _is_supercls_for_inherits(cls: Type[Any]) -> bool:
def _resolve_for_abstract_or_classical(cls: Type[Any]) -> Optional[Type[Any]]:
def _get_immediate_cls_attr(
def _dive_for_cls_manager(cls: Type[_O]) -> Optional[ClassManager[_O]]:
def _as_declarative(
def _mapper(
def _is_declarative_props(obj: Any) -> bool:
def _check_declared_props_nocascade(
class _MapperConfig:
class _ImperativeMapperConfig(_MapperConfig):
class _CollectedAnnotation(NamedTuple):
class _ClassScanMapperConfig(_MapperConfig):
def _as_dc_declaredattr(
class _DeferredMapperConfig(_ClassScanMapperConfig):
def _add_attribute(
def _del_attribute(cls: Type[Any], key: str) -> None:
def _declarative_constructor(self: Any, **kwargs: Any) -> None:
def _undefer_column_name(key: str, column: Column[Any]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\dependency.py
-----------------------------
> """Relationship dependencies."""
  
  from __future__ import annotations
  
class DependencyProcessor:
class OneToManyDP(DependencyProcessor):
class ManyToOneDP(DependencyProcessor):
class DetectKeySwitch(DependencyProcessor):
class ManyToManyDP(DependencyProcessor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\descriptor_props.py
-----------------------------
> """Descriptor properties are more "auxiliary" properties
  that exist as configurational elements, but don't participate
  as actively in the load/persist ORM loop.
  
class DescriptorProperty(MapperProperty[_T]):
class CompositeProperty(
class Composite(CompositeProperty[_T], _DeclarativeMapped[_T]):
class ConcreteInheritedProperty(DescriptorProperty[_T]):
class SynonymProperty(DescriptorProperty[_T]):
class Synonym(SynonymProperty[_T], _DeclarativeMapped[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\dynamic.py
-----------------------------
> """Dynamic collection API.
  
  Dynamic collections act like Query() objects for read operations and support
  basic add/delete mutation.
class DynamicCollectionHistory(WriteOnlyHistory[_T]):
class DynamicAttributeImpl(WriteOnlyAttributeImpl):
class DynaLoader(WriteOnlyLoader):
class AppenderMixin(AbstractCollectionWriter[_T]):
class AppenderQuery(AppenderMixin[_T], Query[_T]):  # type: ignore[misc]
def mixin_user_query(cls: Any) -> type[AppenderMixin[Any]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\evaluator.py
-----------------------------
> """Evaluation functions used **INTERNALLY** by ORM DML use cases.
  
  
  This module is **private, for internal use by SQLAlchemy**.
class UnevaluatableError(exc.InvalidRequestError):
class _NoObject(operators.ColumnOperators):
class _ExpiredObject(operators.ColumnOperators):
class _EvaluatorCompiler:
def __getattr__(name: str) -> Type[_EvaluatorCompiler]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\events.py
-----------------------------
> """ORM event interfaces."""
  from __future__ import annotations
  
  from typing import Any
class InstrumentationEvents(event.Events[InstrumentationFactory]):
class _InstrumentationEventsHold:
class InstanceEvents(event.Events[ClassManager[Any]]):
class _EventsHold(event.RefCollection[_ET]):
class _InstanceEventsHold(_EventsHold[_ET]):
class MapperEvents(event.Events[mapperlib.Mapper[Any]]):
class _MapperEventsHold(_EventsHold[_ET]):
class SessionEvents(event.Events[Session]):
class AttributeEvents(event.Events[QueryableAttribute[Any]]):
class QueryEvents(event.Events[Query[Any]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\exc.py
-----------------------------
> """SQLAlchemy ORM exceptions."""
  
  from __future__ import annotations
  
class StaleDataError(sa_exc.SQLAlchemyError):
class FlushError(sa_exc.SQLAlchemyError):
class MappedAnnotationError(sa_exc.ArgumentError):
class UnmappedError(sa_exc.InvalidRequestError):
class ObjectDereferencedError(sa_exc.SQLAlchemyError):
class DetachedInstanceError(sa_exc.SQLAlchemyError):
class UnmappedInstanceError(UnmappedError):
class UnmappedClassError(UnmappedError):
class ObjectDeletedError(sa_exc.InvalidRequestError):
class UnmappedColumnError(sa_exc.InvalidRequestError):
class LoaderStrategyException(sa_exc.InvalidRequestError):
def _safe_cls_name(cls: Type[Any]) -> str:
def _default_unmapped(cls: Type[Any]) -> Optional[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\identity.py
-----------------------------
>         """optional inlined form of add() which can assume item isn't present
class IdentityMap:
class WeakInstanceDict(IdentityMap):
def _killed(state: InstanceState[Any], key: _IdentityKeyType[Any]) -> NoReturn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\instrumentation.py
-----------------------------
> """Defines SQLAlchemy's system of class instrumentation.
  
  This module is usually not directly visible to user applications, but
  defines a large part of the ORM's interactivity.
class _ExpiredAttributeLoaderProto(Protocol):
class _ManagerFactory(Protocol):
class ClassManager(
class _SerializeManager:
class InstrumentationFactory(EventTarget):
def register_class(
def unregister_class(class_):
def is_instrumented(instance, key):
def _generate_init(class_, class_manager, original_init):
def __init__(%(apply_pos)s):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\interfaces.py
-----------------------------
> """
  
  Contains various base classes used throughout the ORM.
  
class ORMStatementRole(roles.StatementRole):
class ORMColumnsClauseRole(
class ORMEntityColumnsClauseRole(ORMColumnsClauseRole[_T]):
class ORMFromClauseRole(roles.StrictFromClauseRole):
class ORMColumnDescription(TypedDict):
class _IntrospectsAnnotations:
class _AttributeOptions(NamedTuple):
class _DCAttributeOptions:
class _MapsColumns(_DCAttributeOptions, _MappedAttribute[_T]):
class MapperProperty(
class PropComparator(SQLORMOperations[_T_co], Generic[_T_co], ColumnOperators):
class StrategizedProperty(MapperProperty[_T]):
class ORMOption(ExecutableOption):
class CompileStateOption(HasCacheKey, ORMOption):
class LoaderOption(CompileStateOption):
class CriteriaOption(CompileStateOption):
class UserDefinedOption(ORMOption):
class MapperOption(ORMOption):
class LoaderStrategy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\loading.py
-----------------------------
> """private module containing functions used to convert database
  rows into object instances and associated state.
  
  the functions here are called primarily by Query, Mapper,
def instances(cursor: CursorResult[Any], context: QueryContext) -> Result[Any]:
def merge_frozen_result(session, statement, frozen_result, load=True):
def merge_result(
def get_from_identity(
def load_on_ident(
def load_on_pk_identity(
def _set_get_options(
def _setup_entity_query(
def _warn_for_runid_changed(state):
def _instance_processor(
def _load_subclass_via_in(
def _populate_full(
def _populate_partial(
def _validate_version_id(mapper, state, dict_, row, getter):
def _decorate_polymorphic_switch(
class PostLoad:
def load_scalar_attributes(mapper, state, attribute_names, passive):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\mapped_collection.py
-----------------------------
>     """Plain column getter, stores collection of Column objects
      directly.
  
      Serializes to a :class:`._SerializableColumnGetterV2`
class _PlainColumnGetter(Generic[_KT]):
class _SerializableColumnGetterV2(_PlainColumnGetter[_KT]):
def column_keyed_dict(
class _AttrGetter:
def attribute_keyed_dict(
def keyfunc_mapping(
class KeyFuncDict(Dict[_KT, _VT]):
def _mapped_collection_cls(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\mapper.py
-----------------------------
> """Logic to map Python classes to and from selectables.
  
  Defines the :class:`~sqlalchemy.orm.mapper.Mapper` class, the central
  configurational unit which associates a class with a database table.
def _all_registries() -> Set[registry]:
def _unconfigured_mappers() -> Iterator[Mapper[Any]]:
class Mapper(
class _OptGetColumnsNotAvailable(Exception):
def configure_mappers() -> None:
def _configure_registries(
def _do_configure_registries(
def _dispose_registries(registries: Set[_RegistryType], cascade: bool) -> None:
def reconstructor(fn: _Fn) -> _Fn:
def validates(
def _event_on_load(state, ctx):
def _event_on_init(state, args, kwargs):
class _ColumnMapping(Dict["ColumnElement[Any]", "MapperProperty[Any]"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\path_registry.py
-----------------------------
> """Path tracking utilities, representing mapper graph traversals."""
  
  from __future__ import annotations
  
def _unreduce_path(path: _SerializedPath) -> PathRegistry:
class PathRegistry(HasCacheKey):
class CreatesToken(PathRegistry):
class RootRegistry(CreatesToken):
class PathToken(orm_base.InspectionAttr, HasCacheKey, str):
class TokenRegistry(PathRegistry):
class PropRegistry(PathRegistry):
class AbstractEntityRegistry(CreatesToken):
class SlotsEntityRegistry(AbstractEntityRegistry):
class _ERDict(Dict[Any, Any]):
class CachingEntityRegistry(AbstractEntityRegistry):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py
-----------------------------
> """private module containing functions used to emit INSERT, UPDATE
  and DELETE statements on behalf of a :class:`_orm.Mapper` and its descending
  mappers.
  
def save_obj(base_mapper, states, uowtransaction, single=False):
def post_update(base_mapper, states, uowtransaction, post_update_cols):
def delete_obj(base_mapper, states, uowtransaction):
def _organize_states_for_save(base_mapper, states, uowtransaction):
def _organize_states_for_post_update(base_mapper, states, uowtransaction):
def _organize_states_for_delete(base_mapper, states, uowtransaction):
def _collect_insert_commands(
def _collect_update_commands(
def _collect_post_update_commands(
def _collect_delete_commands(
def _emit_update_statements(
def _emit_insert_statements(
def _emit_post_update_statements(
def _emit_delete_statements(
def _finalize_insert_update_commands(base_mapper, uowtransaction, states):
def _postfetch_post_update(
def _postfetch(
def _postfetch_bulk_save(mapper, dict_, table):
def _connections_for_states(base_mapper, uowtransaction, states):
def _sort_states(mapper, states):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\properties.py
-----------------------------
> """MapperProperty implementations.
  
  This is a private module which defines the behavior of individual ORM-
  mapped attributes.
class ColumnProperty(
class MappedSQLExpression(ColumnProperty[_T], _DeclarativeMapped[_T]):
class MappedColumn(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\query.py
-----------------------------
> """The Query class and support.
  
  Defines the :class:`_query.Query` class, the central
  construct used by the ORM to construct database queries.
class Query(
class AliasOption(interfaces.LoaderOption):
class BulkUD:
class BulkUpdate(BulkUD):
class BulkDelete(BulkUD):
class RowReturningQuery(Query[Row[_TP]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\relationships.py
-----------------------------
> """Heuristics related to join conditions as used in
  :func:`_orm.relationship`.
  
  Provides the :class:`.JoinCondition` object, which encapsulates
def remote(expr: _CEA) -> _CEA:
def foreign(expr: _CEA) -> _CEA:
class _RelationshipArg(Generic[_T1, _T2]):
class _RelationshipArgs(NamedTuple):
class RelationshipProperty(
def _annotate_columns(element: _CE, annotations: _AnnotationDict) -> _CE:
class JoinCondition:
class _ColInAnnotations:
class Relationship(
class _RelationshipDeclared(  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py
-----------------------------
>     """Describes the type applied to a class-level
      :meth:`_orm.scoped_session.query_property` attribute.
  
      .. versionadded:: 2.0.5
class QueryPropertyDescriptor(Protocol):
class scoped_session(Generic[_S]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\session.py
-----------------------------
> """Provides the Session class and related utilities."""
  
  from __future__ import annotations
  
class _ConnectionCallableProto(Protocol):
def _state_session(state: InstanceState[Any]) -> Optional[Session]:
class _SessionClassMethods:
class SessionTransactionState(_StateChangeState):
class ORMExecuteState(util.MemoizedSlots):
class SessionTransactionOrigin(Enum):
class SessionTransaction(_StateChange, TransactionalContext):
class _SessionCloseState(Enum):
class Session(_SessionClassMethods, EventTarget):
class sessionmaker(_SessionClassMethods, Generic[_S]):
def close_all_sessions() -> None:
def make_transient(instance: object) -> None:
def make_transient_to_detached(instance: object) -> None:
def object_session(instance: object) -> Optional[Session]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\state.py
-----------------------------
> """Defines instrumentation of instances.
  
  This module is usually not directly visible to user applications, but
  defines a large part of the ORM's interactivity.
class _InstanceDictProto(Protocol):
class _InstallLoaderCallableProto(Protocol[_O]):
class InstanceState(interfaces.InspectionAttrInfo, Generic[_O]):
class AttributeState:
class PendingCollection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py
-----------------------------
> """State tracking utilities used by :class:`_orm.Session`."""
  
  from __future__ import annotations
  
class _StateChangeState(Enum):
class _StateChangeStates(_StateChangeState):
class _StateChange:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\strategies.py
-----------------------------
> """sqlalchemy.orm.interfaces.LoaderStrategy
def _register_attribute(
class UninstrumentedColumnLoader(LoaderStrategy):
class ColumnLoader(LoaderStrategy):
class ExpressionColumnLoader(ColumnLoader):
class DeferredColumnLoader(LoaderStrategy):
class LoadDeferredColumns:
class AbstractRelationshipLoader(LoaderStrategy):
class DoNothingLoader(LoaderStrategy):
class NoLoader(AbstractRelationshipLoader):
class LazyLoader(
class LoadLazyAttribute:
class PostLoader(AbstractRelationshipLoader):
class ImmediateLoader(PostLoader):
class SubqueryLoader(PostLoader):
class JoinedLoader(AbstractRelationshipLoader):
class SelectInLoader(PostLoader, util.MemoizedSlots):
def single_parent_validator(desc, prop):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\strategy_options.py
-----------------------------
> """ """
  
  from __future__ import annotations
  
class _AbstractLoad(traversals.GenerativeOnTraversal, LoaderOption):
class Load(_AbstractLoad):
class _WildcardLoad(_AbstractLoad):
class _LoadElement(
class _AttributeStrategyLoad(_LoadElement):
class _TokenStrategyLoad(_LoadElement):
class _ClassStrategyLoad(_LoadElement):
def _generate_from_keys(
def _parse_attr_argument(
def loader_unbound_fn(fn: _FN) -> _FN:
def _expand_column_strategy_attrs(
def contains_eager(*keys: _AttrType, **kw: Any) -> _AbstractLoad:
def load_only(*attrs: _AttrType, raiseload: bool = False) -> _AbstractLoad:
def joinedload(*keys: _AttrType, **kw: Any) -> _AbstractLoad:
def subqueryload(*keys: _AttrType) -> _AbstractLoad:
def selectinload(
def lazyload(*keys: _AttrType) -> _AbstractLoad:
def immediateload(
def noload(*keys: _AttrType) -> _AbstractLoad:
def raiseload(*keys: _AttrType, **kw: Any) -> _AbstractLoad:
def defaultload(*keys: _AttrType) -> _AbstractLoad:
def defer(
def undefer(key: _AttrType, *addl_attrs: _AttrType) -> _AbstractLoad:
def undefer_group(name: str) -> _AbstractLoad:
def with_expression(
def selectin_polymorphic(
def _raise_for_does_not_link(path, attrname, parent_entity):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\sync.py
-----------------------------
> """private module containing functions used for copying data
  between instances based on join conditions.
  
def populate(
def bulk_populate_inherit_keys(source_dict, source_mapper, synchronize_pairs):
def clear(dest, dest_mapper, synchronize_pairs):
def update(source, source_mapper, dest, old_prefix, synchronize_pairs):
def populate_dict(source, source_mapper, dict_, synchronize_pairs):
def source_modified(uowcommit, source, source_mapper, synchronize_pairs):
def _raise_col_to_prop(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py
-----------------------------
> """The internals for the unit of work system.
  
  The session's flush() process passes objects to a contextual object
  here, which assembles flush tasks based on mappers and their properties,
def track_cascade_events(descriptor, prop):
class UOWTransaction:
class IterateMappersMixin:
class Preprocess(IterateMappersMixin):
class PostSortRec:
class ProcessAll(IterateMappersMixin, PostSortRec):
class PostUpdateAll(PostSortRec):
class SaveUpdateAll(PostSortRec):
class DeleteAll(PostSortRec):
class ProcessState(PostSortRec):
class SaveUpdateState(PostSortRec):
class DeleteState(PostSortRec):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\util.py
-----------------------------
>     """Keeps track of the options sent to
class _DeStringifyAnnotation(Protocol):
class _EvalNameOnly(Protocol):
class CascadeOptions(FrozenSet[str]):
def _validator_events(desc, key, validator, include_removes, include_backrefs):
def polymorphic_union(
def identity_key(
class _TraceAdaptRole(enum.Enum):
class ORMStatementAdapter(sql_util.ColumnAdapter):
class ORMAdapter(sql_util.ColumnAdapter):
class AliasedClass(
class AliasedInsp(
class _WrapUserEntity:
class LoaderCriteriaOption(CriteriaOption):
def _inspect_mc(
def _inspect_generic_alias(
class Bundle(
def _orm_annotate(element: _SA, exclude: Optional[Any] = None) -> _SA:
def _orm_deannotate(element: _SA) -> _SA:
def _orm_full_deannotate(element: _SA) -> _SA:
class _ORMJoin(expression.Join):
def with_parent(
def has_identity(object_: object) -> bool:
def was_deleted(object_: object) -> bool:
def _entity_corresponds_to(
def _entity_corresponds_to_use_path_impl(
def _entity_isa(given: _InternalEntityType[Any], mapper: Mapper[Any]) -> bool:
def _getitem(iterable_query: Query[Any], item: Any) -> Any:
def _is_mapped_annotation(
class _CleanupError(Exception):
def _cleanup_mapped_str_annotation(
def _extract_mapped_subtype(
def _mapper_property_as_plain_name(prop: Type[Any]) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\writeonly.py
-----------------------------
> """Write-only collection API.
  
  This is an alternate mapped attribute style that only supports single-item
  collection mutation operations.   To read the collection, a select()
class WriteOnlyHistory(Generic[_T]):
class WriteOnlyAttributeImpl(
class WriteOnlyLoader(strategies.AbstractRelationshipLoader, log.Identified):
class DynamicCollectionAdapter:
class AbstractCollectionWriter(Generic[_T]):
class WriteOnlyCollection(AbstractCollectionWriter[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\_orm_constructors.py
-----------------------------
>     r"""Return a :class:`.MapperOption` that will indicate to the
      :class:`_query.Query`
      that the main table has been aliased.
  
def contains_alias(alias: Union[Alias, Subquery]) -> AliasOption:
def mapped_column(
def orm_insert_sentinel(
def column_property(
def composite(
def composite(
def composite(
def composite(
def with_loader_criteria(
def relationship(
def synonym(
def create_session(
def _mapper_fn(*arg: Any, **kw: Any) -> NoReturn:
def dynamic_loader(
def backref(name: str, **kwargs: Any) -> ORMBackrefArgument:
def deferred(
def query_expression(
def clear_mappers() -> None:
def aliased(
def aliased(
def aliased(
def aliased(
def with_polymorphic(
def join(
def outerjoin(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\_typing.py
-----------------------------
> """The 'ORM mapped object' type.
  
class _OrmKnownExecutionOptions(_CoreKnownExecutionOptions, total=False):
class _ORMAdapterProto(Protocol):
class _LoaderCallable(Protocol):
def is_orm_option(
def is_user_defined_option(
def is_composite_class(obj: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\orm\__init__.py
-----------------------------
> """
  Functional constructs for ORM configuration.
  
  See the SQLAlchemy object relational tutorial and mapper configuration
def __go(lcls: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\pool\base.py
-----------------------------
> """Base constructs for connection pools."""
  
  from __future__ import annotations
  
class PoolResetState:
class ResetStyle(Enum):
class _ConnDialect:
class _AsyncConnDialect(_ConnDialect):
class _CreatorFnType(Protocol):
class _CreatorWRecFnType(Protocol):
class Pool(log.Identified, event.EventTarget):
class ManagesConnection:
class ConnectionPoolEntry(ManagesConnection):
class _ConnectionRecord(ConnectionPoolEntry):
def _finalize_fairy(
class PoolProxiedConnection(ManagesConnection):
class _AdhocProxiedConnection(PoolProxiedConnection):
class _ConnectionFairy(PoolProxiedConnection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\pool\events.py
-----------------------------
>     """Available events for :class:`_pool.Pool`.
  
      The methods here define the name of an event as well
      as the names of members that are passed to listener
class PoolEvents(event.Events[Pool]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\pool\impl.py
-----------------------------
> """Pool implementation classes."""
  from __future__ import annotations
  
  import threading
class QueuePool(Pool):
class AsyncAdaptedQueuePool(QueuePool):
class FallbackAsyncAdaptedQueuePool(AsyncAdaptedQueuePool):
class NullPool(Pool):
class SingletonThreadPool(Pool):
class StaticPool(Pool):
class AssertionPool(Pool):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\pool\__init__.py
-----------------------------
> """Connection pooling for DB-API connections.
  
  Provides a number of connection pool implementations for a variety of
  usage scenarios and thread behavior requirements imposed by the

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\annotation.py
-----------------------------
> """The :class:`.Annotated` class and related routines; creates hash-equivalent
  copies of SQL constructs which contain context-specific markers and
  associations.
  
class SupportsAnnotations(ExternallyTraversible):
class SupportsWrappingAnnotations(SupportsAnnotations):
class SupportsCloneAnnotations(SupportsWrappingAnnotations):
class Annotated(SupportsAnnotations):
def _safe_annotate(to_annotate: _SA, annotations: _AnnotationDict) -> _SA:
def _deep_annotate(
def _deep_deannotate(
def _deep_deannotate(
def _deep_deannotate(
def _shallow_annotate(element: _SA, annotations: _AnnotationDict) -> _SA:
def _new_annotation_type(
def _prepare_annotations(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\base.py
-----------------------------
> """Foundational utilities common to many sql modules."""
  
  
  from __future__ import annotations
class _NoArg(Enum):
class _NoneName(Enum):
class _DefaultDescriptionTuple(NamedTuple):
class _EntityNamespace(Protocol):
class _HasEntityNamespace(Protocol):
def _is_has_entity_namespace(element: Any) -> TypeGuard[_HasEntityNamespace]:
class Immutable:
class SingletonConstant(Immutable):
def _from_objects(
def _select_iterables(
class _GenerativeType(compat_typing.Protocol):
def _generative(fn: _Fn) -> _Fn:
def _exclusive_against(*names: str, **kw: Any) -> Callable[[_Fn], _Fn]:
def _clone(element, **kw):
def _expand_cloned(
def _de_clone(
def _cloned_intersection(a: Iterable[_CLE], b: Iterable[_CLE]) -> Set[_CLE]:
def _cloned_difference(a: Iterable[_CLE], b: Iterable[_CLE]) -> Set[_CLE]:
class _DialectArgView(MutableMapping[str, Any]):
class _DialectArgDict(MutableMapping[str, Any]):
def _kw_reg_for_dialect(dialect_name: str) -> Optional[Dict[Any, Any]]:
class DialectKWArgs:
class CompileState:
class Generative(HasMemoized):
class InPlaceGenerative(HasMemoized):
class HasCompileState(Generative):
class _MetaOptions(type):
class Options(metaclass=_MetaOptions):
class CacheableOptions(Options, HasCacheKey):
class ExecutableOption(HasCopyInternals):
class Executable(roles.StatementRole):
class SchemaEventTarget(event.EventTarget):
class SchemaVisitable(SchemaEventTarget, visitors.Visitable):
class SchemaVisitor(ClauseVisitor):
class _SentinelDefaultCharacterization(Enum):
class _SentinelColumnCharacterization(NamedTuple):
class _ColumnMetrics(Generic[_COL_co]):
class ColumnCollection(Generic[_COLKEY, _COL_co]):
class DedupeColumnCollection(ColumnCollection[str, _NAMEDCOL]):
class ReadOnlyColumnCollection(
class ColumnSet(util.OrderedSet["ColumnClause[Any]"]):
def _entity_namespace(
def _entity_namespace_key(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\cache_key.py
-----------------------------
>     """Mixin for objects which can produce a cache key.
  
      This class is usually in a hierarchy that starts with the
      :class:`.HasTraverseInternals` base, but this is optional.  Currently,
class _CacheKeyTraversalDispatchType(Protocol):
class CacheConst(enum.Enum):
class CacheTraverseTarget(enum.Enum):
class HasCacheKey:
class HasCacheKeyTraverse(HasTraverseInternals, HasCacheKey):
class MemoizedHasCacheKey(HasCacheKey, HasMemoized):
class SlotsMemoizedHasCacheKey(HasCacheKey, util.MemoizedSlots):
class CacheKey(NamedTuple):
def _ad_hoc_cache_key_from_args(
class _CacheKeyTraversal(HasTraversalDispatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\coercions.py
-----------------------------
>     """Return whether or not the element is a "literal" in the context
      of a SQL expression construct.
  
def _is_literal(element: Any) -> bool:
def _deep_is_literal(element):
def _document_text_coercion(
def _expression_collection_was_a_list(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect(
def expect_as_key(
def expect_col_expression_collection(
class RoleImpl:
class _Deannotate:
class _StringOnly:
class _ReturnsStringKey(RoleImpl):
class _ColumnCoercions(RoleImpl):
def _no_text_coercion(
class _NoTextCoercion(RoleImpl):
class _CoerceLiterals(RoleImpl):
class LiteralValueImpl(RoleImpl):
class _SelectIsNotFrom(RoleImpl):
class HasCacheKeyImpl(RoleImpl):
class ExecutableOptionImpl(RoleImpl):
class ExpressionElementImpl(_ColumnCoercions, RoleImpl):
class BinaryElementImpl(ExpressionElementImpl, RoleImpl):
class InElementImpl(RoleImpl):
class OnClauseImpl(_ColumnCoercions, RoleImpl):
class WhereHavingImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl):
class StatementOptionImpl(_CoerceLiterals, RoleImpl):
class ColumnArgumentImpl(_NoTextCoercion, RoleImpl):
class ColumnArgumentOrKeyImpl(_ReturnsStringKey, RoleImpl):
class StrAsPlainColumnImpl(_CoerceLiterals, RoleImpl):
class ByOfImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl, roles.ByOfRole):
class OrderByImpl(ByOfImpl, RoleImpl):
class GroupByImpl(ByOfImpl, RoleImpl):
class DMLColumnImpl(_ReturnsStringKey, RoleImpl):
class ConstExprImpl(RoleImpl):
class TruncatedLabelImpl(_StringOnly, RoleImpl):
class DDLExpressionImpl(_Deannotate, _CoerceLiterals, RoleImpl):
class DDLConstraintColumnImpl(_Deannotate, _ReturnsStringKey, RoleImpl):
class DDLReferredColumnImpl(DDLConstraintColumnImpl):
class LimitOffsetImpl(RoleImpl):
class LabeledColumnExprImpl(ExpressionElementImpl):
class ColumnsClauseImpl(_SelectIsNotFrom, _CoerceLiterals, RoleImpl):
class ReturnsRowsImpl(RoleImpl):
class StatementImpl(_CoerceLiterals, RoleImpl):
class SelectStatementImpl(_NoTextCoercion, RoleImpl):
class HasCTEImpl(ReturnsRowsImpl):
class IsCTEImpl(RoleImpl):
class JoinTargetImpl(RoleImpl):
class FromClauseImpl(_SelectIsNotFrom, _NoTextCoercion, RoleImpl):
class StrictFromClauseImpl(FromClauseImpl):
class AnonymizedFromClauseImpl(StrictFromClauseImpl):
class DMLTableImpl(_SelectIsNotFrom, _NoTextCoercion, RoleImpl):
class DMLSelectImpl(_NoTextCoercion, RoleImpl):
class CompoundElementImpl(_NoTextCoercion, RoleImpl):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\compiler.py
-----------------------------
> """Base SQL and DDL compiler implementations.
  
  Classes provided include:
  
class ResultColumnsEntry(NamedTuple):
class _ResultMapAppender(Protocol):
class _BaseCompilerStackEntry(TypedDict):
class _CompilerStackEntry(_BaseCompilerStackEntry, total=False):
class ExpandedState(NamedTuple):
class _InsertManyValues(NamedTuple):
class _InsertManyValuesBatch(NamedTuple):
class InsertmanyvaluesSentinelOpts(FastIntFlag):
class CompilerState(IntEnum):
class Linting(IntEnum):
class FromLinter(collections.namedtuple("FromLinter", ["froms", "edges"])):
class Compiled:
class TypeCompiler(util.EnsureKWArg):
class _CompileLabel(
class ilike_case_insensitive(
class SQLCompiler(Compiled):
class StrSQLCompiler(SQLCompiler):
class DDLCompiler(Compiled):
class GenericTypeCompiler(TypeCompiler):
class StrSQLTypeCompiler(GenericTypeCompiler):
class _SchemaForObjectCallable(Protocol):
class _BindNameForColProtocol(Protocol):
class IdentifierPreparer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\crud.py
-----------------------------
> """Functions used by compiler.py to determine the parameters rendered
  within INSERT and UPDATE statements.
  
def _as_dml_column(c: ColumnElement[Any]) -> ColumnClause[Any]:
class _CrudParams(NamedTuple):
def _get_crud_params(
def _create_bind_param(
def _create_bind_param(
def _create_bind_param(
def _handle_values_anonymous_param(compiler, col, value, name, **kw):
def _key_getters_for_crud_column(
def _scan_insert_from_select_cols(
def _scan_cols(
def _setup_delete_return_defaults(
def _append_param_parameter(
def _append_param_insert_pk_returning(compiler, stmt, c, values, kw):
def _append_param_insert_pk_no_returning(compiler, stmt, c, values, kw):
def _append_param_insert_hasdefault(
def _append_param_insert_select_hasdefault(
def _append_param_update(
def _create_insert_prefetch_bind_param(
def _create_insert_prefetch_bind_param(
def _create_insert_prefetch_bind_param(
def _create_update_prefetch_bind_param(
def _create_update_prefetch_bind_param(
def _create_update_prefetch_bind_param(
class _multiparam_column(elements.ColumnElement[Any]):
def _process_multiparam_default_bind(
def _get_update_multitable_params(
def _extend_values_for_multiparams(
def _get_stmt_parameter_tuples_params(
def _get_returning_modifiers(compiler, stmt, compile_state, toplevel):
def _warn_pk_with_no_anticipated_value(c):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\ddl.py
-----------------------------
> """
  Provides the hierarchy of DDL-defining schema items as well as routines
  to invoke them for a create/drop call.
  
class BaseDDLElement(ClauseElement):
class DDLIfCallable(Protocol):
class DDLIf(typing.NamedTuple):
class ExecutableDDLElement(roles.DDLRole, Executable, BaseDDLElement):
class DDL(ExecutableDDLElement):
class _CreateDropBase(ExecutableDDLElement, Generic[_SI]):
class _CreateBase(_CreateDropBase[_SI]):
class _DropBase(_CreateDropBase[_SI]):
class CreateSchema(_CreateBase[str]):
class DropSchema(_DropBase[str]):
class CreateTable(_CreateBase["Table"]):
class _DropView(_DropBase["Table"]):
class CreateConstraint(BaseDDLElement):
class CreateColumn(BaseDDLElement):
class DropTable(_DropBase["Table"]):
class CreateSequence(_CreateBase["Sequence"]):
class DropSequence(_DropBase["Sequence"]):
class CreateIndex(_CreateBase["Index"]):
class DropIndex(_DropBase["Index"]):
class AddConstraint(_CreateBase["Constraint"]):
class DropConstraint(_DropBase["Constraint"]):
class SetTableComment(_CreateDropBase["Table"]):
class DropTableComment(_CreateDropBase["Table"]):
class SetColumnComment(_CreateDropBase["Column[Any]"]):
class DropColumnComment(_CreateDropBase["Column[Any]"]):
class SetConstraintComment(_CreateDropBase["Constraint"]):
class DropConstraintComment(_CreateDropBase["Constraint"]):
class InvokeDDLBase(SchemaVisitor):
class InvokeCreateDDLBase(InvokeDDLBase):
class InvokeDropDDLBase(InvokeDDLBase):
class SchemaGenerator(InvokeCreateDDLBase):
class SchemaDropper(InvokeDropDDLBase):
def sort_tables(
def sort_tables_and_constraints(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\default_comparator.py
-----------------------------
> """Default implementation of SQL comparison operations."""
  
  from __future__ import annotations
  
def _boolean_compare(
def _custom_op_operate(
def _binary_operate(
def _conjunction_operate(
def _scalar(
def _in_impl(
def _getitem_impl(
def _unsupported_impl(
def _inv_impl(
def _neg_impl(
def _bitwise_not_impl(
def _match_impl(
def _distinct_impl(
def _between_impl(
def _collate_impl(
def _regexp_match_impl(
def _regexp_replace_impl(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\dml.py
-----------------------------
> """
  Provide :class:`_expression.Insert`, :class:`_expression.Update` and
  :class:`_expression.Delete`.
  
class DMLState(CompileState):
class InsertDMLState(DMLState):
class UpdateDMLState(DMLState):
class DeleteDMLState(DMLState):
class UpdateBase(
class ValuesBase(UpdateBase):
class Insert(ValuesBase):
class ReturningInsert(Insert, TypedReturnsRows[_TP]):
class DMLWhereBase:
class Update(DMLWhereBase, ValuesBase):
class ReturningUpdate(Update, TypedReturnsRows[_TP]):
class Delete(DMLWhereBase, UpdateBase):
class ReturningDelete(Update, TypedReturnsRows[_TP]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\elements.py
-----------------------------
> """Core SQL expression elements, including :class:`_expression.ClauseElement`,
  :class:`_expression.ColumnElement`, and derived classes.
  
def literal(
def literal(
def literal(
def literal(
def literal_column(
class CompilerElement(Visitable):
class ClauseElement(
class DQLDMLClauseElement(ClauseElement):
class CompilerColumnElement(
class SQLCoreOperations(Generic[_T_co], ColumnOperators, TypingOnly):
class SQLColumnExpression(
class ColumnElement(
class KeyedColumnElement(ColumnElement[_T]):
class WrapsColumnExpression(ColumnElement[_T]):
class BindParameter(roles.InElementRole, KeyedColumnElement[_T]):
class TypeClause(DQLDMLClauseElement):
class TextClause(
class Null(SingletonConstant, roles.ConstExprRole[None], ColumnElement[None]):
class False_(
class True_(SingletonConstant, roles.ConstExprRole[bool], ColumnElement[bool]):
class ClauseList(
class OperatorExpression(ColumnElement[_T]):
class ExpressionClauseList(OperatorExpression[_T]):
class BooleanClauseList(ExpressionClauseList[bool]):
class Tuple(ClauseList, ColumnElement[typing_Tuple[Any, ...]]):
class Case(ColumnElement[_T]):
class Cast(WrapsColumnExpression[_T]):
class TryCast(Cast[_T]):
class TypeCoerce(WrapsColumnExpression[_T]):
class Extract(ColumnElement[int]):
class _label_reference(ColumnElement[_T]):
class _textual_label_reference(ColumnElement[Any]):
class UnaryExpression(ColumnElement[_T]):
class CollectionAggregate(UnaryExpression[_T]):
class AsBoolean(WrapsColumnExpression[bool], UnaryExpression[bool]):
class BinaryExpression(OperatorExpression[_T]):
class Slice(ColumnElement[Any]):
class IndexExpression(BinaryExpression[Any]):
class GroupedElement(DQLDMLClauseElement):
class Grouping(GroupedElement, ColumnElement[_T]):
class _OverrideBinds(Grouping[_T]):
class _OverRange(Enum):
class Over(ColumnElement[_T]):
class WithinGroup(ColumnElement[_T]):
class FunctionFilter(Generative, ColumnElement[_T]):
class NamedColumn(KeyedColumnElement[_T]):
class Label(roles.LabeledColumnExprRole[_T], NamedColumn[_T]):
class ColumnClause(
class TableValuedColumn(NamedColumn[_T]):
class CollationClause(ColumnElement[str]):
class _IdentifiedClause(Executable, ClauseElement):
class SavepointClause(_IdentifiedClause):
class RollbackToSavepointClause(_IdentifiedClause):
class ReleaseSavepointClause(_IdentifiedClause):
class quoted_name(util.MemoizedSlots, str):
def _find_columns(clause: ClauseElement) -> Set[ColumnClause[Any]]:
def _type_from_args(args: Sequence[ColumnElement[_T]]) -> TypeEngine[_T]:
def _corresponding_column_or_error(fromclause, column, require_embedded=False):
class _memoized_property_but_not_nulltype(
class AnnotatedColumnElement(Annotated):
class _truncated_label(quoted_name):
class conv(_truncated_label):
class _anonymous_label(_truncated_label):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\events.py
-----------------------------
>     """
      Define event listeners for schema objects,
      that is, :class:`.SchemaItem` and other :class:`.SchemaEventTarget`
      subclasses, including :class:`_schema.MetaData`, :class:`_schema.Table`,
class DDLEvents(event.Events[SchemaEventTarget]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\expression.py
-----------------------------
> """Defines the public namespace for SQL expression constructs."""
  
  
  from __future__ import annotations

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\functions.py
-----------------------------
> """SQL function API, factories, and built-in functions."""
  
  from __future__ import annotations
  
def register_function(
class FunctionElement(Executable, ColumnElement[_T], FromClause, Generative):
class FunctionAsBinary(BinaryExpression[Any]):
class ScalarFunctionColumn(NamedColumn[_T]):
class _FunctionGenerator:
class Function(FunctionElement[_T]):
class GenericFunction(Function[_T]):
class next_value(GenericFunction[int]):
class AnsiFunction(GenericFunction[_T]):
class ReturnTypeFromArgs(GenericFunction[_T]):
class coalesce(ReturnTypeFromArgs[_T]):
class max(ReturnTypeFromArgs[_T]):  # noqa:  A001
class min(ReturnTypeFromArgs[_T]):  # noqa: A001
class sum(ReturnTypeFromArgs[_T]):  # noqa: A001
class now(GenericFunction[datetime.datetime]):
class concat(GenericFunction[str]):
class char_length(GenericFunction[int]):
class random(GenericFunction[float]):
class count(GenericFunction[int]):
class current_date(AnsiFunction[datetime.date]):
class current_time(AnsiFunction[datetime.time]):
class current_timestamp(AnsiFunction[datetime.datetime]):
class current_user(AnsiFunction[str]):
class localtime(AnsiFunction[datetime.datetime]):
class localtimestamp(AnsiFunction[datetime.datetime]):
class session_user(AnsiFunction[str]):
class sysdate(AnsiFunction[datetime.datetime]):
class user(AnsiFunction[str]):
class array_agg(ReturnTypeFromArgs[Sequence[_T]]):
class OrderedSetAgg(GenericFunction[_T]):
class mode(OrderedSetAgg[_T]):
class percentile_cont(OrderedSetAgg[_T]):
class percentile_disc(OrderedSetAgg[_T]):
class rank(GenericFunction[int]):
class dense_rank(GenericFunction[int]):
class percent_rank(GenericFunction[decimal.Decimal]):
class cume_dist(GenericFunction[decimal.Decimal]):
class cube(GenericFunction[_T]):
class rollup(GenericFunction[_T]):
class grouping_sets(GenericFunction[_T]):
class aggregate_strings(GenericFunction[str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\lambdas.py
-----------------------------
>     """Produce a SQL statement that is cached as a lambda.
  
      The Python code object within the lambda is scanned for both Python
      literals that will become bound parameters as well as closure variables
class LambdaOptions(Options):
def lambda_stmt(
class LambdaElement(elements.ClauseElement):
class DeferredLambdaElement(LambdaElement):
class StatementLambdaElement(
class NullLambdaStatement(roles.AllowsLambdaRole, elements.ClauseElement):
class LinkedLambdaElement(StatementLambdaElement):
class AnalyzedCode:
class NonAnalyzedFunction:
class AnalyzedFunction:
class PyWrapper(ColumnOperators):
def insp(lmb):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\naming.py
-----------------------------
> """Establish constraint and index naming conventions."""
  
  from __future__ import annotations
  
class ConventionDict:
def _get_convention(dict_, key):
def _constraint_name_for_table(const, table):
def _column_added_to_pk_constraint(pk_constraint, col):
def _constraint_name(const, table):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\operators.py
-----------------------------
> """Defines operators used in SQL expressions."""
  
  from __future__ import annotations
  
class OperatorType(Protocol):
class Operators:
class custom_op(OperatorType, Generic[_T]):
class ColumnOperators(Operators):
def _operator_fn(fn: Callable[..., Any]) -> OperatorType:
def commutative_op(fn: _FN) -> _FN:
def comparison_op(fn: _FN) -> _FN:
def from_() -> Any:
def function_as_comparison_op() -> Any:
def as_() -> Any:
def exists() -> Any:
def is_true(a: Any) -> Any:
def is_false(a: Any) -> Any:
def is_distinct_from(a: Any, b: Any) -> Any:
def is_not_distinct_from(a: Any, b: Any) -> Any:
def is_(a: Any, b: Any) -> Any:
def is_not(a: Any, b: Any) -> Any:
def collate(a: Any, b: Any) -> Any:
def op(a: Any, opstring: str, b: Any) -> Any:
def like_op(a: Any, b: Any, escape: Optional[str] = None) -> Any:
def not_like_op(a: Any, b: Any, escape: Optional[str] = None) -> Any:
def ilike_op(a: Any, b: Any, escape: Optional[str] = None) -> Any:
def not_ilike_op(a: Any, b: Any, escape: Optional[str] = None) -> Any:
def between_op(a: Any, b: Any, c: Any, symmetric: bool = False) -> Any:
def not_between_op(a: Any, b: Any, c: Any, symmetric: bool = False) -> Any:
def in_op(a: Any, b: Any) -> Any:
def not_in_op(a: Any, b: Any) -> Any:
def distinct_op(a: Any) -> Any:
def any_op(a: Any) -> Any:
def all_op(a: Any) -> Any:
def _escaped_like_impl(
def startswith_op(
def not_startswith_op(
def istartswith_op(
def not_istartswith_op(
def endswith_op(
def not_endswith_op(
def iendswith_op(
def not_iendswith_op(
def contains_op(
def not_contains_op(
def icontains_op(
def not_icontains_op(
def match_op(a: Any, b: Any, **kw: Any) -> Any:
def regexp_match_op(a: Any, b: Any, flags: Optional[str] = None) -> Any:
def not_regexp_match_op(a: Any, b: Any, flags: Optional[str] = None) -> Any:
def regexp_replace_op(
def not_match_op(a: Any, b: Any, **kw: Any) -> Any:
def comma_op(a: Any, b: Any) -> Any:
def filter_op(a: Any, b: Any) -> Any:
def concat_op(a: Any, b: Any) -> Any:
def desc_op(a: Any) -> Any:
def asc_op(a: Any) -> Any:
def nulls_first_op(a: Any) -> Any:
def nulls_last_op(a: Any) -> Any:
def json_getitem_op(a: Any, b: Any) -> Any:
def json_path_getitem_op(a: Any, b: Any) -> Any:
def bitwise_xor_op(a: Any, b: Any) -> Any:
def bitwise_or_op(a: Any, b: Any) -> Any:
def bitwise_and_op(a: Any, b: Any) -> Any:
def bitwise_not_op(a: Any) -> Any:
def bitwise_lshift_op(a: Any, b: Any) -> Any:
def bitwise_rshift_op(a: Any, b: Any) -> Any:
def is_comparison(op: OperatorType) -> bool:
def is_commutative(op: OperatorType) -> bool:
def is_ordering_modifier(op: OperatorType) -> bool:
def is_natural_self_precedent(op: OperatorType) -> bool:
def is_boolean(op: OperatorType) -> bool:
def mirror(op: OperatorType) -> OperatorType:
def is_associative(op: OperatorType) -> bool:
def is_order_by_modifier(op: Optional[OperatorType]) -> bool:
def _asbool(a: Any) -> Any:
class _OpLimit(IntEnum):
def is_precedent(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\roles.py
-----------------------------
>     """Define a "role" within a SQL statement structure.
  
      Classes within SQL Core participate within SQLRole hierarchies in order
      to more accurately indicate where they may be used within SQL statements
class SQLRole:
class UsesInspection:
class AllowsLambdaRole:
class HasCacheKeyRole(SQLRole):
class ExecutableOptionRole(SQLRole):
class LiteralValueRole(SQLRole):
class ColumnArgumentRole(SQLRole):
class ColumnArgumentOrKeyRole(ColumnArgumentRole):
class StrAsPlainColumnRole(ColumnArgumentRole):
class ColumnListRole(SQLRole):
class StringRole(SQLRole):
class TruncatedLabelRole(StringRole, SQLRole):
class ColumnsClauseRole(AllowsLambdaRole, UsesInspection, ColumnListRole):
class TypedColumnsClauseRole(Generic[_T_co], SQLRole):
class LimitOffsetRole(SQLRole):
class ByOfRole(ColumnListRole):
class GroupByRole(AllowsLambdaRole, UsesInspection, ByOfRole):
class OrderByRole(AllowsLambdaRole, ByOfRole):
class StructuralRole(SQLRole):
class StatementOptionRole(StructuralRole):
class OnClauseRole(AllowsLambdaRole, StructuralRole):
class WhereHavingRole(OnClauseRole):
class ExpressionElementRole(TypedColumnsClauseRole[_T_co]):
class ConstExprRole(ExpressionElementRole[_T]):
class LabeledColumnExprRole(ExpressionElementRole[_T]):
class BinaryElementRole(ExpressionElementRole[_T]):
class InElementRole(SQLRole):
class JoinTargetRole(AllowsLambdaRole, UsesInspection, StructuralRole):
class FromClauseRole(ColumnsClauseRole, JoinTargetRole):
class StrictFromClauseRole(FromClauseRole):
class AnonymizedFromClauseRole(StrictFromClauseRole):
class ReturnsRowsRole(SQLRole):
class StatementRole(SQLRole):
class SelectStatementRole(StatementRole, ReturnsRowsRole):
class HasCTERole(ReturnsRowsRole):
class IsCTERole(SQLRole):
class CompoundElementRole(AllowsLambdaRole, SQLRole):
class DMLRole(StatementRole):
class DMLTableRole(FromClauseRole):
class DMLColumnRole(SQLRole):
class DMLSelectRole(SQLRole):
class DDLRole(StatementRole):
class DDLExpressionRole(StructuralRole):
class DDLConstraintColumnRole(SQLRole):
class DDLReferredColumnRole(DDLConstraintColumnRole):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\schema.py
-----------------------------
> """The schema module provides the building blocks for database metadata.
  
  Each element within this module describes a database entity which can be
  created and dropped, or is otherwise part of such an entity.  Examples include
class SchemaConst(Enum):
def _get_table_key(name: str, schema: Optional[str]) -> str:
def _copy_expression(
class SchemaItem(SchemaVisitable):
class HasConditionalDDL:
class HasSchemaAttr(SchemaItem):
class Table(
class Column(DialectKWArgs, SchemaItem, ColumnClause[_T]):
def insert_sentinel(
class ForeignKey(DialectKWArgs, SchemaItem):
class DefaultGenerator(Executable, SchemaItem):
class ColumnDefault(DefaultGenerator, ABC):
class ScalarElementColumnDefault(ColumnDefault):
class _InsertSentinelColumnDefault(ColumnDefault):
class ColumnElementColumnDefault(ColumnDefault):
class _CallableColumnDefaultProtocol(Protocol):
class CallableColumnDefault(ColumnDefault):
class IdentityOptions:
class Sequence(HasSchemaAttr, IdentityOptions, DefaultGenerator):
class FetchedValue(SchemaEventTarget):
class DefaultClause(FetchedValue):
class Constraint(DialectKWArgs, HasConditionalDDL, SchemaItem):
class ColumnCollectionMixin:
class ColumnCollectionConstraint(ColumnCollectionMixin, Constraint):
class CheckConstraint(ColumnCollectionConstraint):
class ForeignKeyConstraint(ColumnCollectionConstraint):
class PrimaryKeyConstraint(ColumnCollectionConstraint):
class UniqueConstraint(ColumnCollectionConstraint):
class Index(
class _NamingSchemaTD(TypedDict, total=False):
class MetaData(HasSchemaAttr):
class Computed(FetchedValue, SchemaItem):
class Identity(IdentityOptions, FetchedValue, SchemaItem):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\selectable.py
-----------------------------
> """The :class:`_expression.FromClause` class of SQL expression elements,
  representing
  SQL tables and derived rowsets.
  
class _JoinTargetProtocol(Protocol):
class _OffsetLimitParam(BindParameter[int]):
class ReturnsRows(roles.ReturnsRowsRole, DQLDMLClauseElement):
class ExecutableReturnsRows(Executable, ReturnsRows):
class TypedReturnsRows(ExecutableReturnsRows, Generic[_TP]):
class Selectable(ReturnsRows):
class HasPrefixes:
class HasSuffixes:
class HasHints:
class FromClause(roles.AnonymizedFromClauseRole, Selectable):
class NamedFromClause(FromClause):
class SelectLabelStyle(Enum):
class Join(roles.DMLTableRole, FromClause):
class NoInit:
class LateralFromClause(NamedFromClause):
class AliasedReturnsRows(NoInit, NamedFromClause):
class FromClauseAlias(AliasedReturnsRows):
class Alias(roles.DMLTableRole, FromClauseAlias):
class TableValuedAlias(LateralFromClause, Alias):
class Lateral(FromClauseAlias, LateralFromClause):
class TableSample(FromClauseAlias):
class CTE(
class _CTEOpts(NamedTuple):
class _ColumnsPlusNames(NamedTuple):
class SelectsRows(ReturnsRows):
class HasCTE(roles.HasCTERole, SelectsRows):
class Subquery(AliasedReturnsRows):
class FromGrouping(GroupedElement, FromClause):
class NamedFromGrouping(FromGrouping, NamedFromClause):
class TableClause(roles.DMLTableRole, Immutable, NamedFromClause):
class ForUpdateArg(ClauseElement):
class Values(roles.InElementRole, HasCTE, Generative, LateralFromClause):
class ScalarValues(roles.InElementRole, GroupedElement, ColumnElement[Any]):
class SelectBase(
class SelectStatementGrouping(GroupedElement, SelectBase, Generic[_SB]):
class GenerativeSelect(DialectKWArgs, SelectBase, Generative):
class CompoundSelectState(CompileState):
class _CompoundSelectKeyword(Enum):
class CompoundSelect(HasCompileState, GenerativeSelect, TypedReturnsRows[_TP]):
class SelectState(util.MemoizedSlots, CompileState):
class _SelectFromElements:
class _MemoizedSelectEntities(
class Select(
class ScalarSelect(
class Exists(UnaryExpression[bool]):
class TextualSelect(SelectBase, ExecutableReturnsRows, Generative):
class AnnotatedFromClause(Annotated):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\sqltypes.py
-----------------------------
> """SQL specific types."""
  from __future__ import annotations
  
  import collections.abc as collections_abc
class HasExpressionLookup(TypeEngineMixin):
class Concatenable(TypeEngineMixin):
class Indexable(TypeEngineMixin):
class String(Concatenable, TypeEngine[str]):
class Text(String):
class Unicode(String):
class UnicodeText(Text):
class Integer(HasExpressionLookup, TypeEngine[int]):
class SmallInteger(Integer):
class BigInteger(Integer):
class Numeric(HasExpressionLookup, TypeEngine[_N]):
class Float(Numeric[_N]):
class Double(Float[_N]):
class _RenderISO8601NoT:
class DateTime(
class Date(_RenderISO8601NoT, HasExpressionLookup, TypeEngine[dt.date]):
class Time(_RenderISO8601NoT, HasExpressionLookup, TypeEngine[dt.time]):
class _Binary(TypeEngine[bytes]):
class LargeBinary(_Binary):
class SchemaType(SchemaEventTarget, TypeEngineMixin):
class Enum(String, SchemaType, Emulated, TypeEngine[Union[str, enum.Enum]]):
class PickleType(TypeDecorator[object]):
class Boolean(SchemaType, Emulated, TypeEngine[bool]):
class _AbstractInterval(HasExpressionLookup, TypeEngine[dt.timedelta]):
class Interval(Emulated, _AbstractInterval, TypeDecorator[dt.timedelta]):
class JSON(Indexable, TypeEngine[Any]):
class ARRAY(
class TupleType(TypeEngine[Tuple[Any, ...]]):
class REAL(Float[_N]):
class FLOAT(Float[_N]):
class DOUBLE(Double[_N]):
class DOUBLE_PRECISION(Double[_N]):
class NUMERIC(Numeric[_N]):
class DECIMAL(Numeric[_N]):
class INTEGER(Integer):
class SMALLINT(SmallInteger):
class BIGINT(BigInteger):
class TIMESTAMP(DateTime):
class DATETIME(DateTime):
class DATE(Date):
class TIME(Time):
class TEXT(Text):
class CLOB(Text):
class VARCHAR(String):
class NVARCHAR(Unicode):
class CHAR(String):
class NCHAR(Unicode):
class BLOB(LargeBinary):
class BINARY(_Binary):
class VARBINARY(_Binary):
class BOOLEAN(Boolean):
class NullType(TypeEngine[None]):
class TableValueType(HasCacheKey, TypeEngine[Any]):
class MatchType(Boolean):
class Uuid(Emulated, TypeEngine[_UUID_RETURN]):
class UUID(Uuid[_UUID_RETURN], type_api.NativeForEmulated):
def _resolve_value_to_type(value: Any) -> TypeEngine[Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\traversals.py
-----------------------------
>     """attribute-wide operations that are useful for classes that use
      __slots__ and therefore can't operate on their attributes in a dictionary.
  
  
def compare(obj1: Any, obj2: Any, **kw: Any) -> bool:
def _preconfigure_traversals(target_hierarchy: Type[Any]) -> None:
class HasShallowCopy(HasTraverseInternals):
class GenerativeOnTraversal(HasShallowCopy):
def _clone(element, **kw):
class HasCopyInternals(HasTraverseInternals):
class _CopyInternalsTraversal(HasTraversalDispatch):
def _flatten_clauseelement(element):
class _GetChildrenTraversal(HasTraversalDispatch):
def _resolve_name_for_compare(element, name, anon_map, **kw):
class TraversalComparatorStrategy(HasTraversalDispatch, util.MemoizedSlots):
class ColIdentityComparatorStrategy(TraversalComparatorStrategy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\type_api.py
-----------------------------
> """Base types API."""
  
  from __future__ import annotations
  
class _NoValueInList(Enum):
class _LiteralProcessorType(Protocol[_T_co]):
class _BindProcessorType(Protocol[_T_con]):
class _ResultProcessorType(Protocol[_T_co]):
class _SentinelProcessorType(Protocol[_T_co]):
class _BaseTypeMemoDict(TypedDict):
class _TypeMemoDict(_BaseTypeMemoDict, total=False):
class _ComparatorFactory(Protocol[_T]):
class TypeEngine(Visitable, Generic[_T]):
class TypeEngineMixin:
class ExternalType(TypeEngineMixin):
class UserDefinedType(
class Emulated(TypeEngineMixin):
def _is_native_for_emulated(
class NativeForEmulated(TypeEngineMixin):
class TypeDecorator(SchemaEventTarget, ExternalType, TypeEngine[_T]):
class Variant(TypeDecorator[_T]):
def to_instance(
def to_instance(typeobj: None, *arg: Any, **kw: Any) -> TypeEngine[None]: ...
def to_instance(
def adapt_type(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\util.py
-----------------------------
> """High level utilities which build upon other modules here."""
  from __future__ import annotations
  
  from collections import deque
def join_condition(
def find_join_source(
def find_left_clause_that_matches_given(
def find_left_clause_to_join_from(
def visit_binary_product(
def find_tables(
def unwrap_order_by(clause: Any) -> Any:
def unwrap_label_reference(element):
def expand_column_list_from_order_by(collist, order_by):
def clause_is_present(clause, search):
def tables_from_leftmost(clause: FromClause) -> Iterator[FromClause]:
def surface_selectables(clause):
def surface_selectables_only(clause: ClauseElement) -> Iterator[ClauseElement]:
def extract_first_column_annotation(column, annotation_name):
def selectables_overlap(left: FromClause, right: FromClause) -> bool:
def bind_values(clause):
def _quote_ddl_expr(element):
class _repr_base:
def _repr_single_value(value):
class _repr_row(_repr_base):
class _long_statement(str):
class _repr_params(_repr_base):
def adapt_criterion_to_null(crit: _CE, nulls: Collection[Any]) -> _CE:
def splice_joins(
def reduce_columns(
def reduce_columns(
def reduce_columns(
def criterion_as_pairs(
class ClauseAdapter(visitors.ReplacingExternalTraversal):
class _ColumnLookup(Protocol):
class ColumnAdapter(ClauseAdapter):
def _offset_or_limit_clause(
def _offset_or_limit_clause_asint_if_possible(
def _make_slice(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\visitors.py
-----------------------------
> """Visitor/traversal interface and library functions."""
  
  from __future__ import annotations
  
class _CompilerDispatchType(Protocol):
class Visitable:
class InternalTraversal(Enum):
class HasTraverseInternals:
class _InternalTraversalDispatchType(Protocol):
class HasTraversalDispatch:
def _generate_traversal_dispatch() -> None:
class ExternallyTraversible(HasTraverseInternals, Visitable):
class _CloneCallableType(Protocol):
class _TraverseTransformCallableType(Protocol[_ET]):
class ExternalTraversal(util.MemoizedSlots):
class CloningExternalTraversal(ExternalTraversal):
class ReplacingExternalTraversal(CloningExternalTraversal):
def iterate(
def traverse_using(
def traverse_using(
def traverse_using(
def traverse(
def traverse(
def traverse(
def cloned_traverse(
def cloned_traverse(
def cloned_traverse(
def replacement_traverse(
def replacement_traverse(
def replacement_traverse(
def replacement_traverse(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\_dml_constructors.py
-----------------------------
>     """Construct an :class:`_expression.Insert` object.
  
      E.g.::
  
def insert(table: _DMLTableArgument) -> Insert:
def update(table: _DMLTableArgument) -> Update:
def delete(table: _DMLTableArgument) -> Delete:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\_elements_constructors.py
-----------------------------
>     """Produce an ALL expression.
  
      For dialects such as that of PostgreSQL, this operator applies
      to usage of the :class:`_types.ARRAY` datatype, for that of
def all_(expr: _ColumnExpressionArgument[_T]) -> CollectionAggregate[bool]:
def and_(  # type: ignore[empty-body]
def any_(expr: _ColumnExpressionArgument[_T]) -> CollectionAggregate[bool]:
def asc(
def collate(
def between(
def outparam(
def not_(clause: BinaryExpression[_T]) -> BinaryExpression[_T]: ...
def not_(clause: _ColumnExpressionArgument[_T]) -> ColumnElement[_T]: ...
def not_(clause: _ColumnExpressionArgument[_T]) -> ColumnElement[_T]:
def bindparam(
def case(
def cast(
def try_cast(
def column(
def desc(
def distinct(expr: _ColumnExpressionArgument[_T]) -> UnaryExpression[_T]:
def bitwise_not(expr: _ColumnExpressionArgument[_T]) -> UnaryExpression[_T]:
def extract(field: str, expr: _ColumnExpressionArgument[Any]) -> Extract:
def false() -> False_:
def funcfilter(
def label(
def null() -> Null:
def nulls_first(column: _ColumnExpressionArgument[_T]) -> UnaryExpression[_T]:
def nulls_last(column: _ColumnExpressionArgument[_T]) -> UnaryExpression[_T]:
def or_(  # type: ignore[empty-body]
def over(
def text(text: str) -> TextClause:
def true() -> True_:
def tuple_(
def type_coerce(
def within_group(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\_orm_types.py
-----------------------------
> """ORM types that need to present specifically for **documentation only** of
  the Executable.execution_options() method, which includes options that
  are meaningful to the ORM.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\_py_util.py
-----------------------------
>     """A map that creates new keys for missing key access.
  
      Considers keys of the form "<ident> <name>" to produce
      new symbols "<name>_<index>", where "index" is an incrementing integer
class prefix_anon_map(Dict[str, str]):
class cache_anon_map(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\_selectable_constructors.py
-----------------------------
>     """Return a named alias of the given :class:`.FromClause`.
  
      For :class:`.Table` and :class:`.Join` objects, the return type is the
      :class:`_expression.Alias` object. Other kinds of :class:`.NamedFromClause`
def alias(
def cte(
def except_(
def except_(
def except_(
def except_all(
def except_all(
def except_all(
def exists(
def intersect(
def intersect(
def intersect(
def intersect_all(
def intersect_all(
def intersect_all(
def join(
def lateral(
def outerjoin(
def select(__ent0: _TCCA[_T0]) -> Select[Tuple[_T0]]: ...
def select(
def select(
def select(
def select(
def select(
def select(
def select(
def select(
def select(
def select(
def select(*entities: _ColumnsClauseArgument[Any], **__kw: Any) -> Select[Any]:
def table(name: str, *columns: ColumnClause[Any], **kw: Any) -> TableClause:
def tablesample(
def union(
def union(
def union(
def union_all(
def union_all(
def union_all(
def values(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\_typing.py
-----------------------------
>     """indicates a class that has a __clause_element__() method"""
  
      def __clause_element__(self) -> roles.ExpressionElementRole[_T_co]: ...
  
class _HasClauseElement(Protocol, Generic[_T_co]):
class _CoreAdapterProto(Protocol):
class _HasDialect(Protocol):
def has_schema_attr(t: FromClauseRole) -> TypeGuard[TableClause]:
def is_quoted_name(s: str) -> TypeGuard[quoted_name]:
def is_has_clause_element(s: object) -> TypeGuard[_HasClauseElement[Any]]:
def is_insert_update(c: ClauseElement) -> TypeGuard[ValuesBase]:
def _no_kw() -> exc.ArgumentError:
def _unexpected_kw(methname: str, kw: Dict[str, Any]) -> NoReturn:
def Nullable(
def Nullable(
def Nullable(val: Type[_T]) -> Type[Optional[_T]]: ...
def Nullable(
def NotNullable(
def NotNullable(
def NotNullable(val: Type[Optional[_T]]) -> Type[_T]: ...
def NotNullable(val: Optional[Type[_T]]) -> Type[_T]: ...
def NotNullable(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\sql\__init__.py
-----------------------------
def __go(lcls: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\fixtures\base.py
-----------------------------
>         """Provide bound MetaData for a single test, dropping afterwards."""
  
          from ...sql import schema
  
class TestBase:
class FutureEngineMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\fixtures\mypy.py
-----------------------------
>                     f"""
                      [mypy]\n
                      plugins = sqlalchemy.ext.mypy.plugin\n
                      show_error_codes = True\n
class MypyTest(TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\fixtures\orm.py
-----------------------------
>         """Run a setup method, framing the operation with a Base class
          that will catch new subclasses to be established within
          the "classes" registry.
  
class ORMTest(TestBase):
class MappedTest(ORMTest, TablesTest, assertions.AssertsExecutionResults):
class DeclarativeMappedTest(MappedTest):
class RemoveORMEventsGlobally:
def fixture_session(**kw):
def close_all_sessions():
def stop_test_class_inside_fixtures(cls):
def after_test():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\fixtures\sql.py
-----------------------------
>         """Insert rows as represented by the fixtures() method."""
          headers, rows = {}, {}
          for table, data in cls.fixtures().items():
              if len(data) < 2:
class TablesTest(TestBase):
class NoCache:
class RemovesEvents:
class ComputedReflectionFixtureTest(TablesTest):
class CacheKeyFixture:
def insertmanyvalues_fixture(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\fixtures\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\plugin\bootstrap.py
-----------------------------
> """
  Bootstrapper for test framework plugins.
  
  The entire rationale for this system is to get the modules in plugin/
def load_file_as_module(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\plugin\plugin_base.py
-----------------------------
> """Testing extensions.
  
  this module is designed to work as a testing-framework-agnostic library,
  created so that multiple test frameworks can be supported at once
def setup_options(make_option):
def configure_follower(follower_ident):
def memoize_important_follower_config(dict_):
def restore_important_follower_config(dict_):
def read_config(root_path):
def pre_begin(opt):
def set_coverage_flag(value):
def post_begin():
def _log(opt_str, value, parser):
def _list_dbs(*args):
def _requirements_opt(opt_str, value, parser):
def _set_tag_include(tag):
def _set_tag_exclude(tag):
def _exclude_tag(opt_str, value, parser):
def _include_tag(opt_str, value, parser):
def pre(fn):
def post(fn):
def _setup_options(opt, file_config):
def _register_sqlite_numeric_dialect(opt, file_config):
def __ensure_cext(opt, file_config):
def _init_symbols(options, file_config):
def _set_disable_asyncio(opt, file_config):
def _engine_uri(options, file_config):
def _requirements(options, file_config):
def _setup_requirements(argument):
def _prep_testing_database(options, file_config):
def _post_setup_options(opt, file_config):
def _setup_profiling(options, file_config):
def want_class(name, cls):
def want_method(cls, fn):
def generate_sub_tests(cls, module, markers):
def start_test_class_outside_fixtures(cls):
def stop_test_class(cls):
def stop_test_class_outside_fixtures(cls):
def _restore_engine():
def final_process_cleanup():
def _setup_engine(cls):
def before_test(test, test_module_name, test_class, test_name):
def after_test(test):
def after_test_fixtures(test):
def _possible_configs_for_cls(cls, reasons=None, sparse=False):
def _do_skips(cls):
def _setup_config(config_obj, ctx):
class FixtureFunctions(abc.ABC):
def set_fixture_functions(fixture_fn_class):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\plugin\pytestplugin.py
-----------------------------
>     """implement a class-based version of pytest parametrize."""
  
      if "_sa_parametrize" not in cls.__dict__:
          return [cls]
def pytest_addoption(parser):
def pytest_configure(config: pytest.Config):
def collect_types_fixture():
def _log_sqlalchemy_info(session):
def pytest_sessionstart(session):
def pytest_sessionfinish(session):
def pytest_unconfigure(config):
def pytest_collection_finish(session):
class XDistHooks:
def pytest_collection_modifyitems(session, config, items):
def pytest_pycollect_makeitem(collector, name, obj):
def _is_wrapped_coroutine_function(fn):
def _apply_maybe_async(obj, recurse=True):
def _parametrize_cls(module, cls):
def pytest_runtest_setup(item):
def pytest_runtest_teardown(item, nextitem):
def pytest_runtest_call(item):
def pytest_runtest_logreport(report):
def setup_class_methods(request):
def setup_test_methods(request):
def _pytest_fn_decorator(target):
class PytestFixtureFunctions(plugin_base.FixtureFunctions):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\plugin\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_cte.py
-----------------------------
class CTETest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_ddl.py
-----------------------------
>     """test the creation of a variety of DDL structures and ensure
      label length limits pass on backends
  
class TableDDLTest(fixtures.TestBase):
class FutureTableDDLTest(fixtures.FutureEngineMixin, TableDDLTest):
class LongNameBlowoutTest(fixtures.TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_deprecations.py
-----------------------------
class DeprecatedCompoundSelectTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_dialect.py
-----------------------------
>     """test that all visit_XYZ() in :class:`_sql.Compiler` subclasses have
      ``**kw``, for #8988.
  
      This test uses runtime code inspection.   Does not need to be a
class PingTest(fixtures.TestBase):
class ArgSignatureTest(fixtures.TestBase):
class ExceptionTest(fixtures.TablesTest):
class IsolationLevelTest(fixtures.TestBase):
class AutocommitIsolationTest(fixtures.TablesTest):
class EscapingTest(fixtures.TestBase):
class WeCanSetDefaultSchemaWEventsTest(fixtures.TestBase):
class FutureWeCanSetDefaultSchemaWEventsTest(
class DifficultParametersTest(fixtures.TestBase):
class ReturningGuardsTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_insert.py
-----------------------------
>         """test another INSERT issue found during #10453"""
  
          table = self.tables.no_implicit_returning
  
class LastrowidTest(fixtures.TablesTest):
class InsertBehaviorTest(fixtures.TablesTest):
class ReturningTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_reflection.py
-----------------------------
>         """tests for #10275"""
          tt = Table(
              tablename,
              metadata,
class OneConnectionTablesTest(fixtures.TablesTest):
class HasTableTest(OneConnectionTablesTest):
class HasIndexTest(fixtures.TablesTest):
class BizarroCharacterTest(fixtures.TestBase):
class TempTableElementsTest(fixtures.TestBase):
class QuotedNameArgumentTest(fixtures.TablesTest):
def _multi_combination(fn):
class ComponentReflectionTest(ComparesTables, OneConnectionTablesTest):
class TableNoColumnsTest(fixtures.TestBase):
class ComponentReflectionTestExtra(ComparesIndexes, fixtures.TestBase):
class NormalizedNameTest(fixtures.TablesTest):
class ComputedReflectionTest(fixtures.ComputedReflectionFixtureTest):
class IdentityReflectionTest(fixtures.TablesTest):
class CompositeKeyReflectionTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_results.py
-----------------------------
>         """test that a scalar select as a column is returned as such
          and that type conversion works OK.
  
          (this is half a SQLAlchemy Core test and half to catch database
class RowFetchTest(fixtures.TablesTest):
class PercentSchemaNamesTest(fixtures.TablesTest):
class ServerSideCursorsTest(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_rowcount.py
-----------------------------
>     """test rowcount functionality"""
  
      __requires__ = ("sane_rowcount",)
      __backend__ = True
class RowCountTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_select.py
-----------------------------
>     """Test the dialect sends appropriate ORDER BY expressions when
      labels are used.
  
      This essentially exercises the "supports_simple_order_by_label"
class CollateTest(fixtures.TablesTest):
class OrderByLabelTest(fixtures.TablesTest):
class ValuesExpressionTest(fixtures.TestBase):
class FetchLimitOffsetTest(fixtures.TablesTest):
class SameNamedSchemaTableTest(fixtures.TablesTest):
class JoinTest(fixtures.TablesTest):
class CompoundSelectTest(fixtures.TablesTest):
class PostCompileParamsTest(
class ExpandingBoundInTest(fixtures.TablesTest):
class LikeFunctionsTest(fixtures.TablesTest):
class ComputedColumnTest(fixtures.TablesTest):
class IdentityColumnTest(fixtures.TablesTest):
class IdentityAutoincrementTest(fixtures.TablesTest):
class ExistsTest(fixtures.TablesTest):
class DistinctOnTest(AssertsCompiledSQL, fixtures.TablesTest):
class IsOrIsNotDistinctFromTest(fixtures.TablesTest):
class WindowFunctionTest(fixtures.TablesTest):
class BitwiseTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_sequence.py
-----------------------------
class SequenceTest(fixtures.TablesTest):
class SequenceCompilerTest(testing.AssertsCompiledSQL, fixtures.TestBase):
class HasSequenceTest(fixtures.TablesTest):
class HasSequenceTestEmpty(fixtures.TestBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_types.py
-----------------------------
>         """test literal rendering"""
  
          # for literal, we test the literal render in an INSERT
          # into a typed column.  we can then SELECT it back as its
class _LiteralRoundTripFixture:
class _UnicodeFixture(_LiteralRoundTripFixture, fixtures.TestBase):
class UnicodeVarcharTest(_UnicodeFixture, fixtures.TablesTest):
class UnicodeTextTest(_UnicodeFixture, fixtures.TablesTest):
class ArrayTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class BinaryTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class TextTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class StringTest(_LiteralRoundTripFixture, fixtures.TestBase):
class IntervalTest(_LiteralRoundTripFixture, fixtures.TestBase):
class PrecisionIntervalTest(IntervalTest):
class _DateFixture(_LiteralRoundTripFixture, fixtures.TestBase):
class DateTimeTest(_DateFixture, fixtures.TablesTest):
class DateTimeTZTest(_DateFixture, fixtures.TablesTest):
class DateTimeMicrosecondsTest(_DateFixture, fixtures.TablesTest):
class TimestampMicrosecondsTest(_DateFixture, fixtures.TablesTest):
class TimeTest(_DateFixture, fixtures.TablesTest):
class TimeTZTest(_DateFixture, fixtures.TablesTest):
class TimeMicrosecondsTest(_DateFixture, fixtures.TablesTest):
class DateTest(_DateFixture, fixtures.TablesTest):
class DateTimeCoercedToDateTimeTest(_DateFixture, fixtures.TablesTest):
class DateTimeHistoricTest(_DateFixture, fixtures.TablesTest):
class DateHistoricTest(_DateFixture, fixtures.TablesTest):
class IntegerTest(_LiteralRoundTripFixture, fixtures.TestBase):
class CastTypeDecoratorTest(_LiteralRoundTripFixture, fixtures.TestBase):
class TrueDivTest(fixtures.TestBase):
class NumericTest(_LiteralRoundTripFixture, fixtures.TestBase):
class BooleanTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class JSONTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class JSONLegacyStringCastIndexTest(
class EnumTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class UuidTest(_LiteralRoundTripFixture, fixtures.TablesTest):
class NativeUUIDTest(UuidTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_unicode_ddl.py
-----------------------------
class UnicodeSchemaTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\test_update_delete.py
-----------------------------
class SimpleUpdateDeleteTest(fixtures.TablesTest):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\suite\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\assertions.py
-----------------------------
>     """Context manager which expects one or more warnings.
  
      With no arguments, squelches all SAWarning emitted via
      sqlalchemy.util.warn and sqlalchemy.util.warn_limited.   Otherwise
def expect_warnings(*messages, **kw):
def expect_warnings_on(db, *messages, **kw):
def emits_warning(*messages):
def expect_deprecated(*messages, **kw):
def expect_deprecated_20(*messages, **kw):
def emits_warning_on(db, *messages):
def uses_deprecated(*messages):
def _expect_warnings_sqla_only(
def _expect_warnings(
def global_cleanup_assertions():
def _assert_no_stray_pool_connections():
def int_within_variance(expected, received, variance):
def eq_regex(a, b, msg=None, flags=0):
def eq_(a, b, msg=None):
def ne_(a, b, msg=None):
def le_(a, b, msg=None):
def is_instance_of(a, b, msg=None):
def is_none(a, msg=None):
def is_not_none(a, msg=None):
def is_true(a, msg=None):
def is_false(a, msg=None):
def is_(a, b, msg=None):
def is_not(a, b, msg=None):
def in_(a, b, msg=None):
def not_in(a, b, msg=None):
def startswith_(a, fragment, msg=None):
def eq_ignore_whitespace(a, b, msg=None):
def _assert_proper_exception_context(exception):
def assert_raises(except_cls, callable_, *args, **kw):
def assert_raises_context_ok(except_cls, callable_, *args, **kw):
def assert_raises_message(except_cls, msg, callable_, *args, **kwargs):
def assert_warns(except_cls, callable_, *args, **kwargs):
def assert_warns_message(except_cls, msg, callable_, *args, **kwargs):
def assert_raises_message_context_ok(
def _assert_raises(
class _ErrorContainer:
def _expect_raises(except_cls, msg=None, check_context=False):
def expect_raises(except_cls, check_context=True):
def expect_raises_message(except_cls, msg, check_context=True):
class AssertsCompiledSQL:
class ComparesTables:
class AssertsExecutionResults:
class ComparesIndexes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\assertsql.py
-----------------------------
>         """reconstruct the statement and params in terms
class AssertRule:
class SQLMatchRule(AssertRule):
class CursorSQL(SQLMatchRule):
class CompiledSQL(SQLMatchRule):
class RegexSQL(CompiledSQL):
class DialectSQL(CompiledSQL):
class CountStatements(AssertRule):
class AllOf(AssertRule):
class EachOf(AssertRule):
class Conditional(EachOf):
class Or(AllOf):
class SQLExecuteObserved:
class SQLCursorExecuteObserved(
class SQLAsserter:
def assert_engine(engine):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\asyncio.py
-----------------------------
>     """called when the test finishes"""
      _async_util.close()
  
  
def _shutdown():
def _run_coroutine_function(fn, *args, **kwargs):
def _assume_async(fn, *args, **kwargs):
def _maybe_async_provisioning(fn, *args, **kwargs):
def _maybe_async(fn, *args, **kwargs):
def _maybe_async_wrapper(fn):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\config.py
-----------------------------
>     r"""Deliver multiple versions of a test based on positional combinations.
  
      This is a facade over pytest.mark.parametrize.
  
def combinations(
def combinations_list(arg_iterable: Iterable[Tuple[Any, ...]], **kw):
class Variation:
def variation(argname_or_fn, cases=None):
def variation_fixture(argname, cases, scope="function"):
def fixture(*arg: Any, **kw: Any) -> Any:
def get_current_test_name() -> str:
def mark_base_test_class() -> Any:
class _AddToMarker:
class Config:
def skip_test(msg):
def async_test(fn):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\engines.py
-----------------------------
>     """Decorator that rolls back all open connections after fn execution."""
  
      try:
          fn(*args, **kw)
class ConnectionKiller:
def assert_conns_closed(fn, *args, **kw):
def rollback_open_connections(fn, *args, **kw):
def close_first(fn, *args, **kw):
def close_open_connections(fn, *args, **kw):
def all_dialects(exclude=None):
class ReconnectFixture:
def reconnecting_engine(url=None, options=None):
def testing_engine(
def testing_engine(
def testing_engine(
def mock_engine(dialect_name=None):
class DBAPIProxyCursor:
class DBAPIProxyConnection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\entities.py
-----------------------------
>         """'Deep, sparse compare.
  
          Deeply compare two entities, following the non-None attributes of the
          non-persisted object, if possible.
class BasicEntity:
class ComparableMixin:
class ComparableEntity(ComparableMixin, BasicEntity):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\exclusions.py
-----------------------------
>     """Return a server_version_info tuple."""
  
      # force metadata to be retrieved
      conn = engine.connect()
def skip_if(predicate, reason=None):
def fails_if(predicate, reason=None):
class compound:
def only_if(predicate, reason=None):
def succeeds_if(predicate, reason=None):
class Predicate:
class BooleanPredicate(Predicate):
class SpecPredicate(Predicate):
class LambdaPredicate(Predicate):
class NotPredicate(Predicate):
class OrPredicate(Predicate):
def _is_excluded(db, op, spec):
def _server_version(engine):
def db_spec(*dbs):
def open():  # noqa
def closed(reason="marked as skip"):
def fails(reason=None):
def future():
def fails_on(db, reason=None):
def fails_on_everything_except(*dbs):
def skip(db, reason=None):
def only_on(dbs, reason=None):
def exclude(db, op, spec, reason=None):
def against(config, *queries):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\pickleable.py
-----------------------------
> """Classes used in pickling tests, need to be at the module level for
  unpickling.
class User(ComparableEntity):
class Order(ComparableEntity):
class Dingaling(ComparableEntity):
class EmailUser(User):
class Address(ComparableEntity):
class Child1(ComparableEntity):
class Child2(ComparableEntity):
class Parent(ComparableEntity):
class Screen:
class Mixin:
class AddressWMixin(Mixin, ComparableEntity):
class Foo:
class Bar:
class OldSchool:
class OldSchoolWithoutCompare:
class BarWithoutCompare:
class NotComparable:
class BrokenComparable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\profiling.py
-----------------------------
> """Profiling support for unit and performance tests.
  
  These are special purpose profiling methods which operate
  in a more fine-grained way than nose's profiling plugin.
def _start_current_test(id_):
class ProfileStatsFile:
def function_call_count(variance=0.05, times=1, warmup=0):
def count_functions(variance=0.05):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\provision.py
-----------------------------
>     """Generate a set of URLs to test given configured URLs plus additional
      driver names.
  
      Given:
class register:
def create_follower_db(follower_ident):
def setup_config(db_url, options, file_config, follower_ident):
def drop_follower_db(follower_ident):
def generate_db_urls(db_urls, extra_drivers):
def _generate_driver_urls(url, extra_drivers):
def generate_driver_url(url, driver, query_str):
def _configs_for_db_operation():
def drop_all_schema_objects_pre_tables(cfg, eng):
def drop_all_schema_objects_post_tables(cfg, eng):
def drop_all_schema_objects(cfg, eng):
def drop_views(cfg, eng):
def drop_materialized_views(cfg, eng):
def create_db(cfg, eng, ident):
def drop_db(cfg, eng, ident):
def _adapt_update_db_opts(fn):
def update_db_opts(db_url, db_opts, options):
def post_configure_engine(url, engine, follower_ident):
def follower_url_from_main(url, ident):
def configure_follower(cfg, ident):
def run_reap_dbs(url, ident):
def reap_dbs(idents_file):
def temp_table_keyword_args(cfg, eng):
def prepare_for_drop_tables(config, connection):
def stop_test_class_outside_fixtures(config, db, testcls):
def get_temp_table_name(cfg, eng, base_name):
def set_default_schema_on_connection(cfg, dbapi_connection, schema_name):
def upsert(
def normalize_sequence(cfg, sequence):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\requirements.py
-----------------------------
> """Global database feature support policy.
  
  Provides decorators to mark tests requiring specific feature support from the
  target database.
class Requirements:
class SuiteRequirements(Requirements):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\schema.py
-----------------------------
>     """A schema.Table wrapper/hook for dialect-specific tweaks."""
  
      test_opts = {k: kw.pop(k) for k in list(kw) if k.startswith("test_")}
  
def Table(*args, **kw) -> schema.Table:
def mapped_column(*args, **kw):
def Column(*args, **kw):
def _schema_column(factory, args, kw):
class eq_type_affinity:
class eq_compile_type:
class eq_clause_element:
def _truncate_name(dialect, name):
def pep435_enum(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\util.py
-----------------------------
>     """True if the given sorting conforms to the given partial ordering."""
  
      deps = defaultdict(set)
      for parent, child in tuples:
def picklers():
def random_choices(population, k=1):
def round_decimal(value, prec):
class RandomSet(set):
def conforms_partial_ordering(tuples, sorted_elements):
def all_partial_orderings(tuples, elements):
def function_named(fn, name):
def run_as_contextmanager(ctx, fn, *arg, **kw):
def rowset(results):
def fail(msg):
def provide_metadata(fn, *args, **kw):
def flag_combinations(*combinations):
def lambda_combinations(lambda_arg_sets, **kw):
def resolve_lambda(__fn, **kw):
def metadata_fixture(ddl="function"):
def force_drop_names(*names):
class adict(dict):
def drop_all_tables_from_metadata(metadata, engine_or_connection):
def drop_all_tables(
def teardown_events(event_cls):
def total_size(o):
def count_cache_key_tuples(tup):
def skip_if_timeout(seconds: float, cleanup: Any = None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\warnings.py
-----------------------------
>     """hook for setting up warnings filters.
  
      SQLAlchemy-specific classes must only be here and not in pytest config,
      as we need to delay importing SQLAlchemy until conftest.py has been
def warn_test_suite(message):
def setup_filters():
def assert_warnings(fn, warning_msgs, regex=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\testing\__init__.py
-----------------------------
def against(*queries):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\compat.py
-----------------------------
> """Handle Python version/platform incompatibilities."""
  
  from __future__ import annotations
  
class FullArgSpec(typing.NamedTuple):
def inspect_getfullargspec(func: Callable[..., Any]) -> FullArgSpec:
def importlib_metadata_get(group):
def b(s):
def b64decode(x: str) -> bytes:
def b64encode(x: bytes) -> str:
def decode_backslashreplace(text: bytes, encoding: str) -> str:
def cmp(a, b):
def _formatannotation(annotation, base_module=None):
def inspect_formatargspec(
def dataclass_fields(cls: Type[Any]) -> Iterable[dataclasses.Field[Any]]:
def local_dataclass_fields(cls: Type[Any]) -> Iterable[dataclasses.Field[Any]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\concurrency.py
-----------------------------
>     """Asyncio util for test suite/ util only"""
  
      def __init__(self) -> None:
          if have_greenlet:
class _AsyncUtil:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\deprecations.py
-----------------------------
> """Helpers related to deprecation of functions, methods, classes, other
def _warn_with_version(
def warn_deprecated(
def warn_deprecated_limited(
def deprecated_cls(
def deprecated(
def moved_20(
def became_legacy_20(
def deprecated_params(**specs: Tuple[str, str]) -> Callable[[_F], _F]:
def _sanitize_restructured_text(text: str) -> str:
def _decorate_cls_with_warning(
def _decorate_with_warning(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py
-----------------------------
> """Routines to help with the creation, loading and introspection of
  modules, classes, hierarchies, attributes, functions, and methods.
  
def md5_hex(x: Any) -> str:
class safe_reraise:
def walk_subclasses(cls: Type[_T]) -> Iterator[Type[_T]]:
def string_or_unprintable(element: Any) -> str:
def clsname_as_plain_name(
def method_is_overridden(
def decode_slice(slc: slice) -> Tuple[Any, ...]:
def _unique_symbols(used: Sequence[str], *bases: str) -> Iterator[str]:
def map_bits(fn: Callable[[int], Any], n: int) -> Iterator[Any]:
def decorator(target: Callable[..., Any]) -> Callable[[_Fn], _Fn]:
def _exec_code_in_env(
class PluginLoader:
def _inspect_func_args(fn):
def get_cls_kwargs(
def get_cls_kwargs(
def get_cls_kwargs(
def get_func_kwargs(func: Callable[..., Any]) -> List[str]:
def get_callable_argspec(
def format_argspec_plus(
def format_argspec_init(method, grouped=True):
def create_proxy_methods(
def getargspec_init(method):
def unbound_method_to_callable(func_or_cls):
def generic_repr(
class portable_instancemethod:
def class_hierarchy(cls):
def iterate_attributes(cls):
def monkeypatch_proxied_specials(
def methods_equivalent(meth1, meth2):
def as_interface(obj, cls=None, methods=None, required=None):
class generic_fn_descriptor(Generic[_T_co]):
class _non_memoized_property(generic_fn_descriptor[_T_co]):
class _memoized_property(generic_fn_descriptor[_T_co]):
def memoized_instancemethod(fn: _F) -> _F:
class HasMemoized:
class MemoizedSlots:
def asbool(obj: Any) -> bool:
def bool_or_str(*text: str) -> Callable[[str], Union[str, bool]]:
def asint(value: Any) -> Optional[int]:
def coerce_kw_type(
def constructor_key(obj: Any, cls: Type[Any]) -> Tuple[Any, ...]:
def constructor_copy(obj: _T, cls: Type[_T], *args: Any, **kw: Any) -> _T:
def counter() -> Callable[[], int]:
def duck_type_collection(
def assert_arg_type(
def dictlike_iteritems(dictlike):
class classproperty(property):
class hybridproperty(Generic[_T]):
class rw_hybridproperty(Generic[_T]):
class hybridmethod(Generic[_T]):
class symbol(int):
class _IntFlagMeta(type):
class _FastIntFlag(metaclass=_IntFlagMeta):
def parse_user_argument_for_enum(
def set_creation_order(instance: Any) -> None:
def warn_exception(func: Callable[..., Any], *args: Any, **kwargs: Any) -> Any:
def ellipses_string(value, len_=25):
class _hash_limit_string(str):
def warn(msg: str, code: Optional[str] = None) -> None:
def warn_limited(msg: str, args: Sequence[Any]) -> None:
def tag_method_for_warnings(
def _warnings_warn(
def only_once(
def chop_traceback(
def attrsetter(attrname):
class TypingOnly:
class EnsureKWArg:
def wrap_callable(wrapper, fn):
def quoted_token_parser(value):
def add_parameter_text(params: Any, text: str) -> Callable[[_F], _F]:
def _dedent_docstring(text: str) -> str:
def inject_docstring_text(
def inject_param_text(doctext: str, inject_params: Dict[str, str]) -> str:
def repr_tuple_names(names: List[str]) -> Optional[str]:
def has_compiled_ext(raise_=False):
class _Missing(enum.Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\preloaded.py
-----------------------------
> """supplies the "preloaded" registry to resolve circular module imports at
  runtime.
  
class _ModuleRegistry:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\queue.py
-----------------------------
> """An adaptation of Py2.3/2.4's Queue module which supports reentrant
  behavior, using RLock instead of Lock for its mutex object.  The
  Queue object is used exclusively by the sqlalchemy.pool.QueuePool
  class.
class Empty(Exception):
class Full(Exception):
class QueueCommon(Generic[_T]):
class Queue(QueueCommon[_T]):
class AsyncAdaptedQueue(QueueCommon[_T]):
class FallbackAsyncAdaptedQueue(AsyncAdaptedQueue[_T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\tool_support.py
-----------------------------
> """support routines for the helpers in tools/.
  
  These aren't imported by the enclosing util package as the are not
  needed for normal library use.
class code_writer_cmd:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\topological.py
-----------------------------
> """Topological sorting algorithms."""
  
  from __future__ import annotations
  
def sort_as_subsets(
def sort(
def find_cycles(
def _gen_edges(edges: DefaultDict[_T, Set[_T]]) -> Set[Tuple[_T, _T]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\typing.py
-----------------------------
>     """protocol for types that have ``__args__``
  
      there's no public interface for this AFAIK
  
def is_fwd_none(typ: Any) -> bool:
class ArgsTypeProtocol(Protocol):
class GenericProtocol(Protocol[_T]):
class SupportsKeysAndGetItem(Protocol[_KT, _VT_co]):
def de_stringify_annotation(
def fixup_container_fwd_refs(
def _copy_generic_annotation_with(
def eval_expression(
def eval_name_only(
def resolve_name_to_real_class_name(name: str, module_name: str) -> str:
def is_pep593(type_: Optional[Any]) -> bool:
def is_non_string_iterable(obj: Any) -> TypeGuard[Iterable[Any]]:
def is_literal(type_: Any) -> bool:
def is_newtype(type_: Optional[_AnnotationScanType]) -> TypeGuard[NewType]:
def is_generic(type_: _AnnotationScanType) -> TypeGuard[GenericProtocol[Any]]:
def is_pep695(type_: _AnnotationScanType) -> TypeGuard[TypeAliasType]:
def flatten_newtype(type_: NewType) -> Type[Any]:
def pep695_values(type_: _AnnotationScanType) -> Set[Any]:
def is_fwd_ref(
def de_optionalize_union_types(type_: str) -> str: ...
def de_optionalize_union_types(type_: Type[Any]) -> Type[Any]: ...
def de_optionalize_union_types(
def de_optionalize_union_types(
def _de_optionalize_fwd_ref_union_types(
def _de_optionalize_fwd_ref_union_types(
def _de_optionalize_fwd_ref_union_types(
def make_union_type(*types: _AnnotationScanType) -> Type[Any]:
def includes_none(type_: Any) -> bool:
def is_a_type(type_: Any) -> bool:
def is_union(type_: Any) -> TypeGuard[ArgsTypeProtocol]:
def is_origin_of_cls(
def is_origin_of(
def _get_type_name(type_: Type[Any]) -> str:
class DescriptorProto(Protocol):
class DescriptorReference(Generic[_DESC]):
class RODescriptorReference(Generic[_DESC_co]):
class CallableReference(Generic[_FN]):
class _TypingInstances:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\_collections.py
-----------------------------
> """Collection classes and helpers."""
  from __future__ import annotations
  
  import operator
def merge_lists_w_ordering(a: List[Any], b: List[Any]) -> List[Any]:
def coerce_to_immutabledict(d: Mapping[_KT, _VT]) -> immutabledict[_KT, _VT]:
class FacadeDict(ImmutableDictBase[_KT, _VT]):
class Properties(Generic[_T]):
class OrderedProperties(Properties[_T]):
class ReadOnlyProperties(ReadOnlyContainer, Properties[_T]):
def _ordered_dictionary_sort(d, key=None):
class WeakSequence(Sequence[_T]):
class OrderedIdentitySet(IdentitySet):
class PopulateDict(Dict[_KT, _VT]):
class WeakPopulateDict(Dict[_KT, _VT]):
class UniqueAppender(Generic[_T]):
def coerce_generator_arg(arg: Any) -> List[Any]:
def to_list(x: Any, default: Optional[List[Any]] = None) -> List[Any]:
def has_intersection(set_: Container[Any], iterable: Iterable[Any]) -> bool:
def to_set(x):
def to_column_set(x: Any) -> Set[Any]:
def update_copy(
def flatten_iterator(x: Iterable[_T]) -> Iterator[_T]:
class LRUCache(typing.MutableMapping[_KT, _VT]):
class _CreateFuncType(Protocol[_T_co]):
class _ScopeFuncType(Protocol):
class ScopedRegistry(Generic[_T]):
class ThreadLocalRegistry(ScopedRegistry[_T]):
def has_dupes(sequence, target):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py
-----------------------------
>     """Awaits an async function in a sync method.
  
      The sync method must be inside a :func:`greenlet_spawn` context.
      :func:`await_only` calls cannot be nested.
def is_exit_exception(e: BaseException) -> bool:
class _AsyncIoGreenlet(greenlet):
def _safe_cancel_awaitable(awaitable: Awaitable[Any]) -> None:
def in_greenlet() -> bool:
def await_only(awaitable: Awaitable[_T]) -> _T:
def await_fallback(awaitable: Awaitable[_T]) -> _T:
class AsyncAdaptedLock:
def get_event_loop() -> asyncio.AbstractEventLoop:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\_has_cy.py
-----------------------------
def _import_cy_extensions():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\_py_collections.py
-----------------------------
>     """A set that considers only object id() for uniqueness.
  
      This strategy has edge cases for builtin types- it's possible to have
      two 'foo' strings in one of these sets, for example.  Use sparingly.
class ReadOnlyContainer:
class ImmutableDictBase(ReadOnlyContainer, Dict[_KT, _VT]):
class immutabledict(ImmutableDictBase[_KT, _VT]):
class OrderedSet(Set[_T]):
class IdentitySet:
def unique_list(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\events.py
-----------------------------
> """Core event interfaces."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\exc.py
-----------------------------
> """Exceptions used with SQLAlchemy.
  
  The base exception class is :exc:`.SQLAlchemyError`.  Exceptions which are
  raised as a result of DBAPI exceptions are all subclasses of
class HasDescriptionCode:
class SQLAlchemyError(HasDescriptionCode, Exception):
class ArgumentError(SQLAlchemyError):
class DuplicateColumnError(ArgumentError):
class ObjectNotExecutableError(ArgumentError):
class NoSuchModuleError(ArgumentError):
class NoForeignKeysError(ArgumentError):
class AmbiguousForeignKeysError(ArgumentError):
class ConstraintColumnNotFoundError(ArgumentError):
class CircularDependencyError(SQLAlchemyError):
class CompileError(SQLAlchemyError):
class UnsupportedCompilationError(CompileError):
class IdentifierError(SQLAlchemyError):
class DisconnectionError(SQLAlchemyError):
class InvalidatePoolError(DisconnectionError):
class TimeoutError(SQLAlchemyError):  # noqa
class InvalidRequestError(SQLAlchemyError):
class IllegalStateChangeError(InvalidRequestError):
class NoInspectionAvailable(InvalidRequestError):
class PendingRollbackError(InvalidRequestError):
class ResourceClosedError(InvalidRequestError):
class NoSuchColumnError(InvalidRequestError, KeyError):
class NoResultFound(InvalidRequestError):
class MultipleResultsFound(InvalidRequestError):
class NoReferenceError(InvalidRequestError):
class AwaitRequired(InvalidRequestError):
class MissingGreenlet(InvalidRequestError):
class NoReferencedTableError(NoReferenceError):
class NoReferencedColumnError(NoReferenceError):
class NoSuchTableError(InvalidRequestError):
class UnreflectableTableError(InvalidRequestError):
class UnboundExecutionError(InvalidRequestError):
class DontWrapMixin:
class StatementError(SQLAlchemyError):
class DBAPIError(StatementError):
class InterfaceError(DBAPIError):
class DatabaseError(DBAPIError):
class DataError(DatabaseError):
class OperationalError(DatabaseError):
class IntegrityError(DatabaseError):
class InternalError(DatabaseError):
class ProgrammingError(DatabaseError):
class NotSupportedError(DatabaseError):
class SATestSuiteWarning(Warning):
class SADeprecationWarning(HasDescriptionCode, DeprecationWarning):
class Base20DeprecationWarning(SADeprecationWarning):
class LegacyAPIWarning(Base20DeprecationWarning):
class MovedIn20Warning(Base20DeprecationWarning):
class SAPendingDeprecationWarning(PendingDeprecationWarning):
class SAWarning(HasDescriptionCode, RuntimeWarning):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\inspection.py
-----------------------------
> """The inspection module provides the :func:`_sa.inspect` function,
  which delivers runtime information about a wide variety
  of SQLAlchemy objects, both within the Core as well as the
  ORM.
class Inspectable(Generic[_T]):
class _InspectableTypeProtocol(Protocol[_TCov]):
class _InspectableProtocol(Protocol[_TCov]):
def inspect(
def inspect(
def inspect(subject: Inspectable[_IN], raiseerr: bool = True) -> _IN: ...
def inspect(subject: Any, raiseerr: Literal[False] = ...) -> Optional[Any]: ...
def inspect(subject: Any, raiseerr: bool = True) -> Any: ...
def inspect(subject: Any, raiseerr: bool = True) -> Any:
def _inspects(
def _self_inspects(cls: _TT) -> _TT:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\log.py
-----------------------------
> """Logging control and utilities.
  
  Control of logging for SA can be performed from the regular python logging
  module.  The regular dotted module namespace is used, starting at
def _add_default_handler(logger: logging.Logger) -> None:
def _qual_logger_name_for_cls(cls: Type[Identified]) -> str:
def class_logger(cls: Type[_IT]) -> Type[_IT]:
class Identified:
class InstanceLogger:
def instance_logger(
class echo_property:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\schema.py
-----------------------------
> """Compatibility namespace for sqlalchemy.sql.schema and related."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\types.py
-----------------------------
> """Compatibility namespace for sqlalchemy.sql.types."""
  
  
  from __future__ import annotations

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\sqlalchemy\__init__.py
-----------------------------
def __go(lcls: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\authentication.py
-----------------------------
class AuthenticationMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\base.py
-----------------------------
>     """
      If the user calls Request.body() from their dispatch function
      we cache the entire request body in memory and pass that to downstream middlewares,
      but if they call Request.stream() then all we do is send an
class _CachedRequest(Request):
class BaseHTTPMiddleware:
class _StreamingResponse(Response):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\cors.py
-----------------------------
class CORSMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\errors.py
-----------------------------
> STYLES = """
  p {
      color: #211c1c;
  }
class ServerErrorMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\exceptions.py
-----------------------------
class ExceptionMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\gzip.py
-----------------------------
>         """Apply compression on the response body.
  
          If more_body is False, any compression file should be closed. If it
          isn't, it won't be closed automatically until all background tasks
class GZipMiddleware:
class IdentityResponder:
class GZipResponder(IdentityResponder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\httpsredirect.py
-----------------------------
class HTTPSRedirectMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\sessions.py
-----------------------------
class SessionMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\trustedhost.py
-----------------------------
class TrustedHostMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\wsgi.py
-----------------------------
>     """
      Builds a scope and request body into a WSGI environ object.
def build_environ(scope: Scope, body: bytes) -> dict[str, Any]:
class WSGIMiddleware:
class WSGIResponder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\middleware\__init__.py
-----------------------------
class _MiddlewareFactory(Protocol[P]):
class Middleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\applications.py
-----------------------------
>     """Creates an Starlette application."""
  
      def __init__(
          self: AppType,
class Starlette:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\authentication.py
-----------------------------
def has_required_scope(conn: HTTPConnection, scopes: Sequence[str]) -> bool:
def requires(
class AuthenticationError(Exception):
class AuthenticationBackend:
class AuthCredentials:
class BaseUser:
class SimpleUser(BaseUser):
class UnauthenticatedUser(BaseUser):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\background.py
-----------------------------
class BackgroundTask:
class BackgroundTasks(BackgroundTask):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\concurrency.py
-----------------------------
class _StopIteration(Exception):
def _next(iterator: Iterator[T]) -> T:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\config.py
-----------------------------
class undefined:
class EnvironError(Exception):
class Environ(MutableMapping[str, str]):
class Config:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\convertors.py
-----------------------------
class Convertor(Generic[T]):
class StringConvertor(Convertor[str]):
class PathConvertor(Convertor[str]):
class IntegerConvertor(Convertor[int]):
class FloatConvertor(Convertor[float]):
class UUIDConvertor(Convertor[uuid.UUID]):
def register_url_convertor(key: str, convertor: Convertor[Any]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\datastructures.py
-----------------------------
>     """
      A URL path string that may also hold an associated protocol and/or host.
      Used by the routing to return `url_path_for` matches.
class Address(NamedTuple):
class URL:
class URLPath(str):
class Secret:
class CommaSeparatedStrings(Sequence[str]):
class ImmutableMultiDict(Mapping[_KeyType, _CovariantValueType]):
class MultiDict(ImmutableMultiDict[Any, Any]):
class QueryParams(ImmutableMultiDict[str, str]):
class UploadFile:
class FormData(ImmutableMultiDict[str, Union[UploadFile, str]]):
class Headers(Mapping[str, str]):
class MutableHeaders(Headers):
class State:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\endpoints.py
-----------------------------
>         """Override to handle an incoming websocket connection"""
          await websocket.accept()
  
      async def on_receive(self, websocket: WebSocket, data: Any) -> None:
class HTTPEndpoint:
class WebSocketEndpoint:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\exceptions.py
-----------------------------
class HTTPException(Exception):
class WebSocketException(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\formparsers.py
-----------------------------
>     """The maximum size of the spooled temporary file used to store file data."""
      max_part_size = 1024 * 1024  # 1MB
class FormMessage(Enum):
class MultipartPart:
def _user_safe_decode(src: bytes | bytearray, codec: str) -> str:
class MultiPartException(Exception):
class FormParser:
class MultiPartParser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\requests.py
-----------------------------
>     """
      This function parses a ``Cookie`` HTTP header into a dict of key/value pairs.
  
      It attempts to mimic browser cookie parsing behavior: browsers and web servers
def cookie_parser(cookie_string: str) -> dict[str, str]:
class ClientDisconnect(Exception):
class HTTPConnection(Mapping[str, Any]):
class Request(HTTPConnection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\responses.py
-----------------------------
>         r"""
          Multipart response headers generator.
  
          ```
class Response:
class HTMLResponse(Response):
class PlainTextResponse(Response):
class JSONResponse(Response):
class RedirectResponse(Response):
class StreamingResponse(Response):
class MalformedRangeHeader(Exception):
class RangeNotSatisfiable(Exception):
class FileResponse(Response):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\routing.py
-----------------------------
>     """
      Raised by `.url_for(name, **path_params)` and `.url_path_for(name, **path_params)`
      if no matching route exists.
class NoMatchFound(Exception):
class Match(Enum):
def iscoroutinefunction_or_partial(obj: Any) -> bool:  # pragma: no cover
def request_response(
def websocket_session(
def get_name(endpoint: Callable[..., Any]) -> str:
def replace_params(
def compile_path(
class BaseRoute:
class Route(BaseRoute):
class WebSocketRoute(BaseRoute):
class Mount(BaseRoute):
class Host(BaseRoute):
class _AsyncLiftContextManager(AbstractAsyncContextManager[_T]):
def _wrap_gen_lifespan_context(
class _DefaultLifespan:
class Router:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\schemas.py
-----------------------------
>         """
          Given the routes, yields the following information:
  
          - path
class OpenAPIResponse(Response):
class EndpointInfo(NamedTuple):
class BaseSchemaGenerator:
class SchemaGenerator(BaseSchemaGenerator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\staticfiles.py
-----------------------------
>         """
          Given `directory` and `packages` arguments, return a list of all the
          directories that should be used for serving static files from.
class NotModifiedResponse(Response):
class StaticFiles:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\status.py
-----------------------------
> """
  HTTP codes
  See HTTP Status Code Registry:
  https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\templating.py
-----------------------------
>     """
      templates = Jinja2Templates("templates")
  
      return templates.TemplateResponse("index.html", {"request": request})
class _TemplateResponse(HTMLResponse):
class Jinja2Templates:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\testclient.py
-----------------------------
>     """
      Provide an ASGI3 interface onto an ASGI2 app.
def _is_asgi3(app: ASGI2App | ASGI3App) -> TypeGuard[ASGI3App]:
class _WrapASGI2:
class _AsyncBackend(TypedDict):
class _Upgrade(Exception):
class WebSocketDenialResponse(  # type: ignore[misc]
class WebSocketTestSession:
class _TestClientTransport(httpx.BaseTransport):
class TestClient(httpx.Client):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\types.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\websockets.py
-----------------------------
>         """
          Receive ASGI websocket messages, ensuring valid state transitions.
class WebSocketState(enum.Enum):
class WebSocketDisconnect(Exception):
class WebSocket(HTTPConnection):
class WebSocketClose:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\_exception_handler.py
-----------------------------
def _lookup_exception_handler(exc_handlers: ExceptionHandlers, exc: Exception) -> ExceptionHandler | None:
def wrap_app_handling_exceptions(app: ASGIApp, conn: Request | WebSocket) -> ASGIApp:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\_utils.py
-----------------------------
def is_async_callable(obj: AwaitableCallable[T]) -> TypeIs[AwaitableCallable[T]]: ...
def is_async_callable(obj: Any) -> TypeIs[AwaitableCallable[Any]]: ...
def is_async_callable(obj: Any) -> Any:
class AwaitableOrContextManager(Awaitable[T_co], AbstractAsyncContextManager[T_co], Protocol[T_co]): ...
class SupportsAsyncClose(Protocol):
class AwaitableOrContextManagerWrapper(Generic[SupportsAsyncCloseType]):
def collapse_excgroups() -> Generator[None, None, None]:
def get_route_path(scope: Scope) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\starlette\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example\base.py
-----------------------------
>     """Base class for example plugin used in the tutorial.
class FormatterBase(metaclass=abc.ABCMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example\load_as_driver.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example\load_as_extension.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example\setup.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example\simple.py
-----------------------------
>     """A very basic formatter."""
  
      def format(self, data):
class Simple(base.FormatterBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example2\fields.py
-----------------------------
>     """Format values as a reStructuredText field list.
  
      For example::
  
class FieldList(base.FormatterBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example2\setup.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\example2\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\extension_unimportable.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\manager.py
-----------------------------
> """TestExtensionManager
  
  Extension manager used only for testing.
class TestExtensionManager(extension.ExtensionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_cache.py
-----------------------------
> """Tests for stevedore._cache
class TestCache(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_callback.py
-----------------------------
> """Tests for failure loading callback
class TestCallback(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_dispatch.py
-----------------------------
def check_dispatch(ep, *args, **kwds):
class TestDispatch(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_driver.py
-----------------------------
> """Tests for stevedore.extension
class TestCallback(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_enabled.py
-----------------------------
class TestEnabled(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_example_fields.py
-----------------------------
> """Tests for stevedore.example2.fields
class TestExampleFields(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_example_simple.py
-----------------------------
> """Tests for stevedore.example.simple
class TestExampleSimple(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_extension.py
-----------------------------
> """Tests for stevedore.extension
class FauxExtension:
class BrokenExtension:
class TestCallback(utils.TestCase):
class TestLoadRequirementsNewSetuptools(utils.TestCase):
class TestLoadRequirementsOldSetuptools(utils.TestCase):
class TestExtensionProperties(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_hook.py
-----------------------------
class TestHook(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_named.py
-----------------------------
class TestNamed(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_sphinxext.py
-----------------------------
> """Tests for the sphinx extension
def _make_ext(name, docstring):
class TestSphinxExt(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\test_test_manager.py
-----------------------------
class TestTestManager(utils.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\utils.py
-----------------------------
class TestCase(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\dispatch.py
-----------------------------
>     """Loads all plugins and filters on execution.
  
      This is useful for long-running processes that need to pass
      different inputs to different extensions.
class DispatchExtensionManager(EnabledExtensionManager):
class NameDispatchExtensionManager(DispatchExtensionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\driver.py
-----------------------------
>     """Load a single plugin with a given name from the namespace.
  
      :param namespace: The namespace for the entry points.
      :type namespace: str
class DriverManager(NamedExtensionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\enabled.py
-----------------------------
>     """Loads only plugins that pass a check function.
  
      The check_func argument should return a boolean, with ``True``
      indicating that the extension should be loaded and made available
class EnabledExtensionManager(ExtensionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\exception.py
-----------------------------
>     """There was more than one extension, or none, that matched the query."""
  
  
  class NoMatches(NoUniqueMatch):
class NoUniqueMatch(RuntimeError):
class NoMatches(NoUniqueMatch):
class MultipleMatches(NoUniqueMatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\extension.py
-----------------------------
> """ExtensionManager
class Extension:
class ExtensionManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\hook.py
-----------------------------
>     """Coordinate execution of multiple extensions using a common name.
  
      :param namespace: The namespace for the entry points.
      :type namespace: str
class HookManager(NamedExtensionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\named.py
-----------------------------
>     """Loads only the named extensions.
  
      This is useful for explicitly enabling extensions in a
      configuration file, for example.
class NamedExtensionManager(ExtensionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\sphinxext.py
-----------------------------
>     """Present a simple list of the plugins in a namespace."""
  
      option_spec = {
          'class': directives.class_option,
def _get_docstring(plugin):
def _simple_list(mgr):
def _detailed_list(mgr, over='', under='-', titlecase=False):
class ListPluginsDirective(rst.Directive):
def setup(app):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\_cache.py
-----------------------------
> """Use a cache layer in front of entry point scanning."""
  
  import errno
  import glob
def _get_cache_dir():
def _get_mtime(name):
def _ftobytes(f):
def _hash_settings_for_path(path):
def _build_cacheable_data():
class Cache:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\stevedore\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\echo.py
-----------------------------
>     """Use in a `with` block to draw some code on the app, then execute it.
  
      Parameters
      ----------
def echo(
def _get_initial_indent(lines: Iterable[str]) -> int:
def _get_indent(line: str) -> int | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\execution_control.py
-----------------------------
>     """Stops execution immediately.
  
      Streamlit will not run any statements after `st.stop()`.
      We recommend rendering a message to explain why the script has stopped.
def stop() -> NoReturn:  # type: ignore[misc]
def _new_fragment_id_queue(
def rerun(  # type: ignore[misc]
def switch_page(page: str | Path | StreamlitPage) -> NoReturn:  # type: ignore[misc]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\experimental_query_params.py
-----------------------------
>     """Return the query parameters that is currently showing in the browser's URL bar.
  
      Returns
      -------
def get_query_params() -> dict[str, list[str]]:
def set_query_params(**query_params: Any) -> None:
def _exclude_keys_in_dict(
def _extract_key_query_params(
def _ensure_no_embed_params(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\logo.py
-----------------------------
> """Handle App logos."""
  
  from __future__ import annotations
  
def _invalid_logo_text(field_name: str) -> str:
def logo(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\navigation.py
-----------------------------
>     """Convert various input types to StreamlitPage objects."""
      if isinstance(page_input, StreamlitPage):
          return page_input
  
def convert_to_streamlit_page(
def pages_from_nav_sections(
def send_page_not_found(ctx: ScriptRunContext) -> None:
def navigation(
def _navigation(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\page_config.py
-----------------------------
>     """Return the string to pass to the frontend to have it show
      the given PageIcon.
  
      If page_icon is a string that looks like an emoji (or an emoji shortcode),
def _lower_clean_dict_keys(dict: MenuItems) -> dict[str, Any]:
def _get_favicon_string(page_icon: PageIcon) -> str:
def set_page_config(
def get_random_emoji() -> str:
def set_menu_items_proto(
def validate_menu_items(menu_items: MenuItems) -> None:
def valid_menu_item_key(key: str) -> TypeGuard[MenuKey]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\commands\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\lib\local_component_registry.py
-----------------------------
>         """Register a CustomComponent.
  
          Parameters
          ----------
class LocalComponentRegistry(BaseComponentRegistry):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\lib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\types\base_component_registry.py
-----------------------------
>     """Interface for ComponentRegistries."""
  
      @abstractmethod
      def register_component(self, component: BaseCustomComponent) -> None:
class BaseComponentRegistry(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\types\base_custom_component.py
-----------------------------
>     """Class for exceptions generated during custom component marshalling."""
  
      pass
  
class MarshallComponentException(StreamlitAPIException):
class BaseCustomComponent(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\types\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\v1\components.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\v1\component_arrow.py
-----------------------------
> """Data marshalling utilities for ArrowTable protobufs, which are used by
  CustomComponent for dataframe serialization.
def _maybe_tuple_to_list(item: Any) -> Any:
def marshall(
def _marshall_index(proto: ArrowTableProto, index: Index) -> None:
def _marshall_columns(proto: ArrowTableProto, columns: Series) -> None:
def _marshall_data(proto: ArrowTableProto, df: DataFrame) -> None:
def arrow_proto_to_dataframe(proto: ArrowTableProto) -> DataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\v1\component_registry.py
-----------------------------
>     """Create a custom component and register it if there is a ``ScriptRunContext``.
  
      The component is not registered when there is no ``ScriptRunContext``.
      This can happen when a ``CustomComponent`` is executed as standalone
def _get_module_name(caller_frame: FrameType) -> str:
def declare_component(
class ComponentRegistry:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\v1\custom_component.py
-----------------------------
>     """Class for exceptions generated during custom component marshalling."""
  
      pass
  
class MarshallComponentException(StreamlitAPIException):
class CustomComponent(BaseCustomComponent):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\v1\__init__.py
-----------------------------
> """Contains the files and modules for the exposed API."""
  
  import streamlit
  from streamlit.components.v1.component_registry import declare_component

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\components\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\connections\base_connection.py
-----------------------------
>     """The abstract base class that all Streamlit Connections must inherit from.
  
      This base class provides connection authors with a standardized way to hook into the
      ``st.connection()`` factory function: connection authors are required to provide an
class BaseConnection(ABC, Generic[RawConnectionT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\connections\snowflake_connection.py
-----------------------------
>     """A connection to Snowflake using the Snowflake Connector for Python.
  
      Initialize this connection object using ``st.connection("snowflake")`` or
      ``st.connection("<name>", type="snowflake")``. Connection parameters for a
class SnowflakeConnection(BaseConnection["InternalSnowflakeConnection"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\connections\snowpark_connection.py
-----------------------------
>     """A connection to Snowpark using snowflake.snowpark.session.Session. Initialize using
      ``st.connection("<name>", type="snowpark")``.
  
      In addition to providing access to the Snowpark Session, SnowparkConnection supports
class SnowparkConnection(BaseConnection["Session"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\connections\sql_connection.py
-----------------------------
>     """A connection to a SQL database using a SQLAlchemy Engine.
  
      Initialize this connection object using ``st.connection("sql")`` or
      ``st.connection("<name>", type="sql")``. Connection parameters for a
class SQLConnection(BaseConnection["Engine"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\connections\util.py
-----------------------------
>     """Extract the specified keys from source_dict and return them in a new dict.
  
      Parameters
      ----------
def extract_from_dict(
def load_from_snowsql_config_file(connection_name: str) -> dict[str, Any]:
def running_in_sis() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\connections\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\built_in_chart_utils.py
-----------------------------
> """Utilities for our built-in charts commands."""
  
  from __future__ import annotations
  
class PrepDataColumns(TypedDict):
class AddRowsMetadata:
class ChartType(Enum):
def maybe_raise_stack_warning(
def generate_chart(
def _add_improved_hover_tooltips(
def prep_chart_data_for_add_rows(
def _infer_vegalite_type(
def _get_pandas_index_attr(
def _prep_data(
def _last_index_for_melted_dataframes(
def _is_date_column(df: pd.DataFrame, name: str | None) -> bool:
def _melt_data(
def _maybe_reset_index_in_place(
def _drop_unused_columns(df: pd.DataFrame, *column_names: str | None) -> pd.DataFrame:
def _maybe_convert_color_column_in_place(
def _convert_col_names_to_str_in_place(
def _parse_generic_column(
def _parse_x_column(df: pd.DataFrame, x_from_user: str | None) -> str | None:
def _parse_y_columns(
def _get_offset_encoding(
def _get_opacity_encoding(
def _get_axis_config(df: pd.DataFrame, column_name: str | None, grid: bool) -> alt.Axis:
def _maybe_melt(
def _get_axis_encodings(
def _get_x_encoding(
def _get_y_encoding(
def _update_encoding_with_stack(
def _get_color_encoding(
def _get_size_encoding(
def _get_tooltip_encoding(
def _get_x_encoding_type(
def _get_y_encoding_type(
class StreamlitColumnNotFoundError(StreamlitAPIException):
class StreamlitInvalidColorError(StreamlitAPIException):
class StreamlitColorLengthError(StreamlitAPIException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\color_util.py
-----------------------------
>     """Convert input into color tuple of type (int, int, int, int)."""
      color_tuple = _to_color_tuple(
          color,
          rgb_formatter=_int_formatter,
def to_int_color_tuple(color: MaybeColor) -> IntColorTuple:
def to_css_color(color: MaybeColor) -> Color:
def is_css_color_like(color: MaybeColor) -> bool:
def is_hex_color_like(color: MaybeColor) -> bool:
def _is_cssrgb_color_like(color: MaybeColor) -> bool:
def is_color_tuple_like(color: MaybeColor) -> bool:
def is_color_like(color: MaybeColor) -> bool:
def _to_color_tuple(
def _normalize_tuple(
def _int_formatter(component: float, color: MaybeColor) -> int:
def _float_formatter(component: float, color: MaybeColor) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\column_config_utils.py
-----------------------------
>     """Check if the column type is compatible with the underlying data kind.
  
      This check only applies to editable column types (e.g. number or text).
      Non-editable column types (e.g. bar_chart or image) can be configured for
class ColumnDataKind(str, Enum):
def is_type_compatible(column_type: ColumnType, data_kind: ColumnDataKind) -> bool:
def _determine_data_kind_via_arrow(field: pa.Field) -> ColumnDataKind:
def _determine_data_kind_via_pandas_dtype(
def _determine_data_kind_via_inferred_type(
def _determine_data_kind(
def determine_dataframe_schema(
def process_config_mapping(
def update_column_config(
def apply_data_specific_configs(
def _convert_column_config_to_json(column_config_mapping: ColumnConfigMapping) -> str:
def marshall_column_config(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\column_types.py
-----------------------------
>     """Configuration options for columns in ``st.dataframe`` and ``st.data_editor``.
  
      Parameters
      ----------
class NumberColumnConfig(TypedDict):
class TextColumnConfig(TypedDict):
class CheckboxColumnConfig(TypedDict):
class SelectboxOption(TypedDict):
class SelectboxColumnConfig(TypedDict):
class LinkColumnConfig(TypedDict):
class BarChartColumnConfig(TypedDict):
class LineChartColumnConfig(TypedDict):
class AreaChartColumnConfig(TypedDict):
class ImageColumnConfig(TypedDict):
class ListColumnConfig(TypedDict):
class DatetimeColumnConfig(TypedDict):
class TimeColumnConfig(TypedDict):
class DateColumnConfig(TypedDict):
class ProgressColumnConfig(TypedDict):
class JsonColumnConfig(TypedDict):
class ColumnConfig(TypedDict, total=False):
def Column(
def NumberColumn(
def TextColumn(
def LinkColumn(
def CheckboxColumn(
def SelectboxColumn(
def BarChartColumn(
def LineChartColumn(
def AreaChartColumn(
def ImageColumn(
def ListColumn(
def DatetimeColumn(
def TimeColumn(
def DateColumn(
def ProgressColumn(
def JsonColumn(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\dialog.py
-----------------------------
>     """Maps the user-provided literal to a value of the DialogWidth proto enum.
  
      Returns the mapped enum field for "small" by default and otherwise the mapped type.
def _process_dialog_width_input(
def _assert_first_dialog_to_be_opened(should_open: bool) -> None:
class Dialog(DeltaGenerator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\dicttools.py
-----------------------------
> """Tools for working with dicts."""
  
  from __future__ import annotations
  
def _unflatten_single_dict(flat_dict: dict[Any, Any]) -> dict[Any, Any]:
def unflatten(
def remove_none_values(input_dict: Mapping[Any, Any]) -> dict[Any, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\file_uploader_utils.py
-----------------------------
>     """Returns the main part of a filename and its extension."""
      # Handle NTFS Alternate Data Streams (ADS) on Windows, e.g: "file.txt:ads" -> 
("file.txt", ".txt")
      if os.name == "nt" and ":" in filename:
          main_filename, ads_part = filename.split(":", 1)
def _get_main_filename_and_extension(filename: str) -> tuple[str, str]:
def normalize_upload_file_type(file_type: str | Sequence[str]) -> Sequence[str]:
def enforce_filename_restriction(filename: str, allowed_types: Sequence[str]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\form_utils.py
-----------------------------
>     """Form data stored on a DeltaGenerator."""
  
      # The form's unique ID.
      form_id: str
class FormData(NamedTuple):
def _current_form(this_dg: DeltaGenerator) -> FormData | None:
def current_form_id(dg: DeltaGenerator) -> str:
def is_in_form(dg: DeltaGenerator) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\image_utils.py
-----------------------------
>     """
      Special values that are recognized by the frontend and allow us to change the
      behavior of the displayed image.
class WidthBehavior(IntEnum):
def _image_may_have_alpha_channel(image: PILImage) -> bool:
def _image_is_gif(image: PILImage) -> bool:
def _validate_image_format_string(
def _pil_to_bytes(
def _bytesio_to_bytes(data: io.BytesIO) -> bytes:
def _np_array_to_bytes(array: npt.NDArray[Any], output_format: str = "JPEG") -> bytes:
def _verify_np_shape(array: npt.NDArray[Any]) -> npt.NDArray[Any]:
def _get_image_format_mimetype(image_format: ImageFormat) -> str:
def _ensure_image_size_and_format(
def _clip_image(image: npt.NDArray[Any], clamp: bool) -> npt.NDArray[Any]:
def image_to_url(
def _4d_to_list_3d(array: npt.NDArray[Any]) -> list[npt.NDArray[Any]]:
def marshall_images(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\js_number.py
-----------------------------
>     """Utility class for exposing JavaScript Number constants."""
  
      # The largest int that can be represented with perfect precision
      # in JavaScript.
class JSNumberBoundsException(Exception):  # noqa: N818
class JSNumber:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\layout_utils.py
-----------------------------
>     """Validate the width parameter.
  
      Parameters
      ----------
class LayoutConfig:
def validate_width(width: Width, allow_content: bool = False) -> None:
def validate_height(
def get_width_config(width: Width) -> WidthConfig:
def get_height_config(height: Height) -> HeightConfig:
def get_gap_size(gap: str | None, element_type: str) -> GapSize.ValueType:
def validate_horizontal_alignment(horizontal_alignment: HorizontalAlignment) -> None:
def validate_vertical_alignment(vertical_alignment: VerticalAlignment) -> None:
def get_justify(
def get_align(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\mutable_status_container.py
-----------------------------
>         """Update the status container.
  
          Only specified arguments are updated. Container contents and unspecified
          arguments remain unchanged.
class StatusContainer(DeltaGenerator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\options_selector_utils.py
-----------------------------
>     """Return zero-based index of the first item whose value is equal to x.
      Raises a ValueError if there is no such item.
  
      We need a custom implementation instead of the built-in list .index() to
def index_(iterable: Iterable[_Value], x: _Value) -> int:
def check_and_convert_to_indices(
def convert_to_sequence_and_check_comparable(options: OptionSequence[T]) -> Sequence[T]:
def get_default_indices(
def _coerce_enum(from_enum_value: E1, to_enum_class: type[E2]) -> E1 | E2:
def _extract_common_class_from_iter(iterable: Iterable[Any]) -> Any:
def maybe_coerce_enum(
def maybe_coerce_enum(
def maybe_coerce_enum(
def maybe_coerce_enum_sequence(
def maybe_coerce_enum_sequence(
def maybe_coerce_enum_sequence(
def create_mappings(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\pandas_styler_utils.py
-----------------------------
>     """Marshall pandas.Styler into an Arrow proto.
  
      Parameters
      ----------
def marshall_styler(proto: ArrowProto, styler: Styler, default_uuid: str) -> None:
def _marshall_uuid(proto: ArrowProto, styler: Styler, default_uuid: str) -> None:
def _marshall_caption(proto: ArrowProto, styler: Styler) -> None:
def _marshall_styles(
def _trim_pandas_styles(styles: list[M]) -> list[M]:
def _pandas_style_to_css(
def _marshall_display_values(
def _use_display_values(df: DataFrame, styles: Mapping[str, Any]) -> DataFrame:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\policies.py
-----------------------------
>     """Ensures that widgets other than `st.form_submit_button` within a form don't have
      an on_change callback set.
  
      Raises
def check_callback_rules(dg: DeltaGenerator, on_change: WidgetCallback | None) -> None:
def check_session_state_rules(
class CachedWidgetWarning(StreamlitAPIWarning):
def check_cache_replay_rules() -> None:
def check_fragment_path_policy(dg: DeltaGenerator) -> None:
def check_widget_policies(
def maybe_raise_label_warnings(label: str | None, label_visibility: str | None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\streamlit_plotly_theme.py
-----------------------------
>     """Configure the Streamlit chart theme for Plotly.
  
      The theme is only configured if Plotly is installed.
def configure_streamlit_plotly_theme() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\subtitle_utils.py
-----------------------------
>     """
      Convert subtitles from SubRip (.srt) format to WebVTT (.vtt) format.
      This function accepts the content of the .srt file either as a string
      or as a BytesIO stream.
def _is_srt(stream: str | io.BytesIO | bytes) -> bool:
def _srt_to_vtt(srt_data: str | bytes) -> bytes:
def _handle_string_or_path_data(data_or_path: str | Path) -> bytes:
def _handle_stream_data(stream: io.BytesIO) -> bytes:
def _handle_bytes_data(data: bytes) -> bytes:
def process_subtitle_data(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\utils.py
-----------------------------
>     """Returns one of LabelVisibilityMessage enum constants.py based on string value."""
  
      if label_visibility_string == "visible":
          return LabelVisibilityMessage.LabelVisibilityOptions.VISIBLE
def get_label_visibility_proto_value(
def get_chat_input_accept_file_proto_value(
def to_key(key: None) -> None: ...
def to_key(key: Key) -> str: ...
def to_key(key: Key | None) -> str | None:
def _register_element_id(
def _compute_element_id(
def compute_and_register_element_id(
def save_for_app_testing(ctx: ScriptRunContext, k: str, v: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\lib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\audio_input.py
-----------------------------
>         r"""Display a widget that returns an audio recording from the user's microphone.
  
          Parameters
          ----------
class AudioInputSerde:
class AudioInputMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\button.py
-----------------------------
> FORM_DOCS_INFO: Final = """
  
  For more information, refer to the
  [documentation for 
forms](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form).
class ButtonSerde:
class ButtonMixin:
def marshall_file(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\button_group.py
-----------------------------
>     """Only meant to be used internally for the button_group element.
  
      This serde is inspired by the MultiSelectSerde from multiselect.py. That serde has
      been updated since then to support the accept_new_options parameter, which is not
class _MultiSelectSerde(Generic[T]):
class _SingleSelectSerde(Generic[T]):
class ButtonGroupSerde(Generic[T]):
def get_mapped_options(
def _build_proto(
def _maybe_raise_selection_mode_warning(selection_mode: SelectionMode) -> None:
class ButtonGroupMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\camera_input.py
-----------------------------
>         r"""Display a widget that returns pictures from the user's webcam.
  
          Parameters
          ----------
class CameraInputSerde:
class CameraInputMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\chat.py
-----------------------------
>     """Detects the avatar type and prepares the avatar data for the frontend.
  
      Parameters
      ----------
class ChatInputValue(MutableMapping[str, Any]):
class PresetNames(str, Enum):
def _process_avatar_input(
def _pop_upload_files(
class ChatInputSerde:
class ChatMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\checkbox.py
-----------------------------
>         r"""Display a checkbox widget.
  
          Parameters
          ----------
class CheckboxSerde:
class CheckboxMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\color_picker.py
-----------------------------
>         r"""Display a color picker widget.
  
          Parameters
          ----------
class ColorPickerSerde:
class ColorPickerMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\data_editor.py
-----------------------------
>     """
      A dictionary representing the current state of the data editor.
  
      Attributes
class EditingState(TypedDict, total=False):
class DataEditorSerde:
def _parse_value(
def _apply_cell_edits(
def _parse_added_row(
def _apply_row_additions(
def _apply_row_deletions(df: pd.DataFrame, deleted_rows: list[int]) -> None:
def _apply_dataframe_edits(
def _is_supported_index(df_index: pd.Index) -> bool:
def _fix_column_headers(data_df: pd.DataFrame) -> None:
def _check_column_names(data_df: pd.DataFrame) -> None:
def _check_type_compatibilities(
class DataEditorMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\file_uploader.py
-----------------------------
>         r"""Display a file uploader widget.
          By default, uploaded files are limited to 200 MB each. You can
          configure this using the ``server.maxUploadSize`` config option. For
          more information on how to set config options, see |config.toml|_.
def _get_upload_files(
class FileUploaderSerde:
class FileUploaderMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\multiselect.py
-----------------------------
>         """Initialize the MultiSelectSerde.
  
          We do not store an option_to_formatted_option mapping because the generic
          options might not be hashable, which would raise a RuntimeError. So we do
class MultiSelectSerde(Generic[T]):
def _get_default_count(default: Sequence[Any] | Any | None) -> int:
def _check_max_selections(
class MultiSelectMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\number_input.py
-----------------------------
>         r"""Display a numeric input widget.
  
          .. note::
              Integer values exceeding +/- ``(1<<53) - 1`` cannot be accurately
class NumberInputSerde:
class NumberInputMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\radio.py
-----------------------------
>         r"""Display a radio button widget.
  
          Parameters
          ----------
class RadioSerde(Generic[T]):
class RadioMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\selectbox.py
-----------------------------
>         """Initialize the SelectboxSerde.
  
          We do not store an option_to_formatted_option mapping because the generic
          options might not be hashable, which would raise a RuntimeError. So we do
class SelectboxSerde(Generic[T]):
class SelectboxMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\select_slider.py
-----------------------------
>         r"""
          Display a slider widget to select items from a list.
  
          This also allows you to render a range slider by passing a two-element
def _is_range_value(value: T | Sequence[T]) -> TypeGuard[Sequence[T]]:
class SelectSliderSerde(Generic[T]):
class SelectSliderMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\slider.py
-----------------------------
>     """Restore times/datetimes to original timezone (dates are always naive)."""
      utc_dt = UTC_EPOCH + timedelta(microseconds=micros)
      # Add the original timezone. No conversion is required here,
      # since in the serialization, we also just replace the timestamp with UTC.
def _time_to_datetime(time_: time) -> datetime:
def _date_to_datetime(date_: date) -> datetime:
def _delta_to_micros(delta: timedelta) -> int:
def _datetime_to_micros(dt: datetime) -> int:
def _micros_to_datetime(micros: int, orig_tz: tzinfo | None) -> datetime:
class SliderDefaultValues(TypedDict):
class SliderSerde:
class SliderMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\text_widgets.py
-----------------------------
>         r"""Display a single-line text input widget.
  
          Parameters
          ----------
class TextInputSerde:
class TextAreaSerde:
class TextWidgetsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\time_widgets.py
-----------------------------
>         r"""Display a time input widget.
  
          Parameters
          ----------
def _convert_timelike_to_time(value: TimeValue) -> time:
def _convert_datelike_to_date(
def _parse_date_value(value: DateValue) -> tuple[list[date] | None, bool]:
def _parse_min_date(
def _parse_max_date(
class _DateInputValues:
class TimeInputSerde:
class DateInputSerde:
class TimeWidgetsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\widgets\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\alert.py
-----------------------------
>         """Display error message.
  
          Parameters
          ----------
class AlertMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\arrow.py
-----------------------------
>     """
      The schema for the dataframe selection state.
  
      The selection state is stored in a dictionary-like object that supports both
class DataframeSelectionState(TypedDict, total=False):
class DataframeState(TypedDict, total=False):
class DataframeSelectionSerde:
def parse_selection_mode(
class ArrowMixin:
def _prep_data_for_add_rows(
def _arrow_add_rows(
def marshall(proto: ArrowProto, data: Data, default_uuid: str | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\balloons.py
-----------------------------
>         """Draw celebratory balloons.
  
          Example
          -------
class BalloonsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\bokeh_chart.py
-----------------------------
> """A Python wrapper around Bokeh."""
  
  from __future__ import annotations
  
class BokehMixin:
def marshall(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\code.py
-----------------------------
>         """Display a code block with optional syntax highlighting.
  
          Parameters
          ----------
class CodeMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\deck_gl_json_chart.py
-----------------------------
>     """Parse and check the user provided selection modes."""
      if isinstance(selection_mode, str):
          # Only a single selection mode was passed
          selection_mode_set = {selection_mode}
def parse_selection_mode(
class PydeckSelectionState(TypedDict, total=False):
class PydeckState(TypedDict, total=False):
class PydeckSelectionSerde:
class PydeckMixin:
def _get_pydeck_tooltip(pydeck_obj: Deck | None) -> dict[str, str] | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\dialog_decorator.py
-----------------------------
>     """Check the current stack for existing DeltaGenerator's of type 'dialog'.
      Note that the check like this only works when Dialog is called as a context manager,
      as this populates the dg_stack in delta_generator correctly.
  
def _assert_no_nested_dialogs() -> None:
def _dialog_decorator(
def dialog_decorator(
def dialog_decorator(
def dialog_decorator(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\doc_string.py
-----------------------------
> """Allows us to create and absorb changes (aka Deltas) to elements."""
  
  from __future__ import annotations
  
class HelpMixin:
def _marshall(doc_string_proto: DocStringProto, obj: Any) -> None:
def _get_name(obj: object) -> str | None:
def _get_module(obj: object) -> str | None:
def _get_signature(obj: object) -> str | None:
def _get_docstring(obj: object) -> str | None:
def _get_variable_name() -> str | None:
def _get_variable_name_from_code_str(code: str) -> str | None:
def _get_current_line_of_code_as_str() -> str | None:
def _get_scriptrunner_frame() -> inspect.FrameInfo | None:
def _is_stcommand(tree: Any, command_name: str) -> bool:
def _get_stcommand_arg(tree: ast.Module) -> ast.expr | None:
def _get_type_as_str(obj: object) -> str:
def _get_first_line(text: str) -> str:
def _get_weight(value: Any) -> int:
def _get_value(obj: object, var_name: str | None) -> str | None:
def _get_human_readable_value(value: Any) -> str | None:
def _shorten(s: str, length: int = 300) -> str:
def _is_computed_property(obj: object, attr_name: str) -> bool:
def _get_members(obj: object) -> list[MemberProto]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\empty.py
-----------------------------
>         """Insert a single-element container.
  
          Inserts a container into your app that can be used to hold a single element.
          This allows you to, for example, remove elements at any point, or replace
class EmptyMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\exception.py
-----------------------------
>         """Display an exception.
  
          When accessing the app through ``localhost``, in the lower-right corner
          of the exception, Streamlit displays links to Google and ChatGPT that
class ExceptionMixin:
def _exception(
def marshall(
def _format_syntax_error_message(exception: SyntaxError) -> str:
def _get_stack_trace_str_list(exception: BaseException) -> list[str]:
def _is_in_package(file: str, package_path: str) -> bool:
def _split_internal_streamlit_frames(
def _split_list(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\form.py
-----------------------------
>             f"""
              There are multiple identical forms with `key='{user_key}'`.
  
              To fix this, please make sure that the `key` argument is unique for
def _build_duplicate_form_message(user_key: str | None = None) -> str:
class FormMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\graphviz_chart.py
-----------------------------
> """Streamlit support for GraphViz charts."""
  
  from __future__ import annotations
  
class GraphvizMixin:
def marshall(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\heading.py
-----------------------------
>         """Display text in header formatting.
  
          Parameters
          ----------
class HeadingProtoTag(Enum):
class HeadingMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\html.py
-----------------------------
>         """Insert HTML into your app.
  
          Adding custom HTML to your app impacts safety, styling, and
          maintainability. We sanitize HTML with `DOMPurify
class HtmlMixin:
def _html_only_style_tags(html_content: str) -> bool:
def _is_file(obj: Any) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\iframe.py
-----------------------------
>         """Load a remote URL in an iframe.
  
          To use this function, import it from the ``streamlit.components.v1``
          module.
class IframeMixin:
def marshall(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\image.py
-----------------------------
> """Image marshalling."""
  
  from __future__ import annotations
  
class ImageMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\json.py
-----------------------------
>     """A repr function for json.dumps default arg, which tries to serialize sets
      as lists.
def _ensure_serialization(o: object) -> str | list[Any]:
class JsonMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\layouts.py
-----------------------------
>         """Insert a multi-element container.
  
          Inserts an invisible container into your app that can be used to hold
          multiple elements. This allows you to, for example, insert multiple
class LayoutsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\map.py
-----------------------------
> """A wrapper for simple PyDeck scatter charts."""
  
  from __future__ import annotations
  
class MapMixin:
def to_deckgl_json(
def _get_lat_or_lon_col_name(
def _get_value_and_col_name(
def _convert_color_arg_or_column(
def _get_viewport_details(
def _get_zoom_level(distance: float) -> int:
def marshall(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\markdown.py
-----------------------------
>         r"""Display string formatted as Markdown.
  
          Parameters
          ----------
class MarkdownMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\media.py
-----------------------------
>         """Display an audio player.
  
          Parameters
          ----------
class MediaMixin:
def _reshape_youtube_url(url: str) -> str | None:
def _marshall_av_media(
def marshall_video(
def _parse_start_time_end_time(
def _validate_and_normalize(data: npt.NDArray[Any]) -> tuple[bytes, int]:
def _make_wav(data: npt.NDArray[Any], sample_rate: int) -> bytes:
def _maybe_convert_to_wav_bytes(data: MediaData, sample_rate: int | None) -> MediaData:
def marshall_audio(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\metric.py
-----------------------------
>         r"""Display a metric in big bold font, with an optional indicator of how the metric 
changed.
  
          Tip: If you want to display a large number, it may be a good idea to
          shorten it using packages like `millify <https://github.com/azaitsev/millify>`_
class MetricColorAndDirection:
class MetricMixin:
def _parse_chart_type(
def _parse_label(label: str) -> str:
def _parse_value(value: Value) -> str:
def _parse_delta(delta: Delta) -> str:
def _determine_delta_color_and_direction(
def _is_negative_delta(delta: Delta) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\pdf.py
-----------------------------
>     """Get the PDF custom component if available.
  
      Returns
      -------
def _get_pdf_component() -> Any | None:
class PdfMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\plotly_chart.py
-----------------------------
> """Streamlit support for Plotly charts."""
  
  from __future__ import annotations
  
class PlotlySelectionState(TypedDict, total=False):
class PlotlyState(TypedDict, total=False):
class PlotlyChartSelectionSerde:
def parse_selection_mode(
class PlotlyMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\progress.py
-----------------------------
>     """
      Checks given value is 'between' the bounds of [low, high],
      considering close values around bounds are acceptable input.
  
def _check_float_between(value: float, low: float = 0.0, high: float = 1.0) -> bool:
def _get_value(value: FloatOrInt) -> int:
def _get_text(text: str | None) -> str | None:
class ProgressMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\pyplot.py
-----------------------------
> """Streamlit support for Matplotlib PyPlot charts."""
  
  from __future__ import annotations
  
class PyplotMixin:
def marshall(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\snow.py
-----------------------------
>         """Draw celebratory snowfall.
  
          Example
          -------
class SnowMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\spinner.py
-----------------------------
>     """Display a loading spinner while executing a block of code.
  
      Parameters
      ----------
def spinner(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\text.py
-----------------------------
>         r"""Write text without Markdown or HTML parsing.
  
          For monospace text, use |st.code|_.
  
class TextMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\toast.py
-----------------------------
>         """Display a short message, known as a notification "toast".
          The toast appears in the app's top-right corner and disappears after four seconds.
  
          .. warning::
def validate_text(toast_text: SupportsStr) -> SupportsStr:
class ToastMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\vega_charts.py
-----------------------------
> """Collection of chart commands that are rendered via our vega-lite chart component."""
  
  from __future__ import annotations
  
class VegaLiteState(TypedDict, total=False):
class VegaLiteStateSerde:
def _patch_null_legend_titles(spec: VegaLiteSpec) -> None:
def _prepare_vega_lite_spec(
def _marshall_chart_data(
def _convert_altair_to_vega_lite_spec(
def _disallow_multi_view_charts(spec: VegaLiteSpec) -> None:
def _extract_selection_parameters(spec: VegaLiteSpec) -> set[str]:
def _parse_selection_mode(
def _reset_counter_pattern(prefix: str, vega_spec: str) -> str:
def _stabilize_vega_json_spec(vega_spec: str) -> str:
class VegaChartsMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\write.py
-----------------------------
>         """Stream a generator, iterable, or stream-like sequence to the app.
  
          ``st.write_stream`` iterates through the given sequences and writes all
          chunks to the app. String chunks will be written using a typewriter effect.
class StreamingOutput(list[Any]):
class WriteMixin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\elements\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\external\langchain\streamlit_callback_handler.py
-----------------------------
> """
  LangChain CallbackHandler that prints to streamlit.
  
  This is a special API that's imported and used by LangChain itself. Any updates
def _convert_newlines(text: str) -> str:
class LLMThoughtState(Enum):
class ToolRecord(NamedTuple):
class LLMThoughtLabeler:
class LLMThought:
class StreamlitCallbackHandler(BaseCallbackHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\external\langchain\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\external\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\animation_demo.py
-----------------------------
>     """
      This app shows how you can use Streamlit to build cool animations.
      It displays an animated fractal based on the Julia Set. Use the slider
      to tune different parameters.
def animation_demo() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\dataframe_demo.py
-----------------------------
>     """
      This demo shows how to use `st.dataframe` to visualize a Pandas DataFrame.
      Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).
def data_frame_demo() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\hello.py
-----------------------------
>     """
      Streamlit is an open-source app framework built specifically for
      machine learning and data science projects.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\mapping_demo.py
-----------------------------
>             f"""
              **This demo requires internet access.**
              Connection error: {e.reason}
def mapping_demo() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\plotting_demo.py
-----------------------------
>     """
      This demo illustrates a combination of plotting and animation with
      Streamlit. We're generating a bunch of random numbers in a loop for around
      5 seconds. Enjoy!
def plotting_demo() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\streamlit_app.py
-----------------------------
def run() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\utils.py
-----------------------------
>     """Showing the code of the demo."""
      show_code = st.sidebar.checkbox("Show code", True)
      if show_code:
          # Showing the code of the demo.
def show_code(demo: Callable[..., Any]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\hello\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\navigation\page.py
-----------------------------
>     """Configure a page for ``st.navigation`` in a multipage app.
  
      Call ``st.Page`` to initialize a ``StreamlitPage`` object, and pass it to
      ``st.navigation`` to declare a page in your app.
def Page(  # noqa: N802
class StreamlitPage:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\navigation\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Alert_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\AppPage_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ArrowNamedDataSet_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ArrowVegaLiteChart_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Arrow_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\AudioInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Audio_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\AuthRedirect_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\AutoRerun_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\BackMsg_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Balloons_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Block_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\BokehChart_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ButtonGroup_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Button_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\CameraInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ChatInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Checkbox_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ClientState_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Code_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ColorPicker_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Common_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Components_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\DataFrame_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\DateInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\DeckGlJsonChart_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Delta_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\DocString_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\DownloadButton_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Element_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Empty_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Exception_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Favicon_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\FileUploader_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ForwardMsg_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\GapSize_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\GitInfo_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\GraphVizChart_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Heading_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\HeightConfig_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Html_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\IFrame_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Image_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Json_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\LabelVisibilityMessage_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\LinkButton_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Logo_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Markdown_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\MetricsEvent_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Metric_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\MultiSelect_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\NamedDataSet_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Navigation_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\NewSession_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\NumberInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\openmetrics_data_model_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PageConfig_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PageInfo_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PageLink_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PageNotFound_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PageProfile_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PagesChanged_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\ParentMessage_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\PlotlyChart_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Progress_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Radio_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\RootContainer_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Selectbox_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\SessionEvent_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\SessionStatus_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Skeleton_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Slider_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Snow_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Spinner_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\TextArea_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\TextInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Text_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\TimeInput_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Toast_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\VegaLiteChart_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\Video_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\WidgetStates_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\WidthConfig_pb2.py
-----------------------------
> """Generated protocol buffer code."""
  from google.protobuf import descriptor as _descriptor
  from google.protobuf import descriptor_pool as _descriptor_pool
  from google.protobuf import symbol_database as _symbol_database

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\proto\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\storage\cache_storage_protocol.py
-----------------------------
> """Declares the CacheStorageContext dataclass, which contains parameter information for
  each function decorated by `@st.cache_data` (for example: ttl, max_entries etc.).
  
  Declares the CacheStorageManager protocol, which implementations are used
class CacheStorageError(Exception):
class CacheStorageKeyNotFoundError(CacheStorageError):
class InvalidCacheStorageContextError(CacheStorageError):
class CacheStorageContext:
class CacheStorage(Protocol):
class CacheStorageManager(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\storage\dummy_cache_storage.py
-----------------------------
>         """Creates a new cache storage instance wrapped with in-memory cache layer."""
          persist_storage = DummyCacheStorage()
          return InMemoryCacheStorageWrapper(
              persist_storage=persist_storage, context=context
class MemoryCacheStorageManager(CacheStorageManager):
class DummyCacheStorage(CacheStorage):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\storage\in_memory_cache_storage_wrapper.py
-----------------------------
>     """
      In-memory cache storage wrapper.
  
      This class wraps a cache storage and adds an in-memory cache front layer,
class InMemoryCacheStorageWrapper(CacheStorage):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\storage\local_disk_cache_storage.py
-----------------------------
> """Declares the LocalDiskCacheStorageManager class, which is used
  to create LocalDiskCacheStorage instances wrapped by InMemoryCacheStorageWrapper,
  InMemoryCacheStorageWrapper wrapper allows to have first layer of in-memory cache,
  before accessing to LocalDiskCacheStorage itself.
class LocalDiskCacheStorageManager(CacheStorageManager):
class LocalDiskCacheStorage(CacheStorage):
def get_cache_folder_path() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\storage\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\cached_message_replay.py
-----------------------------
>     """An element's message and related metadata for
      replaying that element's function call.
  
      media_data is filled in iff this is a media element (image, audio, video).
class MediaMsgData:
class ElementMsgData:
class BlockMsgData:
class CachedResult(Generic[R]):
class CachedMessageReplayContext(threading.local):
def replay_cached_messages(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\cache_data_api.py
-----------------------------
> """@st.cache_data: pickle-based caching."""
  
  from __future__ import annotations
  
class CachedDataFuncInfo(CachedFuncInfo[P, R]):
class DataCaches(CacheStatsProvider):
def get_data_cache_stats_provider() -> CacheStatsProvider:
class CacheDataAPI:
class DataCache(Cache[R]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\cache_errors.py
-----------------------------
>     """Get markdown representation of the function name."""
      if hasattr(func, "__name__"):
          return f"`{func.__name__}()`"
      if hasattr(type(func), "__name__"):
def get_cached_func_name_md(func: Any) -> str:
def get_return_value_type(return_value: Any) -> str:
class UnhashableTypeError(Exception):
class UnhashableParamError(StreamlitAPIException):
class CacheKeyNotFoundError(Exception):
class CacheError(Exception):
class CacheReplayClosureError(StreamlitAPIException):
class UnserializableReturnValueError(MarkdownFormattedException, Generic[R]):
class UnevaluatedDataFrameError(StreamlitAPIException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\cache_resource_api.py
-----------------------------
> """@st.cache_resource implementation."""
  
  from __future__ import annotations
  
def _equal_validate_funcs(a: ValidateFunc | None, b: ValidateFunc | None) -> bool:
class ResourceCaches(CacheStatsProvider):
def get_resource_cache_stats_provider() -> CacheStatsProvider:
class CachedResourceFuncInfo(CachedFuncInfo[P, R]):
class CacheResourceAPI:
class ResourceCache(Cache[R]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\cache_type.py
-----------------------------
>     """The function cache types we implement."""
  
      DATA = "DATA"
      RESOURCE = "RESOURCE"
class CacheType(enum.Enum):
def get_decorator_api_name(cache_type: CacheType) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\cache_utils.py
-----------------------------
> """Common cache logic shared by st.cache_data and st.cache_resource."""
  
  from __future__ import annotations
  
class Cache(Generic[R]):
class CachedFuncInfo(Generic[P, R]):  # ty: ignore[invalid-argument-type]
def make_cached_func_wrapper(info: CachedFuncInfo[P, R]) -> CachedFunc[P, R]:
class BoundCachedFunc(Generic[P, R]):  # ty: ignore[invalid-argument-type]
class CachedFunc(Generic[P, R]):  # ty: ignore[invalid-argument-type]
def _make_value_key(
def _make_function_key(cache_type: CacheType, func: Callable[..., Any]) -> str:
def _get_positional_arg_name(func: Callable[..., Any], arg_index: int) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\hashing.py
-----------------------------
> """Hashing for st.cache_data and st.cache_resource."""
  
  from __future__ import annotations
  
class UserHashError(StreamlitAPIException):
def update_hash(
class _HashStack:
class _HashStacks:
def _int_to_bytes(i: int) -> bytes:
def _float_to_bytes(f: float) -> bytes:
def _key(obj: Any | None) -> Any:
class _CacheFuncHasher:
class NoResult:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\legacy_cache_api.py
-----------------------------
> """A library of caching utilities."""
  
  from __future__ import annotations
  
def cache(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\caching\__init__.py
-----------------------------
>     """Save the message for an element to a thread-local callstack, so it can
      be used later to replay the element when a cache-decorated function's
      execution is skipped.
def save_element_message(
def save_block_message(
def save_media_data(media_data: bytes | str, mimetype: str, media_id: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\exec_code.py
-----------------------------
>     """A context for prepending a directory to sys.path for a second.
  
      Code inspired by IPython:
      Source: 
https://github.com/ipython/ipython/blob/master/IPython/utils/syspathcontext.py#L42
class modified_sys_path:  # noqa: N801
def exec_func_with_error_handling(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\magic.py
-----------------------------
>     """Modifies the code to support magic Streamlit commands.
  
      Parameters
      ----------
def add_magic(code: str, script_path: str) -> Any:
def _modify_ast_subtree(
def _insert_import_statement(tree: Any) -> None:
def _build_st_import_statement() -> ast.Import:
def _build_st_write_call(nodes: list[Any]) -> ast.Call:
def _get_st_write_from_expr(
def _is_string_constant_node(node: Any) -> bool:
def _is_docstring_node(node: Any, node_index: int, parent_type: Any) -> bool:
def _does_file_end_in_semicolon(tree: Any, code: str) -> bool:
def _is_displayable_last_expr(
def _should_display_docstring_like_node_anyway(is_root: bool) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\magic_funcs.py
-----------------------------
>     """The function that gets magic-ified into Streamlit apps.
      This is just st.write, but returns the arguments you passed to it.
def transparent_write(*args: Any) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\script_cache.py
-----------------------------
>     """Thread-safe cache of Python script bytecode."""
  
      def __init__(self) -> None:
          # Mapping of script_path: bytecode
class ScriptCache:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\script_runner.py
-----------------------------
> """
  Note [Threading]
  There are two kinds of threads in Streamlit, the main thread and script threads.
  The main thread is started by invoking the Streamlit CLI, and bootstraps the
class ScriptRunnerEvent(Enum):
def _mpa_v1(main_script_path: str) -> None:
class ScriptRunner:
def _clean_problem_modules() -> None:
def _log_if_error(fn: Callable[[], None]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner_utils\exceptions.py
-----------------------------
>     """Base exception for ScriptRunner."""
  
      pass
  
class ScriptControlException(BaseException):  # NOSONAR
class StopException(ScriptControlException):
class RerunException(ScriptControlException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner_utils\script_requests.py
-----------------------------
>     """Data attached to RERUN requests. Immutable."""
  
      query_string: str = ""
      widget_states: WidgetStates | None = None
class ScriptRequestType(Enum):
class RerunData:
class ScriptRequest:
def _fragment_run_should_not_preempt_script(
def _coalesce_widget_states(
class ScriptRequests:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner_utils\script_run_context.py
-----------------------------
>     """A context object that contains data for a "script run" - that is,
      data that's scoped to a single ScriptRunner execution (and therefore also
      scoped to a single connected "session").
  
class ScriptRunContext:
def add_script_run_ctx(
def get_script_run_ctx(suppress_warning: bool = False) -> ScriptRunContext | None:
def enqueue_message(msg: ForwardMsg) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\scriptrunner_utils\__init__.py
-----------------------------
> """The modules in this package are separated from
  the scriptrunner-package, because they are more or less
  standalone and other modules import them quite frequently.
  This separation helps us to remove dependency cycles.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\common.py
-----------------------------
> """Functions and data structures shared by session_state.py and widgets.py."""
  
  from __future__ import annotations
  
def is_array_value_field_name(obj: object) -> TypeGuard[ArrayValueFieldName]:
class WidgetMetadata(Generic[T]):
class RegisterWidgetResult(Generic[T_co]):
def user_key_from_element_id(element_id: str) -> str | None:
def is_element_id(key: str) -> bool:
def is_keyed_element_id(key: str) -> bool:
def require_valid_user_key(key: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\query_params.py
-----------------------------
>     """A lightweight wrapper of a dict that sends forwardMsgs when state changes.
      It stores str keys with str and List[str] values.
class QueryParams(MutableMapping[str, str]):
def missing_key_error_message(key: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\query_params_proxy.py
-----------------------------
>     """
      A stateless singleton that proxies ``st.query_params`` interactions
      to the current script thread's QueryParams instance.
class QueryParamsProxy(MutableMapping[str, str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\safe_session_state.py
-----------------------------
>     """Thread-safe wrapper around SessionState.
  
      When AppSession gets a re-run request, it can interrupt its existing
      ScriptRunner and spin up a new ScriptRunner to handle the request.
class SafeSessionState:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\session_state.py
-----------------------------
>     """A widget value that's serialized to a protobuf. Immutable."""
  
      value: WidgetStateProto
  
class Serialized:
class Value:
class WStates(MutableMapping[str, Any]):
def _missing_key_error_message(key: str) -> str:
class KeyIdMapper:
class SessionState:
def _is_internal_key(key: str) -> bool:
def _is_stale_widget(
class SessionStateStatProvider(CacheStatsProvider):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\session_state_proxy.py
-----------------------------
>     """Get the SessionState object for the current session.
  
      Note that in streamlit scripts, this function should not be called
      directly. Instead, SessionState objects should be accessed via
def get_session_state() -> SafeSessionState:
class SessionStateProxy(MutableMapping[Key, Any]):
def _missing_attr_error_message(attr_name: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\widgets.py
-----------------------------
>     """Register a widget with Streamlit, and return its current value.
      NOTE: This function should be called after the proto has been filled.
  
      Parameters
def register_widget(
def register_widget_from_metadata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\state\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\app_session.py
-----------------------------
>     """Randomly generate a unique ID for a script execution."""
      return str(uuid.uuid4())
  
  
class AppSessionState(Enum):
def _generate_scriptrun_id() -> str:
class AppSession:
def _get_toolbar_mode() -> Config.ToolbarMode.ValueType:
def _populate_config_msg(msg: Config) -> None:
def _populate_theme_msg(msg: CustomThemeConfig, section: str = "theme") -> None:
def _populate_user_info_msg(msg: UserInfo) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\connection_factory.py
-----------------------------
>     """Create an instance of connection_class with the given name and kwargs.
  
      The weird implementation of this function with the @cache_resource annotated
      function defined internally is done to:
def _create_connection(
def _get_first_party_connection(connection_class: str) -> type[BaseConnection[Any]]:
def connection_factory(
def connection_factory(
def connection_factory(
def connection_factory(
def connection_factory(
def connection_factory(
def connection_factory(
def connection_factory(
def connection_factory(  # type: ignore

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\context.py
-----------------------------
>     """Map a header name to Http-Header-Case.
  
      >>> _normalize_header("coNtent-TYPE")
      'Content-Type'
def _get_request() -> HTTPServerRequest | None:
def _normalize_header(name: str) -> str:
class StreamlitTheme(AttributeDictionary):
class StreamlitHeaders(Mapping[str, str]):
class StreamlitCookies(Mapping[str, str]):
class ContextProxy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\context_util.py
-----------------------------
>     """Trim the page path from the URL if it exists."""
      url = url.removesuffix("/")
  
      for page in page_manager.get_pages().values():
def maybe_trim_page_path(url: str, page_manager: PagesManager) -> str:
def maybe_add_page_path(url: str, page_manager: PagesManager) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\credentials.py
-----------------------------
> """Manage the user's Streamlit credentials."""
  
  from __future__ import annotations
  
class _Activation(NamedTuple):
def email_prompt() -> str:
def _send_email(email: str | None) -> None:
class Credentials:
def _verify_email(email: str) -> _Activation:
def _exit(message: str) -> NoReturn:
def _get_credential_file_path() -> str:
def _check_credential_file_exists() -> bool:
def check_credentials() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\forward_msg_cache.py
-----------------------------
>     """Computes and assigns the unique hash for a ForwardMsg.
  
      If the ForwardMsg already has a hash, this is a no-op.
  
def populate_hash_if_needed(msg: ForwardMsg) -> None:
def create_reference_msg(msg: ForwardMsg) -> ForwardMsg:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\forward_msg_queue.py
-----------------------------
>     """Accumulates a session's outgoing ForwardMsgs.
  
      Each AppSession adds messages to its queue, and the Server periodically
      flushes all session queues and delivers their messages to the appropriate
class ForwardMsgQueue:
def _is_composable_message(msg: ForwardMsg) -> bool:
def _maybe_compose_delta_msgs(
def _update_script_finished_message(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\fragment.py
-----------------------------
>     """A key-value store for Fragments. Used to implement the @st.fragment decorator.
  
      We intentionally define this as its own protocol despite how generic it appears to
      be at first glance. The reason why is that, in any case where fragments aren't just
class FragmentStorage(Protocol):
class MemoryFragmentStorage(FragmentStorage):
def _fragment(
def fragment(
def fragment(
def fragment(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\media_file_manager.py
-----------------------------
> """Provides global MediaFileManager object as `media_file_manager`."""
  
  from __future__ import annotations
  
def _get_session_id() -> str:
class MediaFileMetadata:
class MediaFileManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\media_file_storage.py
-----------------------------
>     """Exception class for errors raised by MediaFileStorage.
  
      When running in "development mode", the full text of these errors
      is displayed in the frontend, so errors should be human-readable
class MediaFileKind(Enum):
class MediaFileStorageError(Exception):
class MediaFileStorage(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\memory_media_file_storage.py
-----------------------------
> """MediaFileStorage implementation that stores files in memory."""
  
  from __future__ import annotations
  
def _calculate_file_id(data: bytes, mimetype: str, filename: str | None = None) -> str:
def get_extension_for_mimetype(mimetype: str) -> str:
class MemoryFile(NamedTuple):
class MemoryMediaFileStorage(MediaFileStorage, CacheStatsProvider):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\memory_session_storage.py
-----------------------------
>     """A SessionStorage that stores sessions in memory.
  
      At most maxsize sessions are stored with a TTL of ttl seconds. This class is really
      just a thin wrapper around cachetools.TTLCache that complies with the SessionStorage
class MemorySessionStorage(SessionStorage):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\memory_uploaded_file_manager.py
-----------------------------
>     """Holds files uploaded by users of the running Streamlit app.
      This class can be used safely from multiple threads simultaneously.
class MemoryUploadedFileManager(UploadedFileManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\metrics_util.py
-----------------------------
>     """Get the machine ID.
  
      This is a unique identifier for a user for tracking metrics,
      that is broken in different ways in some Linux distros and Docker images.
def _get_machine_id_v3() -> str:
def _get_machine_id_v4() -> str:
class Installation:
def _get_type_name(obj: object) -> str:
def _get_top_level_module(func: Callable[..., Any]) -> str:
def _get_arg_metadata(arg: object) -> str | None:
def _get_command_telemetry(
def to_microseconds(seconds: float) -> int:
def gather_metrics(
def gather_metrics(
def gather_metrics(name: str, func: F | None = None) -> Callable[[F], F] | F:
def create_page_profile_message(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\pages_manager.py
-----------------------------
>     """
      PagesManager is responsible for managing the set of pages that make up
      the entire application. At the start we assume the main script is the
      only page. As the script runs, the main script can call `st.navigation`
class PagesManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\runtime.py
-----------------------------
>     """Raised by operations on a Runtime instance that is stopped."""
  
  
  @dataclass(frozen=True)
class RuntimeStoppedError(Exception):
class RuntimeConfig:
class RuntimeState(Enum):
class AsyncObjects(NamedTuple):
class Runtime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\runtime_util.py
-----------------------------
> """Runtime-related utility functions."""
  
  from __future__ import annotations
  
class MessageSizeError(MarkdownFormattedException):
class BadDurationStringError(StreamlitAPIException):
def serialize_forward_msg(msg: ForwardMsg) -> bytes:
def get_max_message_size_bytes() -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\script_data.py
-----------------------------
>     """Contains parameters related to running a script."""
  
      main_script_path: str
      is_hello: bool = False
class ScriptData:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\secrets.py
-----------------------------
>     """SecretErrorMessages stores all error messages we use for secrets to allow 
customization
      for different environments.
  
      For example Streamlit Cloud can customize the message to be different than the open 
source.
class SecretErrorMessages:
def _convert_to_dict(obj: Mapping[str, Any] | AttrDict) -> dict[str, Any]:
def _missing_attr_error_message(attr_name: str) -> str:
def _missing_key_error_message(key: str) -> str:
class AttrDict(Mapping[str, Any]):
class Secrets(Mapping[str, Any]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\session_manager.py
-----------------------------
>     """Raised by operations on a disconnected SessionClient."""
  
  
  class SessionClient(Protocol):
class SessionClientDisconnectedError(Exception):
class SessionClient(Protocol):
class ActiveSessionInfo:
class SessionInfo:
class SessionStorageError(Exception):
class SessionStorage(Protocol):
class SessionManager(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\stats.py
-----------------------------
>     """Describes a single cache entry.
  
      Properties
      ----------
class CacheStat(NamedTuple):
def group_stats(stats: list[CacheStat]) -> list[CacheStat]:
class CacheStatsProvider(Protocol):
class StatsManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\uploaded_file_manager.py
-----------------------------
>     """Metadata and raw bytes for an uploaded file. Immutable."""
  
      file_id: str
      name: str
class UploadedFileRec(NamedTuple):
class UploadFileUrlInfo(NamedTuple):
class DeletedFile(NamedTuple):
class UploadedFile(io.BytesIO):
class UploadedFileManager(CacheStatsProvider, Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\websocket_session_manager.py
-----------------------------
>     """A SessionManager used to manage sessions with lifecycles tied to those of a
      browser tab's websocket connection.
  
      WebsocketSessionManagers differentiate between "active" and "inactive" sessions.
class WebsocketSessionManager(SessionManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\runtime\__init__.py
-----------------------------
>     """Return the singleton Runtime instance. Raise an Error if the
      Runtime hasn't been created yet.
def get_instance() -> Runtime:
def exists() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\testing\v1\app_test.py
-----------------------------
>     """
      A simulated Streamlit app to check the correctness of displayed\
      elements and outputs.
  
class AppTest:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\testing\v1\element_tree.py
-----------------------------
>     """Used to represent the initial value of a widget."""
  
      pass
  
class InitialValue:
class Element(ABC):
class UnknownElement(Element):
class Widget(Element, ABC):
class ElementList(Generic[El_co]):
class WidgetList(ElementList[W_co], Generic[W_co]):
class AlertBase(Element):
class Error(AlertBase):
class Warning(AlertBase):  # noqa: A001
class Info(AlertBase):
class Success(AlertBase):
class Button(Widget):
class ChatInput(Widget):
class Checkbox(Widget):
class Code(Element):
class ColorPicker(Widget):
class Dataframe(Element):
class DateInput(Widget):
class Exception(Element):  # noqa: A001
class HeadingBase(Element, ABC):
class Header(HeadingBase):
class Subheader(HeadingBase):
class Title(HeadingBase):
class Json(Element):
class Markdown(Element):
class Caption(Markdown):
class Divider(Markdown):
class Latex(Markdown):
class Metric(Element):
class ButtonGroup(Widget, Generic[T]):
class Multiselect(Widget, Generic[T]):
class NumberInput(Widget):
class Radio(Widget, Generic[T]):
class Selectbox(Widget, Generic[T]):
class SelectSlider(Widget, Generic[T]):
class Slider(Widget, Generic[SliderValueT]):
class Table(Element):
class Text(Element):
class TextArea(Widget):
class TextInput(Widget):
class TimeInput(Widget):
class Toast(Element):
class Toggle(Widget):
class Block:
def repr_(self: object) -> str:
def format_dict(d: dict[Any, Any]) -> str:
class SpecialBlock(Block):
class ChatMessage(Block):
class Column(Block):
class Expander(Block):
class Status(Block):
class Tab(Block):
def get_widget_state(node: Node) -> WidgetState | None:
class ElementTree(Block):
def parse_tree_from_messages(messages: list[ForwardMsg]) -> ElementTree:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\testing\v1\local_script_runner.py
-----------------------------
>     """Subclasses ScriptRunner to provide some testing features."""
  
      def __init__(
          self,
class LocalScriptRunner(ScriptRunner):
def require_widgets_deltas(runner: LocalScriptRunner, timeout: float = 3) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\testing\v1\util.py
-----------------------------
>     """A context manager that overrides config options. It can
      also be used as a function decorator.
  
      Examples
def patch_config_options(
def build_mock_config_get_option(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\testing\v1\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\testing\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\vendor\pympler\asizeof.py
-----------------------------
> """
  This is a stripped-down of asizeof.py from the pympler module. It's vendored
  because pympler is unmaintained, while having a critical vulnerability.
  
def _calcsize(fmt):
def _items(obj):  # dict only
def _keys(obj):  # dict only
def _values(obj):  # dict only
def _basicsize(t, base=0, heap=False, obj=None):
def _classof(obj, dflt=None):
def _derive_typedef(typ):
def _dir2(obj, pref=_NN, excl=(), slots=None, itor=_NN):
def _infer_dict(obj):
def _isbuiltin2(typ):
def _iscell(obj):
def _isdictype(obj):
def _isframe(obj):
def _isignored(typ):
def _isnamedtuple(obj):
def _isNULL(obj):
def _issubclass(obj, Super):
def _itemsize(t, item=0):
def _kwdstr(**kwds):
def _lengstr(obj):
def _moduleof(obj, dflt=_NN):
def _nameof(obj, dflt=_NN):
def _objs_opts_x(where, objs, all=None, **opts):
def _OptionError(where, Error=ValueError, **options):
def _p100(part, total, prec=1):
def _plural(num):
def _power_of_2(n):
def _prepr(obj, clip=0):
def _printf(fmt, *args, **print3options):
def _refs(obj, named, *attrs, **kwds):
def _repr(obj, clip=80):
def _SI(size, K=1024, i="i"):
def _SI2(size, **kwds):
def _cell_refs(obj, named):
def _class_refs(obj, named):
def _co_refs(obj, named):
def _dict_refs(obj, named):
def _enum_refs(obj, named):
def _exc_refs(obj, named):
def _file_refs(obj, named):
def _frame_refs(obj, named):
def _func_refs(obj, named):
def _gen_refs(obj, named):
def _im_refs(obj, named):
def _inst_refs(obj, named):
def _iter_refs(obj, named):
def _module_refs(obj, named):
def _namedtuple_refs(obj, named):
def _prop_refs(obj, named):
def _seq_refs(obj, unused):  # named unused for PyChecker
def _stat_refs(obj, named):
def _statvfs_refs(obj, named):
def _tb_refs(obj, named):
def _type_refs(obj, named):
def _weak_refs(obj, unused):  # unused for named
def _len(obj):
def _len_bytearray(obj):
def _len_code(obj):  # see .../Lib/test/test_sys.py
def _len_dict(obj):
def _len_frame(obj):
def _len_int(obj):
def _len_iter(obj):
def _len_list(obj):
def _len_module(obj):
def _len_set(obj):
def _len_slice(obj):
def _len_struct(obj):
def _len_unicode(obj):
class _Claskey(object):
def _claskey(obj):
def _key2tuple(obj):  # PYCHOK expected
def _objkey(obj):  # PYCHOK expected
class _NamedRef(object):
class _Typedef(object):
def _typedef_both(
def _typedef_code(t, base=0, refs=None, kind=_kind_static, heap=False):
def _len_array(obj):
def _array_kwds(obj):
def _typedef(obj, derive=False, frames=False, infer=False):  # MCCABE 25
class _Prof(object):
class _Rank(object):
class _Seen(dict):
class Asized(object):
class Asizer(object):
def amapped(percentage=None):
def asized(*objs, **opts):
def asizeof(*objs: Any, **opts: Any) -> int:
def asizesof(*objs, **opts):
def _typedefof(obj, save=False, **opts):
def basicsize(obj, **opts):
def flatsize(obj, align=0, **opts):
def itemsize(obj, **opts):
def leng(obj, **opts):
def named_refs(obj, **opts):
def refs(obj, **opts):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\vendor\pympler\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\vendor\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\event_based_path_watcher.py
-----------------------------
> """Declares the EventBasedPathWatcher class, which watches given paths in the file system.
  
  How these classes work together
  -------------------------------
def _get_abs_folder_path(path: str) -> str:
class EventBasedPathWatcher:
class _MultiPathWatcher:
class WatchedPath:
class _FolderEventHandler(events.FileSystemEventHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\folder_black_list.py
-----------------------------
>     """Implement a black list object with globbing.
  
      Note
      ----
class FolderBlackList:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\local_sources_watcher.py
-----------------------------
class WatchedModule(NamedTuple):
class LocalSourcesWatcher:
def get_module_paths(module: ModuleType) -> set[str]:
def _is_valid_path(path: str | None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\path_watcher.py
-----------------------------
>     """Check if the watchdog module is installed."""
      try:
          import watchdog  # noqa: F401
  
class NoOpPathWatcher:
def _is_watchdog_available() -> bool:
def report_watchdog_availability() -> None:
def _watch_path(
def watch_file(
def watch_dir(
def get_default_path_watcher_class() -> PathWatcherType:
def get_path_watcher_class(watcher_type: str) -> PathWatcherType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\polling_path_watcher.py
-----------------------------
> """A class that watches a given path via polling."""
  
  from __future__ import annotations
  
class PollingPathWatcher:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\util.py
-----------------------------
> """A bunch of useful utilities for the watcher.
  
  These are functions that only make sense within the watcher. In particular,
  functions that use streamlit.config can go here to avoid a dependency cycle.
def calc_md5_with_blocking_retries(
def path_modification_time(path: str, allow_nonexistent: bool = False) -> float:
def _get_file_content(file_path: str) -> bytes:
def _dirfiles(dir_path: str, glob_pattern: str) -> str:
def _stable_dir_identifier(dir_path: str, glob_pattern: str) -> str:
def _do_with_retries(
def _retry_dance() -> Generator[int, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\watcher\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\app_static_file_handler.py
-----------------------------
class AppStaticFileHandler(tornado.web.StaticFileHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\authlib_tornado_integration.py
-----------------------------
>         """We do not support access token refresh, since we obtain and operate only on
          identity tokens. We override this method explicitly to implement all abstract
          methods of base class.
class TornadoIntegration(FrameworkIntegration):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\browser_websocket_handler.py
-----------------------------
>     """Handles a WebSocket connection from the browser."""
  
      def initialize(self, runtime: Runtime) -> None:
          self._runtime = runtime
class BrowserWebSocketHandler(WebSocketHandler, SessionClient):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\component_request_handler.py
-----------------------------
>         """Disable cache for HTML files.
  
          Other assets like JS and CSS are suffixed with their hash, so they can
          be cached indefinitely.
class ComponentRequestHandler(tornado.web.RequestHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\media_file_handler.py
-----------------------------
>         """Set the MemoryMediaFileStorage object used by instances of this
          handler. Must be called on server startup.
class MediaFileHandler(tornado.web.StaticFileHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\oauth_authlib_routes.py
-----------------------------
>     """Create an OAuth client for the given provider based on secrets.toml configuration."""
      auth_section = get_secrets_auth_section()
      if auth_section:
          redirect_uri = auth_section.get("redirect_uri", None)
def create_oauth_client(provider: str) -> tuple[TornadoOAuth2App, str]:
class AuthHandlerMixin(tornado.web.RequestHandler):
class AuthLoginHandler(AuthHandlerMixin, tornado.web.RequestHandler):
class AuthLogoutHandler(AuthHandlerMixin, tornado.web.RequestHandler):
class AuthCallbackHandler(AuthHandlerMixin, tornado.web.RequestHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\oidc_mixin.py
-----------------------------
>         """We enforce S256 code challenge method if it is supported by the server."""
          result = cast("dict[str, Any]", super().load_server_metadata())
          if "S256" in result.get("code_challenge_methods_supported", []):
              self.client_kwargs["code_challenge_method"] = "S256"
class TornadoOAuth2App(OAuth2Mixin, OpenIDMixin, BaseApp):
class TornadoOAuth(BaseOAuth):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\routes.py
-----------------------------
>     """True if cross-origin requests from any origin are allowed.
  
      We only allow ALL cross-origin requests when CORS protection has been
      disabled with server.enableCORS=False or if using the Node server in dev
def allow_all_cross_origin_requests() -> bool:
def is_allowed_origin(origin: Any) -> bool:
class StaticFileHandler(tornado.web.StaticFileHandler):
class AddSlashHandler(tornado.web.RequestHandler):
class RemoveSlashHandler(tornado.web.RequestHandler):
class _SpecialRequestHandler(tornado.web.RequestHandler):
class HealthHandler(_SpecialRequestHandler):
class HostConfigHandler(_SpecialRequestHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\server.py
-----------------------------
>     """Get the websocket ping interval and timeout from config or defaults.
  
      Returns
      -------
def _get_websocket_ping_interval_and_timeout() -> tuple[int, int]:
def get_tornado_settings() -> dict[str, Any]:
class RetriesExceededError(Exception):
def server_port_is_manually_set() -> bool:
def server_address_is_unix_socket() -> bool:
def start_listening(app: tornado.web.Application) -> None:
def _get_ssl_options(cert_file: str | None, key_file: str | None) -> SSLContext | None:
def start_listening_unix_socket(http_server: HTTPServer) -> None:
def start_listening_tcp_socket(http_server: HTTPServer) -> None:
class Server:
def _set_tornado_log_levels() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\server_util.py
-----------------------------
> """Server related utility functions."""
  
  from __future__ import annotations
  
def allowlisted_origins() -> set[str]:
def is_tornado_version_less_than(v: str) -> bool:
def is_url_from_allowed_origins(url: str) -> bool:
def get_cookie_secret() -> str:
def is_xsrf_enabled() -> bool:
def _get_server_address_if_manually_set() -> str | None:
def make_url_path_regex(
def get_url(host_ip: str) -> str:
def _get_browser_address_bar_port() -> int:
def emit_endpoint_deprecation_notice(handler: RequestHandler, new_path: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\stats_request_handler.py
-----------------------------
>         """/OPTIONS handler for preflight CORS checks."""
          self.set_status(204)
          self.finish()
  
class StatsRequestHandler(tornado.web.RequestHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\upload_file_request_handler.py
-----------------------------
>     """Implements the POST /upload_file endpoint."""
  
      def initialize(
          self,
class UploadFileRequestHandler(tornado.web.RequestHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\websocket_headers.py
-----------------------------
>     """Return a copy of the HTTP request headers for the current session's
      WebSocket connection. If there's no active session, return None instead.
  
      Raise an error if the server is not running.
def _get_websocket_headers() -> dict[str, str] | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\server\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\bootstrap.py
-----------------------------
>     """Add the script's folder to the sys path.
  
      Python normally does this automatically, but since we exec the script
      ourselves we need to do it instead.
def _set_up_signal_handler(server: Server) -> None:
def _fix_sys_path(main_script_path: str) -> None:
def _fix_tornado_crash() -> None:
def _fix_sys_argv(main_script_path: str, args: list[str]) -> None:
def _on_server_start(server: Server) -> None:
def _fix_pydeck_mapbox_api_warning() -> None:
def _maybe_print_static_folder_warning(main_script_path: str) -> None:
def _print_url(is_running_hello: bool) -> None:
def _maybe_print_old_git_warning(main_script_path: str) -> None:
def load_config_options(flag_options: dict[str, Any]) -> None:
def _install_config_watchers(flag_options: dict[str, Any]) -> None:
def run(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\cache_storage_manager_config.py
-----------------------------
>     """
      Get the cache storage manager.
      It would be used both in server.py and in cli.py to have unified cache storage.
  
def create_default_cache_storage_manager() -> CacheStorageManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\cli.py
-----------------------------
> """A script which is run when the Streamlit package is executed."""
  
  from __future__ import annotations
  
def _convert_config_option_to_click_option(
def _make_sensitive_option_callback(
def configurator_options(func: F) -> F:
def _download_remote(main_script_path: str, url_path: str) -> None:
def main(log_level: str = "info") -> None:
def help() -> None:  # noqa: A001
def main_version() -> None:
def main_docs() -> None:
def main_hello(**kwargs: Any) -> None:
def main_run(target: str, args: list[str] | None = None, **kwargs: Any) -> None:
def _get_command_line_as_string() -> str | None:
def _main_run(
def cache() -> None:
def cache_clear() -> None:
def config() -> None:
def config_show(**kwargs: Any) -> None:
def activate(ctx: click.Context) -> None:
def activate_reset() -> None:
def test() -> None:
def test_prog_name() -> None:
def main_init(directory: str | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\web\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\auth_util.py
-----------------------------
>     """Simple cache implementation for storing info required for Authlib."""
  
      def __init__(self) -> None:
          self.cache: dict[str, Any] = {}
class AuthCache:
def is_authlib_installed() -> bool:
def get_signing_secret() -> str:
def get_secrets_auth_section() -> AttrDict:
def encode_provider_token(provider: str) -> str:
def decode_provider_token(provider_token: str) -> ProviderTokenPayload:
def generate_default_provider_section(auth_section: AttrDict) -> dict[str, Any]:
def validate_auth_credentials(provider: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\cli_util.py
-----------------------------
> """Utilities related to the CLI."""
  
  from __future__ import annotations
  
def print_to_cli(message: str, **kwargs: Any) -> None:
def style_for_cli(message: str, **kwargs: Any) -> str:
def _open_browser_with_webbrowser(url: str) -> None:
def _open_browser_with_command(command: str, url: str) -> None:
def open_browser(url: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\column_config.py
-----------------------------
> """Column types that can be configured via the ``column_config`` parameter of
  ``st.dataframe`` and ``st.data_editor``.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\config.py
-----------------------------
> """Loads the configuration data."""
  
  from __future__ import annotations
  
class ShowErrorDetailsConfigOptions(str, Enum):
class CustomThemeCategories(str, Enum):
def set_option(key: str, value: Any, where_defined: str = _USER_DEFINED) -> None:
def set_user_option(key: str, value: Any) -> None:
def get_option(key: str) -> Any:
def get_options_for_section(section: str) -> dict[str, Any]:
def _create_section(section: str, description: str) -> None:
def _create_option(
def _create_theme_options(
def _delete_option(key: str) -> None:
def _global_development_mode() -> bool:
def _logger_log_level() -> str:
def _logger_message_format() -> str:
def _logger_enable_rich() -> bool:
def _server_cookie_secret() -> str:
def _server_headless() -> bool:
def _server_address() -> str | None:
def _browser_server_port() -> int:
def _secrets_files() -> list[str]:
def get_where_defined(key: str) -> str:
def _is_unset(option_name: str) -> bool:
def is_manually_set(option_name: str) -> bool:
def show_config() -> None:
def _set_option(key: str, value: Any, where_defined: str) -> None:
def _update_config_with_sensitive_env_var(
def _update_config_with_toml(raw_toml: str, where_defined: str) -> None:
def _maybe_read_env_variable(value: Any) -> Any:
def _maybe_convert_to_number(v: Any) -> Any:
def get_config_files(file_name: str) -> list[str]:
def get_config_options(
def _check_conflicts() -> None:
def _set_development_mode() -> None:
def _parse_trusted_user_headers() -> None:
def on_config_parsed(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\config_option.py
-----------------------------
> """Class to store a key-value pair for the config system."""
  
  from __future__ import annotations
  
class ConfigOption:
def _parse_yyyymmdd_str(date_str: str) -> datetime.datetime:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\config_util.py
-----------------------------
>     """Return True if and only if an option in the server section differs
      between old_options and new_options.
def server_option_changed(
def show_config(
def _clean(txt: str) -> str:
def _clean_paragraphs(txt: str) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\cursor.py
-----------------------------
>     """Return the top-level RunningCursor for the given container.
      This is the cursor that is used when user code calls something like
      `st.foo` (which uses the main container) or `st.sidebar.foo` (which uses
      the sidebar container).
def make_delta_path(
def get_container_cursor(
class Cursor:
class RunningCursor(Cursor):
class LockedCursor(Cursor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\dataframe_util.py
-----------------------------
> """A bunch of useful utilities for dealing with dataframes."""
  
  from __future__ import annotations
  
class DBAPICursor(Protocol):
class DataFrameGenericAlias(Protocol[V_co]):
class PandasCompatible(Protocol):
class DataframeInterchangeCompatible(Protocol):
class DataFormat(Enum):
def is_pyarrow_version_less_than(v: str) -> bool:
def is_pandas_version_less_than(v: str) -> bool:
def is_dataframe_like(obj: object) -> bool:
def is_unevaluated_data_object(obj: object) -> bool:
def is_pandas_data_object(obj: object) -> bool:
def is_snowpark_data_object(obj: object) -> bool:
def is_snowpark_row_list(obj: object) -> bool:
def is_pyspark_data_object(obj: object) -> bool:
def is_dask_object(obj: object) -> bool:
def is_modin_data_object(obj: object) -> bool:
def is_snowpandas_data_object(obj: object) -> bool:
def is_polars_dataframe(obj: object) -> bool:
def is_xarray_dataset(obj: object) -> bool:
def is_xarray_data_array(obj: object) -> bool:
def is_polars_series(obj: object) -> bool:
def is_polars_lazyframe(obj: object) -> bool:
def is_ray_dataset(obj: object) -> bool:
def is_pandas_styler(obj: object) -> TypeGuard[Styler]:
def is_dbapi_cursor(obj: object) -> TypeGuard[DBAPICursor]:
def is_duckdb_relation(obj: object) -> bool:
def _is_list_of_scalars(data: Iterable[Any]) -> bool:
def _iterable_to_list(
def _fix_column_naming(data_df: DataFrame) -> DataFrame:
def _dict_to_pandas_df(data: dict[Any, Any]) -> DataFrame:
def convert_anything_to_pandas_df(
def convert_arrow_table_to_arrow_bytes(table: pa.Table) -> bytes:
def convert_pandas_df_to_arrow_bytes(df: DataFrame) -> bytes:
def convert_arrow_bytes_to_pandas_df(source: bytes) -> DataFrame:
def _show_data_information(msg: str) -> None:
def convert_anything_to_arrow_bytes(
def convert_anything_to_list(obj: OptionSequence[V_co]) -> list[V_co]:
def _maybe_truncate_table(
def is_colum_type_arrow_incompatible(column: Series[Any] | Index) -> bool:
def fix_arrow_incompatible_column_types(
def determine_data_format(input_data: Any) -> DataFormat:
def _unify_missing_values(df: DataFrame) -> DataFrame:
def _pandas_df_to_series(df: DataFrame) -> Series[Any]:
def convert_pandas_df_to_data_format(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\delta_generator.py
-----------------------------
> """Allows us to create and absorb changes (aka Deltas) to elements."""
  
  from __future__ import annotations
  
def _maybe_print_use_warning() -> None:
def _maybe_print_fragment_callback_warning() -> None:
class DeltaGenerator(
def _writes_directly_to_sidebar(dg: DeltaGenerator) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\delta_generator_singletons.py
-----------------------------
> """
  The main purpose of this module (right now at least) is to avoid a dependency
  cycle between streamlit.delta_generator and some elements.
class DeltaGeneratorSingleton:
def get_dg_singleton_instance() -> DeltaGeneratorSingleton:
class ContextVarWithLazyDefault(Generic[_T]):
def get_default_dg_stack_value() -> tuple[DeltaGenerator, ...]:
def get_last_dg_added_to_context_stack() -> DeltaGenerator | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\deprecation_util.py
-----------------------------
>     """True if we should print deprecation warnings to the browser."""
      return bool(config.get_option("client.showErrorDetails"))
  
  
def _error_details_in_browser_enabled() -> bool:
def show_deprecation_warning(message: str, show_in_browser: bool = True) -> None:
def make_deprecated_name_warning(
def deprecate_func_name(
def deprecate_obj_name(
def _create_deprecated_obj_wrapper(obj: TObj, show_warning: Callable[[], Any]) -> TObj:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\development.py
-----------------------------
> """Variables for dev purposes.
  
  The main purpose of this module (right now at least) is to avoid a dependency
  cycle between streamlit.config and streamlit.logger.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\emojis.py
-----------------------------
> """A generated list with all existing emojis.
  
  DO NOT EDIT MANUALLY! The list in this file is generated by `scripts/update-emojis.py`.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\env_util.py
-----------------------------
>     """Return if streamlit running in pex.
  
      Pex modifies sys.path so the pex file is the first path and that's
      how we determine we're running in the pex file.
def is_pex() -> bool:
def is_repl() -> bool:
def is_executable_in_path(name: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\errors.py
-----------------------------
>     """The base class for all exceptions thrown by Streamlit.
  
      Should be used for exceptions raised due to user errors (typically via
      StreamlitAPIException) as well as exceptions raised by Streamlit's internal
class Error(Exception):
class CustomComponentError(Error):
class DeprecationError(Error):
class FragmentStorageKeyError(Error, KeyError):
class FragmentHandledException(Exception):  # noqa: N818
class NoStaticFiles(Error):  # noqa: N818
class NoSessionContext(Error):  # noqa: N818
class MarkdownFormattedException(Error):  # noqa: N818
class StreamlitMaxRetriesError(Error):
class StreamlitAPIException(MarkdownFormattedException):
class DuplicateWidgetID(StreamlitAPIException):
class StreamlitAuthError(StreamlitAPIException):
class StreamlitDuplicateElementId(DuplicateWidgetID):
class StreamlitDuplicateElementKey(DuplicateWidgetID):
class UnserializableSessionStateError(StreamlitAPIException):
class StreamlitAPIWarning(StreamlitAPIException, Warning):
class StreamlitModuleNotFoundError(StreamlitAPIWarning):
class LocalizableStreamlitException(StreamlitAPIException):
class StreamlitInvalidPageLayoutError(LocalizableStreamlitException):
class StreamlitInvalidSidebarStateError(LocalizableStreamlitException):
class StreamlitInvalidMenuItemKeyError(LocalizableStreamlitException):
class StreamlitInvalidURLError(LocalizableStreamlitException):
class StreamlitInvalidColumnSpecError(LocalizableStreamlitException):
class StreamlitInvalidVerticalAlignmentError(LocalizableStreamlitException):
class StreamlitInvalidColumnGapError(LocalizableStreamlitException):
class StreamlitInvalidHorizontalAlignmentError(LocalizableStreamlitException):
class StreamlitSelectionCountExceedsMaxError(LocalizableStreamlitException):
class StreamlitMixedNumericTypesError(LocalizableStreamlitException):
class StreamlitValueBelowMinError(LocalizableStreamlitException):
class StreamlitValueAboveMaxError(LocalizableStreamlitException):
class StreamlitJSNumberBoundsError(LocalizableStreamlitException):
class StreamlitInvalidNumberFormatError(LocalizableStreamlitException):
class StreamlitMissingPageLabelError(LocalizableStreamlitException):
class StreamlitPageNotFoundError(LocalizableStreamlitException):
class StreamlitFragmentWidgetsNotAllowedOutsideError(LocalizableStreamlitException):
class StreamlitInvalidFormCallbackError(LocalizableStreamlitException):
class StreamlitValueAssignmentNotAllowedError(LocalizableStreamlitException):
class StreamlitInvalidColorError(LocalizableStreamlitException):
class StreamlitBadTimeStringError(LocalizableStreamlitException):
class StreamlitSecretNotFoundError(LocalizableStreamlitException, FileNotFoundError):
class StreamlitInvalidWidthError(LocalizableStreamlitException):
class StreamlitInvalidHeightError(LocalizableStreamlitException):
class StreamlitValueError(LocalizableStreamlitException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\error_util.py
-----------------------------
>     """Show the exception on the frontend."""
      main_delta_generator = get_dg_singleton_instance().main_dg
      exception._exception(main_delta_generator, ex, is_uncaught_app_exception=True)
  
def _print_rich_exception(e: BaseException) -> None:
def _show_exception(ex: BaseException) -> None:
def handle_uncaught_app_exception(ex: BaseException) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\file_util.py
-----------------------------
>     """Coerce bytes to a BytesIO or a StringIO.
  
      Parameters
      ----------
def get_encoded_file_data(
def streamlit_read(path: str, binary: bool = False) -> Generator[IO[Any], None, None]:
def streamlit_write(path: str, binary: bool = False) -> Generator[IO[Any], None, None]:
def get_static_dir() -> str:
def get_app_static_dir(main_script_path: str) -> str:
def get_streamlit_file_path(*filepath: str) -> str:
def get_project_streamlit_file_path(*filepath: str) -> str:
def get_main_script_streamlit_file_path(main_script_path: str, filename: str) -> str:
def file_is_in_folder_glob(filepath: str, folderpath_glob: str) -> bool:
def get_directory_size(directory: str) -> int:
def file_in_pythonpath(filepath: str) -> bool:
def normalize_path_join(*args: str) -> str:
def get_main_script_directory(main_script: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\git_util.py
-----------------------------
>         """True if there's a git repo here, and git.version >= MIN_GIT_VERSION."""
          return (
              self.repo is not None
              and self.git_version is not None
class GitRepo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\logger.py
-----------------------------
> """Logging module."""
  
  from __future__ import annotations
  
def set_log_level(level: str | int) -> None:
def setup_formatter(logger: logging.Logger) -> None:
def update_formatter() -> None:
def init_tornado_logs() -> None:
def get_logger(name: str) -> logging.Logger:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\material_icon_names.py
-----------------------------
> """A generated list with all valid material symbols names.
  
  DO NOT EDIT MANUALLY! The list in this file is generated by 
`scripts/update_material_icon_names.py`.
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\net_util.py
-----------------------------
>     """Get the *external* IP address of the current machine.
  
      Returns
      -------
def get_external_ip() -> str | None:
def get_internal_ip() -> str | None:
def _make_blocking_http_get(url: str, timeout: float = 5) -> str | None:
def _looks_like_an_ip_adress(address: str | None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\platform.py
-----------------------------
> """Platform module."""
  
  from __future__ import annotations
  
def post_parent_message(message: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\source_util.py
-----------------------------
>     """Open a read-only Python file taking proper care of its encoding.
  
      In Python 3, we would like all files to be opened with utf-8 encoding.
      However, some author like to specify PEP263 headers in their source files
class PageInfo(TypedDict):
def open_python_file(filename: str) -> TextIO:
def page_sort_key(script_path: Path) -> tuple[float, str]:
def page_icon_and_name(script_path: Path) -> tuple[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\string_util.py
-----------------------------
>     """Convert an object to text, dedent it, and strip whitespace."""
      return textwrap.dedent(str(text)).strip()
  
  
def clean_text(text: SupportsStr) -> str:
def _contains_special_chars(text: str) -> bool:
def is_emoji(text: str) -> bool:
def is_material_icon(maybe_icon: str) -> bool:
def validate_icon_or_emoji(icon: str | None) -> str:
def validate_emoji(maybe_emoji: str | None) -> str:
def validate_material_icon(maybe_material_icon: str | None) -> str:
def extract_leading_emoji(text: str) -> tuple[str, str]:
def max_char_sequence(string: str, char: str) -> int:
def is_binary_string(inp: bytes) -> bool:
def simplify_number(num: int) -> str:
def is_mem_address_str(string: str) -> bool:
def to_snake_case(camel_case_str: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\temporary_directory.py
-----------------------------
>     """Temporary directory context manager.
  
      Creates a temporary directory that exists within the context manager scope.
      It returns the path to the created directory.
class TemporaryDirectory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\time_util.py
-----------------------------
>     """Add or subtract years from a date."""
      try:
          # Attempt to directly add/subtract years
          return input_date.replace(year=input_date.year + years)
def adjust_years(input_date: date, years: int) -> date:
def time_to_seconds(
def time_to_seconds(t: float | timedelta | str | None) -> float: ...
def time_to_seconds(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\type_util.py
-----------------------------
> """A bunch of useful utilities for dealing with types."""
  
  from __future__ import annotations
  
class SupportsStr(Protocol):
class SupportsReprHtml(Protocol):
class CustomDict(Protocol):
def is_type(
def is_type(
def is_type(obj: object, fqn_type_pattern: str | re.Pattern[str]) -> bool: ...
def is_type(obj: object, fqn_type_pattern: str | re.Pattern[str]) -> bool:
def _is_type_instance(obj: object, type_to_check: str) -> bool:
def get_object_name(obj: object) -> str:
def get_fqn(the_type: type) -> str:
def get_fqn_type(obj: object) -> str:
def is_bytes_like(obj: object) -> TypeGuard[BytesLike]:
def to_bytes(obj: BytesLike) -> bytes:
def is_sympy_expression(obj: object) -> TypeGuard[sympy.Expr]:
def is_altair_chart(obj: object) -> bool:
def is_pillow_image(obj: object) -> bool:
def is_keras_model(obj: object) -> bool:
def is_openai_chunk(obj: object) -> bool:
def is_plotly_chart(obj: object) -> TypeGuard[Figure | list[Any] | dict[str, Any]]:
def is_graphviz_chart(
def _is_plotly_obj(obj: object) -> bool:
def _is_list_of_plotly_objs(obj: object) -> TypeGuard[list[Any]]:
def _is_probably_plotly_dict(obj: object) -> TypeGuard[dict[str, Any]]:
def is_delta_generator(obj: object) -> TypeGuard[DeltaGenerator]:
def is_function(x: object) -> TypeGuard[types.FunctionType]:
def has_callable_attr(obj: object, name: str) -> bool:
def is_namedtuple(x: object) -> TypeGuard[NamedTuple]:
def is_dataclass_instance(obj: object) -> bool:
def is_pydeck(obj: object) -> TypeGuard[Deck]:
def is_pydantic_model(obj: object) -> bool:
def _is_from_streamlit(obj: object) -> bool:
def is_custom_dict(obj: object) -> TypeGuard[CustomDict]:
def is_iterable(obj: object) -> TypeGuard[Iterable[Any]]:
def is_list_like(obj: object) -> TypeGuard[Sequence[Any]]:
def check_python_comparable(seq: Sequence[Any]) -> None:
def is_altair_version_less_than(v: str) -> bool:
def is_version_less_than(v1: str, v2: str) -> bool:
def async_generator_to_sync(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\url_util.py
-----------------------------
>     """Check url to see if it describes a GitHub Gist "blob" URL.
  
      If so, returns a new URL to get the "raw" script.
      If not, returns URL unchanged.
def process_gitblob_url(url: str) -> str:
def get_hostname(url: str) -> str | None:
def is_url(
def make_url_path(base_url: str, path: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\user_info.py
-----------------------------
>     """Initiate the login flow for the given provider.
  
      This command redirects the user to an OpenID Connect (OIDC) provider. After
      the user authenticates their identity, they are redirected back to the
def login(provider: str | None = None) -> None:
def logout() -> None:
def generate_login_redirect_url(provider: str) -> str:
def _get_user_info() -> UserInfo:
class UserInfoProxy(Mapping[str, Union[str, bool, None]]):
def maybe_show_deprecated_user_warning() -> None:
class DeprecatedUserInfoProxy(UserInfoProxy):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\util.py
-----------------------------
> """A bunch of useful utilities."""
  
  from __future__ import annotations
  
def memoize(func: Callable[..., Any]) -> Callable[..., Any]:
def repr_(self: Any) -> str:
def calc_md5(s: bytes | str) -> str:
class AttributeDictionary(dict[Any, Any]):
def in_sidebar(dg: DeltaGenerator) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\__init__.py
-----------------------------
> """Streamlit.
  
  How to use Streamlit in 3 seconds:
  
def _update_logger() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\streamlit\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\contextvars.py
-----------------------------
> """
  Primitives to deal with a concurrency supporting context, as introduced in
  Python 3.7 as :mod:`contextvars`.
  
def get_contextvars() -> dict[str, Any]:
def get_merged_contextvars(bound_logger: BindableLogger) -> dict[str, Any]:
def merge_contextvars(
def clear_contextvars() -> None:
def bind_contextvars(**kw: Any) -> Mapping[str, contextvars.Token[Any]]:
def reset_contextvars(**kw: contextvars.Token[Any]) -> None:
def unbind_contextvars(*keys: str) -> None:
def bound_contextvars(**kw: Any) -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\dev.py
-----------------------------
> """
  Helpers that make development with *structlog* more pleasant.
  
  See also the narrative documentation in `console-output`.
def _pad(s: str, length: int) -> str:
class _Styles(Protocol):
class _ColorfulStyles:
class _PlainStyles:
class ColumnFormatter(Protocol):
class Column:
class KeyValueColumnFormatter:
class LogLevelColumnFormatter:
def plain_traceback(sio: TextIO, exc_info: ExcInfo) -> None:
class RichTracebackFormatter:
def better_traceback(sio: TextIO, exc_info: ExcInfo) -> None:
class ConsoleRenderer:
def set_exc_info(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\exceptions.py
-----------------------------
> """
  Exceptions factored out to avoid import loops.
class DropEvent(BaseException):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\processors.py
-----------------------------
> """
  Processors useful regardless of the logging framework.
class KeyValueRenderer:
class LogfmtRenderer:
def _items_sorter(
class UnicodeEncoder:
class UnicodeDecoder:
class JSONRenderer:
def _json_fallback_handler(obj: Any) -> Any:
class ExceptionRenderer:
class TimeStamper:
def _make_stamper(
class MaybeTimeStamper:
def _figure_out_exc_info(v: Any) -> ExcInfo | None:
class ExceptionPrettyPrinter:
class StackInfoRenderer:
class CallsiteParameter(enum.Enum):
def _get_callsite_pathname(module: str, frame: FrameType) -> Any:
def _get_callsite_filename(module: str, frame: FrameType) -> Any:
def _get_callsite_module(module: str, frame: FrameType) -> Any:
def _get_callsite_func_name(module: str, frame: FrameType) -> Any:
def _get_callsite_lineno(module: str, frame: FrameType) -> Any:
def _get_callsite_thread(module: str, frame: FrameType) -> Any:
def _get_callsite_thread_name(module: str, frame: FrameType) -> Any:
def _get_callsite_process(module: str, frame: FrameType) -> Any:
def _get_callsite_process_name(module: str, frame: FrameType) -> Any:
class CallsiteParameterAdder:
class EventRenamer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\stdlib.py
-----------------------------
> """
  Processors and helpers specific to the :mod:`logging` module from the `Python
  standard library <https://docs.python.org/>`_.
  
def recreate_defaults(*, log_level: int | None = logging.NOTSET) -> None:
class _FixedFindCallerLogger(logging.Logger):
class BoundLogger(BoundLoggerBase):
def get_logger(*args: Any, **initial_values: Any) -> BoundLogger:
class AsyncBoundLogger:
class LoggerFactory:
class PositionalArgumentsFormatter:
def filter_by_level(
def add_log_level_number(
def add_logger_name(
class ExtraAdder:
def render_to_log_args_and_kwargs(
def render_to_log_kwargs(
class ProcessorFormatter(logging.Formatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\testing.py
-----------------------------
> """
  Helpers to test your application's logging behavior.
  
  .. versionadded:: 20.1.0
class LogCapture:
def capture_logs() -> Generator[list[EventDict], None, None]:
class ReturnLogger:
class ReturnLoggerFactory:
class CapturedCall(NamedTuple):
class CapturingLogger:
class CapturingLoggerFactory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\threadlocal.py
-----------------------------
> """
  **Deprecated** primitives to keep context global but thread (and greenlet)
  local.
  
def _determine_threadlocal() -> type[Any]:
def _deprecated() -> None:
def wrap_dict(dict_class: type[Context]) -> type[Context]:
def as_immutable(logger: TLLogger) -> TLLogger:
def tmp_bind(
class _ThreadLocalDictWrapper:
def get_threadlocal() -> Context:
def get_merged_threadlocal(bound_logger: BindableLogger) -> Context:
def merge_threadlocal(
def clear_threadlocal() -> None:
def bind_threadlocal(**kw: Any) -> None:
def unbind_threadlocal(*keys: str) -> None:
def bound_threadlocal(**kw: Any) -> Generator[None, None, None]:
def _get_context() -> Context:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\tracebacks.py
-----------------------------
> """
  Extract a structured traceback from an exception.
  
  Based on work by Will McGugan
class Frame:
class SyntaxError_:  # noqa: N801
class Stack:
class Trace:
def safe_str(_object: Any) -> str:
def to_repr(
def extract(
class ExceptionDictTransformer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\twisted.py
-----------------------------
> """
  Processors and tools specific to the `Twisted <https://twisted.org/>`_
  networking engine.
  
class BoundLogger(BoundLoggerBase):
class LoggerFactory:
def _extractStuffAndWhy(eventDict: EventDict) -> tuple[Any, Any, EventDict]:
class ReprWrapper:
class JSONRenderer(GenericJSONRenderer):
class PlainFileLogObserver:
class JSONLogObserverWrapper:
def plainJSONStdOutLogger() -> JSONLogObserverWrapper:
class EventAdapter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\types.py
-----------------------------
> """
  Deprecated name for :mod:`structlog.typing`.
  
  .. versionadded:: 20.2.0

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\typing.py
-----------------------------
> """
  Type information used throughout *structlog*.
  
  For now, they are considered provisional. Especially `BindableLogger` will
class ExceptionTransformer(Protocol):
class BindableLogger(Protocol):
class FilteringBoundLogger(BindableLogger, Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_base.py
-----------------------------
> """
  Logger wrapper and helper class.
class BoundLoggerBase:
def get_context(bound_logger: BindableLogger) -> Context:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_config.py
-----------------------------
> """
  Global state department.  Don't reload this module or everything breaks.
class _Configuration:
def is_configured() -> bool:
def get_config() -> dict[str, Any]:
def get_logger(*args: Any, **initial_values: Any) -> Any:
def wrap_logger(
def configure(
def configure_once(
def reset_defaults() -> None:
class BoundLoggerLazyProxy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_frames.py
-----------------------------
>     """
      Prettyprint an `exc_info` tuple.
  
      Shamelessly stolen from stdlib's logging module.
def _format_exception(exc_info: ExcInfo) -> str:
def _find_first_app_frame_and_name(
def _format_stack(frame: FrameType) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_generic.py
-----------------------------
> """
  Generic bound logger that can wrap anything.
class BoundLogger(BoundLoggerBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_greenlets.py
-----------------------------
> """
  greenlet-specific code that pretends to be a `threading.local`.
  
  Fails to import if not running under greenlet.
class GreenThreadLocal:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_log_levels.py
-----------------------------
> """
  Extracted log level data used by both stdlib and native log level filters.
def map_method_name(method_name: str) -> str:
def add_log_level(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_native.py
-----------------------------
> """
  structlog's native high-performance loggers.
def _nop(self: Any, event: str, *args: Any, **kw: Any) -> Any:
def exception(
def make_filtering_bound_logger(
def _make_filtering_bound_logger(min_level: int) -> type[FilteringBoundLogger]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_output.py
-----------------------------
> """
  Logger classes responsible for output.
def _get_lock_for_file(file: IO[Any]) -> threading.Lock:
class PrintLogger:
class PrintLoggerFactory:
class WriteLogger:
class WriteLoggerFactory:
class BytesLogger:
class BytesLoggerFactory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\_utils.py
-----------------------------
> """
  Generic utilities.
def get_processname() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\structlog\__init__.py
-----------------------------
def __getattr__(name: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\asyncio\retry.py
-----------------------------
>     """Abstract base class for async retry strategies."""
  
      @abc.abstractmethod
      async def __call__(self, retry_state: "RetryCallState") -> bool:  # type: 
ignore[override]
class async_retry_base(retry_base):
class retry_if_exception(async_retry_base):
class retry_if_result(async_retry_base):
class retry_any(async_retry_base):
class retry_all(async_retry_base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\asyncio\__init__.py
-----------------------------
def _portable_async_sleep(seconds: float) -> t.Awaitable[None]:
class AsyncRetrying(BaseRetrying):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\after.py
-----------------------------
>     """After call strategy that does nothing."""
  
  
  def after_log(
def after_nothing(retry_state: "RetryCallState") -> None:
def after_log(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\before.py
-----------------------------
>     """Before call strategy that does nothing."""
  
  
  def before_log(
def before_nothing(retry_state: "RetryCallState") -> None:
def before_log(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\before_sleep.py
-----------------------------
>     """Before sleep strategy that does nothing."""
  
  
  def before_sleep_log(
def before_sleep_nothing(retry_state: "RetryCallState") -> None:
def before_sleep_log(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\nap.py
-----------------------------
>     """
      Sleep strategy that delays execution for a given number of seconds.
  
      This is the default strategy, and may be mocked out for unit testing.
def sleep(seconds: float) -> None:
class sleep_using_event:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\retry.py
-----------------------------
>     """Abstract base class for retry strategies."""
  
      @abc.abstractmethod
      def __call__(self, retry_state: "RetryCallState") -> bool:
class retry_base(abc.ABC):
class _retry_never(retry_base):
class _retry_always(retry_base):
class retry_if_exception(retry_base):
class retry_if_exception_type(retry_if_exception):
class retry_if_not_exception_type(retry_if_exception):
class retry_unless_exception_type(retry_if_exception):
class retry_if_exception_cause_type(retry_base):
class retry_if_result(retry_base):
class retry_if_not_result(retry_base):
class retry_if_exception_message(retry_if_exception):
class retry_if_not_exception_message(retry_if_exception_message):
class retry_any(retry_base):
class retry_all(retry_base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\stop.py
-----------------------------
>     """Abstract base class for stop strategies."""
  
      @abc.abstractmethod
      def __call__(self, retry_state: "RetryCallState") -> bool:
class stop_base(abc.ABC):
class stop_any(stop_base):
class stop_all(stop_base):
class _stop_never(stop_base):
class stop_when_event_set(stop_base):
class stop_after_attempt(stop_base):
class stop_after_delay(stop_base):
class stop_before_delay(stop_base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\tornadoweb.py
-----------------------------
class TornadoRetrying(BaseRetrying):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\wait.py
-----------------------------
>     """Abstract base class for wait strategies."""
  
      @abc.abstractmethod
      def __call__(self, retry_state: "RetryCallState") -> float:
class wait_base(abc.ABC):
class wait_fixed(wait_base):
class wait_none(wait_fixed):
class wait_random(wait_base):
class wait_combine(wait_base):
class wait_chain(wait_base):
class wait_incrementing(wait_base):
class wait_exponential(wait_base):
class wait_random_exponential(wait_exponential):
class wait_exponential_jitter(wait_base):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\_utils.py
-----------------------------
>     """Get a callback fully-qualified name.
  
      If no name can be produced ``repr(cb)`` is called and returned.
def find_ordinal(pos_num: int) -> str:
def to_ordinal(pos_num: int) -> str:
def get_callback_name(cb: typing.Callable[..., typing.Any]) -> str:
def to_seconds(time_unit: time_unit_type) -> float:
def is_coroutine_callable(call: typing.Callable[..., typing.Any]) -> bool:
def wrap_to_async_func(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tenacity\__init__.py
-----------------------------
>     """Always retry the executed function when raised."""
  
  
  NO_RESULT = object()
class IterState:
class TryAgain(Exception):
class DoAttempt:
class DoSleep(float):
class BaseAction:
class RetryAction(BaseAction):
def _first_set(first: t.Union[t.Any, object], second: t.Any) -> t.Any:
class RetryError(Exception):
class AttemptManager:
class BaseRetrying(ABC):
class Retrying(BaseRetrying):
class Future(FutureGenericT):
class RetryCallState:
def retry(func: WrappedFn) -> WrappedFn: ...
def retry(
def retry(*dargs: t.Any, **dkw: t.Any) -> t.Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\e2e\test_cli_version.py
-----------------------------
def test_cli_version():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\e2e\test_e2e_result_snapshots.py
-----------------------------
>     """Create a single dict from all mutant results in *.meta files"""
      with change_cwd(project_path):
          ensure_config_loaded()
  
def change_cwd(path):
def read_all_stats_for_project(project_path: Path) -> dict[str, dict]:
def read_json_file(path: Path):
def write_json_file(path: Path, data: Any):
def asserts_results_did_not_change(project: str):
def test_my_lib_result_snapshot():
def test_config_result_snapshot():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\e2e\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\test_generation_error_handling.py
-----------------------------
class MockConfig:
def test_mutant_generation_raises_exception_on_invalid_syntax(monkeypatch):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\test_mutation.py
-----------------------------
>         ('"""foo"""', []),  # don't mutate things we assume to be docstrings
          ('(x for x in [])', []),  # don't mutate 'in' in generators
          ('from foo import *', []),
          ('from .foo import *', []),
def mutants_for_source(source: str) -> list[str]:
def mutated_module(source: str) -> str:
def test_basic_mutations(original, expected):
def test_do_not_mutate_annotations():
def foo() -> int:
def test_do_not_mutate_specific_functions():
class A:
def test_match_case():
def test_mach_case_does_not_mutate_bitor():
def concat():
def test_basic_class():
class Foo:
def test_function_with_annotation():
def test_pragma_no_mutate():
def test_pragma_no_mutate_and_no_cover():
def test_pragma_no_mutate_on_function_definition():
def foo(): # pragma: no mutate
def test_mutate_dict():
def test_syntax_error():
def test_bug_github_issue_18():
def icon(name):
def test_bug_github_issue_19_argument_mutation_crash():
def test_bug_github_issue_26():
def wrapper():
def test_bug_github_issue_30():
def wrapper():
def test_bug_github_issue_77():
def test_multiline_dunder_whitelist():
def test_bad_mutation_str_type_definition():
def foo():
def test_orig_function_name_from_key():
def test_mangle_function_name():
def test_diff_ops():
def foo():    
class Foo:
def test_from_future_still_first():
def foo():
def test_from_future_with_docstring_still_first():
def foo():
def test_run_forced_fail_test_with_failing_test(_start, _stop, _dump_output, capfd):
def test_run_forced_fail_test_with_mutmut_programmatic_fail_exception(_start, _stop, _dump_output, capfd):
def test_run_forced_fail_test_with_all_tests_passing(_start, _stop, _dump_output, capfd):
def _mocked_runner_run_forced_failed(return_value=None, side_effect=None):
def test_do_not_mutate_top_level_decorators():
def foo():
class A(Enum):
def test_decorated_inner_functions_mutation():
def foo():
def x_foo__mutmut_1():
def test_module_mutation():
def foo(a, b):
def bar():
class Adder:
def x_foo__mutmut_orig(a, b):
def x_foo__mutmut_1(a, b):
def foo(*args, **kwargs):
def x_bar__mutmut_orig():
def x_bar__mutmut_1():
def bar(*args, **kwargs):
class Adder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\test_mutmut3.py
-----------------------------
>     source = """
  a + 1
  
  def foo(a, b, c):
def mutated_module(source: str) -> str:
def test_mutate_file_contents():
def foo(a, b, c):
def x_foo__mutmut_orig(a, b, c):
def x_foo__mutmut_1(a, b, c):
def x_foo__mutmut_2(a, b, c):
def foo(*args, **kwargs):
def test_avoid_annotations():
def foo(a: List[int]) -> int:
def x_foo__mutmut_orig(a: List[int]) -> int:
def x_foo__mutmut_1(a: List[int]) -> int:
def foo(*args, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tests\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\constants.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\errors.py
-----------------------------
>     """Raised when the value of a style property is not valid
  
      Attributes:
          help_text: Optional HelpText to be rendered when this
class DeclarationError(Exception):
class StyleTypeError(TypeError):
class UnresolvedVariableError(TokenError):
class StyleValueError(ValueError):
class StylesheetError(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\match.py
-----------------------------
>     """Check if a given node matches any of the given selector sets.
  
      Args:
          selector_sets: Iterable of selector sets.
def match(selector_sets: Iterable[SelectorSet], node: DOMNode) -> bool:
def _check_selectors(selectors: list[Selector], css_path_nodes: list[DOMNode]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\model.py
-----------------------------
>     """Type of selector."""
  
      UNIVERSAL = 1
class SelectorType(Enum):
class CombinatorType(Enum):
def _check_universal(name: str, node: DOMNode) -> bool:
def _check_type(name: str, node: DOMNode) -> bool:
def _check_class(name: str, node: DOMNode) -> bool:
def _check_id(name: str, node: DOMNode) -> bool:
class Selector:
class Declaration:
class SelectorSet:
class RuleSet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\parse.py
-----------------------------
>     """Is the selector a single ID selector, i.e. "#foo"?
  
      Args:
          selector: A CSS selector.
def is_id_selector(selector: str) -> bool:
def _add_specificity(
def parse_selectors(css_selectors: str) -> tuple[SelectorSet, ...]:
def parse_rule_set(
def parse_declarations(css: str, read_from: CSSLocation) -> Styles:
def _unresolved(variable_name: str, variables: Iterable[str], token: Token) -> NoReturn:
def substitute_references(
def parse(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\query.py
-----------------------------
> """
  This module contains the `DOMQuery` class and related objects.
  
  A DOMQuery is a set of DOM nodes returned by [query][textual.dom.DOMNode.query].
class QueryError(Exception):
class InvalidQueryFormat(QueryError):
class NoMatches(QueryError):
class TooManyMatches(QueryError):
class WrongType(QueryError):
class DOMQuery(Generic[QueryType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\scalar.py
-----------------------------
>     """Base class for exceptions raised by the Scalar class."""
  
  
  class ScalarResolveError(ScalarError):
class ScalarError(Exception):
class ScalarResolveError(ScalarError):
class ScalarParseError(ScalarError):
class Unit(Enum):
def _resolve_cells(
def _resolve_fraction(
def _resolve_width(
def _resolve_height(
def _resolve_view_width(
def _resolve_view_height(
def get_symbols(units: Iterable[Unit]) -> list[str]:
class Scalar(NamedTuple):
class ScalarOffset(NamedTuple):
def percentage_string_to_float(string: str) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\scalar_animation.py
-----------------------------
>         """Stop the animation.
  
          Args:
              complete: Flag to say if the animation should be taken to completion.
class ScalarAnimation(Animation):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\styles.py
-----------------------------
>     """A typed dict for CSS rules.
  
      Any key may be absent, indicating that rule has not been set.
  
class RulesMap(TypedDict, total=False):
class StylesBase:
class Styles(StylesBase):
class RenderStyles(StylesBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\stylesheet.py
-----------------------------
>     """Raised when the stylesheet could not be parsed."""
  
      def __init__(self, errors: StylesheetErrors) -> None:
          self.errors = errors
class StylesheetParseError(StylesheetError):
class StylesheetErrors:
class CssSource(NamedTuple):
class Stylesheet:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\tokenize.py
-----------------------------
> """Selectors representing Widget type names should start with upper case or '_'.
  
  The fact that a selector starts with an upper case letter or '_' is relevant in the
  context of nested CSS to help determine whether xxx:yyy is a declaration + value or a
class TokenizerState:
class TCSSTokenizerState:
class DeclarationTokenizerState(TCSSTokenizerState):
class ValueTokenizerState(TCSSTokenizerState):
class StyleTokenizerState(TCSSTokenizerState):
def tokenize_values(values: dict[str, str]) -> dict[str, list[Token]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\tokenizer.py
-----------------------------
>     """Error raised when the CSS cannot be tokenized (syntax error)."""
  
      def __init__(
          self,
class TokenError(Exception):
class UnexpectedEnd(TokenError):
class Expect:
class ReferencedBy(NamedTuple):
class Token(NamedTuple):
class Tokenizer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\transition.py
-----------------------------
class Transition(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\types.py
-----------------------------
> """Represents the definition location of a piece of CSS code.
  
  The first element of the tuple is the file path from where the CSS was read.
  If the CSS was read from a Python source file, the second element contains the class

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\_error_tools.py
-----------------------------
>     """Generate a list of words as readable prose.
  
      >>> friendly_list(["foo", "bar", "baz"])
      "'foo', 'bar', or 'baz'"
def friendly_list(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\_help_renderables.py
-----------------------------
>     """Highlight and render markup in a string of text, returning
      a styled Text object.
  
      Args:
def _markup_and_highlight(text: str) -> Text:
class Example:
class Bullet:
class HelpText:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\_help_text.py
-----------------------------
> """The type of styling the user was using when the error was encountered.
  Used to give help text specific to the context i.e. we give CSS help if the
  user hit an issue with their CSS, and Python help text when the user has an
class ContextSpecificBullets:
def _python_name(property_name: str) -> str:
def _css_name(property_name: str) -> str:
def _contextualize_property_name(
def _spacing_examples(property_name: str) -> ContextSpecificBullets:
def property_invalid_value_help_text(
def spacing_wrong_number_of_values_help_text(
def spacing_invalid_value_help_text(
def scalar_help_text(
def string_enum_help_text(
def color_property_help_text(
def border_property_help_text(property_name: str, context: StylingContext) -> HelpText:
def layout_property_help_text(property_name: str, context: StylingContext) -> HelpText:
def dock_property_help_text(property_name: str, context: StylingContext) -> HelpText:
def split_property_help_text(property_name: str, context: StylingContext) -> HelpText:
def fractional_property_help_text(
def offset_property_help_text(context: StylingContext) -> HelpText:
def scrollbar_size_property_help_text(context: StylingContext) -> HelpText:
def scrollbar_size_single_axis_help_text(property_name: str) -> HelpText:
def integer_help_text(property_name: str) -> HelpText:
def align_help_text() -> HelpText:
def keyline_help_text() -> HelpText:
def text_align_help_text() -> HelpText:
def offset_single_axis_help_text(property_name: str) -> HelpText:
def position_help_text(property_name: str) -> HelpText:
def expand_help_text(property_name: str) -> HelpText:
def style_flags_property_help_text(
def table_rows_or_columns_help_text(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\_styles_builder.py
-----------------------------
>     """
      The StylesBuilder object takes tokens parsed from the CSS and converts
      to the appropriate internal types.
class StylesBuilder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\_style_properties.py
-----------------------------
> """
  Style properties are descriptors which allow the ``Styles`` object to accept different 
types when
  setting attributes. This gives the developer more freedom in how to express style 
information.
  
class GenericProperty(Generic[PropertyGetType, PropertySetType]):
class IntegerProperty(GenericProperty[int, int]):
class BooleanProperty(GenericProperty[bool, bool]):
class ScalarProperty:
class ScalarListProperty:
class BoxProperty:
class Edges(NamedTuple):
class BorderProperty:
class KeylineProperty:
class SpacingProperty:
class DockProperty:
class SplitProperty:
class LayoutProperty:
class OffsetProperty:
class StringEnumProperty(Generic[EnumType]):
class OverflowProperty(StringEnumProperty):
class NameProperty:
class NameListProperty:
class ColorProperty:
class ScrollbarColorProperty(ColorProperty):
class StyleFlagsProperty:
class TransitionsProperty:
class FractionalProperty:
class AlignProperty:
class HatchProperty:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\css\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\data.py
-----------------------------
> MOVIES = """\
  Date,Title,Genre,Director,Box Office (millions),Rating,Runtime (min)
  1980-01-18,The Fog,Horror,John Carpenter,21,R,89
  1980-02-15,Coal Miner's Daughter,Biography,Michael Apted,67,PG,124

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\demo_app.py
-----------------------------
>     """The demo app defines the modes and sets a few bindings."""
  
class DemoApp(App):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\game.py
-----------------------------
> """
  An implementation of the "Sliding Tile" puzzle.
  
  Textual isn't a game engine exactly, but it wasn't hard to build this.
class NewGame:
class SpatialMap(Generic[ValueType]):
class Tile(containers.Vertical):
class GameDialog(containers.VerticalGroup):
class GameDialogScreen(ModalScreen):
class Game(containers.Vertical, can_focus=True):
class GameInstructions(containers.VerticalGroup):
class GameScreen(PageScreen):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\home.py
-----------------------------
> WHAT_IS_TEXTUAL_MD = """\
  # What is Textual?
  
  Snappy, keyboard-centric, applications that run in the terminal and [the 
web](https://github.com/Textualize/textual-web).
class MyApp(App):
class StarCount(Vertical):
class Content(VerticalScroll, can_focus=False):
class HomeScreen(PageScreen):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\page.py
-----------------------------
>     DEFAULT_CSS = """
      CodeScreen {
          #code {
              border: heavy $accent;
class CodeScreen(ModalScreen):
class PageScreen(Screen):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\projects.py
-----------------------------
> PROJECTS_MD = """\
  # Projects
  
  There are many amazing Open Source Textual apps available for download.
class Project(Vertical, can_focus=True, can_focus_children=False):
class ProjectsScreen(PageScreen):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\widgets.py
-----------------------------
> WIDGETS_MD = """\
  # Widgets
  
  The Textual library includes a large number of builtin widgets.
class Buttons(containers.VerticalGroup):
class Checkboxes(containers.VerticalGroup):
class Datatables(containers.VerticalGroup):
class Inputs(containers.VerticalGroup):
class ListViews(containers.VerticalGroup):
class Logs(containers.VerticalGroup):
def loop_first_last(values: Iterable[T]) -> Iterable[tuple[bool, bool, T]]:
class Markdowns(containers.VerticalGroup):
class Selects(containers.VerticalGroup):
class Sparklines(containers.VerticalGroup):
class Switches(containers.VerticalGroup):
class TabsDemo(containers.VerticalGroup):
class Trees(containers.VerticalGroup):
class TextAreas(containers.VerticalGroup):
class YourWidgets(containers.VerticalGroup):
class WidgetsScreen(PageScreen):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\_project_data.py
-----------------------------
>     """Dataclass for storing project information."""
  
      title: str
      author: str
class ProjectInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\_project_stargazer_updater.py
-----------------------------
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\_project_stars.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\demo\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\_document.py
-----------------------------
> """The type representing valid line separators."""
  VALID_NEWLINES = set(get_args(Newline))
class EditResult:
def _utf8_encode(text: str) -> bytes:
def _detect_newline_style(text: str) -> Newline:
class DocumentBase(ABC):
class Document(DocumentBase):
class Selection(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\_document_navigator.py
-----------------------------
>     """Cursor navigation in the TextArea is "wrapping-aware".
  
      Although the cursor location (the selection) is represented as a location
      in the raw document, when you actually *move* the cursor, it must take wrapping
class DocumentNavigator:
def index(sequence: Sequence, value: Any) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\_edit.py
-----------------------------
>     """Implements the Undoable protocol to replace text at some range within a document."""
  
      text: str
class Edit:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\_history.py
-----------------------------
>     """Indicates misuse of the EditHistory API.
  
      For example, trying to undo() an Edit that has yet to be done.
class HistoryException(Exception):
class EditHistory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\_syntax_aware_document.py
-----------------------------
>     """General error raised when SyntaxAwareDocument is used incorrectly."""
  
  
  class SyntaxAwareDocument(Document):
class SyntaxAwareDocumentError(Exception):
class SyntaxAwareDocument(Document):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\_wrapped_document.py
-----------------------------
>     """A view into a Document which wraps the document at a certain
      width and can be queried to retrieve lines from the *wrapped* version
      of the document.
  
class WrappedDocument:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\document\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\headless_driver.py
-----------------------------
>     """A do-nothing driver for testing."""
  
      @property
      def is_headless(self) -> bool:
class HeadlessDriver(Driver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\linux_driver.py
-----------------------------
>     """Powers display and input for Linux / MacOS"""
  
      def __init__(
          self,
class LinuxDriver(Driver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\linux_inline_driver.py
-----------------------------
>         """Enable bracketed paste mode."""
          self.write("\x1b[?2004h")
  
      def _disable_bracketed_paste(self) -> None:
class LinuxInlineDriver(Driver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\web_driver.py
-----------------------------
> """
  
  The Remote driver uses the following packet structure.
  
class _ExitInput(Exception):
class WebDriver(Driver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\win32.py
-----------------------------
>     """https://docs.microsoft.com/en-us/windows/console/coord-str"""
  
      _fields_ = [
          ("X", SHORT),
class COORD(Structure):
class uChar(Union):
class KEY_EVENT_RECORD(Structure):
class MOUSE_EVENT_RECORD(Structure):
class WINDOW_BUFFER_SIZE_RECORD(Structure):
class MENU_EVENT_RECORD(Structure):
class FOCUS_EVENT_RECORD(Structure):
class InputEvent(Union):
class INPUT_RECORD(Structure):
def set_console_mode(file: IO, mode: int) -> bool:
def get_console_mode(file: IO) -> int:
def enable_application_mode() -> Callable[[], None]:
def wait_for_handles(handles: List[HANDLE], timeout: int = -1) -> Optional[HANDLE]:
class EventMonitor(threading.Thread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\windows_driver.py
-----------------------------
>     """Powers display and input for Windows."""
  
      def __init__(
          self,
class WindowsDriver(Driver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\_byte_stream.py
-----------------------------
>     """Parse related errors."""
  
  
  class ParseEOF(ParseError):
class ParseError(Exception):
class ParseEOF(ParseError):
class Awaitable:
class _Read(Awaitable):
class _Read1(Awaitable):
class ByteStreamParser(Generic[TokenType]):
class BytePacket(NamedTuple):
class ByteStream(ByteStreamParser[Tuple[str, bytes]]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\_input_reader.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\_input_reader_linux.py
-----------------------------
>     """Read input from stdin."""
  
      def __init__(self, timeout: float = 0.1) -> None:
class InputReader:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\_input_reader_windows.py
-----------------------------
>     """Read input from stdin."""
  
      def __init__(self, timeout: float = 0.1) -> None:
class InputReader:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\_writer_thread.py
-----------------------------
>     """A thread / file-like to do writes to stdout in the background."""
  
      def __init__(self, file: IO[str]) -> None:
          super().__init__(daemon=True, name="textual-output")
class WriterThread(threading.Thread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\drivers\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layouts\factory.py
-----------------------------
>     """Get a named layout object.
  
      Args:
          name: Name of the layout.
class MissingLayout(Exception):
def get_layout(name: str) -> Layout:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layouts\grid.py
-----------------------------
>     """Used to layout Widgets into a grid."""
  
      name = "grid"
  
class GridLayout(Layout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layouts\horizontal.py
-----------------------------
>     """Used to layout Widgets horizontally on screen, from left to right. Since Widgets 
naturally
      fill the space of their parent container, all widgets used in a horizontal layout 
should have a specified.
class HorizontalLayout(Layout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layouts\stream.py
-----------------------------
>     """A cut down version of the vertical layout.
  
      The stream layout is faster, but has a few limitations compared to the vertical layout.
  
class StreamLayout(Layout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layouts\vertical.py
-----------------------------
>     """Used to layout Widgets vertically on screen, from top to bottom."""
  
      name = "vertical"
  
class VerticalLayout(Layout):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layouts\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\background_screen.py
-----------------------------
>     """Tints a renderable and removes links / meta."""
  
      def __init__(
          self,
class BackgroundScreen:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\bar.py
-----------------------------
>     """Thin horizontal bar with a portion highlighted.
  
      Args:
          highlight_range: The range to highlight.
class Bar:
def _apply_gradient(text: Text, gradient: Gradient, width: int) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\blank.py
-----------------------------
>     """Draw solid background color."""
  
      def __init__(self, color: Color | str = "transparent") -> None:
          self._rich_style = RichStyle.from_color(bgcolor=Color.parse(color).rich_color)
class Blank(Visual):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\digits.py
-----------------------------
> DIGITS3X3_BOLD = """\
  
  
  
class Digits:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\gradient.py
-----------------------------
>     """Draw a vertical gradient."""
  
      def __init__(self, color1: str, color2: str) -> None:
          self._color1 = Color.parse(color1)
class VerticalGradient:
class LinearGradient:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\sparkline.py
-----------------------------
>     """A sparkline representing a series of data.
  
      Args:
          data: The sequence of data to render.
class Sparkline(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\styled.py
-----------------------------
>     """A renderable which allows you to apply a style before and after another renderable.
      This can be used to layer styles on top of each other, like a style sandwich. This is 
used,
      for example, in the DataTable to layer default CSS styles + user renderables (e.g. Text 
objects
class Styled:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\text_opacity.py
-----------------------------
>     """Blend from one color to another.
  
      Cached because when a UI is static the opacity will be constant.
  
def _get_blended_style_cached(
class TextOpacity:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\tint.py
-----------------------------
>     """Applies a color on top of an existing renderable."""
  
      def __init__(
          self,
class Tint:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\_blend_colors.py
-----------------------------
>     """Given two RGB colors, return a color that sits some distance between
      them in RGB color space.
  
      Args:
def blend_colors(color1: Color, color2: Color, ratio: float) -> Color:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\renderables\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\button.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\collapsible.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\data_table.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\directory_tree.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\input.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\markdown.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\option_list.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\rule.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\select.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\selection_list.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\tabbed_content.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\text_area.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\tree.py
-----------------------------
> """Make non-widget Tree support classes available."""
  
  from textual.widgets._tree import (
      AddNodeError,

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_button.py
-----------------------------
> """The names of the valid button variants.
  
  These are the variants that can be used with a [`Button`][textual.widgets.Button].
class InvalidButtonVariant(Exception):
class Button(Widget, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_checkbox.py
-----------------------------
> """Provides a check box widget."""
  
  from __future__ import annotations
  
class Checkbox(ToggleButton):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_collapsible.py
-----------------------------
>     """Title and symbol for the Collapsible."""
  
      ALLOW_SELECT = False
class CollapsibleTitle(Static, can_focus=True):
class Collapsible(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_content_switcher.py
-----------------------------
> """Provides a widget for switching between the display of its immediate children."""
  
  from __future__ import annotations
  
class ContentSwitcher(Container):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_data_table.py
-----------------------------
> """The valid types of cursors for 
[`DataTable.cursor_type`][textual.widgets.DataTable.cursor_type]."""
  CellType = TypeVar("CellType")
class CellDoesNotExist(Exception):
class RowDoesNotExist(Exception):
class ColumnDoesNotExist(Exception):
class DuplicateKey(Exception):
class StringKey:
class RowKey(StringKey):
class ColumnKey(StringKey):
class CellKey(NamedTuple):
def _find_newline(string: str, number: int) -> int:
def default_cell_formatter(
class Column:
class Row:
class RowRenderables(NamedTuple):
class DataTable(ScrollView, Generic[CellType], can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_digits.py
-----------------------------
>     """A widget to display numerical values using a 3x3 grid of unicode characters."""
  
class Digits(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_directory_tree.py
-----------------------------
>     """Attaches directory information to a [`DirectoryTree`][textual.widgets.DirectoryTree] 
node."""
  
      path: Path
class DirEntry:
class DirectoryTree(Tree[DirEntry]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_footer.py
-----------------------------
>     DEFAULT_CSS = """
      FooterKey {
          width: auto;
          height: 1;
class FooterKey(Widget):
class FooterLabel(Label):
class Footer(ScrollableContainer, can_focus=False, can_focus_children=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_header.py
-----------------------------
> """Provides a Textual application header widget."""
  
  from __future__ import annotations
  
class HeaderIcon(Widget):
class HeaderClockSpace(Widget):
class HeaderClock(HeaderClockSpace):
class HeaderTitle(Static):
class Header(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_help_panel.py
-----------------------------
>     """
      Shows context sensitive help for the currently focused widget.
class HelpPanel(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_input.py
-----------------------------
> """Possible messages that trigger input validation."""
  _POSSIBLE_VALIDATE_ON_VALUES = {"blur", "changed", "submitted"}
class Selection(NamedTuple):
class Input(ScrollView):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_key_panel.py
-----------------------------
>     """A widget to display bindings."""
  
      COMPONENT_CLASSES = {
          "bindings-table--key",
class BindingsTable(Static):
class KeyPanel(VerticalScroll, can_focus=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_label.py
-----------------------------
> """Provides a simple Label widget."""
  
  from __future__ import annotations
  
class Label(Static):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_link.py
-----------------------------
>     """A simple, clickable link that opens a URL."""
  
class Link(Static, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_list_item.py
-----------------------------
> """Provides a list item widget for use with `ListView`."""
  
  from __future__ import annotations
  
class ListItem(Widget, can_focus=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_list_view.py
-----------------------------
>     """A vertical list view widget.
  
      Displays a vertical list of `ListItem`s which can be highlighted and
      selected using the mouse or keyboard.
class ListView(VerticalScroll, can_focus=True, can_focus_children=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_loading_indicator.py
-----------------------------
>     """Display an animated loading indicator."""
  
class LoadingIndicator(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_log.py
-----------------------------
>     """A widget to log text."""
  
      ALLOW_SELECT = True
class Log(ScrollView, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_markdown.py
-----------------------------
> """Information about the table of contents of a markdown document.
  
  The triples encode the level, the label, and the optional block id of each heading.
class MarkdownStream:
class Navigator:
class MarkdownBlock(Static):
class MarkdownHeader(MarkdownBlock):
class MarkdownH1(MarkdownHeader):
class MarkdownH2(MarkdownHeader):
class MarkdownH3(MarkdownHeader):
class MarkdownH4(MarkdownHeader):
class MarkdownH5(MarkdownHeader):
class MarkdownH6(MarkdownHeader):
class MarkdownHorizontalRule(MarkdownBlock):
class MarkdownParagraph(MarkdownBlock):
class MarkdownBlockQuote(MarkdownBlock):
class MarkdownList(MarkdownBlock):
class MarkdownBulletList(MarkdownList):
class MarkdownOrderedList(MarkdownList):
class MarkdownTableCellContents(Static):
class MarkdownTableContent(Widget):
class MarkdownTable(MarkdownBlock):
class MarkdownTBody(MarkdownBlock):
class MarkdownTHead(MarkdownBlock):
class MarkdownTR(MarkdownBlock):
class MarkdownTH(MarkdownBlock):
class MarkdownTD(MarkdownBlock):
class MarkdownBullet(Widget):
class MarkdownListItem(MarkdownBlock):
class MarkdownOrderedListItem(MarkdownListItem):
class MarkdownUnorderedListItem(MarkdownListItem):
class MarkdownFence(MarkdownBlock):
class Markdown(Widget):
class MarkdownTableOfContents(Widget, can_focus_children=True):
class MarkdownViewer(VerticalScroll, can_focus=False, can_focus_children=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_markdown_viewer.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_masked_input.py
-----------------------------
> """Possible messages that trigger input validation."""
  
  
  class _CharFlags(Flag):
class _CharFlags(Flag):
class _Template(Validator):
class MaskedInput(Input, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_option_list.py
-----------------------------
> """Types accepted in OptionList constructor and 
[add_options()][textual.widgets.OptionList.ads_options]."""
  
  
  class OptionListError(Exception):
class OptionListError(Exception):
class DuplicateID(OptionListError):
class OptionDoesNotExist(OptionListError):
class Option:
class _LineCache:
class OptionList(ScrollView, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_placeholder.py
-----------------------------
> """Provides a Textual placeholder widget; useful when designing an app's layout."""
  
  from __future__ import annotations
  
class InvalidPlaceholderVariant(Exception):
class Placeholder(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_pretty.py
-----------------------------
> """Provides a pretty-printing widget."""
  
  from __future__ import annotations
  
class Pretty(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_progress_bar.py
-----------------------------
> """Implements a progress bar widget."""
  
  from __future__ import annotations
  
class Bar(Widget, can_focus=False):
class PercentageStatus(Label):
class ETAStatus(Label):
class ProgressBar(Widget, can_focus=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_radio_button.py
-----------------------------
> """Provides a radio button widget."""
  
  from __future__ import annotations
  
class RadioButton(ToggleButton):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_radio_set.py
-----------------------------
> """Provides a RadioSet widget, which groups radio buttons."""
  
  from __future__ import annotations
  
class RadioSet(VerticalScroll, can_focus=True, can_focus_children=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_rich_log.py
-----------------------------
> """Provides a scrollable text-logging widget."""
  
  from __future__ import annotations
  
class DeferredRender(NamedTuple):
class RichLog(ScrollView, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_rule.py
-----------------------------
> """The valid orientations of the rule widget."""
  
  LineStyle = Literal[
      "ascii",
class InvalidRuleOrientation(Exception):
class InvalidLineStyle(Exception):
class HorizontalRuleRenderable:
class VerticalRuleRenderable:
class Rule(Widget, can_focus=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_select.py
-----------------------------
>     """Used by the `Select` widget to flag the unselected state. See 
[`Select.BLANK`][textual.widgets.Select.BLANK]."""
  
      def __repr__(self) -> str:
          return "Select.BLANK"
class NoSelection:
class InvalidSelectValueError(Exception):
class EmptySelectError(Exception):
class SelectOverlay(OptionList):
class SelectCurrent(Horizontal):
class Select(Generic[SelectType], Vertical, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_selection_list.py
-----------------------------
> """Provides a selection list widget, allowing one or more items to be selected."""
  
  from __future__ import annotations
  
class SelectionError(TypeError):
class Selection(Generic[SelectionType], Option):
class SelectionList(Generic[SelectionType], OptionList):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_sparkline.py
-----------------------------
>     """Callable that returns the built-in max to initialise a reactive."""
      return max
  
  
def _max_factory() -> Callable[[Sequence[float]], float]:
class Sparkline(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_static.py
-----------------------------
>     """A widget to display simple static content, or use as a base class for more complex 
widgets.
  
      Args:
          content: A Content object, Rich renderable, or string containing console markup.
class Static(Widget, inherit_bindings=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_switch.py
-----------------------------
>     """A switch widget that represents a boolean value.
  
      Can be toggled by clicking on it or through its 
[bindings][textual.widgets.Switch.BINDINGS].
  
class Switch(Widget, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_tab.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_tabbed_content.py
-----------------------------
>     """A Tab with an associated content id."""
  
      _PREFIX: Final[str] = "--content-tab-"
class ContentTab(Tab):
class ContentTabs(Tabs):
class TabPane(Widget):
class TabbedContent(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_tabs.py
-----------------------------
>     """The animated underline beneath tabs."""
  
class Underline(Widget):
class Tab(Static):
class Tabs(Widget, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_tab_pane.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_text_area.py
-----------------------------
> """A tuple representing a syntax highlight within one line."""
  
  BUILTIN_LANGUAGES = [
      "python",
class ThemeDoesNotExist(Exception):
class LanguageDoesNotExist(Exception):
class TextAreaLanguage:
class TextArea(ScrollView):
def build_byte_to_codepoint_dict(data: bytes) -> dict[int, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_toast.py
-----------------------------
> """Widgets for showing notification messages in toasts."""
  
  from __future__ import annotations
  
class ToastHolder(Container, inherit_css=False):
class Toast(Static, inherit_css=False):
class ToastRack(Container, inherit_css=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_toggle_button.py
-----------------------------
> """Provides the base code and implementations of toggle widgets.
  
  In particular it provides `Checkbox`, `RadioButton` and `RadioSet`.
class ToggleButton(Static, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_tooltip.py
-----------------------------
>     DEFAULT_CSS = """
      Tooltip {
          layer: _tooltips;
          margin: 1 0;
class Tooltip(Static, inherit_css=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_tree.py
-----------------------------
> """Provides a tree widget."""
  
  from __future__ import annotations
  
class RemoveRootError(Exception):
class UnknownNodeID(Exception):
class AddNodeError(Exception):
class _TreeLine(Generic[TreeDataType]):
class TreeNodes(ImmutableSequenceView["TreeNode[TreeDataType]"]):
class TreeNode(Generic[TreeDataType]):
class Tree(Generic[TreeDataType], ScrollView, can_focus=True):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\_welcome.py
-----------------------------
> """Provides a Textual welcome widget."""
  
  from rich.markdown import Markdown
  
class Welcome(Static):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widgets\__init__.py
-----------------------------
def __getattr__(widget_class: str) -> type[Widget]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\actions.py
-----------------------------
> """An action is its name and the arbitrary tuple of its arguments."""
  
  
  class SkipAction(Exception):
class SkipAction(Exception):
class ActionError(Exception):
def parse(action: str) -> ActionParseResult:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\app.py
-----------------------------
> """
  
  Here you will find the [App][textual.app.App] class, which is the base class for Textual 
apps.
  
class SystemCommand(NamedTuple):
def get_system_commands_provider() -> type[SystemCommandsProvider]:
class AppError(Exception):
class ActionError(Exception):
class ScreenError(Exception):
class ScreenStackError(ScreenError):
class ModeError(Exception):
class InvalidModeError(ModeError):
class UnknownModeError(ModeError):
class ActiveModeError(ModeError):
class SuspendNotSupported(Exception):
class InvalidThemeError(Exception):
class _NullFile:
class _PrintCapture:
class App(Generic[ReturnType], DOMNode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\await_complete.py
-----------------------------
>     """An 'optionally-awaitable' object which runs one or more coroutines (or other 
awaitables) concurrently."""
  
      def __init__(
          self, *awaitables: Awaitable, pre_await: CallbackType | None = None
class AwaitComplete:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\await_remove.py
-----------------------------
> """
  An *optionally* awaitable object returned by methods that remove widgets.
class AwaitRemove:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\binding.py
-----------------------------
> """
  
  This module contains the `Binding` class and related objects.
  
class BindingError(Exception):
class NoBinding(Exception):
class InvalidBinding(Exception):
class Binding:
class ActiveBinding(NamedTuple):
class BindingsMap:
class KeymapApplyResult(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\box_model.py
-----------------------------
>     """The result of `get_box_model`."""
  
      # Content + padding + border
      width: Fraction
class BoxModel(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\cache.py
-----------------------------
> """
  
  Cache classes are dict-like containers used to avoid recalculating expensive operations 
such as rendering.
  
class LRUCache(Generic[CacheKey, CacheValue]):
class FIFOCache(Generic[CacheKey, CacheValue]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\canvas.py
-----------------------------
> """
  A Canvas class used to render keylines.
  
  !!! note
class _Span(NamedTuple):
class Primitive:
class HorizontalLine(Primitive):
class VerticalLine(Primitive):
class Rectangle(Primitive):
class Canvas:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\case.py
-----------------------------
>     """Convert name from CamelCase to snake_case.
  
      Args:
          name: A symbol name, such as a class name.
def camel_to_snake(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\clock.py
-----------------------------
>     """An object to get relative time.
  
      The `time` attribute of clock will return the time in seconds since the
      Clock was created or reset.
class Clock:
class MockClock(Clock):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\color.py
-----------------------------
> """
  This module contains a powerful [Color][textual.color.Color] class which Textual uses to 
manipulate colors.
  
  ## Named colors
class HSL(NamedTuple):
class HSV(NamedTuple):
class Lab(NamedTuple):
class ColorParseError(Exception):
class Color(NamedTuple):
class Gradient:
def rgb_to_lab(rgb: Color) -> Lab:
def lab_to_rgb(lab: Lab, alpha: float = 1.0) -> Color:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\command.py
-----------------------------
> """
  This module contains classes for working with Textual's command palette.
  
  See the guide on the [Command Palette](../guide/command_palette.md) for full details.
class Hit:
class DiscoveryHit:
class Provider(ABC):
class SimpleCommand(NamedTuple):
class SimpleProvider(Provider):
class Command(Option):
class CommandList(OptionList, can_focus=False):
class SearchIcon(Static, inherit_css=False):
class CommandInput(Input):
class CommandPalette(SystemModalScreen[None]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\compose.py
-----------------------------
>     """Compose child widgets from a generator in the same way as 
[compose][textual.widget.Widget.compose].
  
      Example:
          ```python
def compose(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\constants.py
-----------------------------
> """
  This module contains constants, which may be set in environment variables.
def _get_environ_bool(name: str) -> bool:
def _get_environ_int(
def _get_environ_port(name: str, default: int) -> int:
def _is_valid_animation_level(value: str) -> TypeGuard[AnimationLevel]:
def _get_textual_animations() -> AnimationLevel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\containers.py
-----------------------------
> """
  Container widgets for quick styling.
  
  With the exception of `Center` and `Middle` containers will fill all of the space in the 
parent widget.
class Container(Widget):
class ScrollableContainer(Widget, can_focus=True):
class Vertical(Widget):
class VerticalGroup(Widget):
class VerticalScroll(ScrollableContainer):
class Horizontal(Widget):
class HorizontalGroup(Widget):
class HorizontalScroll(ScrollableContainer):
class Center(Widget):
class Right(Widget):
class Middle(Widget):
class CenterMiddle(Widget):
class Grid(Widget):
class ItemGrid(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\content.py
-----------------------------
> """
  Content is a container for text, with spans marked up with color / style.
  It is equivalent to Rich's Text object, with support for more of Textual features.
  
def _strip_control_codes(
class Span(NamedTuple):
class Content(Visual):
class _FormattedLine:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\coordinate.py
-----------------------------
> """
  A class to store a coordinate, used by the [DataTable][textual.widgets.DataTable].
class Coordinate(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\design.py
-----------------------------
>     """Defines a standard set of colors and variations for building a UI.
  
      Primary is the main theme color
      Secondary is a second theme color
class ColorSystem:
def show_design(light: ColorSystem, dark: ColorSystem) -> Table:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\dom.py
-----------------------------
> """
  The module contains `DOMNode`, the base class for any object within the Textual Document 
Object Model,
  which includes all Widgets, Screens, and Apps.
  
class BadIdentifier(Exception):
def check_identifiers(description: str, *names: str) -> None:
class DOMError(Exception):
class NoScreen(DOMError):
class _ClassesDescriptor:
class DOMNode(MessagePump):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\driver.py
-----------------------------
>     """A base class for drivers."""
  
      def __init__(
          self,
class Driver(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\errors.py
-----------------------------
> """
  General exception classes.
  
class TextualError(Exception):
class NoWidget(TextualError):
class RenderError(TextualError):
class DuplicateKeyHandlers(TextualError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\eta.py
-----------------------------
>     """Calculate speed and estimate time to arrival."""
  
      def __init__(
          self, estimation_period: float = 60, extrapolate_period: float = 30
class ETA:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\events.py
-----------------------------
> """
  
  Builtin events sent by Textual.
  
class Event(Message):
class Callback(Event, bubble=False, verbose=True):
class CursorPosition(Event, bubble=False):
class Load(Event, bubble=False):
class Idle(Event, bubble=False):
class Action(Event):
class Resize(Event, bubble=False):
class Compose(Event, bubble=False, verbose=True):
class Mount(Event, bubble=False, verbose=False):
class Unmount(Event, bubble=False, verbose=False):
class Show(Event, bubble=False):
class Hide(Event, bubble=False):
class Ready(Event, bubble=False):
class MouseCapture(Event, bubble=False):
class MouseRelease(Event, bubble=False):
class InputEvent(Event):
class Key(InputEvent):
def _key_to_identifier(key: str) -> str:
class MouseEvent(InputEvent, bubble=True):
class MouseMove(MouseEvent, bubble=True, verbose=True):
class MouseDown(MouseEvent, bubble=True, verbose=True):
class MouseUp(MouseEvent, bubble=True, verbose=True):
class MouseScrollDown(MouseEvent, bubble=True, verbose=True):
class MouseScrollUp(MouseEvent, bubble=True, verbose=True):
class MouseScrollRight(MouseEvent, bubble=True, verbose=True):
class MouseScrollLeft(MouseEvent, bubble=True, verbose=True):
class Click(MouseEvent, bubble=True):
class Timer(Event, bubble=False, verbose=True):
class Enter(Event, bubble=True, verbose=True):
class Leave(Event, bubble=True, verbose=True):
class Focus(Event, bubble=False):
class Blur(Event, bubble=False):
class AppFocus(Event, bubble=False):
class AppBlur(Event, bubble=False):
class DescendantFocus(Event, bubble=True, verbose=True):
class DescendantBlur(Event, bubble=True, verbose=True):
class Paste(Event, bubble=True):
class ScreenResume(Event, bubble=False):
class ScreenSuspend(Event, bubble=False):
class Print(Event, bubble=False):
class DeliveryComplete(Event, bubble=False):
class DeliveryFailed(Event, bubble=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\expand_tabs.py
-----------------------------
>     """Splits a string line into tuples (str, int).
  
      Each tuple represents a section of the line which precedes a tab character.
      The string is the string text that appears before the tab character (excluding the tab).
def get_tab_widths(line: str, tab_size: int = 4) -> list[tuple[str, int]]:
def expand_tabs_inline(line: str, tab_size: int = 4) -> str:
def expand_text_tabs_from_widths(line: Text, tab_widths: list[int]) -> Text:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\features.py
-----------------------------
>     """Parse features env var
  
      Args:
          features: Comma separated feature flags
def parse_features(features: str) -> frozenset[FeatureFlag]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\file_monitor.py
-----------------------------
>     """Monitors files for changes and invokes a callback when it does."""
  
      _paths: set[Path]
  
class FileMonitor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\filter.py
-----------------------------
> """Filter classes.
  
  !!! note
  
class LineFilter(ABC):
def monochrome_style(style: Style) -> Style:
class Monochrome(LineFilter):
class NoColor(LineFilter):
def dim_color(
def dim_style(style: Style, background: Color, factor: float) -> Style:
class DimFilter(LineFilter):
class ANSIToTruecolor(LineFilter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\fuzzy.py
-----------------------------
> """
  Fuzzy matcher.
  
  This class is used by the [command palette](/guide/command_palette) to match search terms.
class FuzzySearch:
class Matcher:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\geometry.py
-----------------------------
> """
  
  Functions and classes to manage terminal geometry (anything involving coordinates or 
dimensions).
def clamp(value: T, minimum: T, maximum: T) -> T:
class Offset(NamedTuple):
class Size(NamedTuple):
class Region(NamedTuple):
class Spacing(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\getters.py
-----------------------------
> """
  Descriptors to define properties on your widget, screen, or App.
  
class app(Generic[AppType]):
class query_one(Generic[QueryType]):
class child_by_id(Generic[QueryType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\highlight.py
-----------------------------
>     """Contains the style definition for user with the highlight method."""
  
      STYLES: dict[TokenType, str] = {
          Token.Comment: "$text 60%",
class HighlightTheme:
def guess_language(code: str, path: str) -> str:
def highlight(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\keys.py
-----------------------------
>     """
      List of keys for use in key bindings.
  
      Note that this is an "StrEnum", all values can be compared against
class Keys(str, Enum):  # type: ignore[no-redef]
def _get_unicode_name_from_key(key: str) -> str:
def _get_key_aliases(key: str) -> list[str]:
def format_key(key: str) -> str:
def key_to_character(key: str) -> str | None:
def _character_to_key(character: str) -> str:
def _normalize_key_list(keys: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\layout.py
-----------------------------
>     """Result of [Layout.arrange][textual.layout.Layout.arrange]."""
  
      placements: list[WidgetPlacement]
class DockArrangeResult:
class WidgetPlacement(NamedTuple):
class Layout(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\lazy.py
-----------------------------
> """
  Tools for lazy loading widgets.
class Lazy(Widget):
class Reveal(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\logging.py
-----------------------------
> """
  A Textual Logging handler.
  
  If there is an active Textual app, then log messages will go via the app (and logged via 
textual console).
class TextualHandler(Handler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\map_geometry.py
-----------------------------
>     """Defines the absolute location of a Widget."""
  
      region: Region
class MapGeometry(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\markup.py
-----------------------------
> """
  Utilities related to content markup.
  
class MarkupError(Exception):
class MarkupTokenizer(TokenizerState):
class StyleTokenizer(TokenizerState):
def escape(
def parse_style(style: str, variables: dict[str, str] | None = None) -> Style:
def to_content(
def _to_content(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\message.py
-----------------------------
> """
  
  The base class for all messages (including events).
class Message:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\messages.py
-----------------------------
>     """Requests message pump to close."""
  
  
  @rich.repr.auto
class CloseMessages(Message, verbose=True):
class Prune(Message, verbose=True, bubble=False):
class ExitApp(Message, verbose=True):
class Update(Message, verbose=True):
class Layout(Message, verbose=True):
class UpdateScroll(Message, verbose=True):
class InvokeLater(Message, verbose=True, bubble=False):
class ScrollToRegion(Message, bubble=False):
class Prompt(Message, no_dispatch=True):
class TerminalSupportsSynchronizedOutput(Message):
class InBandWindowResize(Message):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\message_pump.py
-----------------------------
> """
  
  A `MessagePump` is a base class for any object which processes messages, which includes 
Widget, Screen, and App.
  
class CallbackError(Exception):
class MessagePumpClosed(Exception):
class _MessagePumpMeta(type):
class MessagePump(metaclass=_MessagePumpMeta):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\notifications.py
-----------------------------
> """Provides classes for holding and managing notifications."""
  
  from __future__ import annotations
  
class Notify(Message, bubble=False):
class Notification:
class Notifications:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\pad.py
-----------------------------
>     """Rich renderable to add padding on the left and right of a renderable.
  
      Note that unlike Rich's Padding class this align each line independently.
  
class HorizontalPad:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\pilot.py
-----------------------------
> """
  
  This module contains the `Pilot` class used by [App.run_test][textual.app.App.run_test] to 
programmatically operate an app.
  
def _get_mouse_message_arguments(
class OutOfBounds(Exception):
class WaitForScreenTimeout(Exception):
class Pilot(Generic[ReturnType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\reactive.py
-----------------------------
> """
  
  This module contains the `Reactive` class which implements [reactivity](/guide/reactivity/).
class _Mutated:
class ReactiveError(Exception):
class TooManyComputesError(ReactiveError):
class Initialize(Generic[ReactiveType]):
def invoke_watcher(
class Reactive(Generic[ReactiveType]):
class reactive(Reactive[ReactiveType]):
class var(Reactive[ReactiveType]):
def _watch(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\render.py
-----------------------------
>     """Measure a rich renderable.
  
      Args:
          console: A console object.
def measure(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\rlock.py
-----------------------------
>     """A re-entrant asyncio lock."""
  
      def __init__(self) -> None:
          self._owner: Task | None = None
class RLock:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\screen.py
-----------------------------
> """
  
  This module contains the `Screen` class and related objects.
  
class ResultCallback(Generic[ScreenResultType]):
class Screen(Generic[ScreenResultType], Widget):
class ModalScreen(Screen[ScreenResultType]):
class SystemModalScreen(ModalScreen[ScreenResultType], inherit_css=False):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\scrollbar.py
-----------------------------
> """
  Contains the widgets that manage Textual scrollbars.
  
  !!! note
class ScrollMessage(Message, bubble=False):
class ScrollUp(ScrollMessage, verbose=True):
class ScrollDown(ScrollMessage, verbose=True):
class ScrollLeft(ScrollMessage, verbose=True):
class ScrollRight(ScrollMessage, verbose=True):
class ScrollTo(ScrollMessage, verbose=True):
class ScrollBarRender:
class ScrollBar(Widget):
class ScrollBarCorner(Widget):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\scroll_view.py
-----------------------------
> """
  `ScrollView` is a base class for [Line API](/guide/widgets#line-api) widgets.
class ScrollView(ScrollableContainer):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\selection.py
-----------------------------
>     """A selected range of lines."""
  
      start: Offset | None
class Selection(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\signal.py
-----------------------------
> """
  Signals are a simple pub-sub mechanism.
  
  DOMNodes can subscribe to a signal, which will invoke a callback when the signal is 
published.
class SignalError(Exception):
class Signal(Generic[SignalT]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\strip.py
-----------------------------
> """
  This module contains the `Strip` class and related objects.
  
  A `Strip` contains the result of rendering a widget.
def get_line_length(segments: Iterable[Segment]) -> int:
class StripRenderable:
class Strip:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\style.py
-----------------------------
> """
  The Style class contains all the information needed to generate styled terminal output.
  
  You won't often need to create Style objects directly, if you are using 
[Content][textual.content.Content] for output.
class Style:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\suggester.py
-----------------------------
> """
  
  Contains the `Suggester` class, used by the [Input](/widgets/input) widget.
  
class SuggestionReady(Message):
class Suggester(ABC):
class SuggestFromList(Suggester):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\suggestions.py
-----------------------------
>     """
      Returns a close match of `word` amongst `possible_words`.
  
      Args:
def get_suggestion(word: str, possible_words: Sequence[str]) -> str | None:
def get_suggestions(word: str, possible_words: Sequence[str], count: int) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\system_commands.py
-----------------------------
> """
  
  This module contains `SystemCommands`, a command palette command provider for Textual 
system commands.
  
class SystemCommandsProvider(Provider):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\theme.py
-----------------------------
>     """Defines a theme for the application."""
  
      name: str
class Theme:
class ThemeProvider(Provider):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\timer.py
-----------------------------
> """
  
  Contains the `Timer` class.
  Timer objects are created by [set_interval][textual.message_pump.MessagePump.set_interval] 
or
class EventTargetGone(Exception):
class Timer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\types.py
-----------------------------
> """
  Export some objects that are used by Textual and that help document other features.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\validation.py
-----------------------------
> """
  
  This module provides a number of classes for validating input.
  
class ValidationResult:
class Failure:
class Validator(ABC):
class Regex(Validator):
class Number(Validator):
class Integer(Number):
class Length(Validator):
class Function(Validator):
class URL(Validator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\visual.py
-----------------------------
>     """Check if the given object is a Visual or supports the Visual protocol."""
      return isinstance(obj, Visual) or hasattr(obj, "textualize")
  
  
def is_visual(obj: object) -> bool:
class RenderOptions:
class SupportsVisual(Protocol):
class VisualError(Exception):
def visualize(widget: Widget, obj: object, markup: bool = True) -> Visual:
class Visual(ABC):
class RichVisual(Visual):
class Padding(Visual):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\walk.py
-----------------------------
> """
  Functions for *walking* the DOM.
  
  !!! note
def walk_depth_first(
def walk_breadth_first(
def walk_breadth_search_id(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\widget.py
-----------------------------
> """
  This module contains the `Widget` class, the base class for all widgets.
  
class AwaitMount:
class _Styled:
class _RenderCache(NamedTuple):
class WidgetError(Exception):
class MountError(WidgetError):
class PseudoClasses(NamedTuple):
class _BorderTitle:
class BadWidgetName(Exception):
class Widget(DOMNode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\worker.py
-----------------------------
> """
  This module contains the `Worker` class and related objects.
  
  See the guide for how to use [workers](/guide/workers).
class NoActiveWorker(Exception):
class WorkerError(Exception):
class WorkerFailed(WorkerError):
class DeadlockError(WorkerError):
class WorkerCancelled(WorkerError):
def get_current_worker() -> Worker:
class WorkerState(enum.Enum):
class _ReprText:
class Worker(Generic[ResultType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\worker_manager.py
-----------------------------
> """
  Contains `WorkerManager`, a class to manage [workers](/guide/workers) for an app.
  
  You access this object via [App.workers][textual.app.App.workers] or 
[Widget.workers][textual.dom.DOMNode.workers].
class WorkerManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_animator.py
-----------------------------
>     """Animation keys are the id of the object and the attribute being animated."""
  
  EasingFunction = Callable[[float], float]
class AnimationError(Exception):
class Animatable(Protocol):
class Animation(ABC):
class SimpleAnimation(Animation):
class BoundAnimator:
class Animator:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_ansi_sequences.py
-----------------------------
>     """Class used to mark that a sequence should be ignored."""
  
  
  IGNORE_SEQUENCE: Final[IgnoredSequence] = IgnoredSequence()
class IgnoredSequence:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_ansi_theme.py
-----------------------------
>     """Define an RGB color.
  
      This exists mainly so that a VSCode extension can render the colors inline.
  
def rgb(red: int, green: int, blue: int) -> tuple[int, int, int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_arrange.py
-----------------------------
>     """Organize widgets into layers.
  
      Args:
          widgets: The widgets.
def _build_layers(widgets: Iterable[Widget]) -> Mapping[str, Sequence[Widget]]:
def arrange(
def _arrange_dock_widgets(
def _arrange_split_widgets(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_binary_encode.py
-----------------------------
> """
  An encoding / decoding format suitable for serializing data structures to binary.
  
  This is based on https://en.wikipedia.org/wiki/Bencode with some extensions.
class DecodeError(Exception):
def dump(data: object) -> bytes:
def load(encoded: bytes) -> object:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_border.py
-----------------------------
>     """Get segments used to render a box.
  
      Args:
          name: Name of the box type.
def get_box(
def render_border_label(
def render_row(
def normalize_border_value(value: BorderValue) -> BorderValue:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_box_drawing.py
-----------------------------
> """
  Box drawing utilities for Canvas.
  
  The box drawing characters have zero to four lines radiating from the center of the glyph.
def combine_quads(box1: Quad, box2: Quad) -> Quad:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_callback.py
-----------------------------
>     """Count the number of parameters in a callable"""
      try:
          return func._param_count
      except AttributeError:
def count_parameters(func: Callable) -> int:
def _count_parameters(func: Callable) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_cells.py
-----------------------------
>     """Retrieve the column index corresponding to the given cell width.
  
      Args:
          line: The line of text to search within.
def cell_width_to_column_index(line: str, cell_width: int, tab_width: int) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_color_constants.py
-----------------------------
> """The names of ANSI colors (prefixed with ansi_ in CSS)."""
  
  COLOR_NAME_TO_RGB: dict[str, tuple[int, int, int] | tuple[int, int, int, int]] = {
      # Let's start with a specific pseudo-color::

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_compat.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_compositor.py
-----------------------------
> """
  
  The compositor handles combining widgets into a single screen (i.e. compositing).
  
class ReflowResult(NamedTuple):
class CompositorUpdate:
class LayoutUpdate(CompositorUpdate):
class InlineUpdate(CompositorUpdate):
class ChopsUpdate(CompositorUpdate):
class Compositor:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_context.py
-----------------------------
>     """Runtime error raised if we try to retrieve the active app when there is none."""
  
  
  active_app: ContextVar["App[Any]"] = ContextVar("active_app")
class NoActiveAppError(RuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_debug.py
-----------------------------
> """
  Functions related to debugging.
def get_caller_file_and_line() -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_dispatch_key.py
-----------------------------
>     """Dispatch a key event to method.
  
      This function will call the method named 'key_<event.key>' on a node if it exists.
      Some keys have aliases. The first alias found will be invoked if it exists.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_doc.py
-----------------------------
>     """A superfences formatter to insert an SVG screenshot."""
  
      try:
          cmd: list[str] = shlex.split(attrs["path"])
def format_svg(source, language, css_class, options, md, attrs, **kwargs) -> str:
def take_svg_screenshot(
def rich(source, language, css_class, options, md, attrs, **kwargs) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_duration.py
-----------------------------
>     """
      Exception indicating a general issue with a CSS duration.
class DurationError(Exception):
class DurationParseError(DurationError):
def _duration_as_seconds(duration: str) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_easing.py
-----------------------------
> """
  Define a series of easing functions for more natural-looking animations.
  Taken from https://easings.net/ and translated from JavaScript.
def _in_out_expo(x: float) -> float:
def _in_out_circ(x: float) -> float:
def _in_out_back(x: float) -> float:
def _in_elastic(x: float) -> float:
def _in_out_elastic(x: float) -> float:
def _out_elastic(x: float) -> float:
def _out_bounce(x: float) -> float:
def _in_bounce(x: float) -> float:
def _in_out_bounce(x: float) -> float:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_event_broker.py
-----------------------------
>     """Raised when handler isn't found in the meta."""
  
  
  class HandlerArguments(NamedTuple):
class NoHandler(Exception):
class HandlerArguments(NamedTuple):
def extract_handler_actions(event_name: str, meta: dict[str, Any]) -> HandlerArguments:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_extrema.py
-----------------------------
>     """Specifies minimum and maximum dimensions."""
  
      min_width: Fraction | None = None
      max_width: Fraction | None = None
class Extrema(NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_files.py
-----------------------------
>     """Generate a filename which includes the current date and time.
  
      Useful for ensuring a degree of uniqueness when saving files.
  
def generate_datetime_filename(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_immutable_sequence_view.py
-----------------------------
> """Provides an immutable sequence view class."""
  
  from __future__ import annotations
  
class ImmutableSequenceView(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_import_app.py
-----------------------------
>     """Does the given file look like it's run with Python?
  
      Args:
          candidate: The candidate file to check.
class AppFail(Exception):
def shebang_python(candidate: Path) -> bool:
def import_app(import_name: str) -> App:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_keyboard_protocol.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_layout_resolve.py
-----------------------------
>     """Any object that defines an edge (such as Layout)."""
  
      # Size of edge in cells, or None for no fixed size
      size: int | None
class EdgeProtocol(Protocol):
def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_line_split.py
-----------------------------
>     r"""
      Splits an arbitrary string into a list of tuples, where each tuple contains a line of 
text and its line ending.
  
      Args:
def line_split(input_string: str) -> list[tuple[str, str]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_log.py
-----------------------------
>     """A log group is a classification of the log message (*not* a level)."""
  
      UNDEFINED = 0  # Mainly for testing
      EVENT = 1
class LogGroup(Enum):
class LogVerbosity(Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_loop.py
-----------------------------
>     """Iterate and generate a tuple with a flag for first value."""
      iter_values = iter(values)
      try:
          value = next(iter_values)
def loop_first(values: Iterable[T]) -> Iterable[tuple[bool, T]]:
def loop_last(values: Iterable[T]) -> Iterable[tuple[bool, T]]:
def loop_first_last(values: Iterable[T]) -> Iterable[tuple[bool, bool, T]]:
def loop_from_index(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_markup_playground.py
-----------------------------
>     CSS = """
      Screen {        
          layout: vertical;
          #editor {            
class MarkupPlayground(App):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_node_list.py
-----------------------------
>     """Raised when attempting to add a widget with an id that already exists."""
  
  
  class ReadOnlyError(AttributeError):
class DuplicateIds(Exception):
class ReadOnlyError(AttributeError):
class NodeList(Sequence["Widget"]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_on.py
-----------------------------
>     """Errors related to the `on` decorator.
  
      Typically raised at import time as an early warning system.
class OnDecoratorError(Exception):
class OnNoWidget(Exception):
def on(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_opacity.py
-----------------------------
>     """Takes an iterable of foreground Segments and blends them into the supplied
      background color, yielding copies of the Segments with blended foreground and
      background colors applied.
  
def _apply_opacity(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_parser.py
-----------------------------
>     """Base class for parse related errors."""
  
  
  class ParseEOF(ParseError):
class ParseError(Exception):
class ParseEOF(ParseError):
class ParseTimeout(ParseError):
class Read1(NamedTuple):
class Peek1(NamedTuple):
class Parser(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_partition.py
-----------------------------
>     """Partition a sequence into two list from a given predicate. The first list will 
contain
      the values where the predicate is False, the second list will contain the remaining 
values.
  
      Args:
def partition(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_path.py
-----------------------------
> """Valid ways of specifying paths to CSS files."""
  
  
  class CSSPathError(Exception):
class CSSPathError(Exception):
def _css_path_type_as_list(css_path: CSSPathType) -> list[PurePath]:
def _make_path_object_relative(path: str | PurePath, obj: object) -> Path:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_profile.py
-----------------------------
> """
  Timer context manager, only used in debug.
def timer(subject: str = "time") -> Generator[None, None, None]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_queue.py
-----------------------------
>     """A cut-down version of asyncio.Queue
  
      This has just enough functionality to run the message pumps.
  
class Queue(Generic[QueueType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_resolve.py
-----------------------------
>     """Resolve a list of dimensions.
  
      Args:
          dimensions: Scalars for column / row sizes.
def resolve(
def resolve_fraction_unit(
def resolve_box_models(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_segment_tools.py
-----------------------------
> """
  Tools for processing Segments, or lists of Segments.
def make_blank(width, style: Style) -> Segment:
class NoCellPositionForIndex(Exception):
def index_to_cell_position(segments: Iterable[Segment], index: int) -> int:
def line_crop(
def line_trim(segments: list[Segment], start: bool, end: bool) -> list[Segment]:
def line_pad(
def align_lines(
def apply_hatch(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_sleep.py
-----------------------------
class Sleeper(Thread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_slug.py
-----------------------------
> """Provides a utility function and class for creating Markdown-friendly slugs.
  
  The approach to creating slugs is designed to be as close to
  GitHub-flavoured Markdown as possible. However, because there doesn't appear
def slug(text: str) -> str:
class TrackedSlugs:
def slug_for_tcss_id(text: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_spatial_map.py
-----------------------------
>     """A spatial map allows for data to be associated with rectangular regions
      in Euclidean space, and efficiently queried.
  
      When the SpatialMap is populated, a reference to each value is placed into one or
class SpatialMap(Generic[ValueType]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_styles_cache.py
-----------------------------
>     """Responsible for rendering CSS Styles and keeping a cache of rendered lines.
  
      The render method applies border, outline, and padding set in the Styles object to 
widget content.
  
class StylesCache:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_text_area_theme.py
-----------------------------
>     """A theme for the `TextArea` widget.
  
      Allows theming the general widget (gutter, selections, cursor, and so on) and
      mapping of tree-sitter tokens to Rich styles.
class TextAreaTheme:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_time.py
-----------------------------
>         """Sleep for a given number of seconds.
  
          Args:
              secs: Number of seconds to sleep for.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_tree_sitter.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_two_way_dict.py
-----------------------------
>     """
      A two-way mapping offering O(1) access in both directions.
  
      Wraps two dictionaries and uses them to provide efficient access to
class TwoWayDict(Generic[Key, Value]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_types.py
-----------------------------
>     """Protocol that must be followed by objects that can receive messages."""
  
      async def _post_message(self, message: "Message") -> bool: ...
  
class MessageTarget(Protocol):
class EventTarget(Protocol):
class UnusedParameter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_wait.py
-----------------------------
>     """Wait until the process isn't working very hard.
  
      This will compare wall clock time with process time. If the process time
      is not advancing at the same rate as wall clock time it means the process is

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_widget_navigation.py
-----------------------------
> """
  Utilities to move index-based selections backward/forward.
  
  These utilities concern themselves with selections where not all options are available,
class Disableable(Protocol):
def get_directed_distance(
def find_first_enabled(
def find_last_enabled(candidates: Sequence[Disableable]) -> int | None:
def find_next_enabled(
def find_next_enabled_no_wrap(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_win_sleep.py
-----------------------------
> """
  A version of `time.sleep` that is more accurate than the standard library (even on Python 
3.11).
  
  This should only be imported on Windows.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_work_decorator.py
-----------------------------
> """
  A decorator used to create [workers](/guide/workers).
class WorkerDeclarationError(Exception):
def work(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_wrap.py
-----------------------------
>     """Yields each "chunk" from the text as a tuple containing (start_index, end_index, 
chunk_content).
      A "chunk" in this context refers to a word and any whitespace around it.
  
      Args:
def chunks(text: str) -> Iterable[tuple[int, int, str]]:
def compute_wrap_offsets(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\_xterm_parser.py
-----------------------------
> """Sequence received when a bracketed paste event starts."""
  BRACKETED_PASTE_END: Final[str] = "\x1b[201~"
class XTermParser(Parser[Message]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\__init__.py
-----------------------------
> """
  The root Textual module.
  
  Exposes some commonly used symbols.
class LoggerError(Exception):
class Logger:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\textual\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\toml\decoder.py
-----------------------------
>     """Base toml Exception / Error."""
  
      def __init__(self, msg, doc, pos):
          lineno = doc.count('\n', 0, pos) + 1
def _detect_pathlib_path(p):
def _ispath(p):
def _getpath(p):
class TomlDecodeError(ValueError):
class CommentValue(object):
def _strictly_valid_num(n):
def load(f, _dict=dict, decoder=None):
def loads(s, _dict=dict, decoder=None):
def _load_date(val):
def _load_unicode_escapes(v, hexbytes, prefix):
def _unescape(v):
class InlineTableDict(object):
class TomlDecoder(object):
class TomlPreserveCommentDecoder(TomlDecoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\toml\encoder.py
-----------------------------
>     """Writes out dict as toml to a file
  
      Args:
          o: Object to dump into toml
def dump(o, f, encoder=None):
def dumps(o, encoder=None):
def _dump_str(v):
def _dump_float(v):
def _dump_time(v):
class TomlEncoder(object):
class TomlPreserveInlineDictEncoder(TomlEncoder):
class TomlArraySeparatorEncoder(TomlEncoder):
class TomlNumpyEncoder(TomlEncoder):
class TomlPreserveCommentEncoder(TomlEncoder):
class TomlPathlibEncoder(TomlEncoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\toml\ordered.py
-----------------------------
class TomlOrderedDecoder(TomlDecoder):
class TomlOrderedEncoder(TomlEncoder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\toml\tz.py
-----------------------------
class TomlTz(tzinfo):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\toml\__init__.py
-----------------------------
> """Python module which parses and emits TOML.
  
  Released under the MIT license.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\platform\asyncio.py
-----------------------------
> """Bridges between the `asyncio` module and Tornado IOLoop.
  
  .. versionadded:: 3.2
  
class _HasFileno(Protocol):
def _atexit_callback() -> None:
class BaseAsyncIOLoop(IOLoop):
class AsyncIOMainLoop(BaseAsyncIOLoop):
class AsyncIOLoop(BaseAsyncIOLoop):
def to_tornado_future(asyncio_future: asyncio.Future) -> asyncio.Future:
def to_asyncio_future(tornado_future: asyncio.Future) -> asyncio.Future:
def __getattr__(name: str) -> typing.Any:
class SelectorThread:
class AddThreadSelectorEventLoop(asyncio.AbstractEventLoop):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\platform\caresresolver.py
-----------------------------
>     """Name resolver based on the c-ares library.
  
      This is a non-blocking and non-threaded resolver.  It may not produce the
      same results as the system resolver, but can be used for non-blocking
class CaresResolver(Resolver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\platform\twisted.py
-----------------------------
> """Bridges between the Twisted package and Tornado."""
  
  import sys
  
def install() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\platform\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\asyncio_test.py
-----------------------------
>             """Get the event loop. Close it if one is returned.
  
              Returns the (closed) event loop. This is a silly thing
              to do and leaves the thread in a broken state, but it's
class AsyncIOLoopTest(AsyncTestCase):
class LeakTest(unittest.TestCase):
class SelectorThreadLeakTest(unittest.TestCase):
class AnyThreadEventLoopPolicyTest(unittest.TestCase):
class SelectorThreadContextvarsTest(AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\auth_test.py
-----------------------------
>     """Replaces OAuth1ClientLoginCoroutineHandler's get() with a coroutine."""
  
      @gen.coroutine
      def get(self):
class OpenIdClientLoginHandler(RequestHandler, OpenIdMixin):
class OpenIdServerAuthenticateHandler(RequestHandler):
class OAuth1ClientLoginHandler(RequestHandler, OAuthMixin):
class OAuth1ClientLoginCoroutineHandler(OAuth1ClientLoginHandler):
class OAuth1ClientRequestParametersHandler(RequestHandler, OAuthMixin):
class OAuth1ServerRequestTokenHandler(RequestHandler):
class OAuth1ServerAccessTokenHandler(RequestHandler):
class OAuth2ClientLoginHandler(RequestHandler, OAuth2Mixin):
class FacebookClientLoginHandler(RequestHandler, FacebookGraphMixin):
class FacebookServerAccessTokenHandler(RequestHandler):
class FacebookServerMeHandler(RequestHandler):
class TwitterClientHandler(RequestHandler, TwitterMixin):
class TwitterClientLoginHandler(TwitterClientHandler):
class TwitterClientAuthenticateHandler(TwitterClientHandler):
class TwitterClientLoginGenCoroutineHandler(TwitterClientHandler):
class TwitterClientShowUserHandler(TwitterClientHandler):
class TwitterServerAccessTokenHandler(RequestHandler):
class TwitterServerShowUserHandler(RequestHandler):
class TwitterServerVerifyCredentialsHandler(RequestHandler):
class AuthTest(AsyncHTTPTestCase):
class GoogleLoginHandler(RequestHandler, GoogleOAuth2Mixin):
class GoogleOAuth2AuthorizeHandler(RequestHandler):
class GoogleOAuth2TokenHandler(RequestHandler):
class GoogleOAuth2UserinfoHandler(RequestHandler):
class GoogleOAuth2Test(AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\autoreload_test.py
-----------------------------
>                 "run_twice_magic.py": """
                      import os
                      import sys
  
class AutoreloadTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\circlerefs_test.py
-----------------------------
> """Test script to find circular references.
  
  Circular references are not leaks per se, because they will eventually
  be GC'd. However, on CPython, they prevent the reference-counting fast
def find_circular_references(garbage):
def assert_no_cycle_garbage():
class CircleRefsTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\concurrent_test.py
-----------------------------
class MiscFutureTest(AsyncTestCase):
class ChainFutureTest(AsyncTestCase):
class CapServer(TCPServer):
class CapError(Exception):
class BaseCapClient:
class GeneratorCapClient(BaseCapClient):
class GeneratorCapClientTest(AsyncTestCase):
class RunOnExecutorTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\curl_httpclient_test.py
-----------------------------
class CurlHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):
class DigestAuthHandler(RequestHandler):
class CustomReasonHandler(RequestHandler):
class CustomFailReasonHandler(RequestHandler):
class CurlHTTPClientTestCase(AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\escape_test.py
-----------------------------
class EscapeTestCase(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\gen_test.py
-----------------------------
>         """Returns arg after a number of IOLoop iterations."""
          for i in range(iterations):
              yield gen.moment
          raise gen.Return(arg)
class GenBasicTest(AsyncTestCase):
class GenCoroutineTest(AsyncTestCase):
class GenCoroutineSequenceHandler(RequestHandler):
class GenCoroutineUnfinishedSequenceHandler(RequestHandler):
class UndecoratedCoroutinesHandler(RequestHandler):
class AsyncPrepareErrorHandler(RequestHandler):
class NativeCoroutineHandler(RequestHandler):
class GenWebTest(AsyncHTTPTestCase):
class WithTimeoutTest(AsyncTestCase):
class WaitIteratorTest(AsyncTestCase):
class RunnerGCTest(AsyncTestCase):
class ContextVarsTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\http1connection_test.py
-----------------------------
class HTTP1ConnectionTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\httpclient_test.py
-----------------------------
>                     b"""\
  HTTP/1.1 200 OK
  Transfer-Encoding: chunked
  
class HelloWorldHandler(RequestHandler):
class PostHandler(RequestHandler):
class PutHandler(RequestHandler):
class RedirectHandler(RequestHandler):
class RedirectWithoutLocationHandler(RequestHandler):
class ChunkHandler(RequestHandler):
class AuthHandler(RequestHandler):
class CountdownHandler(RequestHandler):
class EchoPostHandler(RequestHandler):
class UserAgentHandler(RequestHandler):
class ContentLength304Handler(RequestHandler):
class PatchHandler(RequestHandler):
class AllMethodsHandler(RequestHandler):
class SetHeaderHandler(RequestHandler):
class InvalidGzipHandler(RequestHandler):
class HeaderEncodingHandler(RequestHandler):
class HTTPClientCommonTestCase(AsyncHTTPTestCase):
class RequestProxyTest(unittest.TestCase):
class HTTPResponseTestCase(unittest.TestCase):
class SyncHTTPClientTest(unittest.TestCase):
class SyncHTTPClientSubprocessTest(unittest.TestCase):
class HTTPRequestTestCase(unittest.TestCase):
class HTTPErrorTestCase(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\httpserver_test.py
-----------------------------
>     """Reads an HTTP response from `stream` and returns a tuple of its
class HandlerBaseTestCase(AsyncHTTPTestCase):
class HelloWorldRequestHandler(RequestHandler):
class SSLTest(AsyncHTTPSTestCase):
class BadSSLOptionsTest(unittest.TestCase):
class MultipartTestHandler(RequestHandler):
class HTTPConnectionTest(AsyncHTTPTestCase):
class EchoHandler(RequestHandler):
class TypeCheckHandler(RequestHandler):
class PostEchoHandler(RequestHandler):
class PostEchoGBKHandler(PostEchoHandler):
class HTTPServerTest(AsyncHTTPTestCase):
class HTTPServerRawTest(AsyncHTTPTestCase):
class XHeaderTest(HandlerBaseTestCase):
class SSLXHeaderTest(AsyncHTTPSTestCase, HandlerBaseTestCase):
class ManualProtocolTest(HandlerBaseTestCase):
class UnixSocketTest(AsyncTestCase):
class UnixSocketTestFile(UnixSocketTest):
class UnixSocketTestAbstract(UnixSocketTest):
class KeepAliveTest(AsyncHTTPTestCase):
class GzipBaseTest(AsyncHTTPTestCase):
class GzipTest(GzipBaseTest, AsyncHTTPTestCase):
class GzipUnsupportedTest(GzipBaseTest, AsyncHTTPTestCase):
class StreamingChunkSizeTest(AsyncHTTPTestCase):
class InvalidOutputContentLengthTest(AsyncHTTPTestCase):
class MaxHeaderSizeTest(AsyncHTTPTestCase):
class IdleTimeoutTest(AsyncHTTPTestCase):
class BodyLimitsTest(AsyncHTTPTestCase):
class LegacyInterfaceTest(AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\httputil_test.py
-----------------------------
>     """Return two empty dicts suitable for use with parse_multipart_form_data.
  
      mypy insists on type annotations for dict literals, so this lets us avoid
      the verbose types throughout this test.
def form_data_args() -> Tuple[Dict[str, List[bytes]], Dict[str, List[HTTPFile]]]:
class TestUrlConcat(unittest.TestCase):
class QsParseTest(unittest.TestCase):
class MultipartFormDataTest(unittest.TestCase):
class HTTPHeadersTest(unittest.TestCase):
class FormatTimestampTest(unittest.TestCase):
class HTTPServerRequestTest(unittest.TestCase):
class ParseRequestStartLineTest(unittest.TestCase):
class ParseCookieTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\import_test.py
-----------------------------
> _import_everything = b"""
  # The event loop is not fork-safe, and it's easy to initialize an asyncio.Future
  # at startup, which in turn creates the default event loop and prevents forking.
  # Explicitly disallow the default event loop so that an error will be raised
class ImportTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\ioloop_test.py
-----------------------------
>         """When a file object is used instead of a numeric file descriptor,
          the object should be closed (by IOLoop.close(all_fds=True),
          not just the fd.
class TestIOLoop(AsyncTestCase):
class TestIOLoopCurrent(unittest.TestCase):
class TestIOLoopCurrentAsync(AsyncTestCase):
class TestIOLoopFutures(AsyncTestCase):
class TestIOLoopRunSync(unittest.TestCase):
class TestPeriodicCallbackMath(unittest.TestCase):
class TestPeriodicCallbackAsync(AsyncTestCase):
class TestIOLoopConfiguration(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\iostream_test.py
-----------------------------
>         """Basic test of IOStream's ability to return Futures."""
          stream = self._make_client_iostream()
          connect_result = yield stream.connect(("127.0.0.1", self.get_http_port()))
          self.assertIs(connect_result, stream)
def _server_ssl_options():
class HelloHandler(RequestHandler):
class TestIOStreamWebMixin(AsyncTestCase):
class TestReadWriteMixin(AsyncTestCase):
class TestIOStreamMixin(TestReadWriteMixin):
class TestIOStreamWebHTTP(AsyncHTTPTestCase, TestIOStreamWebMixin):
class TestIOStreamWebHTTPS(AsyncHTTPSTestCase, TestIOStreamWebMixin):
class TestIOStream(TestIOStreamMixin):
class TestIOStreamSSL(TestIOStreamMixin):
class TestIOStreamSSLContext(TestIOStreamMixin):
class TestIOStreamStartTLS(AsyncTestCase):
class WaitForHandshakeTest(AsyncTestCase):
class TestIOStreamCheckHostname(AsyncTestCase):
class TestPipeIOStream(TestReadWriteMixin, AsyncTestCase):
class TestStreamBuffer(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\locale_test.py
-----------------------------
class TranslationLoaderTest(unittest.TestCase):
class LocaleDataTest(unittest.TestCase):
class EnglishTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\locks_test.py
-----------------------------
>         """Record the resolution of a Future returned by Condition.wait."""
  
          def callback(_):
              if not future.result():
class ConditionTest(AsyncTestCase):
class EventTest(AsyncTestCase):
class SemaphoreTest(AsyncTestCase):
class SemaphoreContextManagerTest(AsyncTestCase):
class BoundedSemaphoreTest(AsyncTestCase):
class LockTests(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\log_test.py
-----------------------------
>     """Test the ability to enable and disable Tornado's logging hooks."""
  
      def logs_present(self, statement, args=None):
          # Each test may manipulate and/or parse the options and then logs
def ignore_bytes_warning():
class LogFormatterTest(unittest.TestCase):
class EnablePrettyLoggingTest(unittest.TestCase):
class LoggingOptionTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\netutil_test.py
-----------------------------
>     """Dummy implementation of getaddrinfo for use in mocks"""
      raise socket.gaierror(errno.EIO, "mock: lookup failed")
  
  
class _ResolverTestMixin(AsyncTestCase):
class _ResolverErrorTestMixin(AsyncTestCase):
def _failing_getaddrinfo(*args):
class BlockingResolverTest(_ResolverTestMixin):
class BlockingResolverErrorTest(_ResolverErrorTestMixin):
class OverrideResolverTest(_ResolverTestMixin):
class ThreadedResolverTest(_ResolverTestMixin):
class ThreadedResolverErrorTest(_ResolverErrorTestMixin):
class ThreadedResolverImportTest(unittest.TestCase):
class CaresResolverTest(_ResolverTestMixin):
class IsValidIPTest(unittest.TestCase):
class TestPortAllocation(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\options_test.py
-----------------------------
class Email:
class OptionsTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\process_test.py
-----------------------------
class ProcessTest(unittest.TestCase):
class SubprocessTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\queues_test.py
-----------------------------
class QueueBasicTest(AsyncTestCase):
class QueueGetTest(AsyncTestCase):
class QueuePutTest(AsyncTestCase):
class QueueJoinTest(AsyncTestCase):
class PriorityQueueJoinTest(QueueJoinTest):
class LifoQueueJoinTest(QueueJoinTest):
class ProducerConsumerTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\resolve_test_helper.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\routing_test.py
-----------------------------
class BasicRouter(Router):
class BasicRouterTestCase(AsyncHTTPTestCase):
class GetResource(RequestHandler):
class PostResource(RequestHandler):
class HTTPMethodRouter(Router):
class HTTPMethodRouterTestCase(AsyncHTTPTestCase):
def _get_named_handler(handler_name):
class CustomRouter(ReversibleRouter):
class CustomRouterTestCase(AsyncHTTPTestCase):
class ConnectionDelegate(HTTPServerConnectionDelegate):
class RuleRouterTest(AsyncHTTPTestCase):
class WSGIContainerTestCase(AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\runtests.py
-----------------------------
>     """Counts the number of WARNING or higher log records."""
  
      def __init__(self, *args, **kwargs):
          super().__init__(*args, **kwargs)
def all():
def test_runner_factory(stderr):
class LogCounter(logging.Filter):
class CountingStderr(io.IOBase):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\simple_httpclient_test.py
-----------------------------
class SimpleHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):
class TriggerHandler(RequestHandler):
class ContentLengthHandler(RequestHandler):
class HeadHandler(RequestHandler):
class OptionsHandler(RequestHandler):
class NoContentHandler(RequestHandler):
class SeeOtherPostHandler(RequestHandler):
class SeeOtherGetHandler(RequestHandler):
class HostEchoHandler(RequestHandler):
class NoContentLengthHandler(RequestHandler):
class EchoPostHandler(RequestHandler):
class RespondInPrepareHandler(RequestHandler):
class SimpleHTTPClientTestMixin(AsyncTestCase):
class SimpleHTTPClientTestCase(AsyncHTTPTestCase, SimpleHTTPClientTestMixin):
class SimpleHTTPSClientTestCase(AsyncHTTPSTestCase, SimpleHTTPClientTestMixin):
class CreateAsyncHTTPClientTestCase(AsyncTestCase):
class HTTP100ContinueTestCase(AsyncHTTPTestCase):
class HTTP204NoContentTestCase(AsyncHTTPTestCase):
class HostnameMappingTestCase(AsyncHTTPTestCase):
class ResolveTimeoutTestCase(AsyncHTTPTestCase):
class MaxHeaderSizeTest(AsyncHTTPTestCase):
class MaxBodySizeTest(AsyncHTTPTestCase):
class MaxBufferSizeTest(AsyncHTTPTestCase):
class ChunkedWithContentLengthTest(AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\tcpclient_test.py
-----------------------------
>         """Fail when trying to use the source IP Address '8.8.8.8'."""
          self.assertRaises(
              socket.error,
              self.do_test_connect,
class TestTCPServer(TCPServer):
class TCPClientTest(AsyncTestCase):
class TestConnectorSplit(unittest.TestCase):
class ConnectorTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\tcpserver_test.py
-----------------------------
>             """
              import asyncio
              from tornado.tcpserver import TCPServer
  
class TCPServerTest(AsyncTestCase):
class TestMultiprocess(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\template_test.py
-----------------------------
>                 "base.html": """\
  <title>{% block title %}default title{% end %}</title>
  <body>{% block body %}default body{% end %}</body>
class TemplateTest(unittest.TestCase):
class StackTraceTest(unittest.TestCase):
class ParseErrorDetailTest(unittest.TestCase):
class AutoEscapeTest(unittest.TestCase):
class TemplateLoaderTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\testing_test.py
-----------------------------
>         """
          This test makes sure that a second call to wait()
          clears the first timeout.
def set_environ(name, value):
class AsyncTestCaseTest(AsyncTestCase):
class LeakTest(AsyncTestCase):
class AsyncHTTPTestCaseTest(AsyncHTTPTestCase):
class AsyncTestCaseReturnAssertionsTest(unittest.TestCase):
class SetUpTearDownTest(unittest.TestCase):
class AsyncHTTPTestCaseSetUpTearDownTest(unittest.TestCase):
class GenTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\twisted_test.py
-----------------------------
class ConvertDeferredTest(AsyncTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\util.py
-----------------------------
>     """Returns a local port number that will refuse all connections.
  
      Return value is (cleanup_func, port); the cleanup function
      must be called to free the port to be reused.
def _detect_ipv6():
def refusing_port():
def exec_test(caller_globals, caller_locals, s):
def ignore_deprecation():
def abstract_base_test(cls: _TestCaseType) -> _TestCaseType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\util_test.py
-----------------------------
>             """
              from __future__ import annotations
              from tornado.util import exec_in
  
class RaiseExcInfoTest(unittest.TestCase):
class TestConfigurable(Configurable):
class TestConfig1(TestConfigurable):
class TestConfig2(TestConfigurable):
class TestConfig3(TestConfigurable):
class TestConfig3A(TestConfig3):
class TestConfig3B(TestConfig3):
class ConfigurableTest(unittest.TestCase):
class UnicodeLiteralTest(unittest.TestCase):
class ExecInTest(unittest.TestCase):
class ArgReplacerTest(unittest.TestCase):
class TimedeltaToSecondsTest(unittest.TestCase):
class ImportObjectTest(unittest.TestCase):
class ReUnescapeTest(unittest.TestCase):
class VersionInfoTest(unittest.TestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\websocket_test.py
-----------------------------
>     """Base class for testing handlers that exposes the on_close event.
  
      This allows for tests to see the close code and reason on the
      server side.
class TestWebSocketHandler(WebSocketHandler):
class EchoHandler(TestWebSocketHandler):
class ErrorInOnMessageHandler(TestWebSocketHandler):
class HeaderHandler(TestWebSocketHandler):
class HeaderEchoHandler(TestWebSocketHandler):
class NonWebSocketHandler(RequestHandler):
class RedirectHandler(RequestHandler):
class CloseReasonHandler(TestWebSocketHandler):
class AsyncPrepareHandler(TestWebSocketHandler):
class PathArgsHandler(TestWebSocketHandler):
class CoroutineOnMessageHandler(TestWebSocketHandler):
class RenderMessageHandler(TestWebSocketHandler):
class SubprotocolHandler(TestWebSocketHandler):
class OpenCoroutineHandler(TestWebSocketHandler):
class ErrorInOpenHandler(TestWebSocketHandler):
class ErrorInAsyncOpenHandler(TestWebSocketHandler):
class NoDelayHandler(TestWebSocketHandler):
class WebSocketBaseTestCase(AsyncHTTPTestCase):
class WebSocketTest(WebSocketBaseTestCase):
class NativeCoroutineOnMessageHandler(TestWebSocketHandler):
class WebSocketNativeCoroutineTest(WebSocketBaseTestCase):
class CompressionTestMixin(WebSocketBaseTestCase):
class UncompressedTestMixin(CompressionTestMixin):
class NoCompressionTest(UncompressedTestMixin):
class ServerOnlyCompressionTest(UncompressedTestMixin):
class ClientOnlyCompressionTest(UncompressedTestMixin):
class DefaultCompressionTest(CompressionTestMixin):
class MaskFunctionMixin(unittest.TestCase):
class PythonMaskFunctionTest(MaskFunctionMixin):
class CythonMaskFunctionTest(MaskFunctionMixin):
class ServerPeriodicPingTest(WebSocketBaseTestCase):
class ClientPeriodicPingTest(WebSocketBaseTestCase):
class ServerPingTimeoutTest(WebSocketBaseTestCase):
class PingCalculationTest(unittest.TestCase):
class ManualPingTest(WebSocketBaseTestCase):
class MaxMessageSizeTest(WebSocketBaseTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\web_test.py
-----------------------------
>     """Base class for web tests that also supports WSGI mode.
  
      Override get_handlers and get_app_kwargs instead of get_app.
      This class is deprecated since WSGI mode is no longer supported.
def relpath(*a):
class WebTestCase(AsyncHTTPTestCase):
class SimpleHandlerTestCase(WebTestCase):
class HelloHandler(RequestHandler):
class CookieTestRequestHandler(RequestHandler):
class SecureCookieV1Test(unittest.TestCase):
class SecureCookieV2Test(unittest.TestCase):
class FinalReturnTest(WebTestCase):
class CookieTest(WebTestCase):
class AuthRedirectRequestHandler(RequestHandler):
class AuthRedirectTest(WebTestCase):
class ConnectionCloseHandler(RequestHandler):
class ConnectionCloseTest(WebTestCase):
class EchoHandler(RequestHandler):
class RequestEncodingTest(WebTestCase):
class TypeCheckHandler(RequestHandler):
class DecodeArgHandler(RequestHandler):
class LinkifyHandler(RequestHandler):
class UIModuleResourceHandler(RequestHandler):
class OptionalPathHandler(RequestHandler):
class MultiHeaderHandler(RequestHandler):
class RedirectHandler(RequestHandler):
class EmptyFlushCallbackHandler(RequestHandler):
class HeaderInjectionHandler(RequestHandler):
class SetHeaderHandler(RequestHandler):
class GetArgumentHandler(RequestHandler):
class GetArgumentsHandler(RequestHandler):
class WSGISafeWebTest(WebTestCase):
class NonWSGIWebTests(WebTestCase):
class ErrorResponseTest(WebTestCase):
class StaticFileTest(WebTestCase):
class StaticDefaultFilenameTest(WebTestCase):
class StaticDefaultFilenameRootTest(WebTestCase):
class StaticFileWithPathTest(WebTestCase):
class CustomStaticFileTest(WebTestCase):
class HostMatchingTest(WebTestCase):
class DefaultHostMatchingTest(WebTestCase):
class NamedURLSpecGroupsTest(WebTestCase):
class ClearHeaderTest(SimpleHandlerTestCase):
class Header204Test(SimpleHandlerTestCase):
class Header304Test(SimpleHandlerTestCase):
class StatusReasonTest(SimpleHandlerTestCase):
class DateHeaderTest(SimpleHandlerTestCase):
class RaiseWithReasonTest(SimpleHandlerTestCase):
class ErrorHandlerXSRFTest(WebTestCase):
class GzipTestCase(SimpleHandlerTestCase):
class PathArgsInPrepareTest(WebTestCase):
class ClearAllCookiesTest(SimpleHandlerTestCase):
class PermissionError(Exception):
class ExceptionHandlerTest(SimpleHandlerTestCase):
class BuggyLoggingTest(SimpleHandlerTestCase):
class UIMethodUIModuleTest(SimpleHandlerTestCase):
class GetArgumentErrorTest(SimpleHandlerTestCase):
class SetLazyPropertiesTest(SimpleHandlerTestCase):
class GetCurrentUserTest(WebTestCase):
class UnimplementedHTTPMethodsTest(SimpleHandlerTestCase):
class UnimplementedNonStandardMethodsTest(SimpleHandlerTestCase):
class AllHTTPMethodsTest(SimpleHandlerTestCase):
class PatchMethodTest(SimpleHandlerTestCase):
class FinishInPrepareTest(SimpleHandlerTestCase):
class Default404Test(WebTestCase):
class Custom404Test(WebTestCase):
class DefaultHandlerArgumentsTest(WebTestCase):
class HandlerByNameTest(WebTestCase):
class StreamingRequestBodyTest(WebTestCase):
class BaseFlowControlHandler(RequestHandler):
class BaseStreamingRequestFlowControlTest:
class DecoratedStreamingRequestFlowControlTest(
class NativeStreamingRequestFlowControlTest(
class IncorrectContentLengthTest(SimpleHandlerTestCase):
class ClientCloseTest(SimpleHandlerTestCase):
class SignedValueTest(unittest.TestCase):
class XSRFTest(SimpleHandlerTestCase):
class XSRFCookieNameTest(SimpleHandlerTestCase):
class XSRFCookieKwargsTest(SimpleHandlerTestCase):
class FinishExceptionTest(SimpleHandlerTestCase):
class DecoratorTest(WebTestCase):
class CacheTest(WebTestCase):
class RequestSummaryTest(SimpleHandlerTestCase):
class HTTPErrorTest(unittest.TestCase):
class ApplicationTest(AsyncTestCase):
class URLSpecReverseTest(unittest.TestCase):
class RedirectHandlerTest(WebTestCase):
class AcceptLanguageTest(WebTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\wsgi_test.py
-----------------------------
class WSGIAppMixin:
class WSGIContainerDummyExecutorTest(WSGIAppMixin, AsyncHTTPTestCase):
class WSGIContainerThreadPoolTest(WSGIAppMixin, AsyncHTTPTestCase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\test\__main__.py
-----------------------------
> """Shim to allow python -m tornado.test.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\auth.py
-----------------------------
> """This module contains implementations of various third-party
  authentication schemes.
  
  All the classes in this file are class mixins designed to be used with
class AuthError(Exception):
class OpenIdMixin:
class OAuthMixin:
class OAuth2Mixin:
class TwitterMixin(OAuthMixin):
class GoogleOAuth2Mixin(OAuth2Mixin):
class FacebookGraphMixin(OAuth2Mixin):
def _oauth_signature(
def _oauth10a_signature(
def _oauth_escape(val: Union[str, bytes]) -> str:
def _oauth_parse_response(body: bytes) -> Dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\autoreload.py
-----------------------------
> """Automatically restart the server when a source file is modified.
  
  Most applications should not access this module directly.  Instead,
  pass the keyword argument ``autoreload=True`` to the
def start(check_time: int = 500) -> None:
def wait() -> None:
def watch(filename: str) -> None:
def add_reload_hook(fn: Callable[[], None]) -> None:
def _reload_on_update(modify_times: Dict[str, float]) -> None:
def _check_file(modify_times: Dict[str, float], path: str) -> None:
def _reload() -> None:
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\concurrent.py
-----------------------------
> """Utilities for working with ``Future`` objects.
  
  Tornado previously provided its own ``Future`` class, but now uses
  `asyncio.Future`. This module contains utility functions for working
class ReturnValueIgnoredError(Exception):
def is_future(x: Any) -> bool:
class DummyExecutor(futures.Executor):
def run_on_executor(*args: Any, **kwargs: Any) -> Callable:
def chain_future(
def future_set_result_unless_cancelled(
def future_set_exception_unless_cancelled(
def future_set_exc_info(
def future_add_done_callback(
def future_add_done_callback(
def future_add_done_callback(  # noqa: F811

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\curl_httpclient.py
-----------------------------
> """Non-blocking HTTP client implementation using pycurl."""
  
  import collections
  import functools
class CurlAsyncHTTPClient(AsyncHTTPClient):
class CurlError(HTTPError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\escape.py
-----------------------------
> """Escaping/unescaping methods for HTML, JSON, URLs, and others.
  
  Also includes a few other miscellaneous string manipulation functions that
  have crept in over time.
def xhtml_escape(value: Union[str, bytes]) -> str:
def xhtml_unescape(value: Union[str, bytes]) -> str:
def json_encode(value: Any) -> str:
def json_decode(value: Union[str, bytes]) -> Any:
def squeeze(value: str) -> str:
def url_escape(value: Union[str, bytes], plus: bool = True) -> str:
def url_unescape(value: Union[str, bytes], encoding: None, plus: bool = True) -> bytes:
def url_unescape(
def url_unescape(
def parse_qs_bytes(
def utf8(value: bytes) -> bytes:
def utf8(value: str) -> bytes:
def utf8(value: None) -> None:
def utf8(value: Union[None, str, bytes]) -> Optional[bytes]:
def to_unicode(value: str) -> str:
def to_unicode(value: bytes) -> str:
def to_unicode(value: None) -> None:
def to_unicode(value: Union[None, str, bytes]) -> Optional[str]:
def recursive_unicode(obj: Any) -> Any:
def linkify(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\gen.py
-----------------------------
> """``tornado.gen`` implements generator-based coroutines.
  
  .. note::
  
class KeyReuseError(Exception):
class UnknownKeyError(Exception):
class LeakedCallbackError(Exception):
class BadYieldError(Exception):
class ReturnValueIgnoredError(Exception):
def _value_from_stopiteration(e: Union[StopIteration, "Return"]) -> Any:
def _create_future() -> Future:
def _fake_ctx_run(f: Callable[..., _T], *args: Any, **kw: Any) -> _T:
def coroutine(
def coroutine(func: Callable[..., _T]) -> Callable[..., "Future[_T]"]: ...
def coroutine(
def is_coroutine_function(func: Any) -> bool:
class Return(Exception):
class WaitIterator:
def multi(
def multi(
def multi(
def multi_future(
def maybe_future(x: Any) -> Future:
def with_timeout(
def sleep(duration: float) -> "Future[None]":
class _NullFuture:
class Runner:
def _wrap_awaitable(awaitable: Awaitable) -> Future:
def convert_yielded(yielded: _Yieldable) -> Future:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\http1connection.py
-----------------------------
> """Client and server implementations of HTTP/1.x.
  
  .. versionadded:: 4.0
class _QuietException(Exception):
class _ExceptionLoggingContext:
class HTTP1ConnectionParameters:
class HTTP1Connection(httputil.HTTPConnection):
class _GzipMessageDelegate(httputil.HTTPMessageDelegate):
class HTTP1ServerConnection:
def parse_int(s: str) -> int:
def parse_hex_int(s: str) -> int:
def is_transfer_encoding_chunked(headers: httputil.HTTPHeaders) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\httpclient.py
-----------------------------
> """Blocking and non-blocking HTTP client interfaces.
  
  This module defines a common interface shared by two implementations,
  ``simple_httpclient`` and ``curl_httpclient``.  Applications may either
class HTTPClient:
class AsyncHTTPClient(Configurable):
class HTTPRequest:
class HTTPResponse:
class HTTPClientError(Exception):
class _RequestProxy:
def main() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\httpserver.py
-----------------------------
> """A non-blocking, single-threaded HTTP server.
  
  Typical applications have little direct interaction with the `HTTPServer`
  class except to start a server at the beginning of the process
class except to start a server at the beginning of the process
class HTTPServer(TCPServer, Configurable, httputil.HTTPServerConnectionDelegate):
class _CallableAdapter(httputil.HTTPMessageDelegate):
class _HTTPRequestContext:
class _ProxyAdapter(httputil.HTTPMessageDelegate):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\httputil.py
-----------------------------
> """HTTP utility code shared by clients and servers.
  
  This module also defines the `HTTPServerRequest` class which is exposed
  via `tornado.web.RequestHandler.request`.
class _ABNF:
def _normalize_header(name: str) -> str:
class HTTPHeaders(StrMutableMapping):
class HTTPServerRequest:
class HTTPInputError(Exception):
class HTTPOutputError(Exception):
class HTTPServerConnectionDelegate:
class HTTPMessageDelegate:
class HTTPConnection:
def url_concat(
class HTTPFile(ObjectDict):
def _parse_request_range(
def _get_content_range(start: Optional[int], end: Optional[int], total: int) -> str:
def _int_or_none(val: str) -> Optional[int]:
def parse_body_arguments(
def parse_multipart_form_data(
def format_timestamp(
class RequestStartLine(typing.NamedTuple):
def parse_request_start_line(line: str) -> RequestStartLine:
class ResponseStartLine(typing.NamedTuple):
def parse_response_start_line(line: str) -> ResponseStartLine:
def _parseparam(s: str) -> Generator[str, None, None]:
def _parse_header(line: str) -> Tuple[str, Dict[str, str]]:
def _encode_header(key: str, pdict: Dict[str, str]) -> str:
def encode_username_password(
def doctests():
def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:
def qs_to_qsl(qs: Dict[str, List[AnyStr]]) -> Iterable[Tuple[str, AnyStr]]:
def _unquote_replace(m: re.Match) -> str:
def _unquote_cookie(s: str) -> str:
def parse_cookie(cookie: str) -> Dict[str, str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\ioloop.py
-----------------------------
> """An I/O event loop for non-blocking sockets.
  
  In Tornado 6.0, `.IOLoop` is a wrapper around the `asyncio` event loop, with a
  slightly different interface. The `.IOLoop` interface is now provided primarily
class _Selectable(Protocol):
class IOLoop(Configurable):
class _Timeout:
class PeriodicCallback:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\iostream.py
-----------------------------
> """Utility classes to write to and read from non-blocking files and sockets.
  
  Contents:
  
class StreamClosedError(IOError):
class UnsatisfiableReadError(Exception):
class StreamBufferFullError(Exception):
class _StreamBuffer:
class BaseIOStream:
class IOStream(BaseIOStream):
class SSLIOStream(IOStream):
class PipeIOStream(BaseIOStream):
def doctests() -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\locale.py
-----------------------------
> """Translation methods for generating localized strings.
  
  To load a locale and generate a translated string::
  
def get(*locale_codes: str) -> "Locale":
def set_default_locale(code: str) -> None:
def load_translations(directory: str, encoding: Optional[str] = None) -> None:
def load_gettext_translations(directory: str, domain: str) -> None:
def get_supported_locales() -> Iterable[str]:
class Locale:
class CSVLocale(Locale):
class GettextLocale(Locale):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\locks.py
-----------------------------
>     """Base class for objects that periodically clean up timed-out waiters.
  
      Avoids memory leak in a common pattern like:
  
class _TimeoutGarbageCollector:
class Condition(_TimeoutGarbageCollector):
class Event:
class _ReleasingContextManager:
class Semaphore(_TimeoutGarbageCollector):
class BoundedSemaphore(Semaphore):
class Lock:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\log.py
-----------------------------
> """Logging support for Tornado.
  
  Tornado uses three logger streams:
  
def _stderr_supports_color() -> bool:
def _safe_unicode(s: Any) -> str:
class LogFormatter(logging.Formatter):
def enable_pretty_logging(
def define_logging_options(options: Any = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\netutil.py
-----------------------------
> """Miscellaneous network utility code."""
  
  import asyncio
  import concurrent.futures
def bind_sockets(
def add_accept_handler(
def is_valid_ip(ip: str) -> bool:
class Resolver(Configurable):
def _resolve_addr(
class DefaultExecutorResolver(Resolver):
class DefaultLoopResolver(Resolver):
class ExecutorResolver(Resolver):
class BlockingResolver(ExecutorResolver):
class ThreadedResolver(ExecutorResolver):
class OverrideResolver(Resolver):
def ssl_options_to_context(
def ssl_wrap_socket(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\options.py
-----------------------------
> """A command line parsing module that lets modules define their own options.
  
  This module is inspired by Google's `gflags
  <https://github.com/google/python-gflags>`_. The primary difference
class Error(Exception):
class OptionParser:
class _Mockable:
class _Option:
def define(
def parse_command_line(
def parse_config_file(path: str, final: bool = True) -> None:
def print_help(file: Optional[TextIO] = None) -> None:
def add_parse_callback(callback: Callable[[], None]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\process.py
-----------------------------
> """Utilities for working with multiple processes, including both forking
  the server into multiple processes and managing subprocesses.
def cpu_count() -> int:
def _reseed_random() -> None:
def fork_processes(
def task_id() -> Optional[int]:
class Subprocess:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\queues.py
-----------------------------
> """Asynchronous queues for coroutines. These classes are very similar
  to those provided in the standard library's `asyncio package
  <https://docs.python.org/3/library/asyncio-queue.html>`_.
  
class QueueEmpty(Exception):
class QueueFull(Exception):
def _set_timeout(
class _QueueIterator(Generic[_T]):
class Queue(Generic[_T]):
class PriorityQueue(Queue):
class LifoQueue(Queue):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\routing.py
-----------------------------
> """Flexible routing implementation.
  
  Tornado routes HTTP requests to appropriate handlers using `Router`
  class implementations. The `tornado.web.Application` class is a
class implementations. The `tornado.web.Application` class is a
class can match on more criteria than `.Application`, or the `Router`
class Router(httputil.HTTPServerConnectionDelegate):
class ReversibleRouter(Router):
class _RoutingDelegate(httputil.HTTPMessageDelegate):
class _DefaultMessageDelegate(httputil.HTTPMessageDelegate):
class RuleRouter(Router):
class ReversibleRuleRouter(ReversibleRouter, RuleRouter):
class Rule:
class Matcher:
class AnyMatches(Matcher):
class HostMatches(Matcher):
class DefaultHostMatches(Matcher):
class PathMatches(Matcher):
class URLSpec(Rule):
def _unquote_or_none(s: str) -> bytes:
def _unquote_or_none(s: None) -> None:
def _unquote_or_none(s: Optional[str]) -> Optional[bytes]:  # noqa: F811

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\simple_httpclient.py
-----------------------------
>     """Error raised by SimpleAsyncHTTPClient on timeout.
  
      For historical reasons, this is a subclass of `.HTTPClientError`
      which simulates a response code of 599.
class HTTPTimeoutError(HTTPError):
class HTTPStreamClosedError(HTTPError):
class SimpleAsyncHTTPClient(AsyncHTTPClient):
class _HTTPConnection(httputil.HTTPMessageDelegate):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\tcpclient.py
-----------------------------
> """A non-blocking TCP connection factory.
class _Connector:
class TCPClient:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\tcpserver.py
-----------------------------
> """A non-blocking, single-threaded TCP server."""
  
  import errno
  import os
class TCPServer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\template.py
-----------------------------
> """A simple template system that compiles templates to Python code.
  
  Basic usage looks like::
  
class _UnsetMarker:
def filter_whitespace(mode: str, text: str) -> str:
class Template:
class BaseLoader:
class Loader(BaseLoader):
class DictLoader(BaseLoader):
class _Node:
class _File(_Node):
class _ChunkList(_Node):
class _NamedBlock(_Node):
class _ExtendsBlock(_Node):
class _IncludeBlock(_Node):
class _ApplyBlock(_Node):
class _ControlBlock(_Node):
class _IntermediateControlBlock(_Node):
class _Statement(_Node):
class _Expression(_Node):
class _Module(_Expression):
class _Text(_Node):
class ParseError(Exception):
class _CodeWriter:
class _TemplateReader:
def _format_code(code: str) -> str:
def _parse(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\testing.py
-----------------------------
> """Support classes for automated testing.
  
  * `AsyncTestCase` and `AsyncHTTPTestCase`:  Subclasses of unittest.TestCase
    with additional support for testing asynchronous (`.IOLoop`-based) code.
def bind_unused_port(
def get_async_test_timeout() -> float:
class AsyncTestCase(unittest.TestCase):
class AsyncHTTPTestCase(AsyncTestCase):
class AsyncHTTPSTestCase(AsyncHTTPTestCase):
def gen_test(
def gen_test(func: Callable[..., Union[Generator, "Coroutine"]]) -> Callable[..., None]:
def gen_test(  # noqa: F811
class ExpectLog(logging.Filter):
def setup_with_context_manager(testcase: unittest.TestCase, cm: Any) -> Any:
def main(**kwargs: Any) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\util.py
-----------------------------
> """Miscellaneous utility functions and classes.
  
  This module is used internally by Tornado.  It is not necessarily expected
  that the functions and classes defined here will be useful to other
class ObjectDict(Dict[str, Any]):
class GzipDecompressor:
def import_object(name: str) -> Any:
def exec_in(
def raise_exc_info(
def errno_from_exception(e: BaseException) -> Optional[int]:
def _re_unescape_replacement(match: Match[str]) -> str:
def re_unescape(s: str) -> str:
class Configurable:
class ArgReplacer:
def timedelta_to_seconds(td):
def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:
def doctests():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\web.py
-----------------------------
> """``tornado.web`` provides a simple web framework with asynchronous
  features that allow it to scale to large numbers of open connections,
  making it ideal for `long polling
  <http://en.wikipedia.org/wiki/Push_technology#Long_polling>`_.
class _ArgDefaultMarker:
class RequestHandler:
def stream_request_body(cls: Type[_RequestHandlerType]) -> Type[_RequestHandlerType]:
def _has_stream_request_body(cls: Type[RequestHandler]) -> bool:
def removeslash(
def addslash(
class _ApplicationRouter(ReversibleRuleRouter):
class Application(ReversibleRouter):
class _HandlerDelegate(httputil.HTTPMessageDelegate):
class HTTPError(Exception):
class Finish(Exception):
class MissingArgumentError(HTTPError):
class ErrorHandler(RequestHandler):
class RedirectHandler(RequestHandler):
class StaticFileHandler(RequestHandler):
class FallbackHandler(RequestHandler):
class OutputTransform:
class GZipContentEncoding(OutputTransform):
def authenticated(
class UIModule:
class _linkify(UIModule):
class _xsrf_form_html(UIModule):
class TemplateModule(UIModule):
class _UIModuleNamespace:
def create_signed_value(
def _get_version(value: bytes) -> int:
def decode_signed_value(
def _decode_signed_value_v1(
def _decode_fields_v2(value: bytes) -> Tuple[int, bytes, bytes, bytes, bytes]:
def _decode_signed_value_v2(
def get_signature_key_version(value: Union[str, bytes]) -> Optional[int]:
def _create_signature_v1(secret: Union[str, bytes], *parts: Union[str, bytes]) -> bytes:
def _create_signature_v2(secret: Union[str, bytes], s: bytes) -> bytes:
def is_absolute(path: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\websocket.py
-----------------------------
> """Implementation of the WebSocket protocol.
  
  `WebSockets <http://dev.w3.org/html5/websockets/>`_ allow for bidirectional
  communication between the browser and server. WebSockets are supported in the
class WebSocketError(Exception):
class WebSocketClosedError(WebSocketError):
class _DecompressTooLargeError(Exception):
class _WebSocketParams:
class WebSocketHandler(tornado.web.RequestHandler):
def _raise_not_supported_for_websockets(*args: Any, **kwargs: Any) -> None:
class WebSocketProtocol(abc.ABC):
class _PerMessageDeflateCompressor:
class _PerMessageDeflateDecompressor:
class WebSocketProtocol13(WebSocketProtocol):
class WebSocketClientConnection(simple_httpclient._HTTPConnection):
def websocket_connect(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\wsgi.py
-----------------------------
> """WSGI support for the Tornado web framework.
  
  WSGI is the Python standard for web servers, and allows for interoperability
  between Tornado and other Python web frameworks and servers.
def to_wsgi_str(s: bytes) -> str:
class WSGIContainer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\_locale_data.py
-----------------------------
> """Data used by the tornado.locale module."""
  
  LOCALE_NAMES = {
      "af_ZA": {"name_en": "Afrikaans", "name": "Afrikaans"},

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tornado\__init__.py
-----------------------------
> """The Tornado web server and tools."""
  
  # version is a human-readable version number.
  
def __getattr__(name: str) -> typing.Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\cli.py
-----------------------------
>     """
      Run Typer scripts with completion, without having to create a package.
  
      You probably want to install completion for the typer command:
class State:
def maybe_update_state(ctx: click.Context) -> None:
class TyperCLIGroup(typer.core.TyperGroup):
def get_typer_from_module(module: Any) -> Optional[typer.Typer]:
def get_typer_from_state() -> Optional[typer.Typer]:
def maybe_add_run_to_cli(cli: click.Group) -> None:
def print_version(ctx: click.Context, param: Option, value: bool) -> None:
def callback(
def get_docs_for_click(
def _parse_html(input_text: str) -> str:
def docs(
def main() -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\colors.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\completion.py
-----------------------------
def get_completion_inspect_parameters() -> Tuple[ParamMeta, ParamMeta]:
def install_callback(ctx: click.Context, param: click.Parameter, value: Any) -> Any:
def show_callback(ctx: click.Context, param: click.Parameter, value: Any) -> Any:
def _install_completion_placeholder_function(
def _install_completion_no_auto_placeholder_function(
def shell_complete(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\core.py
-----------------------------
>         """Returns a list of subcommand names.
          Note that in Click's Group class, these are sorted.
def _split_opt(opt: str) -> Tuple[str, str]:
def _typer_param_setup_autocompletion_compat(
def _get_default_string(
def _extract_default_help_str(
def _main(
class TyperArgument(click.core.Argument):
class TyperOption(click.core.Option):
def _typer_format_options(
def _typer_main_shell_completion(
class TyperCommand(click.core.Command):
class TyperGroup(click.core.Group):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\main.py
-----------------------------
>     """This function launches the given URL (or filename) in the default
      viewer application for this file type.  If this is an executable, it
      might launch the executable in a new session.  The return value is
      the exit code of the launched application.  Usually, ``0`` indicates
def except_hook(
def get_install_completion_arguments() -> Tuple[click.Parameter, click.Parameter]:
class Typer:
def get_group(typer_instance: Typer) -> TyperGroup:
def get_command(typer_instance: Typer) -> click.Command:
def solve_typer_info_help(typer_info: TyperInfo) -> str:
def solve_typer_info_defaults(typer_info: TyperInfo) -> TyperInfo:
def get_group_from_info(
def get_command_name(name: str) -> str:
def get_params_convertors_ctx_param_name_from_function(
def get_command_from_info(
def determine_type_convertor(type_: Any) -> Optional[Callable[[Any], Any]]:
def param_path_convertor(value: Optional[str] = None) -> Optional[Path]:
def generate_enum_convertor(enum: Type[Enum]) -> Callable[[Any], Any]:
def generate_list_convertor(
def generate_tuple_convertor(
def get_callback(
def get_click_type(
def lenient_issubclass(
def get_click_param(
def get_param_callback(
def get_param_completion(
def run(function: Callable[..., Any]) -> None:
def _is_macos() -> bool:
def _is_linux_or_bsd() -> bool:
def launch(url: str, wait: bool = False, locate: bool = False) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\models.py
-----------------------------
>     """
      You shouldn't use this class directly.
  
      It's used internally to recognize when a default value has been overwritten, even
class Context(click.Context):
class FileText(io.TextIOWrapper):
class FileTextWrite(FileText):
class FileBinaryRead(io.BufferedReader):
class FileBinaryWrite(io.BufferedWriter):
class CallbackParam(click.Parameter):
class DefaultPlaceholder:
def Default(value: DefaultType) -> DefaultType:
class CommandInfo:
class TyperInfo:
class ParameterInfo:
class OptionInfo(ParameterInfo):
class ArgumentInfo(ParameterInfo):
class ParamMeta:
class DeveloperExceptionConfig:
class TyperPath(click.Path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\params.py
-----------------------------
def Option(
def Option(
def Option(
def Argument(
def Argument(
def Argument(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\rich_utils.py
-----------------------------
>     """Highlights our special options."""
  
      highlights = [
          r"(^|\W)(?P<switch>\-\w+)(?![a-zA-Z0-9])",
class OptionHighlighter(RegexHighlighter):
class NegativeOptionHighlighter(RegexHighlighter):
def _get_rich_console(stderr: bool = False) -> Console:
def _make_rich_text(
def _get_help_text(
def _get_parameter_help(
def _make_command_help(
def _print_options_panel(
def _print_commands_panel(
def rich_format_help(
def rich_format_error(self: click.ClickException) -> None:
def rich_abort_error() -> None:
def rich_to_html(input_text: str) -> str:
def rich_render_text(text: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\testing.py
-----------------------------
class CliRunner(ClickCliRunner):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\utils.py
-----------------------------
def _param_type_to_user_string(param_type: Type[ParameterInfo]) -> str:
class AnnotatedParamWithDefaultValueError(Exception):
class MixedAnnotatedAndDefaultStyleError(Exception):
class MultipleTyperAnnotationsError(Exception):
class DefaultFactoryAndDefaultValueError(Exception):
def _split_annotation_from_typer_annotations(
def get_params_from_function(func: Callable[..., Any]) -> Dict[str, ParamMeta]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\_completion_classes.py
-----------------------------
>     """Sanitizes the help text by removing rich tags"""
      if not importlib.util.find_spec("rich"):
          return text
      from . import rich_utils
def _sanitize_help_text(text: str) -> str:
class BashComplete(click.shell_completion.BashComplete):
class ZshComplete(click.shell_completion.ZshComplete):
class FishComplete(click.shell_completion.FishComplete):
class PowerShellComplete(click.shell_completion.ShellComplete):
def completion_init() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\_completion_shared.py
-----------------------------
> COMPLETION_SCRIPT_BASH = """
  %(complete_func)s() {
      local IFS=$'\n'
      COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \\
class Shells(str, Enum):
def get_completion_script(*, prog_name: str, complete_var: str, shell: str) -> str:
def install_bash(*, prog_name: str, complete_var: str, shell: str) -> Path:
def install_zsh(*, prog_name: str, complete_var: str, shell: str) -> Path:
def install_fish(*, prog_name: str, complete_var: str, shell: str) -> Path:
def install_powershell(*, prog_name: str, complete_var: str, shell: str) -> Path:
def install(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\_types.py
-----------------------------
class TyperChoice(click.Choice, Generic[ParamTypeValue]):  # type: ignore[type-arg]

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\_typing.py
-----------------------------
>     """
      This method is used to retrieve all Literal values as
      Literal can be used recursively (see https://www.python.org/dev/peps/pep-0586)
      e.g. `Literal[Literal[Literal[1, 2, 3], "foo"], 5, None]`
def is_callable_type(type_: Type[Any]) -> bool:
def is_literal_type(type_: Type[Any]) -> bool:
def literal_values(type_: Type[Any]) -> Tuple[Any, ...]:
def all_literal_values(type_: Type[Any]) -> Tuple[Any, ...]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\__init__.py
-----------------------------
> """Typer, build great CLIs. Easy to code. Based on Python type hints."""
  
  __version__ = "0.17.3"
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typer\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typing_inspection\introspection.py
-----------------------------
> """High-level introspection utilities, used to inspect type annotations."""
  
  from __future__ import annotations
  
def _literal_type_check(value: Any, /) -> None:
def get_literal_values(
class AnnotationSource(IntEnum):
class ForbiddenQualifier(Exception):
class _UnknownTypeEnum(Enum):
class InspectedAnnotation(NamedTuple):
def inspect_annotation(  # noqa: PLR0915
def _unpack_annotated_inner(
def _unpack_annotated(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typing_inspection\typing_objects.py
-----------------------------
> """Low-level introspection utilities for [`typing`][] members.
  
  The provided functions in this module check against both the [`typing`][] and 
[`typing_extensions`][]
  variants, if they exists and are different.
def _compile_identity_check_function(member: LiteralString, function_name: LiteralString) -> FunctionType:
def _compile_isinstance_check_function(member: LiteralString, function_name: LiteralString) -> FunctionType:
def is_namedtuple(obj: Any, /) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typing_inspection\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Africa\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\America\Argentina\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\America\Indiana\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\America\Kentucky\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\America\North_Dakota\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\America\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Antarctica\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Arctic\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Asia\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Atlantic\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Australia\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Brazil\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Canada\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Chile\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Etc\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Europe\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Indian\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Mexico\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\Pacific\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\US\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\zoneinfo\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\tzdata\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\Cc\regex.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\Cc\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\Cf\regex.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\Cf\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\P\regex.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\P\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\Z\regex.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\Z\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\categories\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\properties\Any\regex.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\properties\Any\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\properties\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uc_micro\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\emscripten\connection.py
-----------------------------
>         """Whether the connection either is brand new or has been previously closed.
          If this property is True then both ``is_connected`` and ``has_connected_to_proxy``
          properties must be False.
class EmscriptenHTTPConnection:
class EmscriptenHTTPSConnection(EmscriptenHTTPConnection):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\emscripten\fetch.py
-----------------------------
> """
  Support for streaming http requests in emscripten.
  
  A few caveats -
class _RequestError(Exception):
class _StreamingError(_RequestError):
class _TimeoutError(_RequestError):
def _obj_from_dict(dict_val: dict[str, Any]) -> JsProxy:
class _ReadStream(io.RawIOBase):
class _StreamingFetcher:
class _JSPIReadStream(io.RawIOBase):
def is_in_browser_main_thread() -> bool:
def is_cross_origin_isolated() -> bool:
def is_in_node() -> bool:
def is_worker_available() -> bool:
def send_streaming_request(request: EmscriptenRequest) -> EmscriptenResponse | None:
def _show_timeout_warning() -> None:
def _show_streaming_warning() -> None:
def send_request(request: EmscriptenRequest) -> EmscriptenResponse:
def send_jspi_request(
def _run_sync_with_timeout(
def has_jspi() -> bool:
def _is_node_js() -> bool:
def streaming_ready() -> bool | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\emscripten\request.py
-----------------------------
class EmscriptenRequest:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\emscripten\response.py
-----------------------------
>         """
          A generator wrapper for the read() method. A call will block until
          ``amt`` bytes have been read from the connection or until the
          connection is closed.
class EmscriptenResponse:
class EmscriptenHttpResponseWrapper(BaseHTTPResponse):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\emscripten\__init__.py
-----------------------------
def inject_into_urllib3() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\pyopenssl.py
-----------------------------
> """
  Module for using pyOpenSSL as a TLS backend. This module was relevant before
  the standard library ``ssl`` module supported SNI, but now that we've dropped
  support for Python 2.7 all relevant Python versions support SNI so
def inject_into_urllib3() -> None:
def extract_from_urllib3() -> None:
def _validate_dependencies_met() -> None:
def _dnsname_to_stdlib(name: str) -> str | None:
def get_subj_alt_name(peer_cert: X509) -> list[tuple[str, str]]:
class WrappedSocket:
class PyOpenSSLContext:
def _verify_callback(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\socks.py
-----------------------------
> """
  This module contains provisional support for SOCKS proxies from within
  urllib3. This module supports SOCKS4, SOCKS4A (an extension of SOCKS4), and
  SOCKS5. To enable its functionality, either install PySocks or install this
class _TYPE_SOCKS_OPTIONS(typing.TypedDict):
class SOCKSConnection(HTTPConnection):
class SOCKSHTTPSConnection(SOCKSConnection, HTTPSConnection):
class SOCKSHTTPConnectionPool(HTTPConnectionPool):
class SOCKSHTTPSConnectionPool(HTTPSConnectionPool):
class SOCKSProxyManager(PoolManager):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\contrib\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\http2\connection.py
-----------------------------
>     """
      "An implementation that validates fields according to the definitions in Sections
      5.1 and 5.5 of [HTTP] only needs an additional check that field names do not
      include uppercase characters." (https://httpwg.org/specs/rfc9113.html#n-field-validity)
def _is_legal_header_name(name: bytes) -> bool:
def _is_illegal_header_value(value: bytes) -> bool:
class _LockedObject(typing.Generic[T]):
class HTTP2Connection(HTTPSConnection):
class HTTP2Response(BaseHTTPResponse):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\http2\probe.py
-----------------------------
>         """This function is for testing purposes only. Gets the current state of the probe 
cache"""
          with self._lock:
              return {k: v for k, v in self._cache_values.items()}
  
class _HTTP2ProbeCache:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\http2\__init__.py
-----------------------------
def inject_into_urllib3() -> None:
def extract_from_urllib3() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\connection.py
-----------------------------
>     """
      Returns True if the connection is dropped and should be closed.
      :param conn: :class:`urllib3.connection.HTTPConnection` object.
def is_connection_dropped(conn: BaseHTTPConnection) -> bool:  # Platform-specific
def create_connection(
def _set_socket_options(
def allowed_gai_family() -> socket.AddressFamily:
def _has_ipv6(host: str) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\proxy.py
-----------------------------
>     """
      Returns True if the connection requires an HTTP CONNECT through the proxy.
  
      :param URL proxy_url:
def connection_requires_http_tunnel(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\request.py
-----------------------------
>     """
      Shortcuts for generating request headers.
  
      :param keep_alive:
class _TYPE_FAILEDTELL(Enum):
def make_headers(
def set_file_position(
def rewind_body(body: typing.IO[typing.AnyStr], body_pos: _TYPE_BODY_POSITION) -> None:
class ChunksAndContentLength(typing.NamedTuple):
def body_to_chunks(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\response.py
-----------------------------
>     """
      Checks whether a given file-like object is closed.
  
      :param obj:
def is_fp_closed(obj: object) -> bool:
def assert_header_parsing(headers: httplib.HTTPMessage) -> None:
def is_response_to_head(response: httplib.HTTPResponse) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\retry.py
-----------------------------
>     """Retry configuration.
  
      Each retry attempt will create a new Retry object with updated values, so
      they can be safely reused.
class RequestHistory(typing.NamedTuple):
class Retry:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\ssltransport.py
-----------------------------
>     """
      The SSLTransport wraps an existing socket and establishes an SSL connection.
  
      Contrary to Python's implementation of SSLSocket, it allows you to chain
class SSLTransport:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\ssl_.py
-----------------------------
>     """Return True for CPython 3.9.3+ or 3.10+ and PyPy 7.3.8+ where
      setting SSLContext.hostname_checks_common_name to False works.
  
      Outside of CPython and PyPy we don't know which implementations work
def _is_bpo_43522_fixed(
def _is_has_never_check_common_name_reliable(
def assert_fingerprint(cert: bytes | None, fingerprint: str) -> None:
def resolve_cert_reqs(candidate: None | int | str) -> VerifyMode:
def resolve_ssl_version(candidate: None | int | str) -> int:
def create_urllib3_context(
def ssl_wrap_socket(
def ssl_wrap_socket(
def ssl_wrap_socket(
def is_ipaddress(hostname: str | bytes) -> bool:
def _is_key_file_encrypted(key_file: str) -> bool:
def _ssl_wrap_socket_impl(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\ssl_match_hostname.py
-----------------------------
> """The match_hostname() function from Python 3.5, essential when using SSL."""
  
  # Note: This file is under the PSF license as the code comes from the python
  # stdlib.   http://docs.python.org/3/license.html
class CertificateError(ValueError):
def _dnsname_match(
def _ipaddress_match(ipname: str, host_ip: IPv4Address | IPv6Address) -> bool:
def match_hostname(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\timeout.py
-----------------------------
>     """Timeout configuration.
  
      Timeouts can be defined as a default for a pool:
  
class _TYPE_DEFAULT(Enum):
class Timeout:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\url.py
-----------------------------
>     """
      Data structure for representing an HTTP URL. Used as a return value for
      :func:`parse_url`. Both the scheme and host are normalized as they are
      both case-insensitive according to RFC 3986.
class Url(
def _encode_invalid_chars(
def _encode_invalid_chars(
def _encode_invalid_chars(
def _remove_path_dot_segments(path: str) -> str:
def _normalize_host(host: None, scheme: str | None) -> None: ...
def _normalize_host(host: str, scheme: str | None) -> str: ...
def _normalize_host(host: str | None, scheme: str | None) -> str | None:
def _idna_encode(name: str) -> bytes:
def _encode_target(target: str) -> str:
def parse_url(url: str) -> Url:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\util.py
-----------------------------
def to_bytes(
def to_str(
def reraise(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\wait.py
-----------------------------
>     """Waits for reading to be available on a given socket.
      Returns True if the socket is readable, or False if the timeout expired.
def select_wait_for_socket(
def poll_wait_for_socket(
def _have_working_poll() -> bool:
def wait_for_socket(
def wait_for_read(sock: socket.socket, timeout: float | None = None) -> bool:
def wait_for_write(sock: socket.socket, timeout: float | None = None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\connection.py
-----------------------------
>     """
      Based on :class:`http.client.HTTPConnection` but provides an extra constructor
      backwards-compatibility layer between older and newer Pythons.
  
class HTTPConnection(_HTTPConnection):
class HTTPSConnection(HTTPConnection):
class _WrappedAndVerifiedSocket(typing.NamedTuple):
def _ssl_wrap_socket_and_match_hostname(
def _match_hostname(
def _wrap_proxy_error(err: Exception, proxy_scheme: str | None) -> ProxyError:
def _get_default_user_agent() -> str:
class DummyConnection:
def _url_from_connection(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\connectionpool.py
-----------------------------
>     """
      Base class for all connection pools, such as
      :class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.
  
class ConnectionPool:
class HTTPConnectionPool(ConnectionPool, RequestMethods):
class HTTPSConnectionPool(HTTPConnectionPool):
def connection_from_url(url: str, **kw: typing.Any) -> HTTPConnectionPool:
def _normalize_host(host: None, scheme: str | None) -> None: ...
def _normalize_host(host: str, scheme: str | None) -> str: ...
def _normalize_host(host: str | None, scheme: str | None) -> str | None:
def _url_from_pool(
def _close_pool_connections(pool: queue.LifoQueue[typing.Any]) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\exceptions.py
-----------------------------
>     """Base exception used by this module."""
  
  
  class HTTPWarning(Warning):
class HTTPError(Exception):
class HTTPWarning(Warning):
class PoolError(HTTPError):
class RequestError(PoolError):
class SSLError(HTTPError):
class ProxyError(HTTPError):
class DecodeError(HTTPError):
class ProtocolError(HTTPError):
class MaxRetryError(RequestError):
class HostChangedError(RequestError):
class TimeoutStateError(HTTPError):
class TimeoutError(HTTPError):
class ReadTimeoutError(TimeoutError, RequestError):
class ConnectTimeoutError(TimeoutError):
class NewConnectionError(ConnectTimeoutError, HTTPError):
class NameResolutionError(NewConnectionError):
class EmptyPoolError(PoolError):
class FullPoolError(PoolError):
class ClosedPoolError(PoolError):
class LocationValueError(ValueError, HTTPError):
class LocationParseError(LocationValueError):
class URLSchemeUnknown(LocationValueError):
class ResponseError(HTTPError):
class SecurityWarning(HTTPWarning):
class InsecureRequestWarning(SecurityWarning):
class NotOpenSSLWarning(SecurityWarning):
class SystemTimeWarning(SecurityWarning):
class InsecurePlatformWarning(SecurityWarning):
class DependencyWarning(HTTPWarning):
class ResponseNotChunked(ProtocolError, ValueError):
class BodyNotHttplibCompatible(HTTPError):
class IncompleteRead(HTTPError, httplib_IncompleteRead):
class InvalidChunkLength(HTTPError, httplib_IncompleteRead):
class InvalidHeader(HTTPError):
class ProxySchemeUnknown(AssertionError, URLSchemeUnknown):
class ProxySchemeUnsupported(ValueError):
class HeaderParsingError(HTTPError):
class UnrewindableBodyError(HTTPError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\fields.py
-----------------------------
>     """
      Guess the "Content-Type" of a file.
  
      :param filename:
def guess_content_type(
def format_header_param_rfc2231(name: str, value: _TYPE_FIELD_VALUE) -> str:
def format_multipart_header_param(name: str, value: _TYPE_FIELD_VALUE) -> str:
def format_header_param_html5(name: str, value: _TYPE_FIELD_VALUE) -> str:
def format_header_param(name: str, value: _TYPE_FIELD_VALUE) -> str:
class RequestField:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\filepost.py
-----------------------------
>     """
      Our embarrassingly-simple replacement for mimetools.choose_boundary.
def choose_boundary() -> str:
def iter_field_objects(fields: _TYPE_FIELDS) -> typing.Iterable[RequestField]:
def encode_multipart_formdata(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\poolmanager.py
-----------------------------
>     """
      All known keyword arguments that could be provided to the pool manager, its
      pools, or the underlying connections.
  
class PoolKey(typing.NamedTuple):
def _default_key_normalizer(
class PoolManager(RequestMethods):
class ProxyManager(PoolManager):
def proxy_from_url(url: str, **kw: typing.Any) -> ProxyManager:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\response.py
-----------------------------
>     """
      From RFC7231:
          If one or more encodings have been applied to a representation, the
          sender that applied the encodings MUST generate a Content-Encoding
class ContentDecoder:
class DeflateDecoder(ContentDecoder):
class GzipDecoderState:
class GzipDecoder(ContentDecoder):
class MultiDecoder(ContentDecoder):
def _get_decoder(mode: str) -> ContentDecoder:
class BytesQueueBuffer:
class BaseHTTPResponse(io.IOBase):
class HTTPResponse(BaseHTTPResponse):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\_base_connection.py
-----------------------------
>             """Whether the connection either is brand new or has been previously closed.
              If this property is True then both ``is_connected`` and 
``has_connected_to_proxy``
              properties must be False.
class ProxyConfig(typing.NamedTuple):
class _ResponseOptions(typing.NamedTuple):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\_collections.py
-----------------------------
>     """
      Provides a thread-safe dict-like container which maintains up to
      ``maxsize`` keys while throwing away the least-recently-used keys beyond
      ``maxsize``.
class _Sentinel(Enum):
def ensure_can_construct_http_header_dict(
class RecentlyUsedContainer(typing.Generic[_KT, _VT], typing.MutableMapping[_KT, _VT]):
class HTTPHeaderDictItemView(set[tuple[str, str]]):
class HTTPHeaderDict(typing.MutableMapping[str, str]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\_request_methods.py
-----------------------------
>     """
      Convenience mixin for classes who implement a :meth:`urlopen` method, such
      as :class:`urllib3.HTTPConnectionPool` and
      :class:`urllib3.PoolManager`.
class RequestMethods:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\urllib3\__init__.py
-----------------------------
> """
  Python HTTP library with thread-safe connection pooling, file post support, user friendly, 
and more
def add_stderr_logger(
def disable_warnings(category: type[Warning] = exceptions.HTTPWarning) -> None:
def request(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\lifespan\off.py
-----------------------------
class LifespanOff:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\lifespan\on.py
-----------------------------
class LifespanOn:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\lifespan\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\loops\asyncio.py
-----------------------------
def asyncio_setup(use_subprocess: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\loops\auto.py
-----------------------------
def auto_loop_setup(use_subprocess: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\loops\uvloop.py
-----------------------------
def uvloop_setup(use_subprocess: bool = False) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\loops\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\middleware\asgi2.py
-----------------------------
class ASGI2Middleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\middleware\message_logger.py
-----------------------------
>     """
      Return an ASGI message, with any body-type content omitted and replaced
      with a placeholder.
def message_with_placeholders(message: Any) -> Any:
class MessageLoggerMiddleware:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\middleware\proxy_headers.py
-----------------------------
>     """Middleware for handling known proxy headers
  
      This middleware can be used when a known proxy is fronting the application,
      and is trusted to be properly setting the `X-Forwarded-Proto` and
class ProxyHeadersMiddleware:
def _parse_raw_hosts(value: str) -> list[str]:
class _TrustedHosts:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\middleware\wsgi.py
-----------------------------
>     """
      Builds a scope and request message into a WSGI environ object.
def build_environ(scope: HTTPScope, message: ASGIReceiveEvent, body: io.BytesIO) -> Environ:
class _WSGIMiddleware:
class WSGIResponder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\middleware\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\http\auto.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\http\flow_control.py
-----------------------------
class FlowControl:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py
-----------------------------
>         """
          Called by the server to commence a graceful shutdown.
def _get_status_phrase(status_code: int) -> bytes:
class H11Protocol(asyncio.Protocol):
class RequestResponseCycle:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py
-----------------------------
>         """
          Called by the server to commence a graceful shutdown.
def _get_status_line(status_code: int) -> bytes:
class HttpToolsProtocol(asyncio.Protocol):
class RequestResponseCycle:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\http\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\websockets\auto.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py
-----------------------------
>         """
          This hook is called to determine if the websocket should return
          an HTTP response and close.
  
class Server:
class WebSocketProtocol(WebSocketServerProtocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\websockets\websockets_sansio_impl.py
-----------------------------
>         """Called when a connection is made."""
          transport = cast(Transport, transport)
          self.connections.add(self)
          self.transport = transport
class WebSocketsSansIOProtocol(asyncio.Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py
-----------------------------
>         """
          Called by the transport when the write buffer exceeds the high water mark.
class WSProtocol(asyncio.Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\websockets\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\utils.py
-----------------------------
class ClientDisconnected(OSError): ...
def get_remote_addr(transport: asyncio.Transport) -> tuple[str, int] | None:
def get_local_addr(transport: asyncio.Transport) -> tuple[str, int] | None:
def is_ssl(transport: asyncio.Transport) -> bool:
def get_client_addr(scope: WWWScope) -> str:
def get_path_with_query_string(scope: WWWScope) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\protocols\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\supervisors\basereload.py
-----------------------------
>         """
          A signal handler that is registered with the parent process.
class BaseReload:
def _display_path(path: Path) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\supervisors\multiprocess.py
-----------------------------
class Process:
class Multiprocess:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\supervisors\statreload.py
-----------------------------
class StatReload(BaseReload):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\supervisors\watchfilesreload.py
-----------------------------
class FileFilter:
class WatchFilesReload(BaseReload):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\supervisors\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\config.py
-----------------------------
def create_ssl_context(
def is_dir(path: Path) -> bool:
def resolve_reload_patterns(patterns_list: list[str], directories_list: list[str]) -> tuple[list[str], list[Path]]:
def _normalize_dirs(dirs: list[str] | str | None) -> list[str]:
class Config:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\importer.py
-----------------------------
class ImportFromStringError(Exception):
def import_from_string(import_str: Any) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\logging.py
-----------------------------
>     """
      A custom log formatter class that:
  
      * Outputs the LOG_LEVEL with an appropriate color.
class ColourizedFormatter(logging.Formatter):
class DefaultFormatter(ColourizedFormatter):
class AccessFormatter(ColourizedFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\main.py
-----------------------------
def print_version(ctx: click.Context, param: click.Parameter, value: bool) -> None:
def main(
def run(
def __getattr__(name: str) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\server.py
-----------------------------
>     """
      Shared servers state that is available between all protocol instances.
class ServerState:
class Server:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\workers.py
-----------------------------
>     """
      A worker class for Gunicorn that interfaces with an ASGI consumer callable,
      rather than a WSGI callable.
class UvicornWorker(Worker):
class UvicornH11Worker(UvicornWorker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\_subprocess.py
-----------------------------
> """
  Some light wrappers around Python's multiprocessing, to deal with cleanly
  starting child processes.
def get_subprocess(
def subprocess_started(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\_types.py
-----------------------------
> """
  Copyright (c) Django Software Foundation and individual contributors.
  All rights reserved.
  
class ASGIVersions(TypedDict):
class HTTPScope(TypedDict):
class WebSocketScope(TypedDict):
class LifespanScope(TypedDict):
class HTTPRequestEvent(TypedDict):
class HTTPResponseDebugEvent(TypedDict):
class HTTPResponseStartEvent(TypedDict):
class HTTPResponseBodyEvent(TypedDict):
class HTTPResponseTrailersEvent(TypedDict):
class HTTPServerPushEvent(TypedDict):
class HTTPDisconnectEvent(TypedDict):
class WebSocketConnectEvent(TypedDict):
class WebSocketAcceptEvent(TypedDict):
class _WebSocketReceiveEventBytes(TypedDict):
class _WebSocketReceiveEventText(TypedDict):
class _WebSocketSendEventBytes(TypedDict):
class _WebSocketSendEventText(TypedDict):
class WebSocketResponseStartEvent(TypedDict):
class WebSocketResponseBodyEvent(TypedDict):
class WebSocketDisconnectEvent(TypedDict):
class WebSocketCloseEvent(TypedDict):
class LifespanStartupEvent(TypedDict):
class LifespanShutdownEvent(TypedDict):
class LifespanStartupCompleteEvent(TypedDict):
class LifespanStartupFailedEvent(TypedDict):
class LifespanShutdownCompleteEvent(TypedDict):
class LifespanShutdownFailedEvent(TypedDict):
class ASGI2Protocol(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\uvicorn\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\bash\__init__.py
-----------------------------
class BashActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\batch\__init__.py
-----------------------------
class BatchActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\cshell\__init__.py
-----------------------------
class CShellActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\fish\__init__.py
-----------------------------
class FishActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\nushell\__init__.py
-----------------------------
>         """
          Nushell supports raw strings like: r###'this is a string'###.
  
          https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md
class NushellActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\powershell\__init__.py
-----------------------------
>         """
          This should satisfy PowerShell quoting rules [1], unless the quoted
          string is passed directly to Windows native commands [2].
  
class PowerShellActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\python\activate_this.py
-----------------------------
> """
  Activate virtualenv for current interpreter:
  
  import runpy

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\python\__init__.py
-----------------------------
class PythonActivator(ViaTemplateActivator):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\activator.py
-----------------------------
>     """Generates activate script for the virtual environment."""
  
      def __init__(self, options) -> None:
class Activator(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\via_template.py
-----------------------------
>         """
          Quote strings in the activation script.
  
          :param string: the string to quote
class ViaTemplateActivator(Activator, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\activation\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\app_data\base.py
-----------------------------
> """Application data stored by virtualenv."""
  
  from __future__ import annotations
  
class AppData(ABC):
class ContentStore(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\app_data\na.py
-----------------------------
>     """No application cache available (most likely as we don't have write permissions)."""
  
      transient = True
      can_update = False
class AppDataDisabled(AppData):
class ContentStoreNA(ContentStore):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\app_data\read_only.py
-----------------------------
class ReadOnlyAppData(AppDataDiskFolder):
class _PyInfoStoreDiskReadOnly(PyInfoStoreDisk):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\app_data\via_disk_folder.py
-----------------------------
> """
  A rough layout of the current storage goes as:
  
  virtualenv-app-data
class AppDataDiskFolder(AppData):
class JSONStoreDisk(ContentStore, ABC):
class PyInfoStoreDisk(JSONStoreDisk):
class EmbedDistributionUpdateStoreDisk(JSONStoreDisk):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\app_data\via_tempdir.py
-----------------------------
>         """This is a temporary folder, is already empty to start with."""
  
      def close(self):
          LOGGER.debug("remove temporary app data folder %s", self.lock.path)
class TempAppData(AppDataDiskFolder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\app_data\__init__.py
-----------------------------
> """Application data stored by virtualenv."""
  
  from __future__ import annotations
  
def _default_app_data_dir(env):
def make_app_data(folder, **kwargs):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\cache\cache.py
-----------------------------
>     """
      A generic cache interface.
  
      Add a close() method if the cache needs to perform any cleanup actions,
class Cache(ABC, Generic[K]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\cache\file_cache.py
-----------------------------
>         """Get a value from the file cache."""
          result, store = None, self.store_factory(key)
          with store.locked():
              if store.exists():
class FileCache(Cache):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\cache\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\config\cli\parser.py
-----------------------------
>     """Custom option parser which updates its defaults by checking the configuration files 
and environmental vars."""
  
      def __init__(self, options=None, env=None, *args, **kwargs) -> None:
          env = os.environ if env is None else env
class VirtualEnvOptions(Namespace):
class VirtualEnvConfigParser(ArgumentParser):
class HelpFormatter(ArgumentDefaultsHelpFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\config\cli\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\config\convert.py
-----------------------------
>         """no op."""
  
      def convert(self, value, flatten=True):  # noqa: ARG002, FBT002
          values = self.split_values(value)
class TypeData:
class BoolType(TypeData):
class NoneType(TypeData):
class ListType(TypeData):
def convert(value, as_type, source):
def get_type(action):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\config\env_var.py
-----------------------------
>     """
      Get the environment variable option.
  
      :param key: the config key requested
def get_env_var(key, as_type, env):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\config\ini.py
-----------------------------
class IniConfig:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\config\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\common.py
-----------------------------
>     """Create a CPython virtual environment on POSIX platforms."""
  
      @classmethod
      def _executables(cls, interpreter):
class CPython(ViaGlobalRefVirtualenvBuiltin, ABC):
class CPythonPosix(CPython, PosixSupports, ABC):
class CPythonWindows(CPython, WindowsSupports, ABC):
def is_mac_os_framework(interpreter):
def is_macos_brew(interpreter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\cpython3.py
-----------------------------
>     """CPython 3 or later."""
  
  
  class CPython3Posix(CPythonPosix, CPython3):
class CPython3(CPython, Python3Supports, abc.ABC):
class CPython3Posix(CPythonPosix, CPython3):
class CPython3Windows(CPythonWindows, CPython3):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\mac_os.py
-----------------------------
> """The Apple Framework builds require their own customization."""
  
  from __future__ import annotations
  
class CPythonmacOsFramework(CPython, ABC):
class CPython3macOsFramework(CPythonmacOsFramework, CPython3, CPythonPosix):
def fix_mach_o(exe, current, new, max_size):
def _builtin_change_mach_o(maxint):  # noqa: C901
class CPython3macOsBrew(CPython3, CPythonPosix):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\cpython\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\graalpy\__init__.py
-----------------------------
class GraalPy(ViaGlobalRefVirtualenvBuiltin, ABC):
class GraalPyPosix(GraalPy, PosixSupports):
class GraalPyWindows(GraalPy, WindowsSupports):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\pypy\common.py
-----------------------------
class PyPy(ViaGlobalRefVirtualenvBuiltin, abc.ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\pypy\pypy3.py
-----------------------------
>     """PyPy 3 on POSIX."""
  
      @classmethod
      def _shared_libs(cls, python_dir):
class PyPy3(PyPy, Python3Supports, abc.ABC):
class PyPy3Posix(PyPy3, PosixSupports):
class Pypy3Windows(PyPy3, WindowsSupports):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\pypy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\builtin_way.py
-----------------------------
>     """A creator that does operations itself without delegation, if we can create it we can 
also describe it."""
  
      def __init__(self, options, interpreter) -> None:
          Creator.__init__(self, options, interpreter)
class VirtualenvBuiltin(Creator, Describe, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\ref.py
-----------------------------
> """
  Virtual environments in the traditional sense are built as reference to the host python. 
This file allows declarative
  references to elements on the file system, allowing our system to automatically detect what 
modes it can support given
  the constraints: e.g. can the file system symlink, can the files be read, executed, etc.
class RefMust:
class RefWhen:
class PathRef(ABC):
class ExePathRef(PathRef, ABC):
class PathRefToDest(PathRef):
class ExePathRefToDest(PathRefToDest, ExePathRef):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\via_global_self_do.py
-----------------------------
>         """By default, all built-in methods assume that if we can describe it we can create 
it."""
          # first we must be able to describe it
          if not cls.can_describe(interpreter):
              return None
class BuiltinViaGlobalRefMeta(ViaGlobalRefMeta):
class ViaGlobalRefVirtualenvBuiltin(ViaGlobalRefApi, VirtualenvBuiltin, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\builtin\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\api.py
-----------------------------
>         """Patch the distutils package to not be derailed by its configuration files."""
          with self.app_data.ensure_extracted(Path(__file__).parent / "_virtualenv.py") as 
resolved_path:
              text = resolved_path.read_text(encoding="utf-8")
              return text.replace('"__SCRIPT_DIR__"', 
repr(os.path.relpath(str(self.script_dir), str(self.purelib))))
class ViaGlobalRefMeta(CreatorMeta):
class ViaGlobalRefApi(Creator, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\store.py
-----------------------------
def handle_store_python(meta, interpreter):
def is_store_python(interpreter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\venv.py
-----------------------------
>         """
          PyPy <= 3.6 (v7.3.3) for Windows contains only pypy3.exe and pypy3w.exe
          Venv does not handle non-existing exe sources, e.g. python.exe, so this
          patch does it.
class Venv(ViaGlobalRefApi):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\_virtualenv.py
-----------------------------
> """Patches that are applied at runtime to the virtual environment."""
  
  from __future__ import annotations
  
def patch_dist(dist):
class _Finder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\via_global_ref\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\creator.py
-----------------------------
>     """A class that given a python Interpreter creates a virtual environment."""
  
      def __init__(self, options, interpreter) -> None:
class CreatorMeta:
class Creator(ABC):
def get_env_debug_info(env_exe, debug_script, app_data, env):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\debug.py
-----------------------------
> """Inspect a target Python interpreter virtual environment wise."""
  
  from __future__ import annotations
  
def encode_path(value):
def encode_list_path(value):
def run():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\describe.py
-----------------------------
>     """Given a host interpreter tell us information about what the created interpreter 
might look like."""
  
      suffix = ".exe" if IS_WIN else ""
  
class Describe:
class Python3Supports(Describe, ABC):
class PosixSupports(Describe, ABC):
class WindowsSupports(Describe, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\pyenv_cfg.py
-----------------------------
class PyEnvCfg:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\create\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\windows\pep514.py
-----------------------------
> """Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows 
only."""
  
  from __future__ import annotations
  
def enum_keys(key):
def get_value(key, value_name):
def discover_pythons():
def process_set(hive, hive_name, key, flags, default_arch):
def process_company(hive_name, company, root_key, default_arch):
def process_tag(hive_name, company, company_key, tag, default_arch):
def load_exe(hive_name, company, company_key, tag):
def load_arch_data(hive_name, company, tag, tag_key, default_arch):
def parse_arch(arch_str):
def load_version_data(hive_name, company, tag, tag_key):
def parse_version(version_str):
def load_threaded(hive_name, company, tag, tag_key):
def msg(path, what):
def _run():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\windows\__init__.py
-----------------------------
>     """A Python information acquired from PEP-514."""
  
  
  def propose_interpreters(spec, cache_dir, env):
class Pep514PythonInfo(PythonInfo):
def propose_interpreters(spec, cache_dir, env):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\builtin.py
-----------------------------
>     """Given a spec, return a function that can be called on a path to find all matching 
files in it."""
      pat = spec.generate_re(windows=sys.platform == "win32")
      direct = spec.str_spec
      if sys.platform == "win32":
class Builtin(Discover):
def get_interpreter(
def propose_interpreters(  # noqa: C901, PLR0912, PLR0915
def get_paths(env: Mapping[str, str]) -> Generator[Path, None, None]:
class LazyPathDump:
def path_exe_finder(spec: PythonSpec) -> Callable[[Path], Generator[tuple[Path, bool], None, None]]:
class PathPythonInfo(PythonInfo):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\cached_py_info.py
-----------------------------
> """
  
  We acquire the python information by running an interrogation script via subprocess 
trigger. This operation is not
  cheap, especially not on Windows. To not have to pay this hefty cost every time we apply 
multiple levels of
def from_exe(  # noqa: PLR0913
def _get_from_cache(cls, app_data: AppData, exe: str, env, cache: Cache, *, ignore_cache: bool) -> PythonInfo:  # noqa: PLR0913
def _get_via_file_cache(cls, app_data: AppData, path: Path, exe: str, env, cache: Cache) -> PythonInfo:  # noqa: PLR0913
def gen_cookie():
def _run_subprocess(cls, exe, app_data, env):
class LogCmd:
def clear(app_data=None, cache=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\discover.py
-----------------------------
>     """Discover and provide the requested Python interpreter."""
  
      @classmethod
      def add_parser_arguments(cls, parser):
class Discover(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\info.py
-----------------------------
>     """Check if the file system is case-sensitive."""
      global _FS_CASE_SENSITIVE  # noqa: PLW0603
  
      if _FS_CASE_SENSITIVE is None:
def fs_is_case_sensitive():
def fs_path_id(path: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\py_info.py
-----------------------------
> """
  The PythonInfo contains information about a concrete instance of a Python interpreter.
  
  Note: this file is also used to query target interpreters, so can only use standard library 
methods
def _get_path_extensions():
class PythonInfo:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\py_spec.py
-----------------------------
> """A Python specification is an abstract requirement definition of an interpreter."""
  
  from __future__ import annotations
  
class PythonSpec:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\discovery\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\plugin\activators.py
-----------------------------
class ActivationSelector(ComponentBuilder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\plugin\base.py
-----------------------------
class PluginLoader:
class ComponentBuilder(PluginLoader):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\plugin\creators.py
-----------------------------
class CreatorInfo(NamedTuple):
class CreatorSelector(ComponentBuilder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\plugin\discovery.py
-----------------------------
>     """Discovery plugins."""
  
  
  def get_discover(parser, args):
class Discovery(PluginLoader):
def get_discover(parser, args):
def _get_default_discovery(discover_types):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\plugin\seeders.py
-----------------------------
class SeederSelector(ComponentBuilder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\plugin\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\session.py
-----------------------------
>     """Represents a virtual environment creation session."""
  
      def __init__(self, verbosity, app_data, interpreter, creator, seeder, activators) -> 
None:  # noqa: PLR0913
          self._verbosity = verbosity
class Session:
class _Debug:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\run\__init__.py
-----------------------------
>     """
      Create a virtual environment given some command line interface arguments.
  
      :param args: the command line arguments
def cli_run(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
def session_via_cli(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
def build_parser(args=None, options=None, setup_logging=True, env=None):  # noqa: FBT002
def build_parser_only(args=None):
def handle_extra_commands(options):
def load_app_data(args, parser, options):
def add_version_flag(parser):
def _do_report_setup(parser, args, setup_logging):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\base.py
-----------------------------
class PipInstall(ABC):
class ScriptMakerCustom(ScriptMaker):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\copy.py
-----------------------------
class CopyPipInstall(PipInstall):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\symlink.py
-----------------------------
class SymlinkPipInstall(PipInstall):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\pip_install\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\via_app_data.py
-----------------------------
> """Bootstrap."""
  
  from __future__ import annotations
  
class FromAppData(BaseEmbed):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\via_app_data\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\base_embed.py
-----------------------------
class BaseEmbed(Seeder, ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\pip_invoke.py
-----------------------------
class PipInvoke(BaseEmbed):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\embed\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\wheels\embed\__init__.py
-----------------------------
def get_embed_wheel(distribution, for_py_version):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\wheels\acquire.py
-----------------------------
> """Bootstrap."""
  
  from __future__ import annotations
  
def get_wheel(  # noqa: PLR0913
def download_wheel(distribution, version_spec, for_py_version, search_dirs, app_data, to_folder, env):  # noqa: PLR0913
def _find_downloaded_wheel(distribution, version_spec, for_py_version, to_folder, out):
def find_compatible_in_house(distribution, version_spec, for_py_version, in_folder):
def pip_wheel_env_run(search_dirs, app_data, env):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\wheels\bundle.py
-----------------------------
>     """Load the bundled wheel to a cache directory."""
      of_version = Version.of_version(version)
      wheel = load_embed_wheel(app_data, distribution, for_py_version, of_version)
  
def from_bundle(distribution, version, for_py_version, search_dirs, app_data, do_periodic_update, env):  # noqa: PLR0913
def load_embed_wheel(app_data, distribution, for_py_version, version):
def from_dir(distribution, version, for_py_version, directories):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\wheels\periodic_update.py
-----------------------------
> """Periodically update bundled versions."""
  
  from __future__ import annotations
  
def periodic_update(  # noqa: PLR0913
def handle_auto_update(distribution, for_py_version, wheel, search_dirs, app_data, env):  # noqa: PLR0913
def add_wheel_to_update_log(wheel, for_py_version, app_data):
def dump_datetime(value):
def load_datetime(value):
class NewVersion:  # noqa: PLW1641
class UpdateLog:
def trigger_update(distribution, for_py_version, wheel, search_dirs, app_data, env, periodic):  # noqa: PLR0913
def do_update(distribution, for_py_version, embed_filename, app_data, search_dirs, periodic):  # noqa: PLR0913
def _run_do_update(  # noqa: C901, PLR0913
def release_date_for_wheel_path(dest):
def _request_context():
def _pypi_get_distribution_info_cached(distribution):
def _pypi_get_distribution_info(distribution):
def manual_upgrade(app_data, env):
def _run_manual_upgrade(app_data, distribution, for_py_version, env):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\wheels\util.py
-----------------------------
class Wheel:
def discover_wheels(from_folder, distribution, version, for_py_version):
class Version:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\wheels\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\seeder.py
-----------------------------
>     """A seeder will install some seed packages into a virtual environment."""
  
      def __init__(self, options, enabled) -> None:
class Seeder(ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\seed\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\path\_permission.py
-----------------------------
def make_exe(filename):
def set_tree(folder, stat):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\path\_sync.py
-----------------------------
def ensure_dir(path):
def ensure_safe_to_do(src, dest):
def symlink(src, dest):
def copy(src, dest):
def copytree(src, dest):
def safe_delete(dest):
class _Debug:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\path\_win.py
-----------------------------
>     """Gets the short path name of a given long path - 
http://stackoverflow.com/a/23598461/200291."""
      import ctypes  # noqa: PLC0415
      from ctypes import wintypes  # noqa: PLC0415
  
def get_short_path_name(long_name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\path\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\subprocess\__init__.py
-----------------------------
def run_cmd(cmd):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\error.py
-----------------------------
> """Errors."""
  
  from __future__ import annotations
  
class ProcessCallFailedError(RuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\lock.py
-----------------------------
> """holds locking functionality that works across processes."""
  
  from __future__ import annotations
  
class _CountedFileLock(FileLock):
class PathLockBase(ABC):
class ReentrantFileLock(PathLockBase):
class NoOpFileLock(PathLockBase):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\zipapp.py
-----------------------------
def read(full_path):
def extract(full_path, dest):
def _get_path_within_zip(full_path):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\util\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\info.py
-----------------------------
def fs_is_case_sensitive():
def fs_supports_symlink():
def fs_path_id(path: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\report.py
-----------------------------
def setup_report(verbosity, show_pid=False):  # noqa: FBT002
def _clean_handlers(log):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\virtualenv\__main__.py
-----------------------------
def run(args=None, options=None, env=None):
class LogSession:
def run_with_catch(args=None, env=None):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\api.py
-----------------------------
>     """Thread-safe event queue based on a special queue that skips adding
      the same event (:class:`FileSystemEvent`) multiple times consecutively.
      Thus avoiding dispatching multiple event handling
      calls when multiple identical events are produced quicker than an observer
class EventQueue(SkipRepeatsQueue):
class ObservedWatch:
class EventEmitter(BaseThread):
class EventDispatcher(BaseThread):
class BaseObserver(EventDispatcher):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\fsevents.py
-----------------------------
> """:module: watchdog.observers.fsevents
  :synopsis: FSEvents based emitter implementation.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class FSEventsEmitter(EventEmitter):
class FSEventsObserver(BaseObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\fsevents2.py
-----------------------------
> """:module: watchdog.observers.fsevents2
  :synopsis: FSEvents based emitter implementation.
  :author: thomas.amland@gmail.com (Thomas Amland)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class FSEventsQueue(Thread):
class NativeEvent:
class FSEventsEmitter(EventEmitter):
class FSEventsObserver2(BaseObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\inotify.py
-----------------------------
> """:module: watchdog.observers.inotify
  :synopsis: ``inotify(7)`` based emitter implementation.
  :author: Sebastien Martini <seb@dbzteam.org>
  :author: Luke McCarthy <luke@iogopro.co.uk>
class InotifyEmitter(EventEmitter):
class InotifyFullEmitter(InotifyEmitter):
class InotifyObserver(BaseObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\inotify_buffer.py
-----------------------------
> """:module: watchdog.observers.inotify_buffer
  :synopsis: A wrapper for ``Inotify``.
  :author: thomas.amland@gmail.com (Thomas Amland)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class InotifyBuffer(BaseThread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\inotify_c.py
-----------------------------
>     """Structure representation of the inotify_event structure
      (used in buffer size calculations)::
  
          struct inotify_event {
class InotifyConstants:
class InotifyEventStruct(ctypes.Structure):
class Inotify:
class InotifyEvent:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\kqueue.py
-----------------------------
> """:module: watchdog.observers.kqueue
  :synopsis: ``kqueue(2)`` based emitter implementation.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
def absolute_path(path: bytes | str) -> bytes | str:
def is_deleted(kev: select.kevent) -> bool:
def is_modified(kev: select.kevent) -> bool:
def is_attrib_modified(kev: select.kevent) -> bool:
def is_renamed(kev: select.kevent) -> bool:
class KeventDescriptorSet:
class KeventDescriptor:
class KqueueEmitter(EventEmitter):
class KqueueObserver(BaseObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\polling.py
-----------------------------
> """:module: watchdog.observers.polling
  :synopsis: Polling emitter implementation.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class PollingEmitter(EventEmitter):
class PollingObserver(BaseObserver):
class PollingObserverVFS(BaseObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\read_directory_changes.py
-----------------------------
>     """Windows API-based emitter that uses ReadDirectoryChangesW
      to detect file system changes for a watch.
class WindowsApiEmitter(EventEmitter):
class WindowsApiObserver(BaseObserver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\winapi.py
-----------------------------
> """:module: watchdog.observers.winapi
  :synopsis: Windows API-Python interface (removes dependency on ``pywin32``).
  :author: theller@ctypes.org (Thomas Heller)
  :author: will@willmcgugan.com (Will McGugan)
class OVERLAPPED(ctypes.Structure):
def _errcheck_bool(value: Any | None, func: Any, args: Any) -> Any:
def _errcheck_handle(value: Any | None, func: Any, args: Any) -> Any:
def _errcheck_dword(value: Any | None, func: Any, args: Any) -> Any:
class FileNotifyInformation(ctypes.Structure):
def _parse_event_buffer(read_buffer: bytes, n_bytes: int) -> list[tuple[int, str]]:
def _is_observed_path_deleted(handle: HANDLE, path: str) -> bool:
def _generate_observed_path_deleted_event() -> tuple[bytes, int]:
def get_directory_handle(path: str) -> HANDLE:
def close_directory_handle(handle: HANDLE) -> None:
def read_directory_changes(handle: HANDLE, path: str, *, recursive: bool) -> tuple[bytes, int]:
class WinAPINativeEvent:
def read_events(handle: HANDLE, path: str, *, recursive: bool) -> list[WinAPINativeEvent]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\observers\__init__.py
-----------------------------
> """:module: watchdog.observers
  :synopsis: Observer that picks a native implementation if available.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class ObserverType(Protocol):
def _get_observer_cls() -> ObserverType:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\tricks\__init__.py
-----------------------------
> """:module: watchdog.tricks
  :synopsis: Utility event handlers.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class Trick(PatternMatchingEventHandler):
class LoggerTrick(Trick):
class ShellCommandTrick(Trick):
class AutoRestartTrick(Trick):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\bricks.py
-----------------------------
> """Utility collections or "bricks".
  
  :module: watchdog.utils.bricks
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
class SkipRepeatsQueue(queue.Queue):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\delayed_queue.py
-----------------------------
> """:module: watchdog.utils.delayed_queue
  :author: thomas.amland@gmail.com (Thomas Amland)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class DelayedQueue(Generic[T]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\dirsnapshot.py
-----------------------------
> """:module: watchdog.utils.dirsnapshot
  :synopsis: Directory snapshots and comparison.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class DirectorySnapshotDiff:
class DirectorySnapshot:
class EmptyDirectorySnapshot(DirectorySnapshot):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\echo.py
-----------------------------
> """Echo calls made to functions in a module.
  
  "Echoing" a function call means printing out the name of the function
  and the values of its arguments before making the call (which is more
def format_arg_value(arg_val: tuple[str, tuple[Any, ...]]) -> str:
def echo(fn: Callable, write: Callable[[str], int | None] = sys.stdout.write) -> Callable:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\event_debouncer.py
-----------------------------
>     """Background thread for debouncing event handling.
  
      When an event is received, wait until the configured debounce interval
      passes before calling the callback.  If additional events are received
class EventDebouncer(BaseThread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\patterns.py
-----------------------------
> """:module: watchdog.utils.patterns
  :synopsis: Common wildcard searching/filtering functionality for files.
  :author: boris.staletic@gmail.com (Boris Staletic)
  :author: yesudeep@gmail.com (Yesudeep Mangalapilly)
def _match_path(
def filter_paths(
def match_any_paths(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\platform.py
-----------------------------
def get_platform_name() -> str:
def is_linux() -> bool:
def is_bsd() -> bool:
def is_darwin() -> bool:
def is_windows() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\process_watcher.py
-----------------------------
class ProcessWatcher(BaseThread):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\utils\__init__.py
-----------------------------
> """:module: watchdog.utils
  :synopsis: Utility classes and functions.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class UnsupportedLibcError(Exception):
class WatchdogShutdownError(Exception):
class BaseThread(threading.Thread):
def load_module(module_name: str) -> ModuleType:
def load_class(dotted_path: str) -> type[Trick]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\events.py
-----------------------------
> """:module: watchdog.events
  :synopsis: File system events and event handlers.
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
class FileSystemEvent:
class FileSystemMovedEvent(FileSystemEvent):
class FileDeletedEvent(FileSystemEvent):
class FileModifiedEvent(FileSystemEvent):
class FileCreatedEvent(FileSystemEvent):
class FileMovedEvent(FileSystemMovedEvent):
class FileClosedEvent(FileSystemEvent):
class FileClosedNoWriteEvent(FileSystemEvent):
class FileOpenedEvent(FileSystemEvent):
class DirDeletedEvent(FileSystemEvent):
class DirModifiedEvent(FileSystemEvent):
class DirCreatedEvent(FileSystemEvent):
class DirMovedEvent(FileSystemMovedEvent):
class FileSystemEventHandler:
class PatternMatchingEventHandler(FileSystemEventHandler):
class RegexMatchingEventHandler(FileSystemEventHandler):
class LoggingEventHandler(FileSystemEventHandler):
def generate_sub_moved_events(
def generate_sub_created_events(src_dir_path: bytes | str) -> Generator[DirCreatedEvent | FileCreatedEvent]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\watchmedo.py
-----------------------------
> """:module: watchdog.watchmedo
  :author: yesudeep@google.com (Yesudeep Mangalapilly)
  :author: contact@tiger-222.fr (MickaÃ«l Schoentgen)
  :synopsis: ``watchmedo`` shell script utility.
class HelpFormatter(RawDescriptionHelpFormatter):
def argument(*name_or_flags: str, **kwargs: Any) -> Argument:
def command(
def path_split(pathname_spec: str, *, separator: str = os.pathsep) -> list[str]:
def add_to_sys_path(pathnames: list[str], *, index: int = 0) -> None:
def load_config(tricks_file_pathname: str) -> dict:
def parse_patterns(
def observe_with(
def schedule_tricks(observer: BaseObserver, tricks: list[dict], pathname: str, *, recursive: bool) -> None:
def tricks_from(args: Namespace) -> None:
def tricks_generate_yaml(args: Namespace) -> None:
def log(args: Namespace) -> None:
def shell_command(args: Namespace) -> None:
def auto_restart(args: Namespace) -> None:
class LogLevelError(Exception):
def _get_log_level_from_args(args: Namespace) -> str:
def main() -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchdog\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\cli.py
-----------------------------
>     """
      Watch one or more directories and execute either a shell command or a python function 
on file changes.
  
      Example of watching the current directory and calling a python function:
def resolve_path(path_str: str) -> Path:
def cli(*args_: str) -> None:
def import_exit(function_path: str) -> Any:
def build_filter(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\filters.py
-----------------------------
>     """
      Useful base class for creating filters. `BaseFilter` should be inherited and 
configured, rather than used
      directly.
  
class BaseFilter:
class DefaultFilter(BaseFilter):
class PythonFilter(DefaultFilter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\main.py
-----------------------------
>     """
      Enum representing the type of change that occurred.
class Change(IntEnum):
def watch(
def _prep_changes(
def _log_changes(changes: Set[FileChange]) -> None:
def _calc_async_timeout(timeout: Optional[int]) -> int:
def _default_force_polling(force_polling: Optional[bool]) -> bool:
def _default_poll_delay_ms(poll_delay_ms: int) -> int:
def _default_debug(debug: Optional[bool]) -> bool:
def _auto_force_polling() -> bool:
def _default_ignore_permission_denied(ignore_permission_denied: Optional[bool]) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\run.py
-----------------------------
>     """
      Run a process and restart it upon file changes.
  
      `run_process` can work in two ways:
def run_process(
def split_cmd(cmd: str) -> List[str]:
def start_process(
def detect_target_type(target: Union[str, Callable[..., Any]]) -> "Literal['function', 'command']":
class CombinedProcess:
def run_function(function: str, tty_path: Optional[str], args: Tuple[Any, ...], kwargs: Dict[str, Any]) -> None:
def import_string(dotted_path: str) -> Any:
def get_tty_path() -> Optional[str]:  # pragma: no cover
def set_tty(tty_path: Optional[str]) -> Generator[None, None, None]:
def raise_keyboard_interrupt(signum: int, _frame: Any) -> None:  # pragma: no cover
def catch_sigterm() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\watchfiles\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\async_timeout.py
-----------------------------
>         """This decorator can be used to indicate to type checkers that
          the decorated method cannot be overridden, and decorated class
          cannot be subclassed. For example:
  
def timeout(delay: Optional[float]) -> "Timeout":
def timeout_at(deadline: Optional[float]) -> "Timeout":
class _State(enum.Enum):
class Timeout:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\client.py
-----------------------------
>     """
      :mod:`asyncio` implementation of a WebSocket client connection.
  
      :class:`ClientConnection` provides :meth:`recv` and :meth:`send` coroutines
class ClientConnection(Connection):
def process_exception(exc: Exception) -> Exception | None:
class connect:
def unix_connect(
def prepare_connect_request(
class HTTPProxyConnection(asyncio.Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\compatibility.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\connection.py
-----------------------------
>     """
      :mod:`asyncio` implementation of a WebSocket connection.
  
      :class:`Connection` provides APIs shared between WebSocket servers and
class Connection(asyncio.Protocol):
def broadcast(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\messages.py
-----------------------------
>     """
      Simplified version of :class:`asyncio.Queue`.
  
      Provides only the subset of functionality needed by :class:`Assembler`.
class SimpleQueue(Generic[T]):
class Assembler:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\router.py
-----------------------------
>     """WebSocket router supporting :func:`route`."""
  
      def __init__(
          self,
class Router:
def route(
def unix_route(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\server.py
-----------------------------
>     """
      :mod:`asyncio` implementation of a WebSocket server connection.
  
      :class:`ServerConnection` provides :meth:`recv` and :meth:`send` methods for
class ServerConnection(Connection):
class Server:
class serve:
def unix_serve(
def is_credentials(credentials: Any) -> bool:
def basic_auth(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\asyncio\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\extensions\base.py
-----------------------------
>     """
      Base class for extensions.
  
class Extension:
class ClientExtensionFactory:
class ServerExtensionFactory:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\extensions\permessage_deflate.py
-----------------------------
>     """
      Per-Message Deflate extension.
  
class PerMessageDeflate(Extension):
def _build_parameters(
def _extract_parameters(
class ClientPerMessageDeflateFactory(ClientExtensionFactory):
def enable_client_permessage_deflate(
class ServerPerMessageDeflateFactory(ServerExtensionFactory):
def enable_server_permessage_deflate(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\extensions\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\auth.py
-----------------------------
>     """
      WebSocket server protocol that enforces HTTP Basic Auth.
  
def is_credentials(value: Any) -> bool:
class BasicAuthWebSocketServerProtocol(WebSocketServerProtocol):
def basic_auth_protocol_factory(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\client.py
-----------------------------
>     """
      WebSocket client connection.
  
      :class:`WebSocketClientProtocol` provides :meth:`recv` and :meth:`send`
class WebSocketClientProtocol(WebSocketCommonProtocol):
class Connect:
def unix_connect(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\exceptions.py
-----------------------------
>     """
      Raised when a handshake response status code is invalid.
  
class InvalidStatusCode(InvalidHandshake):
class AbortHandshake(InvalidHandshake):
class RedirectHandshake(InvalidHandshake):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\framing.py
-----------------------------
>         """
          Read a WebSocket frame.
  
          Args:
class Frame(NamedTuple):
def prepare_data(data: Data) -> tuple[int, bytes]:
def prepare_ctrl(data: Data) -> bytes:
def parse_close(data: bytes) -> tuple[int, str]:
def serialize_close(code: int, reason: str) -> bytes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\handshake.py
-----------------------------
>     """
      Build a handshake request to send to the server.
  
      Update request headers passed in argument.
def build_request(headers: Headers) -> str:
def check_request(headers: Headers) -> str:
def build_response(headers: Headers, key: str) -> None:
def check_response(headers: Headers, key: str) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\http.py
-----------------------------
>     """
      Decode a bytestring for interpolating into an error message.
  
def d(value: bytes) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\protocol.py
-----------------------------
>     """
      WebSocket connection.
  
      :class:`WebSocketCommonProtocol` provides APIs shared between WebSocket
class WebSocketCommonProtocol(asyncio.Protocol):
def broadcast(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\server.py
-----------------------------
>     """
      WebSocket server connection.
  
      :class:`WebSocketServerProtocol` provides :meth:`recv` and :meth:`send`
class WebSocketServerProtocol(WebSocketCommonProtocol):
class WebSocketServer:
class Serve:
def unix_serve(
def remove_path_argument(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\legacy\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\client.py
-----------------------------
>     """
      :mod:`threading` implementation of a WebSocket client connection.
  
      :class:`ClientConnection` provides :meth:`recv` and :meth:`send` methods for
class ClientConnection(Connection):
def connect(
def unix_connect(
def prepare_connect_request(
def read_connect_response(sock: socket.socket, deadline: Deadline) -> Response:
def connect_http_proxy(
class SSLSSLSocket:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\connection.py
-----------------------------
>     """
      :mod:`threading` implementation of a WebSocket connection.
  
      :class:`Connection` provides APIs shared between WebSocket servers and
class Connection:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\messages.py
-----------------------------
>     """
      Assemble messages from frames.
  
      :class:`Assembler` expects only data frames. The stream of frames must
class Assembler:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\router.py
-----------------------------
>     """WebSocket router supporting :func:`route`."""
  
      def __init__(
          self,
class Router:
def route(
def unix_route(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\server.py
-----------------------------
>     """
      :mod:`threading` implementation of a WebSocket server connection.
  
      :class:`ServerConnection` provides :meth:`recv` and :meth:`send` methods for
class ServerConnection(Connection):
class Server:
def __getattr__(name: str) -> Any:
def serve(
def unix_serve(
def is_credentials(credentials: Any) -> bool:
def basic_auth(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\utils.py
-----------------------------
>     """
      Manage timeouts across multiple steps.
  
      Args:
class Deadline:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\sync\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\auth.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\cli.py
-----------------------------
def print_during_input(string: str) -> None:
def print_over_input(string: str) -> None:
class ReadLines(asyncio.Protocol):
def main(argv: list[str] | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\client.py
-----------------------------
>     """
      Sans-I/O implementation of a WebSocket client connection.
  
      Args:
class ClientProtocol(Protocol):
class ClientConnection(ClientProtocol):
def backoff(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\connection.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\datastructures.py
-----------------------------
>     """
      Exception raised when :class:`Headers` has multiple values for a key.
  
class MultipleValuesError(LookupError):
class Headers(MutableMapping[str, str]):
class SupportsKeysAndGetItem(Protocol):  # pragma: no cover

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\exceptions.py
-----------------------------
> """
  :mod:`websockets.exceptions` defines the following hierarchy of exceptions.
  
  * :exc:`WebSocketException`
class WebSocketException(Exception):
class ConnectionClosed(WebSocketException):
class ConnectionClosedOK(ConnectionClosed):
class ConnectionClosedError(ConnectionClosed):
class InvalidURI(WebSocketException):
class InvalidProxy(WebSocketException):
class InvalidHandshake(WebSocketException):
class SecurityError(InvalidHandshake):
class ProxyError(InvalidHandshake):
class InvalidProxyMessage(ProxyError):
class InvalidProxyStatus(ProxyError):
class InvalidMessage(InvalidHandshake):
class InvalidStatus(InvalidHandshake):
class InvalidHeader(InvalidHandshake):
class InvalidHeaderFormat(InvalidHeader):
class InvalidHeaderValue(InvalidHeader):
class InvalidOrigin(InvalidHeader):
class InvalidUpgrade(InvalidHeader):
class NegotiationError(InvalidHandshake):
class DuplicateParameter(NegotiationError):
class InvalidParameterName(NegotiationError):
class InvalidParameterValue(NegotiationError):
class ProtocolError(WebSocketException):
class PayloadTooBig(WebSocketException):
class InvalidState(WebSocketException, AssertionError):
class ConcurrencyError(WebSocketException, RuntimeError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\frames.py
-----------------------------
>     """Opcode values for WebSocket frames."""
  
      CONT, TEXT, BINARY = 0x00, 0x01, 0x02
      CLOSE, PING, PONG = 0x08, 0x09, 0x0A
class Opcode(enum.IntEnum):
class CloseCode(enum.IntEnum):
class Frame:
class Close:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\headers.py
-----------------------------
>     """
      Build a ``Host`` header.
  
def build_host(
def peek_ahead(header: str, pos: int) -> str | None:
def parse_OWS(header: str, pos: int) -> int:
def parse_token(header: str, pos: int, header_name: str) -> tuple[str, int]:
def parse_quoted_string(header: str, pos: int, header_name: str) -> tuple[str, int]:
def build_quoted_string(value: str) -> str:
def parse_list(
def parse_connection_option(
def parse_connection(header: str) -> list[ConnectionOption]:
def parse_upgrade_protocol(
def parse_upgrade(header: str) -> list[UpgradeProtocol]:
def parse_extension_item_param(
def parse_extension_item(
def parse_extension(header: str) -> list[ExtensionHeader]:
def build_extension_item(
def build_extension(extensions: Sequence[ExtensionHeader]) -> str:
def parse_subprotocol_item(
def parse_subprotocol(header: str) -> list[Subprotocol]:
def build_subprotocol(subprotocols: Sequence[Subprotocol]) -> str:
def validate_subprotocols(subprotocols: Sequence[Subprotocol]) -> None:
def build_www_authenticate_basic(realm: str) -> str:
def parse_token68(header: str, pos: int, header_name: str) -> tuple[str, int]:
def parse_end(header: str, pos: int, header_name: str) -> None:
def parse_authorization_basic(header: str) -> tuple[str, str]:
def build_authorization_basic(username: str, password: str) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\http.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\http11.py
-----------------------------
>     """
      Decode a bytestring for interpolating into an error message.
  
def d(value: bytes) -> str:
class Request:
class Response:
def parse_line(
def parse_headers(
def read_body(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\imports.py
-----------------------------
>     """
      Import ``name`` from ``source`` in ``namespace``.
  
      There are two use cases:
def import_name(name: str, source: str, namespace: dict[str, Any]) -> Any:
def lazy_import(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\protocol.py
-----------------------------
> """Events that :meth:`~Protocol.events_received` may return."""
  
  
  class Side(enum.IntEnum):
class Side(enum.IntEnum):
class State(enum.IntEnum):
class Protocol:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\server.py
-----------------------------
>     """
      Sans-I/O implementation of a WebSocket server connection.
  
      Args:
class ServerProtocol(Protocol):
class ServerConnection(ServerProtocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\streams.py
-----------------------------
>     """
      Generator-based stream reader.
  
      This class doesn't support concurrent calls to :meth:`read_line`,
class StreamReader:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\typing.py
-----------------------------
> """Types supported in a WebSocket message:
  :class:`str` for a Text_ frame, :class:`bytes` for a Binary_.
  
  .. _Text: https://datatracker.ietf.org/doc/html/rfc6455#section-5.6

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\uri.py
-----------------------------
>     """
      WebSocket URI.
  
      Attributes:
class WebSocketURI:
def parse_uri(uri: str) -> WebSocketURI:
class Proxy:
def parse_proxy(proxy: str) -> Proxy:
def get_proxy(uri: WebSocketURI) -> str | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\utils.py
-----------------------------
>     """
      Generate a random key for the Sec-WebSocket-Key header.
  
def generate_key() -> str:
def accept_key(key: str) -> str:
def apply_mask(data: bytes, mask: bytes) -> bytes:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\websockets\__main__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\win32_setctime\_setctime.py
-----------------------------
>     """Set the "ctime" (creation time) attribute of a file given an unix timestamp (Windows 
only)."""
      if not SUPPORTED:
          raise OSError("This function is only available for the Windows platform.")
  
def setctime(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\win32_setctime\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\each.py
-----------------------------
>     """Implement scheduling of test items on all nodes.
  
      If a node gets added after the test run is started then it is
      assumed to replace a node which got removed before it finished
class EachScheduling:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\load.py
-----------------------------
>     """Implement load scheduling across nodes.
  
      This distributes the tests collected across all nodes so each test
      is run just once.  All nodes collect and submit the test suite and
class LoadScheduling:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\loadfile.py
-----------------------------
>     """Implement load scheduling across nodes, but grouping test test file.
  
      This distributes the tests collected across all nodes so each test is run
      just once.  All nodes collect and submit the list of tests and when all
class LoadFileScheduling(LoadScopeScheduling):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\loadgroup.py
-----------------------------
>     """Implement load scheduling across nodes, but grouping test by xdist_group mark.
  
      This class behaves very much like LoadScopeScheduling, but it groups tests by 
xdist_group mark
      instead of the module or class to which they belong to.
class LoadGroupScheduling(LoadScopeScheduling):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\loadscope.py
-----------------------------
>     """Implement load scheduling across nodes, but grouping test by scope.
  
      This distributes the tests collected across all nodes so each test is run
      just once.  All nodes collect and submit the list of tests and when all
class LoadScopeScheduling:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\protocol.py
-----------------------------
class Scheduling(Protocol):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\worksteal.py
-----------------------------
>     """Implement work-stealing scheduling.
  
      Initially, tests are distributed evenly among all nodes.
  
class NodePending(NamedTuple):
class WorkStealingScheduling:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\scheduler\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\dsession.py
-----------------------------
>     """signals an immediate interruption."""
  
  
  class DSession:
class Interrupted(KeyboardInterrupt):
class DSession:
class WorkerStatus(Enum):
class TerminalDistReporter:
def get_default_max_worker_restart(config: pytest.Config) -> int | None:
def get_workers_status_line(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\looponfail.py
-----------------------------
> """
  Implement -f aka looponfailing for pytest.
  
  NOTE that we try to avoid loading and depending on application modules
def pytest_addoption(parser: pytest.Parser) -> None:
def pytest_cmdline_main(config: pytest.Config) -> int | None:
def looponfail_main(config: pytest.Config) -> None:
class RemoteControl:
def repr_pytest_looponfailinfo(
def init_worker_session(
class WorkerFailSession:
class StatRecorder:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\newhooks.py
-----------------------------
> """
  xdist hooks.
  
  Additionally, pytest-xdist will also decorate a few other hooks
def pytest_xdist_setupnodes(
def pytest_xdist_newgateway(gateway: execnet.Gateway) -> None:
def pytest_xdist_rsyncstart(
def pytest_xdist_rsyncfinish(
def pytest_xdist_getremotemodule() -> Any:
def pytest_configure_node(node: WorkerController) -> None:
def pytest_testnodeready(node: WorkerController) -> None:
def pytest_testnodedown(node: WorkerController, error: object | None) -> None:
def pytest_xdist_node_collection_finished(
def pytest_xdist_make_scheduler(
def pytest_xdist_auto_num_workers(config: pytest.Config) -> int:
def pytest_handlecrashitem(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\plugin.py
-----------------------------
>     """Whether distribution mode is on."""
      return config.getoption("dist") != "no" and bool(config.getoption("tx"))
  
  
def pytest_xdist_auto_num_workers(config: pytest.Config) -> int:
def parse_numprocesses(s: str) -> int | Literal["auto", "logical"]:
def pytest_addoption(parser: pytest.Parser) -> None:
def pytest_addhooks(pluginmanager: pytest.PytestPluginManager) -> None:
def pytest_configure(config: pytest.Config) -> None:
def _is_distribution_mode(config: pytest.Config) -> bool:
def pytest_cmdline_main(config: pytest.Config) -> None:
def is_xdist_worker(
def is_xdist_controller(
def get_xdist_worker_id(
def worker_id(request: pytest.FixtureRequest) -> str:
def testrun_uid(request: pytest.FixtureRequest) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\remote.py
-----------------------------
> """
  This module is executed in remote subprocesses and helps to
  control a remote testing session and relay back information.
  It assumes that 'py' is importable and does not have dependencies
class Producer:
def worker_title(title: str) -> None:
class Marker(enum.Enum):
class TestQueue:
class WorkerInteractor:
def serialize_warning_message(
class WorkerInfo(TypedDict):
def getinfodict() -> WorkerInfo:
def setup_config(config: pytest.Config, basetemp: str | None) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\report.py
-----------------------------
>     """Report the collected test difference between two nodes.
  
      :returns: detailed message describing the difference between the given
      collections, or None if they are equal.
def report_collection_diff(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\workermanage.py
-----------------------------
>         """Rsync the set of roots to the node's gateway cwd."""
          if self.roots:
              for root in self.roots:
                  self.rsync(gateway, root, **self.rsyncoptions)
def parse_tx_spec_config(config: pytest.Config) -> list[str]:
class NodeManager:
class HostRSync(execnet.RSync):
def make_reltoroot(roots: Sequence[Path], args: list[str]) -> list[str]:
class Marker(enum.Enum):
class WorkerController:
def unserialize_warning_message(data: dict[str, Any]) -> warnings.WarningMessage:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\_path.py
-----------------------------
>     """
      Implements the interface of ``py.path.local.visit()`` for Path objects,
      to simplify porting the code over from ``py.path.local``.
def visit_path(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\xdist\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\composer.py
-----------------------------
class ComposerError(MarkedYAMLError):
class Composer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\constructor.py
-----------------------------
>         """Block special attributes/methods from being set in a newly created
          object, to prevent user-controlled methods from being called during
class ConstructorError(MarkedYAMLError):
class BaseConstructor:
class SafeConstructor(BaseConstructor):
class FullConstructor(SafeConstructor):
class UnsafeConstructor(FullConstructor):
class Constructor(UnsafeConstructor):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\cyaml.py
-----------------------------
class CBaseLoader(CParser, BaseConstructor, BaseResolver):
class CSafeLoader(CParser, SafeConstructor, Resolver):
class CFullLoader(CParser, FullConstructor, Resolver):
class CUnsafeLoader(CParser, UnsafeConstructor, Resolver):
class CLoader(CParser, Constructor, Resolver):
class CBaseDumper(CEmitter, BaseRepresenter, BaseResolver):
class CSafeDumper(CEmitter, SafeRepresenter, Resolver):
class CDumper(CEmitter, Serializer, Representer, Resolver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\dumper.py
-----------------------------
class BaseDumper(Emitter, Serializer, BaseRepresenter, BaseResolver):
class SafeDumper(Emitter, Serializer, SafeRepresenter, Resolver):
class Dumper(Emitter, Serializer, Representer, Resolver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\emitter.py
-----------------------------
class EmitterError(YAMLError):
class ScalarAnalysis:
class Emitter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\error.py
-----------------------------
class Mark:
class YAMLError(Exception):
class MarkedYAMLError(YAMLError):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\events.py
-----------------------------
class Event(object):
class NodeEvent(Event):
class CollectionStartEvent(NodeEvent):
class CollectionEndEvent(Event):
class StreamStartEvent(Event):
class StreamEndEvent(Event):
class DocumentStartEvent(Event):
class DocumentEndEvent(Event):
class AliasEvent(NodeEvent):
class ScalarEvent(NodeEvent):
class SequenceStartEvent(CollectionStartEvent):
class SequenceEndEvent(CollectionEndEvent):
class MappingStartEvent(CollectionStartEvent):
class MappingEndEvent(CollectionEndEvent):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\loader.py
-----------------------------
class BaseLoader(Reader, Scanner, Parser, Composer, BaseConstructor, BaseResolver):
class FullLoader(Reader, Scanner, Parser, Composer, FullConstructor, Resolver):
class SafeLoader(Reader, Scanner, Parser, Composer, SafeConstructor, Resolver):
class Loader(Reader, Scanner, Parser, Composer, Constructor, Resolver):
class UnsafeLoader(Reader, Scanner, Parser, Composer, Constructor, Resolver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\nodes.py
-----------------------------
class Node(object):
class ScalarNode(Node):
class CollectionNode(Node):
class SequenceNode(CollectionNode):
class MappingNode(CollectionNode):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\parser.py
-----------------------------
class ParserError(MarkedYAMLError):
class Parser:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\reader.py
-----------------------------
class ReaderError(YAMLError):
class Reader(object):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\representer.py
-----------------------------
class RepresenterError(YAMLError):
class BaseRepresenter:
class SafeRepresenter(BaseRepresenter):
class Representer(SafeRepresenter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\resolver.py
-----------------------------
class ResolverError(YAMLError):
class BaseResolver:
class Resolver(BaseResolver):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\scanner.py
-----------------------------
>         """Initialize the scanner."""
          # It is assumed that Scanner and Reader will have a common descendant.
          # Reader do the dirty work of checking for BOM and converting the
          # input data to Unicode. It also adds NUL to the end.
class ScannerError(MarkedYAMLError):
class SimpleKey:
class Scanner:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\serializer.py
-----------------------------
class SerializerError(YAMLError):
class Serializer:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\tokens.py
-----------------------------
class Token(object):
class DirectiveToken(Token):
class DocumentStartToken(Token):
class DocumentEndToken(Token):
class StreamStartToken(Token):
class StreamEndToken(Token):
class BlockSequenceStartToken(Token):
class BlockMappingStartToken(Token):
class BlockEndToken(Token):
class FlowSequenceStartToken(Token):
class FlowMappingStartToken(Token):
class FlowSequenceEndToken(Token):
class FlowMappingEndToken(Token):
class KeyToken(Token):
class ValueToken(Token):
class BlockEntryToken(Token):
class FlowEntryToken(Token):
class AliasToken(Token):
class AnchorToken(Token):
class TagToken(Token):
class ScalarToken(Token):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\yaml\__init__.py
-----------------------------
>     """
      Scan a YAML stream and produce scanning tokens.
def warnings(settings=None):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader):
def load_all(stream, Loader):
def full_load(stream):
def full_load_all(stream):
def safe_load(stream):
def safe_load_all(stream):
def unsafe_load(stream):
def unsafe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper,
def serialize_all(nodes, stream=None, Dumper=Dumper,
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper,
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None,
def add_path_resolver(tag, path, kind=None, Loader=None, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=None):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=None):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
class YAMLObjectMetaclass(type):
class YAMLObject(metaclass=YAMLObjectMetaclass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_distutils_hack\override.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_distutils_hack\__init__.py
-----------------------------
>     """
      Allow selection of distutils by environment variable.
def warn_distutils_present():
def clear_distutils():
def enabled():
def ensure_local_distutils():
def do_override():
class _TrivialRe:
class DistutilsMetaFinder:
def add_shim():
class shim:
def insert_shim():
def remove_shim():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\assertion\rewrite.py
-----------------------------
> """Rewrite assertion AST to produce nice error messages."""
  
  from __future__ import annotations
  
class Sentinel:
class AssertionRewritingHook(importlib.abc.MetaPathFinder, importlib.abc.Loader):
def _write_pyc_fp(
def _write_pyc(
def _rewrite_test(fn: Path, config: Config) -> tuple[os.stat_result, types.CodeType]:
def _read_pyc(
def rewrite_asserts(
def _saferepr(obj: object) -> str:
def _get_maxsize_for_saferepr(config: Config | None) -> int | None:
def _format_assertmsg(obj: object) -> str:
def _should_repr_global_name(obj: object) -> bool:
def _format_boolop(explanations: Iterable[str], is_or: bool) -> str:
def _call_reprcompare(
def _call_assertion_pass(lineno: int, orig: str, expl: str) -> None:
def _check_if_assertion_pass_impl() -> bool:
def traverse_node(node: ast.AST) -> Iterator[ast.AST]:
def _get_assertion_exprs(src: bytes) -> dict[int, str]:
class AssertionRewriter(ast.NodeVisitor):
def try_makedirs(cache_dir: Path) -> bool:
def get_cache_dir(file_path: Path) -> Path:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\assertion\truncate.py
-----------------------------
> """Utilities for truncating assertion output.
  
  Current default behaviour is to truncate assertion explanations at
  terminal lines, unless running with an assertions verbosity level of at least 2 or running 
on CI.
def truncate_if_required(explanation: list[str], item: Item) -> list[str]:
def _get_truncation_parameters(item: Item) -> tuple[bool, int, int]:
def _truncate_explanation(
def _truncate_by_char_count(input_lines: list[str], max_chars: int) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\assertion\util.py
-----------------------------
> """Utilities for assertion debugging."""
  
  from __future__ import annotations
  
class _HighlightFunc(Protocol):
def dummy_highlighter(source: str, lexer: Literal["diff", "python"] = "python") -> str:
def format_explanation(explanation: str) -> str:
def _split_explanation(explanation: str) -> list[str]:
def _format_lines(lines: Sequence[str]) -> list[str]:
def issequence(x: Any) -> bool:
def istext(x: Any) -> bool:
def isdict(x: Any) -> bool:
def isset(x: Any) -> bool:
def isnamedtuple(obj: Any) -> bool:
def isdatacls(obj: Any) -> bool:
def isattrs(obj: Any) -> bool:
def isiterable(obj: Any) -> bool:
def has_default_eq(
def assertrepr_compare(
def _compare_eq_any(
def _diff_text(
def _compare_eq_iterable(
def _compare_eq_sequence(
def _compare_eq_set(
def _compare_gt_set(
def _compare_lt_set(
def _compare_gte_set(
def _compare_lte_set(
def _set_one_sided_diff(
def _compare_eq_dict(
def _compare_eq_cls(
def _notin_text(term: str, text: str, verbose: int = 0) -> list[str]:
def running_on_ci() -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\assertion\__init__.py
-----------------------------
> """Support for presenting detailed information in failing assertions."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def register_assert_rewrite(*names: str) -> None:
class RewriteHook(Protocol):
class DummyRewriteHook:
class AssertionState:
def install_importhook(config: Config) -> rewrite.AssertionRewritingHook:
def pytest_collection(session: Session) -> None:
def pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:
def pytest_sessionfinish(session: Session) -> None:
def pytest_assertrepr_compare(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\config\argparsing.py
-----------------------------
>     """Parser for command line arguments and ini-file values.
  
      :ivar extra_info: Dict of generic param -> value to display in case
          there's an error processing the command line arguments.
class NotSet:
class Parser:
def get_ini_default_for_type(
class ArgumentError(Exception):
class Argument:
class OptionGroup:
class MyOptionParser(argparse.ArgumentParser):
class DropShorterLongHelpFormatter(argparse.HelpFormatter):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\config\compat.py
-----------------------------
>     """
      this helper wraps around hook callers
      until pluggy supports fixingcalls, this one will do
  
def _check_path(path: Path, fspath: LEGACY_PATH) -> None:
class PathAwareHookProxy:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\config\exceptions.py
-----------------------------
>     """Error in pytest usage or invocation."""
  
  
  class PrintHelp(Exception):
class UsageError(Exception):
class PrintHelp(Exception):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\config\findpaths.py
-----------------------------
>     """Parse the given generic '.ini' file using legacy IniConfig parser, returning
      the parsed object.
  
      Raise UsageError if the file cannot be parsed.
def _parse_ini_config(path: Path) -> iniconfig.IniConfig:
def load_config_dict_from_file(
def locate_config(
def get_common_ancestor(
def get_dirs_from_args(args: Iterable[str]) -> list[Path]:
def determine_setup(
def is_fs_root(p: Path) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\config\__init__.py
-----------------------------
> """Command line options, ini-file and conftest.py processing."""
  
  from __future__ import annotations
  
class ExitCode(enum.IntEnum):
class ConftestImportFailure(Exception):
def filter_traceback_for_conftest_import_failure(
def main(
def console_main() -> int:
class cmdline:  # compatibility namespace
def filename_arg(path: str, optname: str) -> str:
def directory_arg(path: str, optname: str) -> str:
def get_config(
def get_plugin_manager() -> PytestPluginManager:
def _prepareconfig(
def _get_directory(path: pathlib.Path) -> pathlib.Path:
def _get_legacy_hook_marks(
class PytestPluginManager(PluginManager):
def _get_plugin_specs_as_list(
class Notset:
def _iter_rewritable_modules(package_files: Iterable[str]) -> Iterator[str]:
class Config:
def _assertion_supported() -> bool:
def create_terminal_writer(
def _strtobool(val: str) -> bool:
def parse_warning_filter(
def _resolve_warning_category(category: str) -> type[Warning]:
def apply_warning_filters(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\mark\expression.py
-----------------------------
> r"""Evaluate match expressions, as used by `-k` and `-m`.
  
  The grammar is:
  
class TokenType(enum.Enum):
class Token:
class ParseError(Exception):
class Scanner:
def expression(s: Scanner) -> ast.Expression:
def expr(s: Scanner) -> ast.expr:
def and_expr(s: Scanner) -> ast.expr:
def not_expr(s: Scanner) -> ast.expr:
def single_kwarg(s: Scanner) -> ast.keyword:
def all_kwargs(s: Scanner) -> list[ast.keyword]:
class MatcherCall(Protocol):
class MatcherNameAdapter:
class MatcherAdapter(Mapping[str, MatcherNameAdapter]):
class Expression:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\mark\structures.py
-----------------------------
>     """A set of values for a set of parameters along with associated marks and
      an optional ID for the set.
  
      Examples::
class _HiddenParam(enum.Enum):
def istestfunc(func) -> bool:
def get_empty_parameterset_mark(
class ParameterSet(NamedTuple):
class Mark:
class MarkDecorator:
def get_unpacked_marks(
def normalize_mark_list(
def store_mark(obj, mark: Mark, *, stacklevel: int = 2) -> None:
class MarkGenerator:
class NodeKeywords(MutableMapping[str, Any]):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\mark\__init__.py
-----------------------------
> """Generic mechanism for marking and selecting python functions."""
  
  from __future__ import annotations
  
def param(
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
class KeywordMatcher:
def deselect_by_keyword(items: list[Item], config: Config) -> None:
class MarkMatcher:
def deselect_by_mark(items: list[Item], config: Config) -> None:
def _parse_expression(expr: str, exc_message: str) -> Expression:
def pytest_collection_modifyitems(items: list[Item], config: Config) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_code\code.py
-----------------------------
>     """Wrapper around Python code objects."""
  
      __slots__ = ("raw",)
  
class Code:
class Frame:
class TracebackEntry:
class Traceback(list[TracebackEntry]):
def stringify_exception(
class ExceptionInfo(Generic[E]):
class FormattedExcinfo:
class TerminalRepr:
class ExceptionRepr(TerminalRepr):
class ExceptionChainRepr(ExceptionRepr):
class ReprExceptionInfo(ExceptionRepr):
class ReprTraceback(TerminalRepr):
class ReprTracebackNative(ReprTraceback):
class ReprEntryNative(TerminalRepr):
class ReprEntry(TerminalRepr):
class ReprFileLocation(TerminalRepr):
class ReprLocals(TerminalRepr):
class ReprFuncArgs(TerminalRepr):
def getfslineno(obj: object) -> tuple[str | Path, int]:
def _byte_offset_to_character_offset(str, offset):
def filter_traceback(entry: TracebackEntry) -> bool:
def filter_excinfo_traceback(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_code\source.py
-----------------------------
>     """An immutable object holding a source code fragment.
  
      When using Source(...), the source lines are deindented.
class Source:
def findsource(obj) -> tuple[Source | None, int]:
def getrawcode(obj: object, trycall: bool = True) -> types.CodeType:
def deindent(lines: Iterable[str]) -> list[str]:
def get_statement_startend2(lineno: int, node: ast.AST) -> tuple[int, int | None]:
def getstatementrange_ast(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_code\__init__.py
-----------------------------
> """Python inspection/code generation API."""
  
  from __future__ import annotations
  

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_io\pprint.py
-----------------------------
>     """Helper function for key functions when sorting unorderable objects.
  
      The wrapped-object will fallback to a Py2.x style comparison for
      unorderable types (sorting first comparing the type name and then by
class _safe_key:
def _safe_tuple(t):
class PrettyPrinter:
def _recursion(object: Any) -> str:
def _wrap_bytes_repr(object: Any, width: int, allowance: int) -> Iterator[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_io\saferepr.py
-----------------------------
>     """
      repr.Repr that limits the resulting size of repr() and includes
      information on exceptions raised during the call.
def _try_repr_or_str(obj: object) -> str:
def _format_repr_exception(exc: BaseException, obj: object) -> str:
def _ellipsize(s: str, maxsize: int) -> str:
class SafeRepr(reprlib.Repr):
def safeformat(obj: object) -> str:
def saferepr(
def saferepr_unlimited(obj: object, use_ascii: bool = True) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_io\terminalwriter.py
-----------------------------
> """Helper functions for writing to terminals and files."""
  
  from __future__ import annotations
  
def get_terminal_width() -> int:
def should_do_markup(file: TextIO) -> bool:
class TerminalWriter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_io\wcwidth.py
-----------------------------
>     """Determine how many columns are needed to display a character in a terminal.
  
      Returns -1 if the character is not printable.
      Returns 0, 1 or 2 for other characters.
def wcwidth(c: str) -> int:
def wcswidth(s: str) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_io\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_py\error.py
-----------------------------
> """create errno-specific classes for IO or os calls."""
  
  from __future__ import annotations
  
class Error(EnvironmentError):
class ErrorMaker:
def __getattr__(attr: str) -> type[Error]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_py\path.py
-----------------------------
> """local path implementation."""
  
  from __future__ import annotations
  
class Checkers:
class NeverRaised(Exception):
class Visitor:
class FNMatcher:
def map_as_list(func, iter):
class Stat:
def getuserid(user):
def getgroupid(group):
class LocalPath:
def copymode(src, dest):
def copystat(src, dest):
def copychunked(src, dest):
def isimportable(name):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_py\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\cacheprovider.py
-----------------------------
> """Implementation of the cache provider."""
  
  # This plugin was not named "cache" to avoid conflicts with the external
  # pytest-cache version.
class Cache:
class LFPluginCollWrapper:
class LFPluginCollSkipfiles:
class LFPlugin:
class NFPlugin:
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
def pytest_configure(config: Config) -> None:
def cache(request: FixtureRequest) -> Cache:
def pytest_report_header(config: Config) -> str | None:
def cacheshow(config: Config, session: Session) -> int:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\capture.py
-----------------------------
> """Per-test stdout/stderr capturing mechanism."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def _colorama_workaround() -> None:
def _readline_workaround() -> None:
def _windowsconsoleio_workaround(stream: TextIO) -> None:
def pytest_load_initial_conftests(early_config: Config) -> Generator[None]:
class EncodedFile(io.TextIOWrapper):
class CaptureIO(io.TextIOWrapper):
class TeeCaptureIO(CaptureIO):
class DontReadFromInput(TextIO):
class CaptureBase(abc.ABC, Generic[AnyStr]):
class NoCapture(CaptureBase[str]):
class SysCaptureBase(CaptureBase[AnyStr]):
class SysCaptureBinary(SysCaptureBase[bytes]):
class SysCapture(SysCaptureBase[str]):
class FDCaptureBase(CaptureBase[AnyStr]):
class FDCaptureBinary(FDCaptureBase[bytes]):
class FDCapture(FDCaptureBase[str]):
class MultiCapture(Generic[AnyStr]):
def _get_multicapture(method: _CaptureMethod) -> MultiCapture[str]:
class CaptureManager:
class CaptureFixture(Generic[AnyStr]):
def capsys(request: SubRequest) -> Generator[CaptureFixture[str]]:
def capteesys(request: SubRequest) -> Generator[CaptureFixture[str]]:
def capsysbinary(request: SubRequest) -> Generator[CaptureFixture[bytes]]:
def capfd(request: SubRequest) -> Generator[CaptureFixture[str]]:
def capfdbinary(request: SubRequest) -> Generator[CaptureFixture[bytes]]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\compat.py
-----------------------------
> """Python version compatibility code."""
  
  from __future__ import annotations
  
def legacy_path(path: str | os.PathLike[str]) -> LEGACY_PATH:
class NotSetType(enum.Enum):
def iscoroutinefunction(func: object) -> bool:
def is_async_function(func: object) -> bool:
def getlocation(function, curdir: str | os.PathLike[str] | None = None) -> str:
def num_mock_patch_args(function) -> int:
def getfuncargnames(
def get_default_arg_names(function: Callable[..., Any]) -> tuple[str, ...]:
def ascii_escaped(val: bytes | str) -> str:
def get_real_func(obj):
def getimfunc(func):
def safe_getattr(object: Any, name: str, default: Any) -> Any:
def safe_isclass(obj: object) -> bool:
def get_user_id() -> int | None:
def assert_never(value: NoReturn) -> NoReturn:
class CallableBool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\debugging.py
-----------------------------
> """Interactive debugging with PDB, the Python Debugger."""
  
  from __future__ import annotations
  
def _validate_usepdb_cls(value: str) -> tuple[str, str]:
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
class pytestPDB:
class PdbInvoke:
class PdbTrace:
def wrap_pytest_function_for_tracing(pyfuncitem) -> None:
def maybe_wrap_pytest_function_for_tracing(pyfuncitem) -> None:
def _enter_pdb(
def _postmortem_exc_or_tb(
def post_mortem(tb_or_exc: types.TracebackType | BaseException) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\deprecated.py
-----------------------------
> """Deprecation messages and bits of code used elsewhere in the codebase that
  is planned to be removed in the next pytest release.
  
  Keeping it in a central location makes it easy to track what is deprecated and should
def check_ispytest(ispytest: bool) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\doctest.py
-----------------------------
> """Discover and run doctests in modules and test files."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_unconfigure() -> None:
def pytest_collect_file(
def _is_setup_py(path: Path) -> bool:
def _is_doctest(config: Config, path: Path, parent: Collector) -> bool:
def _is_main_py(path: Path) -> bool:
class ReprFailDoctest(TerminalRepr):
class MultipleDoctestFailures(Exception):
def _init_runner_class() -> type[doctest.DocTestRunner]:
def _get_runner(
class DoctestItem(Item):
def _get_flag_lookup() -> dict[str, int]:
def get_optionflags(config: Config) -> int:
def _get_continue_on_failure(config: Config) -> bool:
class DoctestTextfile(Module):
def _check_all_skipped(test: doctest.DocTest) -> None:
def _is_mocked(obj: object) -> bool:
def _patch_unwrap_mock_aware() -> Generator[None]:
class DoctestModule(Module):
def _init_checker_class() -> type[doctest.OutputChecker]:
def _get_checker() -> doctest.OutputChecker:
def _get_allow_unicode_flag() -> int:
def _get_allow_bytes_flag() -> int:
def _get_number_flag() -> int:
def _get_report_choice(key: str) -> int:
def doctest_namespace() -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\faulthandler.py
-----------------------------
>     """Cancel any traceback dumping due to timeout before entering pdb."""
      import faulthandler
  
      faulthandler.cancel_dump_traceback_later()
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:
def get_stderr_fileno() -> int:
def get_timeout_config_value(config: Config) -> float:
def pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:
def pytest_enter_pdb() -> None:
def pytest_exception_interact() -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\fixtures.py
-----------------------------
>     """Get the closest parent node (including self) which matches the given
      scope.
  
      If there is no parent node for the scope (e.g. asking for class scope on a
class PseudoFixtureDef(Generic[FixtureValue]):
def pytest_sessionstart(session: Session) -> None:
def get_scope_package(
def get_scope_node(node: nodes.Node, scope: Scope) -> nodes.Node | None:
def getfixturemarker(obj: object) -> FixtureFunctionMarker | None:
class ParamArgKey:
def get_param_argkeys(item: nodes.Item, scope: Scope) -> Iterator[ParamArgKey]:
def reorder_items(items: Sequence[nodes.Item]) -> list[nodes.Item]:
def reorder_items_atscope(
class FuncFixtureInfo:
class FixtureRequest(abc.ABC):
class TopRequest(FixtureRequest):
class SubRequest(FixtureRequest):
class FixtureLookupError(LookupError):
class FixtureLookupErrorRepr(TerminalRepr):
def call_fixture_func(
def _teardown_yield_fixture(fixturefunc, it) -> None:
def _eval_scope_callable(
class FixtureDef(Generic[FixtureValue]):
def resolve_fixture_function(
def pytest_fixture_setup(
class FixtureFunctionMarker:
class FixtureFunctionDefinition:
def fixture(
def fixture(
def fixture(
def yield_fixture(
def pytestconfig(request: FixtureRequest) -> Config:
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
def _get_direct_parametrize_args(node: nodes.Node) -> set[str]:
def deduplicate_names(*seqs: Iterable[str]) -> tuple[str, ...]:
class FixtureManager:
def show_fixtures_per_test(config: Config) -> int | ExitCode:
def _pretty_fixture_path(invocation_dir: Path, func) -> str:
def _show_fixtures_per_test(config: Config, session: Session) -> None:
def showfixtures(config: Config) -> int | ExitCode:
def _showfixtures_main(config: Config, session: Session) -> None:
def write_docstring(tw: TerminalWriter, doc: str, indent: str = "    ") -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\freeze_support.py
-----------------------------
> """Provides a function to report all internal modules for using freezing
def freeze_includes() -> list[str]:
def _iter_all_modules(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\helpconfig.py
-----------------------------
> """Version info, help messages, tracing configuration."""
  
  from __future__ import annotations
  
class HelpAction(Action):
def pytest_addoption(parser: Parser) -> None:
def pytest_cmdline_parse() -> Generator[None, Config, Config]:
def showversion(config: Config) -> None:
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:
def showhelp(config: Config) -> None:
def getpluginversioninfo(config: Config) -> list[str]:
def pytest_report_header(config: Config) -> list[str]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\hookspec.py
-----------------------------
> """Hook specifications for pytest plugins which are invoked by pytest itself
def pytest_addhooks(pluginmanager: PytestPluginManager) -> None:
def pytest_plugin_registered(
def pytest_addoption(parser: Parser, pluginmanager: PytestPluginManager) -> None:
def pytest_configure(config: Config) -> None:
def pytest_cmdline_parse(
def pytest_load_initial_conftests(
def pytest_cmdline_main(config: Config) -> ExitCode | int | None:
def pytest_collection(session: Session) -> object | None:
def pytest_collection_modifyitems(
def pytest_collection_finish(session: Session) -> None:
def pytest_ignore_collect(
def pytest_collect_directory(path: Path, parent: Collector) -> Collector | None:
def pytest_collect_file(
def pytest_collectstart(collector: Collector) -> None:
def pytest_itemcollected(item: Item) -> None:
def pytest_collectreport(report: CollectReport) -> None:
def pytest_deselected(items: Sequence[Item]) -> None:
def pytest_make_collect_report(collector: Collector) -> CollectReport | None:
def pytest_pycollect_makemodule(
def pytest_pycollect_makeitem(
def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:
def pytest_generate_tests(metafunc: Metafunc) -> None:
def pytest_make_parametrize_id(config: Config, val: object, argname: str) -> str | None:
def pytest_runtestloop(session: Session) -> object | None:
def pytest_runtest_protocol(item: Item, nextitem: Item | None) -> object | None:
def pytest_runtest_logstart(nodeid: str, location: tuple[str, int | None, str]) -> None:
def pytest_runtest_logfinish(
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> TestReport | None:
def pytest_runtest_logreport(report: TestReport) -> None:
def pytest_report_to_serializable(
def pytest_report_from_serializable(
def pytest_fixture_setup(
def pytest_fixture_post_finalizer(
def pytest_sessionstart(session: Session) -> None:
def pytest_sessionfinish(
def pytest_unconfigure(config: Config) -> None:
def pytest_assertrepr_compare(
def pytest_assertion_pass(item: Item, lineno: int, orig: str, expl: str) -> None:
def pytest_report_header(  # type:ignore[empty-body]
def pytest_report_collectionfinish(  # type:ignore[empty-body]
def pytest_report_teststatus(  # type:ignore[empty-body]
def pytest_terminal_summary(
def pytest_warning_recorded(
def pytest_markeval_namespace(  # type:ignore[empty-body]
def pytest_internalerror(
def pytest_keyboard_interrupt(
def pytest_exception_interact(
def pytest_enter_pdb(config: Config, pdb: pdb.Pdb) -> None:
def pytest_leave_pdb(config: Config, pdb: pdb.Pdb) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\junitxml.py
-----------------------------
> """Report test results in JUnit-XML format, for use with Jenkins and build
  integration servers.
  
  Based on initial code from Ross Lawley.
def bin_xml_escape(arg: object) -> str:
def merge_family(left, right) -> None:
class _NodeReporter:
def _warn_incompatibility_with_xunit2(
def record_property(request: FixtureRequest) -> Callable[[str, object], None]:
def record_xml_attribute(request: FixtureRequest) -> Callable[[str, object], None]:
def _check_record_param_type(param: str, v: str) -> None:
def record_testsuite_property(request: FixtureRequest) -> Callable[[str, object], None]:
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:
def mangle_test_address(address: str) -> list[str]:
class LogXML:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\legacypath.py
-----------------------------
> """Add backward compatibility support for the legacy py path type."""
  
  from __future__ import annotations
  
class Testdir:
class LegacyTestdirPlugin:
class TempdirFactory:
class LegacyTmpdirPlugin:
def Cache_makedir(self: Cache, name: str) -> LEGACY_PATH:
def FixtureRequest_fspath(self: FixtureRequest) -> LEGACY_PATH:
def TerminalReporter_startdir(self: TerminalReporter) -> LEGACY_PATH:
def Config_invocation_dir(self: Config) -> LEGACY_PATH:
def Config_rootdir(self: Config) -> LEGACY_PATH:
def Config_inifile(self: Config) -> LEGACY_PATH | None:
def Session_startdir(self: Session) -> LEGACY_PATH:
def Config__getini_unknown_type(self, name: str, type: str, value: str | list[str]):
def Node_fspath(self: Node) -> LEGACY_PATH:
def Node_fspath_set(self: Node, value: LEGACY_PATH) -> None:
def pytest_load_initial_conftests(early_config: Config) -> None:
def pytest_configure(config: Config) -> None:
def pytest_plugin_registered(plugin: object, manager: PytestPluginManager) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\logging.py
-----------------------------
> """Access and control log capturing."""
  
  from __future__ import annotations
  
def _remove_ansi_escape_sequences(text: str) -> str:
class DatetimeFormatter(logging.Formatter):
class ColoredLevelFormatter(DatetimeFormatter):
class PercentStyleMultiline(logging.PercentStyle):
def get_option_ini(config: Config, *names: str):
def pytest_addoption(parser: Parser) -> None:
class catching_logs(Generic[_HandlerType]):
class LogCaptureHandler(logging_StreamHandler):
class LogCaptureFixture:
def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture]:
def get_log_level_for_setting(config: Config, *setting_names: str) -> int | None:
def pytest_configure(config: Config) -> None:
class LoggingPlugin:
class _FileHandler(logging.FileHandler):
class _LiveLoggingStreamHandler(logging_StreamHandler):
class _LiveLoggingNullHandler(logging.NullHandler):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\main.py
-----------------------------
> """Core implementation of the testing process: init, session, runtest loop."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def validate_basetemp(path: str) -> str:
def wrap_session(
def pytest_cmdline_main(config: Config) -> int | ExitCode:
def _main(config: Config, session: Session) -> int | ExitCode | None:
def pytest_collection(session: Session) -> None:
def pytest_runtestloop(session: Session) -> bool:
def _in_venv(path: Path) -> bool:
def pytest_ignore_collect(collection_path: Path, config: Config) -> bool | None:
def pytest_collect_directory(
def pytest_collection_modifyitems(items: list[nodes.Item], config: Config) -> None:
class FSHookProxy:
class Interrupted(KeyboardInterrupt):
class Failed(Exception):
class _bestrelpath_cache(dict[Path, str]):
class Dir(nodes.Directory):
class Session(nodes.Collector):
def search_pypath(module_name: str) -> str | None:
class CollectionArgument:
def resolve_collection_argument(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\monkeypatch.py
-----------------------------
> """Monkeypatching and mocking functionality."""
  
  from __future__ import annotations
  
def monkeypatch() -> Generator[MonkeyPatch]:
def resolve(name: str) -> object:
def annotated_getattr(obj: object, name: str, ann: str) -> object:
def derive_importpath(import_path: str, raising: bool) -> tuple[str, object]:
class Notset:
class MonkeyPatch:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\nodes.py
-----------------------------
>     """Metaclass used by :class:`Node` to enforce that direct construction raises
      :class:`Failed`.
  
      This behaviour supports the indirection introduced with :meth:`Node.from_parent`,
def _imply_path(
class NodeMeta(abc.ABCMeta):
class Node(abc.ABC, metaclass=NodeMeta):
def get_fslocation_from_item(node: Node) -> tuple[str | Path, int | None]:
class Collector(Node, abc.ABC):
def _check_initialpaths_for_relpath(
class FSCollector(Collector, abc.ABC):
class File(FSCollector, abc.ABC):
class Directory(FSCollector, abc.ABC):
class Item(Node, abc.ABC):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\outcomes.py
-----------------------------
> """Exception classes and constants handling test outcomes as well as
class OutcomeException(BaseException):
class Skipped(OutcomeException):
class Failed(OutcomeException):
class Exit(Exception):
class _WithException(Protocol[_F, _ET]):
def _with_exception(exception_type: _ET) -> Callable[[_F], _WithException[_F, _ET]]:
def exit(
def skip(
def fail(reason: str = "", pytrace: bool = True) -> NoReturn:
class XFailed(Failed):
def xfail(reason: str = "") -> NoReturn:
def importorskip(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\pastebin.py
-----------------------------
> """Submit failure or test session information to a pastebin service."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_unconfigure(config: Config) -> None:
def create_new_paste(contents: str | bytes) -> str:
def pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\pathlib.py
-----------------------------
>     """Handle known read-only errors during rmtree.
  
      The returned value is used only by our own tests.
def _ignore_error(exception: Exception) -> bool:
def get_lock_path(path: _AnyPurePath) -> _AnyPurePath:
def on_rm_rf_error(
def ensure_extended_length_path(path: Path) -> Path:
def get_extended_length_path_str(path: str) -> str:
def rm_rf(path: Path) -> None:
def find_prefixed(root: Path, prefix: str) -> Iterator[os.DirEntry[str]]:
def extract_suffixes(iter: Iterable[os.DirEntry[str]], prefix: str) -> Iterator[str]:
def find_suffixes(root: Path, prefix: str) -> Iterator[str]:
def parse_num(maybe_num: str) -> int:
def _force_symlink(root: Path, target: str | PurePath, link_to: str | Path) -> None:
def make_numbered_dir(root: Path, prefix: str, mode: int = 0o700) -> Path:
def create_cleanup_lock(p: Path) -> Path:
def register_cleanup_lock_removal(
def maybe_delete_a_numbered_dir(path: Path) -> None:
def ensure_deletable(path: Path, consider_lock_dead_if_created_before: float) -> bool:
def try_cleanup(path: Path, consider_lock_dead_if_created_before: float) -> None:
def cleanup_candidates(root: Path, prefix: str, keep: int) -> Iterator[Path]:
def cleanup_dead_symlinks(root: Path) -> None:
def cleanup_numbered_dir(
def make_numbered_dir_with_cleanup(
def resolve_from_str(input: str, rootpath: Path) -> Path:
def fnmatch_ex(pattern: str, path: str | os.PathLike[str]) -> bool:
def parts(s: str) -> set[str]:
def symlink_or_skip(
class ImportMode(Enum):
class ImportPathMismatchError(ImportError):
def import_path(
def _import_module_using_spec(
def spec_matches_module_path(module_spec: ModuleSpec | None, module_path: Path) -> bool:
def module_name_from_path(path: Path, root: Path) -> str:
def insert_missing_modules(modules: dict[str, ModuleType], module_name: str) -> None:
def resolve_package_path(path: Path) -> Path | None:
def resolve_pkg_root_and_module_name(
def is_importable(module_name: str, module_path: Path) -> bool:
def compute_module_name(root: Path, module_path: Path) -> str | None:
class CouldNotResolvePathError(Exception):
def scandir(
def visit(
def absolutepath(path: str | os.PathLike[str]) -> Path:
def commonpath(path1: Path, path2: Path) -> Path | None:
def bestrelpath(directory: Path, dest: Path) -> str:
def safe_exists(p: Path) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\pytester.py
-----------------------------
> """(Disabled by default) support for testing pytest and pytest plugins.
  
  PYTEST_DONT_REWRITE
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
class LsofFdLeakChecker:
def _pytest(request: FixtureRequest) -> PytestArg:
class PytestArg:
def get_public_names(values: Iterable[str]) -> list[str]:
class RecordedHookCall:
class HookRecorder:
def linecomp() -> LineComp:
def LineMatcher_fixture(request: FixtureRequest) -> type[LineMatcher]:
def pytester(
def _sys_snapshot() -> Generator[None]:
def _config_for_test() -> Generator[Config]:
class RunResult:
class SysModulesSnapshot:
class SysPathsSnapshot:
class Pytester:
class LineComp:
class LineMatcher:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\pytester_assertions.py
-----------------------------
> """Helper plugin for pytester; should not be loaded on its own."""
  
  # This plugin contains assertions used by pytester. pytester cannot
  # contain them itself, since it is imported by the `pytest` module,
def assertoutcome(
def assert_outcomes(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\python.py
-----------------------------
> """Python test discovery, setup and run of test functions."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_generate_tests(metafunc: Metafunc) -> None:
def pytest_configure(config: Config) -> None:
def async_fail(nodeid: str) -> None:
def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:
def pytest_collect_directory(
def pytest_collect_file(file_path: Path, parent: nodes.Collector) -> Module | None:
def path_matches_patterns(path: Path, patterns: Iterable[str]) -> bool:
def pytest_pycollect_makemodule(module_path: Path, parent) -> Module:
def pytest_pycollect_makeitem(
class PyobjMixin(nodes.Node):
class _EmptyClass: pass  # noqa: E701
class PyCollector(PyobjMixin, nodes.Collector, abc.ABC):
def importtestmodule(
class Module(nodes.File, PyCollector):
class Package(nodes.Directory):
def _call_with_optional_argument(func, arg) -> None:
def _get_first_non_fixture_func(obj: object, names: Iterable[str]) -> object | None:
class Class(PyCollector):
def hasinit(obj: object) -> bool:
def hasnew(obj: object) -> bool:
class IdMaker:
class CallSpec2:
def get_direct_param_fixture_func(request: FixtureRequest) -> Any:
class Metafunc:
def _find_parametrized_scope(
def _ascii_escaped_by_config(val: str | bytes, config: Config | None) -> str:
class Function(PyobjMixin, nodes.Item):
class FunctionDefinition(Function):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\python_api.py
-----------------------------
>     """Provide shared utilities for making approximate comparisons between
def _compare_approx(
class ApproxBase:
def _recursive_sequence_map(f, x):
class ApproxNumpy(ApproxBase):
class ApproxMapping(ApproxBase):
class ApproxSequenceLike(ApproxBase):
class ApproxScalar(ApproxBase):
class ApproxDecimal(ApproxScalar):
def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:
def _is_sequence_like(expected: object) -> bool:
def _is_numpy_array(obj: object) -> bool:
def _as_numpy_array(obj: object) -> ndarray | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\raises.py
-----------------------------
>     r"""Assert that a code block/function call raises an exception type, or one of its 
subclasses.
  
      :param expected_exception:
          The expected exception type, or a tuple if one of multiple possible
def raises(
def raises(
def raises(*, check: Callable[[BaseException], bool]) -> RaisesExc[BaseException]: ...
def raises(
def raises(
def _match_pattern(match: Pattern[str]) -> str | Pattern[str]:
def repr_callable(fun: Callable[[BaseExcT_1], bool]) -> str:
def backquote(s: str) -> str:
def _exception_type_name(
def _check_raw_type(
def is_fully_escaped(s: str) -> bool:
def unescape(s: str) -> str:
class AbstractRaises(ABC, Generic[BaseExcT_co]):
class RaisesExc(AbstractRaises[BaseExcT_co_default]):
class RaisesGroup(AbstractRaises[BaseExceptionGroup[BaseExcT_co]]):
class NotChecked:
class ResultHolder:
def possible_match(results: ResultHolder, used: set[int] | None = None) -> bool:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\recwarn.py
-----------------------------
> """Record warnings during test function execution."""
  
  from __future__ import annotations
  
def recwarn() -> Generator[WarningsRecorder]:
def deprecated_call(
def deprecated_call(func: Callable[..., T], *args: Any, **kwargs: Any) -> T: ...
def deprecated_call(
def warns(
def warns(
def warns(
class WarningsRecorder(warnings.catch_warnings):  # type:ignore[type-arg]
class WarningsChecker(WarningsRecorder):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\reports.py
-----------------------------
>         """Read-only property that returns the full string representation of
          ``longrepr``.
  
          .. versionadded:: 3.0
def getworkerinfoline(node):
class BaseReport:
def _report_unserialization_failure(
class TestReport(BaseReport):
class CollectReport(BaseReport):
class CollectErrorRepr(TerminalRepr):
def pytest_report_to_serializable(
def pytest_report_from_serializable(
def _report_to_json(report: BaseReport) -> dict[str, Any]:
def _report_kwargs_from_json(reportdict: dict[str, Any]) -> dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\runner.py
-----------------------------
> """Basic collect and runtest protocol implementations."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:
def pytest_sessionstart(session: Session) -> None:
def pytest_sessionfinish(session: Session) -> None:
def pytest_runtest_protocol(item: Item, nextitem: Item | None) -> bool:
def runtestprotocol(
def show_test_item(item: Item) -> None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:
def _update_current_test_var(
def pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str] | None:
def call_and_report(
def check_interactive_exception(call: CallInfo[object], report: BaseReport) -> bool:
class CallInfo(Generic[TResult]):
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> TestReport:
def pytest_make_collect_report(collector: Collector) -> CollectReport:
class SetupState:
def collect_one_node(collector: Collector) -> CollectReport:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\scope.py
-----------------------------
> """
  Scope definition and related utilities.
  
  Those are defined here, instead of in the 'fixtures' module because
class Scope(Enum):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\setuponly.py
-----------------------------
def pytest_addoption(parser: Parser) -> None:
def pytest_fixture_setup(
def pytest_fixture_post_finalizer(
def _show_fixture_action(
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\setupplan.py
-----------------------------
def pytest_addoption(parser: Parser) -> None:
def pytest_fixture_setup(
def pytest_cmdline_main(config: Config) -> int | ExitCode | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\skipping.py
-----------------------------
> """Support for skip/xfail functions and markers."""
  
  from __future__ import annotations
  
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def evaluate_condition(item: Item, mark: Mark, condition: object) -> tuple[bool, str]:
class Skip:
def evaluate_skip_marks(item: Item) -> Skip | None:
class Xfail:
def evaluate_xfail_marks(item: Item) -> Xfail | None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> Generator[None]:
def pytest_runtest_makereport(
def pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str] | None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\stash.py
-----------------------------
>     """``StashKey`` is an object used as a key to a :class:`Stash`.
  
      A ``StashKey`` is associated with the type ``T`` of the value of the key.
  
class StashKey(Generic[T]):
class Stash:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\stepwise.py
-----------------------------
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def pytest_sessionfinish(session: Session) -> None:
class StepwiseCacheInfo:
class StepwisePlugin:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\terminal.py
-----------------------------
> """Terminal reporting of the full testing process.
  
  This is a good source for looking at the various reporting hooks.
class MoreQuietAction(argparse.Action):
class TestShortLogReport(NamedTuple):
def pytest_addoption(parser: Parser) -> None:
def pytest_configure(config: Config) -> None:
def getreportopt(config: Config) -> str:
def pytest_report_teststatus(report: BaseReport) -> tuple[str, str, str]:
class WarningReport:
class TerminalReporter:
def _get_node_id_with_markup(tw: TerminalWriter, config: Config, rep: BaseReport):
def _format_trimmed(format: str, msg: str, available_width: int) -> str | None:
def _get_line_with_reprcrash_message(
def _folded_skips(
def pluralize(count: int, noun: str) -> tuple[int, str]:
def _plugin_nameversions(plugininfo) -> list[str]:
def format_session_duration(seconds: float) -> str:
def format_node_duration(seconds: float) -> str:
def _get_raw_skip_reason(report: TestReport) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\threadexception.py
-----------------------------
class ThreadExceptionMeta(NamedTuple):
def collect_thread_exception(config: Config) -> None:
def cleanup(
def thread_exception_hook(
def pytest_configure(config: Config) -> None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\timing.py
-----------------------------
> """Indirection for time functions.
  
  We intentionally grab some "time" functions internally to avoid tests mocking "time" to 
affect
  pytest runtime information (issue #185).
class Instant:
class Duration:
class MockTiming:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\tmpdir.py
-----------------------------
> """Support for providing temporary directories to test functions."""
  
  from __future__ import annotations
  
class TempPathFactory:
def get_user() -> str | None:
def pytest_configure(config: Config) -> None:
def pytest_addoption(parser: Parser) -> None:
def tmp_path_factory(request: FixtureRequest) -> TempPathFactory:
def _mk_tmp(request: FixtureRequest, factory: TempPathFactory) -> Path:
def tmp_path(
def pytest_sessionfinish(session, exitstatus: int | ExitCode):
def pytest_runtest_makereport(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\tracemalloc.py
-----------------------------
def tracemalloc_message(source: object) -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\unittest.py
-----------------------------
> """Discover and run std-library "unittest" style tests."""
  
  from __future__ import annotations
  
def pytest_pycollect_makeitem(
class UnitTestCase(Class):
class TestCaseFunction(Function):
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> None:
def _is_skipped(obj) -> bool:
def pytest_configure() -> None:
class TwistedVersion(Enum):
def _get_twisted_version() -> TwistedVersion:
def pytest_runtest_protocol(item: Item) -> Iterator[None]:
def _handle_twisted_exc_info(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\unraisableexception.py
-----------------------------
def gc_collect_harder(iterations: int) -> None:
class UnraisableMeta(NamedTuple):
def collect_unraisable(config: Config) -> None:
def cleanup(
def unraisable_hook(
def pytest_configure(config: Config) -> None:
def pytest_runtest_setup(item: Item) -> None:
def pytest_runtest_call(item: Item) -> None:
def pytest_runtest_teardown(item: Item) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\warnings.py
-----------------------------
>     """Context manager that catches warnings generated in the contained execution block.
  
      ``item`` can be None if we are not in the context of an item execution.
  
def catch_warnings_for_item(
def warning_record_to_str(warning_message: warnings.WarningMessage) -> str:
def pytest_runtest_protocol(item: Item) -> Generator[None, object, object]:
def pytest_collection(session: Session) -> Generator[None, object, object]:
def pytest_terminal_summary(
def pytest_sessionfinish(session: Session) -> Generator[None]:
def pytest_load_initial_conftests(
def pytest_configure(config: Config) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\warning_types.py
-----------------------------
>     """Base class for all warnings emitted by pytest."""
  
      __module__ = "pytest"
  
class PytestWarning(UserWarning):
class PytestAssertRewriteWarning(PytestWarning):
class PytestCacheWarning(PytestWarning):
class PytestConfigWarning(PytestWarning):
class PytestCollectionWarning(PytestWarning):
class PytestDeprecationWarning(PytestWarning, DeprecationWarning):
class PytestRemovedIn9Warning(PytestDeprecationWarning):
class PytestExperimentalApiWarning(PytestWarning, FutureWarning):
class PytestReturnNotNoneWarning(PytestWarning):
class PytestUnknownMarkWarning(PytestWarning):
class PytestUnraisableExceptionWarning(PytestWarning):
class PytestUnhandledThreadExceptionWarning(PytestWarning):
class UnformattedWarning(Generic[_W]):
class PytestFDWarning(PytestWarning):
def warn_explicit_for(method: FunctionType, message: PytestWarning) -> None:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_argcomplete.py
-----------------------------
> """Allow bash-completion for argparse with argcomplete if installed.
  
  Needs argcomplete>=0.5.6 for python 3.2/3.3 (older versions fail
  to find the magic string, so _ARGCOMPLETE env. var is never set, and
class FastFilesCompleter:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\_version.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_pytest\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_yaml\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\cfgv.py
-----------------------------
class ValidationError(ValueError):
def validate_context(msg):
def reraise_as(tp):
def _dct_noop(self, dct):
def _check_optional(self, dct):
def _apply_default_optional(self, dct):
def _remove_default_optional(self, dct):
def _require_key(self, dct):
def _check_required(self, dct):
def _check_fn_recurse(self):
def _apply_default_required_recurse(self, dct):
def _remove_default_required_recurse(self, dct):
def _apply_default_optional_recurse(self, dct):
def _remove_default_optional_recurse(self, dct):
def _get_check_conditional(inner):
def _apply_default_conditional_optional(self, dct):
def _remove_default_conditional_optional(self, dct):
def _apply_default_conditional_recurse(self, dct):
def _remove_default_conditional_recurse(self, dct):
def _no_additional_keys_check(self, dct):
def _warn_additional_keys_check(self, dct):
class Map(collections.namedtuple('Map', ('object_name', 'id_key', 'items'))):
class Array(collections.namedtuple('Array', ('of', 'allow_empty'))):
class Not(collections.namedtuple('Not', ('val',))):
class NotIn(collections.namedtuple('NotIn', ('values',))):
class In(collections.namedtuple('In', ('values',))):
def check_any(_):
def check_type(tp, typename=None):
def check_one_of(possible):
def check_regex(v):
def check_array(inner_check):
def check_and(*fns):
def validate(v, schema):
def apply_defaults(v, schema):
def remove_defaults(v, schema):
def load_from_filename(

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\mypy_extensions.py
-----------------------------
> """Defines experimental extensions to the standard "typing" module that are
  supported by the mypy typechecker.
  
  Example usage:
def _check_fails(cls, other):
def _dict_new(cls, *args, **kwargs):
def _typeddict_new(cls, _typename, _fields=None, **kwargs):
class _TypedDictMeta(type):
def Arg(type=Any, name=None):
def DefaultArg(type=Any, name=None):
def NamedArg(type=Any, name=None):
def DefaultNamedArg(type=Any, name=None):
def VarArg(type=Any):
def KwArg(type=Any):
class _DEPRECATED_NoReturn: pass
def trait(cls):
def mypyc_attr(*attrs, **kwattrs):
class _FlexibleAliasClsApplied:
class _FlexibleAliasCls:
class _NativeIntMeta(type):
class i64(metaclass=_NativeIntMeta):
class i32(metaclass=_NativeIntMeta):
class i16(metaclass=_NativeIntMeta):
class u8(metaclass=_NativeIntMeta):
def _warn_deprecation(name: str, module_globals: Dict[str, Any]) -> Any:
def __getattr__(name: str) -> Any:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\nodeenv.py
-----------------------------
> """
      nodeenv
      ~~~~~~~
      Node.js virtual environment
def to_utf8(text):
class Config(object):
def clear_output(out):
def remove_env_bin_from_path(env, env_bin_dir):
def parse_version(version_str):
def node_version_from_args(args):
def create_logger():
def make_parser():
def parse_args(check=True):
def mkdir(path):
def make_executable(filename):
def writefile(dest, content, overwrite=True, append=False):
def callit(cmd, show_stdout=True, in_shell=False,
def get_root_url(version_str):
def is_x86_64_musl():
def is_riscv64():
def get_node_bin_url(version):
def get_node_src_url(version):
def tarfile_open(*args, **kwargs):
def _download_node_file(node_url, n_attempt=3):
def download_node_src(node_url, src_dir, args):
def urlopen(url):
def copytree(src, dst, symlinks=False, ignore=None):
def copy_node_from_prebuilt(env_dir, src_dir, node_version):
def build_node_from_src(env_dir, src_dir, node_src_dir, args):
def install_node(env_dir, src_dir, args):
def install_node_wrapped(env_dir, src_dir, args):
def install_npm(env_dir, _src_dir, args):
def install_npm_win(env_dir, src_dir, args):
def install_packages(env_dir, args):
def install_activate(env_dir, args):
def set_predeactivate_hook(env_dir):
def create_environment(env_dir, args):
def _get_versions_json():
def get_node_versions():
def print_node_versions():
def get_last_stable_node_version():
def get_last_lts_node_version():
def get_env_dir(args):
def main():

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\py.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\six.py
-----------------------------
> """Utilities for writing code that runs on Python 2 and 3"""
  
  from __future__ import absolute_import
  
def _add_doc(func, doc):
def _import_module(name):
class _LazyDescr(object):
class MovedModule(_LazyDescr):
class _LazyModule(types.ModuleType):
class MovedAttribute(_LazyDescr):
class _SixMetaPathImporter(object):
class _MovedItems(_LazyModule):
class Module_six_moves_urllib_parse(_LazyModule):
class Module_six_moves_urllib_error(_LazyModule):
class Module_six_moves_urllib_request(_LazyModule):
class Module_six_moves_urllib_response(_LazyModule):
class Module_six_moves_urllib_robotparser(_LazyModule):
class Module_six_moves_urllib(types.ModuleType):
def add_move(move):
def remove_move(name):
def assertCountEqual(self, *args, **kwargs):
def assertRaisesRegex(self, *args, **kwargs):
def assertRegex(self, *args, **kwargs):
def assertNotRegex(self, *args, **kwargs):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def ensure_binary(s, encoding='utf-8', errors='strict'):
def ensure_str(s, encoding='utf-8', errors='strict'):
def ensure_text(s, encoding='utf-8', errors='strict'):
def python_2_unicode_compatible(klass):

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\typing_extensions.py
-----------------------------
>         """Special type indicating an unconstrained type.
          - Any is compatible with every type.
          - Any assumed to have all methods.
          - All values assumed to be instances of Any.
class _Sentinel:
class _SpecialForm(typing._Final, _root=True):
class _ExtensionsSpecialForm(typing._SpecialForm, _root=True):
def IntVar(name):
def _get_protocol_attrs(cls):
def _caller(depth=1, default='__main__'):
def _set_default(type_param, default):
def _set_module(typevarlike):
class _DefaultMixin:
class _TypeVarLikeMeta(type):
class _EllipsisDummy: ...
def _create_concatenate_alias(origin, parameters):
def _concatenate_getitem(self, parameters):
def _unpack_args(*args):
def _has_generic_or_protocol_as_origin() -> bool:
def _is_unpacked_typevartuple(x) -> bool:
class Sentinel:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_hypothesis_ftz_detector.py
-----------------------------
> """
  This is a toolkit for determining which module set the "flush to zero" flag.
  
  For details, see the docstring and comments in `identify_ftz_culprit()`.  This module
def flush_to_zero() -> bool:
def run_in_process(fn: Callable[..., FTZCulprits], *args: object) -> FTZCulprits:
def target(
def always_imported_modules() -> FTZCulprits:
def modules_imported_by(mod: str) -> FTZCulprits:
def identify_ftz_culprits() -> str:

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_hypothesis_globals.py
-----------------------------
> """
  Module for globals shared between plugin(s) and the main hypothesis module, without
  depending on either. This file should have no imports outside of stdlib.

C:\Users\monee\Desktop\Project Slum\.venv\Lib\site-packages\_hypothesis_pytestplugin.py
-----------------------------
> """
  The pytest plugin for Hypothesis.
  
  We move this from the old location at `hypothesis.extra.pytestplugin` so that it
class StoringReporter:
def load():

C:\Users\monee\Desktop\Project Slum\app\common\cache.py
-----------------------------
def cache_get(key: str) -> str | None:
def cache_put(key: str, value: str, ttl: float = 60.0) -> None:

C:\Users\monee\Desktop\Project Slum\app\common\logging.py
-----------------------------
def get_logger():

C:\Users\monee\Desktop\Project Slum\app\common\metrics.py
-----------------------------
def inc(metric: str, labels: dict[str,str] | None = None) -> None:
def observe(metric: str, value: float, labels: dict[str,str] | None = None) -> None:

C:\Users\monee\Desktop\Project Slum\app\conversation\state_machine.py
-----------------------------
class ConvState(str, Enum):
def advance_state(state: ConvState, signal: dict) -> ConvState:
def current_state(session_id: str) -> ConvState:

C:\Users\monee\Desktop\Project Slum\app\cost\router.py
-----------------------------
def route_model(context: dict) -> str:

C:\Users\monee\Desktop\Project Slum\app\data\database.py
-----------------------------
>         conn.execute(text("""
          CREATE TABLE IF NOT EXISTS profiles(
              id INTEGER PRIMARY KEY,
              user_id TEXT UNIQUE,
def init_db():
def get_profile(user_id: str) -> Optional[Dict[str, Any]]:

C:\Users\monee\Desktop\Project Slum\app\infra\observability.py
-----------------------------
> """
  Tiny dev-only observability helpers:
  - Prometheus exporter (start_http_server)
  - Structured logging setup
def configure_logging(level: str = "INFO") -> None:
def maybe_start_metrics_exporter(port: Optional[int] = None) -> None:

C:\Users\monee\Desktop\Project Slum\app\inner_me\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\app\knowledge\retriever.py
-----------------------------
def retrieve(query: str, top_k: int = 2) -> list[str]:

C:\Users\monee\Desktop\Project Slum\app\mate_mode\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\app\memory\summarizer.py
-----------------------------
def save_summary(session_id: str, text: str) -> None:
def get_memory_clip(user_id: str) -> str:

C:\Users\monee\Desktop\Project Slum\app\observability\audit.py
-----------------------------
def write(event_type: str, **fields):

C:\Users\monee\Desktop\Project Slum\app\observability\logging_cfg.py
-----------------------------
def get_logger(name: str):

C:\Users\monee\Desktop\Project Slum\app\observability\metrics.py
-----------------------------
def inc(name: str, by: int = 1) -> None:
def get(name: str) -> int:
def snapshot() -> Dict[str, int]:
def reset() -> None:

C:\Users\monee\Desktop\Project Slum\app\observability\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\app\orchestrator\pipeline.py
-----------------------------
>     """Return policy version from knowledge_version.json or safety_config, default 1."""
      try:
          data = json.loads(KV_FILE.read_text(encoding="utf-8"))
          v = int(data.get("version", 1))
def _policy_version() -> int:
def _is_high_risk(text: str) -> bool:
def _safety_preprocess(mode: str, text: str) -> str:
def _resources_string_for_india() -> str:
def run_inference(

C:\Users\monee\Desktop\Project Slum\app\orchestrator\__init__.py
-----------------------------
> """
  Orchestrator package
  Exports run_inference for tests and app entry points.

C:\Users\monee\Desktop\Project Slum\app\personalization\style.py
-----------------------------
class StyleSpec(Dict[str, Any]):
def style_for(profile: Dict[str, Any]) -> StyleSpec:
def apply_style(reply: Dict[str, Any], stylespec: StyleSpec) -> Dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\app\personalization\stylespec.py
-----------------------------
class StyleSpec:
def style_for(profile: dict) -> StyleSpec:
def apply_style(reply: str, stylespec: StyleSpec) -> str:

C:\Users\monee\Desktop\Project Slum\app\runtime\bootstrap.py
-----------------------------
def init_runtime() -> logging.Logger:

C:\Users\monee\Desktop\Project Slum\app\runtime\logging_config.py
-----------------------------
def configure_logging(level_str: str = "INFO") -> logging.Logger:

C:\Users\monee\Desktop\Project Slum\app\runtime\metrics.py
-----------------------------
>     """Start the exporter if ENABLE_METRICS=true and prometheus_client is available."""
      global _started, _boot_counter, _health_gauge
      enable = os.getenv("ENABLE_METRICS", "false").lower() == "true"
      port = int(os.getenv("METRICS_PORT", "9108"))
def maybe_start_metrics() -> None:
def bump_boot_counter() -> None:

C:\Users\monee\Desktop\Project Slum\app\safety\config.py
-----------------------------
> """
  Runtime loader for safety policies (YAML).
  - Reads app/safety/policies.yaml by default.
  - Can be overridden with env SAFETY_POLICY_PATH.
def load_policies() -> Dict[str, Any]:
def get_scope_patterns() -> List[str]:
def get_redirect_message() -> str:
def get_dei_lexicon() -> Dict[str, str]:

C:\Users\monee\Desktop\Project Slum\app\safety\guard.py
-----------------------------
def pre_prompt_safety(text: str, profile: Dict[str, Any]) -> str:
def post_prompt_safety(reply: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:

C:\Users\monee\Desktop\Project Slum\app\safety\safety.py
-----------------------------
>     """
      Lightweight metrics wrapper. Uses Prometheus if available; otherwise in-memory counters
      accessible via get_counter() for tests.
class _Metrics:
class SafetyDecision:
def _strip_leading_inline_flags(p: str) -> str:
def _compile_scope_block_re() -> re.Pattern:
def _load_dei_lexicon() -> Dict[str, str]:
class SafetyGuard:
def get_safety_guard() -> SafetyGuard:
def enforce_scope(text: str) -> Tuple[bool, str]:
def detect_risk(text: str, profile: Optional[dict] = None) -> Dict[str, Union[str, List[str]]]:
def apply_dei_filter(reply: Union[str, dict]) -> Union[str, dict]:
def _load_resources_file() -> List[str]:
def pre_prompt_guard(user_message: str, user_profile: Optional[dict] = None) -> Dict[str, object]:
def inject_resources(reply: Union[str, dict], risk_info: Dict[str, str]) -> Union[str, dict]:
def post_prompt_guard(reply: Union[str, dict], risk_info: Optional[dict] = None) -> Dict[str, object]:
def _consent_ns() -> str:
def _load_consent() -> Dict[str, dict]:
def _save_consent(data: Dict[str, dict]) -> None:
def needs_consent(user_id: str) -> bool:
def record_consent(user_id: str, accepted: bool = True, ts: Optional[str] = None) -> None:
def redact_pii(text: str) -> str:
def redact(text: str) -> str:

C:\Users\monee\Desktop\Project Slum\app\safety\safety_plan.py
-----------------------------
def generate_safety_plan(user_context: dict) -> str:

C:\Users\monee\Desktop\Project Slum\app\safety\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\app\security\security.py
-----------------------------
>     """
      Public security-layer redactor.
      Returns the canonical tokens. Delegates to safety.redact_pii when available.
def _fallback_redact_pii(text: str) -> str:
def redact(text: str) -> str:
def redact_pii(text: str) -> str:

C:\Users\monee\Desktop\Project Slum\app\security\__init__.py
-----------------------------
> """
  Security package exposing redact_pii for tests and utilities.

C:\Users\monee\Desktop\Project Slum\app\skills\core.py
-----------------------------
def render_skill(name: str, style: str = "adult", context: dict | None = None) -> str:
def list_skills() -> list[str]:

C:\Users\monee\Desktop\Project Slum\app\state\state_machine.py
-----------------------------
def current_state(session_id: str) -> State:

C:\Users\monee\Desktop\Project Slum\app\tools\guard_harness.py
-----------------------------
> """
  Dev harness to exercise the SafetyGuard and move metrics.
  Run directly to produce a few counters and logs.
def main() -> None:

C:\Users\monee\Desktop\Project Slum\app\tools\index_refresh.py
-----------------------------
> """
  Dummy index refresh script to simulate knowledge refresh step.
  Run:
    (.venv) PS> python tools/index_refresh.py
def main() -> int:

C:\Users\monee\Desktop\Project Slum\app\ui\components.py
-----------------------------
def component_stub():

C:\Users\monee\Desktop\Project Slum\app\database.py
-----------------------------
def get_db() -> object:

C:\Users\monee\Desktop\Project Slum\app\feedback.py
-----------------------------
> """
  Lightweight feedback capture for learning loop.
  Usage:
    from app.feedback import record_feedback
def record_feedback(user: str, category: str, rating: int, note: str = "") -> None:

C:\Users\monee\Desktop\Project Slum\app\main.py
-----------------------------
def quick_demo():

C:\Users\monee\Desktop\Project Slum\app\orchestrator.py
-----------------------------
def build_messages(mode: str, state: str, style: object, memory: str, user_msg: str) -> list[dict]:
def infer(messages: list[dict]) -> dict:

C:\Users\monee\Desktop\Project Slum\app\router.py
-----------------------------
def route_model(context: dict) -> str:

C:\Users\monee\Desktop\Project Slum\app\security.py
-----------------------------
def redact_pii(text: str) -> str:

C:\Users\monee\Desktop\Project Slum\app\__init__.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\app\__main__.py
-----------------------------
> """
  Entry point for `python -m app`.
  Boots logging, starts metrics if enabled, and keeps the process running.
def main() -> None:

C:\Users\monee\Desktop\Project Slum\scripts\audit_progress.py
-----------------------------
> """
  Project SLUM â€” Progress Audit
  - Prints file presence for core Phase 1 items.
  - Runs pytest and shows a short summary.
def check_files():
def run_pytest():
def main():

C:\Users\monee\Desktop\Project Slum\scripts\check_module1.py
-----------------------------
> """
  Quick self-check for Module 1: Safety & Scope Guard.
  - Verifies required files exist and load.
  - Calls safety API surface with sample inputs.
def main():

C:\Users\monee\Desktop\Project Slum\tests\test_adversarial.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_adversarial_basic.py
-----------------------------
def test_adversarial_placeholders():

C:\Users\monee\Desktop\Project Slum\tests\test_cache_and_retry.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_consent_persistence.py
-----------------------------
def test_consent_persists():

C:\Users\monee\Desktop\Project Slum\tests\test_database_stub.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_golden_dialogs.py
-----------------------------
def test_self_harm_high_risk_helplines():
def test_meds_scope_redirect():
def test_adversarial_prompt_injection():
def test_vague_risk_adds_clarifier_not_helplines():
def test_teen_profile_adds_caregiver_note_when_safe():
def test_repeated_high_risk_shows_reminder():
def test_metrics_log_counters():

C:\Users\monee\Desktop\Project Slum\tests\test_i18n.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_inner_me.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_mate_mode.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_memory_layer.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_metrics_counts.py
-----------------------------
> """
  Metrics behavior tests rely on the fallback in-memory counters.
  If prometheus_client is installed, these tests only assert non-negative markers.
def test_metrics_increment_on_eval():
def test_decision_counters_and_latency():
def test_category_and_block_counters():

C:\Users\monee\Desktop\Project Slum\tests\test_orchestrator.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_personalization_basic.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_policy_loading_runtime.py
-----------------------------
def test_redirect_message_comes_from_policies_yaml():
def test_scope_patterns_from_yaml_trigger_block():
def test_dei_rewrite_uses_yaml_lexicon():

C:\Users\monee\Desktop\Project Slum\tests\test_policy_version.py
-----------------------------
def test_policy_version_in_meta():

C:\Users\monee\Desktop\Project Slum\tests\test_properties_safety.py
-----------------------------
def test_no_crash_on_arbitrary_text(s):

C:\Users\monee\Desktop\Project Slum\tests\test_rate_limit_basic.py
-----------------------------
def test_rate_limit_sample_exists():

C:\Users\monee\Desktop\Project Slum\tests\test_redaction.py
-----------------------------
def test_redact_email_phone():

C:\Users\monee\Desktop\Project Slum\tests\test_redaction_tokens.py
-----------------------------
def test_tokens_consistent(s):

C:\Users\monee\Desktop\Project Slum\tests\test_retriever.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_router.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_safety.py
-----------------------------
def test_scope_block():
def test_risk_detects_high():
def test_dei_rewrite():
def test_inject_resources_on_high_risk():

C:\Users\monee\Desktop\Project Slum\tests\test_safety_adversarial.py
-----------------------------
def test_jailbreak_injection_redacts(prompt):
def test_repeat_char_spam_tagged():
def test_unsafe_drug_blocks():
def test_pii_credit_card_masking():

C:\Users\monee\Desktop\Project Slum\tests\test_safety_coverage.py
-----------------------------
def test_control_chars_removed_and_flagged():
def test_repeat_spam_flag():
def test_base64_blob_flag_only():
def test_long_text_is_blocked():
def test_address_hint_counts_as_pii_note():
def test_emoji_only_is_allowed_noop():
def test_whitespace_only_allowed():
def test_dei_filter_rewrites_stigmatizing_terms():
def test_scope_redirect_message_contains_key_phrase():

C:\Users\monee\Desktop\Project Slum\tests\test_safety_plan.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_safety_scenarios.py
-----------------------------
def test_allow_simple_text():
def test_redact_pii_email_phone():
def test_block_self_harm():
def test_edge_empty_and_whitespace():
def test_edge_too_long_blocks():

C:\Users\monee\Desktop\Project Slum\tests\test_safety_unit.py
-----------------------------
def test_scope_block_redirects():
def test_risk_detector_high():
def test_dei_rewrite():
def test_resource_injection_appends():

C:\Users\monee\Desktop\Project Slum\tests\test_scenarios_module1.py
-----------------------------
def test_scenario_scope_meds_redirect():
def test_scenario_self_harm_high_risk_injects_resources():
def test_scenario_ambiguous_distress_low_risk_adds_checkin():

C:\Users\monee\Desktop\Project Slum\tests\test_science_notes.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_security.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_session_throttle.py
-----------------------------
def test_per_session_throttle():

C:\Users\monee\Desktop\Project Slum\tests\test_skills_core.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_smoke.py
-----------------------------
def test_smoke():

C:\Users\monee\Desktop\Project Slum\tests\test_specs_exist_and_load.py
-----------------------------
def test_policies_yaml_loads_and_has_keys():
def test_resources_json_loads_and_has_entries():
def test_consent_markdown_has_required_headings():

C:\Users\monee\Desktop\Project Slum\tests\test_state_machine.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_ui_smoke.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_updates.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\test_webapp_config.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\tests\utils_config_loader.py
-----------------------------
def load_policies():
def load_resources():
def load_consent_md():

C:\Users\monee\Desktop\Project Slum\tools\eval_runner.py
-----------------------------
> """
  Simple Evaluation Runner
  - Loads golden dialogs from tests/conversations/*.json
  - Applies lightweight checks (forbidden content flags, must-include strings)
def evaluate_item(item: dict) -> list[str]:
def load_cases() -> list[dict]:
def main() -> int:

C:\Users\monee\Desktop\Project Slum\tools\fix_future_imports.py
-----------------------------
> """
  Moves `from __future__ import annotations` to the earliest legal spot in 
app/safety/safety.py:
  - Keeps an optional module docstring at very top
  - Ensures no code/imports appear before the future import
def is_doc_start(line: str) -> bool:

C:\Users\monee\Desktop\Project Slum\tools\fix_json_no_bom.py
-----------------------------
def rewrite_no_bom(p: Path) -> None:
def main():

C:\Users\monee\Desktop\Project Slum\tools\progress_audit.py
-----------------------------
> """
  Progress Auditor for Project SLUM
  
  - Scans the project tree (excluding .venv)
def _normalize_pattern(p: str) -> str:
def _safe_glob(root: Path, pattern: str):
def path_exists_any(pattern: str, root: Path) -> bool:
def score_module(indicators: List[str], root: Path) -> Tuple[int, int]:
def main() -> int:

C:\Users\monee\Desktop\Project Slum\tools\stub_reality_check.py
-----------------------------
> """
  Stub & Reality Check for Project SLUM
  
  - Scans code (excluding .venv) for common stub markers:
def iter_files() -> List[Path]:
def analyze_file(path: Path) -> Dict[str, int | bool]:
def belongs_to_module(path: Path) -> List[str]:
def main() -> int:

C:\Users\monee\Desktop\Project Slum\ui\Home.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\conftest.py
-----------------------------

C:\Users\monee\Desktop\Project Slum\Home.py
-----------------------------



